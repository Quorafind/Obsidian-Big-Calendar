"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var require$$0 = require("obsidian");
function _interopDefaultLegacy(e) {
  return e && typeof e === "object" && "default" in e ? e : { "default": e };
}
var require$$0__default = /* @__PURE__ */ _interopDefaultLegacy(require$$0);
const CALENDAR_VIEW_TYPE = "big-calendar";
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
function getAugmentedNamespace(n2) {
  if (n2.__esModule)
    return n2;
  var a = Object.defineProperty({}, "__esModule", { value: true });
  Object.keys(n2).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n2, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n2[k];
      }
    });
  });
  return a;
}
var _react_17_0_2_react = { exports: {} };
var react_production_min = {};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$n = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === void 0) {
    throw new TypeError("Object.assign cannot be called with null or undefined");
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String("abc");
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2["_" + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
      return test2[n2];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var _objectAssign_4_1_1_objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty$n.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l = _objectAssign_4_1_1_objectAssign, n$1 = 60103, p$1 = 60106;
react_production_min.Fragment = 60107;
react_production_min.StrictMode = 60108;
react_production_min.Profiler = 60114;
var q$1 = 60109, r$1 = 60110, t$1 = 60112;
react_production_min.Suspense = 60113;
var u = 60115, v = 60116;
if (typeof Symbol === "function" && Symbol.for) {
  var w = Symbol.for;
  n$1 = w("react.element");
  p$1 = w("react.portal");
  react_production_min.Fragment = w("react.fragment");
  react_production_min.StrictMode = w("react.strict_mode");
  react_production_min.Profiler = w("react.profiler");
  q$1 = w("react.provider");
  r$1 = w("react.context");
  t$1 = w("react.forward_ref");
  react_production_min.Suspense = w("react.suspense");
  u = w("react.memo");
  v = w("react.lazy");
}
var x = typeof Symbol === "function" && Symbol.iterator;
function y$1(a) {
  if (a === null || typeof a !== "object")
    return null;
  a = x && a[x] || a["@@iterator"];
  return typeof a === "function" ? a : null;
}
function z(a) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
    b += "&args[]=" + encodeURIComponent(arguments[c]);
  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var A = { isMounted: function() {
  return false;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, B$1 = {};
function C(a, b, c) {
  this.props = a;
  this.context = b;
  this.refs = B$1;
  this.updater = c || A;
}
C.prototype.isReactComponent = {};
C.prototype.setState = function(a, b) {
  if (typeof a !== "object" && typeof a !== "function" && a != null)
    throw Error(z(85));
  this.updater.enqueueSetState(this, a, b, "setState");
};
C.prototype.forceUpdate = function(a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function D$1() {
}
D$1.prototype = C.prototype;
function E$1(a, b, c) {
  this.props = a;
  this.context = b;
  this.refs = B$1;
  this.updater = c || A;
}
var F$1 = E$1.prototype = new D$1();
F$1.constructor = E$1;
l(F$1, C.prototype);
F$1.isPureReactComponent = true;
var G$1 = { current: null }, H$1 = Object.prototype.hasOwnProperty, I$1 = { key: true, ref: true, __self: true, __source: true };
function J(a, b, c) {
  var e, d = {}, k = null, h2 = null;
  if (b != null)
    for (e in b.ref !== void 0 && (h2 = b.ref), b.key !== void 0 && (k = "" + b.key), b)
      H$1.call(b, e) && !I$1.hasOwnProperty(e) && (d[e] = b[e]);
  var g2 = arguments.length - 2;
  if (g2 === 1)
    d.children = c;
  else if (1 < g2) {
    for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
      f2[m2] = arguments[m2 + 2];
    d.children = f2;
  }
  if (a && a.defaultProps)
    for (e in g2 = a.defaultProps, g2)
      d[e] === void 0 && (d[e] = g2[e]);
  return { $$typeof: n$1, type: a, key: k, ref: h2, props: d, _owner: G$1.current };
}
function K(a, b) {
  return { $$typeof: n$1, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
}
function L(a) {
  return typeof a === "object" && a !== null && a.$$typeof === n$1;
}
function escape(a) {
  var b = { "=": "=0", ":": "=2" };
  return "$" + a.replace(/[=:]/g, function(a2) {
    return b[a2];
  });
}
var M$1 = /\/+/g;
function N$1(a, b) {
  return typeof a === "object" && a !== null && a.key != null ? escape("" + a.key) : b.toString(36);
}
function O$1(a, b, c, e, d) {
  var k = typeof a;
  if (k === "undefined" || k === "boolean")
    a = null;
  var h2 = false;
  if (a === null)
    h2 = true;
  else
    switch (k) {
      case "string":
      case "number":
        h2 = true;
        break;
      case "object":
        switch (a.$$typeof) {
          case n$1:
          case p$1:
            h2 = true;
        }
    }
  if (h2)
    return h2 = a, d = d(h2), a = e === "" ? "." + N$1(h2, 0) : e, Array.isArray(d) ? (c = "", a != null && (c = a.replace(M$1, "$&/") + "/"), O$1(d, b, c, "", function(a2) {
      return a2;
    })) : d != null && (L(d) && (d = K(d, c + (!d.key || h2 && h2.key === d.key ? "" : ("" + d.key).replace(M$1, "$&/") + "/") + a)), b.push(d)), 1;
  h2 = 0;
  e = e === "" ? "." : e + ":";
  if (Array.isArray(a))
    for (var g2 = 0; g2 < a.length; g2++) {
      k = a[g2];
      var f2 = e + N$1(k, g2);
      h2 += O$1(k, b, c, f2, d);
    }
  else if (f2 = y$1(a), typeof f2 === "function")
    for (a = f2.call(a), g2 = 0; !(k = a.next()).done; )
      k = k.value, f2 = e + N$1(k, g2++), h2 += O$1(k, b, c, f2, d);
  else if (k === "object")
    throw b = "" + a, Error(z(31, b === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
  return h2;
}
function P$1(a, b, c) {
  if (a == null)
    return a;
  var e = [], d = 0;
  O$1(a, e, "", "", function(a2) {
    return b.call(c, a2, d++);
  });
  return e;
}
function Q(a) {
  if (a._status === -1) {
    var b = a._result;
    b = b();
    a._status = 0;
    a._result = b;
    b.then(function(b2) {
      a._status === 0 && (b2 = b2.default, a._status = 1, a._result = b2);
    }, function(b2) {
      a._status === 0 && (a._status = 2, a._result = b2);
    });
  }
  if (a._status === 1)
    return a._result;
  throw a._result;
}
var R$1 = { current: null };
function S$1() {
  var a = R$1.current;
  if (a === null)
    throw Error(z(321));
  return a;
}
var T$1 = { ReactCurrentDispatcher: R$1, ReactCurrentBatchConfig: { transition: 0 }, ReactCurrentOwner: G$1, IsSomeRendererActing: { current: false }, assign: l };
react_production_min.Children = { map: P$1, forEach: function(a, b, c) {
  P$1(a, function() {
    b.apply(this, arguments);
  }, c);
}, count: function(a) {
  var b = 0;
  P$1(a, function() {
    b++;
  });
  return b;
}, toArray: function(a) {
  return P$1(a, function(a2) {
    return a2;
  }) || [];
}, only: function(a) {
  if (!L(a))
    throw Error(z(143));
  return a;
} };
react_production_min.Component = C;
react_production_min.PureComponent = E$1;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T$1;
react_production_min.cloneElement = function(a, b, c) {
  if (a === null || a === void 0)
    throw Error(z(267, a));
  var e = l({}, a.props), d = a.key, k = a.ref, h2 = a._owner;
  if (b != null) {
    b.ref !== void 0 && (k = b.ref, h2 = G$1.current);
    b.key !== void 0 && (d = "" + b.key);
    if (a.type && a.type.defaultProps)
      var g2 = a.type.defaultProps;
    for (f2 in b)
      H$1.call(b, f2) && !I$1.hasOwnProperty(f2) && (e[f2] = b[f2] === void 0 && g2 !== void 0 ? g2[f2] : b[f2]);
  }
  var f2 = arguments.length - 2;
  if (f2 === 1)
    e.children = c;
  else if (1 < f2) {
    g2 = Array(f2);
    for (var m2 = 0; m2 < f2; m2++)
      g2[m2] = arguments[m2 + 2];
    e.children = g2;
  }
  return {
    $$typeof: n$1,
    type: a.type,
    key: d,
    ref: k,
    props: e,
    _owner: h2
  };
};
react_production_min.createContext = function(a, b) {
  b === void 0 && (b = null);
  a = { $$typeof: r$1, _calculateChangedBits: b, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null };
  a.Provider = { $$typeof: q$1, _context: a };
  return a.Consumer = a;
};
react_production_min.createElement = J;
react_production_min.createFactory = function(a) {
  var b = J.bind(null, a);
  b.type = a;
  return b;
};
react_production_min.createRef = function() {
  return { current: null };
};
react_production_min.forwardRef = function(a) {
  return { $$typeof: t$1, render: a };
};
react_production_min.isValidElement = L;
react_production_min.lazy = function(a) {
  return { $$typeof: v, _payload: { _status: -1, _result: a }, _init: Q };
};
react_production_min.memo = function(a, b) {
  return { $$typeof: u, type: a, compare: b === void 0 ? null : b };
};
react_production_min.useCallback = function(a, b) {
  return S$1().useCallback(a, b);
};
react_production_min.useContext = function(a, b) {
  return S$1().useContext(a, b);
};
react_production_min.useDebugValue = function() {
};
react_production_min.useEffect = function(a, b) {
  return S$1().useEffect(a, b);
};
react_production_min.useImperativeHandle = function(a, b, c) {
  return S$1().useImperativeHandle(a, b, c);
};
react_production_min.useLayoutEffect = function(a, b) {
  return S$1().useLayoutEffect(a, b);
};
react_production_min.useMemo = function(a, b) {
  return S$1().useMemo(a, b);
};
react_production_min.useReducer = function(a, b, c) {
  return S$1().useReducer(a, b, c);
};
react_production_min.useRef = function(a) {
  return S$1().useRef(a);
};
react_production_min.useState = function(a) {
  return S$1().useState(a);
};
react_production_min.version = "17.0.2";
{
  _react_17_0_2_react.exports = react_production_min;
}
var React = _react_17_0_2_react.exports;
var _reactDom_17_0_2_reactDom = { exports: {} };
var reactDom_production_min = {};
var _scheduler_0_20_2_scheduler = { exports: {} };
var scheduler_production_min = {};
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports2) {
  var f2, g2, h2, k;
  if (typeof performance === "object" && typeof performance.now === "function") {
    var l2 = performance;
    exports2.unstable_now = function() {
      return l2.now();
    };
  } else {
    var p2 = Date, q2 = p2.now();
    exports2.unstable_now = function() {
      return p2.now() - q2;
    };
  }
  if (typeof window === "undefined" || typeof MessageChannel !== "function") {
    var t2 = null, u2 = null, w2 = function() {
      if (t2 !== null)
        try {
          var a = exports2.unstable_now();
          t2(true, a);
          t2 = null;
        } catch (b) {
          throw setTimeout(w2, 0), b;
        }
    };
    f2 = function(a) {
      t2 !== null ? setTimeout(f2, 0, a) : (t2 = a, setTimeout(w2, 0));
    };
    g2 = function(a, b) {
      u2 = setTimeout(a, b);
    };
    h2 = function() {
      clearTimeout(u2);
    };
    exports2.unstable_shouldYield = function() {
      return false;
    };
    k = exports2.unstable_forceFrameRate = function() {
    };
  } else {
    var x2 = window.setTimeout, y2 = window.clearTimeout;
    if (typeof console !== "undefined") {
      var z2 = window.cancelAnimationFrame;
      typeof window.requestAnimationFrame !== "function" && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
      typeof z2 !== "function" && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    }
    var A2 = false, B2 = null, C2 = -1, D2 = 5, E2 = 0;
    exports2.unstable_shouldYield = function() {
      return exports2.unstable_now() >= E2;
    };
    k = function() {
    };
    exports2.unstable_forceFrameRate = function(a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D2 = 0 < a ? Math.floor(1e3 / a) : 5;
    };
    var F2 = new MessageChannel(), G2 = F2.port2;
    F2.port1.onmessage = function() {
      if (B2 !== null) {
        var a = exports2.unstable_now();
        E2 = a + D2;
        try {
          B2(true, a) ? G2.postMessage(null) : (A2 = false, B2 = null);
        } catch (b) {
          throw G2.postMessage(null), b;
        }
      } else
        A2 = false;
    };
    f2 = function(a) {
      B2 = a;
      A2 || (A2 = true, G2.postMessage(null));
    };
    g2 = function(a, b) {
      C2 = x2(function() {
        a(exports2.unstable_now());
      }, b);
    };
    h2 = function() {
      y2(C2);
      C2 = -1;
    };
  }
  function H2(a, b) {
    var c = a.length;
    a.push(b);
    a:
      for (; ; ) {
        var d = c - 1 >>> 1, e = a[d];
        if (e !== void 0 && 0 < I2(e, b))
          a[d] = b, a[c] = e, c = d;
        else
          break a;
      }
  }
  function J2(a) {
    a = a[0];
    return a === void 0 ? null : a;
  }
  function K2(a) {
    var b = a[0];
    if (b !== void 0) {
      var c = a.pop();
      if (c !== b) {
        a[0] = c;
        a:
          for (var d = 0, e = a.length; d < e; ) {
            var m2 = 2 * (d + 1) - 1, n2 = a[m2], v2 = m2 + 1, r2 = a[v2];
            if (n2 !== void 0 && 0 > I2(n2, c))
              r2 !== void 0 && 0 > I2(r2, n2) ? (a[d] = r2, a[v2] = c, d = v2) : (a[d] = n2, a[m2] = c, d = m2);
            else if (r2 !== void 0 && 0 > I2(r2, c))
              a[d] = r2, a[v2] = c, d = v2;
            else
              break a;
          }
      }
      return b;
    }
    return null;
  }
  function I2(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return c !== 0 ? c : a.id - b.id;
  }
  var L2 = [], M2 = [], N2 = 1, O2 = null, P2 = 3, Q2 = false, R2 = false, S2 = false;
  function T2(a) {
    for (var b = J2(M2); b !== null; ) {
      if (b.callback === null)
        K2(M2);
      else if (b.startTime <= a)
        K2(M2), b.sortIndex = b.expirationTime, H2(L2, b);
      else
        break;
      b = J2(M2);
    }
  }
  function U2(a) {
    S2 = false;
    T2(a);
    if (!R2)
      if (J2(L2) !== null)
        R2 = true, f2(V2);
      else {
        var b = J2(M2);
        b !== null && g2(U2, b.startTime - a);
      }
  }
  function V2(a, b) {
    R2 = false;
    S2 && (S2 = false, h2());
    Q2 = true;
    var c = P2;
    try {
      T2(b);
      for (O2 = J2(L2); O2 !== null && (!(O2.expirationTime > b) || a && !exports2.unstable_shouldYield()); ) {
        var d = O2.callback;
        if (typeof d === "function") {
          O2.callback = null;
          P2 = O2.priorityLevel;
          var e = d(O2.expirationTime <= b);
          b = exports2.unstable_now();
          typeof e === "function" ? O2.callback = e : O2 === J2(L2) && K2(L2);
          T2(b);
        } else
          K2(L2);
        O2 = J2(L2);
      }
      if (O2 !== null)
        var m2 = true;
      else {
        var n2 = J2(M2);
        n2 !== null && g2(U2, n2.startTime - b);
        m2 = false;
      }
      return m2;
    } finally {
      O2 = null, P2 = c, Q2 = false;
    }
  }
  var W2 = k;
  exports2.unstable_IdlePriority = 5;
  exports2.unstable_ImmediatePriority = 1;
  exports2.unstable_LowPriority = 4;
  exports2.unstable_NormalPriority = 3;
  exports2.unstable_Profiling = null;
  exports2.unstable_UserBlockingPriority = 2;
  exports2.unstable_cancelCallback = function(a) {
    a.callback = null;
  };
  exports2.unstable_continueExecution = function() {
    R2 || Q2 || (R2 = true, f2(V2));
  };
  exports2.unstable_getCurrentPriorityLevel = function() {
    return P2;
  };
  exports2.unstable_getFirstCallbackNode = function() {
    return J2(L2);
  };
  exports2.unstable_next = function(a) {
    switch (P2) {
      case 1:
      case 2:
      case 3:
        var b = 3;
        break;
      default:
        b = P2;
    }
    var c = P2;
    P2 = b;
    try {
      return a();
    } finally {
      P2 = c;
    }
  };
  exports2.unstable_pauseExecution = function() {
  };
  exports2.unstable_requestPaint = W2;
  exports2.unstable_runWithPriority = function(a, b) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a = 3;
    }
    var c = P2;
    P2 = a;
    try {
      return b();
    } finally {
      P2 = c;
    }
  };
  exports2.unstable_scheduleCallback = function(a, b, c) {
    var d = exports2.unstable_now();
    typeof c === "object" && c !== null ? (c = c.delay, c = typeof c === "number" && 0 < c ? d + c : d) : c = d;
    switch (a) {
      case 1:
        var e = -1;
        break;
      case 2:
        e = 250;
        break;
      case 5:
        e = 1073741823;
        break;
      case 4:
        e = 1e4;
        break;
      default:
        e = 5e3;
    }
    e = c + e;
    a = { id: N2++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
    c > d ? (a.sortIndex = c, H2(M2, a), J2(L2) === null && a === J2(M2) && (S2 ? h2() : S2 = true, g2(U2, c - d))) : (a.sortIndex = e, H2(L2, a), R2 || Q2 || (R2 = true, f2(V2)));
    return a;
  };
  exports2.unstable_wrapCallback = function(a) {
    var b = P2;
    return function() {
      var c = P2;
      P2 = b;
      try {
        return a.apply(this, arguments);
      } finally {
        P2 = c;
      }
    };
  };
})(scheduler_production_min);
{
  _scheduler_0_20_2_scheduler.exports = scheduler_production_min;
}
/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = _react_17_0_2_react.exports, m$1 = _objectAssign_4_1_1_objectAssign, r = _scheduler_0_20_2_scheduler.exports;
function y(a) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
    b += "&args[]=" + encodeURIComponent(arguments[c]);
  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
if (!aa)
  throw Error(y(227));
var ba = new Set(), ca = {};
function da$1(a, b) {
  ea(a, b);
  ea(a + "Capture", b);
}
function ea(a, b) {
  ca[a] = b;
  for (a = 0; a < b.length; a++)
    ba.add(b[a]);
}
var fa = !(typeof window === "undefined" || typeof window.document === "undefined" || typeof window.document.createElement === "undefined"), ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, ia = Object.prototype.hasOwnProperty, ja$1 = {}, ka = {};
function la(a) {
  if (ia.call(ka, a))
    return true;
  if (ia.call(ja$1, a))
    return false;
  if (ha.test(a))
    return ka[a] = true;
  ja$1[a] = true;
  return false;
}
function ma(a, b, c, d) {
  if (c !== null && c.type === 0)
    return false;
  switch (typeof b) {
    case "function":
    case "symbol":
      return true;
    case "boolean":
      if (d)
        return false;
      if (c !== null)
        return !c.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return a !== "data-" && a !== "aria-";
    default:
      return false;
  }
}
function na(a, b, c, d) {
  if (b === null || typeof b === "undefined" || ma(a, b, c, d))
    return true;
  if (d)
    return false;
  if (c !== null)
    switch (c.type) {
      case 3:
        return !b;
      case 4:
        return b === false;
      case 5:
        return isNaN(b);
      case 6:
        return isNaN(b) || 1 > b;
    }
  return false;
}
function B(a, b, c, d, e, f2, g2) {
  this.acceptsBooleans = b === 2 || b === 3 || b === 4;
  this.attributeName = d;
  this.attributeNamespace = e;
  this.mustUseProperty = c;
  this.propertyName = a;
  this.type = b;
  this.sanitizeURL = f2;
  this.removeEmptyString = g2;
}
var D = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
  D[a] = new B(a, 0, false, a, null, false, false);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
  var b = a[0];
  D[b] = new B(b, 1, false, a[1], null, false, false);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
  D[a] = new B(a, 2, false, a.toLowerCase(), null, false, false);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
  D[a] = new B(a, 2, false, a, null, false, false);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
  D[a] = new B(a, 3, false, a.toLowerCase(), null, false, false);
});
["checked", "multiple", "muted", "selected"].forEach(function(a) {
  D[a] = new B(a, 3, true, a, null, false, false);
});
["capture", "download"].forEach(function(a) {
  D[a] = new B(a, 4, false, a, null, false, false);
});
["cols", "rows", "size", "span"].forEach(function(a) {
  D[a] = new B(a, 6, false, a, null, false, false);
});
["rowSpan", "start"].forEach(function(a) {
  D[a] = new B(a, 5, false, a.toLowerCase(), null, false, false);
});
var oa = /[\-:]([a-z])/g;
function pa(a) {
  return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
  var b = a.replace(oa, pa);
  D[b] = new B(b, 1, false, a, null, false, false);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
  var b = a.replace(oa, pa);
  D[b] = new B(b, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
  var b = a.replace(oa, pa);
  D[b] = new B(b, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
});
["tabIndex", "crossOrigin"].forEach(function(a) {
  D[a] = new B(a, 1, false, a.toLowerCase(), null, false, false);
});
D.xlinkHref = new B("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
["src", "href", "action", "formAction"].forEach(function(a) {
  D[a] = new B(a, 1, false, a.toLowerCase(), null, true, true);
});
function qa(a, b, c, d) {
  var e = D.hasOwnProperty(b) ? D[b] : null;
  var f2 = e !== null ? e.type === 0 : d ? false : !(2 < b.length) || b[0] !== "o" && b[0] !== "O" || b[1] !== "n" && b[1] !== "N" ? false : true;
  f2 || (na(b, c, e, d) && (c = null), d || e === null ? la(b) && (c === null ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = c === null ? e.type === 3 ? false : "" : c : (b = e.attributeName, d = e.attributeNamespace, c === null ? a.removeAttribute(b) : (e = e.type, c = e === 3 || e === 4 && c === true ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
}
var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, sa = 60103, ta = 60106, ua = 60107, wa = 60108, xa = 60114, ya = 60109, za = 60110, Aa = 60112, Ba = 60113, Ca = 60120, Da = 60115, Ea = 60116, Fa = 60121, Ga = 60128, Ha = 60129, Ia = 60130, Ja = 60131;
if (typeof Symbol === "function" && Symbol.for) {
  var E = Symbol.for;
  sa = E("react.element");
  ta = E("react.portal");
  ua = E("react.fragment");
  wa = E("react.strict_mode");
  xa = E("react.profiler");
  ya = E("react.provider");
  za = E("react.context");
  Aa = E("react.forward_ref");
  Ba = E("react.suspense");
  Ca = E("react.suspense_list");
  Da = E("react.memo");
  Ea = E("react.lazy");
  Fa = E("react.block");
  E("react.scope");
  Ga = E("react.opaque.id");
  Ha = E("react.debug_trace_mode");
  Ia = E("react.offscreen");
  Ja = E("react.legacy_hidden");
}
var Ka = typeof Symbol === "function" && Symbol.iterator;
function La(a) {
  if (a === null || typeof a !== "object")
    return null;
  a = Ka && a[Ka] || a["@@iterator"];
  return typeof a === "function" ? a : null;
}
var Ma;
function Na(a) {
  if (Ma === void 0)
    try {
      throw Error();
    } catch (c) {
      var b = c.stack.trim().match(/\n( *(at )?)/);
      Ma = b && b[1] || "";
    }
  return "\n" + Ma + a;
}
var Oa = false;
function Pa(a, b) {
  if (!a || Oa)
    return "";
  Oa = true;
  var c = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b)
      if (b = function() {
        throw Error();
      }, Object.defineProperty(b.prototype, "props", { set: function() {
        throw Error();
      } }), typeof Reflect === "object" && Reflect.construct) {
        try {
          Reflect.construct(b, []);
        } catch (k) {
          var d = k;
        }
        Reflect.construct(a, [], b);
      } else {
        try {
          b.call();
        } catch (k) {
          d = k;
        }
        a.call(b.prototype);
      }
    else {
      try {
        throw Error();
      } catch (k) {
        d = k;
      }
      a();
    }
  } catch (k) {
    if (k && d && typeof k.stack === "string") {
      for (var e = k.stack.split("\n"), f2 = d.stack.split("\n"), g2 = e.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e[g2] !== f2[h2]; )
        h2--;
      for (; 1 <= g2 && 0 <= h2; g2--, h2--)
        if (e[g2] !== f2[h2]) {
          if (g2 !== 1 || h2 !== 1) {
            do
              if (g2--, h2--, 0 > h2 || e[g2] !== f2[h2])
                return "\n" + e[g2].replace(" at new ", " at ");
            while (1 <= g2 && 0 <= h2);
          }
          break;
        }
    }
  } finally {
    Oa = false, Error.prepareStackTrace = c;
  }
  return (a = a ? a.displayName || a.name : "") ? Na(a) : "";
}
function Qa(a) {
  switch (a.tag) {
    case 5:
      return Na(a.type);
    case 16:
      return Na("Lazy");
    case 13:
      return Na("Suspense");
    case 19:
      return Na("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a = Pa(a.type, false), a;
    case 11:
      return a = Pa(a.type.render, false), a;
    case 22:
      return a = Pa(a.type._render, false), a;
    case 1:
      return a = Pa(a.type, true), a;
    default:
      return "";
  }
}
function Ra(a) {
  if (a == null)
    return null;
  if (typeof a === "function")
    return a.displayName || a.name || null;
  if (typeof a === "string")
    return a;
  switch (a) {
    case ua:
      return "Fragment";
    case ta:
      return "Portal";
    case xa:
      return "Profiler";
    case wa:
      return "StrictMode";
    case Ba:
      return "Suspense";
    case Ca:
      return "SuspenseList";
  }
  if (typeof a === "object")
    switch (a.$$typeof) {
      case za:
        return (a.displayName || "Context") + ".Consumer";
      case ya:
        return (a._context.displayName || "Context") + ".Provider";
      case Aa:
        var b = a.render;
        b = b.displayName || b.name || "";
        return a.displayName || (b !== "" ? "ForwardRef(" + b + ")" : "ForwardRef");
      case Da:
        return Ra(a.type);
      case Fa:
        return Ra(a._render);
      case Ea:
        b = a._payload;
        a = a._init;
        try {
          return Ra(a(b));
        } catch (c) {
        }
    }
  return null;
}
function Sa(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "object":
    case "string":
    case "undefined":
      return a;
    default:
      return "";
  }
}
function Ta(a) {
  var b = a.type;
  return (a = a.nodeName) && a.toLowerCase() === "input" && (b === "checkbox" || b === "radio");
}
function Ua(a) {
  var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
  if (!a.hasOwnProperty(b) && typeof c !== "undefined" && typeof c.get === "function" && typeof c.set === "function") {
    var e = c.get, f2 = c.set;
    Object.defineProperty(a, b, { configurable: true, get: function() {
      return e.call(this);
    }, set: function(a2) {
      d = "" + a2;
      f2.call(this, a2);
    } });
    Object.defineProperty(a, b, { enumerable: c.enumerable });
    return { getValue: function() {
      return d;
    }, setValue: function(a2) {
      d = "" + a2;
    }, stopTracking: function() {
      a._valueTracker = null;
      delete a[b];
    } };
  }
}
function Va(a) {
  a._valueTracker || (a._valueTracker = Ua(a));
}
function Wa(a) {
  if (!a)
    return false;
  var b = a._valueTracker;
  if (!b)
    return true;
  var c = b.getValue();
  var d = "";
  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
  a = d;
  return a !== c ? (b.setValue(a), true) : false;
}
function Xa(a) {
  a = a || (typeof document !== "undefined" ? document : void 0);
  if (typeof a === "undefined")
    return null;
  try {
    return a.activeElement || a.body;
  } catch (b) {
    return a.body;
  }
}
function Ya(a, b) {
  var c = b.checked;
  return m$1({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: c != null ? c : a._wrapperState.initialChecked });
}
function Za(a, b) {
  var c = b.defaultValue == null ? "" : b.defaultValue, d = b.checked != null ? b.checked : b.defaultChecked;
  c = Sa(b.value != null ? b.value : c);
  a._wrapperState = { initialChecked: d, initialValue: c, controlled: b.type === "checkbox" || b.type === "radio" ? b.checked != null : b.value != null };
}
function $a(a, b) {
  b = b.checked;
  b != null && qa(a, "checked", b, false);
}
function ab(a, b) {
  $a(a, b);
  var c = Sa(b.value), d = b.type;
  if (c != null)
    if (d === "number") {
      if (c === 0 && a.value === "" || a.value != c)
        a.value = "" + c;
    } else
      a.value !== "" + c && (a.value = "" + c);
  else if (d === "submit" || d === "reset") {
    a.removeAttribute("value");
    return;
  }
  b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue));
  b.checked == null && b.defaultChecked != null && (a.defaultChecked = !!b.defaultChecked);
}
function cb(a, b, c) {
  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
    var d = b.type;
    if (!(d !== "submit" && d !== "reset" || b.value !== void 0 && b.value !== null))
      return;
    b = "" + a._wrapperState.initialValue;
    c || b === a.value || (a.value = b);
    a.defaultValue = b;
  }
  c = a.name;
  c !== "" && (a.name = "");
  a.defaultChecked = !!a._wrapperState.initialChecked;
  c !== "" && (a.name = c);
}
function bb(a, b, c) {
  if (b !== "number" || Xa(a.ownerDocument) !== a)
    c == null ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}
function db(a) {
  var b = "";
  aa.Children.forEach(a, function(a2) {
    a2 != null && (b += a2);
  });
  return b;
}
function eb(a, b) {
  a = m$1({ children: void 0 }, b);
  if (b = db(b.children))
    a.children = b;
  return a;
}
function fb(a, b, c, d) {
  a = a.options;
  if (b) {
    b = {};
    for (var e = 0; e < c.length; e++)
      b["$" + c[e]] = true;
    for (c = 0; c < a.length; c++)
      e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = true);
  } else {
    c = "" + Sa(c);
    b = null;
    for (e = 0; e < a.length; e++) {
      if (a[e].value === c) {
        a[e].selected = true;
        d && (a[e].defaultSelected = true);
        return;
      }
      b !== null || a[e].disabled || (b = a[e]);
    }
    b !== null && (b.selected = true);
  }
}
function gb(a, b) {
  if (b.dangerouslySetInnerHTML != null)
    throw Error(y(91));
  return m$1({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
}
function hb(a, b) {
  var c = b.value;
  if (c == null) {
    c = b.children;
    b = b.defaultValue;
    if (c != null) {
      if (b != null)
        throw Error(y(92));
      if (Array.isArray(c)) {
        if (!(1 >= c.length))
          throw Error(y(93));
        c = c[0];
      }
      b = c;
    }
    b == null && (b = "");
    c = b;
  }
  a._wrapperState = { initialValue: Sa(c) };
}
function ib(a, b) {
  var c = Sa(b.value), d = Sa(b.defaultValue);
  c != null && (c = "" + c, c !== a.value && (a.value = c), b.defaultValue == null && a.defaultValue !== c && (a.defaultValue = c));
  d != null && (a.defaultValue = "" + d);
}
function jb(a) {
  var b = a.textContent;
  b === a._wrapperState.initialValue && b !== "" && b !== null && (a.value = b);
}
var kb = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
function lb(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function mb(a, b) {
  return a == null || a === "http://www.w3.org/1999/xhtml" ? lb(b) : a === "http://www.w3.org/2000/svg" && b === "foreignObject" ? "http://www.w3.org/1999/xhtml" : a;
}
var nb, ob = function(a) {
  return typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
    MSApp.execUnsafeLocalFunction(function() {
      return a(b, c, d, e);
    });
  } : a;
}(function(a, b) {
  if (a.namespaceURI !== kb.svg || "innerHTML" in a)
    a.innerHTML = b;
  else {
    nb = nb || document.createElement("div");
    nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
    for (b = nb.firstChild; a.firstChild; )
      a.removeChild(a.firstChild);
    for (; b.firstChild; )
      a.appendChild(b.firstChild);
  }
});
function pb(a, b) {
  if (b) {
    var c = a.firstChild;
    if (c && c === a.lastChild && c.nodeType === 3) {
      c.nodeValue = b;
      return;
    }
  }
  a.textContent = b;
}
var qb = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
}, rb = ["Webkit", "ms", "Moz", "O"];
Object.keys(qb).forEach(function(a) {
  rb.forEach(function(b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);
    qb[b] = qb[a];
  });
});
function sb(a, b, c) {
  return b == null || typeof b === "boolean" || b === "" ? "" : c || typeof b !== "number" || b === 0 || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";
}
function tb(a, b) {
  a = a.style;
  for (var c in b)
    if (b.hasOwnProperty(c)) {
      var d = c.indexOf("--") === 0, e = sb(c, b[c], d);
      c === "float" && (c = "cssFloat");
      d ? a.setProperty(c, e) : a[c] = e;
    }
}
var ub = m$1({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
function vb(a, b) {
  if (b) {
    if (ub[a] && (b.children != null || b.dangerouslySetInnerHTML != null))
      throw Error(y(137, a));
    if (b.dangerouslySetInnerHTML != null) {
      if (b.children != null)
        throw Error(y(60));
      if (!(typeof b.dangerouslySetInnerHTML === "object" && "__html" in b.dangerouslySetInnerHTML))
        throw Error(y(61));
    }
    if (b.style != null && typeof b.style !== "object")
      throw Error(y(62));
  }
}
function wb(a, b) {
  if (a.indexOf("-") === -1)
    return typeof b.is === "string";
  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
function xb(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return a.nodeType === 3 ? a.parentNode : a;
}
var yb = null, zb = null, Ab = null;
function Bb(a) {
  if (a = Cb(a)) {
    if (typeof yb !== "function")
      throw Error(y(280));
    var b = a.stateNode;
    b && (b = Db(b), yb(a.stateNode, a.type, b));
  }
}
function Eb(a) {
  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
}
function Fb() {
  if (zb) {
    var a = zb, b = Ab;
    Ab = zb = null;
    Bb(a);
    if (b)
      for (a = 0; a < b.length; a++)
        Bb(b[a]);
  }
}
function Gb(a, b) {
  return a(b);
}
function Hb(a, b, c, d, e) {
  return a(b, c, d, e);
}
function Ib() {
}
var Jb = Gb, Kb = false, Lb = false;
function Mb() {
  if (zb !== null || Ab !== null)
    Ib(), Fb();
}
function Nb(a, b, c) {
  if (Lb)
    return a(b, c);
  Lb = true;
  try {
    return Jb(a, b, c);
  } finally {
    Lb = false, Mb();
  }
}
function Ob(a, b) {
  var c = a.stateNode;
  if (c === null)
    return null;
  var d = Db(c);
  if (d === null)
    return null;
  c = d[b];
  a:
    switch (b) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d = !d.disabled) || (a = a.type, d = !(a === "button" || a === "input" || a === "select" || a === "textarea"));
        a = !d;
        break a;
      default:
        a = false;
    }
  if (a)
    return null;
  if (c && typeof c !== "function")
    throw Error(y(231, b, typeof c));
  return c;
}
var Pb = false;
if (fa)
  try {
    var Qb = {};
    Object.defineProperty(Qb, "passive", { get: function() {
      Pb = true;
    } });
    window.addEventListener("test", Qb, Qb);
    window.removeEventListener("test", Qb, Qb);
  } catch (a) {
    Pb = false;
  }
function Rb(a, b, c, d, e, f2, g2, h2, k) {
  var l2 = Array.prototype.slice.call(arguments, 3);
  try {
    b.apply(c, l2);
  } catch (n2) {
    this.onError(n2);
  }
}
var Sb = false, Tb = null, Ub = false, Vb = null, Wb = { onError: function(a) {
  Sb = true;
  Tb = a;
} };
function Xb(a, b, c, d, e, f2, g2, h2, k) {
  Sb = false;
  Tb = null;
  Rb.apply(Wb, arguments);
}
function Yb(a, b, c, d, e, f2, g2, h2, k) {
  Xb.apply(this, arguments);
  if (Sb) {
    if (Sb) {
      var l2 = Tb;
      Sb = false;
      Tb = null;
    } else
      throw Error(y(198));
    Ub || (Ub = true, Vb = l2);
  }
}
function Zb(a) {
  var b = a, c = a;
  if (a.alternate)
    for (; b.return; )
      b = b.return;
  else {
    a = b;
    do
      b = a, (b.flags & 1026) !== 0 && (c = b.return), a = b.return;
    while (a);
  }
  return b.tag === 3 ? c : null;
}
function $b(a) {
  if (a.tag === 13) {
    var b = a.memoizedState;
    b === null && (a = a.alternate, a !== null && (b = a.memoizedState));
    if (b !== null)
      return b.dehydrated;
  }
  return null;
}
function ac(a) {
  if (Zb(a) !== a)
    throw Error(y(188));
}
function bc(a) {
  var b = a.alternate;
  if (!b) {
    b = Zb(a);
    if (b === null)
      throw Error(y(188));
    return b !== a ? null : a;
  }
  for (var c = a, d = b; ; ) {
    var e = c.return;
    if (e === null)
      break;
    var f2 = e.alternate;
    if (f2 === null) {
      d = e.return;
      if (d !== null) {
        c = d;
        continue;
      }
      break;
    }
    if (e.child === f2.child) {
      for (f2 = e.child; f2; ) {
        if (f2 === c)
          return ac(e), a;
        if (f2 === d)
          return ac(e), b;
        f2 = f2.sibling;
      }
      throw Error(y(188));
    }
    if (c.return !== d.return)
      c = e, d = f2;
    else {
      for (var g2 = false, h2 = e.child; h2; ) {
        if (h2 === c) {
          g2 = true;
          c = e;
          d = f2;
          break;
        }
        if (h2 === d) {
          g2 = true;
          d = e;
          c = f2;
          break;
        }
        h2 = h2.sibling;
      }
      if (!g2) {
        for (h2 = f2.child; h2; ) {
          if (h2 === c) {
            g2 = true;
            c = f2;
            d = e;
            break;
          }
          if (h2 === d) {
            g2 = true;
            d = f2;
            c = e;
            break;
          }
          h2 = h2.sibling;
        }
        if (!g2)
          throw Error(y(189));
      }
    }
    if (c.alternate !== d)
      throw Error(y(190));
  }
  if (c.tag !== 3)
    throw Error(y(188));
  return c.stateNode.current === c ? a : b;
}
function cc(a) {
  a = bc(a);
  if (!a)
    return null;
  for (var b = a; ; ) {
    if (b.tag === 5 || b.tag === 6)
      return b;
    if (b.child)
      b.child.return = b, b = b.child;
    else {
      if (b === a)
        break;
      for (; !b.sibling; ) {
        if (!b.return || b.return === a)
          return null;
        b = b.return;
      }
      b.sibling.return = b.return;
      b = b.sibling;
    }
  }
  return null;
}
function dc(a, b) {
  for (var c = a.alternate; b !== null; ) {
    if (b === a || b === c)
      return true;
    b = b.return;
  }
  return false;
}
var ec, fc, gc, hc, ic = false, jc = [], kc = null, lc = null, mc = null, nc = new Map(), oc = new Map(), pc = [], qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function rc(a, b, c, d, e) {
  return { blockedOn: a, domEventName: b, eventSystemFlags: c | 16, nativeEvent: e, targetContainers: [d] };
}
function sc(a, b) {
  switch (a) {
    case "focusin":
    case "focusout":
      kc = null;
      break;
    case "dragenter":
    case "dragleave":
      lc = null;
      break;
    case "mouseover":
    case "mouseout":
      mc = null;
      break;
    case "pointerover":
    case "pointerout":
      nc.delete(b.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      oc.delete(b.pointerId);
  }
}
function tc(a, b, c, d, e, f2) {
  if (a === null || a.nativeEvent !== f2)
    return a = rc(b, c, d, e, f2), b !== null && (b = Cb(b), b !== null && fc(b)), a;
  a.eventSystemFlags |= d;
  b = a.targetContainers;
  e !== null && b.indexOf(e) === -1 && b.push(e);
  return a;
}
function uc(a, b, c, d, e) {
  switch (b) {
    case "focusin":
      return kc = tc(kc, a, b, c, d, e), true;
    case "dragenter":
      return lc = tc(lc, a, b, c, d, e), true;
    case "mouseover":
      return mc = tc(mc, a, b, c, d, e), true;
    case "pointerover":
      var f2 = e.pointerId;
      nc.set(f2, tc(nc.get(f2) || null, a, b, c, d, e));
      return true;
    case "gotpointercapture":
      return f2 = e.pointerId, oc.set(f2, tc(oc.get(f2) || null, a, b, c, d, e)), true;
  }
  return false;
}
function vc(a) {
  var b = wc(a.target);
  if (b !== null) {
    var c = Zb(b);
    if (c !== null) {
      if (b = c.tag, b === 13) {
        if (b = $b(c), b !== null) {
          a.blockedOn = b;
          hc(a.lanePriority, function() {
            r.unstable_runWithPriority(a.priority, function() {
              gc(c);
            });
          });
          return;
        }
      } else if (b === 3 && c.stateNode.hydrate) {
        a.blockedOn = c.tag === 3 ? c.stateNode.containerInfo : null;
        return;
      }
    }
  }
  a.blockedOn = null;
}
function xc(a) {
  if (a.blockedOn !== null)
    return false;
  for (var b = a.targetContainers; 0 < b.length; ) {
    var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
    if (c !== null)
      return b = Cb(c), b !== null && fc(b), a.blockedOn = c, false;
    b.shift();
  }
  return true;
}
function zc(a, b, c) {
  xc(a) && c.delete(b);
}
function Ac() {
  for (ic = false; 0 < jc.length; ) {
    var a = jc[0];
    if (a.blockedOn !== null) {
      a = Cb(a.blockedOn);
      a !== null && ec(a);
      break;
    }
    for (var b = a.targetContainers; 0 < b.length; ) {
      var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
      if (c !== null) {
        a.blockedOn = c;
        break;
      }
      b.shift();
    }
    a.blockedOn === null && jc.shift();
  }
  kc !== null && xc(kc) && (kc = null);
  lc !== null && xc(lc) && (lc = null);
  mc !== null && xc(mc) && (mc = null);
  nc.forEach(zc);
  oc.forEach(zc);
}
function Bc(a, b) {
  a.blockedOn === b && (a.blockedOn = null, ic || (ic = true, r.unstable_scheduleCallback(r.unstable_NormalPriority, Ac)));
}
function Cc(a) {
  function b(b2) {
    return Bc(b2, a);
  }
  if (0 < jc.length) {
    Bc(jc[0], a);
    for (var c = 1; c < jc.length; c++) {
      var d = jc[c];
      d.blockedOn === a && (d.blockedOn = null);
    }
  }
  kc !== null && Bc(kc, a);
  lc !== null && Bc(lc, a);
  mc !== null && Bc(mc, a);
  nc.forEach(b);
  oc.forEach(b);
  for (c = 0; c < pc.length; c++)
    d = pc[c], d.blockedOn === a && (d.blockedOn = null);
  for (; 0 < pc.length && (c = pc[0], c.blockedOn === null); )
    vc(c), c.blockedOn === null && pc.shift();
}
function Dc(a, b) {
  var c = {};
  c[a.toLowerCase()] = b.toLowerCase();
  c["Webkit" + a] = "webkit" + b;
  c["Moz" + a] = "moz" + b;
  return c;
}
var Ec = { animationend: Dc("Animation", "AnimationEnd"), animationiteration: Dc("Animation", "AnimationIteration"), animationstart: Dc("Animation", "AnimationStart"), transitionend: Dc("Transition", "TransitionEnd") }, Fc = {}, Gc = {};
fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);
function Hc(a) {
  if (Fc[a])
    return Fc[a];
  if (!Ec[a])
    return a;
  var b = Ec[a], c;
  for (c in b)
    if (b.hasOwnProperty(c) && c in Gc)
      return Fc[a] = b[c];
  return a;
}
var Ic = Hc("animationend"), Jc = Hc("animationiteration"), Kc = Hc("animationstart"), Lc = Hc("transitionend"), Mc = new Map(), Nc = new Map(), Oc = [
  "abort",
  "abort",
  Ic,
  "animationEnd",
  Jc,
  "animationIteration",
  Kc,
  "animationStart",
  "canplay",
  "canPlay",
  "canplaythrough",
  "canPlayThrough",
  "durationchange",
  "durationChange",
  "emptied",
  "emptied",
  "encrypted",
  "encrypted",
  "ended",
  "ended",
  "error",
  "error",
  "gotpointercapture",
  "gotPointerCapture",
  "load",
  "load",
  "loadeddata",
  "loadedData",
  "loadedmetadata",
  "loadedMetadata",
  "loadstart",
  "loadStart",
  "lostpointercapture",
  "lostPointerCapture",
  "playing",
  "playing",
  "progress",
  "progress",
  "seeking",
  "seeking",
  "stalled",
  "stalled",
  "suspend",
  "suspend",
  "timeupdate",
  "timeUpdate",
  Lc,
  "transitionEnd",
  "waiting",
  "waiting"
];
function Pc(a, b) {
  for (var c = 0; c < a.length; c += 2) {
    var d = a[c], e = a[c + 1];
    e = "on" + (e[0].toUpperCase() + e.slice(1));
    Nc.set(d, b);
    Mc.set(d, e);
    da$1(e, [d]);
  }
}
var Qc = r.unstable_now;
Qc();
var F = 8;
function Rc(a) {
  if ((1 & a) !== 0)
    return F = 15, 1;
  if ((2 & a) !== 0)
    return F = 14, 2;
  if ((4 & a) !== 0)
    return F = 13, 4;
  var b = 24 & a;
  if (b !== 0)
    return F = 12, b;
  if ((a & 32) !== 0)
    return F = 11, 32;
  b = 192 & a;
  if (b !== 0)
    return F = 10, b;
  if ((a & 256) !== 0)
    return F = 9, 256;
  b = 3584 & a;
  if (b !== 0)
    return F = 8, b;
  if ((a & 4096) !== 0)
    return F = 7, 4096;
  b = 4186112 & a;
  if (b !== 0)
    return F = 6, b;
  b = 62914560 & a;
  if (b !== 0)
    return F = 5, b;
  if (a & 67108864)
    return F = 4, 67108864;
  if ((a & 134217728) !== 0)
    return F = 3, 134217728;
  b = 805306368 & a;
  if (b !== 0)
    return F = 2, b;
  if ((1073741824 & a) !== 0)
    return F = 1, 1073741824;
  F = 8;
  return a;
}
function Sc(a) {
  switch (a) {
    case 99:
      return 15;
    case 98:
      return 10;
    case 97:
    case 96:
      return 8;
    case 95:
      return 2;
    default:
      return 0;
  }
}
function Tc(a) {
  switch (a) {
    case 15:
    case 14:
      return 99;
    case 13:
    case 12:
    case 11:
    case 10:
      return 98;
    case 9:
    case 8:
    case 7:
    case 6:
    case 4:
    case 5:
      return 97;
    case 3:
    case 2:
    case 1:
      return 95;
    case 0:
      return 90;
    default:
      throw Error(y(358, a));
  }
}
function Uc(a, b) {
  var c = a.pendingLanes;
  if (c === 0)
    return F = 0;
  var d = 0, e = 0, f2 = a.expiredLanes, g2 = a.suspendedLanes, h2 = a.pingedLanes;
  if (f2 !== 0)
    d = f2, e = F = 15;
  else if (f2 = c & 134217727, f2 !== 0) {
    var k = f2 & ~g2;
    k !== 0 ? (d = Rc(k), e = F) : (h2 &= f2, h2 !== 0 && (d = Rc(h2), e = F));
  } else
    f2 = c & ~g2, f2 !== 0 ? (d = Rc(f2), e = F) : h2 !== 0 && (d = Rc(h2), e = F);
  if (d === 0)
    return 0;
  d = 31 - Vc(d);
  d = c & ((0 > d ? 0 : 1 << d) << 1) - 1;
  if (b !== 0 && b !== d && (b & g2) === 0) {
    Rc(b);
    if (e <= F)
      return b;
    F = e;
  }
  b = a.entangledLanes;
  if (b !== 0)
    for (a = a.entanglements, b &= d; 0 < b; )
      c = 31 - Vc(b), e = 1 << c, d |= a[c], b &= ~e;
  return d;
}
function Wc(a) {
  a = a.pendingLanes & -1073741825;
  return a !== 0 ? a : a & 1073741824 ? 1073741824 : 0;
}
function Xc(a, b) {
  switch (a) {
    case 15:
      return 1;
    case 14:
      return 2;
    case 12:
      return a = Yc(24 & ~b), a === 0 ? Xc(10, b) : a;
    case 10:
      return a = Yc(192 & ~b), a === 0 ? Xc(8, b) : a;
    case 8:
      return a = Yc(3584 & ~b), a === 0 && (a = Yc(4186112 & ~b), a === 0 && (a = 512)), a;
    case 2:
      return b = Yc(805306368 & ~b), b === 0 && (b = 268435456), b;
  }
  throw Error(y(358, a));
}
function Yc(a) {
  return a & -a;
}
function Zc(a) {
  for (var b = [], c = 0; 31 > c; c++)
    b.push(a);
  return b;
}
function $c(a, b, c) {
  a.pendingLanes |= b;
  var d = b - 1;
  a.suspendedLanes &= d;
  a.pingedLanes &= d;
  a = a.eventTimes;
  b = 31 - Vc(b);
  a[b] = c;
}
var Vc = Math.clz32 ? Math.clz32 : ad, bd = Math.log, cd = Math.LN2;
function ad(a) {
  return a === 0 ? 32 : 31 - (bd(a) / cd | 0) | 0;
}
var dd = r.unstable_UserBlockingPriority, ed = r.unstable_runWithPriority, fd = true;
function gd(a, b, c, d) {
  Kb || Ib();
  var e = hd, f2 = Kb;
  Kb = true;
  try {
    Hb(e, a, b, c, d);
  } finally {
    (Kb = f2) || Mb();
  }
}
function id$1(a, b, c, d) {
  ed(dd, hd.bind(null, a, b, c, d));
}
function hd(a, b, c, d) {
  if (fd) {
    var e;
    if ((e = (b & 4) === 0) && 0 < jc.length && -1 < qc.indexOf(a))
      a = rc(null, a, b, c, d), jc.push(a);
    else {
      var f2 = yc(a, b, c, d);
      if (f2 === null)
        e && sc(a, d);
      else {
        if (e) {
          if (-1 < qc.indexOf(a)) {
            a = rc(f2, a, b, c, d);
            jc.push(a);
            return;
          }
          if (uc(f2, a, b, c, d))
            return;
          sc(a, d);
        }
        jd(a, b, d, null, c);
      }
    }
  }
}
function yc(a, b, c, d) {
  var e = xb(d);
  e = wc(e);
  if (e !== null) {
    var f2 = Zb(e);
    if (f2 === null)
      e = null;
    else {
      var g2 = f2.tag;
      if (g2 === 13) {
        e = $b(f2);
        if (e !== null)
          return e;
        e = null;
      } else if (g2 === 3) {
        if (f2.stateNode.hydrate)
          return f2.tag === 3 ? f2.stateNode.containerInfo : null;
        e = null;
      } else
        f2 !== e && (e = null);
    }
  }
  jd(a, b, d, e, c);
  return null;
}
var kd = null, ld = null, md = null;
function nd() {
  if (md)
    return md;
  var a, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f2 = e.length;
  for (a = 0; a < c && b[a] === e[a]; a++)
    ;
  var g2 = c - a;
  for (d = 1; d <= g2 && b[c - d] === e[f2 - d]; d++)
    ;
  return md = e.slice(a, 1 < d ? 1 - d : void 0);
}
function od(a) {
  var b = a.keyCode;
  "charCode" in a ? (a = a.charCode, a === 0 && b === 13 && (a = 13)) : a = b;
  a === 10 && (a = 13);
  return 32 <= a || a === 13 ? a : 0;
}
function pd() {
  return true;
}
function qd() {
  return false;
}
function rd(a) {
  function b(b2, d, e, f2, g2) {
    this._reactName = b2;
    this._targetInst = e;
    this.type = d;
    this.nativeEvent = f2;
    this.target = g2;
    this.currentTarget = null;
    for (var c in a)
      a.hasOwnProperty(c) && (b2 = a[c], this[c] = b2 ? b2(f2) : f2[c]);
    this.isDefaultPrevented = (f2.defaultPrevented != null ? f2.defaultPrevented : f2.returnValue === false) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  m$1(b.prototype, { preventDefault: function() {
    this.defaultPrevented = true;
    var a2 = this.nativeEvent;
    a2 && (a2.preventDefault ? a2.preventDefault() : typeof a2.returnValue !== "unknown" && (a2.returnValue = false), this.isDefaultPrevented = pd);
  }, stopPropagation: function() {
    var a2 = this.nativeEvent;
    a2 && (a2.stopPropagation ? a2.stopPropagation() : typeof a2.cancelBubble !== "unknown" && (a2.cancelBubble = true), this.isPropagationStopped = pd);
  }, persist: function() {
  }, isPersistent: pd });
  return b;
}
var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
  return a.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = m$1({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = m$1({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
  return a.relatedTarget === void 0 ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
}, movementX: function(a) {
  if ("movementX" in a)
    return a.movementX;
  a !== yd && (yd && a.type === "mousemove" ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
  return wd;
}, movementY: function(a) {
  return "movementY" in a ? a.movementY : xd;
} }), Bd = rd(Ad), Cd = m$1({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = m$1({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = m$1({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = m$1({}, sd, { clipboardData: function(a) {
  return "clipboardData" in a ? a.clipboardData : window.clipboardData;
} }), Jd = rd(Id), Kd = m$1({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function Pd(a) {
  var b = this.nativeEvent;
  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : false;
}
function zd() {
  return Pd;
}
var Qd = m$1({}, ud, { key: function(a) {
  if (a.key) {
    var b = Md[a.key] || a.key;
    if (b !== "Unidentified")
      return b;
  }
  return a.type === "keypress" ? (a = od(a), a === 13 ? "Enter" : String.fromCharCode(a)) : a.type === "keydown" || a.type === "keyup" ? Nd[a.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
  return a.type === "keypress" ? od(a) : 0;
}, keyCode: function(a) {
  return a.type === "keydown" || a.type === "keyup" ? a.keyCode : 0;
}, which: function(a) {
  return a.type === "keypress" ? od(a) : a.type === "keydown" || a.type === "keyup" ? a.keyCode : 0;
} }), Rd = rd(Qd), Sd = m$1({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = m$1({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = m$1({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = m$1({}, Ad, {
  deltaX: function(a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  },
  deltaY: function(a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = fa && "CompositionEvent" in window, be = null;
fa && "documentMode" in document && (be = document.documentMode);
var ce = fa && "TextEvent" in window && !be, de$1 = fa && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
function ge(a, b) {
  switch (a) {
    case "keyup":
      return $d.indexOf(b.keyCode) !== -1;
    case "keydown":
      return b.keyCode !== 229;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function he(a) {
  a = a.detail;
  return typeof a === "object" && "data" in a ? a.data : null;
}
var ie = false;
function je(a, b) {
  switch (a) {
    case "compositionend":
      return he(b);
    case "keypress":
      if (b.which !== 32)
        return null;
      fe = true;
      return ee;
    case "textInput":
      return a = b.data, a === ee && fe ? null : a;
    default:
      return null;
  }
}
function ke(a, b) {
  if (ie)
    return a === "compositionend" || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
  switch (a) {
    case "paste":
      return null;
    case "keypress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b.char && 1 < b.char.length)
          return b.char;
        if (b.which)
          return String.fromCharCode(b.which);
      }
      return null;
    case "compositionend":
      return de$1 && b.locale !== "ko" ? null : b.data;
    default:
      return null;
  }
}
var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
function me(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return b === "input" ? !!le[a.type] : b === "textarea" ? true : false;
}
function ne(a, b, c, d) {
  Eb(d);
  b = oe(b, "onChange");
  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({ event: c, listeners: b }));
}
var pe = null, qe = null;
function re(a) {
  se(a, 0);
}
function te(a) {
  var b = ue(a);
  if (Wa(b))
    return a;
}
function ve(a, b) {
  if (a === "change")
    return b;
}
var we = false;
if (fa) {
  var xe;
  if (fa) {
    var ye = "oninput" in document;
    if (!ye) {
      var ze = document.createElement("div");
      ze.setAttribute("oninput", "return;");
      ye = typeof ze.oninput === "function";
    }
    xe = ye;
  } else
    xe = false;
  we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a) {
  if (a.propertyName === "value" && te(qe)) {
    var b = [];
    ne(b, qe, a, xb(a));
    a = re;
    if (Kb)
      a(b);
    else {
      Kb = true;
      try {
        Gb(a, b);
      } finally {
        Kb = false, Mb();
      }
    }
  }
}
function Ce(a, b, c) {
  a === "focusin" ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : a === "focusout" && Ae();
}
function De(a) {
  if (a === "selectionchange" || a === "keyup" || a === "keydown")
    return te(qe);
}
function Ee(a, b) {
  if (a === "click")
    return te(b);
}
function Fe(a, b) {
  if (a === "input" || a === "change")
    return te(b);
}
function Ge(a, b) {
  return a === b && (a !== 0 || 1 / a === 1 / b) || a !== a && b !== b;
}
var He = typeof Object.is === "function" ? Object.is : Ge, Ie = Object.prototype.hasOwnProperty;
function Je(a, b) {
  if (He(a, b))
    return true;
  if (typeof a !== "object" || a === null || typeof b !== "object" || b === null)
    return false;
  var c = Object.keys(a), d = Object.keys(b);
  if (c.length !== d.length)
    return false;
  for (d = 0; d < c.length; d++)
    if (!Ie.call(b, c[d]) || !He(a[c[d]], b[c[d]]))
      return false;
  return true;
}
function Ke(a) {
  for (; a && a.firstChild; )
    a = a.firstChild;
  return a;
}
function Le(a, b) {
  var c = Ke(a);
  a = 0;
  for (var d; c; ) {
    if (c.nodeType === 3) {
      d = a + c.textContent.length;
      if (a <= b && d >= b)
        return { node: c, offset: b - a };
      a = d;
    }
    a: {
      for (; c; ) {
        if (c.nextSibling) {
          c = c.nextSibling;
          break a;
        }
        c = c.parentNode;
      }
      c = void 0;
    }
    c = Ke(c);
  }
}
function Me(a, b) {
  return a && b ? a === b ? true : a && a.nodeType === 3 ? false : b && b.nodeType === 3 ? Me(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : false : false;
}
function Ne() {
  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
    try {
      var c = typeof b.contentWindow.location.href === "string";
    } catch (d) {
      c = false;
    }
    if (c)
      a = b.contentWindow;
    else
      break;
    b = Xa(a.document);
  }
  return b;
}
function Oe(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return b && (b === "input" && (a.type === "text" || a.type === "search" || a.type === "tel" || a.type === "url" || a.type === "password") || b === "textarea" || a.contentEditable === "true");
}
var Pe = fa && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
function Ue(a, b, c) {
  var d = c.window === c ? c.document : c.nodeType === 9 ? c : c.ownerDocument;
  Te || Qe == null || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Oe(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Se && Je(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({ event: b, listeners: d }), b.target = Qe)));
}
Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
Pc(Oc, 2);
for (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++)
  Nc.set(Ve[We], 0);
ea("onMouseEnter", ["mouseout", "mouseover"]);
ea("onMouseLeave", ["mouseout", "mouseover"]);
ea("onPointerEnter", ["pointerout", "pointerover"]);
ea("onPointerLeave", ["pointerout", "pointerover"]);
da$1("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
da$1("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
da$1("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
da$1("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
da$1("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
da$1("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
function Ze(a, b, c) {
  var d = a.type || "unknown-event";
  a.currentTarget = c;
  Yb(d, b, void 0, a);
  a.currentTarget = null;
}
function se(a, b) {
  b = (b & 4) !== 0;
  for (var c = 0; c < a.length; c++) {
    var d = a[c], e = d.event;
    d = d.listeners;
    a: {
      var f2 = void 0;
      if (b)
        for (var g2 = d.length - 1; 0 <= g2; g2--) {
          var h2 = d[g2], k = h2.instance, l2 = h2.currentTarget;
          h2 = h2.listener;
          if (k !== f2 && e.isPropagationStopped())
            break a;
          Ze(e, h2, l2);
          f2 = k;
        }
      else
        for (g2 = 0; g2 < d.length; g2++) {
          h2 = d[g2];
          k = h2.instance;
          l2 = h2.currentTarget;
          h2 = h2.listener;
          if (k !== f2 && e.isPropagationStopped())
            break a;
          Ze(e, h2, l2);
          f2 = k;
        }
    }
  }
  if (Ub)
    throw a = Vb, Ub = false, Vb = null, a;
}
function G(a, b) {
  var c = $e(b), d = a + "__bubble";
  c.has(d) || (af(b, a, 2, false), c.add(d));
}
var bf = "_reactListening" + Math.random().toString(36).slice(2);
function cf(a) {
  a[bf] || (a[bf] = true, ba.forEach(function(b) {
    Ye.has(b) || df(b, false, a, null);
    df(b, true, a, null);
  }));
}
function df(a, b, c, d) {
  var e = 4 < arguments.length && arguments[4] !== void 0 ? arguments[4] : 0, f2 = c;
  a === "selectionchange" && c.nodeType !== 9 && (f2 = c.ownerDocument);
  if (d !== null && !b && Ye.has(a)) {
    if (a !== "scroll")
      return;
    e |= 2;
    f2 = d;
  }
  var g2 = $e(f2), h2 = a + "__" + (b ? "capture" : "bubble");
  g2.has(h2) || (b && (e |= 4), af(f2, a, e, b), g2.add(h2));
}
function af(a, b, c, d) {
  var e = Nc.get(b);
  switch (e === void 0 ? 2 : e) {
    case 0:
      e = gd;
      break;
    case 1:
      e = id$1;
      break;
    default:
      e = hd;
  }
  c = e.bind(null, b, c, a);
  e = void 0;
  !Pb || b !== "touchstart" && b !== "touchmove" && b !== "wheel" || (e = true);
  d ? e !== void 0 ? a.addEventListener(b, c, { capture: true, passive: e }) : a.addEventListener(b, c, true) : e !== void 0 ? a.addEventListener(b, c, { passive: e }) : a.addEventListener(b, c, false);
}
function jd(a, b, c, d, e) {
  var f2 = d;
  if ((b & 1) === 0 && (b & 2) === 0 && d !== null)
    a:
      for (; ; ) {
        if (d === null)
          return;
        var g2 = d.tag;
        if (g2 === 3 || g2 === 4) {
          var h2 = d.stateNode.containerInfo;
          if (h2 === e || h2.nodeType === 8 && h2.parentNode === e)
            break;
          if (g2 === 4)
            for (g2 = d.return; g2 !== null; ) {
              var k = g2.tag;
              if (k === 3 || k === 4) {
                if (k = g2.stateNode.containerInfo, k === e || k.nodeType === 8 && k.parentNode === e)
                  return;
              }
              g2 = g2.return;
            }
          for (; h2 !== null; ) {
            g2 = wc(h2);
            if (g2 === null)
              return;
            k = g2.tag;
            if (k === 5 || k === 6) {
              d = f2 = g2;
              continue a;
            }
            h2 = h2.parentNode;
          }
        }
        d = d.return;
      }
  Nb(function() {
    var d2 = f2, e2 = xb(c), g3 = [];
    a: {
      var h3 = Mc.get(a);
      if (h3 !== void 0) {
        var k2 = td, x2 = a;
        switch (a) {
          case "keypress":
            if (od(c) === 0)
              break a;
          case "keydown":
          case "keyup":
            k2 = Rd;
            break;
          case "focusin":
            x2 = "focus";
            k2 = Fd;
            break;
          case "focusout":
            x2 = "blur";
            k2 = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k2 = Fd;
            break;
          case "click":
            if (c.button === 2)
              break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k2 = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k2 = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k2 = Vd;
            break;
          case Ic:
          case Jc:
          case Kc:
            k2 = Hd;
            break;
          case Lc:
            k2 = Xd;
            break;
          case "scroll":
            k2 = vd;
            break;
          case "wheel":
            k2 = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k2 = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k2 = Td;
        }
        var w2 = (b & 4) !== 0, z2 = !w2 && a === "scroll", u2 = w2 ? h3 !== null ? h3 + "Capture" : null : h3;
        w2 = [];
        for (var t2 = d2, q2; t2 !== null; ) {
          q2 = t2;
          var v2 = q2.stateNode;
          q2.tag === 5 && v2 !== null && (q2 = v2, u2 !== null && (v2 = Ob(t2, u2), v2 != null && w2.push(ef(t2, v2, q2))));
          if (z2)
            break;
          t2 = t2.return;
        }
        0 < w2.length && (h3 = new k2(h3, x2, null, c, e2), g3.push({ event: h3, listeners: w2 }));
      }
    }
    if ((b & 7) === 0) {
      a: {
        h3 = a === "mouseover" || a === "pointerover";
        k2 = a === "mouseout" || a === "pointerout";
        if (h3 && (b & 16) === 0 && (x2 = c.relatedTarget || c.fromElement) && (wc(x2) || x2[ff]))
          break a;
        if (k2 || h3) {
          h3 = e2.window === e2 ? e2 : (h3 = e2.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
          if (k2) {
            if (x2 = c.relatedTarget || c.toElement, k2 = d2, x2 = x2 ? wc(x2) : null, x2 !== null && (z2 = Zb(x2), x2 !== z2 || x2.tag !== 5 && x2.tag !== 6))
              x2 = null;
          } else
            k2 = null, x2 = d2;
          if (k2 !== x2) {
            w2 = Bd;
            v2 = "onMouseLeave";
            u2 = "onMouseEnter";
            t2 = "mouse";
            if (a === "pointerout" || a === "pointerover")
              w2 = Td, v2 = "onPointerLeave", u2 = "onPointerEnter", t2 = "pointer";
            z2 = k2 == null ? h3 : ue(k2);
            q2 = x2 == null ? h3 : ue(x2);
            h3 = new w2(v2, t2 + "leave", k2, c, e2);
            h3.target = z2;
            h3.relatedTarget = q2;
            v2 = null;
            wc(e2) === d2 && (w2 = new w2(u2, t2 + "enter", x2, c, e2), w2.target = q2, w2.relatedTarget = z2, v2 = w2);
            z2 = v2;
            if (k2 && x2)
              b: {
                w2 = k2;
                u2 = x2;
                t2 = 0;
                for (q2 = w2; q2; q2 = gf(q2))
                  t2++;
                q2 = 0;
                for (v2 = u2; v2; v2 = gf(v2))
                  q2++;
                for (; 0 < t2 - q2; )
                  w2 = gf(w2), t2--;
                for (; 0 < q2 - t2; )
                  u2 = gf(u2), q2--;
                for (; t2--; ) {
                  if (w2 === u2 || u2 !== null && w2 === u2.alternate)
                    break b;
                  w2 = gf(w2);
                  u2 = gf(u2);
                }
                w2 = null;
              }
            else
              w2 = null;
            k2 !== null && hf(g3, h3, k2, w2, false);
            x2 !== null && z2 !== null && hf(g3, z2, x2, w2, true);
          }
        }
      }
      a: {
        h3 = d2 ? ue(d2) : window;
        k2 = h3.nodeName && h3.nodeName.toLowerCase();
        if (k2 === "select" || k2 === "input" && h3.type === "file")
          var J2 = ve;
        else if (me(h3))
          if (we)
            J2 = Fe;
          else {
            J2 = De;
            var K2 = Ce;
          }
        else
          (k2 = h3.nodeName) && k2.toLowerCase() === "input" && (h3.type === "checkbox" || h3.type === "radio") && (J2 = Ee);
        if (J2 && (J2 = J2(a, d2))) {
          ne(g3, J2, c, e2);
          break a;
        }
        K2 && K2(a, h3, d2);
        a === "focusout" && (K2 = h3._wrapperState) && K2.controlled && h3.type === "number" && bb(h3, "number", h3.value);
      }
      K2 = d2 ? ue(d2) : window;
      switch (a) {
        case "focusin":
          if (me(K2) || K2.contentEditable === "true")
            Qe = K2, Re = d2, Se = null;
          break;
        case "focusout":
          Se = Re = Qe = null;
          break;
        case "mousedown":
          Te = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te = false;
          Ue(g3, c, e2);
          break;
        case "selectionchange":
          if (Pe)
            break;
        case "keydown":
        case "keyup":
          Ue(g3, c, e2);
      }
      var Q2;
      if (ae)
        b: {
          switch (a) {
            case "compositionstart":
              var L2 = "onCompositionStart";
              break b;
            case "compositionend":
              L2 = "onCompositionEnd";
              break b;
            case "compositionupdate":
              L2 = "onCompositionUpdate";
              break b;
          }
          L2 = void 0;
        }
      else
        ie ? ge(a, c) && (L2 = "onCompositionEnd") : a === "keydown" && c.keyCode === 229 && (L2 = "onCompositionStart");
      L2 && (de$1 && c.locale !== "ko" && (ie || L2 !== "onCompositionStart" ? L2 === "onCompositionEnd" && ie && (Q2 = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), K2 = oe(d2, L2), 0 < K2.length && (L2 = new Ld(L2, a, null, c, e2), g3.push({ event: L2, listeners: K2 }), Q2 ? L2.data = Q2 : (Q2 = he(c), Q2 !== null && (L2.data = Q2))));
      if (Q2 = ce ? je(a, c) : ke(a, c))
        d2 = oe(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g3.push({ event: e2, listeners: d2 }), e2.data = Q2);
    }
    se(g3, b);
  });
}
function ef(a, b, c) {
  return { instance: a, listener: b, currentTarget: c };
}
function oe(a, b) {
  for (var c = b + "Capture", d = []; a !== null; ) {
    var e = a, f2 = e.stateNode;
    e.tag === 5 && f2 !== null && (e = f2, f2 = Ob(a, c), f2 != null && d.unshift(ef(a, f2, e)), f2 = Ob(a, b), f2 != null && d.push(ef(a, f2, e)));
    a = a.return;
  }
  return d;
}
function gf(a) {
  if (a === null)
    return null;
  do
    a = a.return;
  while (a && a.tag !== 5);
  return a ? a : null;
}
function hf(a, b, c, d, e) {
  for (var f2 = b._reactName, g2 = []; c !== null && c !== d; ) {
    var h2 = c, k = h2.alternate, l2 = h2.stateNode;
    if (k !== null && k === d)
      break;
    h2.tag === 5 && l2 !== null && (h2 = l2, e ? (k = Ob(c, f2), k != null && g2.unshift(ef(c, k, h2))) : e || (k = Ob(c, f2), k != null && g2.push(ef(c, k, h2))));
    c = c.return;
  }
  g2.length !== 0 && a.push({ event: b, listeners: g2 });
}
function jf() {
}
var kf = null, lf = null;
function mf(a, b) {
  switch (a) {
    case "button":
    case "input":
    case "select":
    case "textarea":
      return !!b.autoFocus;
  }
  return false;
}
function nf(a, b) {
  return a === "textarea" || a === "option" || a === "noscript" || typeof b.children === "string" || typeof b.children === "number" || typeof b.dangerouslySetInnerHTML === "object" && b.dangerouslySetInnerHTML !== null && b.dangerouslySetInnerHTML.__html != null;
}
var of = typeof setTimeout === "function" ? setTimeout : void 0, pf = typeof clearTimeout === "function" ? clearTimeout : void 0;
function qf(a) {
  a.nodeType === 1 ? a.textContent = "" : a.nodeType === 9 && (a = a.body, a != null && (a.textContent = ""));
}
function rf(a) {
  for (; a != null; a = a.nextSibling) {
    var b = a.nodeType;
    if (b === 1 || b === 3)
      break;
  }
  return a;
}
function sf(a) {
  a = a.previousSibling;
  for (var b = 0; a; ) {
    if (a.nodeType === 8) {
      var c = a.data;
      if (c === "$" || c === "$!" || c === "$?") {
        if (b === 0)
          return a;
        b--;
      } else
        c === "/$" && b++;
    }
    a = a.previousSibling;
  }
  return null;
}
var tf = 0;
function uf(a) {
  return { $$typeof: Ga, toString: a, valueOf: a };
}
var vf = Math.random().toString(36).slice(2), wf = "__reactFiber$" + vf, xf = "__reactProps$" + vf, ff = "__reactContainer$" + vf, yf = "__reactEvents$" + vf;
function wc(a) {
  var b = a[wf];
  if (b)
    return b;
  for (var c = a.parentNode; c; ) {
    if (b = c[ff] || c[wf]) {
      c = b.alternate;
      if (b.child !== null || c !== null && c.child !== null)
        for (a = sf(a); a !== null; ) {
          if (c = a[wf])
            return c;
          a = sf(a);
        }
      return b;
    }
    a = c;
    c = a.parentNode;
  }
  return null;
}
function Cb(a) {
  a = a[wf] || a[ff];
  return !a || a.tag !== 5 && a.tag !== 6 && a.tag !== 13 && a.tag !== 3 ? null : a;
}
function ue(a) {
  if (a.tag === 5 || a.tag === 6)
    return a.stateNode;
  throw Error(y(33));
}
function Db(a) {
  return a[xf] || null;
}
function $e(a) {
  var b = a[yf];
  b === void 0 && (b = a[yf] = new Set());
  return b;
}
var zf = [], Af = -1;
function Bf(a) {
  return { current: a };
}
function H(a) {
  0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);
}
function I(a, b) {
  Af++;
  zf[Af] = a.current;
  a.current = b;
}
var Cf = {}, M = Bf(Cf), N = Bf(false), Df = Cf;
function Ef(a, b) {
  var c = a.type.contextTypes;
  if (!c)
    return Cf;
  var d = a.stateNode;
  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
    return d.__reactInternalMemoizedMaskedChildContext;
  var e = {}, f2;
  for (f2 in c)
    e[f2] = b[f2];
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
  return e;
}
function Ff(a) {
  a = a.childContextTypes;
  return a !== null && a !== void 0;
}
function Gf() {
  H(N);
  H(M);
}
function Hf(a, b, c) {
  if (M.current !== Cf)
    throw Error(y(168));
  I(M, b);
  I(N, c);
}
function If(a, b, c) {
  var d = a.stateNode;
  a = b.childContextTypes;
  if (typeof d.getChildContext !== "function")
    return c;
  d = d.getChildContext();
  for (var e in d)
    if (!(e in a))
      throw Error(y(108, Ra(b) || "Unknown", e));
  return m$1({}, c, d);
}
function Jf(a) {
  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf;
  Df = M.current;
  I(M, a);
  I(N, N.current);
  return true;
}
function Kf(a, b, c) {
  var d = a.stateNode;
  if (!d)
    throw Error(y(169));
  c ? (a = If(a, b, Df), d.__reactInternalMemoizedMergedChildContext = a, H(N), H(M), I(M, a)) : H(N);
  I(N, c);
}
var Lf = null, Mf = null, Nf = r.unstable_runWithPriority, Of = r.unstable_scheduleCallback, Pf = r.unstable_cancelCallback, Qf = r.unstable_shouldYield, Rf = r.unstable_requestPaint, Sf = r.unstable_now, Tf = r.unstable_getCurrentPriorityLevel, Uf = r.unstable_ImmediatePriority, Vf = r.unstable_UserBlockingPriority, Wf = r.unstable_NormalPriority, Xf = r.unstable_LowPriority, Yf = r.unstable_IdlePriority, Zf = {}, $f = Rf !== void 0 ? Rf : function() {
}, ag = null, bg = null, cg = false, dg = Sf(), O = 1e4 > dg ? Sf : function() {
  return Sf() - dg;
};
function eg() {
  switch (Tf()) {
    case Uf:
      return 99;
    case Vf:
      return 98;
    case Wf:
      return 97;
    case Xf:
      return 96;
    case Yf:
      return 95;
    default:
      throw Error(y(332));
  }
}
function fg(a) {
  switch (a) {
    case 99:
      return Uf;
    case 98:
      return Vf;
    case 97:
      return Wf;
    case 96:
      return Xf;
    case 95:
      return Yf;
    default:
      throw Error(y(332));
  }
}
function gg(a, b) {
  a = fg(a);
  return Nf(a, b);
}
function hg(a, b, c) {
  a = fg(a);
  return Of(a, b, c);
}
function ig() {
  if (bg !== null) {
    var a = bg;
    bg = null;
    Pf(a);
  }
  jg();
}
function jg() {
  if (!cg && ag !== null) {
    cg = true;
    var a = 0;
    try {
      var b = ag;
      gg(99, function() {
        for (; a < b.length; a++) {
          var c = b[a];
          do
            c = c(true);
          while (c !== null);
        }
      });
      ag = null;
    } catch (c) {
      throw ag !== null && (ag = ag.slice(a + 1)), Of(Uf, ig), c;
    } finally {
      cg = false;
    }
  }
}
var kg = ra.ReactCurrentBatchConfig;
function lg(a, b) {
  if (a && a.defaultProps) {
    b = m$1({}, b);
    a = a.defaultProps;
    for (var c in a)
      b[c] === void 0 && (b[c] = a[c]);
    return b;
  }
  return b;
}
var mg = Bf(null), ng = null, og = null, pg = null;
function qg() {
  pg = og = ng = null;
}
function rg(a) {
  var b = mg.current;
  H(mg);
  a.type._context._currentValue = b;
}
function sg(a, b) {
  for (; a !== null; ) {
    var c = a.alternate;
    if ((a.childLanes & b) === b)
      if (c === null || (c.childLanes & b) === b)
        break;
      else
        c.childLanes |= b;
    else
      a.childLanes |= b, c !== null && (c.childLanes |= b);
    a = a.return;
  }
}
function tg(a, b) {
  ng = a;
  pg = og = null;
  a = a.dependencies;
  a !== null && a.firstContext !== null && ((a.lanes & b) !== 0 && (ug = true), a.firstContext = null);
}
function vg(a, b) {
  if (pg !== a && b !== false && b !== 0) {
    if (typeof b !== "number" || b === 1073741823)
      pg = a, b = 1073741823;
    b = { context: a, observedBits: b, next: null };
    if (og === null) {
      if (ng === null)
        throw Error(y(308));
      og = b;
      ng.dependencies = { lanes: 0, firstContext: b, responders: null };
    } else
      og = og.next = b;
  }
  return a._currentValue;
}
var wg = false;
function xg(a) {
  a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null }, effects: null };
}
function yg(a, b) {
  a = a.updateQueue;
  b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
}
function zg(a, b) {
  return { eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null };
}
function Ag(a, b) {
  a = a.updateQueue;
  if (a !== null) {
    a = a.shared;
    var c = a.pending;
    c === null ? b.next = b : (b.next = c.next, c.next = b);
    a.pending = b;
  }
}
function Bg(a, b) {
  var c = a.updateQueue, d = a.alternate;
  if (d !== null && (d = d.updateQueue, c === d)) {
    var e = null, f2 = null;
    c = c.firstBaseUpdate;
    if (c !== null) {
      do {
        var g2 = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
        f2 === null ? e = f2 = g2 : f2 = f2.next = g2;
        c = c.next;
      } while (c !== null);
      f2 === null ? e = f2 = b : f2 = f2.next = b;
    } else
      e = f2 = b;
    c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f2, shared: d.shared, effects: d.effects };
    a.updateQueue = c;
    return;
  }
  a = c.lastBaseUpdate;
  a === null ? c.firstBaseUpdate = b : a.next = b;
  c.lastBaseUpdate = b;
}
function Cg(a, b, c, d) {
  var e = a.updateQueue;
  wg = false;
  var f2 = e.firstBaseUpdate, g2 = e.lastBaseUpdate, h2 = e.shared.pending;
  if (h2 !== null) {
    e.shared.pending = null;
    var k = h2, l2 = k.next;
    k.next = null;
    g2 === null ? f2 = l2 : g2.next = l2;
    g2 = k;
    var n2 = a.alternate;
    if (n2 !== null) {
      n2 = n2.updateQueue;
      var A2 = n2.lastBaseUpdate;
      A2 !== g2 && (A2 === null ? n2.firstBaseUpdate = l2 : A2.next = l2, n2.lastBaseUpdate = k);
    }
  }
  if (f2 !== null) {
    A2 = e.baseState;
    g2 = 0;
    n2 = l2 = k = null;
    do {
      h2 = f2.lane;
      var p2 = f2.eventTime;
      if ((d & h2) === h2) {
        n2 !== null && (n2 = n2.next = {
          eventTime: p2,
          lane: 0,
          tag: f2.tag,
          payload: f2.payload,
          callback: f2.callback,
          next: null
        });
        a: {
          var C2 = a, x2 = f2;
          h2 = b;
          p2 = c;
          switch (x2.tag) {
            case 1:
              C2 = x2.payload;
              if (typeof C2 === "function") {
                A2 = C2.call(p2, A2, h2);
                break a;
              }
              A2 = C2;
              break a;
            case 3:
              C2.flags = C2.flags & -4097 | 64;
            case 0:
              C2 = x2.payload;
              h2 = typeof C2 === "function" ? C2.call(p2, A2, h2) : C2;
              if (h2 === null || h2 === void 0)
                break a;
              A2 = m$1({}, A2, h2);
              break a;
            case 2:
              wg = true;
          }
        }
        f2.callback !== null && (a.flags |= 32, h2 = e.effects, h2 === null ? e.effects = [f2] : h2.push(f2));
      } else
        p2 = { eventTime: p2, lane: h2, tag: f2.tag, payload: f2.payload, callback: f2.callback, next: null }, n2 === null ? (l2 = n2 = p2, k = A2) : n2 = n2.next = p2, g2 |= h2;
      f2 = f2.next;
      if (f2 === null)
        if (h2 = e.shared.pending, h2 === null)
          break;
        else
          f2 = h2.next, h2.next = null, e.lastBaseUpdate = h2, e.shared.pending = null;
    } while (1);
    n2 === null && (k = A2);
    e.baseState = k;
    e.firstBaseUpdate = l2;
    e.lastBaseUpdate = n2;
    Dg |= g2;
    a.lanes = g2;
    a.memoizedState = A2;
  }
}
function Eg(a, b, c) {
  a = b.effects;
  b.effects = null;
  if (a !== null)
    for (b = 0; b < a.length; b++) {
      var d = a[b], e = d.callback;
      if (e !== null) {
        d.callback = null;
        d = c;
        if (typeof e !== "function")
          throw Error(y(191, e));
        e.call(d);
      }
    }
}
var Fg = new aa.Component().refs;
function Gg(a, b, c, d) {
  b = a.memoizedState;
  c = c(d, b);
  c = c === null || c === void 0 ? b : m$1({}, b, c);
  a.memoizedState = c;
  a.lanes === 0 && (a.updateQueue.baseState = c);
}
var Kg = { isMounted: function(a) {
  return (a = a._reactInternals) ? Zb(a) === a : false;
}, enqueueSetState: function(a, b, c) {
  a = a._reactInternals;
  var d = Hg(), e = Ig(a), f2 = zg(d, e);
  f2.payload = b;
  c !== void 0 && c !== null && (f2.callback = c);
  Ag(a, f2);
  Jg(a, e, d);
}, enqueueReplaceState: function(a, b, c) {
  a = a._reactInternals;
  var d = Hg(), e = Ig(a), f2 = zg(d, e);
  f2.tag = 1;
  f2.payload = b;
  c !== void 0 && c !== null && (f2.callback = c);
  Ag(a, f2);
  Jg(a, e, d);
}, enqueueForceUpdate: function(a, b) {
  a = a._reactInternals;
  var c = Hg(), d = Ig(a), e = zg(c, d);
  e.tag = 2;
  b !== void 0 && b !== null && (e.callback = b);
  Ag(a, e);
  Jg(a, d, c);
} };
function Lg(a, b, c, d, e, f2, g2) {
  a = a.stateNode;
  return typeof a.shouldComponentUpdate === "function" ? a.shouldComponentUpdate(d, f2, g2) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f2) : true;
}
function Mg(a, b, c) {
  var d = false, e = Cf;
  var f2 = b.contextType;
  typeof f2 === "object" && f2 !== null ? f2 = vg(f2) : (e = Ff(b) ? Df : M.current, d = b.contextTypes, f2 = (d = d !== null && d !== void 0) ? Ef(a, e) : Cf);
  b = new b(c, f2);
  a.memoizedState = b.state !== null && b.state !== void 0 ? b.state : null;
  b.updater = Kg;
  a.stateNode = b;
  b._reactInternals = a;
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f2);
  return b;
}
function Ng(a, b, c, d) {
  a = b.state;
  typeof b.componentWillReceiveProps === "function" && b.componentWillReceiveProps(c, d);
  typeof b.UNSAFE_componentWillReceiveProps === "function" && b.UNSAFE_componentWillReceiveProps(c, d);
  b.state !== a && Kg.enqueueReplaceState(b, b.state, null);
}
function Og(a, b, c, d) {
  var e = a.stateNode;
  e.props = c;
  e.state = a.memoizedState;
  e.refs = Fg;
  xg(a);
  var f2 = b.contextType;
  typeof f2 === "object" && f2 !== null ? e.context = vg(f2) : (f2 = Ff(b) ? Df : M.current, e.context = Ef(a, f2));
  Cg(a, c, e, d);
  e.state = a.memoizedState;
  f2 = b.getDerivedStateFromProps;
  typeof f2 === "function" && (Gg(a, b, f2, c), e.state = a.memoizedState);
  typeof b.getDerivedStateFromProps === "function" || typeof e.getSnapshotBeforeUpdate === "function" || typeof e.UNSAFE_componentWillMount !== "function" && typeof e.componentWillMount !== "function" || (b = e.state, typeof e.componentWillMount === "function" && e.componentWillMount(), typeof e.UNSAFE_componentWillMount === "function" && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d), e.state = a.memoizedState);
  typeof e.componentDidMount === "function" && (a.flags |= 4);
}
var Pg = Array.isArray;
function Qg(a, b, c) {
  a = c.ref;
  if (a !== null && typeof a !== "function" && typeof a !== "object") {
    if (c._owner) {
      c = c._owner;
      if (c) {
        if (c.tag !== 1)
          throw Error(y(309));
        var d = c.stateNode;
      }
      if (!d)
        throw Error(y(147, a));
      var e = "" + a;
      if (b !== null && b.ref !== null && typeof b.ref === "function" && b.ref._stringRef === e)
        return b.ref;
      b = function(a2) {
        var b2 = d.refs;
        b2 === Fg && (b2 = d.refs = {});
        a2 === null ? delete b2[e] : b2[e] = a2;
      };
      b._stringRef = e;
      return b;
    }
    if (typeof a !== "string")
      throw Error(y(284));
    if (!c._owner)
      throw Error(y(290, a));
  }
  return a;
}
function Rg(a, b) {
  if (a.type !== "textarea")
    throw Error(y(31, Object.prototype.toString.call(b) === "[object Object]" ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));
}
function Sg(a) {
  function b(b2, c2) {
    if (a) {
      var d2 = b2.lastEffect;
      d2 !== null ? (d2.nextEffect = c2, b2.lastEffect = c2) : b2.firstEffect = b2.lastEffect = c2;
      c2.nextEffect = null;
      c2.flags = 8;
    }
  }
  function c(c2, d2) {
    if (!a)
      return null;
    for (; d2 !== null; )
      b(c2, d2), d2 = d2.sibling;
    return null;
  }
  function d(a2, b2) {
    for (a2 = new Map(); b2 !== null; )
      b2.key !== null ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
    return a2;
  }
  function e(a2, b2) {
    a2 = Tg(a2, b2);
    a2.index = 0;
    a2.sibling = null;
    return a2;
  }
  function f2(b2, c2, d2) {
    b2.index = d2;
    if (!a)
      return c2;
    d2 = b2.alternate;
    if (d2 !== null)
      return d2 = d2.index, d2 < c2 ? (b2.flags = 2, c2) : d2;
    b2.flags = 2;
    return c2;
  }
  function g2(b2) {
    a && b2.alternate === null && (b2.flags = 2);
    return b2;
  }
  function h2(a2, b2, c2, d2) {
    if (b2 === null || b2.tag !== 6)
      return b2 = Ug(c2, a2.mode, d2), b2.return = a2, b2;
    b2 = e(b2, c2);
    b2.return = a2;
    return b2;
  }
  function k(a2, b2, c2, d2) {
    if (b2 !== null && b2.elementType === c2.type)
      return d2 = e(b2, c2.props), d2.ref = Qg(a2, b2, c2), d2.return = a2, d2;
    d2 = Vg(c2.type, c2.key, c2.props, null, a2.mode, d2);
    d2.ref = Qg(a2, b2, c2);
    d2.return = a2;
    return d2;
  }
  function l2(a2, b2, c2, d2) {
    if (b2 === null || b2.tag !== 4 || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation)
      return b2 = Wg(c2, a2.mode, d2), b2.return = a2, b2;
    b2 = e(b2, c2.children || []);
    b2.return = a2;
    return b2;
  }
  function n2(a2, b2, c2, d2, f3) {
    if (b2 === null || b2.tag !== 7)
      return b2 = Xg(c2, a2.mode, d2, f3), b2.return = a2, b2;
    b2 = e(b2, c2);
    b2.return = a2;
    return b2;
  }
  function A2(a2, b2, c2) {
    if (typeof b2 === "string" || typeof b2 === "number")
      return b2 = Ug("" + b2, a2.mode, c2), b2.return = a2, b2;
    if (typeof b2 === "object" && b2 !== null) {
      switch (b2.$$typeof) {
        case sa:
          return c2 = Vg(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = Qg(a2, null, b2), c2.return = a2, c2;
        case ta:
          return b2 = Wg(b2, a2.mode, c2), b2.return = a2, b2;
      }
      if (Pg(b2) || La(b2))
        return b2 = Xg(b2, a2.mode, c2, null), b2.return = a2, b2;
      Rg(a2, b2);
    }
    return null;
  }
  function p2(a2, b2, c2, d2) {
    var e2 = b2 !== null ? b2.key : null;
    if (typeof c2 === "string" || typeof c2 === "number")
      return e2 !== null ? null : h2(a2, b2, "" + c2, d2);
    if (typeof c2 === "object" && c2 !== null) {
      switch (c2.$$typeof) {
        case sa:
          return c2.key === e2 ? c2.type === ua ? n2(a2, b2, c2.props.children, d2, e2) : k(a2, b2, c2, d2) : null;
        case ta:
          return c2.key === e2 ? l2(a2, b2, c2, d2) : null;
      }
      if (Pg(c2) || La(c2))
        return e2 !== null ? null : n2(a2, b2, c2, d2, null);
      Rg(a2, c2);
    }
    return null;
  }
  function C2(a2, b2, c2, d2, e2) {
    if (typeof d2 === "string" || typeof d2 === "number")
      return a2 = a2.get(c2) || null, h2(b2, a2, "" + d2, e2);
    if (typeof d2 === "object" && d2 !== null) {
      switch (d2.$$typeof) {
        case sa:
          return a2 = a2.get(d2.key === null ? c2 : d2.key) || null, d2.type === ua ? n2(b2, a2, d2.props.children, e2, d2.key) : k(b2, a2, d2, e2);
        case ta:
          return a2 = a2.get(d2.key === null ? c2 : d2.key) || null, l2(b2, a2, d2, e2);
      }
      if (Pg(d2) || La(d2))
        return a2 = a2.get(c2) || null, n2(b2, a2, d2, e2, null);
      Rg(b2, d2);
    }
    return null;
  }
  function x2(e2, g3, h3, k2) {
    for (var l3 = null, t2 = null, u2 = g3, z2 = g3 = 0, q2 = null; u2 !== null && z2 < h3.length; z2++) {
      u2.index > z2 ? (q2 = u2, u2 = null) : q2 = u2.sibling;
      var n3 = p2(e2, u2, h3[z2], k2);
      if (n3 === null) {
        u2 === null && (u2 = q2);
        break;
      }
      a && u2 && n3.alternate === null && b(e2, u2);
      g3 = f2(n3, g3, z2);
      t2 === null ? l3 = n3 : t2.sibling = n3;
      t2 = n3;
      u2 = q2;
    }
    if (z2 === h3.length)
      return c(e2, u2), l3;
    if (u2 === null) {
      for (; z2 < h3.length; z2++)
        u2 = A2(e2, h3[z2], k2), u2 !== null && (g3 = f2(u2, g3, z2), t2 === null ? l3 = u2 : t2.sibling = u2, t2 = u2);
      return l3;
    }
    for (u2 = d(e2, u2); z2 < h3.length; z2++)
      q2 = C2(u2, e2, z2, h3[z2], k2), q2 !== null && (a && q2.alternate !== null && u2.delete(q2.key === null ? z2 : q2.key), g3 = f2(q2, g3, z2), t2 === null ? l3 = q2 : t2.sibling = q2, t2 = q2);
    a && u2.forEach(function(a2) {
      return b(e2, a2);
    });
    return l3;
  }
  function w2(e2, g3, h3, k2) {
    var l3 = La(h3);
    if (typeof l3 !== "function")
      throw Error(y(150));
    h3 = l3.call(h3);
    if (h3 == null)
      throw Error(y(151));
    for (var t2 = l3 = null, u2 = g3, z2 = g3 = 0, q2 = null, n3 = h3.next(); u2 !== null && !n3.done; z2++, n3 = h3.next()) {
      u2.index > z2 ? (q2 = u2, u2 = null) : q2 = u2.sibling;
      var w3 = p2(e2, u2, n3.value, k2);
      if (w3 === null) {
        u2 === null && (u2 = q2);
        break;
      }
      a && u2 && w3.alternate === null && b(e2, u2);
      g3 = f2(w3, g3, z2);
      t2 === null ? l3 = w3 : t2.sibling = w3;
      t2 = w3;
      u2 = q2;
    }
    if (n3.done)
      return c(e2, u2), l3;
    if (u2 === null) {
      for (; !n3.done; z2++, n3 = h3.next())
        n3 = A2(e2, n3.value, k2), n3 !== null && (g3 = f2(n3, g3, z2), t2 === null ? l3 = n3 : t2.sibling = n3, t2 = n3);
      return l3;
    }
    for (u2 = d(e2, u2); !n3.done; z2++, n3 = h3.next())
      n3 = C2(u2, e2, z2, n3.value, k2), n3 !== null && (a && n3.alternate !== null && u2.delete(n3.key === null ? z2 : n3.key), g3 = f2(n3, g3, z2), t2 === null ? l3 = n3 : t2.sibling = n3, t2 = n3);
    a && u2.forEach(function(a2) {
      return b(e2, a2);
    });
    return l3;
  }
  return function(a2, d2, f3, h3) {
    var k2 = typeof f3 === "object" && f3 !== null && f3.type === ua && f3.key === null;
    k2 && (f3 = f3.props.children);
    var l3 = typeof f3 === "object" && f3 !== null;
    if (l3)
      switch (f3.$$typeof) {
        case sa:
          a: {
            l3 = f3.key;
            for (k2 = d2; k2 !== null; ) {
              if (k2.key === l3) {
                switch (k2.tag) {
                  case 7:
                    if (f3.type === ua) {
                      c(a2, k2.sibling);
                      d2 = e(k2, f3.props.children);
                      d2.return = a2;
                      a2 = d2;
                      break a;
                    }
                    break;
                  default:
                    if (k2.elementType === f3.type) {
                      c(a2, k2.sibling);
                      d2 = e(k2, f3.props);
                      d2.ref = Qg(a2, k2, f3);
                      d2.return = a2;
                      a2 = d2;
                      break a;
                    }
                }
                c(a2, k2);
                break;
              } else
                b(a2, k2);
              k2 = k2.sibling;
            }
            f3.type === ua ? (d2 = Xg(f3.props.children, a2.mode, h3, f3.key), d2.return = a2, a2 = d2) : (h3 = Vg(f3.type, f3.key, f3.props, null, a2.mode, h3), h3.ref = Qg(a2, d2, f3), h3.return = a2, a2 = h3);
          }
          return g2(a2);
        case ta:
          a: {
            for (k2 = f3.key; d2 !== null; ) {
              if (d2.key === k2)
                if (d2.tag === 4 && d2.stateNode.containerInfo === f3.containerInfo && d2.stateNode.implementation === f3.implementation) {
                  c(a2, d2.sibling);
                  d2 = e(d2, f3.children || []);
                  d2.return = a2;
                  a2 = d2;
                  break a;
                } else {
                  c(a2, d2);
                  break;
                }
              else
                b(a2, d2);
              d2 = d2.sibling;
            }
            d2 = Wg(f3, a2.mode, h3);
            d2.return = a2;
            a2 = d2;
          }
          return g2(a2);
      }
    if (typeof f3 === "string" || typeof f3 === "number")
      return f3 = "" + f3, d2 !== null && d2.tag === 6 ? (c(a2, d2.sibling), d2 = e(d2, f3), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = Ug(f3, a2.mode, h3), d2.return = a2, a2 = d2), g2(a2);
    if (Pg(f3))
      return x2(a2, d2, f3, h3);
    if (La(f3))
      return w2(a2, d2, f3, h3);
    l3 && Rg(a2, f3);
    if (typeof f3 === "undefined" && !k2)
      switch (a2.tag) {
        case 1:
        case 22:
        case 0:
        case 11:
        case 15:
          throw Error(y(152, Ra(a2.type) || "Component"));
      }
    return c(a2, d2);
  };
}
var Yg = Sg(true), Zg = Sg(false), $g = {}, ah = Bf($g), bh = Bf($g), ch = Bf($g);
function dh(a) {
  if (a === $g)
    throw Error(y(174));
  return a;
}
function eh(a, b) {
  I(ch, b);
  I(bh, a);
  I(ah, $g);
  a = b.nodeType;
  switch (a) {
    case 9:
    case 11:
      b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");
      break;
    default:
      a = a === 8 ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = mb(b, a);
  }
  H(ah);
  I(ah, b);
}
function fh() {
  H(ah);
  H(bh);
  H(ch);
}
function gh(a) {
  dh(ch.current);
  var b = dh(ah.current);
  var c = mb(b, a.type);
  b !== c && (I(bh, a), I(ah, c));
}
function hh(a) {
  bh.current === a && (H(ah), H(bh));
}
var P = Bf(0);
function ih(a) {
  for (var b = a; b !== null; ) {
    if (b.tag === 13) {
      var c = b.memoizedState;
      if (c !== null && (c = c.dehydrated, c === null || c.data === "$?" || c.data === "$!"))
        return b;
    } else if (b.tag === 19 && b.memoizedProps.revealOrder !== void 0) {
      if ((b.flags & 64) !== 0)
        return b;
    } else if (b.child !== null) {
      b.child.return = b;
      b = b.child;
      continue;
    }
    if (b === a)
      break;
    for (; b.sibling === null; ) {
      if (b.return === null || b.return === a)
        return null;
      b = b.return;
    }
    b.sibling.return = b.return;
    b = b.sibling;
  }
  return null;
}
var jh = null, kh = null, lh = false;
function mh(a, b) {
  var c = nh(5, null, null, 0);
  c.elementType = "DELETED";
  c.type = "DELETED";
  c.stateNode = b;
  c.return = a;
  c.flags = 8;
  a.lastEffect !== null ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
}
function oh(a, b) {
  switch (a.tag) {
    case 5:
      var c = a.type;
      b = b.nodeType !== 1 || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
      return b !== null ? (a.stateNode = b, true) : false;
    case 6:
      return b = a.pendingProps === "" || b.nodeType !== 3 ? null : b, b !== null ? (a.stateNode = b, true) : false;
    case 13:
      return false;
    default:
      return false;
  }
}
function ph(a) {
  if (lh) {
    var b = kh;
    if (b) {
      var c = b;
      if (!oh(a, b)) {
        b = rf(c.nextSibling);
        if (!b || !oh(a, b)) {
          a.flags = a.flags & -1025 | 2;
          lh = false;
          jh = a;
          return;
        }
        mh(jh, c);
      }
      jh = a;
      kh = rf(b.firstChild);
    } else
      a.flags = a.flags & -1025 | 2, lh = false, jh = a;
  }
}
function qh(a) {
  for (a = a.return; a !== null && a.tag !== 5 && a.tag !== 3 && a.tag !== 13; )
    a = a.return;
  jh = a;
}
function rh(a) {
  if (a !== jh)
    return false;
  if (!lh)
    return qh(a), lh = true, false;
  var b = a.type;
  if (a.tag !== 5 || b !== "head" && b !== "body" && !nf(b, a.memoizedProps))
    for (b = kh; b; )
      mh(a, b), b = rf(b.nextSibling);
  qh(a);
  if (a.tag === 13) {
    a = a.memoizedState;
    a = a !== null ? a.dehydrated : null;
    if (!a)
      throw Error(y(317));
    a: {
      a = a.nextSibling;
      for (b = 0; a; ) {
        if (a.nodeType === 8) {
          var c = a.data;
          if (c === "/$") {
            if (b === 0) {
              kh = rf(a.nextSibling);
              break a;
            }
            b--;
          } else
            c !== "$" && c !== "$!" && c !== "$?" || b++;
        }
        a = a.nextSibling;
      }
      kh = null;
    }
  } else
    kh = jh ? rf(a.stateNode.nextSibling) : null;
  return true;
}
function sh() {
  kh = jh = null;
  lh = false;
}
var th = [];
function uh() {
  for (var a = 0; a < th.length; a++)
    th[a]._workInProgressVersionPrimary = null;
  th.length = 0;
}
var vh = ra.ReactCurrentDispatcher, wh = ra.ReactCurrentBatchConfig, xh = 0, R = null, S = null, T = null, yh = false, zh = false;
function Ah() {
  throw Error(y(321));
}
function Bh(a, b) {
  if (b === null)
    return false;
  for (var c = 0; c < b.length && c < a.length; c++)
    if (!He(a[c], b[c]))
      return false;
  return true;
}
function Ch(a, b, c, d, e, f2) {
  xh = f2;
  R = b;
  b.memoizedState = null;
  b.updateQueue = null;
  b.lanes = 0;
  vh.current = a === null || a.memoizedState === null ? Dh : Eh;
  a = c(d, e);
  if (zh) {
    f2 = 0;
    do {
      zh = false;
      if (!(25 > f2))
        throw Error(y(301));
      f2 += 1;
      T = S = null;
      b.updateQueue = null;
      vh.current = Fh;
      a = c(d, e);
    } while (zh);
  }
  vh.current = Gh;
  b = S !== null && S.next !== null;
  xh = 0;
  T = S = R = null;
  yh = false;
  if (b)
    throw Error(y(300));
  return a;
}
function Hh() {
  var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  T === null ? R.memoizedState = T = a : T = T.next = a;
  return T;
}
function Ih() {
  if (S === null) {
    var a = R.alternate;
    a = a !== null ? a.memoizedState : null;
  } else
    a = S.next;
  var b = T === null ? R.memoizedState : T.next;
  if (b !== null)
    T = b, S = a;
  else {
    if (a === null)
      throw Error(y(310));
    S = a;
    a = { memoizedState: S.memoizedState, baseState: S.baseState, baseQueue: S.baseQueue, queue: S.queue, next: null };
    T === null ? R.memoizedState = T = a : T = T.next = a;
  }
  return T;
}
function Jh(a, b) {
  return typeof b === "function" ? b(a) : b;
}
function Kh(a) {
  var b = Ih(), c = b.queue;
  if (c === null)
    throw Error(y(311));
  c.lastRenderedReducer = a;
  var d = S, e = d.baseQueue, f2 = c.pending;
  if (f2 !== null) {
    if (e !== null) {
      var g2 = e.next;
      e.next = f2.next;
      f2.next = g2;
    }
    d.baseQueue = e = f2;
    c.pending = null;
  }
  if (e !== null) {
    e = e.next;
    d = d.baseState;
    var h2 = g2 = f2 = null, k = e;
    do {
      var l2 = k.lane;
      if ((xh & l2) === l2)
        h2 !== null && (h2 = h2.next = { lane: 0, action: k.action, eagerReducer: k.eagerReducer, eagerState: k.eagerState, next: null }), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);
      else {
        var n2 = {
          lane: l2,
          action: k.action,
          eagerReducer: k.eagerReducer,
          eagerState: k.eagerState,
          next: null
        };
        h2 === null ? (g2 = h2 = n2, f2 = d) : h2 = h2.next = n2;
        R.lanes |= l2;
        Dg |= l2;
      }
      k = k.next;
    } while (k !== null && k !== e);
    h2 === null ? f2 = d : h2.next = g2;
    He(d, b.memoizedState) || (ug = true);
    b.memoizedState = d;
    b.baseState = f2;
    b.baseQueue = h2;
    c.lastRenderedState = d;
  }
  return [b.memoizedState, c.dispatch];
}
function Lh(a) {
  var b = Ih(), c = b.queue;
  if (c === null)
    throw Error(y(311));
  c.lastRenderedReducer = a;
  var d = c.dispatch, e = c.pending, f2 = b.memoizedState;
  if (e !== null) {
    c.pending = null;
    var g2 = e = e.next;
    do
      f2 = a(f2, g2.action), g2 = g2.next;
    while (g2 !== e);
    He(f2, b.memoizedState) || (ug = true);
    b.memoizedState = f2;
    b.baseQueue === null && (b.baseState = f2);
    c.lastRenderedState = f2;
  }
  return [f2, d];
}
function Mh(a, b, c) {
  var d = b._getVersion;
  d = d(b._source);
  var e = b._workInProgressVersionPrimary;
  if (e !== null)
    a = e === d;
  else if (a = a.mutableReadLanes, a = (xh & a) === a)
    b._workInProgressVersionPrimary = d, th.push(b);
  if (a)
    return c(b._source);
  th.push(b);
  throw Error(y(350));
}
function Nh(a, b, c, d) {
  var e = U;
  if (e === null)
    throw Error(y(349));
  var f2 = b._getVersion, g2 = f2(b._source), h2 = vh.current, k = h2.useState(function() {
    return Mh(e, b, c);
  }), l2 = k[1], n2 = k[0];
  k = T;
  var A2 = a.memoizedState, p2 = A2.refs, C2 = p2.getSnapshot, x2 = A2.source;
  A2 = A2.subscribe;
  var w2 = R;
  a.memoizedState = { refs: p2, source: b, subscribe: d };
  h2.useEffect(function() {
    p2.getSnapshot = c;
    p2.setSnapshot = l2;
    var a2 = f2(b._source);
    if (!He(g2, a2)) {
      a2 = c(b._source);
      He(n2, a2) || (l2(a2), a2 = Ig(w2), e.mutableReadLanes |= a2 & e.pendingLanes);
      a2 = e.mutableReadLanes;
      e.entangledLanes |= a2;
      for (var d2 = e.entanglements, h3 = a2; 0 < h3; ) {
        var k2 = 31 - Vc(h3), v2 = 1 << k2;
        d2[k2] |= a2;
        h3 &= ~v2;
      }
    }
  }, [c, b, d]);
  h2.useEffect(function() {
    return d(b._source, function() {
      var a2 = p2.getSnapshot, c2 = p2.setSnapshot;
      try {
        c2(a2(b._source));
        var d2 = Ig(w2);
        e.mutableReadLanes |= d2 & e.pendingLanes;
      } catch (q2) {
        c2(function() {
          throw q2;
        });
      }
    });
  }, [b, d]);
  He(C2, c) && He(x2, b) && He(A2, d) || (a = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: n2 }, a.dispatch = l2 = Oh.bind(null, R, a), k.queue = a, k.baseQueue = null, n2 = Mh(e, b, c), k.memoizedState = k.baseState = n2);
  return n2;
}
function Ph(a, b, c) {
  var d = Ih();
  return Nh(d, a, b, c);
}
function Qh(a) {
  var b = Hh();
  typeof a === "function" && (a = a());
  b.memoizedState = b.baseState = a;
  a = b.queue = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: a };
  a = a.dispatch = Oh.bind(null, R, a);
  return [b.memoizedState, a];
}
function Rh(a, b, c, d) {
  a = { tag: a, create: b, destroy: c, deps: d, next: null };
  b = R.updateQueue;
  b === null ? (b = { lastEffect: null }, R.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, c === null ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
  return a;
}
function Sh(a) {
  var b = Hh();
  a = { current: a };
  return b.memoizedState = a;
}
function Th() {
  return Ih().memoizedState;
}
function Uh(a, b, c, d) {
  var e = Hh();
  R.flags |= a;
  e.memoizedState = Rh(1 | b, c, void 0, d === void 0 ? null : d);
}
function Vh(a, b, c, d) {
  var e = Ih();
  d = d === void 0 ? null : d;
  var f2 = void 0;
  if (S !== null) {
    var g2 = S.memoizedState;
    f2 = g2.destroy;
    if (d !== null && Bh(d, g2.deps)) {
      Rh(b, c, f2, d);
      return;
    }
  }
  R.flags |= a;
  e.memoizedState = Rh(1 | b, c, f2, d);
}
function Wh(a, b) {
  return Uh(516, 4, a, b);
}
function Xh(a, b) {
  return Vh(516, 4, a, b);
}
function Yh(a, b) {
  return Vh(4, 2, a, b);
}
function Zh(a, b) {
  if (typeof b === "function")
    return a = a(), b(a), function() {
      b(null);
    };
  if (b !== null && b !== void 0)
    return a = a(), b.current = a, function() {
      b.current = null;
    };
}
function $h(a, b, c) {
  c = c !== null && c !== void 0 ? c.concat([a]) : null;
  return Vh(4, 2, Zh.bind(null, b, a), c);
}
function ai() {
}
function bi(a, b) {
  var c = Ih();
  b = b === void 0 ? null : b;
  var d = c.memoizedState;
  if (d !== null && b !== null && Bh(b, d[1]))
    return d[0];
  c.memoizedState = [a, b];
  return a;
}
function ci(a, b) {
  var c = Ih();
  b = b === void 0 ? null : b;
  var d = c.memoizedState;
  if (d !== null && b !== null && Bh(b, d[1]))
    return d[0];
  a = a();
  c.memoizedState = [a, b];
  return a;
}
function di(a, b) {
  var c = eg();
  gg(98 > c ? 98 : c, function() {
    a(true);
  });
  gg(97 < c ? 97 : c, function() {
    var c2 = wh.transition;
    wh.transition = 1;
    try {
      a(false), b();
    } finally {
      wh.transition = c2;
    }
  });
}
function Oh(a, b, c) {
  var d = Hg(), e = Ig(a), f2 = { lane: e, action: c, eagerReducer: null, eagerState: null, next: null }, g2 = b.pending;
  g2 === null ? f2.next = f2 : (f2.next = g2.next, g2.next = f2);
  b.pending = f2;
  g2 = a.alternate;
  if (a === R || g2 !== null && g2 === R)
    zh = yh = true;
  else {
    if (a.lanes === 0 && (g2 === null || g2.lanes === 0) && (g2 = b.lastRenderedReducer, g2 !== null))
      try {
        var h2 = b.lastRenderedState, k = g2(h2, c);
        f2.eagerReducer = g2;
        f2.eagerState = k;
        if (He(k, h2))
          return;
      } catch (l2) {
      } finally {
      }
    Jg(a, e, d);
  }
}
var Gh = { readContext: vg, useCallback: Ah, useContext: Ah, useEffect: Ah, useImperativeHandle: Ah, useLayoutEffect: Ah, useMemo: Ah, useReducer: Ah, useRef: Ah, useState: Ah, useDebugValue: Ah, useDeferredValue: Ah, useTransition: Ah, useMutableSource: Ah, useOpaqueIdentifier: Ah, unstable_isNewReconciler: false }, Dh = { readContext: vg, useCallback: function(a, b) {
  Hh().memoizedState = [a, b === void 0 ? null : b];
  return a;
}, useContext: vg, useEffect: Wh, useImperativeHandle: function(a, b, c) {
  c = c !== null && c !== void 0 ? c.concat([a]) : null;
  return Uh(4, 2, Zh.bind(null, b, a), c);
}, useLayoutEffect: function(a, b) {
  return Uh(4, 2, a, b);
}, useMemo: function(a, b) {
  var c = Hh();
  b = b === void 0 ? null : b;
  a = a();
  c.memoizedState = [a, b];
  return a;
}, useReducer: function(a, b, c) {
  var d = Hh();
  b = c !== void 0 ? c(b) : b;
  d.memoizedState = d.baseState = b;
  a = d.queue = { pending: null, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };
  a = a.dispatch = Oh.bind(null, R, a);
  return [d.memoizedState, a];
}, useRef: Sh, useState: Qh, useDebugValue: ai, useDeferredValue: function(a) {
  var b = Qh(a), c = b[0], d = b[1];
  Wh(function() {
    var b2 = wh.transition;
    wh.transition = 1;
    try {
      d(a);
    } finally {
      wh.transition = b2;
    }
  }, [a]);
  return c;
}, useTransition: function() {
  var a = Qh(false), b = a[0];
  a = di.bind(null, a[1]);
  Sh(a);
  return [a, b];
}, useMutableSource: function(a, b, c) {
  var d = Hh();
  d.memoizedState = { refs: { getSnapshot: b, setSnapshot: null }, source: a, subscribe: c };
  return Nh(d, a, b, c);
}, useOpaqueIdentifier: function() {
  if (lh) {
    var a = false, b = uf(function() {
      a || (a = true, c("r:" + (tf++).toString(36)));
      throw Error(y(355));
    }), c = Qh(b)[1];
    (R.mode & 2) === 0 && (R.flags |= 516, Rh(5, function() {
      c("r:" + (tf++).toString(36));
    }, void 0, null));
    return b;
  }
  b = "r:" + (tf++).toString(36);
  Qh(b);
  return b;
}, unstable_isNewReconciler: false }, Eh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Kh, useRef: Th, useState: function() {
  return Kh(Jh);
}, useDebugValue: ai, useDeferredValue: function(a) {
  var b = Kh(Jh), c = b[0], d = b[1];
  Xh(function() {
    var b2 = wh.transition;
    wh.transition = 1;
    try {
      d(a);
    } finally {
      wh.transition = b2;
    }
  }, [a]);
  return c;
}, useTransition: function() {
  var a = Kh(Jh)[0];
  return [
    Th().current,
    a
  ];
}, useMutableSource: Ph, useOpaqueIdentifier: function() {
  return Kh(Jh)[0];
}, unstable_isNewReconciler: false }, Fh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Lh, useRef: Th, useState: function() {
  return Lh(Jh);
}, useDebugValue: ai, useDeferredValue: function(a) {
  var b = Lh(Jh), c = b[0], d = b[1];
  Xh(function() {
    var b2 = wh.transition;
    wh.transition = 1;
    try {
      d(a);
    } finally {
      wh.transition = b2;
    }
  }, [a]);
  return c;
}, useTransition: function() {
  var a = Lh(Jh)[0];
  return [
    Th().current,
    a
  ];
}, useMutableSource: Ph, useOpaqueIdentifier: function() {
  return Lh(Jh)[0];
}, unstable_isNewReconciler: false }, ei = ra.ReactCurrentOwner, ug = false;
function fi(a, b, c, d) {
  b.child = a === null ? Zg(b, null, c, d) : Yg(b, a.child, c, d);
}
function gi(a, b, c, d, e) {
  c = c.render;
  var f2 = b.ref;
  tg(b, e);
  d = Ch(a, b, c, d, f2, e);
  if (a !== null && !ug)
    return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi$1(a, b, e);
  b.flags |= 1;
  fi(a, b, d, e);
  return b.child;
}
function ii(a, b, c, d, e, f2) {
  if (a === null) {
    var g2 = c.type;
    if (typeof g2 === "function" && !ji(g2) && g2.defaultProps === void 0 && c.compare === null && c.defaultProps === void 0)
      return b.tag = 15, b.type = g2, ki(a, b, g2, d, e, f2);
    a = Vg(c.type, null, d, b, b.mode, f2);
    a.ref = b.ref;
    a.return = b;
    return b.child = a;
  }
  g2 = a.child;
  if ((e & f2) === 0 && (e = g2.memoizedProps, c = c.compare, c = c !== null ? c : Je, c(e, d) && a.ref === b.ref))
    return hi$1(a, b, f2);
  b.flags |= 1;
  a = Tg(g2, d);
  a.ref = b.ref;
  a.return = b;
  return b.child = a;
}
function ki(a, b, c, d, e, f2) {
  if (a !== null && Je(a.memoizedProps, d) && a.ref === b.ref)
    if (ug = false, (f2 & e) !== 0)
      (a.flags & 16384) !== 0 && (ug = true);
    else
      return b.lanes = a.lanes, hi$1(a, b, f2);
  return li(a, b, c, d, f2);
}
function mi(a, b, c) {
  var d = b.pendingProps, e = d.children, f2 = a !== null ? a.memoizedState : null;
  if (d.mode === "hidden" || d.mode === "unstable-defer-without-hiding")
    if ((b.mode & 4) === 0)
      b.memoizedState = { baseLanes: 0 }, ni(b, c);
    else if ((c & 1073741824) !== 0)
      b.memoizedState = { baseLanes: 0 }, ni(b, f2 !== null ? f2.baseLanes : c);
    else
      return a = f2 !== null ? f2.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a }, ni(b, a), null;
  else
    f2 !== null ? (d = f2.baseLanes | c, b.memoizedState = null) : d = c, ni(b, d);
  fi(a, b, e, c);
  return b.child;
}
function oi(a, b) {
  var c = b.ref;
  if (a === null && c !== null || a !== null && a.ref !== c)
    b.flags |= 128;
}
function li(a, b, c, d, e) {
  var f2 = Ff(c) ? Df : M.current;
  f2 = Ef(b, f2);
  tg(b, e);
  c = Ch(a, b, c, d, f2, e);
  if (a !== null && !ug)
    return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi$1(a, b, e);
  b.flags |= 1;
  fi(a, b, c, e);
  return b.child;
}
function pi(a, b, c, d, e) {
  if (Ff(c)) {
    var f2 = true;
    Jf(b);
  } else
    f2 = false;
  tg(b, e);
  if (b.stateNode === null)
    a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d), Og(b, c, d, e), d = true;
  else if (a === null) {
    var g2 = b.stateNode, h2 = b.memoizedProps;
    g2.props = h2;
    var k = g2.context, l2 = c.contextType;
    typeof l2 === "object" && l2 !== null ? l2 = vg(l2) : (l2 = Ff(c) ? Df : M.current, l2 = Ef(b, l2));
    var n2 = c.getDerivedStateFromProps, A2 = typeof n2 === "function" || typeof g2.getSnapshotBeforeUpdate === "function";
    A2 || typeof g2.UNSAFE_componentWillReceiveProps !== "function" && typeof g2.componentWillReceiveProps !== "function" || (h2 !== d || k !== l2) && Ng(b, g2, d, l2);
    wg = false;
    var p2 = b.memoizedState;
    g2.state = p2;
    Cg(b, d, g2, e);
    k = b.memoizedState;
    h2 !== d || p2 !== k || N.current || wg ? (typeof n2 === "function" && (Gg(b, c, n2, d), k = b.memoizedState), (h2 = wg || Lg(b, c, h2, d, p2, k, l2)) ? (A2 || typeof g2.UNSAFE_componentWillMount !== "function" && typeof g2.componentWillMount !== "function" || (typeof g2.componentWillMount === "function" && g2.componentWillMount(), typeof g2.UNSAFE_componentWillMount === "function" && g2.UNSAFE_componentWillMount()), typeof g2.componentDidMount === "function" && (b.flags |= 4)) : (typeof g2.componentDidMount === "function" && (b.flags |= 4), b.memoizedProps = d, b.memoizedState = k), g2.props = d, g2.state = k, g2.context = l2, d = h2) : (typeof g2.componentDidMount === "function" && (b.flags |= 4), d = false);
  } else {
    g2 = b.stateNode;
    yg(a, b);
    h2 = b.memoizedProps;
    l2 = b.type === b.elementType ? h2 : lg(b.type, h2);
    g2.props = l2;
    A2 = b.pendingProps;
    p2 = g2.context;
    k = c.contextType;
    typeof k === "object" && k !== null ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));
    var C2 = c.getDerivedStateFromProps;
    (n2 = typeof C2 === "function" || typeof g2.getSnapshotBeforeUpdate === "function") || typeof g2.UNSAFE_componentWillReceiveProps !== "function" && typeof g2.componentWillReceiveProps !== "function" || (h2 !== A2 || p2 !== k) && Ng(b, g2, d, k);
    wg = false;
    p2 = b.memoizedState;
    g2.state = p2;
    Cg(b, d, g2, e);
    var x2 = b.memoizedState;
    h2 !== A2 || p2 !== x2 || N.current || wg ? (typeof C2 === "function" && (Gg(b, c, C2, d), x2 = b.memoizedState), (l2 = wg || Lg(b, c, l2, d, p2, x2, k)) ? (n2 || typeof g2.UNSAFE_componentWillUpdate !== "function" && typeof g2.componentWillUpdate !== "function" || (typeof g2.componentWillUpdate === "function" && g2.componentWillUpdate(d, x2, k), typeof g2.UNSAFE_componentWillUpdate === "function" && g2.UNSAFE_componentWillUpdate(d, x2, k)), typeof g2.componentDidUpdate === "function" && (b.flags |= 4), typeof g2.getSnapshotBeforeUpdate === "function" && (b.flags |= 256)) : (typeof g2.componentDidUpdate !== "function" || h2 === a.memoizedProps && p2 === a.memoizedState || (b.flags |= 4), typeof g2.getSnapshotBeforeUpdate !== "function" || h2 === a.memoizedProps && p2 === a.memoizedState || (b.flags |= 256), b.memoizedProps = d, b.memoizedState = x2), g2.props = d, g2.state = x2, g2.context = k, d = l2) : (typeof g2.componentDidUpdate !== "function" || h2 === a.memoizedProps && p2 === a.memoizedState || (b.flags |= 4), typeof g2.getSnapshotBeforeUpdate !== "function" || h2 === a.memoizedProps && p2 === a.memoizedState || (b.flags |= 256), d = false);
  }
  return qi(a, b, c, d, f2, e);
}
function qi(a, b, c, d, e, f2) {
  oi(a, b);
  var g2 = (b.flags & 64) !== 0;
  if (!d && !g2)
    return e && Kf(b, c, false), hi$1(a, b, f2);
  d = b.stateNode;
  ei.current = b;
  var h2 = g2 && typeof c.getDerivedStateFromError !== "function" ? null : d.render();
  b.flags |= 1;
  a !== null && g2 ? (b.child = Yg(b, a.child, null, f2), b.child = Yg(b, null, h2, f2)) : fi(a, b, h2, f2);
  b.memoizedState = d.state;
  e && Kf(b, c, true);
  return b.child;
}
function ri(a) {
  var b = a.stateNode;
  b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, false);
  eh(a, b.containerInfo);
}
var si = { dehydrated: null, retryLane: 0 };
function ti(a, b, c) {
  var d = b.pendingProps, e = P.current, f2 = false, g2;
  (g2 = (b.flags & 64) !== 0) || (g2 = a !== null && a.memoizedState === null ? false : (e & 2) !== 0);
  g2 ? (f2 = true, b.flags &= -65) : a !== null && a.memoizedState === null || d.fallback === void 0 || d.unstable_avoidThisFallback === true || (e |= 1);
  I(P, e & 1);
  if (a === null) {
    d.fallback !== void 0 && ph(b);
    a = d.children;
    e = d.fallback;
    if (f2)
      return a = ui(b, a, e, c), b.child.memoizedState = { baseLanes: c }, b.memoizedState = si, a;
    if (typeof d.unstable_expectedLoadTime === "number")
      return a = ui(b, a, e, c), b.child.memoizedState = { baseLanes: c }, b.memoizedState = si, b.lanes = 33554432, a;
    c = vi({ mode: "visible", children: a }, b.mode, c, null);
    c.return = b;
    return b.child = c;
  }
  if (a.memoizedState !== null) {
    if (f2)
      return d = wi(a, b, d.children, d.fallback, c), f2 = b.child, e = a.child.memoizedState, f2.memoizedState = e === null ? { baseLanes: c } : { baseLanes: e.baseLanes | c }, f2.childLanes = a.childLanes & ~c, b.memoizedState = si, d;
    c = xi(a, b, d.children, c);
    b.memoizedState = null;
    return c;
  }
  if (f2)
    return d = wi(a, b, d.children, d.fallback, c), f2 = b.child, e = a.child.memoizedState, f2.memoizedState = e === null ? { baseLanes: c } : { baseLanes: e.baseLanes | c }, f2.childLanes = a.childLanes & ~c, b.memoizedState = si, d;
  c = xi(a, b, d.children, c);
  b.memoizedState = null;
  return c;
}
function ui(a, b, c, d) {
  var e = a.mode, f2 = a.child;
  b = { mode: "hidden", children: b };
  (e & 2) === 0 && f2 !== null ? (f2.childLanes = 0, f2.pendingProps = b) : f2 = vi(b, e, 0, null);
  c = Xg(c, e, d, null);
  f2.return = a;
  c.return = a;
  f2.sibling = c;
  a.child = f2;
  return c;
}
function xi(a, b, c, d) {
  var e = a.child;
  a = e.sibling;
  c = Tg(e, { mode: "visible", children: c });
  (b.mode & 2) === 0 && (c.lanes = d);
  c.return = b;
  c.sibling = null;
  a !== null && (a.nextEffect = null, a.flags = 8, b.firstEffect = b.lastEffect = a);
  return b.child = c;
}
function wi(a, b, c, d, e) {
  var f2 = b.mode, g2 = a.child;
  a = g2.sibling;
  var h2 = { mode: "hidden", children: c };
  (f2 & 2) === 0 && b.child !== g2 ? (c = b.child, c.childLanes = 0, c.pendingProps = h2, g2 = c.lastEffect, g2 !== null ? (b.firstEffect = c.firstEffect, b.lastEffect = g2, g2.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g2, h2);
  a !== null ? d = Tg(a, d) : (d = Xg(d, f2, e, null), d.flags |= 2);
  d.return = b;
  c.return = b;
  c.sibling = d;
  b.child = c;
  return d;
}
function yi(a, b) {
  a.lanes |= b;
  var c = a.alternate;
  c !== null && (c.lanes |= b);
  sg(a.return, b);
}
function zi(a, b, c, d, e, f2) {
  var g2 = a.memoizedState;
  g2 === null ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e, lastEffect: f2 } : (g2.isBackwards = b, g2.rendering = null, g2.renderingStartTime = 0, g2.last = d, g2.tail = c, g2.tailMode = e, g2.lastEffect = f2);
}
function Ai(a, b, c) {
  var d = b.pendingProps, e = d.revealOrder, f2 = d.tail;
  fi(a, b, d.children, c);
  d = P.current;
  if ((d & 2) !== 0)
    d = d & 1 | 2, b.flags |= 64;
  else {
    if (a !== null && (a.flags & 64) !== 0)
      a:
        for (a = b.child; a !== null; ) {
          if (a.tag === 13)
            a.memoizedState !== null && yi(a, c);
          else if (a.tag === 19)
            yi(a, c);
          else if (a.child !== null) {
            a.child.return = a;
            a = a.child;
            continue;
          }
          if (a === b)
            break a;
          for (; a.sibling === null; ) {
            if (a.return === null || a.return === b)
              break a;
            a = a.return;
          }
          a.sibling.return = a.return;
          a = a.sibling;
        }
    d &= 1;
  }
  I(P, d);
  if ((b.mode & 2) === 0)
    b.memoizedState = null;
  else
    switch (e) {
      case "forwards":
        c = b.child;
        for (e = null; c !== null; )
          a = c.alternate, a !== null && ih(a) === null && (e = c), c = c.sibling;
        c = e;
        c === null ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
        zi(b, false, e, c, f2, b.lastEffect);
        break;
      case "backwards":
        c = null;
        e = b.child;
        for (b.child = null; e !== null; ) {
          a = e.alternate;
          if (a !== null && ih(a) === null) {
            b.child = e;
            break;
          }
          a = e.sibling;
          e.sibling = c;
          c = e;
          e = a;
        }
        zi(b, true, c, null, f2, b.lastEffect);
        break;
      case "together":
        zi(b, false, null, null, void 0, b.lastEffect);
        break;
      default:
        b.memoizedState = null;
    }
  return b.child;
}
function hi$1(a, b, c) {
  a !== null && (b.dependencies = a.dependencies);
  Dg |= b.lanes;
  if ((c & b.childLanes) !== 0) {
    if (a !== null && b.child !== a.child)
      throw Error(y(153));
    if (b.child !== null) {
      a = b.child;
      c = Tg(a, a.pendingProps);
      b.child = c;
      for (c.return = b; a.sibling !== null; )
        a = a.sibling, c = c.sibling = Tg(a, a.pendingProps), c.return = b;
      c.sibling = null;
    }
    return b.child;
  }
  return null;
}
var Bi, Ci, Di, Ei;
Bi = function(a, b) {
  for (var c = b.child; c !== null; ) {
    if (c.tag === 5 || c.tag === 6)
      a.appendChild(c.stateNode);
    else if (c.tag !== 4 && c.child !== null) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === b)
      break;
    for (; c.sibling === null; ) {
      if (c.return === null || c.return === b)
        return;
      c = c.return;
    }
    c.sibling.return = c.return;
    c = c.sibling;
  }
};
Ci = function() {
};
Di = function(a, b, c, d) {
  var e = a.memoizedProps;
  if (e !== d) {
    a = b.stateNode;
    dh(ah.current);
    var f2 = null;
    switch (c) {
      case "input":
        e = Ya(a, e);
        d = Ya(a, d);
        f2 = [];
        break;
      case "option":
        e = eb(a, e);
        d = eb(a, d);
        f2 = [];
        break;
      case "select":
        e = m$1({}, e, { value: void 0 });
        d = m$1({}, d, { value: void 0 });
        f2 = [];
        break;
      case "textarea":
        e = gb(a, e);
        d = gb(a, d);
        f2 = [];
        break;
      default:
        typeof e.onClick !== "function" && typeof d.onClick === "function" && (a.onclick = jf);
    }
    vb(c, d);
    var g2;
    c = null;
    for (l2 in e)
      if (!d.hasOwnProperty(l2) && e.hasOwnProperty(l2) && e[l2] != null)
        if (l2 === "style") {
          var h2 = e[l2];
          for (g2 in h2)
            h2.hasOwnProperty(g2) && (c || (c = {}), c[g2] = "");
        } else
          l2 !== "dangerouslySetInnerHTML" && l2 !== "children" && l2 !== "suppressContentEditableWarning" && l2 !== "suppressHydrationWarning" && l2 !== "autoFocus" && (ca.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
    for (l2 in d) {
      var k = d[l2];
      h2 = e != null ? e[l2] : void 0;
      if (d.hasOwnProperty(l2) && k !== h2 && (k != null || h2 != null))
        if (l2 === "style")
          if (h2) {
            for (g2 in h2)
              !h2.hasOwnProperty(g2) || k && k.hasOwnProperty(g2) || (c || (c = {}), c[g2] = "");
            for (g2 in k)
              k.hasOwnProperty(g2) && h2[g2] !== k[g2] && (c || (c = {}), c[g2] = k[g2]);
          } else
            c || (f2 || (f2 = []), f2.push(l2, c)), c = k;
        else
          l2 === "dangerouslySetInnerHTML" ? (k = k ? k.__html : void 0, h2 = h2 ? h2.__html : void 0, k != null && h2 !== k && (f2 = f2 || []).push(l2, k)) : l2 === "children" ? typeof k !== "string" && typeof k !== "number" || (f2 = f2 || []).push(l2, "" + k) : l2 !== "suppressContentEditableWarning" && l2 !== "suppressHydrationWarning" && (ca.hasOwnProperty(l2) ? (k != null && l2 === "onScroll" && G("scroll", a), f2 || h2 === k || (f2 = [])) : typeof k === "object" && k !== null && k.$$typeof === Ga ? k.toString() : (f2 = f2 || []).push(l2, k));
    }
    c && (f2 = f2 || []).push("style", c);
    var l2 = f2;
    if (b.updateQueue = l2)
      b.flags |= 4;
  }
};
Ei = function(a, b, c, d) {
  c !== d && (b.flags |= 4);
};
function Fi(a, b) {
  if (!lh)
    switch (a.tailMode) {
      case "hidden":
        b = a.tail;
        for (var c = null; b !== null; )
          b.alternate !== null && (c = b), b = b.sibling;
        c === null ? a.tail = null : c.sibling = null;
        break;
      case "collapsed":
        c = a.tail;
        for (var d = null; c !== null; )
          c.alternate !== null && (d = c), c = c.sibling;
        d === null ? b || a.tail === null ? a.tail = null : a.tail.sibling = null : d.sibling = null;
    }
}
function Gi(a, b, c) {
  var d = b.pendingProps;
  switch (b.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return null;
    case 1:
      return Ff(b.type) && Gf(), null;
    case 3:
      fh();
      H(N);
      H(M);
      uh();
      d = b.stateNode;
      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
      if (a === null || a.child === null)
        rh(b) ? b.flags |= 4 : d.hydrate || (b.flags |= 256);
      Ci(b);
      return null;
    case 5:
      hh(b);
      var e = dh(ch.current);
      c = b.type;
      if (a !== null && b.stateNode != null)
        Di(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 128);
      else {
        if (!d) {
          if (b.stateNode === null)
            throw Error(y(166));
          return null;
        }
        a = dh(ah.current);
        if (rh(b)) {
          d = b.stateNode;
          c = b.type;
          var f2 = b.memoizedProps;
          d[wf] = b;
          d[xf] = f2;
          switch (c) {
            case "dialog":
              G("cancel", d);
              G("close", d);
              break;
            case "iframe":
            case "object":
            case "embed":
              G("load", d);
              break;
            case "video":
            case "audio":
              for (a = 0; a < Xe.length; a++)
                G(Xe[a], d);
              break;
            case "source":
              G("error", d);
              break;
            case "img":
            case "image":
            case "link":
              G("error", d);
              G("load", d);
              break;
            case "details":
              G("toggle", d);
              break;
            case "input":
              Za(d, f2);
              G("invalid", d);
              break;
            case "select":
              d._wrapperState = { wasMultiple: !!f2.multiple };
              G("invalid", d);
              break;
            case "textarea":
              hb(d, f2), G("invalid", d);
          }
          vb(c, f2);
          a = null;
          for (var g2 in f2)
            f2.hasOwnProperty(g2) && (e = f2[g2], g2 === "children" ? typeof e === "string" ? d.textContent !== e && (a = ["children", e]) : typeof e === "number" && d.textContent !== "" + e && (a = ["children", "" + e]) : ca.hasOwnProperty(g2) && e != null && g2 === "onScroll" && G("scroll", d));
          switch (c) {
            case "input":
              Va(d);
              cb(d, f2, true);
              break;
            case "textarea":
              Va(d);
              jb(d);
              break;
            case "select":
            case "option":
              break;
            default:
              typeof f2.onClick === "function" && (d.onclick = jf);
          }
          d = a;
          b.updateQueue = d;
          d !== null && (b.flags |= 4);
        } else {
          g2 = e.nodeType === 9 ? e : e.ownerDocument;
          a === kb.html && (a = lb(c));
          a === kb.html ? c === "script" ? (a = g2.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : typeof d.is === "string" ? a = g2.createElement(c, { is: d.is }) : (a = g2.createElement(c), c === "select" && (g2 = a, d.multiple ? g2.multiple = true : d.size && (g2.size = d.size))) : a = g2.createElementNS(a, c);
          a[wf] = b;
          a[xf] = d;
          Bi(a, b, false, false);
          b.stateNode = a;
          g2 = wb(c, d);
          switch (c) {
            case "dialog":
              G("cancel", a);
              G("close", a);
              e = d;
              break;
            case "iframe":
            case "object":
            case "embed":
              G("load", a);
              e = d;
              break;
            case "video":
            case "audio":
              for (e = 0; e < Xe.length; e++)
                G(Xe[e], a);
              e = d;
              break;
            case "source":
              G("error", a);
              e = d;
              break;
            case "img":
            case "image":
            case "link":
              G("error", a);
              G("load", a);
              e = d;
              break;
            case "details":
              G("toggle", a);
              e = d;
              break;
            case "input":
              Za(a, d);
              e = Ya(a, d);
              G("invalid", a);
              break;
            case "option":
              e = eb(a, d);
              break;
            case "select":
              a._wrapperState = { wasMultiple: !!d.multiple };
              e = m$1({}, d, { value: void 0 });
              G("invalid", a);
              break;
            case "textarea":
              hb(a, d);
              e = gb(a, d);
              G("invalid", a);
              break;
            default:
              e = d;
          }
          vb(c, e);
          var h2 = e;
          for (f2 in h2)
            if (h2.hasOwnProperty(f2)) {
              var k = h2[f2];
              f2 === "style" ? tb(a, k) : f2 === "dangerouslySetInnerHTML" ? (k = k ? k.__html : void 0, k != null && ob(a, k)) : f2 === "children" ? typeof k === "string" ? (c !== "textarea" || k !== "") && pb(a, k) : typeof k === "number" && pb(a, "" + k) : f2 !== "suppressContentEditableWarning" && f2 !== "suppressHydrationWarning" && f2 !== "autoFocus" && (ca.hasOwnProperty(f2) ? k != null && f2 === "onScroll" && G("scroll", a) : k != null && qa(a, f2, k, g2));
            }
          switch (c) {
            case "input":
              Va(a);
              cb(a, d, false);
              break;
            case "textarea":
              Va(a);
              jb(a);
              break;
            case "option":
              d.value != null && a.setAttribute("value", "" + Sa(d.value));
              break;
            case "select":
              a.multiple = !!d.multiple;
              f2 = d.value;
              f2 != null ? fb(a, !!d.multiple, f2, false) : d.defaultValue != null && fb(a, !!d.multiple, d.defaultValue, true);
              break;
            default:
              typeof e.onClick === "function" && (a.onclick = jf);
          }
          mf(c, d) && (b.flags |= 4);
        }
        b.ref !== null && (b.flags |= 128);
      }
      return null;
    case 6:
      if (a && b.stateNode != null)
        Ei(a, b, a.memoizedProps, d);
      else {
        if (typeof d !== "string" && b.stateNode === null)
          throw Error(y(166));
        c = dh(ch.current);
        dh(ah.current);
        rh(b) ? (d = b.stateNode, c = b.memoizedProps, d[wf] = b, d.nodeValue !== c && (b.flags |= 4)) : (d = (c.nodeType === 9 ? c : c.ownerDocument).createTextNode(d), d[wf] = b, b.stateNode = d);
      }
      return null;
    case 13:
      H(P);
      d = b.memoizedState;
      if ((b.flags & 64) !== 0)
        return b.lanes = c, b;
      d = d !== null;
      c = false;
      a === null ? b.memoizedProps.fallback !== void 0 && rh(b) : c = a.memoizedState !== null;
      if (d && !c && (b.mode & 2) !== 0)
        if (a === null && b.memoizedProps.unstable_avoidThisFallback !== true || (P.current & 1) !== 0)
          V === 0 && (V = 3);
        else {
          if (V === 0 || V === 3)
            V = 4;
          U === null || (Dg & 134217727) === 0 && (Hi & 134217727) === 0 || Ii(U, W);
        }
      if (d || c)
        b.flags |= 4;
      return null;
    case 4:
      return fh(), Ci(b), a === null && cf(b.stateNode.containerInfo), null;
    case 10:
      return rg(b), null;
    case 17:
      return Ff(b.type) && Gf(), null;
    case 19:
      H(P);
      d = b.memoizedState;
      if (d === null)
        return null;
      f2 = (b.flags & 64) !== 0;
      g2 = d.rendering;
      if (g2 === null)
        if (f2)
          Fi(d, false);
        else {
          if (V !== 0 || a !== null && (a.flags & 64) !== 0)
            for (a = b.child; a !== null; ) {
              g2 = ih(a);
              if (g2 !== null) {
                b.flags |= 64;
                Fi(d, false);
                f2 = g2.updateQueue;
                f2 !== null && (b.updateQueue = f2, b.flags |= 4);
                d.lastEffect === null && (b.firstEffect = null);
                b.lastEffect = d.lastEffect;
                d = c;
                for (c = b.child; c !== null; )
                  f2 = c, a = d, f2.flags &= 2, f2.nextEffect = null, f2.firstEffect = null, f2.lastEffect = null, g2 = f2.alternate, g2 === null ? (f2.childLanes = 0, f2.lanes = a, f2.child = null, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a = g2.dependencies, f2.dependencies = a === null ? null : { lanes: a.lanes, firstContext: a.firstContext }), c = c.sibling;
                I(P, P.current & 1 | 2);
                return b.child;
              }
              a = a.sibling;
            }
          d.tail !== null && O() > Ji && (b.flags |= 64, f2 = true, Fi(d, false), b.lanes = 33554432);
        }
      else {
        if (!f2)
          if (a = ih(g2), a !== null) {
            if (b.flags |= 64, f2 = true, c = a.updateQueue, c !== null && (b.updateQueue = c, b.flags |= 4), Fi(d, true), d.tail === null && d.tailMode === "hidden" && !g2.alternate && !lh)
              return b = b.lastEffect = d.lastEffect, b !== null && (b.nextEffect = null), null;
          } else
            2 * O() - d.renderingStartTime > Ji && c !== 1073741824 && (b.flags |= 64, f2 = true, Fi(d, false), b.lanes = 33554432);
        d.isBackwards ? (g2.sibling = b.child, b.child = g2) : (c = d.last, c !== null ? c.sibling = g2 : b.child = g2, d.last = g2);
      }
      return d.tail !== null ? (c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f2 ? b & 1 | 2 : b & 1), c) : null;
    case 23:
    case 24:
      return Ki(), a !== null && a.memoizedState !== null !== (b.memoizedState !== null) && d.mode !== "unstable-defer-without-hiding" && (b.flags |= 4), null;
  }
  throw Error(y(156, b.tag));
}
function Li(a) {
  switch (a.tag) {
    case 1:
      Ff(a.type) && Gf();
      var b = a.flags;
      return b & 4096 ? (a.flags = b & -4097 | 64, a) : null;
    case 3:
      fh();
      H(N);
      H(M);
      uh();
      b = a.flags;
      if ((b & 64) !== 0)
        throw Error(y(285));
      a.flags = b & -4097 | 64;
      return a;
    case 5:
      return hh(a), null;
    case 13:
      return H(P), b = a.flags, b & 4096 ? (a.flags = b & -4097 | 64, a) : null;
    case 19:
      return H(P), null;
    case 4:
      return fh(), null;
    case 10:
      return rg(a), null;
    case 23:
    case 24:
      return Ki(), null;
    default:
      return null;
  }
}
function Mi(a, b) {
  try {
    var c = "", d = b;
    do
      c += Qa(d), d = d.return;
    while (d);
    var e = c;
  } catch (f2) {
    e = "\nError generating stack: " + f2.message + "\n" + f2.stack;
  }
  return { value: a, source: b, stack: e };
}
function Ni(a, b) {
  try {
    console.error(b.value);
  } catch (c) {
    setTimeout(function() {
      throw c;
    });
  }
}
var Oi = typeof WeakMap === "function" ? WeakMap : Map;
function Pi(a, b, c) {
  c = zg(-1, c);
  c.tag = 3;
  c.payload = { element: null };
  var d = b.value;
  c.callback = function() {
    Qi || (Qi = true, Ri = d);
    Ni(a, b);
  };
  return c;
}
function Si(a, b, c) {
  c = zg(-1, c);
  c.tag = 3;
  var d = a.type.getDerivedStateFromError;
  if (typeof d === "function") {
    var e = b.value;
    c.payload = function() {
      Ni(a, b);
      return d(e);
    };
  }
  var f2 = a.stateNode;
  f2 !== null && typeof f2.componentDidCatch === "function" && (c.callback = function() {
    typeof d !== "function" && (Ti === null ? Ti = new Set([this]) : Ti.add(this), Ni(a, b));
    var c2 = b.stack;
    this.componentDidCatch(b.value, { componentStack: c2 !== null ? c2 : "" });
  });
  return c;
}
var Ui = typeof WeakSet === "function" ? WeakSet : Set;
function Vi(a) {
  var b = a.ref;
  if (b !== null)
    if (typeof b === "function")
      try {
        b(null);
      } catch (c) {
        Wi(a, c);
      }
    else
      b.current = null;
}
function Xi(a, b) {
  switch (b.tag) {
    case 0:
    case 11:
    case 15:
    case 22:
      return;
    case 1:
      if (b.flags & 256 && a !== null) {
        var c = a.memoizedProps, d = a.memoizedState;
        a = b.stateNode;
        b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d);
        a.__reactInternalSnapshotBeforeUpdate = b;
      }
      return;
    case 3:
      b.flags & 256 && qf(b.stateNode.containerInfo);
      return;
    case 5:
    case 6:
    case 4:
    case 17:
      return;
  }
  throw Error(y(163));
}
function Yi(a, b, c) {
  switch (c.tag) {
    case 0:
    case 11:
    case 15:
    case 22:
      b = c.updateQueue;
      b = b !== null ? b.lastEffect : null;
      if (b !== null) {
        a = b = b.next;
        do {
          if ((a.tag & 3) === 3) {
            var d = a.create;
            a.destroy = d();
          }
          a = a.next;
        } while (a !== b);
      }
      b = c.updateQueue;
      b = b !== null ? b.lastEffect : null;
      if (b !== null) {
        a = b = b.next;
        do {
          var e = a;
          d = e.next;
          e = e.tag;
          (e & 4) !== 0 && (e & 1) !== 0 && (Zi(c, a), $i(c, a));
          a = d;
        } while (a !== b);
      }
      return;
    case 1:
      a = c.stateNode;
      c.flags & 4 && (b === null ? a.componentDidMount() : (d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate)));
      b = c.updateQueue;
      b !== null && Eg(c, b, a);
      return;
    case 3:
      b = c.updateQueue;
      if (b !== null) {
        a = null;
        if (c.child !== null)
          switch (c.child.tag) {
            case 5:
              a = c.child.stateNode;
              break;
            case 1:
              a = c.child.stateNode;
          }
        Eg(c, b, a);
      }
      return;
    case 5:
      a = c.stateNode;
      b === null && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();
      return;
    case 6:
      return;
    case 4:
      return;
    case 12:
      return;
    case 13:
      c.memoizedState === null && (c = c.alternate, c !== null && (c = c.memoizedState, c !== null && (c = c.dehydrated, c !== null && Cc(c))));
      return;
    case 19:
    case 17:
    case 20:
    case 21:
    case 23:
    case 24:
      return;
  }
  throw Error(y(163));
}
function aj(a, b) {
  for (var c = a; ; ) {
    if (c.tag === 5) {
      var d = c.stateNode;
      if (b)
        d = d.style, typeof d.setProperty === "function" ? d.setProperty("display", "none", "important") : d.display = "none";
      else {
        d = c.stateNode;
        var e = c.memoizedProps.style;
        e = e !== void 0 && e !== null && e.hasOwnProperty("display") ? e.display : null;
        d.style.display = sb("display", e);
      }
    } else if (c.tag === 6)
      c.stateNode.nodeValue = b ? "" : c.memoizedProps;
    else if ((c.tag !== 23 && c.tag !== 24 || c.memoizedState === null || c === a) && c.child !== null) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === a)
      break;
    for (; c.sibling === null; ) {
      if (c.return === null || c.return === a)
        return;
      c = c.return;
    }
    c.sibling.return = c.return;
    c = c.sibling;
  }
}
function bj(a, b) {
  if (Mf && typeof Mf.onCommitFiberUnmount === "function")
    try {
      Mf.onCommitFiberUnmount(Lf, b);
    } catch (f2) {
    }
  switch (b.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
    case 22:
      a = b.updateQueue;
      if (a !== null && (a = a.lastEffect, a !== null)) {
        var c = a = a.next;
        do {
          var d = c, e = d.destroy;
          d = d.tag;
          if (e !== void 0)
            if ((d & 4) !== 0)
              Zi(b, c);
            else {
              d = b;
              try {
                e();
              } catch (f2) {
                Wi(d, f2);
              }
            }
          c = c.next;
        } while (c !== a);
      }
      break;
    case 1:
      Vi(b);
      a = b.stateNode;
      if (typeof a.componentWillUnmount === "function")
        try {
          a.props = b.memoizedProps, a.state = b.memoizedState, a.componentWillUnmount();
        } catch (f2) {
          Wi(b, f2);
        }
      break;
    case 5:
      Vi(b);
      break;
    case 4:
      cj(a, b);
  }
}
function dj(a) {
  a.alternate = null;
  a.child = null;
  a.dependencies = null;
  a.firstEffect = null;
  a.lastEffect = null;
  a.memoizedProps = null;
  a.memoizedState = null;
  a.pendingProps = null;
  a.return = null;
  a.updateQueue = null;
}
function ej(a) {
  return a.tag === 5 || a.tag === 3 || a.tag === 4;
}
function fj(a) {
  a: {
    for (var b = a.return; b !== null; ) {
      if (ej(b))
        break a;
      b = b.return;
    }
    throw Error(y(160));
  }
  var c = b;
  b = c.stateNode;
  switch (c.tag) {
    case 5:
      var d = false;
      break;
    case 3:
      b = b.containerInfo;
      d = true;
      break;
    case 4:
      b = b.containerInfo;
      d = true;
      break;
    default:
      throw Error(y(161));
  }
  c.flags & 16 && (pb(b, ""), c.flags &= -17);
  a:
    b:
      for (c = a; ; ) {
        for (; c.sibling === null; ) {
          if (c.return === null || ej(c.return)) {
            c = null;
            break a;
          }
          c = c.return;
        }
        c.sibling.return = c.return;
        for (c = c.sibling; c.tag !== 5 && c.tag !== 6 && c.tag !== 18; ) {
          if (c.flags & 2)
            continue b;
          if (c.child === null || c.tag === 4)
            continue b;
          else
            c.child.return = c, c = c.child;
        }
        if (!(c.flags & 2)) {
          c = c.stateNode;
          break a;
        }
      }
  d ? gj(a, c, b) : hj(a, c, b);
}
function gj(a, b, c) {
  var d = a.tag, e = d === 5 || d === 6;
  if (e)
    a = e ? a.stateNode : a.stateNode.instance, b ? c.nodeType === 8 ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (c.nodeType === 8 ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, c !== null && c !== void 0 || b.onclick !== null || (b.onclick = jf));
  else if (d !== 4 && (a = a.child, a !== null))
    for (gj(a, b, c), a = a.sibling; a !== null; )
      gj(a, b, c), a = a.sibling;
}
function hj(a, b, c) {
  var d = a.tag, e = d === 5 || d === 6;
  if (e)
    a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);
  else if (d !== 4 && (a = a.child, a !== null))
    for (hj(a, b, c), a = a.sibling; a !== null; )
      hj(a, b, c), a = a.sibling;
}
function cj(a, b) {
  for (var c = b, d = false, e, f2; ; ) {
    if (!d) {
      d = c.return;
      a:
        for (; ; ) {
          if (d === null)
            throw Error(y(160));
          e = d.stateNode;
          switch (d.tag) {
            case 5:
              f2 = false;
              break a;
            case 3:
              e = e.containerInfo;
              f2 = true;
              break a;
            case 4:
              e = e.containerInfo;
              f2 = true;
              break a;
          }
          d = d.return;
        }
      d = true;
    }
    if (c.tag === 5 || c.tag === 6) {
      a:
        for (var g2 = a, h2 = c, k = h2; ; )
          if (bj(g2, k), k.child !== null && k.tag !== 4)
            k.child.return = k, k = k.child;
          else {
            if (k === h2)
              break a;
            for (; k.sibling === null; ) {
              if (k.return === null || k.return === h2)
                break a;
              k = k.return;
            }
            k.sibling.return = k.return;
            k = k.sibling;
          }
      f2 ? (g2 = e, h2 = c.stateNode, g2.nodeType === 8 ? g2.parentNode.removeChild(h2) : g2.removeChild(h2)) : e.removeChild(c.stateNode);
    } else if (c.tag === 4) {
      if (c.child !== null) {
        e = c.stateNode.containerInfo;
        f2 = true;
        c.child.return = c;
        c = c.child;
        continue;
      }
    } else if (bj(a, c), c.child !== null) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === b)
      break;
    for (; c.sibling === null; ) {
      if (c.return === null || c.return === b)
        return;
      c = c.return;
      c.tag === 4 && (d = false);
    }
    c.sibling.return = c.return;
    c = c.sibling;
  }
}
function ij(a, b) {
  switch (b.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
    case 22:
      var c = b.updateQueue;
      c = c !== null ? c.lastEffect : null;
      if (c !== null) {
        var d = c = c.next;
        do
          (d.tag & 3) === 3 && (a = d.destroy, d.destroy = void 0, a !== void 0 && a()), d = d.next;
        while (d !== c);
      }
      return;
    case 1:
      return;
    case 5:
      c = b.stateNode;
      if (c != null) {
        d = b.memoizedProps;
        var e = a !== null ? a.memoizedProps : d;
        a = b.type;
        var f2 = b.updateQueue;
        b.updateQueue = null;
        if (f2 !== null) {
          c[xf] = d;
          a === "input" && d.type === "radio" && d.name != null && $a(c, d);
          wb(a, e);
          b = wb(a, d);
          for (e = 0; e < f2.length; e += 2) {
            var g2 = f2[e], h2 = f2[e + 1];
            g2 === "style" ? tb(c, h2) : g2 === "dangerouslySetInnerHTML" ? ob(c, h2) : g2 === "children" ? pb(c, h2) : qa(c, g2, h2, b);
          }
          switch (a) {
            case "input":
              ab(c, d);
              break;
            case "textarea":
              ib(c, d);
              break;
            case "select":
              a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f2 = d.value, f2 != null ? fb(c, !!d.multiple, f2, false) : a !== !!d.multiple && (d.defaultValue != null ? fb(c, !!d.multiple, d.defaultValue, true) : fb(c, !!d.multiple, d.multiple ? [] : "", false));
          }
        }
      }
      return;
    case 6:
      if (b.stateNode === null)
        throw Error(y(162));
      b.stateNode.nodeValue = b.memoizedProps;
      return;
    case 3:
      c = b.stateNode;
      c.hydrate && (c.hydrate = false, Cc(c.containerInfo));
      return;
    case 12:
      return;
    case 13:
      b.memoizedState !== null && (jj = O(), aj(b.child, true));
      kj(b);
      return;
    case 19:
      kj(b);
      return;
    case 17:
      return;
    case 23:
    case 24:
      aj(b, b.memoizedState !== null);
      return;
  }
  throw Error(y(163));
}
function kj(a) {
  var b = a.updateQueue;
  if (b !== null) {
    a.updateQueue = null;
    var c = a.stateNode;
    c === null && (c = a.stateNode = new Ui());
    b.forEach(function(b2) {
      var d = lj.bind(null, a, b2);
      c.has(b2) || (c.add(b2), b2.then(d, d));
    });
  }
}
function mj(a, b) {
  return a !== null && (a = a.memoizedState, a === null || a.dehydrated !== null) ? (b = b.memoizedState, b !== null && b.dehydrated === null) : false;
}
var nj = Math.ceil, oj = ra.ReactCurrentDispatcher, pj = ra.ReactCurrentOwner, X = 0, U = null, Y = null, W = 0, qj = 0, rj = Bf(0), V = 0, sj = null, tj = 0, Dg = 0, Hi = 0, uj = 0, vj = null, jj = 0, Ji = Infinity;
function wj() {
  Ji = O() + 500;
}
var Z = null, Qi = false, Ri = null, Ti = null, xj = false, yj = null, zj = 90, Aj = [], Bj = [], Cj = null, Dj = 0, Ej = null, Fj = -1, Gj = 0, Hj = 0, Ij = null, Jj = false;
function Hg() {
  return (X & 48) !== 0 ? O() : Fj !== -1 ? Fj : Fj = O();
}
function Ig(a) {
  a = a.mode;
  if ((a & 2) === 0)
    return 1;
  if ((a & 4) === 0)
    return eg() === 99 ? 1 : 2;
  Gj === 0 && (Gj = tj);
  if (kg.transition !== 0) {
    Hj !== 0 && (Hj = vj !== null ? vj.pendingLanes : 0);
    a = Gj;
    var b = 4186112 & ~Hj;
    b &= -b;
    b === 0 && (a = 4186112 & ~a, b = a & -a, b === 0 && (b = 8192));
    return b;
  }
  a = eg();
  (X & 4) !== 0 && a === 98 ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj));
  return a;
}
function Jg(a, b, c) {
  if (50 < Dj)
    throw Dj = 0, Ej = null, Error(y(185));
  a = Kj(a, b);
  if (a === null)
    return null;
  $c(a, b, c);
  a === U && (Hi |= b, V === 4 && Ii(a, W));
  var d = eg();
  b === 1 ? (X & 8) !== 0 && (X & 48) === 0 ? Lj(a) : (Mj(a, c), X === 0 && (wj(), ig())) : ((X & 4) === 0 || d !== 98 && d !== 99 || (Cj === null ? Cj = new Set([a]) : Cj.add(a)), Mj(a, c));
  vj = a;
}
function Kj(a, b) {
  a.lanes |= b;
  var c = a.alternate;
  c !== null && (c.lanes |= b);
  c = a;
  for (a = a.return; a !== null; )
    a.childLanes |= b, c = a.alternate, c !== null && (c.childLanes |= b), c = a, a = a.return;
  return c.tag === 3 ? c.stateNode : null;
}
function Mj(a, b) {
  for (var c = a.callbackNode, d = a.suspendedLanes, e = a.pingedLanes, f2 = a.expirationTimes, g2 = a.pendingLanes; 0 < g2; ) {
    var h2 = 31 - Vc(g2), k = 1 << h2, l2 = f2[h2];
    if (l2 === -1) {
      if ((k & d) === 0 || (k & e) !== 0) {
        l2 = b;
        Rc(k);
        var n2 = F;
        f2[h2] = 10 <= n2 ? l2 + 250 : 6 <= n2 ? l2 + 5e3 : -1;
      }
    } else
      l2 <= b && (a.expiredLanes |= k);
    g2 &= ~k;
  }
  d = Uc(a, a === U ? W : 0);
  b = F;
  if (d === 0)
    c !== null && (c !== Zf && Pf(c), a.callbackNode = null, a.callbackPriority = 0);
  else {
    if (c !== null) {
      if (a.callbackPriority === b)
        return;
      c !== Zf && Pf(c);
    }
    b === 15 ? (c = Lj.bind(null, a), ag === null ? (ag = [c], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : b === 14 ? c = hg(99, Lj.bind(null, a)) : (c = Tc(b), c = hg(c, Nj.bind(null, a)));
    a.callbackPriority = b;
    a.callbackNode = c;
  }
}
function Nj(a) {
  Fj = -1;
  Hj = Gj = 0;
  if ((X & 48) !== 0)
    throw Error(y(327));
  var b = a.callbackNode;
  if (Oj() && a.callbackNode !== b)
    return null;
  var c = Uc(a, a === U ? W : 0);
  if (c === 0)
    return null;
  var d = c;
  var e = X;
  X |= 16;
  var f2 = Pj();
  if (U !== a || W !== d)
    wj(), Qj(a, d);
  do
    try {
      Rj();
      break;
    } catch (h2) {
      Sj(a, h2);
    }
  while (1);
  qg();
  oj.current = f2;
  X = e;
  Y !== null ? d = 0 : (U = null, W = 0, d = V);
  if ((tj & Hi) !== 0)
    Qj(a, 0);
  else if (d !== 0) {
    d === 2 && (X |= 64, a.hydrate && (a.hydrate = false, qf(a.containerInfo)), c = Wc(a), c !== 0 && (d = Tj(a, c)));
    if (d === 1)
      throw b = sj, Qj(a, 0), Ii(a, c), Mj(a, O()), b;
    a.finishedWork = a.current.alternate;
    a.finishedLanes = c;
    switch (d) {
      case 0:
      case 1:
        throw Error(y(345));
      case 2:
        Uj(a);
        break;
      case 3:
        Ii(a, c);
        if ((c & 62914560) === c && (d = jj + 500 - O(), 10 < d)) {
          if (Uc(a, 0) !== 0)
            break;
          e = a.suspendedLanes;
          if ((e & c) !== c) {
            Hg();
            a.pingedLanes |= a.suspendedLanes & e;
            break;
          }
          a.timeoutHandle = of(Uj.bind(null, a), d);
          break;
        }
        Uj(a);
        break;
      case 4:
        Ii(a, c);
        if ((c & 4186112) === c)
          break;
        d = a.eventTimes;
        for (e = -1; 0 < c; ) {
          var g2 = 31 - Vc(c);
          f2 = 1 << g2;
          g2 = d[g2];
          g2 > e && (e = g2);
          c &= ~f2;
        }
        c = e;
        c = O() - c;
        c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3e3 > c ? 3e3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;
        if (10 < c) {
          a.timeoutHandle = of(Uj.bind(null, a), c);
          break;
        }
        Uj(a);
        break;
      case 5:
        Uj(a);
        break;
      default:
        throw Error(y(329));
    }
  }
  Mj(a, O());
  return a.callbackNode === b ? Nj.bind(null, a) : null;
}
function Ii(a, b) {
  b &= ~uj;
  b &= ~Hi;
  a.suspendedLanes |= b;
  a.pingedLanes &= ~b;
  for (a = a.expirationTimes; 0 < b; ) {
    var c = 31 - Vc(b), d = 1 << c;
    a[c] = -1;
    b &= ~d;
  }
}
function Lj(a) {
  if ((X & 48) !== 0)
    throw Error(y(327));
  Oj();
  if (a === U && (a.expiredLanes & W) !== 0) {
    var b = W;
    var c = Tj(a, b);
    (tj & Hi) !== 0 && (b = Uc(a, b), c = Tj(a, b));
  } else
    b = Uc(a, 0), c = Tj(a, b);
  a.tag !== 0 && c === 2 && (X |= 64, a.hydrate && (a.hydrate = false, qf(a.containerInfo)), b = Wc(a), b !== 0 && (c = Tj(a, b)));
  if (c === 1)
    throw c = sj, Qj(a, 0), Ii(a, b), Mj(a, O()), c;
  a.finishedWork = a.current.alternate;
  a.finishedLanes = b;
  Uj(a);
  Mj(a, O());
  return null;
}
function Vj() {
  if (Cj !== null) {
    var a = Cj;
    Cj = null;
    a.forEach(function(a2) {
      a2.expiredLanes |= 24 & a2.pendingLanes;
      Mj(a2, O());
    });
  }
  ig();
}
function Wj(a, b) {
  var c = X;
  X |= 1;
  try {
    return a(b);
  } finally {
    X = c, X === 0 && (wj(), ig());
  }
}
function Xj(a, b) {
  var c = X;
  X &= -2;
  X |= 8;
  try {
    return a(b);
  } finally {
    X = c, X === 0 && (wj(), ig());
  }
}
function ni(a, b) {
  I(rj, qj);
  qj |= b;
  tj |= b;
}
function Ki() {
  qj = rj.current;
  H(rj);
}
function Qj(a, b) {
  a.finishedWork = null;
  a.finishedLanes = 0;
  var c = a.timeoutHandle;
  c !== -1 && (a.timeoutHandle = -1, pf(c));
  if (Y !== null)
    for (c = Y.return; c !== null; ) {
      var d = c;
      switch (d.tag) {
        case 1:
          d = d.type.childContextTypes;
          d !== null && d !== void 0 && Gf();
          break;
        case 3:
          fh();
          H(N);
          H(M);
          uh();
          break;
        case 5:
          hh(d);
          break;
        case 4:
          fh();
          break;
        case 13:
          H(P);
          break;
        case 19:
          H(P);
          break;
        case 10:
          rg(d);
          break;
        case 23:
        case 24:
          Ki();
      }
      c = c.return;
    }
  U = a;
  Y = Tg(a.current, null);
  W = qj = tj = b;
  V = 0;
  sj = null;
  uj = Hi = Dg = 0;
}
function Sj(a, b) {
  do {
    var c = Y;
    try {
      qg();
      vh.current = Gh;
      if (yh) {
        for (var d = R.memoizedState; d !== null; ) {
          var e = d.queue;
          e !== null && (e.pending = null);
          d = d.next;
        }
        yh = false;
      }
      xh = 0;
      T = S = R = null;
      zh = false;
      pj.current = null;
      if (c === null || c.return === null) {
        V = 1;
        sj = b;
        Y = null;
        break;
      }
      a: {
        var f2 = a, g2 = c.return, h2 = c, k = b;
        b = W;
        h2.flags |= 2048;
        h2.firstEffect = h2.lastEffect = null;
        if (k !== null && typeof k === "object" && typeof k.then === "function") {
          var l2 = k;
          if ((h2.mode & 2) === 0) {
            var n2 = h2.alternate;
            n2 ? (h2.updateQueue = n2.updateQueue, h2.memoizedState = n2.memoizedState, h2.lanes = n2.lanes) : (h2.updateQueue = null, h2.memoizedState = null);
          }
          var A2 = (P.current & 1) !== 0, p2 = g2;
          do {
            var C2;
            if (C2 = p2.tag === 13) {
              var x2 = p2.memoizedState;
              if (x2 !== null)
                C2 = x2.dehydrated !== null ? true : false;
              else {
                var w2 = p2.memoizedProps;
                C2 = w2.fallback === void 0 ? false : w2.unstable_avoidThisFallback !== true ? true : A2 ? false : true;
              }
            }
            if (C2) {
              var z2 = p2.updateQueue;
              if (z2 === null) {
                var u2 = new Set();
                u2.add(l2);
                p2.updateQueue = u2;
              } else
                z2.add(l2);
              if ((p2.mode & 2) === 0) {
                p2.flags |= 64;
                h2.flags |= 16384;
                h2.flags &= -2981;
                if (h2.tag === 1)
                  if (h2.alternate === null)
                    h2.tag = 17;
                  else {
                    var t2 = zg(-1, 1);
                    t2.tag = 2;
                    Ag(h2, t2);
                  }
                h2.lanes |= 1;
                break a;
              }
              k = void 0;
              h2 = b;
              var q2 = f2.pingCache;
              q2 === null ? (q2 = f2.pingCache = new Oi(), k = new Set(), q2.set(l2, k)) : (k = q2.get(l2), k === void 0 && (k = new Set(), q2.set(l2, k)));
              if (!k.has(h2)) {
                k.add(h2);
                var v2 = Yj.bind(null, f2, l2, h2);
                l2.then(v2, v2);
              }
              p2.flags |= 4096;
              p2.lanes = b;
              break a;
            }
            p2 = p2.return;
          } while (p2 !== null);
          k = Error((Ra(h2.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
        }
        V !== 5 && (V = 2);
        k = Mi(k, h2);
        p2 = g2;
        do {
          switch (p2.tag) {
            case 3:
              f2 = k;
              p2.flags |= 4096;
              b &= -b;
              p2.lanes |= b;
              var J2 = Pi(p2, f2, b);
              Bg(p2, J2);
              break a;
            case 1:
              f2 = k;
              var K2 = p2.type, Q2 = p2.stateNode;
              if ((p2.flags & 64) === 0 && (typeof K2.getDerivedStateFromError === "function" || Q2 !== null && typeof Q2.componentDidCatch === "function" && (Ti === null || !Ti.has(Q2)))) {
                p2.flags |= 4096;
                b &= -b;
                p2.lanes |= b;
                var L2 = Si(p2, f2, b);
                Bg(p2, L2);
                break a;
              }
          }
          p2 = p2.return;
        } while (p2 !== null);
      }
      Zj(c);
    } catch (va) {
      b = va;
      Y === c && c !== null && (Y = c = c.return);
      continue;
    }
    break;
  } while (1);
}
function Pj() {
  var a = oj.current;
  oj.current = Gh;
  return a === null ? Gh : a;
}
function Tj(a, b) {
  var c = X;
  X |= 16;
  var d = Pj();
  U === a && W === b || Qj(a, b);
  do
    try {
      ak();
      break;
    } catch (e) {
      Sj(a, e);
    }
  while (1);
  qg();
  X = c;
  oj.current = d;
  if (Y !== null)
    throw Error(y(261));
  U = null;
  W = 0;
  return V;
}
function ak() {
  for (; Y !== null; )
    bk(Y);
}
function Rj() {
  for (; Y !== null && !Qf(); )
    bk(Y);
}
function bk(a) {
  var b = ck(a.alternate, a, qj);
  a.memoizedProps = a.pendingProps;
  b === null ? Zj(a) : Y = b;
  pj.current = null;
}
function Zj(a) {
  var b = a;
  do {
    var c = b.alternate;
    a = b.return;
    if ((b.flags & 2048) === 0) {
      c = Gi(c, b, qj);
      if (c !== null) {
        Y = c;
        return;
      }
      c = b;
      if (c.tag !== 24 && c.tag !== 23 || c.memoizedState === null || (qj & 1073741824) !== 0 || (c.mode & 4) === 0) {
        for (var d = 0, e = c.child; e !== null; )
          d |= e.lanes | e.childLanes, e = e.sibling;
        c.childLanes = d;
      }
      a !== null && (a.flags & 2048) === 0 && (a.firstEffect === null && (a.firstEffect = b.firstEffect), b.lastEffect !== null && (a.lastEffect !== null && (a.lastEffect.nextEffect = b.firstEffect), a.lastEffect = b.lastEffect), 1 < b.flags && (a.lastEffect !== null ? a.lastEffect.nextEffect = b : a.firstEffect = b, a.lastEffect = b));
    } else {
      c = Li(b);
      if (c !== null) {
        c.flags &= 2047;
        Y = c;
        return;
      }
      a !== null && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);
    }
    b = b.sibling;
    if (b !== null) {
      Y = b;
      return;
    }
    Y = b = a;
  } while (b !== null);
  V === 0 && (V = 5);
}
function Uj(a) {
  var b = eg();
  gg(99, dk.bind(null, a, b));
  return null;
}
function dk(a, b) {
  do
    Oj();
  while (yj !== null);
  if ((X & 48) !== 0)
    throw Error(y(327));
  var c = a.finishedWork;
  if (c === null)
    return null;
  a.finishedWork = null;
  a.finishedLanes = 0;
  if (c === a.current)
    throw Error(y(177));
  a.callbackNode = null;
  var d = c.lanes | c.childLanes, e = d, f2 = a.pendingLanes & ~e;
  a.pendingLanes = e;
  a.suspendedLanes = 0;
  a.pingedLanes = 0;
  a.expiredLanes &= e;
  a.mutableReadLanes &= e;
  a.entangledLanes &= e;
  e = a.entanglements;
  for (var g2 = a.eventTimes, h2 = a.expirationTimes; 0 < f2; ) {
    var k = 31 - Vc(f2), l2 = 1 << k;
    e[k] = 0;
    g2[k] = -1;
    h2[k] = -1;
    f2 &= ~l2;
  }
  Cj !== null && (d & 24) === 0 && Cj.has(a) && Cj.delete(a);
  a === U && (Y = U = null, W = 0);
  1 < c.flags ? c.lastEffect !== null ? (c.lastEffect.nextEffect = c, d = c.firstEffect) : d = c : d = c.firstEffect;
  if (d !== null) {
    e = X;
    X |= 32;
    pj.current = null;
    kf = fd;
    g2 = Ne();
    if (Oe(g2)) {
      if ("selectionStart" in g2)
        h2 = { start: g2.selectionStart, end: g2.selectionEnd };
      else
        a:
          if (h2 = (h2 = g2.ownerDocument) && h2.defaultView || window, (l2 = h2.getSelection && h2.getSelection()) && l2.rangeCount !== 0) {
            h2 = l2.anchorNode;
            f2 = l2.anchorOffset;
            k = l2.focusNode;
            l2 = l2.focusOffset;
            try {
              h2.nodeType, k.nodeType;
            } catch (va) {
              h2 = null;
              break a;
            }
            var n2 = 0, A2 = -1, p2 = -1, C2 = 0, x2 = 0, w2 = g2, z2 = null;
            b:
              for (; ; ) {
                for (var u2; ; ) {
                  w2 !== h2 || f2 !== 0 && w2.nodeType !== 3 || (A2 = n2 + f2);
                  w2 !== k || l2 !== 0 && w2.nodeType !== 3 || (p2 = n2 + l2);
                  w2.nodeType === 3 && (n2 += w2.nodeValue.length);
                  if ((u2 = w2.firstChild) === null)
                    break;
                  z2 = w2;
                  w2 = u2;
                }
                for (; ; ) {
                  if (w2 === g2)
                    break b;
                  z2 === h2 && ++C2 === f2 && (A2 = n2);
                  z2 === k && ++x2 === l2 && (p2 = n2);
                  if ((u2 = w2.nextSibling) !== null)
                    break;
                  w2 = z2;
                  z2 = w2.parentNode;
                }
                w2 = u2;
              }
            h2 = A2 === -1 || p2 === -1 ? null : { start: A2, end: p2 };
          } else
            h2 = null;
      h2 = h2 || { start: 0, end: 0 };
    } else
      h2 = null;
    lf = { focusedElem: g2, selectionRange: h2 };
    fd = false;
    Ij = null;
    Jj = false;
    Z = d;
    do
      try {
        ek();
      } catch (va) {
        if (Z === null)
          throw Error(y(330));
        Wi(Z, va);
        Z = Z.nextEffect;
      }
    while (Z !== null);
    Ij = null;
    Z = d;
    do
      try {
        for (g2 = a; Z !== null; ) {
          var t2 = Z.flags;
          t2 & 16 && pb(Z.stateNode, "");
          if (t2 & 128) {
            var q2 = Z.alternate;
            if (q2 !== null) {
              var v2 = q2.ref;
              v2 !== null && (typeof v2 === "function" ? v2(null) : v2.current = null);
            }
          }
          switch (t2 & 1038) {
            case 2:
              fj(Z);
              Z.flags &= -3;
              break;
            case 6:
              fj(Z);
              Z.flags &= -3;
              ij(Z.alternate, Z);
              break;
            case 1024:
              Z.flags &= -1025;
              break;
            case 1028:
              Z.flags &= -1025;
              ij(Z.alternate, Z);
              break;
            case 4:
              ij(Z.alternate, Z);
              break;
            case 8:
              h2 = Z;
              cj(g2, h2);
              var J2 = h2.alternate;
              dj(h2);
              J2 !== null && dj(J2);
          }
          Z = Z.nextEffect;
        }
      } catch (va) {
        if (Z === null)
          throw Error(y(330));
        Wi(Z, va);
        Z = Z.nextEffect;
      }
    while (Z !== null);
    v2 = lf;
    q2 = Ne();
    t2 = v2.focusedElem;
    g2 = v2.selectionRange;
    if (q2 !== t2 && t2 && t2.ownerDocument && Me(t2.ownerDocument.documentElement, t2)) {
      g2 !== null && Oe(t2) && (q2 = g2.start, v2 = g2.end, v2 === void 0 && (v2 = q2), "selectionStart" in t2 ? (t2.selectionStart = q2, t2.selectionEnd = Math.min(v2, t2.value.length)) : (v2 = (q2 = t2.ownerDocument || document) && q2.defaultView || window, v2.getSelection && (v2 = v2.getSelection(), h2 = t2.textContent.length, J2 = Math.min(g2.start, h2), g2 = g2.end === void 0 ? J2 : Math.min(g2.end, h2), !v2.extend && J2 > g2 && (h2 = g2, g2 = J2, J2 = h2), h2 = Le(t2, J2), f2 = Le(t2, g2), h2 && f2 && (v2.rangeCount !== 1 || v2.anchorNode !== h2.node || v2.anchorOffset !== h2.offset || v2.focusNode !== f2.node || v2.focusOffset !== f2.offset) && (q2 = q2.createRange(), q2.setStart(h2.node, h2.offset), v2.removeAllRanges(), J2 > g2 ? (v2.addRange(q2), v2.extend(f2.node, f2.offset)) : (q2.setEnd(f2.node, f2.offset), v2.addRange(q2))))));
      q2 = [];
      for (v2 = t2; v2 = v2.parentNode; )
        v2.nodeType === 1 && q2.push({ element: v2, left: v2.scrollLeft, top: v2.scrollTop });
      typeof t2.focus === "function" && t2.focus();
      for (t2 = 0; t2 < q2.length; t2++)
        v2 = q2[t2], v2.element.scrollLeft = v2.left, v2.element.scrollTop = v2.top;
    }
    fd = !!kf;
    lf = kf = null;
    a.current = c;
    Z = d;
    do
      try {
        for (t2 = a; Z !== null; ) {
          var K2 = Z.flags;
          K2 & 36 && Yi(t2, Z.alternate, Z);
          if (K2 & 128) {
            q2 = void 0;
            var Q2 = Z.ref;
            if (Q2 !== null) {
              var L2 = Z.stateNode;
              switch (Z.tag) {
                case 5:
                  q2 = L2;
                  break;
                default:
                  q2 = L2;
              }
              typeof Q2 === "function" ? Q2(q2) : Q2.current = q2;
            }
          }
          Z = Z.nextEffect;
        }
      } catch (va) {
        if (Z === null)
          throw Error(y(330));
        Wi(Z, va);
        Z = Z.nextEffect;
      }
    while (Z !== null);
    Z = null;
    $f();
    X = e;
  } else
    a.current = c;
  if (xj)
    xj = false, yj = a, zj = b;
  else
    for (Z = d; Z !== null; )
      b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K2 = Z, K2.sibling = null, K2.stateNode = null), Z = b;
  d = a.pendingLanes;
  d === 0 && (Ti = null);
  d === 1 ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0;
  c = c.stateNode;
  if (Mf && typeof Mf.onCommitFiberRoot === "function")
    try {
      Mf.onCommitFiberRoot(Lf, c, void 0, (c.current.flags & 64) === 64);
    } catch (va) {
    }
  Mj(a, O());
  if (Qi)
    throw Qi = false, a = Ri, Ri = null, a;
  if ((X & 8) !== 0)
    return null;
  ig();
  return null;
}
function ek() {
  for (; Z !== null; ) {
    var a = Z.alternate;
    Jj || Ij === null || ((Z.flags & 8) !== 0 ? dc(Z, Ij) && (Jj = true) : Z.tag === 13 && mj(a, Z) && dc(Z, Ij) && (Jj = true));
    var b = Z.flags;
    (b & 256) !== 0 && Xi(a, Z);
    (b & 512) === 0 || xj || (xj = true, hg(97, function() {
      Oj();
      return null;
    }));
    Z = Z.nextEffect;
  }
}
function Oj() {
  if (zj !== 90) {
    var a = 97 < zj ? 97 : zj;
    zj = 90;
    return gg(a, fk);
  }
  return false;
}
function $i(a, b) {
  Aj.push(b, a);
  xj || (xj = true, hg(97, function() {
    Oj();
    return null;
  }));
}
function Zi(a, b) {
  Bj.push(b, a);
  xj || (xj = true, hg(97, function() {
    Oj();
    return null;
  }));
}
function fk() {
  if (yj === null)
    return false;
  var a = yj;
  yj = null;
  if ((X & 48) !== 0)
    throw Error(y(331));
  var b = X;
  X |= 32;
  var c = Bj;
  Bj = [];
  for (var d = 0; d < c.length; d += 2) {
    var e = c[d], f2 = c[d + 1], g2 = e.destroy;
    e.destroy = void 0;
    if (typeof g2 === "function")
      try {
        g2();
      } catch (k) {
        if (f2 === null)
          throw Error(y(330));
        Wi(f2, k);
      }
  }
  c = Aj;
  Aj = [];
  for (d = 0; d < c.length; d += 2) {
    e = c[d];
    f2 = c[d + 1];
    try {
      var h2 = e.create;
      e.destroy = h2();
    } catch (k) {
      if (f2 === null)
        throw Error(y(330));
      Wi(f2, k);
    }
  }
  for (h2 = a.current.firstEffect; h2 !== null; )
    a = h2.nextEffect, h2.nextEffect = null, h2.flags & 8 && (h2.sibling = null, h2.stateNode = null), h2 = a;
  X = b;
  ig();
  return true;
}
function gk(a, b, c) {
  b = Mi(c, b);
  b = Pi(a, b, 1);
  Ag(a, b);
  b = Hg();
  a = Kj(a, 1);
  a !== null && ($c(a, 1, b), Mj(a, b));
}
function Wi(a, b) {
  if (a.tag === 3)
    gk(a, a, b);
  else
    for (var c = a.return; c !== null; ) {
      if (c.tag === 3) {
        gk(c, a, b);
        break;
      } else if (c.tag === 1) {
        var d = c.stateNode;
        if (typeof c.type.getDerivedStateFromError === "function" || typeof d.componentDidCatch === "function" && (Ti === null || !Ti.has(d))) {
          a = Mi(b, a);
          var e = Si(c, a, 1);
          Ag(c, e);
          e = Hg();
          c = Kj(c, 1);
          if (c !== null)
            $c(c, 1, e), Mj(c, e);
          else if (typeof d.componentDidCatch === "function" && (Ti === null || !Ti.has(d)))
            try {
              d.componentDidCatch(b, a);
            } catch (f2) {
            }
          break;
        }
      }
      c = c.return;
    }
}
function Yj(a, b, c) {
  var d = a.pingCache;
  d !== null && d.delete(b);
  b = Hg();
  a.pingedLanes |= a.suspendedLanes & c;
  U === a && (W & c) === c && (V === 4 || V === 3 && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c);
  Mj(a, b);
}
function lj(a, b) {
  var c = a.stateNode;
  c !== null && c.delete(b);
  b = 0;
  b === 0 && (b = a.mode, (b & 2) === 0 ? b = 1 : (b & 4) === 0 ? b = eg() === 99 ? 1 : 2 : (Gj === 0 && (Gj = tj), b = Yc(62914560 & ~Gj), b === 0 && (b = 4194304)));
  c = Hg();
  a = Kj(a, b);
  a !== null && ($c(a, b, c), Mj(a, c));
}
var ck;
ck = function(a, b, c) {
  var d = b.lanes;
  if (a !== null)
    if (a.memoizedProps !== b.pendingProps || N.current)
      ug = true;
    else if ((c & d) !== 0)
      ug = (a.flags & 16384) !== 0 ? true : false;
    else {
      ug = false;
      switch (b.tag) {
        case 3:
          ri(b);
          sh();
          break;
        case 5:
          gh(b);
          break;
        case 1:
          Ff(b.type) && Jf(b);
          break;
        case 4:
          eh(b, b.stateNode.containerInfo);
          break;
        case 10:
          d = b.memoizedProps.value;
          var e = b.type._context;
          I(mg, e._currentValue);
          e._currentValue = d;
          break;
        case 13:
          if (b.memoizedState !== null) {
            if ((c & b.child.childLanes) !== 0)
              return ti(a, b, c);
            I(P, P.current & 1);
            b = hi$1(a, b, c);
            return b !== null ? b.sibling : null;
          }
          I(P, P.current & 1);
          break;
        case 19:
          d = (c & b.childLanes) !== 0;
          if ((a.flags & 64) !== 0) {
            if (d)
              return Ai(a, b, c);
            b.flags |= 64;
          }
          e = b.memoizedState;
          e !== null && (e.rendering = null, e.tail = null, e.lastEffect = null);
          I(P, P.current);
          if (d)
            break;
          else
            return null;
        case 23:
        case 24:
          return b.lanes = 0, mi(a, b, c);
      }
      return hi$1(a, b, c);
    }
  else
    ug = false;
  b.lanes = 0;
  switch (b.tag) {
    case 2:
      d = b.type;
      a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2);
      a = b.pendingProps;
      e = Ef(b, M.current);
      tg(b, c);
      e = Ch(null, b, d, a, e, c);
      b.flags |= 1;
      if (typeof e === "object" && e !== null && typeof e.render === "function" && e.$$typeof === void 0) {
        b.tag = 1;
        b.memoizedState = null;
        b.updateQueue = null;
        if (Ff(d)) {
          var f2 = true;
          Jf(b);
        } else
          f2 = false;
        b.memoizedState = e.state !== null && e.state !== void 0 ? e.state : null;
        xg(b);
        var g2 = d.getDerivedStateFromProps;
        typeof g2 === "function" && Gg(b, d, g2, a);
        e.updater = Kg;
        b.stateNode = e;
        e._reactInternals = b;
        Og(b, d, a, c);
        b = qi(null, b, d, true, f2, c);
      } else
        b.tag = 0, fi(null, b, e, c), b = b.child;
      return b;
    case 16:
      e = b.elementType;
      a: {
        a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2);
        a = b.pendingProps;
        f2 = e._init;
        e = f2(e._payload);
        b.type = e;
        f2 = b.tag = hk(e);
        a = lg(e, a);
        switch (f2) {
          case 0:
            b = li(null, b, e, a, c);
            break a;
          case 1:
            b = pi(null, b, e, a, c);
            break a;
          case 11:
            b = gi(null, b, e, a, c);
            break a;
          case 14:
            b = ii(null, b, e, lg(e.type, a), d, c);
            break a;
        }
        throw Error(y(306, e, ""));
      }
      return b;
    case 0:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), li(a, b, d, e, c);
    case 1:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), pi(a, b, d, e, c);
    case 3:
      ri(b);
      d = b.updateQueue;
      if (a === null || d === null)
        throw Error(y(282));
      d = b.pendingProps;
      e = b.memoizedState;
      e = e !== null ? e.element : null;
      yg(a, b);
      Cg(b, d, null, c);
      d = b.memoizedState.element;
      if (d === e)
        sh(), b = hi$1(a, b, c);
      else {
        e = b.stateNode;
        if (f2 = e.hydrate)
          kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f2 = lh = true;
        if (f2) {
          a = e.mutableSourceEagerHydrationData;
          if (a != null)
            for (e = 0; e < a.length; e += 2)
              f2 = a[e], f2._workInProgressVersionPrimary = a[e + 1], th.push(f2);
          c = Zg(b, null, d, c);
          for (b.child = c; c; )
            c.flags = c.flags & -3 | 1024, c = c.sibling;
        } else
          fi(a, b, d, c), sh();
        b = b.child;
      }
      return b;
    case 5:
      return gh(b), a === null && ph(b), d = b.type, e = b.pendingProps, f2 = a !== null ? a.memoizedProps : null, g2 = e.children, nf(d, e) ? g2 = null : f2 !== null && nf(d, f2) && (b.flags |= 16), oi(a, b), fi(a, b, g2, c), b.child;
    case 6:
      return a === null && ph(b), null;
    case 13:
      return ti(a, b, c);
    case 4:
      return eh(b, b.stateNode.containerInfo), d = b.pendingProps, a === null ? b.child = Yg(b, null, d, c) : fi(a, b, d, c), b.child;
    case 11:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), gi(a, b, d, e, c);
    case 7:
      return fi(a, b, b.pendingProps, c), b.child;
    case 8:
      return fi(a, b, b.pendingProps.children, c), b.child;
    case 12:
      return fi(a, b, b.pendingProps.children, c), b.child;
    case 10:
      a: {
        d = b.type._context;
        e = b.pendingProps;
        g2 = b.memoizedProps;
        f2 = e.value;
        var h2 = b.type._context;
        I(mg, h2._currentValue);
        h2._currentValue = f2;
        if (g2 !== null)
          if (h2 = g2.value, f2 = He(h2, f2) ? 0 : (typeof d._calculateChangedBits === "function" ? d._calculateChangedBits(h2, f2) : 1073741823) | 0, f2 === 0) {
            if (g2.children === e.children && !N.current) {
              b = hi$1(a, b, c);
              break a;
            }
          } else
            for (h2 = b.child, h2 !== null && (h2.return = b); h2 !== null; ) {
              var k = h2.dependencies;
              if (k !== null) {
                g2 = h2.child;
                for (var l2 = k.firstContext; l2 !== null; ) {
                  if (l2.context === d && (l2.observedBits & f2) !== 0) {
                    h2.tag === 1 && (l2 = zg(-1, c & -c), l2.tag = 2, Ag(h2, l2));
                    h2.lanes |= c;
                    l2 = h2.alternate;
                    l2 !== null && (l2.lanes |= c);
                    sg(h2.return, c);
                    k.lanes |= c;
                    break;
                  }
                  l2 = l2.next;
                }
              } else
                g2 = h2.tag === 10 ? h2.type === b.type ? null : h2.child : h2.child;
              if (g2 !== null)
                g2.return = h2;
              else
                for (g2 = h2; g2 !== null; ) {
                  if (g2 === b) {
                    g2 = null;
                    break;
                  }
                  h2 = g2.sibling;
                  if (h2 !== null) {
                    h2.return = g2.return;
                    g2 = h2;
                    break;
                  }
                  g2 = g2.return;
                }
              h2 = g2;
            }
        fi(a, b, e.children, c);
        b = b.child;
      }
      return b;
    case 9:
      return e = b.type, f2 = b.pendingProps, d = f2.children, tg(b, c), e = vg(e, f2.unstable_observedBits), d = d(e), b.flags |= 1, fi(a, b, d, c), b.child;
    case 14:
      return e = b.type, f2 = lg(e, b.pendingProps), f2 = lg(e.type, f2), ii(a, b, e, f2, d, c);
    case 15:
      return ki(a, b, b.type, b.pendingProps, d, c);
    case 17:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d) ? (a = true, Jf(b)) : a = false, tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, true, a, c);
    case 19:
      return Ai(a, b, c);
    case 23:
      return mi(a, b, c);
    case 24:
      return mi(a, b, c);
  }
  throw Error(y(156, b.tag));
};
function ik(a, b, c, d) {
  this.tag = a;
  this.key = c;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d;
  this.flags = 0;
  this.lastEffect = this.firstEffect = this.nextEffect = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function nh(a, b, c, d) {
  return new ik(a, b, c, d);
}
function ji(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}
function hk(a) {
  if (typeof a === "function")
    return ji(a) ? 1 : 0;
  if (a !== void 0 && a !== null) {
    a = a.$$typeof;
    if (a === Aa)
      return 11;
    if (a === Da)
      return 14;
  }
  return 2;
}
function Tg(a, b) {
  var c = a.alternate;
  c === null ? (c = nh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
  c.childLanes = a.childLanes;
  c.lanes = a.lanes;
  c.child = a.child;
  c.memoizedProps = a.memoizedProps;
  c.memoizedState = a.memoizedState;
  c.updateQueue = a.updateQueue;
  b = a.dependencies;
  c.dependencies = b === null ? null : { lanes: b.lanes, firstContext: b.firstContext };
  c.sibling = a.sibling;
  c.index = a.index;
  c.ref = a.ref;
  return c;
}
function Vg(a, b, c, d, e, f2) {
  var g2 = 2;
  d = a;
  if (typeof a === "function")
    ji(a) && (g2 = 1);
  else if (typeof a === "string")
    g2 = 5;
  else
    a:
      switch (a) {
        case ua:
          return Xg(c.children, e, f2, b);
        case Ha:
          g2 = 8;
          e |= 16;
          break;
        case wa:
          g2 = 8;
          e |= 1;
          break;
        case xa:
          return a = nh(12, c, b, e | 8), a.elementType = xa, a.type = xa, a.lanes = f2, a;
        case Ba:
          return a = nh(13, c, b, e), a.type = Ba, a.elementType = Ba, a.lanes = f2, a;
        case Ca:
          return a = nh(19, c, b, e), a.elementType = Ca, a.lanes = f2, a;
        case Ia:
          return vi(c, e, f2, b);
        case Ja:
          return a = nh(24, c, b, e), a.elementType = Ja, a.lanes = f2, a;
        default:
          if (typeof a === "object" && a !== null)
            switch (a.$$typeof) {
              case ya:
                g2 = 10;
                break a;
              case za:
                g2 = 9;
                break a;
              case Aa:
                g2 = 11;
                break a;
              case Da:
                g2 = 14;
                break a;
              case Ea:
                g2 = 16;
                d = null;
                break a;
              case Fa:
                g2 = 22;
                break a;
            }
          throw Error(y(130, a == null ? a : typeof a, ""));
      }
  b = nh(g2, c, b, e);
  b.elementType = a;
  b.type = d;
  b.lanes = f2;
  return b;
}
function Xg(a, b, c, d) {
  a = nh(7, a, d, b);
  a.lanes = c;
  return a;
}
function vi(a, b, c, d) {
  a = nh(23, a, d, b);
  a.elementType = Ia;
  a.lanes = c;
  return a;
}
function Ug(a, b, c) {
  a = nh(6, a, null, b);
  a.lanes = c;
  return a;
}
function Wg(a, b, c) {
  b = nh(4, a.children !== null ? a.children : [], a.key, b);
  b.lanes = c;
  b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
  return b;
}
function jk(a, b, c) {
  this.tag = b;
  this.containerInfo = a;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.pendingContext = this.context = null;
  this.hydrate = c;
  this.callbackNode = null;
  this.callbackPriority = 0;
  this.eventTimes = Zc(0);
  this.expirationTimes = Zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = Zc(0);
  this.mutableSourceEagerHydrationData = null;
}
function kk(a, b, c) {
  var d = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
  return { $$typeof: ta, key: d == null ? null : "" + d, children: a, containerInfo: b, implementation: c };
}
function lk(a, b, c, d) {
  var e = b.current, f2 = Hg(), g2 = Ig(e);
  a:
    if (c) {
      c = c._reactInternals;
      b: {
        if (Zb(c) !== c || c.tag !== 1)
          throw Error(y(170));
        var h2 = c;
        do {
          switch (h2.tag) {
            case 3:
              h2 = h2.stateNode.context;
              break b;
            case 1:
              if (Ff(h2.type)) {
                h2 = h2.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }
          }
          h2 = h2.return;
        } while (h2 !== null);
        throw Error(y(171));
      }
      if (c.tag === 1) {
        var k = c.type;
        if (Ff(k)) {
          c = If(c, k, h2);
          break a;
        }
      }
      c = h2;
    } else
      c = Cf;
  b.context === null ? b.context = c : b.pendingContext = c;
  b = zg(f2, g2);
  b.payload = { element: a };
  d = d === void 0 ? null : d;
  d !== null && (b.callback = d);
  Ag(e, b);
  Jg(e, g2, f2);
  return g2;
}
function mk(a) {
  a = a.current;
  if (!a.child)
    return null;
  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;
    default:
      return a.child.stateNode;
  }
}
function nk(a, b) {
  a = a.memoizedState;
  if (a !== null && a.dehydrated !== null) {
    var c = a.retryLane;
    a.retryLane = c !== 0 && c < b ? c : b;
  }
}
function ok(a, b) {
  nk(a, b);
  (a = a.alternate) && nk(a, b);
}
function pk() {
  return null;
}
function qk(a, b, c) {
  var d = c != null && c.hydrationOptions != null && c.hydrationOptions.mutableSources || null;
  c = new jk(a, b, c != null && c.hydrate === true);
  b = nh(3, null, null, b === 2 ? 7 : b === 1 ? 3 : 0);
  c.current = b;
  b.stateNode = c;
  xg(b);
  a[ff] = c.current;
  cf(a.nodeType === 8 ? a.parentNode : a);
  if (d)
    for (a = 0; a < d.length; a++) {
      b = d[a];
      var e = b._getVersion;
      e = e(b._source);
      c.mutableSourceEagerHydrationData == null ? c.mutableSourceEagerHydrationData = [b, e] : c.mutableSourceEagerHydrationData.push(b, e);
    }
  this._internalRoot = c;
}
qk.prototype.render = function(a) {
  lk(a, this._internalRoot, null, null);
};
qk.prototype.unmount = function() {
  var a = this._internalRoot, b = a.containerInfo;
  lk(null, a, null, function() {
    b[ff] = null;
  });
};
function rk(a) {
  return !(!a || a.nodeType !== 1 && a.nodeType !== 9 && a.nodeType !== 11 && (a.nodeType !== 8 || a.nodeValue !== " react-mount-point-unstable "));
}
function sk(a, b) {
  b || (b = a ? a.nodeType === 9 ? a.documentElement : a.firstChild : null, b = !(!b || b.nodeType !== 1 || !b.hasAttribute("data-reactroot")));
  if (!b)
    for (var c; c = a.lastChild; )
      a.removeChild(c);
  return new qk(a, 0, b ? { hydrate: true } : void 0);
}
function tk(a, b, c, d, e) {
  var f2 = c._reactRootContainer;
  if (f2) {
    var g2 = f2._internalRoot;
    if (typeof e === "function") {
      var h2 = e;
      e = function() {
        var a2 = mk(g2);
        h2.call(a2);
      };
    }
    lk(b, g2, a, e);
  } else {
    f2 = c._reactRootContainer = sk(c, d);
    g2 = f2._internalRoot;
    if (typeof e === "function") {
      var k = e;
      e = function() {
        var a2 = mk(g2);
        k.call(a2);
      };
    }
    Xj(function() {
      lk(b, g2, a, e);
    });
  }
  return mk(g2);
}
ec = function(a) {
  if (a.tag === 13) {
    var b = Hg();
    Jg(a, 4, b);
    ok(a, 4);
  }
};
fc = function(a) {
  if (a.tag === 13) {
    var b = Hg();
    Jg(a, 67108864, b);
    ok(a, 67108864);
  }
};
gc = function(a) {
  if (a.tag === 13) {
    var b = Hg(), c = Ig(a);
    Jg(a, c, b);
    ok(a, c);
  }
};
hc = function(a, b) {
  return b();
};
yb = function(a, b, c) {
  switch (b) {
    case "input":
      ab(a, c);
      b = c.name;
      if (c.type === "radio" && b != null) {
        for (c = a; c.parentNode; )
          c = c.parentNode;
        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
        for (b = 0; b < c.length; b++) {
          var d = c[b];
          if (d !== a && d.form === a.form) {
            var e = Db(d);
            if (!e)
              throw Error(y(90));
            Wa(d);
            ab(d, e);
          }
        }
      }
      break;
    case "textarea":
      ib(a, c);
      break;
    case "select":
      b = c.value, b != null && fb(a, !!c.multiple, b, false);
  }
};
Gb = Wj;
Hb = function(a, b, c, d, e) {
  var f2 = X;
  X |= 4;
  try {
    return gg(98, a.bind(null, b, c, d, e));
  } finally {
    X = f2, X === 0 && (wj(), ig());
  }
};
Ib = function() {
  (X & 49) === 0 && (Vj(), Oj());
};
Jb = function(a, b) {
  var c = X;
  X |= 2;
  try {
    return a(b);
  } finally {
    X = c, X === 0 && (wj(), ig());
  }
};
function uk(a, b) {
  var c = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
  if (!rk(b))
    throw Error(y(200));
  return kk(a, b, null, c);
}
var vk = { Events: [Cb, ue, Db, Eb, Fb, Oj, { current: false }] }, wk = { findFiberByHostInstance: wc, bundleType: 0, version: "17.0.2", rendererPackageName: "react-dom" };
var xk = { bundleType: wk.bundleType, version: wk.version, rendererPackageName: wk.rendererPackageName, rendererConfig: wk.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ra.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
  a = cc(a);
  return a === null ? null : a.stateNode;
}, findFiberByHostInstance: wk.findFiberByHostInstance || pk, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null };
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined") {
  var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!yk.isDisabled && yk.supportsFiber)
    try {
      Lf = yk.inject(xk), Mf = yk;
    } catch (a) {
    }
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
reactDom_production_min.createPortal = uk;
reactDom_production_min.findDOMNode = function(a) {
  if (a == null)
    return null;
  if (a.nodeType === 1)
    return a;
  var b = a._reactInternals;
  if (b === void 0) {
    if (typeof a.render === "function")
      throw Error(y(188));
    throw Error(y(268, Object.keys(a)));
  }
  a = cc(b);
  a = a === null ? null : a.stateNode;
  return a;
};
reactDom_production_min.flushSync = function(a, b) {
  var c = X;
  if ((c & 48) !== 0)
    return a(b);
  X |= 1;
  try {
    if (a)
      return gg(99, a.bind(null, b));
  } finally {
    X = c, ig();
  }
};
reactDom_production_min.hydrate = function(a, b, c) {
  if (!rk(b))
    throw Error(y(200));
  return tk(null, a, b, true, c);
};
reactDom_production_min.render = function(a, b, c) {
  if (!rk(b))
    throw Error(y(200));
  return tk(null, a, b, false, c);
};
reactDom_production_min.unmountComponentAtNode = function(a) {
  if (!rk(a))
    throw Error(y(40));
  return a._reactRootContainer ? (Xj(function() {
    tk(null, null, a, false, function() {
      a._reactRootContainer = null;
      a[ff] = null;
    });
  }), true) : false;
};
reactDom_production_min.unstable_batchedUpdates = Wj;
reactDom_production_min.unstable_createPortal = function(a, b) {
  return uk(a, b, 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null);
};
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
  if (!rk(c))
    throw Error(y(200));
  if (a == null || a._reactInternals === void 0)
    throw Error(y(38));
  return tk(a, b, c, false, d);
};
reactDom_production_min.version = "17.0.2";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
{
  checkDCE();
  _reactDom_17_0_2_reactDom.exports = reactDom_production_min;
}
var ReactDOM = _reactDom_17_0_2_reactDom.exports;
function combineReducers(reducers) {
  const reducerKeys = Object.keys(reducers);
  const finalReducersObj = {};
  for (const key of reducerKeys) {
    if (typeof reducers[key] === "function") {
      finalReducersObj[key] = reducers[key];
    }
  }
  return (state = {}, action) => {
    let hasChanged = false;
    const nextState = {};
    for (const key of reducerKeys) {
      const prevStateForKey = state[key];
      const nextStateForKey = finalReducersObj[key](prevStateForKey, action);
      nextState[key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== prevStateForKey;
    }
    return hasChanged ? nextState : state;
  };
}
function createStore(preloadedState, reducer2) {
  const listeners = [];
  let currentState = preloadedState;
  const dispatch = (action) => {
    const nextState = reducer2(currentState, action);
    const prevState = currentState;
    currentState = nextState;
    for (const cb2 of listeners) {
      cb2(currentState, prevState);
    }
  };
  const subscribe = (listener) => {
    let isSubscribed = true;
    listeners.push(listener);
    return () => {
      if (!isSubscribed) {
        return;
      }
      const index = listeners.indexOf(listener);
      listeners.splice(index, 1);
      isSubscribed = false;
    };
  };
  const getState = () => {
    return currentState;
  };
  return {
    dispatch,
    getState,
    subscribe
  };
}
function reducer$3(state, action) {
  switch (action.type) {
    case "SET_MARK_EVENT_ID": {
      if (action.payload.markEventId === state.markEventId) {
        return state;
      }
      return __spreadProps(__spreadValues({}, state), {
        markEventId: action.payload.markEventId
      });
    }
    case "SET_EDIT_EVENT_ID": {
      if (action.payload.editEventId === state.editEventId) {
        return state;
      }
      return __spreadProps(__spreadValues({}, state), {
        editEventId: action.payload.editEventId
      });
    }
    case "SET_MOBILE_VIEW": {
      if (action.payload.isMobileView === state.isMobileView) {
        return state;
      }
      return __spreadProps(__spreadValues({}, state), {
        isMobileView: action.payload.isMobileView
      });
    }
    case "SET_SHOW_SIDEBAR_IN_MOBILE_VIEW": {
      if (action.payload.showSiderbarInMobileView === state.showSiderbarInMobileView) {
        return state;
      }
      return __spreadProps(__spreadValues({}, state), {
        showSiderbarInMobileView: action.payload.showSiderbarInMobileView
      });
    }
    case "SET_APP_SETTING": {
      return __spreadValues(__spreadValues({}, state), action.payload);
    }
    default: {
      return state;
    }
  }
}
const defaultState$3 = {
  markEventId: "",
  editEventId: "",
  shouldSplitEventWord: true,
  shouldHideImageUrl: true,
  shouldUseMarkdownParser: true,
  useTinyUndoHistoryCache: false,
  isMobileView: false,
  showSiderbarInMobileView: false
};
function reducer$2(state, action) {
  switch (action.type) {
    case "SET_LOCATION": {
      return action.payload;
    }
    case "SET_PATHNAME": {
      if (action.payload.pathname === state.pathname) {
        return state;
      }
      return __spreadProps(__spreadValues({}, state), {
        pathname: action.payload.pathname
      });
    }
    case "SET_HASH": {
      if (action.payload.hash === state.hash) {
        return state;
      }
      return __spreadProps(__spreadValues({}, state), {
        hash: action.payload.hash
      });
    }
    case "SET_QUERY": {
      return __spreadProps(__spreadValues({}, state), {
        query: __spreadValues({}, action.payload)
      });
    }
    case "SET_TAG_QUERY": {
      if (action.payload.tag === state.query.tag) {
        return state;
      }
      return __spreadProps(__spreadValues({}, state), {
        query: __spreadProps(__spreadValues({}, state.query), {
          tag: action.payload.tag
        })
      });
    }
    case "SET_DURATION_QUERY": {
      if (action.payload.duration === state.query.duration) {
        return state;
      }
      return __spreadProps(__spreadValues({}, state), {
        query: __spreadProps(__spreadValues({}, state.query), {
          duration: __spreadValues(__spreadValues({}, state.query.duration), action.payload.duration)
        })
      });
    }
    case "SET_TYPE": {
      if (action.payload.type === state.query.type) {
        return state;
      }
      return __spreadProps(__spreadValues({}, state), {
        query: __spreadProps(__spreadValues({}, state.query), {
          type: action.payload.type
        })
      });
    }
    case "SET_TEXT": {
      if (action.payload.text === state.query.text) {
        return state;
      }
      return __spreadProps(__spreadValues({}, state), {
        query: __spreadProps(__spreadValues({}, state.query), {
          text: action.payload.text
        })
      });
    }
    case "SET_QUERY_FILTER": {
      if (action.payload === state.query.filter) {
        return state;
      }
      return __spreadProps(__spreadValues({}, state), {
        query: __spreadProps(__spreadValues({}, state.query), {
          filter: action.payload
        })
      });
    }
    default: {
      return state;
    }
  }
}
const defaultState$2 = {
  pathname: "/",
  hash: "",
  query: {
    tag: "",
    duration: null,
    type: "",
    text: "",
    filter: ""
  }
};
var utils;
(function(utils2) {
  function getNowTimeStamp() {
    return parseInt(require$$0.moment().format("x"));
  }
  utils2.getNowTimeStamp = getNowTimeStamp;
  function getOSVersion() {
    const appVersion = navigator.userAgent;
    let detectedOS = "Unknown";
    if (appVersion.indexOf("Win") != -1) {
      detectedOS = "Windows";
    } else if (appVersion.indexOf("Mac") != -1) {
      detectedOS = "MacOS";
    } else if (appVersion.indexOf("Linux") != -1) {
      detectedOS = "Linux";
    }
    return detectedOS;
  }
  utils2.getOSVersion = getOSVersion;
  function getTimeStampByDate(t2) {
    if (typeof t2 === "string") {
      t2 = t2.replaceAll("-", "/");
    }
    return new Date(t2).getTime();
  }
  utils2.getTimeStampByDate = getTimeStampByDate;
  function getDateStampByDate(t2) {
    const d = new Date(getTimeStampByDate(t2));
    return new Date(d.getFullYear(), d.getMonth(), d.getDate()).getTime();
  }
  utils2.getDateStampByDate = getDateStampByDate;
  function getDateString(t2) {
    const d = new Date(getTimeStampByDate(t2));
    const year2 = d.getFullYear();
    const month2 = d.getMonth() + 1;
    const date2 = d.getDate();
    return `${year2}/${month2}/${date2}`;
  }
  utils2.getDateString = getDateString;
  function getTimeString(t2) {
    const d = new Date(getTimeStampByDate(t2));
    const hours2 = d.getHours();
    const mins = d.getMinutes();
    const hoursStr = hours2 < 10 ? "0" + hours2 : hours2;
    const minsStr = mins < 10 ? "0" + mins : mins;
    return `${hoursStr}:${minsStr}`;
  }
  utils2.getTimeString = getTimeString;
  function getDateTimeString(t2) {
    const d = new Date(getTimeStampByDate(t2));
    const year2 = d.getFullYear();
    const month2 = d.getMonth() + 1;
    const date2 = d.getDate();
    const hours2 = d.getHours();
    const mins = d.getMinutes();
    const monthStr = month2 < 10 ? "0" + month2 : month2;
    const dateStr = date2 < 10 ? "0" + date2 : date2;
    const hoursStr = hours2 < 10 ? "0" + hours2 : hours2;
    const minsStr = mins < 10 ? "0" + mins : mins;
    const secsStr = "00";
    return `${year2}/${monthStr}/${dateStr} ${hoursStr}:${minsStr}:${secsStr}`;
  }
  utils2.getDateTimeString = getDateTimeString;
  function dedupe(data) {
    return Array.from(new Set(data));
  }
  utils2.dedupe = dedupe;
  function dedupeObjectWithId(data) {
    const idSet = new Set();
    const result = [];
    for (const d of data) {
      if (!idSet.has(d.id)) {
        idSet.add(d.id);
        result.push(d);
      }
    }
    return result;
  }
  utils2.dedupeObjectWithId = dedupeObjectWithId;
  function debounce2(fn3, delay) {
    let timer = null;
    return () => {
      if (timer) {
        clearTimeout(timer);
        timer = setTimeout(fn3, delay);
      } else {
        timer = setTimeout(fn3, delay);
      }
    };
  }
  utils2.debounce = debounce2;
  function throttle(fn3, delay) {
    let valid = true;
    return () => {
      if (!valid) {
        return false;
      }
      valid = false;
      setTimeout(() => {
        fn3();
        valid = true;
      }, delay);
    };
  }
  utils2.throttle = throttle;
  function transformObjectToParamsString(object) {
    const params = [];
    const keys2 = Object.keys(object).sort();
    for (const key of keys2) {
      const val = object[key];
      if (val) {
        if (typeof val === "object") {
          params.push(...transformObjectToParamsString(val).split("&"));
        } else {
          params.push(`${key}=${val}`);
        }
      }
    }
    return params.join("&");
  }
  utils2.transformObjectToParamsString = transformObjectToParamsString;
  function transformParamsStringToObject(paramsString) {
    const object = {};
    const params = paramsString.split("&");
    for (const p2 of params) {
      const [key, val] = p2.split("=");
      if (key && val) {
        object[key] = val;
      }
    }
    return object;
  }
  utils2.transformParamsStringToObject = transformParamsStringToObject;
  function filterObjectNullKeys(object) {
    if (!object) {
      return {};
    }
    const finalObject = {};
    const keys2 = Object.keys(object).sort();
    for (const key of keys2) {
      const val = object[key];
      if (typeof val === "object") {
        const temp = filterObjectNullKeys(JSON.parse(JSON.stringify(val)));
        if (temp && Object.keys(temp).length > 0) {
          finalObject[key] = temp;
        }
      } else {
        if (val) {
          finalObject[key] = val;
        }
      }
    }
    return finalObject;
  }
  utils2.filterObjectNullKeys = filterObjectNullKeys;
  async function copyTextToClipboard(text) {
    if (navigator.clipboard && navigator.clipboard.writeText) {
      try {
        await navigator.clipboard.writeText(text);
      } catch (error) {
        console.warn("Copy to clipboard failed.", error);
      }
    } else {
      console.warn("Copy to clipboard failed, methods not supports.");
    }
  }
  utils2.copyTextToClipboard = copyTextToClipboard;
  function getImageSize(src) {
    return new Promise((resolve) => {
      const imgEl = new Image();
      imgEl.onload = () => {
        const { width, height: height2 } = imgEl;
        if (width > 0 && height2 > 0) {
          resolve({ width, height: height2 });
        } else {
          resolve({ width: 0, height: 0 });
        }
      };
      imgEl.onerror = () => {
        resolve({ width: 0, height: 0 });
      };
      imgEl.className = "hidden";
      imgEl.src = src;
      document.body.appendChild(imgEl);
      imgEl.remove();
    });
  }
  utils2.getImageSize = getImageSize;
})(utils || (utils = {}));
var utils$1 = utils;
function reducer$1(state, action) {
  switch (action.type) {
    case "SET_EVENTS": {
      const events = utils$1.dedupeObjectWithId(action.payload.events.sort((a, b) => utils$1.getTimeStampByDate(b.start) - utils$1.getTimeStampByDate(a.start)));
      return __spreadProps(__spreadValues({}, state), {
        events: [...events]
      });
    }
    case "SET_TAGS": {
      return __spreadProps(__spreadValues({}, state), {
        tags: action.payload.tags
      });
    }
    case "INSERT_EVENT": {
      const events = utils$1.dedupeObjectWithId([action.payload.event, ...state.events]);
      return __spreadProps(__spreadValues({}, state), {
        events
      });
    }
    case "DELETE_EVENT_BY_ID": {
      return __spreadProps(__spreadValues({}, state), {
        events: [...state.events].filter((event) => event.id !== action.payload.id)
      });
    }
    case "EDIT_EVENT": {
      const events = state.events.map((m2) => {
        if (m2.id === action.payload.id) {
          return __spreadValues(__spreadValues({}, m2), action.payload);
        } else {
          return m2;
        }
      });
      return __spreadProps(__spreadValues({}, state), {
        events
      });
    }
    default: {
      return state;
    }
  }
}
const defaultState$1 = {
  events: [],
  tags: []
};
var main$1 = {};
Object.defineProperty(main$1, "__esModule", { value: true });
var obsidian = require$$0__default["default"];
const DEFAULT_DAILY_NOTE_FORMAT = "YYYY-MM-DD";
const DEFAULT_WEEKLY_NOTE_FORMAT = "gggg-[W]ww";
const DEFAULT_MONTHLY_NOTE_FORMAT = "YYYY-MM";
const DEFAULT_QUARTERLY_NOTE_FORMAT = "YYYY-[Q]Q";
const DEFAULT_YEARLY_NOTE_FORMAT = "YYYY";
function shouldUsePeriodicNotesSettings(periodicity) {
  var _a, _b;
  const periodicNotes = window.app.plugins.getPlugin("periodic-notes");
  return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a[periodicity]) == null ? void 0 : _b.enabled);
}
function getDailyNoteSettings() {
  var _a, _b, _c, _d;
  try {
    const { internalPlugins, plugins } = window.app;
    if (shouldUsePeriodicNotesSettings("daily")) {
      const { format: format2, folder: folder2, template: template2 } = ((_b = (_a = plugins.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.daily) || {};
      return {
        format: format2 || DEFAULT_DAILY_NOTE_FORMAT,
        folder: (folder2 == null ? void 0 : folder2.trim()) || "",
        template: (template2 == null ? void 0 : template2.trim()) || ""
      };
    }
    const { folder, format, template } = ((_d = (_c = internalPlugins.getPluginById("daily-notes")) == null ? void 0 : _c.instance) == null ? void 0 : _d.options) || {};
    return {
      format: format || DEFAULT_DAILY_NOTE_FORMAT,
      folder: (folder == null ? void 0 : folder.trim()) || "",
      template: (template == null ? void 0 : template.trim()) || ""
    };
  } catch (err) {
    console.info("No custom daily note settings found!", err);
  }
}
function getWeeklyNoteSettings() {
  var _a, _b, _c, _d, _e, _f, _g;
  try {
    const pluginManager = window.app.plugins;
    const calendarSettings = (_a = pluginManager.getPlugin("calendar")) == null ? void 0 : _a.options;
    const periodicNotesSettings = (_c = (_b = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _b.settings) == null ? void 0 : _c.weekly;
    if (shouldUsePeriodicNotesSettings("weekly")) {
      return {
        format: periodicNotesSettings.format || DEFAULT_WEEKLY_NOTE_FORMAT,
        folder: ((_d = periodicNotesSettings.folder) == null ? void 0 : _d.trim()) || "",
        template: ((_e = periodicNotesSettings.template) == null ? void 0 : _e.trim()) || ""
      };
    }
    const settings = calendarSettings || {};
    return {
      format: settings.weeklyNoteFormat || DEFAULT_WEEKLY_NOTE_FORMAT,
      folder: ((_f = settings.weeklyNoteFolder) == null ? void 0 : _f.trim()) || "",
      template: ((_g = settings.weeklyNoteTemplate) == null ? void 0 : _g.trim()) || ""
    };
  } catch (err) {
    console.info("No custom weekly note settings found!", err);
  }
}
function getMonthlyNoteSettings() {
  var _a, _b, _c, _d;
  const pluginManager = window.app.plugins;
  try {
    const settings = shouldUsePeriodicNotesSettings("monthly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.monthly) || {};
    return {
      format: settings.format || DEFAULT_MONTHLY_NOTE_FORMAT,
      folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
      template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
    };
  } catch (err) {
    console.info("No custom monthly note settings found!", err);
  }
}
function getQuarterlyNoteSettings() {
  var _a, _b, _c, _d;
  const pluginManager = window.app.plugins;
  try {
    const settings = shouldUsePeriodicNotesSettings("quarterly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.quarterly) || {};
    return {
      format: settings.format || DEFAULT_QUARTERLY_NOTE_FORMAT,
      folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
      template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
    };
  } catch (err) {
    console.info("No custom quarterly note settings found!", err);
  }
}
function getYearlyNoteSettings() {
  var _a, _b, _c, _d;
  const pluginManager = window.app.plugins;
  try {
    const settings = shouldUsePeriodicNotesSettings("yearly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.yearly) || {};
    return {
      format: settings.format || DEFAULT_YEARLY_NOTE_FORMAT,
      folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
      template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
    };
  } catch (err) {
    console.info("No custom yearly note settings found!", err);
  }
}
function join(...partSegments) {
  let parts = [];
  for (let i = 0, l2 = partSegments.length; i < l2; i++) {
    parts = parts.concat(partSegments[i].split("/"));
  }
  const newParts = [];
  for (let i = 0, l2 = parts.length; i < l2; i++) {
    const part = parts[i];
    if (!part || part === ".")
      continue;
    else
      newParts.push(part);
  }
  if (parts[0] === "")
    newParts.unshift("");
  return newParts.join("/");
}
function basename(fullPath) {
  let base = fullPath.substring(fullPath.lastIndexOf("/") + 1);
  if (base.lastIndexOf(".") != -1)
    base = base.substring(0, base.lastIndexOf("."));
  return base;
}
async function ensureFolderExists(path) {
  const dirs = path.replace(/\\/g, "/").split("/");
  dirs.pop();
  if (dirs.length) {
    const dir = join(...dirs);
    if (!window.app.vault.getAbstractFileByPath(dir)) {
      await window.app.vault.createFolder(dir);
    }
  }
}
async function getNotePath(directory, filename) {
  if (!filename.endsWith(".md")) {
    filename += ".md";
  }
  const path = obsidian.normalizePath(join(directory, filename));
  await ensureFolderExists(path);
  return path;
}
async function getTemplateInfo(template) {
  const { metadataCache, vault } = window.app;
  const templatePath = obsidian.normalizePath(template);
  if (templatePath === "/") {
    return Promise.resolve(["", null]);
  }
  try {
    const templateFile = metadataCache.getFirstLinkpathDest(templatePath, "");
    const contents = await vault.cachedRead(templateFile);
    const IFoldInfo = window.app.foldManager.load(templateFile);
    return [contents, IFoldInfo];
  } catch (err) {
    console.error(`Failed to read the daily note template '${templatePath}'`, err);
    new obsidian.Notice("Failed to read the daily note template");
    return ["", null];
  }
}
function getDateUID(date2, granularity = "day") {
  const ts = date2.clone().startOf(granularity).format();
  return `${granularity}-${ts}`;
}
function removeEscapedCharacters(format) {
  return format.replace(/\[[^\]]*\]/g, "");
}
function isFormatAmbiguous(format, granularity) {
  if (granularity === "week") {
    const cleanFormat = removeEscapedCharacters(format);
    return /w{1,2}/i.test(cleanFormat) && (/M{1,4}/.test(cleanFormat) || /D{1,4}/.test(cleanFormat));
  }
  return false;
}
function getDateFromFile(file, granularity) {
  return getDateFromFilename(file.basename, granularity);
}
function getDateFromPath(path, granularity) {
  return getDateFromFilename(basename(path), granularity);
}
function getDateFromFilename(filename, granularity) {
  const getSettings = {
    day: getDailyNoteSettings,
    week: getWeeklyNoteSettings,
    month: getMonthlyNoteSettings,
    quarter: getQuarterlyNoteSettings,
    year: getYearlyNoteSettings
  };
  const format = getSettings[granularity]().format.split("/").pop();
  const noteDate = window.moment(filename, format, true);
  if (!noteDate.isValid()) {
    return null;
  }
  if (isFormatAmbiguous(format, granularity)) {
    if (granularity === "week") {
      const cleanFormat = removeEscapedCharacters(format);
      if (/w{1,2}/i.test(cleanFormat)) {
        return window.moment(filename, format.replace(/M{1,4}/g, "").replace(/D{1,4}/g, ""), false);
      }
    }
  }
  return noteDate;
}
class DailyNotesFolderMissingError$1 extends Error {
}
async function createDailyNote(date2) {
  const app = window.app;
  const { vault } = app;
  const moment2 = window.moment;
  const { template, format, folder } = getDailyNoteSettings();
  const [templateContents, IFoldInfo] = await getTemplateInfo(template);
  const filename = date2.format(format);
  const normalizedPath = await getNotePath(folder, filename);
  try {
    const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, moment2().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename).replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
      const now = moment2();
      const currentDate = date2.clone().set({
        hour: now.get("hour"),
        minute: now.get("minute"),
        second: now.get("second")
      });
      if (calc) {
        currentDate.add(parseInt(timeDelta, 10), unit);
      }
      if (momentFormat) {
        return currentDate.format(momentFormat.substring(1).trim());
      }
      return currentDate.format(format);
    }).replace(/{{\s*yesterday\s*}}/gi, date2.clone().subtract(1, "day").format(format)).replace(/{{\s*tomorrow\s*}}/gi, date2.clone().add(1, "d").format(format)));
    app.foldManager.save(createdFile, IFoldInfo);
    return createdFile;
  } catch (err) {
    console.error(`Failed to create file: '${normalizedPath}'`, err);
    new obsidian.Notice("Unable to create new file.");
  }
}
function getDailyNote(date2, dailyNotes) {
  var _a;
  return (_a = dailyNotes[getDateUID(date2, "day")]) != null ? _a : null;
}
function getAllDailyNotes() {
  const { vault } = window.app;
  const { folder } = getDailyNoteSettings();
  const dailyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
  if (!dailyNotesFolder) {
    throw new DailyNotesFolderMissingError$1("Failed to find daily notes folder");
  }
  const dailyNotes = {};
  obsidian.Vault.recurseChildren(dailyNotesFolder, (note) => {
    if (note instanceof obsidian.TFile) {
      const date2 = getDateFromFile(note, "day");
      if (date2) {
        const dateString = getDateUID(date2, "day");
        dailyNotes[dateString] = note;
      }
    }
  });
  return dailyNotes;
}
class WeeklyNotesFolderMissingError extends Error {
}
function getDaysOfWeek() {
  const { moment: moment2 } = window;
  let weekStart = moment2.localeData()._week.dow;
  const daysOfWeek = [
    "sunday",
    "monday",
    "tuesday",
    "wednesday",
    "thursday",
    "friday",
    "saturday"
  ];
  while (weekStart) {
    daysOfWeek.push(daysOfWeek.shift());
    weekStart--;
  }
  return daysOfWeek;
}
function getDayOfWeekNumericalValue(dayOfWeekName) {
  return getDaysOfWeek().indexOf(dayOfWeekName.toLowerCase());
}
async function createWeeklyNote(date2) {
  const { vault } = window.app;
  const { template, format, folder } = getWeeklyNoteSettings();
  const [templateContents, IFoldInfo] = await getTemplateInfo(template);
  const filename = date2.format(format);
  const normalizedPath = await getNotePath(folder, filename);
  try {
    const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
      const now = window.moment();
      const currentDate = date2.clone().set({
        hour: now.get("hour"),
        minute: now.get("minute"),
        second: now.get("second")
      });
      if (calc) {
        currentDate.add(parseInt(timeDelta, 10), unit);
      }
      if (momentFormat) {
        return currentDate.format(momentFormat.substring(1).trim());
      }
      return currentDate.format(format);
    }).replace(/{{\s*title\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi, (_, dayOfWeek, momentFormat) => {
      const day2 = getDayOfWeekNumericalValue(dayOfWeek);
      return date2.weekday(day2).format(momentFormat.trim());
    }));
    window.app.foldManager.save(createdFile, IFoldInfo);
    return createdFile;
  } catch (err) {
    console.error(`Failed to create file: '${normalizedPath}'`, err);
    new obsidian.Notice("Unable to create new file.");
  }
}
function getWeeklyNote(date2, weeklyNotes) {
  var _a;
  return (_a = weeklyNotes[getDateUID(date2, "week")]) != null ? _a : null;
}
function getAllWeeklyNotes() {
  const weeklyNotes = {};
  if (!appHasWeeklyNotesPluginLoaded()) {
    return weeklyNotes;
  }
  const { vault } = window.app;
  const { folder } = getWeeklyNoteSettings();
  const weeklyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
  if (!weeklyNotesFolder) {
    throw new WeeklyNotesFolderMissingError("Failed to find weekly notes folder");
  }
  obsidian.Vault.recurseChildren(weeklyNotesFolder, (note) => {
    if (note instanceof obsidian.TFile) {
      const date2 = getDateFromFile(note, "week");
      if (date2) {
        const dateString = getDateUID(date2, "week");
        weeklyNotes[dateString] = note;
      }
    }
  });
  return weeklyNotes;
}
class MonthlyNotesFolderMissingError extends Error {
}
async function createMonthlyNote(date2) {
  const { vault } = window.app;
  const { template, format, folder } = getMonthlyNoteSettings();
  const [templateContents, IFoldInfo] = await getTemplateInfo(template);
  const filename = date2.format(format);
  const normalizedPath = await getNotePath(folder, filename);
  try {
    const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
      const now = window.moment();
      const currentDate = date2.clone().set({
        hour: now.get("hour"),
        minute: now.get("minute"),
        second: now.get("second")
      });
      if (calc) {
        currentDate.add(parseInt(timeDelta, 10), unit);
      }
      if (momentFormat) {
        return currentDate.format(momentFormat.substring(1).trim());
      }
      return currentDate.format(format);
    }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
    window.app.foldManager.save(createdFile, IFoldInfo);
    return createdFile;
  } catch (err) {
    console.error(`Failed to create file: '${normalizedPath}'`, err);
    new obsidian.Notice("Unable to create new file.");
  }
}
function getMonthlyNote(date2, monthlyNotes) {
  var _a;
  return (_a = monthlyNotes[getDateUID(date2, "month")]) != null ? _a : null;
}
function getAllMonthlyNotes() {
  const monthlyNotes = {};
  if (!appHasMonthlyNotesPluginLoaded()) {
    return monthlyNotes;
  }
  const { vault } = window.app;
  const { folder } = getMonthlyNoteSettings();
  const monthlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
  if (!monthlyNotesFolder) {
    throw new MonthlyNotesFolderMissingError("Failed to find monthly notes folder");
  }
  obsidian.Vault.recurseChildren(monthlyNotesFolder, (note) => {
    if (note instanceof obsidian.TFile) {
      const date2 = getDateFromFile(note, "month");
      if (date2) {
        const dateString = getDateUID(date2, "month");
        monthlyNotes[dateString] = note;
      }
    }
  });
  return monthlyNotes;
}
class QuarterlyNotesFolderMissingError extends Error {
}
async function createQuarterlyNote(date2) {
  const { vault } = window.app;
  const { template, format, folder } = getQuarterlyNoteSettings();
  const [templateContents, IFoldInfo] = await getTemplateInfo(template);
  const filename = date2.format(format);
  const normalizedPath = await getNotePath(folder, filename);
  try {
    const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
      const now = window.moment();
      const currentDate = date2.clone().set({
        hour: now.get("hour"),
        minute: now.get("minute"),
        second: now.get("second")
      });
      if (calc) {
        currentDate.add(parseInt(timeDelta, 10), unit);
      }
      if (momentFormat) {
        return currentDate.format(momentFormat.substring(1).trim());
      }
      return currentDate.format(format);
    }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
    window.app.foldManager.save(createdFile, IFoldInfo);
    return createdFile;
  } catch (err) {
    console.error(`Failed to create file: '${normalizedPath}'`, err);
    new obsidian.Notice("Unable to create new file.");
  }
}
function getQuarterlyNote(date2, quarterly) {
  var _a;
  return (_a = quarterly[getDateUID(date2, "quarter")]) != null ? _a : null;
}
function getAllQuarterlyNotes() {
  const quarterly = {};
  if (!appHasQuarterlyNotesPluginLoaded()) {
    return quarterly;
  }
  const { vault } = window.app;
  const { folder } = getQuarterlyNoteSettings();
  const quarterlyFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
  if (!quarterlyFolder) {
    throw new QuarterlyNotesFolderMissingError("Failed to find quarterly notes folder");
  }
  obsidian.Vault.recurseChildren(quarterlyFolder, (note) => {
    if (note instanceof obsidian.TFile) {
      const date2 = getDateFromFile(note, "quarter");
      if (date2) {
        const dateString = getDateUID(date2, "quarter");
        quarterly[dateString] = note;
      }
    }
  });
  return quarterly;
}
class YearlyNotesFolderMissingError extends Error {
}
async function createYearlyNote(date2) {
  const { vault } = window.app;
  const { template, format, folder } = getYearlyNoteSettings();
  const [templateContents, IFoldInfo] = await getTemplateInfo(template);
  const filename = date2.format(format);
  const normalizedPath = await getNotePath(folder, filename);
  try {
    const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
      const now = window.moment();
      const currentDate = date2.clone().set({
        hour: now.get("hour"),
        minute: now.get("minute"),
        second: now.get("second")
      });
      if (calc) {
        currentDate.add(parseInt(timeDelta, 10), unit);
      }
      if (momentFormat) {
        return currentDate.format(momentFormat.substring(1).trim());
      }
      return currentDate.format(format);
    }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
    window.app.foldManager.save(createdFile, IFoldInfo);
    return createdFile;
  } catch (err) {
    console.error(`Failed to create file: '${normalizedPath}'`, err);
    new obsidian.Notice("Unable to create new file.");
  }
}
function getYearlyNote(date2, yearlyNotes) {
  var _a;
  return (_a = yearlyNotes[getDateUID(date2, "year")]) != null ? _a : null;
}
function getAllYearlyNotes() {
  const yearlyNotes = {};
  if (!appHasYearlyNotesPluginLoaded()) {
    return yearlyNotes;
  }
  const { vault } = window.app;
  const { folder } = getYearlyNoteSettings();
  const yearlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
  if (!yearlyNotesFolder) {
    throw new YearlyNotesFolderMissingError("Failed to find yearly notes folder");
  }
  obsidian.Vault.recurseChildren(yearlyNotesFolder, (note) => {
    if (note instanceof obsidian.TFile) {
      const date2 = getDateFromFile(note, "year");
      if (date2) {
        const dateString = getDateUID(date2, "year");
        yearlyNotes[dateString] = note;
      }
    }
  });
  return yearlyNotes;
}
function appHasDailyNotesPluginLoaded() {
  var _a, _b;
  const { app } = window;
  const dailyNotesPlugin = app.internalPlugins.plugins["daily-notes"];
  if (dailyNotesPlugin && dailyNotesPlugin.enabled) {
    return true;
  }
  const periodicNotes = app.plugins.getPlugin("periodic-notes");
  return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.daily) == null ? void 0 : _b.enabled);
}
function appHasWeeklyNotesPluginLoaded() {
  var _a, _b;
  const { app } = window;
  if (app.plugins.getPlugin("calendar")) {
    return true;
  }
  const periodicNotes = app.plugins.getPlugin("periodic-notes");
  return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.weekly) == null ? void 0 : _b.enabled);
}
function appHasMonthlyNotesPluginLoaded() {
  var _a, _b;
  const { app } = window;
  const periodicNotes = app.plugins.getPlugin("periodic-notes");
  return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.monthly) == null ? void 0 : _b.enabled);
}
function appHasQuarterlyNotesPluginLoaded() {
  var _a, _b;
  const { app } = window;
  const periodicNotes = app.plugins.getPlugin("periodic-notes");
  return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.quarterly) == null ? void 0 : _b.enabled);
}
function appHasYearlyNotesPluginLoaded() {
  var _a, _b;
  const { app } = window;
  const periodicNotes = app.plugins.getPlugin("periodic-notes");
  return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.yearly) == null ? void 0 : _b.enabled);
}
function getPeriodicNoteSettings(granularity) {
  const getSettings = {
    day: getDailyNoteSettings,
    week: getWeeklyNoteSettings,
    month: getMonthlyNoteSettings,
    quarter: getQuarterlyNoteSettings,
    year: getYearlyNoteSettings
  }[granularity];
  return getSettings();
}
function createPeriodicNote(granularity, date2) {
  const createFn = {
    day: createDailyNote,
    month: createMonthlyNote,
    week: createWeeklyNote
  };
  return createFn[granularity](date2);
}
main$1.DEFAULT_DAILY_NOTE_FORMAT = DEFAULT_DAILY_NOTE_FORMAT;
main$1.DEFAULT_MONTHLY_NOTE_FORMAT = DEFAULT_MONTHLY_NOTE_FORMAT;
main$1.DEFAULT_QUARTERLY_NOTE_FORMAT = DEFAULT_QUARTERLY_NOTE_FORMAT;
main$1.DEFAULT_WEEKLY_NOTE_FORMAT = DEFAULT_WEEKLY_NOTE_FORMAT;
main$1.DEFAULT_YEARLY_NOTE_FORMAT = DEFAULT_YEARLY_NOTE_FORMAT;
main$1.appHasDailyNotesPluginLoaded = appHasDailyNotesPluginLoaded;
main$1.appHasMonthlyNotesPluginLoaded = appHasMonthlyNotesPluginLoaded;
main$1.appHasQuarterlyNotesPluginLoaded = appHasQuarterlyNotesPluginLoaded;
main$1.appHasWeeklyNotesPluginLoaded = appHasWeeklyNotesPluginLoaded;
main$1.appHasYearlyNotesPluginLoaded = appHasYearlyNotesPluginLoaded;
var createDailyNote_1 = main$1.createDailyNote = createDailyNote;
main$1.createMonthlyNote = createMonthlyNote;
main$1.createPeriodicNote = createPeriodicNote;
main$1.createQuarterlyNote = createQuarterlyNote;
main$1.createWeeklyNote = createWeeklyNote;
main$1.createYearlyNote = createYearlyNote;
var getAllDailyNotes_1 = main$1.getAllDailyNotes = getAllDailyNotes;
main$1.getAllMonthlyNotes = getAllMonthlyNotes;
main$1.getAllQuarterlyNotes = getAllQuarterlyNotes;
main$1.getAllWeeklyNotes = getAllWeeklyNotes;
main$1.getAllYearlyNotes = getAllYearlyNotes;
var getDailyNote_1 = main$1.getDailyNote = getDailyNote;
var getDailyNoteSettings_1 = main$1.getDailyNoteSettings = getDailyNoteSettings;
var getDateFromFile_1 = main$1.getDateFromFile = getDateFromFile;
main$1.getDateFromPath = getDateFromPath;
main$1.getDateUID = getDateUID;
main$1.getMonthlyNote = getMonthlyNote;
main$1.getMonthlyNoteSettings = getMonthlyNoteSettings;
main$1.getPeriodicNoteSettings = getPeriodicNoteSettings;
main$1.getQuarterlyNote = getQuarterlyNote;
main$1.getQuarterlyNoteSettings = getQuarterlyNoteSettings;
main$1.getTemplateInfo = getTemplateInfo;
main$1.getWeeklyNote = getWeeklyNote;
main$1.getWeeklyNoteSettings = getWeeklyNoteSettings;
main$1.getYearlyNote = getYearlyNote;
main$1.getYearlyNoteSettings = getYearlyNoteSettings;
function reducer(state, action) {
  switch (action.type) {
    case "SET_DAILYNOTES": {
      const dailyNotes = getAllDailyNotes_1();
      return __spreadProps(__spreadValues({}, state), {
        dailyNotes
      });
    }
    case "SET_APP": {
      return __spreadProps(__spreadValues({}, state), {
        app: action.payload.app
      });
    }
    default: {
      return state;
    }
  }
}
const defaultState = {
  dailyNotes: null,
  app: null
};
const appStore = createStore({
  globalState: defaultState$3,
  locationState: defaultState$2,
  eventState: defaultState$1,
  dailyNotesState: defaultState
}, combineReducers({
  globalState: reducer$3,
  locationState: reducer$2,
  eventState: reducer$1,
  dailyNotesState: reducer
}));
const appContext = _react_17_0_2_react.exports.createContext(appStore.getState());
class DailyNotesService {
  getState() {
    return appStore.getState().dailyNotesState;
  }
  getApp(app) {
    appStore.dispatch({
      type: "SET_APP",
      payload: {
        app
      }
    });
    return app;
  }
  async getMyAllDailyNotes() {
    const dailyNotes = getAllDailyNotes_1();
    appStore.dispatch({
      type: "SET_DAILYNOTES",
      payload: {
        dailyNotes
      }
    });
    return dailyNotes;
  }
  async getDailyNoteByEvent(date2) {
    const { dailyNotes } = this.getState();
    const dailyNote = getDailyNote_1(date2, dailyNotes);
    return dailyNote;
  }
}
const dailyNotesService = new DailyNotesService();
var storage;
(function(storage2) {
  function get2(keys2) {
    const data = {};
    for (const key of keys2) {
      try {
        const stringifyValue = localStorage.getItem(key);
        if (stringifyValue !== null) {
          const val = JSON.parse(stringifyValue);
          data[key] = val;
        }
      } catch (error) {
        console.error("Get storage failed in ", key, error);
      }
    }
    return data;
  }
  storage2.get = get2;
  function set(data) {
    for (const key in data) {
      try {
        const stringifyValue = JSON.stringify(data[key]);
        localStorage.setItem(key, stringifyValue);
      } catch (error) {
        console.error("Save storage failed in ", key, error);
      }
    }
  }
  storage2.set = set;
  function remove(keys2) {
    for (const key of keys2) {
      try {
        localStorage.removeItem(key);
      } catch (error) {
        console.error("Remove storage failed in ", key, error);
      }
    }
  }
  storage2.remove = remove;
  function emitStorageChangedEvent() {
    var _a;
    const iframeEl = document.createElement("iframe");
    iframeEl.style.display = "none";
    document.body.appendChild(iframeEl);
    (_a = iframeEl.contentWindow) == null ? void 0 : _a.localStorage.setItem("t", Date.now().toString());
    iframeEl.remove();
  }
  storage2.emitStorageChangedEvent = emitStorageChangedEvent;
})(storage || (storage = {}));
class GlobalStateService {
  constructor() {
    __publicField(this, "getState", () => {
      return appStore.getState().globalState;
    });
    __publicField(this, "setEditEventId", (editEventId) => {
      appStore.dispatch({
        type: "SET_EDIT_EVENT_ID",
        payload: {
          editEventId
        }
      });
    });
    __publicField(this, "setMarkEventId", (markEventId) => {
      appStore.dispatch({
        type: "SET_MARK_EVENT_ID",
        payload: {
          markEventId
        }
      });
    });
    __publicField(this, "setIsMobileView", (isMobileView) => {
      appStore.dispatch({
        type: "SET_MOBILE_VIEW",
        payload: {
          isMobileView
        }
      });
    });
    __publicField(this, "setShowSiderbarInMobileView", (showSiderbarInMobileView) => {
      appStore.dispatch({
        type: "SET_SHOW_SIDEBAR_IN_MOBILE_VIEW",
        payload: {
          showSiderbarInMobileView
        }
      });
    });
    __publicField(this, "setAppSetting", (appSetting) => {
      appStore.dispatch({
        type: "SET_APP_SETTING",
        payload: appSetting
      });
      storage.set(appSetting);
    });
    var _a, _b, _c;
    const cachedSetting = storage.get([
      "shouldSplitEventWord",
      "shouldHideImageUrl",
      "shouldUseMarkdownParser"
    ]);
    const defaultAppSetting = {
      shouldSplitEventWord: (_a = cachedSetting.shouldSplitEventWord) != null ? _a : true,
      shouldHideImageUrl: (_b = cachedSetting.shouldHideImageUrl) != null ? _b : true,
      shouldUseMarkdownParser: (_c = cachedSetting.shouldUseMarkdownParser) != null ? _c : true
    };
    this.setAppSetting(defaultAppSetting);
  }
}
const globalStateService = new GlobalStateService();
class LocationService {
  constructor() {
    __publicField(this, "updateStateWithLocation", () => {
      var _a, _b, _c, _d, _e, _f;
      const { pathname, search, hash: hash2 } = window.location;
      const urlParams = new URLSearchParams(search);
      const state = {
        pathname: "/",
        hash: "",
        query: {
          tag: "",
          duration: null,
          text: "",
          type: "",
          filter: ""
        }
      };
      state.query.tag = (_a = urlParams.get("tag")) != null ? _a : "";
      state.query.type = (_b = urlParams.get("type")) != null ? _b : "";
      state.query.text = (_c = urlParams.get("text")) != null ? _c : "";
      state.query.filter = (_d = urlParams.get("filter")) != null ? _d : "";
      const from = parseInt((_e = urlParams.get("from")) != null ? _e : "0");
      const to = parseInt((_f = urlParams.get("to")) != null ? _f : "0");
      if (to > from && to !== 0) {
        state.query.duration = {
          from,
          to
        };
      }
      state.hash = hash2;
      state.pathname = this.getValidPathname(pathname);
      appStore.dispatch({
        type: "SET_LOCATION",
        payload: state
      });
    });
    __publicField(this, "getState", () => {
      return appStore.getState().locationState;
    });
    __publicField(this, "clearQuery", () => {
      appStore.dispatch({
        type: "SET_QUERY",
        payload: {
          tag: "",
          duration: null,
          text: "",
          type: "",
          filter: ""
        }
      });
    });
    __publicField(this, "setQuery", (query) => {
      appStore.dispatch({
        type: "SET_QUERY",
        payload: query
      });
    });
    __publicField(this, "setHash", (hash2) => {
      appStore.dispatch({
        type: "SET_HASH",
        payload: {
          hash: hash2
        }
      });
    });
    __publicField(this, "setPathname", (pathname) => {
      appStore.dispatch({
        type: "SET_PATHNAME",
        payload: {
          pathname
        }
      });
    });
    __publicField(this, "pushHistory", (pathname) => {
      appStore.dispatch({
        type: "SET_PATHNAME",
        payload: {
          pathname
        }
      });
    });
    __publicField(this, "replaceHistory", (pathname) => {
      appStore.dispatch({
        type: "SET_PATHNAME",
        payload: {
          pathname
        }
      });
    });
    __publicField(this, "setEventTypeQuery", (type = "") => {
      appStore.dispatch({
        type: "SET_TYPE",
        payload: {
          type
        }
      });
    });
    __publicField(this, "setEventFilter", (filterId) => {
      appStore.dispatch({
        type: "SET_QUERY_FILTER",
        payload: filterId
      });
    });
    __publicField(this, "setTextQuery", (text) => {
      appStore.dispatch({
        type: "SET_TEXT",
        payload: {
          text
        }
      });
    });
    __publicField(this, "setTagQuery", (tag) => {
      appStore.dispatch({
        type: "SET_TAG_QUERY",
        payload: {
          tag
        }
      });
    });
    __publicField(this, "setFromAndToQuery", (from, to) => {
      appStore.dispatch({
        type: "SET_DURATION_QUERY",
        payload: {
          duration: { from, to }
        }
      });
    });
    __publicField(this, "getValidPathname", (pathname) => {
      if (["/", "/recycle", "/setting"].includes(pathname)) {
        return pathname;
      } else {
        return "/";
      }
    });
    this.updateStateWithLocation();
    window.onpopstate = () => {
      this.updateStateWithLocation();
    };
  }
}
new LocationService();
function escapeRegExp(text) {
  return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}
function getLinesInString(input) {
  const lines = [];
  let tempString = input;
  while (tempString.contains("\n")) {
    const lineEndIndex = tempString.indexOf("\n");
    lines.push(tempString.slice(0, lineEndIndex));
    tempString = tempString.slice(lineEndIndex + 1);
  }
  lines.push(tempString);
  return lines;
}
async function waitForInsert(EventContent, startDate) {
  const { vault } = appStore.getState().dailyNotesState.app;
  let lineNum;
  const startTime = startDate.toString();
  const newEvent = `- [ ] ` + DefaultEventComposition.replace(/{TIME}/g, require$$0.moment(startTime).format("HH:mm")).replace(/{CONTENT}/g, EventContent);
  const dailyNotes = await getAllDailyNotes_1();
  const existingFile = getDailyNote_1(require$$0.moment(startDate), dailyNotes);
  if (!existingFile) {
    const file = await createDailyNote_1(require$$0.moment(startDate));
    await dailyNotesService.getMyAllDailyNotes();
    const fileContents = await vault.read(file);
    const newFileContent = await insertAfterHandler(InsertAfter, newEvent, fileContents);
    await vault.modify(file, newFileContent.content);
    if (newFileContent.posNum === -1) {
      const allLines = getAllLinesFromFile$4(newFileContent.content);
      lineNum = allLines.length + 1;
    } else {
      lineNum = newFileContent.posNum + 1;
    }
    return {
      id: require$$0.moment(startDate).format("YYYYMMDDHHmm") + "00" + lineNum,
      title: EventContent,
      start: require$$0.moment(startDate).toDate(),
      end: require$$0.moment(startDate).toDate(),
      eventType: "TASK-TODO"
    };
  } else {
    const fileContents = await vault.read(existingFile);
    const newFileContent = await insertAfterHandler(InsertAfter, newEvent, fileContents);
    await vault.modify(existingFile, newFileContent.content);
    if (newFileContent.posNum === -1) {
      const allLines = getAllLinesFromFile$4(newFileContent.content);
      lineNum = allLines.length + 1;
    } else {
      lineNum = newFileContent.posNum + 1;
    }
    return {
      id: require$$0.moment(startDate).format("YYYYMMDDHHmm") + "00" + lineNum,
      title: EventContent,
      start: require$$0.moment(startDate).toDate(),
      end: require$$0.moment(startDate).toDate(),
      eventType: "TASK-TODO"
    };
  }
}
async function insertAfterHandler(targetString, formatted, fileContent) {
  const targetRegex = new RegExp(`s*${await escapeRegExp(targetString)}s*`);
  const fileContentLines = getLinesInString(fileContent);
  const targetPosition = fileContentLines.findIndex((line) => targetRegex.test(line));
  const targetNotFound = targetPosition === -1;
  if (targetNotFound) {
    console.log("unable to find insert after line in file.");
  }
  const nextHeaderPositionAfterTargetPosition = fileContentLines.slice(targetPosition + 1).findIndex((line) => /^#+ |---/.test(line));
  const foundNextHeader = nextHeaderPositionAfterTargetPosition !== -1;
  if (foundNextHeader) {
    let endOfSectionIndex;
    for (let i = nextHeaderPositionAfterTargetPosition + targetPosition; i > targetPosition; i--) {
      const lineIsNewline = /^[\s\n ]*$/.test(fileContentLines[i]);
      if (!lineIsNewline) {
        endOfSectionIndex = i;
        break;
      }
    }
    if (!endOfSectionIndex)
      endOfSectionIndex = targetPosition;
    return await insertTextAfterPositionInBody(formatted, fileContent, endOfSectionIndex, foundNextHeader);
  } else {
    return await insertTextAfterPositionInBody(formatted, fileContent, fileContentLines.length - 1, foundNextHeader);
  }
}
async function insertTextAfterPositionInBody(text, body, pos, found) {
  if (pos === -1) {
    return {
      content: `${body}
${text}`,
      posNum: -1
    };
  }
  const splitContent = body.split("\n");
  if (found) {
    const pre = splitContent.slice(0, pos + 1).join("\n");
    const post = splitContent.slice(pos + 1).join("\n");
    return {
      content: `${pre}
${text}
${post}`,
      posNum: pos
    };
  } else {
    const pre = splitContent.slice(0, pos + 1).join("\n");
    const post = splitContent.slice(pos + 1).join("\n");
    if (/[\s\S]*?/g.test(post)) {
      return {
        content: `${pre}
${text}`,
        posNum: pos
      };
    } else {
      return {
        content: `${pre}${text}
${post}`,
        posNum: pos
      };
    }
  }
}
const getAllLinesFromFile$4 = (cache) => cache.split(/\r?\n/);
async function changeEvent(eventid, originalContent, content, eventType) {
  const { dailyNotes } = dailyNotesService.getState();
  const { vault } = appStore.getState().dailyNotesState.app;
  const timeString = eventid.slice(0, 13) + "00";
  const idString = parseInt(eventid.slice(14));
  const originalDate = require$$0.moment(timeString, "YYYYMMDDHHmmSS");
  const dailyNote = getDailyNote_1(originalDate, dailyNotes);
  const fileContent = await vault.read(dailyNote);
  const fileLines = getAllLinesFromFile$3(fileContent);
  const removeEnter = content.replace(/\n/g, "<br>");
  const originalLine = fileLines[idString];
  const newLine = fileLines[idString].replace(originalContent, removeEnter);
  const newFileContent = fileContent.replace(originalLine, newLine);
  await vault.modify(dailyNote, newFileContent);
  return {
    id: eventid,
    title: removeEnter,
    start: require$$0.moment(originalDate.format("YYYY/MM/DD HH:mm:SS")).toDate(),
    end: require$$0.moment(originalDate.format("YYYY/MM/DD HH:mm:SS")).toDate(),
    eventType
  };
}
function getDailyNotePath() {
  const dailyNotesSetting = getDailyNoteSettings_1();
  const dailyNotePath = dailyNotesSetting.folder;
  return dailyNotePath;
}
const getAllLinesFromFile$3 = (cache) => cache.split(/\r?\n/);
class DailyNotesFolderMissingError extends Error {
}
async function getRemainingEvents(note) {
  if (!note) {
    return 0;
  }
  const { vault } = appStore.getState().dailyNotesState.app;
  let fileContents = await vault.read(note);
  let regexMatch;
  if (DefaultEventComposition != "" && /{TIME}/g.test(DefaultEventComposition) && /{CONTENT}/g.test(DefaultEventComposition)) {
    regexMatch = "(-|\\*) (\\[(.{1})\\]\\s)?" + DefaultEventComposition.replace(/{TIME}/g, "((\\<time\\>)?\\d{1,2}:\\d{2})?").replace(/ {CONTENT}/g, "");
  } else {
    regexMatch = "(-|\\*) (\\[(.{1})\\]\\s)?((\\<time\\>)?\\d{1,2}\\:\\d{2})?";
  }
  const regexMatchRe = new RegExp(regexMatch, "g");
  const matchLength = (fileContents.match(regexMatchRe) || []).length;
  const re2 = new RegExp(ProcessEntriesBelow.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1"), "g");
  const processEntriesHeader = (fileContents.match(re2) || []).length;
  fileContents = null;
  if (processEntriesHeader) {
    return matchLength;
  }
  return 0;
}
async function getEventsFromDailyNote(dailyNote, dailyEvents) {
  if (!dailyNote) {
    return [];
  }
  const { vault } = appStore.getState().dailyNotesState.app;
  const Events = await getRemainingEvents(dailyNote);
  if (Events) {
    let fileContents = await vault.read(dailyNote);
    let fileLines = getAllLinesFromFile$2(fileContents);
    const startDate = getDateFromFile_1(dailyNote, "day");
    const endDate = getDateFromFile_1(dailyNote, "day");
    let processHeaderFound = false;
    let eventType;
    for (let i = 0; i < fileLines.length; i++) {
      const line = fileLines[i];
      if (line.length === 0)
        continue;
      if (processHeaderFound == false && lineContainsParseBelowToken(line)) {
        processHeaderFound = true;
      }
      if (processHeaderFound == true && !lineContainsParseBelowToken(line) && /^#{1,} /g.test(line)) {
        processHeaderFound = false;
      }
      if (lineContainsTime(line) && processHeaderFound) {
        const hourText = extractHourFromBulletLine(line);
        const minText = extractMinFromBulletLine(line);
        startDate.hours(parseInt(hourText));
        startDate.minutes(parseInt(minText));
        endDate.hours(parseInt(hourText));
        if (parseInt(hourText) > 22) {
          endDate.minutes(parseInt(minText));
        } else {
          endDate.minutes(parseInt(minText));
        }
        if (/^\s*[-*]\s(\[(.{1})\])\s/g.test(line)) {
          const eventTaskType = extractEventTaskTypeFromLine(line);
          if (eventTaskType === " ") {
            eventType = "TASK-TODO";
          } else if (eventTaskType === "x" || eventTaskType === "X") {
            eventType = "TASK-DONE";
          } else {
            eventType = "TASK-" + eventTaskType;
          }
        } else {
          eventType = "JOURNAL";
        }
        const rawText = extractTextFromTodoLine(line);
        if (rawText !== "") {
          dailyEvents.push({
            id: startDate.format("YYYYMMDDHHmm") + "00" + i,
            title: rawText,
            start: require$$0.moment(startDate).toDate(),
            end: require$$0.moment(startDate).toDate(),
            eventType
          });
        }
      }
    }
    fileLines = null;
    fileContents = null;
  }
}
async function getEvents() {
  const events = [];
  const { vault } = appStore.getState().dailyNotesState.app;
  const { folder } = getDailyNoteSettings_1();
  const dailyNotesFolder = vault.getAbstractFileByPath(require$$0.normalizePath(folder));
  if (!dailyNotesFolder) {
    throw new DailyNotesFolderMissingError("Failed to find daily notes folder");
  }
  const dailyNotes = getAllDailyNotes_1();
  for (const string in dailyNotes) {
    if (dailyNotes[string] instanceof require$$0.TFile) {
      await getEventsFromDailyNote(dailyNotes[string], events);
    }
  }
  return events;
}
const getAllLinesFromFile$2 = (cache) => cache.split(/\r?\n/);
const lineContainsTime = (line) => {
  let regexMatch;
  if (DefaultEventComposition != "" && /{TIME}/g.test(DefaultEventComposition) && /{CONTENT}/g.test(DefaultEventComposition)) {
    regexMatch = "^\\s*(-|\\*)\\s(\\[(.{1})\\]\\s)?" + DefaultEventComposition.replace(/{TIME}/g, "(\\<time\\>)?\\d{1,2}:\\d{2}(\\<\\/time\\>)?").replace(/{CONTENT}/g, "(.*)$");
  } else {
    regexMatch = "^\\s*(-|\\*)\\s(\\[(.{1})\\]\\s)?(\\<time\\>)?\\d{1,2}\\:\\d{2}(.*)$";
  }
  const regexMatchRe = new RegExp(regexMatch, "");
  return regexMatchRe.test(line);
};
const lineContainsParseBelowToken = (line) => {
  if (ProcessEntriesBelow === "") {
    return true;
  }
  const re2 = new RegExp(ProcessEntriesBelow.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1"), "");
  return re2.test(line);
};
const extractTextFromTodoLine = (line) => {
  var _a;
  let regexMatch;
  if (DefaultEventComposition != "" && /{TIME}/g.test(DefaultEventComposition) && /{CONTENT}/g.test(DefaultEventComposition)) {
    regexMatch = "^\\s*[\\-\\*]\\s(\\[(.{1})\\]\\s?)?" + DefaultEventComposition.replace(/{TIME}/g, "(\\<time\\>)?((\\d{1,2})\\:(\\d{2}))?(\\<\\/time\\>)?").replace(/{CONTENT}/g, "(.*)$");
  } else {
    regexMatch = "^\\s*[\\-\\*]\\s(\\[(.{1})\\]\\s?)?(\\<time\\>)?((\\d{1,2})\\:(\\d{2}))?(\\<\\/time\\>)?\\s?(.*)$";
  }
  const regexMatchRe = new RegExp(regexMatch, "");
  return (_a = regexMatchRe.exec(line)) == null ? void 0 : _a[8];
};
const extractHourFromBulletLine = (line) => {
  var _a;
  let regexHourMatch;
  if (DefaultEventComposition != "" && /{TIME}/g.test(DefaultEventComposition) && /{CONTENT}/g.test(DefaultEventComposition)) {
    regexHourMatch = "^\\s*[\\-\\*]\\s(\\[(.{1})\\]\\s?)?" + DefaultEventComposition.replace(/{TIME}/g, "(\\<time\\>)?(\\d{1,2})\\:(\\d{2})(\\<\\/time\\>)?").replace(/{CONTENT}/g, "(.*)$");
  } else {
    regexHourMatch = "^\\s*[\\-\\*]\\s(\\[(.{1})\\]\\s?)?(\\<time\\>)?(\\d{1,2})\\:(\\d{2})(.*)$";
  }
  const regexMatchRe = new RegExp(regexHourMatch, "");
  return (_a = regexMatchRe.exec(line)) == null ? void 0 : _a[4];
};
const extractMinFromBulletLine = (line) => {
  var _a;
  let regexHourMatch;
  if (DefaultEventComposition != "" && /{TIME}/g.test(DefaultEventComposition) && /{CONTENT}/g.test(DefaultEventComposition)) {
    regexHourMatch = "^\\s*[\\-\\*]\\s(\\[(.{1})\\]\\s?)?" + DefaultEventComposition.replace(/{TIME}/g, "(\\<time\\>)?(\\d{1,2})\\:(\\d{2})(\\<\\/time\\>)?").replace(/{CONTENT}/g, "(.*)$");
  } else {
    regexHourMatch = "^\\s*[\\-\\*]\\s(\\[(.{1})\\]\\s?)?(\\<time\\>)?(\\d{1,2})\\:(\\d{2})(.*)$";
  }
  const regexMatchRe = new RegExp(regexHourMatch, "");
  return (_a = regexMatchRe.exec(line)) == null ? void 0 : _a[5];
};
const extractEventTaskTypeFromLine = (line) => {
  var _a;
  return (_a = /^\s*[\-\*]\s(\[(.{1})\])\s(.*)$/.exec(line)) == null ? void 0 : _a[2];
};
const sendEventToDelete = async (eventContent) => {
  const { metadataCache, vault } = appStore.getState().dailyNotesState.app;
  const filePath = getDailyNotePath();
  const absolutePath = filePath + "/delete.md";
  const deleteFile = metadataCache.getFirstLinkpathDest("", absolutePath);
  if (deleteFile instanceof require$$0.TFile) {
    const fileContents = await vault.read(deleteFile);
    const fileLines = getAllLinesFromFile$1(fileContents);
    const date2 = require$$0.moment();
    const deleteDate = date2.format("YYYY/MM/DD HH:mm:ss");
    let lineNum;
    if (fileLines.length === 1 && fileLines[0] === "") {
      lineNum = 1;
    } else {
      lineNum = fileLines.length + 1;
    }
    const deleteDateID = date2.format("YYYYMMDDHHmmss") + lineNum;
    await createDeleteEventInFile(deleteFile, fileContents, eventContent, deleteDateID);
    return deleteDate;
  } else {
    const deleteFilePath = require$$0.normalizePath(absolutePath);
    const file = await createdeleteFile(deleteFilePath);
    const date2 = require$$0.moment();
    const deleteDate = date2.format("YYYY/MM/DD HH:mm:ss");
    const lineNum = 1;
    const deleteDateID = date2.format("YYYYMMDDHHmmss") + lineNum;
    await createDeleteEventInFile(file, "", eventContent, deleteDateID);
    return deleteDate;
  }
};
const createDeleteEventInFile = async (file, fileContent, eventContent, deleteDate) => {
  const { vault } = appStore.getState().dailyNotesState.app;
  let newContent;
  if (fileContent === "") {
    newContent = eventContent + " deletedAt: " + deleteDate;
  } else {
    newContent = fileContent + "\n" + eventContent + " deletedAt: " + deleteDate;
  }
  await vault.modify(file, newContent);
  return true;
};
const createdeleteFile = async (path) => {
  const { vault } = appStore.getState().dailyNotesState.app;
  try {
    const createdFile = await vault.create(path, "");
    return createdFile;
  } catch (err) {
    console.error(`Failed to create file: '${path}'`, err);
    new require$$0.Notice("Unable to create new file.");
  }
};
const getAllLinesFromFile$1 = (cache) => cache.split(/\r?\n/);
async function obHideEvent(eventid) {
  const { dailyNotes } = dailyNotesService.getState();
  if (/\d{14,}/.test(eventid)) {
    const { vault } = appStore.getState().dailyNotesState.app;
    const timeString = eventid.slice(0, 14);
    const idString = parseInt(eventid.slice(14));
    const changeDate = require$$0.moment(timeString, "YYYYMMDDHHmmSS");
    const dailyNote = getDailyNote_1(changeDate, dailyNotes);
    const fileContent = await vault.read(dailyNote);
    const fileLines = getAllLinesFromFile(fileContent);
    const content = extractContentfromText(fileLines[idString]);
    const originalLine = "- " + eventid + " " + content;
    const newLine = fileLines[idString];
    const newFileContent = fileContent.replace(newLine, "");
    await vault.modify(dailyNote, newFileContent);
    const deleteDate = await sendEventToDelete(originalLine);
    return deleteDate;
  }
}
const getAllLinesFromFile = (cache) => cache.split(/\r?\n/);
const extractContentfromText = (line) => {
  var _a;
  let regexMatch;
  if (DefaultEventComposition != "" && /{TIME}/g.test(DefaultEventComposition) && /{CONTENT}/g.test(DefaultEventComposition)) {
    regexMatch = "^\\s*[\\-\\*]\\s(\\[(.{1})\\]\\s?)?" + DefaultEventComposition.replace(/{TIME}/g, "(\\<time\\>)?((\\d{1,2})\\:(\\d{2}))?(\\<\\/time\\>)?").replace(/{CONTENT}/g, "(.*)$");
  } else {
    regexMatch = "^\\s*[\\-\\*]\\s(\\[(.{1})\\]\\s?)?(\\<time\\>)?((\\d{1,2})\\:(\\d{2}))?(\\<\\/time\\>)?\\s?(.*)$";
  }
  const regexMatchRe = new RegExp(regexMatch, "");
  return (_a = regexMatchRe.exec(line)) == null ? void 0 : _a[8];
};
var api;
(function(api2) {
  function getUserInfo() {
  }
  api2.getUserInfo = getUserInfo;
  function checkUsernameUsable(username) {
  }
  api2.checkUsernameUsable = checkUsernameUsable;
  function checkPasswordValid(password) {
  }
  api2.checkPasswordValid = checkPasswordValid;
  function updateUserinfo(userinfo) {
  }
  api2.updateUserinfo = updateUserinfo;
  async function getMyEvents() {
    return await getEvents();
  }
  api2.getMyEvents = getMyEvents;
  function hideEvent(eventId) {
    return obHideEvent(eventId);
  }
  api2.hideEvent = hideEvent;
})(api || (api = {}));
var api$1 = api;
class EventService {
  constructor() {
    __publicField(this, "initialized", false);
  }
  getState() {
    return appStore.getState().eventState;
  }
  async fetchAllEvents() {
    const data = await api$1.getMyEvents();
    const events = [];
    for (const m2 of data) {
      events.push(m2);
    }
    appStore.dispatch({
      type: "SET_EVENTS",
      payload: {
        events
      }
    });
    if (!this.initialized) {
      this.initialized = true;
    }
    return events;
  }
  pushEvent(event) {
    appStore.dispatch({
      type: "INSERT_EVENT",
      payload: {
        event: __spreadValues({}, event)
      }
    });
  }
  getEventById(id2) {
    for (const m2 of this.getState().events) {
      if (m2.id === id2) {
        return m2;
      }
    }
    return null;
  }
  async hideEventById(id2) {
    await api$1.hideEvent(id2);
    appStore.dispatch({
      type: "DELETE_EVENT_BY_ID",
      payload: {
        id: id2
      }
    });
  }
  editEvent(event) {
    appStore.dispatch({
      type: "EDIT_EVENT",
      payload: event
    });
  }
  clearEvents() {
    appStore.dispatch({
      type: "SET_EVENTS",
      payload: {
        events: []
      }
    });
  }
  async createEvent(text, startDate) {
    const event = await waitForInsert(text, startDate);
    return event;
  }
  async updateEvent(eventId, originalText, text, type) {
    const event = await changeEvent(eventId, originalText, text, type);
    return event;
  }
}
const eventService = new EventService();
function useRefresh() {
  const [, setBoolean] = _react_17_0_2_react.exports.useState(false);
  const refresh = _react_17_0_2_react.exports.useCallback(() => {
    setBoolean((ps) => {
      return !ps;
    });
  }, []);
  return refresh;
}
var Calendar$2 = "";
function _extends$1() {
  _extends$1 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _setPrototypeOf(o, p2) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p3) {
    o2.__proto__ = p3;
    return o2;
  };
  return _setPrototypeOf(o, p2);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
var _propTypes_15_7_2_propTypes = { exports: {} };
var ReactPropTypesSecret$1 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;
var ReactPropTypesSecret = ReactPropTypesSecret_1;
function emptyFunction() {
}
function emptyFunctionWithReset() {
}
emptyFunctionWithReset.resetWarningCache = emptyFunction;
var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      return;
    }
    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
    err.name = "Invariant Violation";
    throw err;
  }
  shim.isRequired = shim;
  function getShim() {
    return shim;
  }
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,
    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,
    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};
{
  _propTypes_15_7_2_propTypes.exports = factoryWithThrowingShims();
}
var PropTypes = _propTypes_15_7_2_propTypes.exports;
var invariant = function(condition, format, a, b, c, d, e, f2) {
  if (!condition) {
    var error;
    if (format === void 0) {
      error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
    } else {
      var args = [a, b, c, d, e, f2];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function() {
        return args[argIndex++];
      }));
      error.name = "Invariant Violation";
    }
    error.framesToPop = 1;
    throw error;
  }
};
var browser = invariant;
var noop$1 = function noop2() {
};
function uncontrolledPropTypes(controlledValues, displayName) {
  var propTypes = {};
  Object.keys(controlledValues).forEach(function(prop) {
    propTypes[defaultKey(prop)] = noop$1;
  });
  return propTypes;
}
function isProp(props, prop) {
  return props[prop] !== void 0;
}
function defaultKey(key) {
  return "default" + key.charAt(0).toUpperCase() + key.substr(1);
}
function canAcceptRef(component) {
  return !!component && (typeof component !== "function" || component.prototype && component.prototype.isReactComponent);
}
function componentWillMount() {
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== void 0) {
    this.setState(state);
  }
}
function componentWillReceiveProps(nextProps) {
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== void 0 ? state : null;
  }
  this.setState(updater.bind(this));
}
function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;
function polyfill(Component) {
  var prototype = Component.prototype;
  if (!prototype || !prototype.isReactComponent) {
    throw new Error("Can only polyfill class components");
  }
  if (typeof Component.getDerivedStateFromProps !== "function" && typeof prototype.getSnapshotBeforeUpdate !== "function") {
    return Component;
  }
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === "function") {
    foundWillMountName = "componentWillMount";
  } else if (typeof prototype.UNSAFE_componentWillMount === "function") {
    foundWillMountName = "UNSAFE_componentWillMount";
  }
  if (typeof prototype.componentWillReceiveProps === "function") {
    foundWillReceivePropsName = "componentWillReceiveProps";
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === "function") {
    foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
  }
  if (typeof prototype.componentWillUpdate === "function") {
    foundWillUpdateName = "componentWillUpdate";
  } else if (typeof prototype.UNSAFE_componentWillUpdate === "function") {
    foundWillUpdateName = "UNSAFE_componentWillUpdate";
  }
  if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
    var componentName = Component.displayName || Component.name;
    var newApiName = typeof Component.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
    throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + componentName + " uses " + newApiName + " but also contains the following legacy lifecycles:" + (foundWillMountName !== null ? "\n  " + foundWillMountName : "") + (foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "") + (foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "") + "\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks");
  }
  if (typeof Component.getDerivedStateFromProps === "function") {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }
  if (typeof prototype.getSnapshotBeforeUpdate === "function") {
    if (typeof prototype.componentDidUpdate !== "function") {
      throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");
    }
    prototype.componentWillUpdate = componentWillUpdate;
    var componentDidUpdate = prototype.componentDidUpdate;
    prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
      var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }
  return Component;
}
var _jsxFileName = "/Users/jquense/src/uncontrollable/src/uncontrollable.js";
function uncontrollable(Component, controlledValues, methods) {
  if (methods === void 0) {
    methods = [];
  }
  var displayName = Component.displayName || Component.name || "Component";
  var canAcceptRef$1 = canAcceptRef(Component);
  var controlledProps = Object.keys(controlledValues);
  var PROPS_TO_OMIT = controlledProps.map(defaultKey);
  !(canAcceptRef$1 || !methods.length) ? browser(false) : void 0;
  var UncontrolledComponent = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(UncontrolledComponent2, _React$Component);
    function UncontrolledComponent2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.handlers = Object.create(null);
      controlledProps.forEach(function(propName) {
        var handlerName = controlledValues[propName];
        var handleChange = function handleChange2(value) {
          if (_this.props[handlerName]) {
            var _this$props;
            _this._notifying = true;
            for (var _len2 = arguments.length, args2 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args2[_key2 - 1] = arguments[_key2];
            }
            (_this$props = _this.props)[handlerName].apply(_this$props, [value].concat(args2));
            _this._notifying = false;
          }
          if (!_this.unmounted)
            _this.setState(function(_ref) {
              var _extends22;
              var values2 = _ref.values;
              return {
                values: _extends$1(Object.create(null), values2, (_extends22 = {}, _extends22[propName] = value, _extends22))
              };
            });
        };
        _this.handlers[handlerName] = handleChange;
      });
      if (methods.length)
        _this.attachRef = function(ref) {
          _this.inner = ref;
        };
      var values = Object.create(null);
      controlledProps.forEach(function(key) {
        values[key] = _this.props[defaultKey(key)];
      });
      _this.state = {
        values,
        prevProps: {}
      };
      return _this;
    }
    var _proto = UncontrolledComponent2.prototype;
    _proto.shouldComponentUpdate = function shouldComponentUpdate() {
      return !this._notifying;
    };
    UncontrolledComponent2.getDerivedStateFromProps = function getDerivedStateFromProps(props, _ref2) {
      var values = _ref2.values, prevProps = _ref2.prevProps;
      var nextState = {
        values: _extends$1(Object.create(null), values),
        prevProps: {}
      };
      controlledProps.forEach(function(key) {
        nextState.prevProps[key] = props[key];
        if (!isProp(props, key) && isProp(prevProps, key)) {
          nextState.values[key] = props[defaultKey(key)];
        }
      });
      return nextState;
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.unmounted = true;
    };
    _proto.render = function render() {
      var _this2 = this;
      var _this$props2 = this.props, innerRef = _this$props2.innerRef, props = _objectWithoutPropertiesLoose(_this$props2, ["innerRef"]);
      PROPS_TO_OMIT.forEach(function(prop) {
        delete props[prop];
      });
      var newProps = {};
      controlledProps.forEach(function(propName) {
        var propValue = _this2.props[propName];
        newProps[propName] = propValue !== void 0 ? propValue : _this2.state.values[propName];
      });
      return React.createElement(Component, _extends$1({}, props, newProps, this.handlers, {
        ref: innerRef || this.attachRef
      }));
    };
    return UncontrolledComponent2;
  }(React.Component);
  polyfill(UncontrolledComponent);
  UncontrolledComponent.displayName = "Uncontrolled(" + displayName + ")";
  UncontrolledComponent.propTypes = _extends$1({
    innerRef: function innerRef() {
    }
  }, uncontrolledPropTypes(controlledValues));
  methods.forEach(function(method) {
    UncontrolledComponent.prototype[method] = function $proxiedMethod() {
      var _this$inner;
      return (_this$inner = this.inner)[method].apply(_this$inner, arguments);
    };
  });
  var WrappedComponent = UncontrolledComponent;
  if (React.forwardRef) {
    WrappedComponent = React.forwardRef(function(props, ref) {
      return React.createElement(UncontrolledComponent, _extends$1({}, props, {
        innerRef: ref,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 128
        },
        __self: this
      }));
    });
    WrappedComponent.propTypes = UncontrolledComponent.propTypes;
  }
  WrappedComponent.ControlledComponent = Component;
  WrappedComponent.deferControlTo = function(newComponent, additions, nextMethods) {
    if (additions === void 0) {
      additions = {};
    }
    return uncontrollable(newComponent, _extends$1({}, controlledValues, additions), nextMethods);
  };
  return WrappedComponent;
}
function toVal(mix) {
  var k, y2, str = "";
  if (typeof mix === "string" || typeof mix === "number") {
    str += mix;
  } else if (typeof mix === "object") {
    if (Array.isArray(mix)) {
      for (k = 0; k < mix.length; k++) {
        if (mix[k]) {
          if (y2 = toVal(mix[k])) {
            str && (str += " ");
            str += y2;
          }
        }
      }
    } else {
      for (k in mix) {
        if (mix[k]) {
          str && (str += " ");
          str += k;
        }
      }
    }
  }
  return str;
}
function clsx() {
  var i = 0, tmp, x2, str = "";
  while (i < arguments.length) {
    if (tmp = arguments[i++]) {
      if (x2 = toVal(tmp)) {
        str && (str += " ");
        str += x2;
      }
    }
  }
  return str;
}
var clsx_m = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": clsx
});
var MILI = "milliseconds", SECONDS = "seconds", MINUTES = "minutes", HOURS = "hours", DAY = "day", WEEK = "week", MONTH = "month", YEAR = "year", DECADE = "decade", CENTURY = "century";
var multiplierMilli = {
  "milliseconds": 1,
  "seconds": 1e3,
  "minutes": 60 * 1e3,
  "hours": 60 * 60 * 1e3,
  "day": 24 * 60 * 60 * 1e3,
  "week": 7 * 24 * 60 * 60 * 1e3
};
var multiplierMonth = {
  "month": 1,
  "year": 12,
  "decade": 10 * 12,
  "century": 100 * 12
};
function daysOf(year2) {
  return [31, daysInFeb(year2), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
}
function daysInFeb(year2) {
  return year2 % 4 === 0 && year2 % 100 !== 0 || year2 % 400 === 0 ? 29 : 28;
}
function add(d, num, unit) {
  d = new Date(d);
  switch (unit) {
    case MILI:
    case SECONDS:
    case MINUTES:
    case HOURS:
    case DAY:
    case WEEK:
      return addMillis(d, num * multiplierMilli[unit]);
    case MONTH:
    case YEAR:
    case DECADE:
    case CENTURY:
      return addMonths(d, num * multiplierMonth[unit]);
  }
  throw new TypeError('Invalid units: "' + unit + '"');
}
function addMillis(d, num) {
  var nextDate = new Date(+d + num);
  return solveDST(d, nextDate);
}
function addMonths(d, num) {
  var year2 = d.getFullYear(), month2 = d.getMonth(), day2 = d.getDate(), totalMonths = year2 * 12 + month2 + num, nextYear = Math.trunc(totalMonths / 12), nextMonth = totalMonths % 12, nextDay = Math.min(day2, daysOf(nextYear)[nextMonth]);
  var nextDate = new Date(d);
  nextDate.setFullYear(nextYear);
  nextDate.setDate(1);
  nextDate.setMonth(nextMonth);
  nextDate.setDate(nextDay);
  return nextDate;
}
function solveDST(currentDate, nextDate) {
  var currentOffset = currentDate.getTimezoneOffset(), nextOffset = nextDate.getTimezoneOffset();
  var diffMinutes = nextOffset - currentOffset;
  return new Date(+nextDate + diffMinutes * multiplierMilli["minutes"]);
}
function subtract(d, num, unit) {
  return add(d, -num, unit);
}
function startOf(d, unit, firstOfWeek) {
  d = new Date(d);
  switch (unit) {
    case CENTURY:
    case DECADE:
    case YEAR:
      d = month(d, 0);
    case MONTH:
      d = date(d, 1);
    case WEEK:
    case DAY:
      d = hours(d, 0);
    case HOURS:
      d = minutes(d, 0);
    case MINUTES:
      d = seconds(d, 0);
    case SECONDS:
      d = milliseconds(d, 0);
  }
  if (unit === DECADE)
    d = subtract(d, year(d) % 10, "year");
  if (unit === CENTURY)
    d = subtract(d, year(d) % 100, "year");
  if (unit === WEEK)
    d = weekday(d, 0, firstOfWeek);
  return d;
}
function endOf(d, unit, firstOfWeek) {
  d = new Date(d);
  d = startOf(d, unit, firstOfWeek);
  switch (unit) {
    case CENTURY:
    case DECADE:
    case YEAR:
    case MONTH:
    case WEEK:
      d = add(d, 1, unit);
      d = subtract(d, 1, DAY);
      d.setHours(23, 59, 59, 999);
      break;
    case DAY:
      d.setHours(23, 59, 59, 999);
      break;
    case HOURS:
    case MINUTES:
    case SECONDS:
      d = add(d, 1, unit);
      d = subtract(d, 1, MILI);
  }
  return d;
}
var eq$4 = createComparer(function(a, b) {
  return a === b;
});
var neq = createComparer(function(a, b) {
  return a !== b;
});
var gt = createComparer(function(a, b) {
  return a > b;
});
var gte = createComparer(function(a, b) {
  return a >= b;
});
var lt = createComparer(function(a, b) {
  return a < b;
});
var lte = createComparer(function(a, b) {
  return a <= b;
});
function min$1() {
  return new Date(Math.min.apply(Math, arguments));
}
function max$1() {
  return new Date(Math.max.apply(Math, arguments));
}
function inRange$2(day2, min2, max2, unit) {
  unit = unit || "day";
  return (!min2 || gte(day2, min2, unit)) && (!max2 || lte(day2, max2, unit));
}
var milliseconds = createAccessor("Milliseconds");
var seconds = createAccessor("Seconds");
var minutes = createAccessor("Minutes");
var hours = createAccessor("Hours");
var day = createAccessor("Day");
var date = createAccessor("Date");
var month = createAccessor("Month");
var year = createAccessor("FullYear");
function weekday(d, val, firstDay) {
  var w2 = (day(d) + 7 - (firstDay || 0)) % 7;
  return val === void 0 ? w2 : add(d, val - w2, DAY);
}
function createAccessor(method) {
  var hourLength = function(method2) {
    switch (method2) {
      case "Milliseconds":
        return 36e5;
      case "Seconds":
        return 3600;
      case "Minutes":
        return 60;
      case "Hours":
        return 1;
      default:
        return null;
    }
  }(method);
  return function(d, val) {
    if (val === void 0)
      return d["get" + method]();
    var dateOut = new Date(d);
    dateOut["set" + method](val);
    if (hourLength && dateOut["get" + method]() != val && (method === "Hours" || val >= hourLength && dateOut.getHours() - d.getHours() < Math.floor(val / hourLength))) {
      dateOut["set" + method](val + hourLength);
    }
    return dateOut;
  };
}
function createComparer(operator) {
  return function(a, b, unit) {
    return operator(+startOf(a, unit), +startOf(b, unit));
  };
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function baseSlice(array, start2, end2) {
  var index = -1, length = array.length;
  if (start2 < 0) {
    start2 = -start2 > length ? 0 : length + start2;
  }
  end2 = end2 > length ? length : end2;
  if (end2 < 0) {
    end2 += length;
  }
  length = start2 > end2 ? 0 : end2 - start2 >>> 0;
  start2 >>>= 0;
  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start2];
  }
  return result;
}
function eq$3(value, other) {
  return value === other || value !== value && other !== other;
}
var freeGlobal$2 = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal$3 = freeGlobal$2;
var freeSelf$1 = typeof self == "object" && self && self.Object === Object && self;
var root$9 = freeGlobal$3 || freeSelf$1 || Function("return this")();
var root$a = root$9;
var Symbol$6 = root$a.Symbol;
var Symbol$7 = Symbol$6;
var objectProto$s = Object.prototype;
var hasOwnProperty$m = objectProto$s.hasOwnProperty;
var nativeObjectToString$3 = objectProto$s.toString;
var symToStringTag$3 = Symbol$7 ? Symbol$7.toStringTag : void 0;
function getRawTag$2(value) {
  var isOwn = hasOwnProperty$m.call(value, symToStringTag$3), tag = value[symToStringTag$3];
  try {
    value[symToStringTag$3] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString$3.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$3] = tag;
    } else {
      delete value[symToStringTag$3];
    }
  }
  return result;
}
var objectProto$r = Object.prototype;
var nativeObjectToString$2 = objectProto$r.toString;
function objectToString$2(value) {
  return nativeObjectToString$2.call(value);
}
var nullTag$1 = "[object Null]", undefinedTag$1 = "[object Undefined]";
var symToStringTag$2 = Symbol$7 ? Symbol$7.toStringTag : void 0;
function baseGetTag$6(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag$1 : nullTag$1;
  }
  return symToStringTag$2 && symToStringTag$2 in Object(value) ? getRawTag$2(value) : objectToString$2(value);
}
function isObject$5(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var asyncTag$1 = "[object AsyncFunction]", funcTag$4 = "[object Function]", genTag$2 = "[object GeneratorFunction]", proxyTag$1 = "[object Proxy]";
function isFunction$5(value) {
  if (!isObject$5(value)) {
    return false;
  }
  var tag = baseGetTag$6(value);
  return tag == funcTag$4 || tag == genTag$2 || tag == asyncTag$1 || tag == proxyTag$1;
}
var MAX_SAFE_INTEGER$3 = 9007199254740991;
function isLength$4(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$3;
}
function isArrayLike$2(value) {
  return value != null && isLength$4(value.length) && !isFunction$5(value);
}
var MAX_SAFE_INTEGER$2 = 9007199254740991;
var reIsUint$1 = /^(?:0|[1-9]\d*)$/;
function isIndex$3(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$2 : length;
  return !!length && (type == "number" || type != "symbol" && reIsUint$1.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
function isIterateeCall(value, index, object) {
  if (!isObject$5(object)) {
    return false;
  }
  var type = typeof index;
  if (type == "number" ? isArrayLike$2(object) && isIndex$3(index, object.length) : type == "string" && index in object) {
    return eq$3(object[index], value);
  }
  return false;
}
var reWhitespace$1 = /\s/;
function trimmedEndIndex$2(string) {
  var index = string.length;
  while (index-- && reWhitespace$1.test(string.charAt(index))) {
  }
  return index;
}
var reTrimStart$1 = /^\s+/;
function baseTrim$2(string) {
  return string ? string.slice(0, trimmedEndIndex$2(string) + 1).replace(reTrimStart$1, "") : string;
}
function isObjectLike$6(value) {
  return value != null && typeof value == "object";
}
var symbolTag$5 = "[object Symbol]";
function isSymbol$5(value) {
  return typeof value == "symbol" || isObjectLike$6(value) && baseGetTag$6(value) == symbolTag$5;
}
var NAN$1 = 0 / 0;
var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary$1 = /^0b[01]+$/i;
var reIsOctal$1 = /^0o[0-7]+$/i;
var freeParseInt$1 = parseInt;
function toNumber$2(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol$5(value)) {
    return NAN$1;
  }
  if (isObject$5(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject$5(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim$2(value);
  var isBinary = reIsBinary$1.test(value);
  return isBinary || reIsOctal$1.test(value) ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8) : reIsBadHex$1.test(value) ? NAN$1 : +value;
}
var INFINITY$5 = 1 / 0, MAX_INTEGER$1 = 17976931348623157e292;
function toFinite$2(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber$2(value);
  if (value === INFINITY$5 || value === -INFINITY$5) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER$1;
  }
  return value === value ? value : 0;
}
function toInteger$2(value) {
  var result = toFinite$2(value), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
var nativeCeil$1 = Math.ceil, nativeMax$4 = Math.max;
function chunk(array, size2, guard) {
  if (guard ? isIterateeCall(array, size2, guard) : size2 === void 0) {
    size2 = 1;
  } else {
    size2 = nativeMax$4(toInteger$2(size2), 0);
  }
  var length = array == null ? 0 : array.length;
  if (!length || size2 < 1) {
    return [];
  }
  var index = 0, resIndex = 0, result = Array(nativeCeil$1(length / size2));
  while (index < length) {
    result[resIndex++] = baseSlice(array, index, index += size2);
  }
  return result;
}
function ownerDocument$1(node) {
  return node && node.ownerDocument || document;
}
function ownerWindow(node) {
  var doc = ownerDocument$1(node);
  return doc && doc.defaultView || window;
}
function getComputedStyle$1(node, psuedoElement) {
  return ownerWindow(node).getComputedStyle(node, psuedoElement);
}
var rUpper = /([A-Z])/g;
function hyphenate(string) {
  return string.replace(rUpper, "-$1").toLowerCase();
}
var msPattern = /^ms-/;
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, "-ms-");
}
var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
function isTransform(value) {
  return !!(value && supportedTransforms.test(value));
}
function style(node, property2) {
  var css = "";
  var transforms = "";
  if (typeof property2 === "string") {
    return node.style.getPropertyValue(hyphenateStyleName(property2)) || getComputedStyle$1(node).getPropertyValue(hyphenateStyleName(property2));
  }
  Object.keys(property2).forEach(function(key) {
    var value = property2[key];
    if (!value && value !== 0) {
      node.style.removeProperty(hyphenateStyleName(key));
    } else if (isTransform(key)) {
      transforms += key + "(" + value + ") ";
    } else {
      css += hyphenateStyleName(key) + ": " + value + ";";
    }
  });
  if (transforms) {
    css += "transform: " + transforms + ";";
  }
  node.style.cssText += ";" + css;
}
function contains$1(context, node) {
  if (context.contains)
    return context.contains(node);
  if (context.compareDocumentPosition)
    return context === node || !!(context.compareDocumentPosition(node) & 16);
}
var contains$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": contains$1
});
function isDocument(element) {
  return "nodeType" in element && element.nodeType === document.DOCUMENT_NODE;
}
function isWindow(node) {
  if ("window" in node && node.window === node)
    return node;
  if (isDocument(node))
    return node.defaultView || false;
  return false;
}
function getscrollAccessor(offset2) {
  var prop = offset2 === "pageXOffset" ? "scrollLeft" : "scrollTop";
  function scrollAccessor(node, val) {
    var win = isWindow(node);
    if (val === void 0) {
      return win ? win[offset2] : node[prop];
    }
    if (win) {
      win.scrollTo(win[offset2], val);
    } else {
      node[prop] = val;
    }
  }
  return scrollAccessor;
}
var getScrollLeft = getscrollAccessor("pageXOffset");
var getScrollTop = getscrollAccessor("pageYOffset");
function offset$2(node) {
  var doc = ownerDocument$1(node);
  var box = {
    top: 0,
    left: 0,
    height: 0,
    width: 0
  };
  var docElem = doc && doc.documentElement;
  if (!docElem || !contains$1(docElem, node))
    return box;
  if (node.getBoundingClientRect !== void 0)
    box = node.getBoundingClientRect();
  box = {
    top: box.top + getScrollTop(docElem) - (docElem.clientTop || 0),
    left: box.left + getScrollLeft(docElem) - (docElem.clientLeft || 0),
    width: box.width,
    height: box.height
  };
  return box;
}
var isHTMLElement$1 = function isHTMLElement2(e) {
  return !!e && "offsetParent" in e;
};
function offsetParent(node) {
  var doc = ownerDocument$1(node);
  var parent2 = node && node.offsetParent;
  while (isHTMLElement$1(parent2) && parent2.nodeName !== "HTML" && style(parent2, "position") === "static") {
    parent2 = parent2.offsetParent;
  }
  return parent2 || doc.documentElement;
}
var nodeName = function nodeName2(node) {
  return node.nodeName && node.nodeName.toLowerCase();
};
function position(node, offsetParent$1) {
  var parentOffset = {
    top: 0,
    left: 0
  };
  var offset2;
  if (style(node, "position") === "fixed") {
    offset2 = node.getBoundingClientRect();
  } else {
    var parent2 = offsetParent$1 || offsetParent(node);
    offset2 = offset$2(node);
    if (nodeName(parent2) !== "html")
      parentOffset = offset$2(parent2);
    var borderTop = String(style(parent2, "borderTopWidth") || 0);
    parentOffset.top += parseInt(borderTop, 10) - getScrollTop(parent2) || 0;
    var borderLeft = String(style(parent2, "borderLeftWidth") || 0);
    parentOffset.left += parseInt(borderLeft, 10) - getScrollLeft(parent2) || 0;
  }
  var marginTop = String(style(node, "marginTop") || 0);
  var marginLeft = String(style(node, "marginLeft") || 0);
  return _extends$1({}, offset2, {
    top: offset2.top - parentOffset.top - (parseInt(marginTop, 10) || 0),
    left: offset2.left - parentOffset.left - (parseInt(marginLeft, 10) || 0)
  });
}
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
var prev = new Date().getTime();
function fallback(fn3) {
  var curr = new Date().getTime();
  var ms = Math.max(0, 16 - (curr - prev));
  var handle = setTimeout(fn3, ms);
  prev = curr;
  return handle;
}
var vendors = ["", "webkit", "moz", "o", "ms"];
var cancelMethod = "clearTimeout";
var rafImpl = fallback;
var getKey$1 = function getKey2(vendor, k) {
  return vendor + (!vendor ? k : k[0].toUpperCase() + k.substr(1)) + "AnimationFrame";
};
if (canUseDOM) {
  vendors.some(function(vendor) {
    var rafMethod = getKey$1(vendor, "request");
    if (rafMethod in window) {
      cancelMethod = getKey$1(vendor, "cancel");
      rafImpl = function rafImpl2(cb2) {
        return window[rafMethod](cb2);
      };
    }
    return !!rafImpl;
  });
}
var cancel = function cancel2(id2) {
  if (typeof window[cancelMethod] === "function")
    window[cancelMethod](id2);
};
var request = rafImpl;
function listCacheClear$2() {
  this.__data__ = [];
  this.size = 0;
}
function assocIndexOf$5(array, key) {
  var length = array.length;
  while (length--) {
    if (eq$3(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var arrayProto$1 = Array.prototype;
var splice$1 = arrayProto$1.splice;
function listCacheDelete$2(key) {
  var data = this.__data__, index = assocIndexOf$5(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice$1.call(data, index, 1);
  }
  --this.size;
  return true;
}
function listCacheGet$2(key) {
  var data = this.__data__, index = assocIndexOf$5(data, key);
  return index < 0 ? void 0 : data[index][1];
}
function listCacheHas$2(key) {
  return assocIndexOf$5(this.__data__, key) > -1;
}
function listCacheSet$2(key, value) {
  var data = this.__data__, index = assocIndexOf$5(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
function ListCache$5(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache$5.prototype.clear = listCacheClear$2;
ListCache$5.prototype["delete"] = listCacheDelete$2;
ListCache$5.prototype.get = listCacheGet$2;
ListCache$5.prototype.has = listCacheHas$2;
ListCache$5.prototype.set = listCacheSet$2;
function stackClear$2() {
  this.__data__ = new ListCache$5();
  this.size = 0;
}
function stackDelete$2(key) {
  var data = this.__data__, result = data["delete"](key);
  this.size = data.size;
  return result;
}
function stackGet$2(key) {
  return this.__data__.get(key);
}
function stackHas$2(key) {
  return this.__data__.has(key);
}
var coreJsData$2 = root$a["__core-js_shared__"];
var coreJsData$3 = coreJsData$2;
var maskSrcKey$1 = function() {
  var uid = /[^.]+$/.exec(coreJsData$3 && coreJsData$3.keys && coreJsData$3.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked$2(func) {
  return !!maskSrcKey$1 && maskSrcKey$1 in func;
}
var funcProto$4 = Function.prototype;
var funcToString$4 = funcProto$4.toString;
function toSource$3(func) {
  if (func != null) {
    try {
      return funcToString$4.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor$1 = /^\[object .+?Constructor\]$/;
var funcProto$3 = Function.prototype, objectProto$q = Object.prototype;
var funcToString$3 = funcProto$3.toString;
var hasOwnProperty$l = objectProto$q.hasOwnProperty;
var reIsNative$1 = RegExp("^" + funcToString$3.call(hasOwnProperty$l).replace(reRegExpChar$1, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative$2(value) {
  if (!isObject$5(value) || isMasked$2(value)) {
    return false;
  }
  var pattern = isFunction$5(value) ? reIsNative$1 : reIsHostCtor$1;
  return pattern.test(toSource$3(value));
}
function getValue$2(object, key) {
  return object == null ? void 0 : object[key];
}
function getNative$7(object, key) {
  var value = getValue$2(object, key);
  return baseIsNative$2(value) ? value : void 0;
}
var Map$5 = getNative$7(root$a, "Map");
var Map$6 = Map$5;
var nativeCreate$5 = getNative$7(Object, "create");
var nativeCreate$6 = nativeCreate$5;
function hashClear$2() {
  this.__data__ = nativeCreate$6 ? nativeCreate$6(null) : {};
  this.size = 0;
}
function hashDelete$2(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var HASH_UNDEFINED$5 = "__lodash_hash_undefined__";
var objectProto$p = Object.prototype;
var hasOwnProperty$k = objectProto$p.hasOwnProperty;
function hashGet$2(key) {
  var data = this.__data__;
  if (nativeCreate$6) {
    var result = data[key];
    return result === HASH_UNDEFINED$5 ? void 0 : result;
  }
  return hasOwnProperty$k.call(data, key) ? data[key] : void 0;
}
var objectProto$o = Object.prototype;
var hasOwnProperty$j = objectProto$o.hasOwnProperty;
function hashHas$2(key) {
  var data = this.__data__;
  return nativeCreate$6 ? data[key] !== void 0 : hasOwnProperty$j.call(data, key);
}
var HASH_UNDEFINED$4 = "__lodash_hash_undefined__";
function hashSet$2(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate$6 && value === void 0 ? HASH_UNDEFINED$4 : value;
  return this;
}
function Hash$2(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash$2.prototype.clear = hashClear$2;
Hash$2.prototype["delete"] = hashDelete$2;
Hash$2.prototype.get = hashGet$2;
Hash$2.prototype.has = hashHas$2;
Hash$2.prototype.set = hashSet$2;
function mapCacheClear$2() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash$2(),
    "map": new (Map$6 || ListCache$5)(),
    "string": new Hash$2()
  };
}
function isKeyable$2(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
function getMapData$5(map, key) {
  var data = map.__data__;
  return isKeyable$2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
function mapCacheDelete$2(key) {
  var result = getMapData$5(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
function mapCacheGet$2(key) {
  return getMapData$5(this, key).get(key);
}
function mapCacheHas$2(key) {
  return getMapData$5(this, key).has(key);
}
function mapCacheSet$2(key, value) {
  var data = getMapData$5(this, key), size2 = data.size;
  data.set(key, value);
  this.size += data.size == size2 ? 0 : 1;
  return this;
}
function MapCache$4(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache$4.prototype.clear = mapCacheClear$2;
MapCache$4.prototype["delete"] = mapCacheDelete$2;
MapCache$4.prototype.get = mapCacheGet$2;
MapCache$4.prototype.has = mapCacheHas$2;
MapCache$4.prototype.set = mapCacheSet$2;
var LARGE_ARRAY_SIZE$1 = 200;
function stackSet$2(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache$5) {
    var pairs = data.__data__;
    if (!Map$6 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache$4(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}
function Stack$3(entries) {
  var data = this.__data__ = new ListCache$5(entries);
  this.size = data.size;
}
Stack$3.prototype.clear = stackClear$2;
Stack$3.prototype["delete"] = stackDelete$2;
Stack$3.prototype.get = stackGet$2;
Stack$3.prototype.has = stackHas$2;
Stack$3.prototype.set = stackSet$2;
var HASH_UNDEFINED$3 = "__lodash_hash_undefined__";
function setCacheAdd$2(value) {
  this.__data__.set(value, HASH_UNDEFINED$3);
  return this;
}
function setCacheHas$2(value) {
  return this.__data__.has(value);
}
function SetCache$2(values) {
  var index = -1, length = values == null ? 0 : values.length;
  this.__data__ = new MapCache$4();
  while (++index < length) {
    this.add(values[index]);
  }
}
SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd$2;
SetCache$2.prototype.has = setCacheHas$2;
function arraySome$2(array, predicate) {
  var index = -1, length = array == null ? 0 : array.length;
  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}
function cacheHas$2(cache, key) {
  return cache.has(key);
}
var COMPARE_PARTIAL_FLAG$b = 1, COMPARE_UNORDERED_FLAG$7 = 2;
function equalArrays$3(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$b, arrLength = array.length, othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$7 ? new SetCache$2() : void 0;
  stack.set(array, other);
  stack.set(other, array);
  while (++index < arrLength) {
    var arrValue = array[index], othValue = other[index];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== void 0) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    if (seen) {
      if (!arraySome$2(other, function(othValue2, othIndex) {
        if (!cacheHas$2(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack["delete"](array);
  stack["delete"](other);
  return result;
}
var Uint8Array$2 = root$a.Uint8Array;
var Uint8Array$3 = Uint8Array$2;
function mapToArray$2(map) {
  var index = -1, result = Array(map.size);
  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}
function setToArray$2(set) {
  var index = -1, result = Array(set.size);
  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}
var COMPARE_PARTIAL_FLAG$a = 1, COMPARE_UNORDERED_FLAG$6 = 2;
var boolTag$5 = "[object Boolean]", dateTag$5 = "[object Date]", errorTag$4 = "[object Error]", mapTag$8 = "[object Map]", numberTag$5 = "[object Number]", regexpTag$5 = "[object RegExp]", setTag$8 = "[object Set]", stringTag$5 = "[object String]", symbolTag$4 = "[object Symbol]";
var arrayBufferTag$5 = "[object ArrayBuffer]", dataViewTag$7 = "[object DataView]";
var symbolProto$4 = Symbol$7 ? Symbol$7.prototype : void 0, symbolValueOf$2 = symbolProto$4 ? symbolProto$4.valueOf : void 0;
function equalByTag$2(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag$7:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;
    case arrayBufferTag$5:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$3(object), new Uint8Array$3(other))) {
        return false;
      }
      return true;
    case boolTag$5:
    case dateTag$5:
    case numberTag$5:
      return eq$3(+object, +other);
    case errorTag$4:
      return object.name == other.name && object.message == other.message;
    case regexpTag$5:
    case stringTag$5:
      return object == other + "";
    case mapTag$8:
      var convert = mapToArray$2;
    case setTag$8:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$a;
      convert || (convert = setToArray$2);
      if (object.size != other.size && !isPartial) {
        return false;
      }
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$6;
      stack.set(object, other);
      var result = equalArrays$3(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack["delete"](object);
      return result;
    case symbolTag$4:
      if (symbolValueOf$2) {
        return symbolValueOf$2.call(object) == symbolValueOf$2.call(other);
      }
  }
  return false;
}
function arrayPush$2(array, values) {
  var index = -1, length = values.length, offset2 = array.length;
  while (++index < length) {
    array[offset2 + index] = values[index];
  }
  return array;
}
var isArray$9 = Array.isArray;
var isArray$a = isArray$9;
function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$a(object) ? result : arrayPush$2(result, symbolsFunc(object));
}
function arrayFilter$2(array, predicate) {
  var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}
function stubArray$2() {
  return [];
}
var objectProto$n = Object.prototype;
var propertyIsEnumerable$3 = objectProto$n.propertyIsEnumerable;
var nativeGetSymbols$2 = Object.getOwnPropertySymbols;
var getSymbols$2 = !nativeGetSymbols$2 ? stubArray$2 : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter$2(nativeGetSymbols$2(object), function(symbol) {
    return propertyIsEnumerable$3.call(object, symbol);
  });
};
var getSymbols$3 = getSymbols$2;
function baseTimes$2(n2, iteratee) {
  var index = -1, result = Array(n2);
  while (++index < n2) {
    result[index] = iteratee(index);
  }
  return result;
}
var argsTag$6 = "[object Arguments]";
function baseIsArguments$2(value) {
  return isObjectLike$6(value) && baseGetTag$6(value) == argsTag$6;
}
var objectProto$m = Object.prototype;
var hasOwnProperty$i = objectProto$m.hasOwnProperty;
var propertyIsEnumerable$2 = objectProto$m.propertyIsEnumerable;
var isArguments$3 = baseIsArguments$2(function() {
  return arguments;
}()) ? baseIsArguments$2 : function(value) {
  return isObjectLike$6(value) && hasOwnProperty$i.call(value, "callee") && !propertyIsEnumerable$2.call(value, "callee");
};
var isArguments$4 = isArguments$3;
function stubFalse$1() {
  return false;
}
var freeExports$2 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
var Buffer$1 = moduleExports$2 ? root$a.Buffer : void 0;
var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : void 0;
var isBuffer$3 = nativeIsBuffer || stubFalse$1;
var isBuffer$4 = isBuffer$3;
var argsTag$5 = "[object Arguments]", arrayTag$4 = "[object Array]", boolTag$4 = "[object Boolean]", dateTag$4 = "[object Date]", errorTag$3 = "[object Error]", funcTag$3 = "[object Function]", mapTag$7 = "[object Map]", numberTag$4 = "[object Number]", objectTag$7 = "[object Object]", regexpTag$4 = "[object RegExp]", setTag$7 = "[object Set]", stringTag$4 = "[object String]", weakMapTag$4 = "[object WeakMap]";
var arrayBufferTag$4 = "[object ArrayBuffer]", dataViewTag$6 = "[object DataView]", float32Tag$3 = "[object Float32Array]", float64Tag$3 = "[object Float64Array]", int8Tag$3 = "[object Int8Array]", int16Tag$3 = "[object Int16Array]", int32Tag$3 = "[object Int32Array]", uint8Tag$3 = "[object Uint8Array]", uint8ClampedTag$3 = "[object Uint8ClampedArray]", uint16Tag$3 = "[object Uint16Array]", uint32Tag$3 = "[object Uint32Array]";
var typedArrayTags$1 = {};
typedArrayTags$1[float32Tag$3] = typedArrayTags$1[float64Tag$3] = typedArrayTags$1[int8Tag$3] = typedArrayTags$1[int16Tag$3] = typedArrayTags$1[int32Tag$3] = typedArrayTags$1[uint8Tag$3] = typedArrayTags$1[uint8ClampedTag$3] = typedArrayTags$1[uint16Tag$3] = typedArrayTags$1[uint32Tag$3] = true;
typedArrayTags$1[argsTag$5] = typedArrayTags$1[arrayTag$4] = typedArrayTags$1[arrayBufferTag$4] = typedArrayTags$1[boolTag$4] = typedArrayTags$1[dataViewTag$6] = typedArrayTags$1[dateTag$4] = typedArrayTags$1[errorTag$3] = typedArrayTags$1[funcTag$3] = typedArrayTags$1[mapTag$7] = typedArrayTags$1[numberTag$4] = typedArrayTags$1[objectTag$7] = typedArrayTags$1[regexpTag$4] = typedArrayTags$1[setTag$7] = typedArrayTags$1[stringTag$4] = typedArrayTags$1[weakMapTag$4] = false;
function baseIsTypedArray$2(value) {
  return isObjectLike$6(value) && isLength$4(value.length) && !!typedArrayTags$1[baseGetTag$6(value)];
}
function baseUnary$2(func) {
  return function(value) {
    return func(value);
  };
}
var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
var freeProcess = moduleExports$1 && freeGlobal$3.process;
var nodeUtil$1 = function() {
  try {
    var types = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e) {
  }
}();
var nodeUtil$2 = nodeUtil$1;
var nodeIsTypedArray$1 = nodeUtil$2 && nodeUtil$2.isTypedArray;
var isTypedArray$3 = nodeIsTypedArray$1 ? baseUnary$2(nodeIsTypedArray$1) : baseIsTypedArray$2;
var isTypedArray$4 = isTypedArray$3;
var objectProto$l = Object.prototype;
var hasOwnProperty$h = objectProto$l.hasOwnProperty;
function arrayLikeKeys$2(value, inherited) {
  var isArr = isArray$a(value), isArg = !isArr && isArguments$4(value), isBuff = !isArr && !isArg && isBuffer$4(value), isType = !isArr && !isArg && !isBuff && isTypedArray$4(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes$2(value.length, String) : [], length = result.length;
  for (var key in value) {
    if ((inherited || hasOwnProperty$h.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex$3(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
var objectProto$k = Object.prototype;
function isPrototype$2(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$k;
  return value === proto;
}
function overArg$2(func, transform2) {
  return function(arg) {
    return func(transform2(arg));
  };
}
var nativeKeys$2 = overArg$2(Object.keys, Object);
var nativeKeys$3 = nativeKeys$2;
var objectProto$j = Object.prototype;
var hasOwnProperty$g = objectProto$j.hasOwnProperty;
function baseKeys$2(object) {
  if (!isPrototype$2(object)) {
    return nativeKeys$3(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$g.call(object, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
function keys$3(object) {
  return isArrayLike$2(object) ? arrayLikeKeys$2(object) : baseKeys$2(object);
}
function getAllKeys$2(object) {
  return baseGetAllKeys$2(object, keys$3, getSymbols$3);
}
var COMPARE_PARTIAL_FLAG$9 = 1;
var objectProto$i = Object.prototype;
var hasOwnProperty$f = objectProto$i.hasOwnProperty;
function equalObjects$2(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$9, objProps = getAllKeys$2(object), objLength = objProps.length, othProps = getAllKeys$2(other), othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$f.call(other, key))) {
      return false;
    }
  }
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key], othValue = other[key];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == "constructor");
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor, othCtor = other.constructor;
    if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack["delete"](object);
  stack["delete"](other);
  return result;
}
var DataView$2 = getNative$7(root$a, "DataView");
var DataView$3 = DataView$2;
var Promise$3 = getNative$7(root$a, "Promise");
var Promise$4 = Promise$3;
var Set$3 = getNative$7(root$a, "Set");
var Set$4 = Set$3;
var WeakMap$3 = getNative$7(root$a, "WeakMap");
var WeakMap$4 = WeakMap$3;
var mapTag$6 = "[object Map]", objectTag$6 = "[object Object]", promiseTag$1 = "[object Promise]", setTag$6 = "[object Set]", weakMapTag$3 = "[object WeakMap]";
var dataViewTag$5 = "[object DataView]";
var dataViewCtorString$1 = toSource$3(DataView$3), mapCtorString$1 = toSource$3(Map$6), promiseCtorString$1 = toSource$3(Promise$4), setCtorString$1 = toSource$3(Set$4), weakMapCtorString$1 = toSource$3(WeakMap$4);
var getTag$2 = baseGetTag$6;
if (DataView$3 && getTag$2(new DataView$3(new ArrayBuffer(1))) != dataViewTag$5 || Map$6 && getTag$2(new Map$6()) != mapTag$6 || Promise$4 && getTag$2(Promise$4.resolve()) != promiseTag$1 || Set$4 && getTag$2(new Set$4()) != setTag$6 || WeakMap$4 && getTag$2(new WeakMap$4()) != weakMapTag$3) {
  getTag$2 = function(value) {
    var result = baseGetTag$6(value), Ctor = result == objectTag$6 ? value.constructor : void 0, ctorString = Ctor ? toSource$3(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString$1:
          return dataViewTag$5;
        case mapCtorString$1:
          return mapTag$6;
        case promiseCtorString$1:
          return promiseTag$1;
        case setCtorString$1:
          return setTag$6;
        case weakMapCtorString$1:
          return weakMapTag$3;
      }
    }
    return result;
  };
}
var getTag$3 = getTag$2;
var COMPARE_PARTIAL_FLAG$8 = 1;
var argsTag$4 = "[object Arguments]", arrayTag$3 = "[object Array]", objectTag$5 = "[object Object]";
var objectProto$h = Object.prototype;
var hasOwnProperty$e = objectProto$h.hasOwnProperty;
function baseIsEqualDeep$2(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$a(object), othIsArr = isArray$a(other), objTag = objIsArr ? arrayTag$3 : getTag$3(object), othTag = othIsArr ? arrayTag$3 : getTag$3(other);
  objTag = objTag == argsTag$4 ? objectTag$5 : objTag;
  othTag = othTag == argsTag$4 ? objectTag$5 : othTag;
  var objIsObj = objTag == objectTag$5, othIsObj = othTag == objectTag$5, isSameTag = objTag == othTag;
  if (isSameTag && isBuffer$4(object)) {
    if (!isBuffer$4(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack$3());
    return objIsArr || isTypedArray$4(object) ? equalArrays$3(object, other, bitmask, customizer, equalFunc, stack) : equalByTag$2(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$8)) {
    var objIsWrapped = objIsObj && hasOwnProperty$e.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty$e.call(other, "__wrapped__");
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack$3());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack$3());
  return equalObjects$2(object, other, bitmask, customizer, equalFunc, stack);
}
function baseIsEqual$4(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike$6(value) && !isObjectLike$6(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep$2(value, other, bitmask, customizer, baseIsEqual$4, stack);
}
function isEqual$3(value, other) {
  return baseIsEqual$4(value, other);
}
function useCallbackRef() {
  return _react_17_0_2_react.exports.useState(null);
}
var toFnRef = function toFnRef2(ref) {
  return !ref || typeof ref === "function" ? ref : function(value) {
    ref.current = value;
  };
};
function mergeRefs(refA, refB) {
  var a = toFnRef(refA);
  var b = toFnRef(refB);
  return function(value) {
    if (a)
      a(value);
    if (b)
      b(value);
  };
}
function useMergedRefs(refA, refB) {
  return _react_17_0_2_react.exports.useMemo(function() {
    return mergeRefs(refA, refB);
  }, [refA, refB]);
}
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument2 = node.ownerDocument;
    return ownerDocument2 ? ownerDocument2.defaultView || window : window;
  }
  return node;
}
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
var max = Math.max;
var min = Math.min;
var round = Math.round;
function getBoundingClientRect(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  var rect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (isHTMLElement(element) && includeScale) {
    var offsetHeight = element.offsetHeight;
    var offsetWidth = element.offsetWidth;
    if (offsetWidth > 0) {
      scaleX = round(rect.width) / offsetWidth || 1;
    }
    if (offsetHeight > 0) {
      scaleY = round(rect.height) / offsetHeight || 1;
    }
  }
  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height2 = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height2) <= 1) {
    height2 = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height: height2
  };
}
function contains(parent2, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent2.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent2.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
  var isIE = navigator.userAgent.indexOf("Trident") !== -1;
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent2 = getTrueOffsetParent(element);
  while (offsetParent2 && isTableElement(offsetParent2) && getComputedStyle(offsetParent2).position === "static") {
    offsetParent2 = getTrueOffsetParent(offsetParent2);
  }
  if (offsetParent2 && (getNodeName(offsetParent2) === "html" || getNodeName(offsetParent2) === "body" && getComputedStyle(offsetParent2).position === "static")) {
    return window2;
  }
  return offsetParent2 || getContainingBlock(element) || window2;
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}
function within(min$12, value, max$12) {
  return max(min$12, min(value, max$12));
}
function withinMaxClamp(min2, value, max2) {
  var v2 = within(min2, value, max2);
  return v2 > max2 ? max2 : v2;
}
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value, keys2) {
  return keys2.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options2 = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options2.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect$1(_ref2) {
  var state = _ref2.state, options2 = _ref2.options;
  var _options$element = options2.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow$1 = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect$1,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function getVariation(placement) {
  return placement.split("-")[1];
}
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x2 = _ref.x, y2 = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x2 * dpr) / dpr || 0,
    y: round(y2 * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === "function" ? roundOffsets(offsets) : offsets, _ref3$x = _ref3.x, x2 = _ref3$x === void 0 ? 0 : _ref3$x, _ref3$y = _ref3.y, y2 = _ref3$y === void 0 ? 0 : _ref3$y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent2 = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent2 === getWindow(popper2)) {
      offsetParent2 = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent2).position !== "static" && position2 === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent2 = offsetParent2;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : offsetParent2[heightProp];
      y2 -= offsetY - popperRect.height;
      y2 *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : offsetParent2[widthProp];
      x2 -= offsetX - popperRect.width;
      x2 *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position: position2
  }, adaptive && unsetSides);
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x2 + "px, " + y2 + "px)" : "translate3d(" + x2 + "px, " + y2 + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x2 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref4) {
  var state = _ref4.state, options2 = _ref4.options;
  var _options$gpuAccelerat = options2.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options2.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options2.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles$1 = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};
var passive = {
  passive: true
};
function effect(_ref) {
  var state = _ref.state, instance = _ref.instance, options2 = _ref.options;
  var _options$scroll = options2.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options2.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect,
  data: {}
};
var hash$1 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash$1[matched];
  });
}
var hash = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash[matched];
  });
}
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height2 = html.clientHeight;
  var x2 = 0;
  var y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height2 = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x2 = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height: height2,
    x: x2 + getWindowScrollBarX(element),
    y: y2
  };
}
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height2 = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x2 = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y2 = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x2 += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height: height2,
    x: x2,
    y: y2
  };
}
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body" && (canEscapeClipping ? getComputedStyle(clippingParent).position !== "static" : true);
  });
}
function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
    }
  }
  return offsets;
}
function detectOverflow(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}
function computeAutoPlacement(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options2 = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options2.fallbackPlacements, padding = options2.padding, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, _options$flipVariatio = options2.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options2.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip$1 = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide$1 = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options2 = _ref2.options, name = _ref2.name;
  var _options$offset = options2.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x2 = _data$state$placement.x, y2 = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x2;
    state.modifiersData.popperOffsets.y += y2;
  }
  state.modifiersData[name] = data;
}
var offset$1 = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets$1 = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function preventOverflow(_ref) {
  var state = _ref.state, options2 = _ref.options, name = _ref.name;
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, padding = options2.padding, _options$tether = options2.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options2.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min$12 = offset2 + overflow[mainSide];
    var max$12 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min$12, tetherMin) : min$12, offset2, tether ? max(max$12, tetherMax) : max$12);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow$1 = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent2, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent2);
  var offsetParentIsScaled = isHTMLElement(offsetParent2) && isElementScaled(offsetParent2);
  var documentElement = getDocumentElement(offsetParent2);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent2) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent2);
    }
    if (isHTMLElement(offsetParent2)) {
      offsets = getBoundingClientRect(offsetParent2, true);
      offsets.x += offsetParent2.clientLeft;
      offsets.y += offsetParent2.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
function debounce(fn3) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn3());
        });
      });
    }
    return pending;
  };
}
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options2) {
    if (options2 === void 0) {
      options2 = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options3 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options3);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m2) {
          return m2.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn3 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn3 === "function") {
            state = fn3({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options2).then(function(state2) {
      if (!isDestroyed && options2.onFirstUpdate) {
        options2.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options3 = _ref3$options === void 0 ? {} : _ref3$options, effect3 = _ref3.effect;
        if (typeof effect3 === "function") {
          var cleanupFn = effect3({
            state,
            name,
            instance,
            options: options3
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn3) {
        return fn3();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper = popperGenerator({
  defaultModifiers: [hide$1, popperOffsets$1, computeStyles$1, eventListeners, offset$1, flip$1, preventOverflow$1, arrow$1]
});
function useMounted() {
  var mounted = _react_17_0_2_react.exports.useRef(true);
  var isMounted = _react_17_0_2_react.exports.useRef(function() {
    return mounted.current;
  });
  _react_17_0_2_react.exports.useEffect(function() {
    return function() {
      mounted.current = false;
    };
  }, []);
  return isMounted.current;
}
function useSafeState(state) {
  var isMounted = useMounted();
  return [state[0], _react_17_0_2_react.exports.useCallback(function(nextState) {
    if (!isMounted())
      return;
    return state[1](nextState);
  }, [isMounted, state[1]])];
}
var initialPopperStyles = function initialPopperStyles2(position2) {
  return {
    position: position2,
    top: "0",
    left: "0",
    opacity: "0",
    pointerEvents: "none"
  };
};
var disabledApplyStylesModifier = {
  name: "applyStyles",
  enabled: false
};
var ariaDescribedByModifier = {
  name: "ariaDescribedBy",
  enabled: true,
  phase: "afterWrite",
  effect: function effect2(_ref) {
    var state = _ref.state;
    return function() {
      var _state$elements = state.elements, reference2 = _state$elements.reference, popper2 = _state$elements.popper;
      if ("removeAttribute" in reference2) {
        var ids = (reference2.getAttribute("aria-describedby") || "").split(",").filter(function(id2) {
          return id2.trim() !== popper2.id;
        });
        if (!ids.length)
          reference2.removeAttribute("aria-describedby");
        else
          reference2.setAttribute("aria-describedby", ids.join(","));
      }
    };
  },
  fn: function fn2(_ref2) {
    var _popper$getAttribute;
    var state = _ref2.state;
    var _state$elements2 = state.elements, popper2 = _state$elements2.popper, reference2 = _state$elements2.reference;
    var role = (_popper$getAttribute = popper2.getAttribute("role")) == null ? void 0 : _popper$getAttribute.toLowerCase();
    if (popper2.id && role === "tooltip" && "setAttribute" in reference2) {
      var ids = reference2.getAttribute("aria-describedby");
      if (ids && ids.split(",").indexOf(popper2.id) !== -1) {
        return;
      }
      reference2.setAttribute("aria-describedby", ids ? ids + "," + popper2.id : popper2.id);
    }
  }
};
var EMPTY_MODIFIERS = [];
function usePopper(referenceElement, popperElement, _temp) {
  var _ref3 = _temp === void 0 ? {} : _temp, _ref3$enabled = _ref3.enabled, enabled = _ref3$enabled === void 0 ? true : _ref3$enabled, _ref3$placement = _ref3.placement, placement = _ref3$placement === void 0 ? "bottom" : _ref3$placement, _ref3$strategy = _ref3.strategy, strategy = _ref3$strategy === void 0 ? "absolute" : _ref3$strategy, _ref3$modifiers = _ref3.modifiers, modifiers = _ref3$modifiers === void 0 ? EMPTY_MODIFIERS : _ref3$modifiers, config = _objectWithoutPropertiesLoose(_ref3, ["enabled", "placement", "strategy", "modifiers"]);
  var popperInstanceRef = _react_17_0_2_react.exports.useRef();
  var update = _react_17_0_2_react.exports.useCallback(function() {
    var _popperInstanceRef$cu;
    (_popperInstanceRef$cu = popperInstanceRef.current) == null ? void 0 : _popperInstanceRef$cu.update();
  }, []);
  var forceUpdate = _react_17_0_2_react.exports.useCallback(function() {
    var _popperInstanceRef$cu2;
    (_popperInstanceRef$cu2 = popperInstanceRef.current) == null ? void 0 : _popperInstanceRef$cu2.forceUpdate();
  }, []);
  var _useSafeState = useSafeState(_react_17_0_2_react.exports.useState({
    placement,
    update,
    forceUpdate,
    attributes: {},
    styles: {
      popper: initialPopperStyles(strategy),
      arrow: {}
    }
  })), popperState = _useSafeState[0], setState = _useSafeState[1];
  var updateModifier = _react_17_0_2_react.exports.useMemo(function() {
    return {
      name: "updateStateModifier",
      enabled: true,
      phase: "write",
      requires: ["computeStyles"],
      fn: function fn3(_ref4) {
        var state = _ref4.state;
        var styles = {};
        var attributes = {};
        Object.keys(state.elements).forEach(function(element) {
          styles[element] = state.styles[element];
          attributes[element] = state.attributes[element];
        });
        setState({
          state,
          styles,
          attributes,
          update,
          forceUpdate,
          placement: state.placement
        });
      }
    };
  }, [update, forceUpdate, setState]);
  _react_17_0_2_react.exports.useEffect(function() {
    if (!popperInstanceRef.current || !enabled)
      return;
    popperInstanceRef.current.setOptions({
      placement,
      strategy,
      modifiers: [].concat(modifiers, [updateModifier, disabledApplyStylesModifier])
    });
  }, [strategy, placement, updateModifier, enabled]);
  _react_17_0_2_react.exports.useEffect(function() {
    if (!enabled || referenceElement == null || popperElement == null) {
      return void 0;
    }
    popperInstanceRef.current = createPopper(referenceElement, popperElement, _extends$1({}, config, {
      placement,
      strategy,
      modifiers: [].concat(modifiers, [ariaDescribedByModifier, updateModifier])
    }));
    return function() {
      if (popperInstanceRef.current != null) {
        popperInstanceRef.current.destroy();
        popperInstanceRef.current = void 0;
        setState(function(s) {
          return _extends$1({}, s, {
            attributes: {},
            styles: {
              popper: initialPopperStyles(strategy)
            }
          });
        });
      }
    };
  }, [enabled, referenceElement, popperElement]);
  return popperState;
}
var optionsSupported = false;
var onceSupported = false;
try {
  var options = {
    get passive() {
      return optionsSupported = true;
    },
    get once() {
      return onceSupported = optionsSupported = true;
    }
  };
  if (canUseDOM) {
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, true);
  }
} catch (e) {
}
function addEventListener$2(node, eventName, handler, options2) {
  if (options2 && typeof options2 !== "boolean" && !onceSupported) {
    var once = options2.once, capture = options2.capture;
    var wrappedHandler = handler;
    if (!onceSupported && once) {
      wrappedHandler = handler.__once || function onceHandler(event) {
        this.removeEventListener(eventName, onceHandler, capture);
        handler.call(this, event);
      };
      handler.__once = wrappedHandler;
    }
    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options2 : capture);
  }
  node.addEventListener(eventName, handler, options2);
}
function removeEventListener(node, eventName, handler, options2) {
  var capture = options2 && typeof options2 !== "boolean" ? options2.capture : options2;
  node.removeEventListener(eventName, handler, capture);
  if (handler.__once) {
    node.removeEventListener(eventName, handler.__once, capture);
  }
}
function listen(node, eventName, handler, options2) {
  addEventListener$2(node, eventName, handler, options2);
  return function() {
    removeEventListener(node, eventName, handler, options2);
  };
}
var listen$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": listen
});
function useCommittedRef(value) {
  var ref = _react_17_0_2_react.exports.useRef(value);
  _react_17_0_2_react.exports.useEffect(function() {
    ref.current = value;
  }, [value]);
  return ref;
}
function useEventCallback(fn3) {
  var ref = useCommittedRef(fn3);
  return _react_17_0_2_react.exports.useCallback(function() {
    return ref.current && ref.current.apply(ref, arguments);
  }, [ref]);
}
function safeFindDOMNode(componentOrElement) {
  if (componentOrElement && "setState" in componentOrElement) {
    return ReactDOM.findDOMNode(componentOrElement);
  }
  return componentOrElement != null ? componentOrElement : null;
}
var ownerDocument = function(componentOrElement) {
  return ownerDocument$1(safeFindDOMNode(componentOrElement));
};
var escapeKeyCode = 27;
var noop = function noop3() {
};
function isLeftClickEvent(event) {
  return event.button === 0;
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
var getRefTarget = function getRefTarget2(ref) {
  return ref && ("current" in ref ? ref.current : ref);
};
function useRootClose(ref, onRootClose, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, disabled = _ref.disabled, _ref$clickTrigger = _ref.clickTrigger, clickTrigger = _ref$clickTrigger === void 0 ? "click" : _ref$clickTrigger;
  var preventMouseRootCloseRef = _react_17_0_2_react.exports.useRef(false);
  var onClose = onRootClose || noop;
  var handleMouseCapture = _react_17_0_2_react.exports.useCallback(function(e) {
    var currentTarget = getRefTarget(ref);
    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains$1(currentTarget, e.target);
  }, [ref]);
  var handleMouse = useEventCallback(function(e) {
    if (!preventMouseRootCloseRef.current) {
      onClose(e);
    }
  });
  var handleKeyUp = useEventCallback(function(e) {
    if (e.keyCode === escapeKeyCode) {
      onClose(e);
    }
  });
  _react_17_0_2_react.exports.useEffect(function() {
    if (disabled || ref == null)
      return void 0;
    var currentEvent = window.event;
    var doc = ownerDocument(getRefTarget(ref));
    var removeMouseCaptureListener = listen(doc, clickTrigger, handleMouseCapture, true);
    var removeMouseListener = listen(doc, clickTrigger, function(e) {
      if (e === currentEvent) {
        currentEvent = void 0;
        return;
      }
      handleMouse(e);
    });
    var removeKeyupListener = listen(doc, "keyup", function(e) {
      if (e === currentEvent) {
        currentEvent = void 0;
        return;
      }
      handleKeyUp(e);
    });
    var mobileSafariHackListeners = [];
    if ("ontouchstart" in doc.documentElement) {
      mobileSafariHackListeners = [].slice.call(doc.body.children).map(function(el) {
        return listen(el, "mousemove", noop);
      });
    }
    return function() {
      removeMouseCaptureListener();
      removeMouseListener();
      removeKeyupListener();
      mobileSafariHackListeners.forEach(function(remove) {
        return remove();
      });
    };
  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);
}
var resolveContainerRef = function resolveContainerRef2(ref) {
  var _ref;
  if (typeof document === "undefined")
    return null;
  if (ref == null)
    return ownerDocument$1().body;
  if (typeof ref === "function")
    ref = ref();
  if (ref && "current" in ref)
    ref = ref.current;
  if ((_ref = ref) == null ? void 0 : _ref.nodeType)
    return ref || null;
  return null;
};
function useWaitForDOMRef(ref, onResolved) {
  var _useState = _react_17_0_2_react.exports.useState(function() {
    return resolveContainerRef(ref);
  }), resolvedRef = _useState[0], setRef = _useState[1];
  if (!resolvedRef) {
    var earlyRef = resolveContainerRef(ref);
    if (earlyRef)
      setRef(earlyRef);
  }
  _react_17_0_2_react.exports.useEffect(function() {
    if (onResolved && resolvedRef) {
      onResolved(resolvedRef);
    }
  }, [onResolved, resolvedRef]);
  _react_17_0_2_react.exports.useEffect(function() {
    var nextRef = resolveContainerRef(ref);
    if (nextRef !== resolvedRef) {
      setRef(nextRef);
    }
  }, [ref, resolvedRef]);
  return resolvedRef;
}
function toModifierMap(modifiers) {
  var result = {};
  if (!Array.isArray(modifiers)) {
    return modifiers || result;
  }
  modifiers == null ? void 0 : modifiers.forEach(function(m2) {
    result[m2.name] = m2;
  });
  return result;
}
function toModifierArray(map) {
  if (map === void 0) {
    map = {};
  }
  if (Array.isArray(map))
    return map;
  return Object.keys(map).map(function(k) {
    map[k].name = k;
    return map[k];
  });
}
function mergeOptionsWithPopperConfig(_ref) {
  var _modifiers$preventOve, _modifiers$preventOve2, _modifiers$offset, _modifiers$arrow;
  var enabled = _ref.enabled, enableEvents = _ref.enableEvents, placement = _ref.placement, flip2 = _ref.flip, offset2 = _ref.offset, containerPadding = _ref.containerPadding, arrowElement = _ref.arrowElement, _ref$popperConfig = _ref.popperConfig, popperConfig = _ref$popperConfig === void 0 ? {} : _ref$popperConfig;
  var modifiers = toModifierMap(popperConfig.modifiers);
  return _extends$1({}, popperConfig, {
    placement,
    enabled,
    modifiers: toModifierArray(_extends$1({}, modifiers, {
      eventListeners: {
        enabled: enableEvents
      },
      preventOverflow: _extends$1({}, modifiers.preventOverflow, {
        options: containerPadding ? _extends$1({
          padding: containerPadding
        }, (_modifiers$preventOve = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve.options) : (_modifiers$preventOve2 = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve2.options
      }),
      offset: {
        options: _extends$1({
          offset: offset2
        }, (_modifiers$offset = modifiers.offset) == null ? void 0 : _modifiers$offset.options)
      },
      arrow: _extends$1({}, modifiers.arrow, {
        enabled: !!arrowElement,
        options: _extends$1({}, (_modifiers$arrow = modifiers.arrow) == null ? void 0 : _modifiers$arrow.options, {
          element: arrowElement
        })
      }),
      flip: _extends$1({
        enabled: !!flip2
      }, modifiers.flip)
    }))
  });
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f = _react_17_0_2_react.exports, g = 60103;
reactJsxRuntime_production_min.Fragment = 60107;
if (typeof Symbol === "function" && Symbol.for) {
  var h = Symbol.for;
  g = h("react.element");
  reactJsxRuntime_production_min.Fragment = h("react.fragment");
}
var m = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, n = Object.prototype.hasOwnProperty, p = { key: true, ref: true, __self: true, __source: true };
function q(c, a, k) {
  var b, d = {}, e = null, l2 = null;
  k !== void 0 && (e = "" + k);
  a.key !== void 0 && (e = "" + a.key);
  a.ref !== void 0 && (l2 = a.ref);
  for (b in a)
    n.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
  if (c && c.defaultProps)
    for (b in a = c.defaultProps, a)
      d[b] === void 0 && (d[b] = a[b]);
  return { $$typeof: g, type: c, key: e, ref: l2, props: d, _owner: m.current };
}
reactJsxRuntime_production_min.jsx = q;
reactJsxRuntime_production_min.jsxs = q;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
const jsx = jsxRuntime.exports.jsx;
const jsxs = jsxRuntime.exports.jsxs;
const Fragment = jsxRuntime.exports.Fragment;
var Overlay = /* @__PURE__ */ React.forwardRef(function(props, outerRef) {
  var flip2 = props.flip, offset2 = props.offset, placement = props.placement, _props$containerPaddi = props.containerPadding, containerPadding = _props$containerPaddi === void 0 ? 5 : _props$containerPaddi, _props$popperConfig = props.popperConfig, popperConfig = _props$popperConfig === void 0 ? {} : _props$popperConfig, Transition = props.transition;
  var _useCallbackRef = useCallbackRef(), rootElement = _useCallbackRef[0], attachRef = _useCallbackRef[1];
  var _useCallbackRef2 = useCallbackRef(), arrowElement = _useCallbackRef2[0], attachArrowRef = _useCallbackRef2[1];
  var mergedRef = useMergedRefs(attachRef, outerRef);
  var container = useWaitForDOMRef(props.container);
  var target = useWaitForDOMRef(props.target);
  var _useState = _react_17_0_2_react.exports.useState(!props.show), exited = _useState[0], setExited = _useState[1];
  var _usePopper = usePopper(target, rootElement, mergeOptionsWithPopperConfig({
    placement,
    enableEvents: !!props.show,
    containerPadding: containerPadding || 5,
    flip: flip2,
    offset: offset2,
    arrowElement,
    popperConfig
  })), styles = _usePopper.styles, attributes = _usePopper.attributes, popper2 = _objectWithoutPropertiesLoose(_usePopper, ["styles", "attributes"]);
  if (props.show) {
    if (exited)
      setExited(false);
  } else if (!props.transition && !exited) {
    setExited(true);
  }
  var handleHidden = function handleHidden2() {
    setExited(true);
    if (props.onExited) {
      props.onExited.apply(props, arguments);
    }
  };
  var mountOverlay = props.show || Transition && !exited;
  useRootClose(rootElement, props.onHide, {
    disabled: !props.rootClose || props.rootCloseDisabled,
    clickTrigger: props.rootCloseEvent
  });
  if (!mountOverlay) {
    return null;
  }
  var child = props.children(_extends$1({}, popper2, {
    show: !!props.show,
    props: _extends$1({}, attributes.popper, {
      style: styles.popper,
      ref: mergedRef
    }),
    arrowProps: _extends$1({}, attributes.arrow, {
      style: styles.arrow,
      ref: attachArrowRef
    })
  }));
  if (Transition) {
    var onExit = props.onExit, onExiting = props.onExiting, onEnter = props.onEnter, onEntering = props.onEntering, onEntered = props.onEntered;
    child = /* @__PURE__ */ jsx(Transition, {
      in: props.show,
      appear: true,
      onExit,
      onExiting,
      onExited: handleHidden,
      onEnter,
      onEntering,
      onEntered,
      children: child
    });
  }
  return container ? /* @__PURE__ */ ReactDOM.createPortal(child, container) : null;
});
Overlay.displayName = "Overlay";
Overlay.propTypes = {
  show: PropTypes.bool,
  placement: PropTypes.oneOf(placements),
  target: PropTypes.any,
  container: PropTypes.any,
  flip: PropTypes.bool,
  children: PropTypes.func.isRequired,
  containerPadding: PropTypes.number,
  popperConfig: PropTypes.object,
  rootClose: PropTypes.bool,
  rootCloseEvent: PropTypes.oneOf(["click", "mousedown"]),
  rootCloseDisabled: PropTypes.bool,
  onHide: function onHide(props) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (props.rootClose) {
      var _PropTypes$func;
      return (_PropTypes$func = PropTypes.func).isRequired.apply(_PropTypes$func, [props].concat(args));
    }
    return PropTypes.func.apply(PropTypes, [props].concat(args));
  },
  transition: PropTypes.elementType,
  onEnter: PropTypes.func,
  onEntering: PropTypes.func,
  onEntered: PropTypes.func,
  onExit: PropTypes.func,
  onExiting: PropTypes.func,
  onExited: PropTypes.func
};
function height(node, client) {
  var win = isWindow(node);
  return win ? win.innerHeight : client ? node.clientHeight : offset$2(node).height;
}
var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
function qsa(element, selector) {
  return toArray(element.querySelectorAll(selector));
}
var matchesImpl;
function matches(node, selector) {
  if (!matchesImpl) {
    var body = document.body;
    var nativeMatch = body.matches || body.matchesSelector || body.webkitMatchesSelector || body.mozMatchesSelector || body.msMatchesSelector;
    matchesImpl = function matchesImpl2(n2, s) {
      return nativeMatch.call(n2, s);
    };
  }
  return matchesImpl(node, selector);
}
function closest(node, selector, stopAt) {
  if (node.closest && !stopAt)
    node.closest(selector);
  var nextNode = node;
  do {
    if (matches(nextNode, selector))
      return nextNode;
    nextNode = nextNode.parentElement;
  } while (nextNode && nextNode !== stopAt && nextNode.nodeType === document.ELEMENT_NODE);
  return null;
}
var closest$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": closest
});
function baseFindIndex$2(array, predicate, fromIndex, fromRight) {
  var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}
var COMPARE_PARTIAL_FLAG$7 = 1, COMPARE_UNORDERED_FLAG$5 = 2;
function baseIsMatch$2(object, source, matchData, customizer) {
  var index = matchData.length, length = index, noCustomizer = !customizer;
  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0], objValue = object[key], srcValue = data[1];
    if (noCustomizer && data[2]) {
      if (objValue === void 0 && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack$3();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === void 0 ? baseIsEqual$4(srcValue, objValue, COMPARE_PARTIAL_FLAG$7 | COMPARE_UNORDERED_FLAG$5, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}
function isStrictComparable$3(value) {
  return value === value && !isObject$5(value);
}
function getMatchData$2(object) {
  var result = keys$3(object), length = result.length;
  while (length--) {
    var key = result[length], value = object[key];
    result[length] = [key, value, isStrictComparable$3(value)];
  }
  return result;
}
function matchesStrictComparable$3(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
  };
}
function baseMatches$2(source) {
  var matchData = getMatchData$2(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable$3(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch$2(object, source, matchData);
  };
}
var reIsDeepProp$1 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp$1 = /^\w*$/;
function isKey$4(value, object) {
  if (isArray$a(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol$5(value)) {
    return true;
  }
  return reIsPlainProp$1.test(value) || !reIsDeepProp$1.test(value) || object != null && value in Object(object);
}
var FUNC_ERROR_TEXT$1 = "Expected a function";
function memoize$2(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize$2.Cache || MapCache$4)();
  return memoized;
}
memoize$2.Cache = MapCache$4;
var MAX_MEMOIZE_SIZE$1 = 500;
function memoizeCapped$2(func) {
  var result = memoize$2(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE$1) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var rePropName$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar$1 = /\\(\\)?/g;
var stringToPath$2 = memoizeCapped$2(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46) {
    result.push("");
  }
  string.replace(rePropName$1, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar$1, "$1") : number || match);
  });
  return result;
});
var stringToPath$3 = stringToPath$2;
function arrayMap$2(array, iteratee) {
  var index = -1, length = array == null ? 0 : array.length, result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}
var INFINITY$4 = 1 / 0;
var symbolProto$3 = Symbol$7 ? Symbol$7.prototype : void 0, symbolToString$1 = symbolProto$3 ? symbolProto$3.toString : void 0;
function baseToString$2(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray$a(value)) {
    return arrayMap$2(value, baseToString$2) + "";
  }
  if (isSymbol$5(value)) {
    return symbolToString$1 ? symbolToString$1.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$4 ? "-0" : result;
}
function toString$2(value) {
  return value == null ? "" : baseToString$2(value);
}
function castPath$3(value, object) {
  if (isArray$a(value)) {
    return value;
  }
  return isKey$4(value, object) ? [value] : stringToPath$3(toString$2(value));
}
var INFINITY$3 = 1 / 0;
function toKey$5(value) {
  if (typeof value == "string" || isSymbol$5(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$3 ? "-0" : result;
}
function baseGet$3(object, path) {
  path = castPath$3(path, object);
  var index = 0, length = path.length;
  while (object != null && index < length) {
    object = object[toKey$5(path[index++])];
  }
  return index && index == length ? object : void 0;
}
function get$2(object, path, defaultValue) {
  var result = object == null ? void 0 : baseGet$3(object, path);
  return result === void 0 ? defaultValue : result;
}
function baseHasIn$2(object, key) {
  return object != null && key in Object(object);
}
function hasPath$2(object, path, hasFunc) {
  path = castPath$3(path, object);
  var index = -1, length = path.length, result = false;
  while (++index < length) {
    var key = toKey$5(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength$4(length) && isIndex$3(key, length) && (isArray$a(object) || isArguments$4(object));
}
function hasIn$2(object, path) {
  return object != null && hasPath$2(object, path, baseHasIn$2);
}
var COMPARE_PARTIAL_FLAG$6 = 1, COMPARE_UNORDERED_FLAG$4 = 2;
function baseMatchesProperty$2(path, srcValue) {
  if (isKey$4(path) && isStrictComparable$3(srcValue)) {
    return matchesStrictComparable$3(toKey$5(path), srcValue);
  }
  return function(object) {
    var objValue = get$2(object, path);
    return objValue === void 0 && objValue === srcValue ? hasIn$2(object, path) : baseIsEqual$4(srcValue, objValue, COMPARE_PARTIAL_FLAG$6 | COMPARE_UNORDERED_FLAG$4);
  };
}
function identity$2(value) {
  return value;
}
function baseProperty$2(key) {
  return function(object) {
    return object == null ? void 0 : object[key];
  };
}
function basePropertyDeep$2(path) {
  return function(object) {
    return baseGet$3(object, path);
  };
}
function property$2(path) {
  return isKey$4(path) ? baseProperty$2(toKey$5(path)) : basePropertyDeep$2(path);
}
function baseIteratee$2(value) {
  if (typeof value == "function") {
    return value;
  }
  if (value == null) {
    return identity$2;
  }
  if (typeof value == "object") {
    return isArray$a(value) ? baseMatchesProperty$2(value[0], value[1]) : baseMatches$2(value);
  }
  return property$2(value);
}
var nativeMax$3 = Math.max;
function findIndex$1(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger$2(fromIndex);
  if (index < 0) {
    index = nativeMax$3(length + index, 0);
  }
  return baseFindIndex$2(array, baseIteratee$2(predicate), index);
}
var nativeCeil = Math.ceil, nativeMax$2 = Math.max;
function baseRange(start2, end2, step, fromRight) {
  var index = -1, length = nativeMax$2(nativeCeil((end2 - start2) / (step || 1)), 0), result = Array(length);
  while (length--) {
    result[fromRight ? length : ++index] = start2;
    start2 += step;
  }
  return result;
}
function createRange(fromRight) {
  return function(start2, end2, step) {
    if (step && typeof step != "number" && isIterateeCall(start2, end2, step)) {
      end2 = step = void 0;
    }
    start2 = toFinite$2(start2);
    if (end2 === void 0) {
      end2 = start2;
      start2 = 0;
    } else {
      end2 = toFinite$2(end2);
    }
    step = step === void 0 ? start2 < end2 ? 1 : -1 : toFinite$2(step);
    return baseRange(start2, end2, step, fromRight);
  };
}
var range$1 = createRange();
var range$1$1 = range$1;
var safeIsNaN = Number.isNaN || function ponyfill(value) {
  return typeof value === "number" && value !== value;
};
function isEqual$2(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (!isEqual$2(newInputs[i], lastInputs[i])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual3) {
  if (isEqual3 === void 0) {
    isEqual3 = areInputsEqual;
  }
  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (calledOnce && lastThis === this && isEqual3(newArgs, lastArgs)) {
      return lastResult;
    }
    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }
  return memoized;
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
var spreadableSymbol = Symbol$7 ? Symbol$7.isConcatSpreadable : void 0;
function isFlattenable(value) {
  return isArray$a(value) || isArguments$4(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1, length = array.length;
  predicate || (predicate = isFlattenable);
  result || (result = []);
  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush$2(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}
var baseFor = createBaseFor();
var baseFor$1 = baseFor;
function baseForOwn(object, iteratee) {
  return object && baseFor$1(object, iteratee, keys$3);
}
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike$2(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
    while (fromRight ? index-- : ++index < length) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}
var baseEach = createBaseEach(baseForOwn);
var baseEach$1 = baseEach;
function baseMap(collection, iteratee) {
  var index = -1, result = isArrayLike$2(collection) ? Array(collection.length) : [];
  baseEach$1(collection, function(value, key, collection2) {
    result[++index] = iteratee(value, key, collection2);
  });
  return result;
}
function baseSortBy(array, comparer) {
  var length = array.length;
  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}
function compareAscending(value, other) {
  if (value !== other) {
    var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol$5(value);
    var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol$5(other);
    if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
      return 1;
    }
    if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}
function compareMultiple(object, other, orders) {
  var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
  while (++index < length) {
    var result = compareAscending(objCriteria[index], othCriteria[index]);
    if (result) {
      if (index >= ordersLength) {
        return result;
      }
      var order2 = orders[index];
      return result * (order2 == "desc" ? -1 : 1);
    }
  }
  return object.index - other.index;
}
function baseOrderBy(collection, iteratees, orders) {
  if (iteratees.length) {
    iteratees = arrayMap$2(iteratees, function(iteratee) {
      if (isArray$a(iteratee)) {
        return function(value) {
          return baseGet$3(value, iteratee.length === 1 ? iteratee[0] : iteratee);
        };
      }
      return iteratee;
    });
  } else {
    iteratees = [identity$2];
  }
  var index = -1;
  iteratees = arrayMap$2(iteratees, baseUnary$2(baseIteratee$2));
  var result = baseMap(collection, function(value, key, collection2) {
    var criteria = arrayMap$2(iteratees, function(iteratee) {
      return iteratee(value);
    });
    return { "criteria": criteria, "index": ++index, "value": value };
  });
  return baseSortBy(result, function(object, other) {
    return compareMultiple(object, other, orders);
  });
}
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
var nativeMax$1 = Math.max;
function overRest(func, start2, transform2) {
  start2 = nativeMax$1(start2 === void 0 ? func.length - 1 : start2, 0);
  return function() {
    var args = arguments, index = -1, length = nativeMax$1(args.length - start2, 0), array = Array(length);
    while (++index < length) {
      array[index] = args[start2 + index];
    }
    index = -1;
    var otherArgs = Array(start2 + 1);
    while (++index < start2) {
      otherArgs[index] = args[index];
    }
    otherArgs[start2] = transform2(array);
    return apply(func, this, otherArgs);
  };
}
function constant(value) {
  return function() {
    return value;
  };
}
var defineProperty = function() {
  try {
    var func = getNative$7(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e) {
  }
}();
var defineProperty$1 = defineProperty;
var baseSetToString = !defineProperty$1 ? identity$2 : function(func, string) {
  return defineProperty$1(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant(string),
    "writable": true
  });
};
var baseSetToString$1 = baseSetToString;
var HOT_COUNT = 800, HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
var setToString = shortOut(baseSetToString$1);
var setToString$1 = setToString;
function baseRest(func, start2) {
  return setToString$1(overRest(func, start2, identity$2), func + "");
}
var sortBy = baseRest(function(collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
});
var sortBy$1 = sortBy;
function getWidth(node, client) {
  var win = isWindow(node);
  return win ? win.innerWidth : client ? node.clientWidth : offset$2(node).width;
}
var size;
function scrollbarSize(recalc) {
  if (!size && size !== 0 || recalc) {
    if (canUseDOM) {
      var scrollDiv = document.createElement("div");
      scrollDiv.style.position = "absolute";
      scrollDiv.style.top = "-9999px";
      scrollDiv.style.width = "50px";
      scrollDiv.style.height = "50px";
      scrollDiv.style.overflow = "scroll";
      document.body.appendChild(scrollDiv);
      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
  }
  return size;
}
function hasClass(element, className) {
  if (element.classList)
    return !!className && element.classList.contains(className);
  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}
function addClass(element, className) {
  if (element.classList)
    element.classList.add(className);
  else if (!hasClass(element, className))
    if (typeof element.className === "string")
      element.className = element.className + " " + className;
    else
      element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
}
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
  }
}
function arrayEach(array, iteratee) {
  var index = -1, length = array == null ? 0 : array.length;
  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}
function baseAssignValue(object, key, value) {
  if (key == "__proto__" && defineProperty$1) {
    defineProperty$1(object, key, {
      "configurable": true,
      "enumerable": true,
      "value": value,
      "writable": true
    });
  } else {
    object[key] = value;
  }
}
var objectProto$g = Object.prototype;
var hasOwnProperty$d = objectProto$g.hasOwnProperty;
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$d.call(object, key) && eq$3(objValue, value)) || value === void 0 && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index = -1, length = props.length;
  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}
function baseAssign(object, source) {
  return object && copyObject(source, keys$3(source), object);
}
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}
var objectProto$f = Object.prototype;
var hasOwnProperty$c = objectProto$f.hasOwnProperty;
function baseKeysIn(object) {
  if (!isObject$5(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype$2(object), result = [];
  for (var key in object) {
    if (!(key == "constructor" && (isProto || !hasOwnProperty$c.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}
function keysIn(object) {
  return isArrayLike$2(object) ? arrayLikeKeys$2(object, true) : baseKeysIn(object);
}
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer = moduleExports ? root$a.Buffer : void 0, allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}
function copyArray(source, array) {
  var index = -1, length = source.length;
  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}
function copySymbols(source, object) {
  return copyObject(source, getSymbols$3(source), object);
}
var getPrototype = overArg$2(Object.getPrototypeOf, Object);
var getPrototype$1 = getPrototype;
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
var getSymbolsIn = !nativeGetSymbols$1 ? stubArray$2 : function(object) {
  var result = [];
  while (object) {
    arrayPush$2(result, getSymbols$3(object));
    object = getPrototype$1(object);
  }
  return result;
};
var getSymbolsIn$1 = getSymbolsIn;
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn$1(source), object);
}
function getAllKeysIn(object) {
  return baseGetAllKeys$2(object, keysIn, getSymbolsIn$1);
}
var objectProto$e = Object.prototype;
var hasOwnProperty$b = objectProto$e.hasOwnProperty;
function initCloneArray(array) {
  var length = array.length, result = new array.constructor(length);
  if (length && typeof array[0] == "string" && hasOwnProperty$b.call(array, "index")) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$3(result).set(new Uint8Array$3(arrayBuffer));
  return result;
}
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var reFlags = /\w*$/;
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}
var symbolProto$2 = Symbol$7 ? Symbol$7.prototype : void 0, symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : void 0;
function cloneSymbol(symbol) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
}
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", mapTag$5 = "[object Map]", numberTag$3 = "[object Number]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", symbolTag$3 = "[object Symbol]";
var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$3:
      return cloneArrayBuffer(object);
    case boolTag$3:
    case dateTag$3:
      return new Ctor(+object);
    case dataViewTag$4:
      return cloneDataView(object, isDeep);
    case float32Tag$2:
    case float64Tag$2:
    case int8Tag$2:
    case int16Tag$2:
    case int32Tag$2:
    case uint8Tag$2:
    case uint8ClampedTag$2:
    case uint16Tag$2:
    case uint32Tag$2:
      return cloneTypedArray(object, isDeep);
    case mapTag$5:
      return new Ctor();
    case numberTag$3:
    case stringTag$3:
      return new Ctor(object);
    case regexpTag$3:
      return cloneRegExp(object);
    case setTag$5:
      return new Ctor();
    case symbolTag$3:
      return cloneSymbol(object);
  }
}
var objectCreate = Object.create;
var baseCreate = function() {
  function object() {
  }
  return function(proto) {
    if (!isObject$5(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object();
    object.prototype = void 0;
    return result;
  };
}();
var baseCreate$1 = baseCreate;
function initCloneObject(object) {
  return typeof object.constructor == "function" && !isPrototype$2(object) ? baseCreate$1(getPrototype$1(object)) : {};
}
var mapTag$4 = "[object Map]";
function baseIsMap(value) {
  return isObjectLike$6(value) && getTag$3(value) == mapTag$4;
}
var nodeIsMap = nodeUtil$2 && nodeUtil$2.isMap;
var isMap = nodeIsMap ? baseUnary$2(nodeIsMap) : baseIsMap;
var isMap$1 = isMap;
var setTag$4 = "[object Set]";
function baseIsSet(value) {
  return isObjectLike$6(value) && getTag$3(value) == setTag$4;
}
var nodeIsSet = nodeUtil$2 && nodeUtil$2.isSet;
var isSet = nodeIsSet ? baseUnary$2(nodeIsSet) : baseIsSet;
var isSet$1 = isSet;
var CLONE_DEEP_FLAG$1 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$1 = 4;
var argsTag$3 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", errorTag$2 = "[object Error]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", mapTag$3 = "[object Map]", numberTag$2 = "[object Number]", objectTag$4 = "[object Object]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$2 = "[object String]", symbolTag$2 = "[object Symbol]", weakMapTag$2 = "[object WeakMap]";
var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$3 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
var cloneableTags = {};
cloneableTags[argsTag$3] = cloneableTags[arrayTag$2] = cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] = cloneableTags[boolTag$2] = cloneableTags[dateTag$2] = cloneableTags[float32Tag$1] = cloneableTags[float64Tag$1] = cloneableTags[int8Tag$1] = cloneableTags[int16Tag$1] = cloneableTags[int32Tag$1] = cloneableTags[mapTag$3] = cloneableTags[numberTag$2] = cloneableTags[objectTag$4] = cloneableTags[regexpTag$2] = cloneableTags[setTag$3] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] = cloneableTags[uint8Tag$1] = cloneableTags[uint8ClampedTag$1] = cloneableTags[uint16Tag$1] = cloneableTags[uint32Tag$1] = true;
cloneableTags[errorTag$2] = cloneableTags[funcTag$2] = cloneableTags[weakMapTag$2] = false;
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG$1, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== void 0) {
    return result;
  }
  if (!isObject$5(value)) {
    return value;
  }
  var isArr = isArray$a(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag$3(value), isFunc = tag == funcTag$2 || tag == genTag$1;
    if (isBuffer$4(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag$4 || tag == argsTag$3 || isFunc && !object) {
      result = isFlat || isFunc ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  stack || (stack = new Stack$3());
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);
  if (isSet$1(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap$1(value)) {
    value.forEach(function(subValue, key2) {
      result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys$2 : isFlat ? keysIn : keys$3;
  var props = isArr ? void 0 : keysFunc(value);
  arrayEach(props || value, function(subValue, key2) {
    if (props) {
      key2 = subValue;
      subValue = value[key2];
    }
    assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
  });
  return result;
}
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : void 0;
}
function parent(object, path) {
  return path.length < 2 ? object : baseGet$3(object, baseSlice(path, 0, -1));
}
function baseUnset(object, path) {
  path = castPath$3(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey$5(last(path))];
}
var objectTag$3 = "[object Object]";
var funcProto$2 = Function.prototype, objectProto$d = Object.prototype;
var funcToString$2 = funcProto$2.toString;
var hasOwnProperty$a = objectProto$d.hasOwnProperty;
var objectCtorString = funcToString$2.call(Object);
function isPlainObject(value) {
  if (!isObjectLike$6(value) || baseGetTag$6(value) != objectTag$3) {
    return false;
  }
  var proto = getPrototype$1(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$a.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString$2.call(Ctor) == objectCtorString;
}
function customOmitClone(value) {
  return isPlainObject(value) ? void 0 : value;
}
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}
function flatRest(func) {
  return setToString$1(overRest(func, void 0, flatten), func + "");
}
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
var omit = flatRest(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap$2(paths, function(path) {
    path = castPath$3(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});
var omit$1 = omit;
var objectProto$c = Object.prototype;
var hasOwnProperty$9 = objectProto$c.hasOwnProperty;
var defaults = baseRest(function(object, sources) {
  object = Object(object);
  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : void 0;
  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    length = 1;
  }
  while (++index < length) {
    var source = sources[index];
    var props = keysIn(source);
    var propsIndex = -1;
    var propsLength = props.length;
    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];
      if (value === void 0 || eq$3(value, objectProto$c[key]) && !hasOwnProperty$9.call(object, key)) {
        object[key] = source[key];
      }
    }
  }
  return object;
});
var defaults$1 = defaults;
function transform(object, iteratee, accumulator) {
  var isArr = isArray$a(object), isArrLike = isArr || isBuffer$4(object) || isTypedArray$4(object);
  iteratee = baseIteratee$2(iteratee);
  if (accumulator == null) {
    var Ctor = object && object.constructor;
    if (isArrLike) {
      accumulator = isArr ? new Ctor() : [];
    } else if (isObject$5(object)) {
      accumulator = isFunction$5(Ctor) ? baseCreate$1(getPrototype$1(object)) : {};
    } else {
      accumulator = {};
    }
  }
  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
    return iteratee(accumulator, value, index, object2);
  });
  return accumulator;
}
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee$2(iteratee);
  baseForOwn(object, function(value, key, object2) {
    baseAssignValue(result, key, iteratee(value, key, object2));
  });
  return result;
}
function NoopWrapper$1(props) {
  return props.children;
}
var navigate$1 = {
  PREVIOUS: "PREV",
  NEXT: "NEXT",
  TODAY: "TODAY",
  DATE: "DATE"
};
var views$1 = {
  MONTH: "month",
  WEEK: "week",
  WORK_WEEK: "work_week",
  DAY: "day",
  AGENDA: "agenda"
};
var viewNames$1 = Object.keys(views$1).map(function(k) {
  return views$1[k];
});
PropTypes.oneOfType([PropTypes.string, PropTypes.func]);
PropTypes.any;
PropTypes.func;
PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOf(viewNames$1)), PropTypes.objectOf(function(prop, key) {
  var isBuiltinView = viewNames$1.indexOf(key) !== -1 && typeof prop[key] === "boolean";
  if (isBuiltinView) {
    return null;
  } else {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    return PropTypes.elementType.apply(PropTypes, [prop, key].concat(args));
  }
})]);
PropTypes.oneOfType([PropTypes.oneOf(["overlap", "no-overlap"]), PropTypes.func]);
function notify(handler, args) {
  handler && handler.apply(null, [].concat(args));
}
var MILLI = {
  seconds: 1e3,
  minutes: 1e3 * 60,
  hours: 1e3 * 60 * 60,
  day: 1e3 * 60 * 60 * 24
};
function firstVisibleDay(date2, localizer) {
  var firstOfMonth = startOf(date2, "month");
  return startOf(firstOfMonth, "week", localizer.startOfWeek());
}
function lastVisibleDay(date2, localizer) {
  var endOfMonth = endOf(date2, "month");
  return endOf(endOfMonth, "week", localizer.startOfWeek());
}
function visibleDays(date2, localizer) {
  var current = firstVisibleDay(date2, localizer), last2 = lastVisibleDay(date2, localizer), days = [];
  while (lte(current, last2, "day")) {
    days.push(current);
    current = add(current, 1, "day");
  }
  return days;
}
function ceil(date2, unit) {
  var floor = startOf(date2, unit);
  return eq$4(floor, date2) ? floor : add(floor, 1, unit);
}
function range(start2, end2, unit) {
  if (unit === void 0) {
    unit = "day";
  }
  var current = start2, days = [];
  while (lte(current, end2, unit)) {
    days.push(current);
    current = add(current, 1, unit);
  }
  return days;
}
function merge(date2, time) {
  if (time == null && date2 == null)
    return null;
  if (time == null)
    time = new Date();
  if (date2 == null)
    date2 = new Date();
  date2 = startOf(date2, "day");
  date2 = hours(date2, hours(time));
  date2 = minutes(date2, minutes(time));
  date2 = seconds(date2, seconds(time));
  return milliseconds(date2, milliseconds(time));
}
function isJustDate(date2) {
  return hours(date2) === 0 && minutes(date2) === 0 && seconds(date2) === 0 && milliseconds(date2) === 0;
}
function diff(dateA, dateB, unit) {
  if (!unit || unit === "milliseconds")
    return Math.abs(+dateA - +dateB);
  return Math.round(Math.abs(+startOf(dateA, unit) / MILLI[unit] - +startOf(dateB, unit) / MILLI[unit]));
}
var localePropType = PropTypes.oneOfType([PropTypes.string, PropTypes.func]);
function _format(localizer, formatter, value, format, culture) {
  var result = typeof format === "function" ? format(value, culture, localizer) : formatter.call(localizer, value, format, culture);
  !(result == null || typeof result === "string") ? browser(false) : void 0;
  return result;
}
function getSlotDate(dt, minutesFromMidnight, offset2) {
  return new Date(dt.getFullYear(), dt.getMonth(), dt.getDate(), 0, minutesFromMidnight + offset2, 0, 0);
}
function getDstOffset(start2, end2) {
  return start2.getTimezoneOffset() - end2.getTimezoneOffset();
}
function getTotalMin(start2, end2) {
  return diff(start2, end2, "minutes") + getDstOffset(start2, end2);
}
function getMinutesFromMidnight(start2) {
  var daystart = startOf(start2, "day");
  return diff(daystart, start2, "minutes") + getDstOffset(daystart, start2);
}
function continuesPrior(start2, first) {
  return lt(start2, first, "day");
}
function continuesAfter(start2, end2, last2) {
  var singleDayDuration = eq$4(start2, end2, "minutes");
  return singleDayDuration ? gte(end2, last2, "minutes") : gt(end2, last2, "minutes");
}
function sortEvents$1(_ref) {
  var _ref$evtA = _ref.evtA, aStart = _ref$evtA.start, aEnd = _ref$evtA.end, aAllDay = _ref$evtA.allDay, _ref$evtB = _ref.evtB, bStart = _ref$evtB.start, bEnd = _ref$evtB.end, bAllDay = _ref$evtB.allDay;
  var startSort = +startOf(aStart, "day") - +startOf(bStart, "day");
  var durA = diff(aStart, ceil(aEnd, "day"), "day");
  var durB = diff(bStart, ceil(bEnd, "day"), "day");
  return startSort || Math.max(durB, 1) - Math.max(durA, 1) || !!bAllDay - !!aAllDay || +aStart - +bStart || +aEnd - +bEnd;
}
function inEventRange(_ref2) {
  var _ref2$event = _ref2.event, start2 = _ref2$event.start, end2 = _ref2$event.end, _ref2$range = _ref2.range, rangeStart = _ref2$range.start, rangeEnd = _ref2$range.end;
  var eStart = startOf(start2, "day");
  var startsBeforeEnd = lte(eStart, rangeEnd, "day");
  var sameMin = neq(eStart, end2, "minutes");
  var endsAfterStart = sameMin ? gt(end2, rangeStart, "minutes") : gte(end2, rangeStart, "minutes");
  return startsBeforeEnd && endsAfterStart;
}
function isSameDate(date1, date2) {
  return eq$4(date1, date2, "day");
}
function startAndEndAreDateOnly(start2, end2) {
  return isJustDate(start2) && isJustDate(end2);
}
var DateLocalizer = function DateLocalizer2(spec) {
  var _this = this;
  !(typeof spec.format === "function") ? browser(false) : void 0;
  !(typeof spec.firstOfWeek === "function") ? browser(false) : void 0;
  this.propType = spec.propType || localePropType;
  this.formats = spec.formats;
  this.format = function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return _format.apply(void 0, [_this, spec.format].concat(args));
  };
  this.startOfWeek = spec.firstOfWeek;
  this.merge = spec.merge || merge;
  this.inRange = spec.inRange || inRange$2;
  this.lt = spec.lt || lt;
  this.lte = spec.lte || lte;
  this.gt = spec.gt || gt;
  this.gte = spec.gte || gte;
  this.eq = spec.eq || eq$4;
  this.neq = spec.neq || neq;
  this.startOf = spec.startOf || startOf;
  this.endOf = spec.endOf || endOf;
  this.add = spec.add || add;
  this.range = spec.range || range;
  this.diff = spec.diff || diff;
  this.ceil = spec.ceil || ceil;
  this.min = spec.min || min$1;
  this.max = spec.max || max$1;
  this.minutes = spec.minutes || minutes;
  this.firstVisibleDay = spec.firstVisibleDay || firstVisibleDay;
  this.lastVisibleDay = spec.lastVisibleDay || lastVisibleDay;
  this.visibleDays = spec.visibleDays || visibleDays;
  this.getSlotDate = spec.getSlotDate || getSlotDate;
  this.getTotalMin = spec.getTotalMin || getTotalMin;
  this.getMinutesFromMidnight = spec.getMinutesFromMidnight || getMinutesFromMidnight;
  this.continuesPrior = spec.continuesPrior || continuesPrior;
  this.continuesAfter = spec.continuesAfter || continuesAfter;
  this.sortEvents = spec.sortEvents || sortEvents$1;
  this.inEventRange = spec.inEventRange || inEventRange;
  this.isSameDate = spec.isSameDate || isSameDate;
  this.startAndEndAreDateOnly = spec.startAndEndAreDateOnly || startAndEndAreDateOnly;
  this.segmentOffset = spec.browserTZOffset ? spec.browserTZOffset() : 0;
};
function mergeWithDefaults(localizer, culture, formatOverrides, messages2) {
  var formats2 = _extends$1({}, localizer.formats, formatOverrides);
  return _extends$1({}, localizer, {
    messages: messages2,
    startOfWeek: function startOfWeek() {
      return localizer.startOfWeek(culture);
    },
    format: function format(value, _format2) {
      return localizer.format(value, formats2[_format2] || _format2, culture);
    }
  });
}
var defaultMessages = {
  date: "Date",
  time: "Time",
  event: "Event",
  allDay: "All Day",
  week: "Week",
  work_week: "Work Week",
  day: "Day",
  month: "Month",
  previous: "Back",
  next: "Next",
  yesterday: "Yesterday",
  tomorrow: "Tomorrow",
  today: "Today",
  agenda: "Agenda",
  noEventsInRange: "There are no events in this range.",
  showMore: function showMore(total) {
    return "+" + total + " more";
  }
};
function messages(msgs) {
  return _extends$1({}, defaultMessages, msgs);
}
var _excluded$1 = ["style", "className", "event", "selected", "isAllDay", "onSelect", "onDoubleClick", "onKeyPress", "localizer", "continuesPrior", "continuesAfter", "accessors", "getters", "children", "components", "slotStart", "slotEnd"];
var EventCell$1 = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(EventCell2, _React$Component);
  function EventCell2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = EventCell2.prototype;
  _proto.render = function render() {
    var _this$props = this.props, style2 = _this$props.style, className = _this$props.className, event = _this$props.event, selected = _this$props.selected, isAllDay = _this$props.isAllDay, onSelect = _this$props.onSelect, _onDoubleClick = _this$props.onDoubleClick, _onKeyPress = _this$props.onKeyPress, localizer = _this$props.localizer, continuesPrior2 = _this$props.continuesPrior, continuesAfter2 = _this$props.continuesAfter, accessors2 = _this$props.accessors, getters = _this$props.getters, children = _this$props.children, _this$props$component = _this$props.components, Event2 = _this$props$component.event, EventWrapper2 = _this$props$component.eventWrapper, slotStart = _this$props.slotStart, slotEnd = _this$props.slotEnd, props = _objectWithoutPropertiesLoose(_this$props, _excluded$1);
    delete props.resizable;
    var title = accessors2.title(event);
    var tooltip = accessors2.tooltip(event);
    var end2 = accessors2.end(event);
    var start2 = accessors2.start(event);
    var allDay = accessors2.allDay(event);
    var showAsAllDay = isAllDay || allDay || localizer.diff(start2, localizer.ceil(end2, "day"), "day") > 1;
    var userProps = getters.eventProp(event, start2, end2, selected);
    var content = /* @__PURE__ */ jsx("div", {
      className: "rbc-event-content",
      title: tooltip || void 0,
      children: Event2 ? /* @__PURE__ */ jsx(Event2, {
        event,
        continuesPrior: continuesPrior2,
        continuesAfter: continuesAfter2,
        title,
        isAllDay: allDay,
        localizer,
        slotStart,
        slotEnd
      }) : title
    });
    return /* @__PURE__ */ jsx(EventWrapper2, __spreadProps(__spreadValues({}, this.props), {
      type: "date",
      children: /* @__PURE__ */ jsx("div", __spreadProps(__spreadValues({}, props), {
        tabIndex: 0,
        style: _extends$1({}, userProps.style, style2),
        className: clsx("rbc-event", className, userProps.className, {
          "rbc-selected": selected,
          "rbc-event-allday": showAsAllDay,
          "rbc-event-continues-prior": continuesPrior2,
          "rbc-event-continues-after": continuesAfter2
        }),
        onClick: function onClick(e) {
          return onSelect && onSelect(event, e);
        },
        onDoubleClick: function onDoubleClick(e) {
          return _onDoubleClick && _onDoubleClick(event, e);
        },
        onKeyPress: function onKeyPress(e) {
          return _onKeyPress && _onKeyPress(event, e);
        },
        children: typeof children === "function" ? children(content) : content
      }))
    }));
  };
  return EventCell2;
}(React.Component);
EventCell$1.propTypes = {};
function isSelected$1(event, selected) {
  if (!event || selected == null)
    return false;
  return isEqual$3(event, selected);
}
function slotWidth$1(rowBox, slots) {
  var rowWidth = rowBox.right - rowBox.left;
  var cellWidth = rowWidth / slots;
  return cellWidth;
}
function getSlotAtX$1(rowBox, x2, rtl, slots) {
  var cellWidth = slotWidth$1(rowBox, slots);
  return rtl ? slots - 1 - Math.floor((x2 - rowBox.left) / cellWidth) : Math.floor((x2 - rowBox.left) / cellWidth);
}
function pointInBox$1(box, _ref) {
  var x2 = _ref.x, y2 = _ref.y;
  return y2 >= box.top && y2 <= box.bottom && x2 >= box.left && x2 <= box.right;
}
function dateCellSelection$1(start2, rowBox, box, slots, rtl) {
  var startIdx = -1;
  var endIdx = -1;
  var lastSlotIdx = slots - 1;
  var cellWidth = slotWidth$1(rowBox, slots);
  var currentSlot = getSlotAtX$1(rowBox, box.x, rtl, slots);
  var isCurrentRow = rowBox.top < box.y && rowBox.bottom > box.y;
  var isStartRow = rowBox.top < start2.y && rowBox.bottom > start2.y;
  var isAboveStart = start2.y > rowBox.bottom;
  var isBelowStart = rowBox.top > start2.y;
  var isBetween = box.top < rowBox.top && box.bottom > rowBox.bottom;
  if (isBetween) {
    startIdx = 0;
    endIdx = lastSlotIdx;
  }
  if (isCurrentRow) {
    if (isBelowStart) {
      startIdx = 0;
      endIdx = currentSlot;
    } else if (isAboveStart) {
      startIdx = currentSlot;
      endIdx = lastSlotIdx;
    }
  }
  if (isStartRow) {
    startIdx = endIdx = rtl ? lastSlotIdx - Math.floor((start2.x - rowBox.left) / cellWidth) : Math.floor((start2.x - rowBox.left) / cellWidth);
    if (isCurrentRow) {
      if (currentSlot < startIdx)
        startIdx = currentSlot;
      else
        endIdx = currentSlot;
    } else if (start2.y < box.y) {
      endIdx = lastSlotIdx;
    } else {
      startIdx = 0;
    }
  }
  return {
    startIdx,
    endIdx
  };
}
var Popup = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Popup2, _React$Component);
  function Popup2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = Popup2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    var _this$props = this.props, _this$props$popupOffs = _this$props.popupOffset, popupOffset = _this$props$popupOffs === void 0 ? 5 : _this$props$popupOffs, popperRef = _this$props.popperRef, _getOffset = offset$2(popperRef.current), top2 = _getOffset.top, left2 = _getOffset.left, width = _getOffset.width, height2 = _getOffset.height, viewBottom = window.innerHeight + getScrollTop(window), viewRight = window.innerWidth + getScrollLeft(window), bottom2 = top2 + height2, right2 = left2 + width;
    if (bottom2 > viewBottom || right2 > viewRight) {
      var topOffset, leftOffset;
      if (bottom2 > viewBottom)
        topOffset = bottom2 - viewBottom + (popupOffset.y || +popupOffset || 0);
      if (right2 > viewRight)
        leftOffset = right2 - viewRight + (popupOffset.x || +popupOffset || 0);
      this.setState({
        topOffset,
        leftOffset
      });
    }
  };
  _proto.render = function render() {
    var _this = this;
    var _this$props2 = this.props, events = _this$props2.events, selected = _this$props2.selected, getters = _this$props2.getters, accessors2 = _this$props2.accessors, components = _this$props2.components, onSelect = _this$props2.onSelect, onDoubleClick = _this$props2.onDoubleClick, onKeyPress = _this$props2.onKeyPress, slotStart = _this$props2.slotStart, slotEnd = _this$props2.slotEnd, localizer = _this$props2.localizer, popperRef = _this$props2.popperRef;
    var width = this.props.position.width, topOffset = (this.state || {}).topOffset || 0, leftOffset = (this.state || {}).leftOffset || 0;
    var style2 = {
      top: -topOffset,
      left: -leftOffset,
      minWidth: width + width / 2
    };
    return /* @__PURE__ */ jsxs("div", {
      style: _extends$1({}, this.props.style, style2),
      className: "rbc-overlay",
      ref: popperRef,
      children: [/* @__PURE__ */ jsx("div", {
        className: "rbc-overlay-header",
        children: localizer.format(slotStart, "dayHeaderFormat")
      }), events.map(function(event, idx) {
        return /* @__PURE__ */ jsx(EventCell$1, {
          type: "popup",
          localizer,
          event,
          getters,
          onSelect,
          accessors: accessors2,
          components,
          onDoubleClick,
          onKeyPress,
          continuesPrior: localizer.lt(accessors2.end(event), slotStart, "day"),
          continuesAfter: localizer.gte(accessors2.start(event), slotEnd, "day"),
          slotStart,
          slotEnd,
          selected: isSelected$1(event, selected),
          draggable: true,
          onDragStart: function onDragStart() {
            return _this.props.handleDragStart(event);
          },
          onDragEnd: function onDragEnd() {
            return _this.props.show();
          }
        }, idx);
      })]
    });
  };
  return Popup2;
}(React.Component);
Popup.propTypes = {};
var Popup$1 = /* @__PURE__ */ React.forwardRef(function(props, ref) {
  return /* @__PURE__ */ jsx(Popup, __spreadValues({
    popperRef: ref
  }, props));
});
function addEventListener$1(type, handler, target) {
  if (target === void 0) {
    target = document;
  }
  return listen(target, type, handler, {
    passive: false
  });
}
function isOverContainer$1(container, x2, y2) {
  return !container || contains$1(container, document.elementFromPoint(x2, y2));
}
function getEventNodeFromPoint$1(node, _ref) {
  var clientX = _ref.clientX, clientY = _ref.clientY;
  var target = document.elementFromPoint(clientX, clientY);
  return closest(target, ".rbc-event", node);
}
function isEvent$1(node, bounds) {
  return !!getEventNodeFromPoint$1(node, bounds);
}
function getEventCoordinates$1(e) {
  var target = e;
  if (e.touches && e.touches.length) {
    target = e.touches[0];
  }
  return {
    clientX: target.clientX,
    clientY: target.clientY,
    pageX: target.pageX,
    pageY: target.pageY
  };
}
var clickTolerance$1 = 5;
var clickInterval$1 = 250;
var Selection$2 = /* @__PURE__ */ function() {
  function Selection2(node, _temp) {
    var _ref2 = _temp === void 0 ? {} : _temp, _ref2$global = _ref2.global, global2 = _ref2$global === void 0 ? false : _ref2$global, _ref2$longPressThresh = _ref2.longPressThreshold, longPressThreshold = _ref2$longPressThresh === void 0 ? 250 : _ref2$longPressThresh;
    this.isDetached = false;
    this.container = node;
    this.globalMouse = !node || global2;
    this.longPressThreshold = longPressThreshold;
    this._listeners = Object.create(null);
    this._handleInitialEvent = this._handleInitialEvent.bind(this);
    this._handleMoveEvent = this._handleMoveEvent.bind(this);
    this._handleTerminatingEvent = this._handleTerminatingEvent.bind(this);
    this._keyListener = this._keyListener.bind(this);
    this._dropFromOutsideListener = this._dropFromOutsideListener.bind(this);
    this._dragOverFromOutsideListener = this._dragOverFromOutsideListener.bind(this);
    this._removeTouchMoveWindowListener = addEventListener$1("touchmove", function() {
    }, window);
    this._removeKeyDownListener = addEventListener$1("keydown", this._keyListener);
    this._removeKeyUpListener = addEventListener$1("keyup", this._keyListener);
    this._removeDropFromOutsideListener = addEventListener$1("drop", this._dropFromOutsideListener);
    this._removeDragOverFromOutsideListener = addEventListener$1("dragover", this._dragOverFromOutsideListener);
    this._addInitialEventListener();
  }
  var _proto = Selection2.prototype;
  _proto.on = function on(type, handler) {
    var handlers = this._listeners[type] || (this._listeners[type] = []);
    handlers.push(handler);
    return {
      remove: function remove() {
        var idx = handlers.indexOf(handler);
        if (idx !== -1)
          handlers.splice(idx, 1);
      }
    };
  };
  _proto.emit = function emit(type) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var result;
    var handlers = this._listeners[type] || [];
    handlers.forEach(function(fn3) {
      if (result === void 0)
        result = fn3.apply(void 0, args);
    });
    return result;
  };
  _proto.teardown = function teardown() {
    this.isDetached = true;
    this._listeners = Object.create(null);
    this._removeTouchMoveWindowListener && this._removeTouchMoveWindowListener();
    this._removeInitialEventListener && this._removeInitialEventListener();
    this._removeEndListener && this._removeEndListener();
    this._onEscListener && this._onEscListener();
    this._removeMoveListener && this._removeMoveListener();
    this._removeKeyUpListener && this._removeKeyUpListener();
    this._removeKeyDownListener && this._removeKeyDownListener();
    this._removeDropFromOutsideListener && this._removeDropFromOutsideListener();
    this._removeDragOverFromOutsideListener && this._removeDragOverFromOutsideListener();
  };
  _proto.isSelected = function isSelected2(node) {
    var box = this._selectRect;
    if (!box || !this.selecting)
      return false;
    return objectsCollide$1(box, getBoundsForNode$1(node));
  };
  _proto.filter = function filter(items) {
    var box = this._selectRect;
    if (!box || !this.selecting)
      return [];
    return items.filter(this.isSelected, this);
  };
  _proto._addLongPressListener = function _addLongPressListener(handler, initialEvent) {
    var _this = this;
    var timer = null;
    var removeTouchMoveListener = null;
    var removeTouchEndListener = null;
    var handleTouchStart = function handleTouchStart2(initialEvent2) {
      timer = setTimeout(function() {
        cleanup();
        handler(initialEvent2);
      }, _this.longPressThreshold);
      removeTouchMoveListener = addEventListener$1("touchmove", function() {
        return cleanup();
      });
      removeTouchEndListener = addEventListener$1("touchend", function() {
        return cleanup();
      });
    };
    var removeTouchStartListener = addEventListener$1("touchstart", handleTouchStart);
    var cleanup = function cleanup2() {
      if (timer) {
        clearTimeout(timer);
      }
      if (removeTouchMoveListener) {
        removeTouchMoveListener();
      }
      if (removeTouchEndListener) {
        removeTouchEndListener();
      }
      timer = null;
      removeTouchMoveListener = null;
      removeTouchEndListener = null;
    };
    if (initialEvent) {
      handleTouchStart(initialEvent);
    }
    return function() {
      cleanup();
      removeTouchStartListener();
    };
  };
  _proto._addInitialEventListener = function _addInitialEventListener() {
    var _this2 = this;
    var removeMouseDownListener = addEventListener$1("mousedown", function(e) {
      _this2._removeInitialEventListener();
      _this2._handleInitialEvent(e);
      _this2._removeInitialEventListener = addEventListener$1("mousedown", _this2._handleInitialEvent);
    });
    var removeTouchStartListener = addEventListener$1("touchstart", function(e) {
      _this2._removeInitialEventListener();
      _this2._removeInitialEventListener = _this2._addLongPressListener(_this2._handleInitialEvent, e);
    });
    this._removeInitialEventListener = function() {
      removeMouseDownListener();
      removeTouchStartListener();
    };
  };
  _proto._dropFromOutsideListener = function _dropFromOutsideListener(e) {
    var _getEventCoordinates = getEventCoordinates$1(e), pageX = _getEventCoordinates.pageX, pageY = _getEventCoordinates.pageY, clientX = _getEventCoordinates.clientX, clientY = _getEventCoordinates.clientY;
    this.emit("dropFromOutside", {
      x: pageX,
      y: pageY,
      clientX,
      clientY
    });
    e.preventDefault();
  };
  _proto._dragOverFromOutsideListener = function _dragOverFromOutsideListener(e) {
    var _getEventCoordinates2 = getEventCoordinates$1(e), pageX = _getEventCoordinates2.pageX, pageY = _getEventCoordinates2.pageY, clientX = _getEventCoordinates2.clientX, clientY = _getEventCoordinates2.clientY;
    this.emit("dragOverFromOutside", {
      x: pageX,
      y: pageY,
      clientX,
      clientY
    });
    e.preventDefault();
  };
  _proto._handleInitialEvent = function _handleInitialEvent(e) {
    if (this.isDetached) {
      return;
    }
    var _getEventCoordinates3 = getEventCoordinates$1(e), clientX = _getEventCoordinates3.clientX, clientY = _getEventCoordinates3.clientY, pageX = _getEventCoordinates3.pageX, pageY = _getEventCoordinates3.pageY;
    var node = this.container(), collides, offsetData;
    if (e.which === 3 || e.button === 2 || !isOverContainer$1(node, clientX, clientY))
      return;
    if (!this.globalMouse && node && !contains$1(node, e.target)) {
      var _normalizeDistance = normalizeDistance$1(0), top2 = _normalizeDistance.top, left2 = _normalizeDistance.left, bottom2 = _normalizeDistance.bottom, right2 = _normalizeDistance.right;
      offsetData = getBoundsForNode$1(node);
      collides = objectsCollide$1({
        top: offsetData.top - top2,
        left: offsetData.left - left2,
        bottom: offsetData.bottom + bottom2,
        right: offsetData.right + right2
      }, {
        top: pageY,
        left: pageX
      });
      if (!collides)
        return;
    }
    var result = this.emit("beforeSelect", this._initialEventData = {
      isTouch: /^touch/.test(e.type),
      x: pageX,
      y: pageY,
      clientX,
      clientY
    });
    if (result === false)
      return;
    switch (e.type) {
      case "mousedown":
        this._removeEndListener = addEventListener$1("mouseup", this._handleTerminatingEvent);
        this._onEscListener = addEventListener$1("keydown", this._handleTerminatingEvent);
        this._removeMoveListener = addEventListener$1("mousemove", this._handleMoveEvent);
        break;
      case "touchstart":
        this._handleMoveEvent(e);
        this._removeEndListener = addEventListener$1("touchend", this._handleTerminatingEvent);
        this._removeMoveListener = addEventListener$1("touchmove", this._handleMoveEvent);
        break;
    }
  };
  _proto._handleTerminatingEvent = function _handleTerminatingEvent(e) {
    var _getEventCoordinates4 = getEventCoordinates$1(e), pageX = _getEventCoordinates4.pageX, pageY = _getEventCoordinates4.pageY;
    this.selecting = false;
    this._removeEndListener && this._removeEndListener();
    this._removeMoveListener && this._removeMoveListener();
    if (!this._initialEventData)
      return;
    var inRoot = !this.container || contains$1(this.container(), e.target);
    var bounds = this._selectRect;
    var click = this.isClick(pageX, pageY);
    this._initialEventData = null;
    if (e.key === "Escape") {
      return this.emit("reset");
    }
    if (!inRoot) {
      return this.emit("reset");
    }
    if (click && inRoot) {
      return this._handleClickEvent(e);
    }
    if (!click)
      return this.emit("select", bounds);
  };
  _proto._handleClickEvent = function _handleClickEvent(e) {
    var _getEventCoordinates5 = getEventCoordinates$1(e), pageX = _getEventCoordinates5.pageX, pageY = _getEventCoordinates5.pageY, clientX = _getEventCoordinates5.clientX, clientY = _getEventCoordinates5.clientY;
    var now = new Date().getTime();
    if (this._lastClickData && now - this._lastClickData.timestamp < clickInterval$1) {
      this._lastClickData = null;
      return this.emit("doubleClick", {
        x: pageX,
        y: pageY,
        clientX,
        clientY
      });
    }
    this._lastClickData = {
      timestamp: now
    };
    return this.emit("click", {
      x: pageX,
      y: pageY,
      clientX,
      clientY
    });
  };
  _proto._handleMoveEvent = function _handleMoveEvent(e) {
    if (this._initialEventData === null || this.isDetached) {
      return;
    }
    var _this$_initialEventDa = this._initialEventData, x2 = _this$_initialEventDa.x, y2 = _this$_initialEventDa.y;
    var _getEventCoordinates6 = getEventCoordinates$1(e), pageX = _getEventCoordinates6.pageX, pageY = _getEventCoordinates6.pageY;
    var w2 = Math.abs(x2 - pageX);
    var h2 = Math.abs(y2 - pageY);
    var left2 = Math.min(pageX, x2), top2 = Math.min(pageY, y2), old = this.selecting;
    if (this.isClick(pageX, pageY) && !old && !(w2 || h2)) {
      return;
    }
    this.selecting = true;
    this._selectRect = {
      top: top2,
      left: left2,
      x: pageX,
      y: pageY,
      right: left2 + w2,
      bottom: top2 + h2
    };
    if (!old) {
      this.emit("selectStart", this._initialEventData);
    }
    if (!this.isClick(pageX, pageY))
      this.emit("selecting", this._selectRect);
    e.preventDefault();
  };
  _proto._keyListener = function _keyListener(e) {
    this.ctrl = e.metaKey || e.ctrlKey;
  };
  _proto.isClick = function isClick(pageX, pageY) {
    var _this$_initialEventDa2 = this._initialEventData, x2 = _this$_initialEventDa2.x, y2 = _this$_initialEventDa2.y, isTouch = _this$_initialEventDa2.isTouch;
    return !isTouch && Math.abs(pageX - x2) <= clickTolerance$1 && Math.abs(pageY - y2) <= clickTolerance$1;
  };
  return Selection2;
}();
function normalizeDistance$1(distance) {
  if (distance === void 0) {
    distance = 0;
  }
  if (typeof distance !== "object")
    distance = {
      top: distance,
      left: distance,
      right: distance,
      bottom: distance
    };
  return distance;
}
function objectsCollide$1(nodeA, nodeB, tolerance) {
  if (tolerance === void 0) {
    tolerance = 0;
  }
  var _getBoundsForNode = getBoundsForNode$1(nodeA), aTop = _getBoundsForNode.top, aLeft = _getBoundsForNode.left, _getBoundsForNode$rig = _getBoundsForNode.right, aRight = _getBoundsForNode$rig === void 0 ? aLeft : _getBoundsForNode$rig, _getBoundsForNode$bot = _getBoundsForNode.bottom, aBottom = _getBoundsForNode$bot === void 0 ? aTop : _getBoundsForNode$bot;
  var _getBoundsForNode2 = getBoundsForNode$1(nodeB), bTop = _getBoundsForNode2.top, bLeft = _getBoundsForNode2.left, _getBoundsForNode2$ri = _getBoundsForNode2.right, bRight = _getBoundsForNode2$ri === void 0 ? bLeft : _getBoundsForNode2$ri, _getBoundsForNode2$bo = _getBoundsForNode2.bottom, bBottom = _getBoundsForNode2$bo === void 0 ? bTop : _getBoundsForNode2$bo;
  return !(aBottom - tolerance < bTop || aTop + tolerance > bBottom || aRight - tolerance < bLeft || aLeft + tolerance > bRight);
}
function getBoundsForNode$1(node) {
  if (!node.getBoundingClientRect)
    return node;
  var rect = node.getBoundingClientRect(), left2 = rect.left + pageOffset$1("left"), top2 = rect.top + pageOffset$1("top");
  return {
    top: top2,
    left: left2,
    right: (node.offsetWidth || 0) + left2,
    bottom: (node.offsetHeight || 0) + top2
  };
}
function pageOffset$1(dir) {
  if (dir === "left")
    return window.pageXOffset || document.body.scrollLeft || 0;
  if (dir === "top")
    return window.pageYOffset || document.body.scrollTop || 0;
}
var BackgroundCells = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(BackgroundCells2, _React$Component);
  function BackgroundCells2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    _this.state = {
      selecting: false
    };
    return _this;
  }
  var _proto = BackgroundCells2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.props.selectable && this._selectable();
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this._teardownSelectable();
  };
  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.selectable && !this.props.selectable)
      this._selectable();
    if (!nextProps.selectable && this.props.selectable)
      this._teardownSelectable();
  };
  _proto.render = function render() {
    var _this$props = this.props, range2 = _this$props.range, getNow2 = _this$props.getNow, getters = _this$props.getters, currentDate = _this$props.date, Wrapper = _this$props.components.dateCellWrapper, localizer = _this$props.localizer;
    var _this$state = this.state, selecting = _this$state.selecting, startIdx = _this$state.startIdx, endIdx = _this$state.endIdx;
    var current = getNow2();
    return /* @__PURE__ */ jsx("div", {
      className: "rbc-row-bg",
      children: range2.map(function(date2, index) {
        var selected = selecting && index >= startIdx && index <= endIdx;
        var _getters$dayProp = getters.dayProp(date2), className = _getters$dayProp.className, style2 = _getters$dayProp.style;
        return /* @__PURE__ */ jsx(Wrapper, {
          value: date2,
          range: range2,
          children: /* @__PURE__ */ jsx("div", {
            style: style2,
            className: clsx("rbc-day-bg", className, selected && "rbc-selected-cell", localizer.isSameDate(date2, current) && "rbc-today", currentDate && localizer.neq(currentDate, date2, "month") && "rbc-off-range-bg")
          })
        }, index);
      })
    });
  };
  _proto._selectable = function _selectable() {
    var _this2 = this;
    var node = _reactDom_17_0_2_reactDom.exports.findDOMNode(this);
    var selector = this._selector = new Selection$2(this.props.container, {
      longPressThreshold: this.props.longPressThreshold
    });
    var selectorClicksHandler = function selectorClicksHandler2(point, actionType) {
      if (!isEvent$1(_reactDom_17_0_2_reactDom.exports.findDOMNode(_this2), point)) {
        var rowBox = getBoundsForNode$1(node);
        var _this2$props = _this2.props, range2 = _this2$props.range, rtl = _this2$props.rtl;
        if (pointInBox$1(rowBox, point)) {
          var currentCell = getSlotAtX$1(rowBox, point.x, rtl, range2.length);
          _this2._selectSlot({
            startIdx: currentCell,
            endIdx: currentCell,
            action: actionType,
            box: point
          });
        }
      }
      _this2._initial = {};
      _this2.setState({
        selecting: false
      });
    };
    selector.on("selecting", function(box) {
      var _this2$props2 = _this2.props, range2 = _this2$props2.range, rtl = _this2$props2.rtl;
      var startIdx = -1;
      var endIdx = -1;
      if (!_this2.state.selecting) {
        notify(_this2.props.onSelectStart, [box]);
        _this2._initial = {
          x: box.x,
          y: box.y
        };
      }
      if (selector.isSelected(node)) {
        var nodeBox = getBoundsForNode$1(node);
        var _dateCellSelection = dateCellSelection$1(_this2._initial, nodeBox, box, range2.length, rtl);
        startIdx = _dateCellSelection.startIdx;
        endIdx = _dateCellSelection.endIdx;
      }
      _this2.setState({
        selecting: true,
        startIdx,
        endIdx
      });
    });
    selector.on("beforeSelect", function(box) {
      if (_this2.props.selectable !== "ignoreEvents")
        return;
      return !isEvent$1(_reactDom_17_0_2_reactDom.exports.findDOMNode(_this2), box);
    });
    selector.on("click", function(point) {
      return selectorClicksHandler(point, "click");
    });
    selector.on("doubleClick", function(point) {
      return selectorClicksHandler(point, "doubleClick");
    });
    selector.on("select", function(bounds) {
      _this2._selectSlot(_extends$1({}, _this2.state, {
        action: "select",
        bounds
      }));
      _this2._initial = {};
      _this2.setState({
        selecting: false
      });
      notify(_this2.props.onSelectEnd, [_this2.state]);
    });
  };
  _proto._teardownSelectable = function _teardownSelectable() {
    if (!this._selector)
      return;
    this._selector.teardown();
    this._selector = null;
  };
  _proto._selectSlot = function _selectSlot(_ref) {
    var endIdx = _ref.endIdx, startIdx = _ref.startIdx, action = _ref.action, bounds = _ref.bounds, box = _ref.box;
    if (endIdx !== -1 && startIdx !== -1)
      this.props.onSelectSlot && this.props.onSelectSlot({
        start: startIdx,
        end: endIdx,
        action,
        bounds,
        box,
        resourceId: this.props.resourceId
      });
  };
  return BackgroundCells2;
}(React.Component);
BackgroundCells.propTypes = {};
var EventRowMixin$1 = {
  propTypes: {
    slotMetrics: PropTypes.object.isRequired,
    selected: PropTypes.object,
    isAllDay: PropTypes.bool,
    accessors: PropTypes.object.isRequired,
    localizer: PropTypes.object.isRequired,
    components: PropTypes.object.isRequired,
    getters: PropTypes.object.isRequired,
    onSelect: PropTypes.func,
    onDoubleClick: PropTypes.func,
    onKeyPress: PropTypes.func
  },
  defaultProps: {
    segments: [],
    selected: {}
  },
  renderEvent: function renderEvent(props, event) {
    var selected = props.selected;
    props.isAllDay;
    var accessors2 = props.accessors, getters = props.getters, onSelect = props.onSelect, onDoubleClick = props.onDoubleClick, onKeyPress = props.onKeyPress, localizer = props.localizer, slotMetrics = props.slotMetrics, components = props.components, resizable = props.resizable;
    var continuesPrior2 = slotMetrics.continuesPrior(event);
    var continuesAfter2 = slotMetrics.continuesAfter(event);
    return /* @__PURE__ */ jsx(EventCell$1, {
      event,
      getters,
      localizer,
      accessors: accessors2,
      components,
      onSelect,
      onDoubleClick,
      onKeyPress,
      continuesPrior: continuesPrior2,
      continuesAfter: continuesAfter2,
      slotStart: slotMetrics.first,
      slotEnd: slotMetrics.last,
      selected: isSelected$1(event, selected),
      resizable
    });
  },
  renderSpan: function renderSpan(slots, len, key, content) {
    if (content === void 0) {
      content = " ";
    }
    var per = Math.abs(len) / slots * 100 + "%";
    return /* @__PURE__ */ jsx("div", {
      className: "rbc-row-segment",
      style: {
        WebkitFlexBasis: per,
        flexBasis: per,
        maxWidth: per
      },
      children: content
    }, key);
  }
};
var EventRow$1 = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(EventRow2, _React$Component);
  function EventRow2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = EventRow2.prototype;
  _proto.render = function render() {
    var _this = this;
    var _this$props = this.props, segments = _this$props.segments, slots = _this$props.slotMetrics.slots, className = _this$props.className;
    var lastEnd = 1;
    return /* @__PURE__ */ jsx("div", {
      className: clsx(className, "rbc-row"),
      children: segments.reduce(function(row, _ref, li2) {
        var event = _ref.event, left2 = _ref.left, right2 = _ref.right, span = _ref.span;
        var key = "_lvl_" + li2;
        var gap = left2 - lastEnd;
        var content = EventRowMixin$1.renderEvent(_this.props, event);
        if (gap)
          row.push(EventRowMixin$1.renderSpan(slots, gap, key + "_gap"));
        row.push(EventRowMixin$1.renderSpan(slots, span, key, content));
        lastEnd = right2 + 1;
        return row;
      }, [])
    });
  };
  return EventRow2;
}(React.Component);
EventRow$1.propTypes = {};
EventRow$1.defaultProps = _extends$1({}, EventRowMixin$1.defaultProps);
function endOfRange$1(_ref) {
  var dateRange = _ref.dateRange, _ref$unit = _ref.unit, unit = _ref$unit === void 0 ? "day" : _ref$unit, localizer = _ref.localizer;
  return {
    first: dateRange[0],
    last: localizer.add(dateRange[dateRange.length - 1], 1, unit)
  };
}
function eventSegments$1(event, range2, accessors2, localizer) {
  var _endOfRange = endOfRange$1({
    dateRange: range2,
    localizer
  }), first = _endOfRange.first, last2 = _endOfRange.last;
  var slots = localizer.diff(first, last2, "day");
  var start2 = localizer.max(localizer.startOf(accessors2.start(event), "day"), first);
  var end2 = localizer.min(localizer.ceil(accessors2.end(event), "day"), last2);
  var padding = findIndex$1(range2, function(x2) {
    return localizer.isSameDate(x2, start2);
  });
  var span = localizer.diff(start2, end2, "day");
  span = Math.min(span, slots);
  span = Math.max(span - localizer.segmentOffset, 1);
  return {
    event,
    span,
    left: padding + 1,
    right: Math.max(padding + span, 1)
  };
}
function eventLevels$2(rowSegments, limit) {
  if (limit === void 0) {
    limit = Infinity;
  }
  var i, j, seg, levels = [], extra = [];
  for (i = 0; i < rowSegments.length; i++) {
    seg = rowSegments[i];
    for (j = 0; j < levels.length; j++) {
      if (!segsOverlap$1(seg, levels[j]))
        break;
    }
    if (j >= limit) {
      extra.push(seg);
    } else {
      (levels[j] || (levels[j] = [])).push(seg);
    }
  }
  for (i = 0; i < levels.length; i++) {
    levels[i].sort(function(a, b) {
      return a.left - b.left;
    });
  }
  return {
    levels,
    extra
  };
}
function inRange$1(e, start2, end2, accessors2, localizer) {
  var event = {
    start: accessors2.start(e),
    end: accessors2.end(e)
  };
  var range2 = {
    start: start2,
    end: end2
  };
  return localizer.inEventRange({
    event,
    range: range2
  });
}
function segsOverlap$1(seg, otherSegs) {
  return otherSegs.some(function(otherSeg) {
    return otherSeg.left <= seg.right && otherSeg.right >= seg.left;
  });
}
function sortEvents$1$1(eventA, eventB, accessors2, localizer) {
  var evtA = {
    start: accessors2.start(eventA),
    end: accessors2.end(eventA),
    allDay: accessors2.allDay(eventA)
  };
  var evtB = {
    start: accessors2.start(eventB),
    end: accessors2.end(eventB),
    allDay: accessors2.allDay(eventB)
  };
  return localizer.sortEvents({
    evtA,
    evtB
  });
}
var isSegmentInSlot = function isSegmentInSlot2(seg, slot) {
  return seg.left <= slot && seg.right >= slot;
};
var eventsInSlot = function eventsInSlot2(segments, slot) {
  return segments.filter(function(seg) {
    return isSegmentInSlot(seg, slot);
  }).length;
};
var EventEndingRow = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(EventEndingRow2, _React$Component);
  function EventEndingRow2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = EventEndingRow2.prototype;
  _proto.render = function render() {
    var _this$props = this.props, segments = _this$props.segments, slots = _this$props.slotMetrics.slots;
    var rowSegments = eventLevels$2(segments).levels[0];
    var current = 1, lastEnd = 1, row = [];
    while (current <= slots) {
      var key = "_lvl_" + current;
      var _ref = rowSegments.filter(function(seg) {
        return isSegmentInSlot(seg, current);
      })[0] || {}, event = _ref.event, left2 = _ref.left, right2 = _ref.right, span = _ref.span;
      if (!event) {
        current++;
        continue;
      }
      var gap = Math.max(0, left2 - lastEnd);
      if (this.canRenderSlotEvent(left2, span)) {
        var content = EventRowMixin$1.renderEvent(this.props, event);
        if (gap) {
          row.push(EventRowMixin$1.renderSpan(slots, gap, key + "_gap"));
        }
        row.push(EventRowMixin$1.renderSpan(slots, span, key, content));
        lastEnd = current = right2 + 1;
      } else {
        if (gap) {
          row.push(EventRowMixin$1.renderSpan(slots, gap, key + "_gap"));
        }
        row.push(EventRowMixin$1.renderSpan(slots, 1, key, this.renderShowMore(segments, current)));
        lastEnd = current = current + 1;
      }
    }
    return /* @__PURE__ */ jsx("div", {
      className: "rbc-row",
      children: row
    });
  };
  _proto.canRenderSlotEvent = function canRenderSlotEvent(slot, span) {
    var segments = this.props.segments;
    return range$1$1(slot, slot + span).every(function(s) {
      var count = eventsInSlot(segments, s);
      return count === 1;
    });
  };
  _proto.renderShowMore = function renderShowMore(segments, slot) {
    var _this = this;
    var localizer = this.props.localizer;
    var count = eventsInSlot(segments, slot);
    return count ? /* @__PURE__ */ jsx("a", {
      href: "#",
      className: "rbc-show-more",
      onClick: function onClick(e) {
        return _this.showMore(slot, e);
      },
      children: localizer.messages.showMore(count)
    }, "sm_" + slot) : false;
  };
  _proto.showMore = function showMore2(slot, e) {
    e.preventDefault();
    e.stopPropagation();
    this.props.onShowMore(slot, e.target);
  };
  return EventEndingRow2;
}(React.Component);
EventEndingRow.propTypes = {};
EventEndingRow.defaultProps = _extends$1({}, EventRowMixin$1.defaultProps);
var ScrollableWeekWrapper = function ScrollableWeekWrapper2(_ref) {
  var children = _ref.children;
  return /* @__PURE__ */ jsx("div", {
    className: "rbc-row-content-scroll-container",
    children
  });
};
var isSegmentInSlot$1 = function isSegmentInSlot3(seg, slot) {
  return seg.left <= slot && seg.right >= slot;
};
var isEqual$1 = function isEqual2(a, b) {
  return a[0].range === b[0].range && a[0].events === b[0].events;
};
function getSlotMetrics() {
  return memoizeOne(function(options2) {
    var range2 = options2.range, events = options2.events, maxRows = options2.maxRows, minRows = options2.minRows, accessors2 = options2.accessors, localizer = options2.localizer;
    var _endOfRange = endOfRange$1({
      dateRange: range2,
      localizer
    }), first = _endOfRange.first, last2 = _endOfRange.last;
    var segments = events.map(function(evt) {
      return eventSegments$1(evt, range2, accessors2, localizer);
    });
    var _eventLevels = eventLevels$2(segments, Math.max(maxRows - 1, 1)), levels = _eventLevels.levels, extra = _eventLevels.extra;
    while (levels.length < minRows) {
      levels.push([]);
    }
    return {
      first,
      last: last2,
      levels,
      extra,
      range: range2,
      slots: range2.length,
      clone: function clone(args) {
        var metrics = getSlotMetrics();
        return metrics(_extends$1({}, options2, args));
      },
      getDateForSlot: function getDateForSlot(slotNumber) {
        return range2[slotNumber];
      },
      getSlotForDate: function getSlotForDate(date2) {
        return range2.find(function(r2) {
          return localizer.isSameDate(r2, date2);
        });
      },
      getEventsForSlot: function getEventsForSlot(slot) {
        return segments.filter(function(seg) {
          return isSegmentInSlot$1(seg, slot);
        }).map(function(seg) {
          return seg.event;
        });
      },
      continuesPrior: function continuesPrior2(event) {
        return localizer.continuesPrior(accessors2.start(event), first);
      },
      continuesAfter: function continuesAfter2(event) {
        var start2 = accessors2.start(event);
        var end2 = accessors2.end(event);
        return localizer.continuesAfter(start2, end2, last2);
      }
    };
  }, isEqual$1);
}
var DateContentRow = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(DateContentRow2, _React$Component);
  function DateContentRow2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.handleSelectSlot = function(slot) {
      var _this$props = _this.props, range2 = _this$props.range, onSelectSlot = _this$props.onSelectSlot;
      onSelectSlot(range2.slice(slot.start, slot.end + 1), slot);
    };
    _this.handleShowMore = function(slot, target) {
      var _this$props2 = _this.props, range2 = _this$props2.range, onShowMore = _this$props2.onShowMore;
      var metrics = _this.slotMetrics(_this.props);
      var row = qsa(_reactDom_17_0_2_reactDom.exports.findDOMNode(_assertThisInitialized(_this)), ".rbc-row-bg")[0];
      var cell;
      if (row)
        cell = row.children[slot - 1];
      var events = metrics.getEventsForSlot(slot);
      onShowMore(events, range2[slot - 1], cell, slot, target);
    };
    _this.createHeadingRef = function(r2) {
      _this.headingRow = r2;
    };
    _this.createEventRef = function(r2) {
      _this.eventRow = r2;
    };
    _this.getContainer = function() {
      var container = _this.props.container;
      return container ? container() : _reactDom_17_0_2_reactDom.exports.findDOMNode(_assertThisInitialized(_this));
    };
    _this.renderHeadingCell = function(date2, index) {
      var _this$props3 = _this.props, renderHeader = _this$props3.renderHeader, getNow2 = _this$props3.getNow, localizer = _this$props3.localizer;
      return renderHeader({
        date: date2,
        key: "header_" + index,
        className: clsx("rbc-date-cell", localizer.isSameDate(date2, getNow2()) && "rbc-now")
      });
    };
    _this.renderDummy = function() {
      var _this$props4 = _this.props, className = _this$props4.className, range2 = _this$props4.range, renderHeader = _this$props4.renderHeader, showAllEvents = _this$props4.showAllEvents;
      return /* @__PURE__ */ jsx("div", {
        className,
        children: /* @__PURE__ */ jsxs("div", {
          className: clsx("rbc-row-content", showAllEvents && "rbc-row-content-scrollable"),
          children: [renderHeader && /* @__PURE__ */ jsx("div", {
            className: "rbc-row",
            ref: _this.createHeadingRef,
            children: range2.map(_this.renderHeadingCell)
          }), /* @__PURE__ */ jsx("div", {
            className: "rbc-row",
            ref: _this.createEventRef,
            children: /* @__PURE__ */ jsx("div", {
              className: "rbc-row-segment",
              children: /* @__PURE__ */ jsx("div", {
                className: "rbc-event",
                children: /* @__PURE__ */ jsx("div", {
                  className: "rbc-event-content",
                  children: "\xA0"
                })
              })
            })
          })]
        })
      });
    };
    _this.slotMetrics = getSlotMetrics();
    return _this;
  }
  var _proto = DateContentRow2.prototype;
  _proto.getRowLimit = function getRowLimit() {
    var eventHeight = height(this.eventRow);
    var headingHeight = this.headingRow ? height(this.headingRow) : 0;
    var eventSpace = height(_reactDom_17_0_2_reactDom.exports.findDOMNode(this)) - headingHeight;
    return Math.max(Math.floor(eventSpace / eventHeight), 1);
  };
  _proto.render = function render() {
    var _this$props5 = this.props, date2 = _this$props5.date, rtl = _this$props5.rtl, range2 = _this$props5.range, className = _this$props5.className, selected = _this$props5.selected, selectable = _this$props5.selectable, renderForMeasure = _this$props5.renderForMeasure, accessors2 = _this$props5.accessors, getters = _this$props5.getters, components = _this$props5.components, getNow2 = _this$props5.getNow, renderHeader = _this$props5.renderHeader, onSelect = _this$props5.onSelect, localizer = _this$props5.localizer, onSelectStart = _this$props5.onSelectStart, onSelectEnd = _this$props5.onSelectEnd, onDoubleClick = _this$props5.onDoubleClick, onKeyPress = _this$props5.onKeyPress, resourceId = _this$props5.resourceId, longPressThreshold = _this$props5.longPressThreshold, isAllDay = _this$props5.isAllDay, resizable = _this$props5.resizable, showAllEvents = _this$props5.showAllEvents;
    if (renderForMeasure)
      return this.renderDummy();
    var metrics = this.slotMetrics(this.props);
    var levels = metrics.levels, extra = metrics.extra;
    var ScrollableWeekComponent = showAllEvents ? ScrollableWeekWrapper : NoopWrapper$1;
    var WeekWrapper2 = components.weekWrapper;
    var eventRowProps = {
      selected,
      accessors: accessors2,
      getters,
      localizer,
      components,
      onSelect,
      onDoubleClick,
      onKeyPress,
      resourceId,
      slotMetrics: metrics,
      resizable
    };
    return /* @__PURE__ */ jsxs("div", {
      className,
      role: "rowgroup",
      children: [/* @__PURE__ */ jsx(BackgroundCells, {
        localizer,
        date: date2,
        getNow: getNow2,
        rtl,
        range: range2,
        selectable,
        container: this.getContainer,
        getters,
        onSelectStart,
        onSelectEnd,
        onSelectSlot: this.handleSelectSlot,
        components,
        longPressThreshold,
        resourceId
      }), /* @__PURE__ */ jsxs("div", {
        className: clsx("rbc-row-content", showAllEvents && "rbc-row-content-scrollable"),
        role: "row",
        children: [renderHeader && /* @__PURE__ */ jsx("div", {
          className: "rbc-row ",
          ref: this.createHeadingRef,
          children: range2.map(this.renderHeadingCell)
        }), /* @__PURE__ */ jsx(ScrollableWeekComponent, {
          children: /* @__PURE__ */ jsxs(WeekWrapper2, __spreadProps(__spreadValues({
            isAllDay
          }, eventRowProps), {
            children: [levels.map(function(segs, idx) {
              return /* @__PURE__ */ jsx(EventRow$1, __spreadValues({
                segments: segs
              }, eventRowProps), idx);
            }), !!extra.length && /* @__PURE__ */ jsx(EventEndingRow, __spreadValues({
              segments: extra,
              onShowMore: this.handleShowMore
            }, eventRowProps))]
          }))
        })]
      })]
    });
  };
  return DateContentRow2;
}(React.Component);
DateContentRow.propTypes = {};
DateContentRow.defaultProps = {
  minRows: 0,
  maxRows: Infinity
};
var Header = function Header2(_ref) {
  var label = _ref.label;
  return /* @__PURE__ */ jsx("span", {
    role: "columnheader",
    "aria-sort": "none",
    children: label
  });
};
Header.propTypes = {};
var DateHeader = function DateHeader2(_ref) {
  var label = _ref.label, drilldownView = _ref.drilldownView, onDrillDown = _ref.onDrillDown;
  if (!drilldownView) {
    return /* @__PURE__ */ jsx("span", {
      children: label
    });
  }
  return /* @__PURE__ */ jsx("a", {
    href: "#",
    onClick: onDrillDown,
    role: "cell",
    children: label
  });
};
DateHeader.propTypes = {};
var _excluded$1$1 = ["date", "className"];
var eventsForWeek = function eventsForWeek2(evts, start2, end2, accessors2, localizer) {
  return evts.filter(function(e) {
    return inRange$1(e, start2, end2, accessors2, localizer);
  });
};
var MonthView = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(MonthView2, _React$Component);
  function MonthView2() {
    var _this;
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
    _this.getContainer = function() {
      return _reactDom_17_0_2_reactDom.exports.findDOMNode(_assertThisInitialized(_this));
    };
    _this.renderWeek = function(week, weekIdx) {
      var _this$props = _this.props, events = _this$props.events, components = _this$props.components, selectable = _this$props.selectable, getNow2 = _this$props.getNow, selected = _this$props.selected, date2 = _this$props.date, localizer = _this$props.localizer, longPressThreshold = _this$props.longPressThreshold, accessors2 = _this$props.accessors, getters = _this$props.getters, showAllEvents = _this$props.showAllEvents;
      var _this$state = _this.state, needLimitMeasure = _this$state.needLimitMeasure, rowLimit = _this$state.rowLimit;
      var weeksEvents = eventsForWeek([].concat(events), week[0], week[week.length - 1], accessors2, localizer);
      weeksEvents.sort(function(a, b) {
        return sortEvents$1$1(a, b, accessors2, localizer);
      });
      return /* @__PURE__ */ jsx(DateContentRow, {
        ref: weekIdx === 0 ? _this.slotRowRef : void 0,
        container: _this.getContainer,
        className: "rbc-month-row",
        getNow: getNow2,
        date: date2,
        range: week,
        events: weeksEvents,
        maxRows: showAllEvents ? Infinity : rowLimit,
        selected,
        selectable,
        components,
        accessors: accessors2,
        getters,
        localizer,
        renderHeader: _this.readerDateHeading,
        renderForMeasure: needLimitMeasure,
        onShowMore: _this.handleShowMore,
        onSelect: _this.handleSelectEvent,
        onDoubleClick: _this.handleDoubleClickEvent,
        onKeyPress: _this.handleKeyPressEvent,
        onSelectSlot: _this.handleSelectSlot,
        longPressThreshold,
        rtl: _this.props.rtl,
        resizable: _this.props.resizable,
        showAllEvents
      }, weekIdx);
    };
    _this.readerDateHeading = function(_ref) {
      var date2 = _ref.date, className = _ref.className, props = _objectWithoutPropertiesLoose(_ref, _excluded$1$1);
      var _this$props2 = _this.props, currentDate = _this$props2.date, getDrilldownView = _this$props2.getDrilldownView, localizer = _this$props2.localizer;
      var isOffRange = localizer.neq(date2, currentDate, "month");
      var isCurrent = localizer.isSameDate(date2, currentDate);
      var drilldownView = getDrilldownView(date2);
      var label = localizer.format(date2, "dateFormat");
      var DateHeaderComponent = _this.props.components.dateHeader || DateHeader;
      return /* @__PURE__ */ jsx("div", __spreadProps(__spreadValues({}, props), {
        className: clsx(className, isOffRange && "rbc-off-range", isCurrent && "rbc-current"),
        role: "cell",
        children: /* @__PURE__ */ jsx(DateHeaderComponent, {
          label,
          date: date2,
          drilldownView,
          isOffRange,
          onDrillDown: function onDrillDown(e) {
            return _this.handleHeadingClick(date2, drilldownView, e);
          }
        })
      }));
    };
    _this.handleSelectSlot = function(range2, slotInfo) {
      _this._pendingSelection = _this._pendingSelection.concat(range2);
      clearTimeout(_this._selectTimer);
      _this._selectTimer = setTimeout(function() {
        return _this.selectDates(slotInfo);
      });
    };
    _this.handleHeadingClick = function(date2, view, e) {
      e.preventDefault();
      _this.clearSelection();
      notify(_this.props.onDrillDown, [date2, view]);
    };
    _this.handleSelectEvent = function() {
      _this.clearSelection();
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      notify(_this.props.onSelectEvent, args);
    };
    _this.handleDoubleClickEvent = function() {
      _this.clearSelection();
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      notify(_this.props.onDoubleClickEvent, args);
    };
    _this.handleKeyPressEvent = function() {
      _this.clearSelection();
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      notify(_this.props.onKeyPressEvent, args);
    };
    _this.handleShowMore = function(events, date2, cell, slot, target) {
      var _this$props3 = _this.props, popup = _this$props3.popup, onDrillDown = _this$props3.onDrillDown, onShowMore = _this$props3.onShowMore, getDrilldownView = _this$props3.getDrilldownView, doShowMoreDrillDown = _this$props3.doShowMoreDrillDown;
      _this.clearSelection();
      if (popup) {
        var position$1 = position(cell, _reactDom_17_0_2_reactDom.exports.findDOMNode(_assertThisInitialized(_this)));
        _this.setState({
          overlay: {
            date: date2,
            events,
            position: position$1,
            target
          }
        });
      } else if (doShowMoreDrillDown) {
        notify(onDrillDown, [date2, getDrilldownView(date2) || views$1.DAY]);
      }
      notify(onShowMore, [events, date2, slot]);
    };
    _this.overlayDisplay = function() {
      _this.setState({
        overlay: null
      });
    };
    _this._bgRows = [];
    _this._pendingSelection = [];
    _this.slotRowRef = /* @__PURE__ */ React.createRef();
    _this.state = {
      rowLimit: 5,
      needLimitMeasure: true
    };
    return _this;
  }
  var _proto = MonthView2.prototype;
  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(_ref2) {
    var date2 = _ref2.date;
    var _this$props4 = this.props, propsDate = _this$props4.date, localizer = _this$props4.localizer;
    this.setState({
      needLimitMeasure: localizer.neq(date2, propsDate, "month")
    });
  };
  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;
    var running;
    if (this.state.needLimitMeasure)
      this.measureRowLimit(this.props);
    window.addEventListener("resize", this._resizeListener = function() {
      if (!running) {
        request(function() {
          running = false;
          _this2.setState({
            needLimitMeasure: true
          });
        });
      }
    }, false);
  };
  _proto.componentDidUpdate = function componentDidUpdate() {
    if (this.state.needLimitMeasure)
      this.measureRowLimit(this.props);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener("resize", this._resizeListener, false);
  };
  _proto.render = function render() {
    var _this$props5 = this.props, date2 = _this$props5.date, localizer = _this$props5.localizer, className = _this$props5.className, month2 = localizer.visibleDays(date2, localizer), weeks = chunk(month2, 7);
    this._weekCount = weeks.length;
    return /* @__PURE__ */ jsxs("div", {
      className: clsx("rbc-month-view", className),
      role: "table",
      "aria-label": "Month View",
      children: [/* @__PURE__ */ jsx("div", {
        className: "rbc-row rbc-month-header",
        role: "row",
        children: this.renderHeaders(weeks[0])
      }), weeks.map(this.renderWeek), this.props.popup && this.renderOverlay()]
    });
  };
  _proto.renderHeaders = function renderHeaders(row) {
    var _this$props6 = this.props, localizer = _this$props6.localizer, components = _this$props6.components;
    var first = row[0];
    var last2 = row[row.length - 1];
    var HeaderComponent = components.header || Header;
    return localizer.range(first, last2, "day").map(function(day2, idx) {
      return /* @__PURE__ */ jsx("div", {
        className: "rbc-header",
        children: /* @__PURE__ */ jsx(HeaderComponent, {
          date: day2,
          localizer,
          label: localizer.format(day2, "weekdayFormat")
        })
      }, "header_" + idx);
    });
  };
  _proto.renderOverlay = function renderOverlay() {
    var _this3 = this;
    var overlay = this.state && this.state.overlay || {};
    var _this$props7 = this.props, accessors2 = _this$props7.accessors, localizer = _this$props7.localizer, components = _this$props7.components, getters = _this$props7.getters, selected = _this$props7.selected, popupOffset = _this$props7.popupOffset;
    return /* @__PURE__ */ jsx(Overlay, {
      rootClose: true,
      placement: "bottom",
      show: !!overlay.position,
      onHide: function onHide2() {
        return _this3.setState({
          overlay: null
        });
      },
      target: function target() {
        return overlay.target;
      },
      children: function(_ref3) {
        var props = _ref3.props;
        return /* @__PURE__ */ jsx(Popup$1, __spreadProps(__spreadValues({}, props), {
          popupOffset,
          accessors: accessors2,
          getters,
          selected,
          components,
          localizer,
          position: overlay.position,
          show: _this3.overlayDisplay,
          events: overlay.events,
          slotStart: overlay.date,
          slotEnd: overlay.end,
          onSelect: _this3.handleSelectEvent,
          onDoubleClick: _this3.handleDoubleClickEvent,
          onKeyPress: _this3.handleKeyPressEvent,
          handleDragStart: _this3.props.handleDragStart
        }));
      }
    });
  };
  _proto.measureRowLimit = function measureRowLimit() {
    this.setState({
      needLimitMeasure: false,
      rowLimit: this.slotRowRef.current.getRowLimit()
    });
  };
  _proto.selectDates = function selectDates(slotInfo) {
    var slots = this._pendingSelection.slice();
    this._pendingSelection = [];
    slots.sort(function(a, b) {
      return +a - +b;
    });
    var start2 = new Date(slots[0]);
    var end2 = new Date(slots[slots.length - 1]);
    end2.setDate(slots[slots.length - 1].getDate() + 1);
    notify(this.props.onSelectSlot, {
      slots,
      start: start2,
      end: end2,
      action: slotInfo.action,
      bounds: slotInfo.bounds,
      box: slotInfo.box
    });
  };
  _proto.clearSelection = function clearSelection() {
    clearTimeout(this._selectTimer);
    this._pendingSelection = [];
  };
  return MonthView2;
}(React.Component);
MonthView.propTypes = {};
MonthView.range = function(date2, _ref4) {
  var localizer = _ref4.localizer;
  var start2 = localizer.firstVisibleDay(date2, localizer);
  var end2 = localizer.lastVisibleDay(date2, localizer);
  return {
    start: start2,
    end: end2
  };
};
MonthView.navigate = function(date2, action, _ref5) {
  var localizer = _ref5.localizer;
  switch (action) {
    case navigate$1.PREVIOUS:
      return localizer.add(date2, -1, "month");
    case navigate$1.NEXT:
      return localizer.add(date2, 1, "month");
    default:
      return date2;
  }
};
MonthView.title = function(date2, _ref6) {
  var localizer = _ref6.localizer;
  return localizer.format(date2, "monthHeaderFormat");
};
var getKey = function getKey3(_ref) {
  var min2 = _ref.min, max2 = _ref.max, step = _ref.step, slots = _ref.slots, localizer = _ref.localizer;
  return "" + +localizer.startOf(min2, "minutes") + ("" + +localizer.startOf(max2, "minutes")) + (step + "-" + slots);
};
function getSlotMetrics$1(_ref2) {
  var start2 = _ref2.min, end2 = _ref2.max, step = _ref2.step, timeslots = _ref2.timeslots, localizer = _ref2.localizer;
  var key = getKey({
    start: start2,
    end: end2,
    step,
    timeslots,
    localizer
  });
  var totalMin = 1 + localizer.getTotalMin(start2, end2);
  var minutesFromMidnight = localizer.getMinutesFromMidnight(start2);
  var numGroups = Math.ceil((totalMin - 1) / (step * timeslots));
  var numSlots = numGroups * timeslots;
  var groups = new Array(numGroups);
  var slots = new Array(numSlots);
  for (var grp = 0; grp < numGroups; grp++) {
    groups[grp] = new Array(timeslots);
    for (var slot = 0; slot < timeslots; slot++) {
      var slotIdx = grp * timeslots + slot;
      var minFromStart = slotIdx * step;
      slots[slotIdx] = groups[grp][slot] = localizer.getSlotDate(start2, minutesFromMidnight, minFromStart);
    }
  }
  var lastSlotMinFromStart = slots.length * step;
  slots.push(localizer.getSlotDate(start2, minutesFromMidnight, lastSlotMinFromStart));
  function positionFromDate(date2) {
    var diff2 = localizer.getTotalMin(start2, date2);
    return Math.min(diff2, totalMin);
  }
  return {
    groups,
    update: function update(args) {
      if (getKey(args) !== key)
        return getSlotMetrics$1(args);
      return this;
    },
    dateIsInGroup: function dateIsInGroup(date2, groupIndex) {
      var nextGroup = groups[groupIndex + 1];
      return localizer.inRange(date2, groups[groupIndex][0], nextGroup ? nextGroup[0] : end2, "minutes");
    },
    nextSlot: function nextSlot(slot2) {
      var next = slots[Math.min(slots.indexOf(slot2) + 1, slots.length - 1)];
      if (next === slot2)
        next = localizer.add(slot2, step, "minutes");
      return next;
    },
    closestSlotToPosition: function closestSlotToPosition(percent) {
      var slot2 = Math.min(slots.length - 1, Math.max(0, Math.floor(percent * numSlots)));
      return slots[slot2];
    },
    closestSlotFromPoint: function closestSlotFromPoint(point, boundaryRect) {
      var range2 = Math.abs(boundaryRect.top - boundaryRect.bottom);
      return this.closestSlotToPosition((point.y - boundaryRect.top) / range2);
    },
    closestSlotFromDate: function closestSlotFromDate(date2, offset2) {
      if (offset2 === void 0) {
        offset2 = 0;
      }
      if (localizer.lt(date2, start2, "minutes"))
        return slots[0];
      var diffMins = localizer.diff(start2, date2, "minutes");
      return slots[(diffMins - diffMins % step) / step + offset2];
    },
    startsBeforeDay: function startsBeforeDay(date2) {
      return localizer.lt(date2, start2, "day");
    },
    startsAfterDay: function startsAfterDay(date2) {
      return localizer.gt(date2, end2, "day");
    },
    startsBefore: function startsBefore(date2) {
      return localizer.lt(localizer.merge(start2, date2), start2, "minutes");
    },
    startsAfter: function startsAfter(date2) {
      return localizer.gt(localizer.merge(end2, date2), end2, "minutes");
    },
    getRange: function getRange(rangeStart, rangeEnd, ignoreMin, ignoreMax) {
      if (!ignoreMin)
        rangeStart = localizer.min(end2, localizer.max(start2, rangeStart));
      if (!ignoreMax)
        rangeEnd = localizer.min(end2, localizer.max(start2, rangeEnd));
      var rangeStartMin = positionFromDate(rangeStart);
      var rangeEndMin = positionFromDate(rangeEnd);
      var top2 = rangeEndMin > step * numSlots && !localizer.eq(end2, rangeEnd) ? (rangeStartMin - step) / (step * numSlots) * 100 : rangeStartMin / (step * numSlots) * 100;
      return {
        top: top2,
        height: rangeEndMin / (step * numSlots) * 100 - top2,
        start: positionFromDate(rangeStart),
        startDate: rangeStart,
        end: positionFromDate(rangeEnd),
        endDate: rangeEnd
      };
    },
    getCurrentTimePosition: function getCurrentTimePosition(rangeStart) {
      var rangeStartMin = positionFromDate(rangeStart);
      var top2 = rangeStartMin / (step * numSlots) * 100;
      return top2;
    }
  };
}
var Event = /* @__PURE__ */ function() {
  function Event2(data, _ref) {
    var accessors2 = _ref.accessors, slotMetrics = _ref.slotMetrics;
    var _slotMetrics$getRange = slotMetrics.getRange(accessors2.start(data), accessors2.end(data)), start2 = _slotMetrics$getRange.start, startDate = _slotMetrics$getRange.startDate, end2 = _slotMetrics$getRange.end, endDate = _slotMetrics$getRange.endDate, top2 = _slotMetrics$getRange.top, height2 = _slotMetrics$getRange.height;
    this.start = start2;
    this.end = end2;
    this.startMs = +startDate;
    this.endMs = +endDate;
    this.top = top2;
    this.height = height2;
    this.data = data;
  }
  _createClass(Event2, [{
    key: "_width",
    get: function get2() {
      if (this.rows) {
        var columns = this.rows.reduce(function(max2, row) {
          return Math.max(max2, row.leaves.length + 1);
        }, 0) + 1;
        return 100 / columns;
      }
      var availableWidth = 100 - this.container._width;
      if (this.leaves) {
        return availableWidth / (this.leaves.length + 1);
      }
      return this.row._width;
    }
  }, {
    key: "width",
    get: function get2() {
      var noOverlap2 = this._width;
      var overlap = Math.min(100, this._width * 1.7);
      if (this.rows) {
        return overlap;
      }
      if (this.leaves) {
        return this.leaves.length > 0 ? overlap : noOverlap2;
      }
      var leaves = this.row.leaves;
      var index = leaves.indexOf(this);
      return index === leaves.length - 1 ? noOverlap2 : overlap;
    }
  }, {
    key: "xOffset",
    get: function get2() {
      if (this.rows)
        return 0;
      if (this.leaves)
        return this.container._width;
      var _this$row = this.row, leaves = _this$row.leaves, xOffset = _this$row.xOffset, _width = _this$row._width;
      var index = leaves.indexOf(this) + 1;
      return xOffset + index * _width;
    }
  }]);
  return Event2;
}();
function onSameRow(a, b, minimumStartDifference) {
  return Math.abs(b.start - a.start) < minimumStartDifference || b.start > a.start && b.start < a.end;
}
function sortByRender(events) {
  var sortedByTime = sortBy$1(events, ["startMs", function(e) {
    return -e.endMs;
  }]);
  var sorted = [];
  while (sortedByTime.length > 0) {
    var event = sortedByTime.shift();
    sorted.push(event);
    for (var i = 0; i < sortedByTime.length; i++) {
      var test = sortedByTime[i];
      if (event.endMs > test.startMs)
        continue;
      if (i > 0) {
        var _event = sortedByTime.splice(i, 1)[0];
        sorted.push(_event);
      }
      break;
    }
  }
  return sorted;
}
function getStyledEvents(_ref2) {
  var events = _ref2.events, minimumStartDifference = _ref2.minimumStartDifference, slotMetrics = _ref2.slotMetrics, accessors2 = _ref2.accessors;
  var proxies = events.map(function(event) {
    return new Event(event, {
      slotMetrics,
      accessors: accessors2
    });
  });
  var eventsInRenderOrder = sortByRender(proxies);
  var containerEvents = [];
  var _loop = function _loop2(i2) {
    var event = eventsInRenderOrder[i2];
    var container = containerEvents.find(function(c) {
      return c.end > event.start || Math.abs(event.start - c.start) < minimumStartDifference;
    });
    if (!container) {
      event.rows = [];
      containerEvents.push(event);
      return "continue";
    }
    event.container = container;
    var row = null;
    for (var j = container.rows.length - 1; !row && j >= 0; j--) {
      if (onSameRow(container.rows[j], event, minimumStartDifference)) {
        row = container.rows[j];
      }
    }
    if (row) {
      row.leaves.push(event);
      event.row = row;
    } else {
      event.leaves = [];
      container.rows.push(event);
    }
  };
  for (var i = 0; i < eventsInRenderOrder.length; i++) {
    var _ret = _loop(i);
    if (_ret === "continue")
      continue;
  }
  return eventsInRenderOrder.map(function(event) {
    return {
      event: event.data,
      style: {
        top: event.top,
        height: event.height,
        width: event.width,
        xOffset: Math.max(0, event.xOffset)
      }
    };
  });
}
function getMaxIdxDFS(node, maxIdx, visited) {
  for (var i = 0; i < node.friends.length; ++i) {
    if (visited.indexOf(node.friends[i]) > -1)
      continue;
    maxIdx = maxIdx > node.friends[i].idx ? maxIdx : node.friends[i].idx;
    visited.push(node.friends[i]);
    var newIdx = getMaxIdxDFS(node.friends[i], maxIdx, visited);
    maxIdx = maxIdx > newIdx ? maxIdx : newIdx;
  }
  return maxIdx;
}
function noOverlap(_ref) {
  var events = _ref.events, minimumStartDifference = _ref.minimumStartDifference, slotMetrics = _ref.slotMetrics, accessors2 = _ref.accessors;
  var styledEvents = getStyledEvents({
    events,
    minimumStartDifference,
    slotMetrics,
    accessors: accessors2
  });
  styledEvents.sort(function(a, b) {
    a = a.style;
    b = b.style;
    if (a.top !== b.top)
      return a.top > b.top ? 1 : -1;
    else
      return a.top + a.height < b.top + b.height ? 1 : -1;
  });
  for (var i = 0; i < styledEvents.length; ++i) {
    styledEvents[i].friends = [];
    delete styledEvents[i].style.left;
    delete styledEvents[i].style.left;
    delete styledEvents[i].idx;
    delete styledEvents[i].size;
  }
  for (var _i = 0; _i < styledEvents.length - 1; ++_i) {
    var se1 = styledEvents[_i];
    var y1 = se1.style.top;
    var y2 = se1.style.top + se1.style.height;
    for (var j = _i + 1; j < styledEvents.length; ++j) {
      var se2 = styledEvents[j];
      var y3 = se2.style.top;
      var y4 = se2.style.top + se2.style.height;
      if (y3 <= y1 && y1 < y4 || y1 <= y3 && y3 < y2) {
        se1.friends.push(se2);
        se2.friends.push(se1);
      }
    }
  }
  for (var _i2 = 0; _i2 < styledEvents.length; ++_i2) {
    var se3 = styledEvents[_i2];
    var bitmap = [];
    for (var _j = 0; _j < 100; ++_j) {
      bitmap.push(1);
    }
    for (var _j2 = 0; _j2 < se3.friends.length; ++_j2) {
      if (se3.friends[_j2].idx !== void 0)
        bitmap[se3.friends[_j2].idx] = 0;
    }
    se3.idx = bitmap.indexOf(1);
  }
  for (var _i3 = 0; _i3 < styledEvents.length; ++_i3) {
    var size2 = 0;
    if (styledEvents[_i3].size)
      continue;
    var allFriends = [];
    var maxIdx = getMaxIdxDFS(styledEvents[_i3], 0, allFriends);
    size2 = 100 / (maxIdx + 1);
    styledEvents[_i3].size = size2;
    for (var _j3 = 0; _j3 < allFriends.length; ++_j3) {
      allFriends[_j3].size = size2;
    }
  }
  for (var _i4 = 0; _i4 < styledEvents.length; ++_i4) {
    var e = styledEvents[_i4];
    e.style.left = e.idx * e.size;
    var _maxIdx = 0;
    for (var _j4 = 0; _j4 < e.friends.length; ++_j4) {
      var idx = e.friends[_j4];
      _maxIdx = _maxIdx > idx ? _maxIdx : idx;
    }
    if (_maxIdx <= e.idx)
      e.size = 100 - e.idx * e.size;
    var padding = e.idx === 0 ? 0 : 3;
    e.style.width = "calc(" + e.size + "% - " + padding + "px)";
    e.style.height = "calc(" + e.style.height + "% - 2px)";
    e.style.xOffset = "calc(" + e.style.left + "% + " + padding + "px)";
  }
  return styledEvents;
}
var DefaultAlgorithms = {
  overlap: getStyledEvents,
  "no-overlap": noOverlap
};
function isFunction$4(a) {
  return !!(a && a.constructor && a.call && a.apply);
}
function getStyledEvents$1(_ref) {
  _ref.events;
  _ref.minimumStartDifference;
  _ref.slotMetrics;
  _ref.accessors;
  var dayLayoutAlgorithm = _ref.dayLayoutAlgorithm;
  var algorithm = dayLayoutAlgorithm;
  if (dayLayoutAlgorithm in DefaultAlgorithms)
    algorithm = DefaultAlgorithms[dayLayoutAlgorithm];
  if (!isFunction$4(algorithm)) {
    return [];
  }
  return algorithm.apply(this, arguments);
}
var TimeSlotGroup = /* @__PURE__ */ function(_Component) {
  _inheritsLoose(TimeSlotGroup2, _Component);
  function TimeSlotGroup2() {
    return _Component.apply(this, arguments) || this;
  }
  var _proto = TimeSlotGroup2.prototype;
  _proto.render = function render() {
    var _this$props = this.props, renderSlot = _this$props.renderSlot, resource = _this$props.resource, group = _this$props.group, getters = _this$props.getters, _this$props$component = _this$props.components;
    _this$props$component = _this$props$component === void 0 ? {} : _this$props$component;
    var _this$props$component2 = _this$props$component.timeSlotWrapper, Wrapper = _this$props$component2 === void 0 ? NoopWrapper$1 : _this$props$component2;
    var groupProps = getters ? getters.slotGroupProp() : {};
    return /* @__PURE__ */ jsx("div", __spreadProps(__spreadValues({
      className: "rbc-timeslot-group"
    }, groupProps), {
      children: group.map(function(value, idx) {
        var slotProps = getters ? getters.slotProp(value, resource) : {};
        return /* @__PURE__ */ jsx(Wrapper, {
          value,
          resource,
          children: /* @__PURE__ */ jsx("div", __spreadProps(__spreadValues({}, slotProps), {
            className: clsx("rbc-time-slot", slotProps.className),
            children: renderSlot && renderSlot(value, idx)
          }))
        }, idx);
      })
    }));
  };
  return TimeSlotGroup2;
}(_react_17_0_2_react.exports.Component);
TimeSlotGroup.propTypes = {};
function stringifyPercent(v2) {
  return typeof v2 === "string" ? v2 : v2 + "%";
}
function TimeGridEvent$1(props) {
  var _extends22, _extends3;
  var style2 = props.style, className = props.className, event = props.event, accessors2 = props.accessors, rtl = props.rtl, selected = props.selected, label = props.label, continuesEarlier = props.continuesEarlier, continuesLater = props.continuesLater, getters = props.getters, onClick = props.onClick, onDoubleClick = props.onDoubleClick, isBackgroundEvent = props.isBackgroundEvent, onKeyPress = props.onKeyPress, _props$components = props.components, Event2 = _props$components.event, EventWrapper2 = _props$components.eventWrapper;
  var title = accessors2.title(event);
  var tooltip = accessors2.tooltip(event);
  var end2 = accessors2.end(event);
  var start2 = accessors2.start(event);
  var userProps = getters.eventProp(event, start2, end2, selected);
  var height2 = style2.height, top2 = style2.top, width = style2.width, xOffset = style2.xOffset;
  var inner = [
    /* @__PURE__ */ jsx("div", {
      className: "rbc-event-label",
      children: label
    }, "1"),
    /* @__PURE__ */ jsx("div", {
      className: "rbc-event-content",
      children: Event2 ? /* @__PURE__ */ jsx(Event2, {
        event,
        title
      }) : title
    }, "2")
  ];
  var eventStyle = isBackgroundEvent ? _extends$1({}, userProps.style, (_extends22 = {
    top: stringifyPercent(top2),
    height: stringifyPercent(height2),
    width: "calc(" + width + " + 10px)"
  }, _extends22[rtl ? "right" : "left"] = stringifyPercent(Math.max(0, xOffset)), _extends22)) : _extends$1({}, userProps.style, (_extends3 = {
    top: stringifyPercent(top2),
    width: stringifyPercent(width),
    height: stringifyPercent(height2)
  }, _extends3[rtl ? "right" : "left"] = stringifyPercent(xOffset), _extends3));
  return /* @__PURE__ */ jsx(EventWrapper2, __spreadProps(__spreadValues({
    type: "time"
  }, props), {
    children: /* @__PURE__ */ jsx("div", {
      onClick,
      onDoubleClick,
      style: eventStyle,
      onKeyPress,
      title: tooltip ? (typeof label === "string" ? label + ": " : "") + tooltip : void 0,
      className: clsx(isBackgroundEvent ? "rbc-background-event" : "rbc-event", className, userProps.className, {
        "rbc-selected": selected,
        "rbc-event-continues-earlier": continuesEarlier,
        "rbc-event-continues-later": continuesLater
      }),
      children: inner
    })
  }));
}
var DayColumnWrapper = function DayColumnWrapper2(_ref) {
  var children = _ref.children, className = _ref.className, style2 = _ref.style;
  return /* @__PURE__ */ jsx("div", {
    className,
    style: style2,
    children
  });
};
var _excluded$2 = ["dayProp"], _excluded2 = ["eventContainerWrapper"];
var DayColumn = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(DayColumn2, _React$Component);
  function DayColumn2() {
    var _this;
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
    _this.state = {
      selecting: false,
      timeIndicatorPosition: null
    };
    _this.intervalTriggered = false;
    _this.renderEvents = function(_ref) {
      var events = _ref.events, isBackgroundEvent = _ref.isBackgroundEvent;
      var _this$props = _this.props, rtl = _this$props.rtl, selected = _this$props.selected, accessors2 = _this$props.accessors, localizer = _this$props.localizer, getters = _this$props.getters, components = _this$props.components, step = _this$props.step, timeslots = _this$props.timeslots, dayLayoutAlgorithm = _this$props.dayLayoutAlgorithm, resizable = _this$props.resizable;
      var _assertThisInitialize = _assertThisInitialized(_this), slotMetrics = _assertThisInitialize.slotMetrics;
      var messages2 = localizer.messages;
      var styledEvents = getStyledEvents$1({
        events,
        accessors: accessors2,
        slotMetrics,
        minimumStartDifference: Math.ceil(step * timeslots / 2),
        dayLayoutAlgorithm
      });
      return styledEvents.map(function(_ref2, idx) {
        var event = _ref2.event, style2 = _ref2.style;
        var end2 = accessors2.end(event);
        var start2 = accessors2.start(event);
        var format = "eventTimeRangeFormat";
        var label;
        var startsBeforeDay = slotMetrics.startsBeforeDay(start2);
        var startsAfterDay = slotMetrics.startsAfterDay(end2);
        if (startsBeforeDay)
          format = "eventTimeRangeEndFormat";
        else if (startsAfterDay)
          format = "eventTimeRangeStartFormat";
        if (startsBeforeDay && startsAfterDay)
          label = messages2.allDay;
        else
          label = localizer.format({
            start: start2,
            end: end2
          }, format);
        var continuesEarlier = startsBeforeDay || slotMetrics.startsBefore(start2);
        var continuesLater = startsAfterDay || slotMetrics.startsAfter(end2);
        return /* @__PURE__ */ jsx(TimeGridEvent$1, {
          style: style2,
          event,
          label,
          getters,
          rtl,
          components,
          continuesEarlier,
          continuesLater,
          accessors: accessors2,
          selected: isSelected$1(event, selected),
          onClick: function onClick(e) {
            return _this._select(event, e);
          },
          onDoubleClick: function onDoubleClick(e) {
            return _this._doubleClick(event, e);
          },
          isBackgroundEvent,
          onKeyPress: function onKeyPress(e) {
            return _this._keyPress(event, e);
          },
          resizable
        }, "evt_" + idx);
      });
    };
    _this._selectable = function() {
      var node = _reactDom_17_0_2_reactDom.exports.findDOMNode(_assertThisInitialized(_this));
      var _this$props2 = _this.props, longPressThreshold = _this$props2.longPressThreshold, localizer = _this$props2.localizer;
      var selector = _this._selector = new Selection$2(function() {
        return _reactDom_17_0_2_reactDom.exports.findDOMNode(_assertThisInitialized(_this));
      }, {
        longPressThreshold
      });
      var maybeSelect = function maybeSelect2(box) {
        var onSelecting = _this.props.onSelecting;
        var current = _this.state || {};
        var state = selectionState(box);
        var start2 = state.startDate, end2 = state.endDate;
        if (onSelecting) {
          if (localizer.eq(current.startDate, start2, "minutes") && localizer.eq(current.endDate, end2, "minutes") || onSelecting({
            start: start2,
            end: end2,
            resourceId: _this.props.resource
          }) === false)
            return;
        }
        if (_this.state.start !== state.start || _this.state.end !== state.end || _this.state.selecting !== state.selecting) {
          _this.setState(state);
        }
      };
      var selectionState = function selectionState2(point) {
        var currentSlot = _this.slotMetrics.closestSlotFromPoint(point, getBoundsForNode$1(node));
        if (!_this.state.selecting) {
          _this._initialSlot = currentSlot;
        }
        var initialSlot = _this._initialSlot;
        if (localizer.lte(initialSlot, currentSlot)) {
          currentSlot = _this.slotMetrics.nextSlot(currentSlot);
        } else if (localizer.gt(initialSlot, currentSlot)) {
          initialSlot = _this.slotMetrics.nextSlot(initialSlot);
        }
        var selectRange = _this.slotMetrics.getRange(localizer.min(initialSlot, currentSlot), localizer.max(initialSlot, currentSlot));
        return _extends$1({}, selectRange, {
          selecting: true,
          top: selectRange.top + "%",
          height: selectRange.height + "%"
        });
      };
      var selectorClicksHandler = function selectorClicksHandler2(box, actionType) {
        if (!isEvent$1(_reactDom_17_0_2_reactDom.exports.findDOMNode(_assertThisInitialized(_this)), box)) {
          var _selectionState = selectionState(box), startDate = _selectionState.startDate, endDate = _selectionState.endDate;
          _this._selectSlot({
            startDate,
            endDate,
            action: actionType,
            box
          });
        }
        _this.setState({
          selecting: false
        });
      };
      selector.on("selecting", maybeSelect);
      selector.on("selectStart", maybeSelect);
      selector.on("beforeSelect", function(box) {
        if (_this.props.selectable !== "ignoreEvents")
          return;
        return !isEvent$1(_reactDom_17_0_2_reactDom.exports.findDOMNode(_assertThisInitialized(_this)), box);
      });
      selector.on("click", function(box) {
        return selectorClicksHandler(box, "click");
      });
      selector.on("doubleClick", function(box) {
        return selectorClicksHandler(box, "doubleClick");
      });
      selector.on("select", function(bounds) {
        if (_this.state.selecting) {
          _this._selectSlot(_extends$1({}, _this.state, {
            action: "select",
            bounds
          }));
          _this.setState({
            selecting: false
          });
        }
      });
      selector.on("reset", function() {
        if (_this.state.selecting) {
          _this.setState({
            selecting: false
          });
        }
      });
    };
    _this._teardownSelectable = function() {
      if (!_this._selector)
        return;
      _this._selector.teardown();
      _this._selector = null;
    };
    _this._selectSlot = function(_ref3) {
      var startDate = _ref3.startDate, endDate = _ref3.endDate, action = _ref3.action, bounds = _ref3.bounds, box = _ref3.box;
      var current = startDate, slots = [];
      while (_this.props.localizer.lte(current, endDate)) {
        slots.push(current);
        current = new Date(+current + _this.props.step * 60 * 1e3);
      }
      notify(_this.props.onSelectSlot, {
        slots,
        start: startDate,
        end: endDate,
        resourceId: _this.props.resource,
        action,
        bounds,
        box
      });
    };
    _this._select = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      notify(_this.props.onSelectEvent, args);
    };
    _this._doubleClick = function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      notify(_this.props.onDoubleClickEvent, args);
    };
    _this._keyPress = function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      notify(_this.props.onKeyPressEvent, args);
    };
    _this.slotMetrics = getSlotMetrics$1(_this.props);
    return _this;
  }
  var _proto = DayColumn2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.props.selectable && this._selectable();
    if (this.props.isNow) {
      this.setTimeIndicatorPositionUpdateInterval();
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this._teardownSelectable();
    this.clearTimeIndicatorInterval();
  };
  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.selectable && !this.props.selectable)
      this._selectable();
    if (!nextProps.selectable && this.props.selectable)
      this._teardownSelectable();
    this.slotMetrics = this.slotMetrics.update(nextProps);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    var _this$props3 = this.props, getNow2 = _this$props3.getNow, isNow = _this$props3.isNow, localizer = _this$props3.localizer, date2 = _this$props3.date, min2 = _this$props3.min, max2 = _this$props3.max;
    var getNowChanged = localizer.neq(prevProps.getNow(), getNow2(), "minutes");
    if (prevProps.isNow !== isNow || getNowChanged) {
      this.clearTimeIndicatorInterval();
      if (isNow) {
        var tail = !getNowChanged && localizer.eq(prevProps.date, date2, "minutes") && prevState.timeIndicatorPosition === this.state.timeIndicatorPosition;
        this.setTimeIndicatorPositionUpdateInterval(tail);
      }
    } else if (isNow && (localizer.neq(prevProps.min, min2, "minutes") || localizer.neq(prevProps.max, max2, "minutes"))) {
      this.positionTimeIndicator();
    }
  };
  _proto.setTimeIndicatorPositionUpdateInterval = function setTimeIndicatorPositionUpdateInterval(tail) {
    var _this2 = this;
    if (tail === void 0) {
      tail = false;
    }
    if (!this.intervalTriggered && !tail) {
      this.positionTimeIndicator();
    }
    this._timeIndicatorTimeout = window.setTimeout(function() {
      _this2.intervalTriggered = true;
      _this2.positionTimeIndicator();
      _this2.setTimeIndicatorPositionUpdateInterval();
    }, 6e4);
  };
  _proto.clearTimeIndicatorInterval = function clearTimeIndicatorInterval() {
    this.intervalTriggered = false;
    window.clearTimeout(this._timeIndicatorTimeout);
  };
  _proto.positionTimeIndicator = function positionTimeIndicator() {
    var _this$props4 = this.props, min2 = _this$props4.min, max2 = _this$props4.max, getNow2 = _this$props4.getNow;
    var current = getNow2();
    if (current >= min2 && current <= max2) {
      var top2 = this.slotMetrics.getCurrentTimePosition(current);
      this.intervalTriggered = true;
      this.setState({
        timeIndicatorPosition: top2
      });
    } else {
      this.clearTimeIndicatorInterval();
    }
  };
  _proto.render = function render() {
    var _this$props5 = this.props, date2 = _this$props5.date, max2 = _this$props5.max, rtl = _this$props5.rtl, isNow = _this$props5.isNow, resource = _this$props5.resource, accessors2 = _this$props5.accessors, localizer = _this$props5.localizer, _this$props5$getters = _this$props5.getters, dayProp = _this$props5$getters.dayProp, getters = _objectWithoutPropertiesLoose(_this$props5$getters, _excluded$2), _this$props5$componen = _this$props5.components, EventContainer = _this$props5$componen.eventContainerWrapper, components = _objectWithoutPropertiesLoose(_this$props5$componen, _excluded2);
    var slotMetrics = this.slotMetrics;
    var _this$state = this.state, selecting = _this$state.selecting, top2 = _this$state.top, height2 = _this$state.height, startDate = _this$state.startDate, endDate = _this$state.endDate;
    var selectDates = {
      start: startDate,
      end: endDate
    };
    var _dayProp = dayProp(max2), className = _dayProp.className, style2 = _dayProp.style;
    var DayColumnWrapperComponent = components.dayColumnWrapper || DayColumnWrapper;
    return /* @__PURE__ */ jsxs(DayColumnWrapperComponent, {
      date: date2,
      style: style2,
      className: clsx(className, "rbc-day-slot", "rbc-time-column", isNow && "rbc-now", isNow && "rbc-today", selecting && "rbc-slot-selecting"),
      children: [slotMetrics.groups.map(function(grp, idx) {
        return /* @__PURE__ */ jsx(TimeSlotGroup, {
          group: grp,
          resource,
          getters,
          components
        }, idx);
      }), /* @__PURE__ */ jsx(EventContainer, {
        localizer,
        resource,
        accessors: accessors2,
        getters,
        components,
        slotMetrics,
        children: /* @__PURE__ */ jsxs("div", {
          className: clsx("rbc-events-container", rtl && "rtl"),
          children: [this.renderEvents({
            events: this.props.backgroundEvents,
            isBackgroundEvent: true
          }), this.renderEvents({
            events: this.props.events
          })]
        })
      }), selecting && /* @__PURE__ */ jsx("div", {
        className: "rbc-slot-selection",
        style: {
          top: top2,
          height: height2
        },
        children: /* @__PURE__ */ jsx("span", {
          children: localizer.format(selectDates, "selectRangeFormat")
        })
      }), isNow && this.intervalTriggered && /* @__PURE__ */ jsx("div", {
        className: "rbc-current-time-indicator",
        style: {
          top: this.state.timeIndicatorPosition + "%"
        }
      })]
    });
  };
  return DayColumn2;
}(React.Component);
DayColumn.propTypes = {};
DayColumn.defaultProps = {
  dragThroughEvents: true,
  timeslots: 2
};
var TimeGutter = /* @__PURE__ */ function(_Component) {
  _inheritsLoose(TimeGutter2, _Component);
  function TimeGutter2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.renderSlot = function(value, idx) {
      if (idx !== 0)
        return null;
      var _this$props = _this.props, localizer = _this$props.localizer, getNow2 = _this$props.getNow;
      var isNow = _this.slotMetrics.dateIsInGroup(getNow2(), idx);
      return /* @__PURE__ */ jsx("span", {
        className: clsx("rbc-label", isNow && "rbc-now"),
        children: localizer.format(value, "timeGutterFormat")
      });
    };
    var _this$props2 = _this.props, min2 = _this$props2.min, max2 = _this$props2.max, timeslots = _this$props2.timeslots, step = _this$props2.step, _localizer = _this$props2.localizer;
    _this.slotMetrics = getSlotMetrics$1({
      min: min2,
      max: max2,
      timeslots,
      step,
      localizer: _localizer
    });
    return _this;
  }
  var _proto = TimeGutter2.prototype;
  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    this.slotMetrics = this.slotMetrics.update(nextProps);
  };
  _proto.render = function render() {
    var _this2 = this;
    var _this$props3 = this.props, resource = _this$props3.resource, components = _this$props3.components, getters = _this$props3.getters;
    return /* @__PURE__ */ jsx("div", {
      className: "rbc-time-gutter rbc-time-column",
      children: this.slotMetrics.groups.map(function(grp, idx) {
        return /* @__PURE__ */ jsx(TimeSlotGroup, {
          group: grp,
          resource,
          components,
          renderSlot: _this2.renderSlot,
          getters
        }, idx);
      })
    });
  };
  return TimeGutter2;
}(_react_17_0_2_react.exports.Component);
TimeGutter.propTypes = {};
var ResourceHeader = function ResourceHeader2(_ref) {
  var label = _ref.label;
  return /* @__PURE__ */ jsx(Fragment, {
    children: label
  });
};
ResourceHeader.propTypes = {};
var TimeGridHeader = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(TimeGridHeader2, _React$Component);
  function TimeGridHeader2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.handleHeaderClick = function(date2, view, e) {
      e.preventDefault();
      notify(_this.props.onDrillDown, [date2, view]);
    };
    _this.renderRow = function(resource) {
      var _this$props = _this.props, events = _this$props.events, rtl = _this$props.rtl, selectable = _this$props.selectable, getNow2 = _this$props.getNow, range2 = _this$props.range, getters = _this$props.getters, localizer = _this$props.localizer, accessors2 = _this$props.accessors, components = _this$props.components, resizable = _this$props.resizable;
      var resourceId = accessors2.resourceId(resource);
      var eventsToDisplay = resource ? events.filter(function(event) {
        return accessors2.resource(event) === resourceId;
      }) : events;
      return /* @__PURE__ */ jsx(DateContentRow, {
        isAllDay: true,
        rtl,
        getNow: getNow2,
        minRows: 2,
        range: range2,
        events: eventsToDisplay,
        resourceId,
        className: "rbc-allday-cell",
        selectable,
        selected: _this.props.selected,
        components,
        accessors: accessors2,
        getters,
        localizer,
        onSelect: _this.props.onSelectEvent,
        onDoubleClick: _this.props.onDoubleClickEvent,
        onKeyPress: _this.props.onKeyPressEvent,
        onSelectSlot: _this.props.onSelectSlot,
        longPressThreshold: _this.props.longPressThreshold,
        resizable
      });
    };
    return _this;
  }
  var _proto = TimeGridHeader2.prototype;
  _proto.renderHeaderCells = function renderHeaderCells(range2) {
    var _this2 = this;
    var _this$props2 = this.props, localizer = _this$props2.localizer, getDrilldownView = _this$props2.getDrilldownView, getNow2 = _this$props2.getNow, dayProp = _this$props2.getters.dayProp, _this$props2$componen = _this$props2.components.header, HeaderComponent = _this$props2$componen === void 0 ? Header : _this$props2$componen;
    var today = getNow2();
    return range2.map(function(date2, i) {
      var drilldownView = getDrilldownView(date2);
      var label = localizer.format(date2, "dayFormat");
      var _dayProp = dayProp(date2), className = _dayProp.className, style2 = _dayProp.style;
      var header = /* @__PURE__ */ jsx(HeaderComponent, {
        date: date2,
        label,
        localizer
      });
      return /* @__PURE__ */ jsx("div", {
        style: style2,
        className: clsx("rbc-header", className, localizer.isSameDate(date2, today) && "rbc-today"),
        children: drilldownView ? /* @__PURE__ */ jsx("a", {
          href: "#",
          onClick: function onClick(e) {
            return _this2.handleHeaderClick(date2, drilldownView, e);
          },
          children: header
        }) : /* @__PURE__ */ jsx("span", {
          children: header
        })
      }, i);
    });
  };
  _proto.render = function render() {
    var _this3 = this;
    var _this$props3 = this.props, width = _this$props3.width, rtl = _this$props3.rtl, resources = _this$props3.resources, range2 = _this$props3.range, events = _this$props3.events, getNow2 = _this$props3.getNow, accessors2 = _this$props3.accessors, selectable = _this$props3.selectable, components = _this$props3.components, getters = _this$props3.getters, scrollRef = _this$props3.scrollRef, localizer = _this$props3.localizer, isOverflowing = _this$props3.isOverflowing, _this$props3$componen = _this$props3.components, TimeGutterHeader = _this$props3$componen.timeGutterHeader, _this$props3$componen2 = _this$props3$componen.resourceHeader, ResourceHeaderComponent = _this$props3$componen2 === void 0 ? ResourceHeader : _this$props3$componen2, resizable = _this$props3.resizable;
    var style2 = {};
    if (isOverflowing) {
      style2[rtl ? "marginLeft" : "marginRight"] = scrollbarSize() + "px";
    }
    var groupedEvents = resources.groupEvents(events);
    return /* @__PURE__ */ jsxs("div", {
      style: style2,
      ref: scrollRef,
      className: clsx("rbc-time-header", isOverflowing && "rbc-overflowing"),
      children: [/* @__PURE__ */ jsx("div", {
        className: "rbc-label rbc-time-header-gutter",
        style: {
          width,
          minWidth: width,
          maxWidth: width
        },
        children: TimeGutterHeader && /* @__PURE__ */ jsx(TimeGutterHeader, {})
      }), resources.map(function(_ref, idx) {
        var id2 = _ref[0], resource = _ref[1];
        return /* @__PURE__ */ jsxs("div", {
          className: "rbc-time-header-content",
          children: [resource && /* @__PURE__ */ jsx("div", {
            className: "rbc-row rbc-row-resource",
            children: /* @__PURE__ */ jsx("div", {
              className: "rbc-header",
              children: /* @__PURE__ */ jsx(ResourceHeaderComponent, {
                index: idx,
                label: accessors2.resourceTitle(resource),
                resource
              })
            })
          }, "resource_" + idx), /* @__PURE__ */ jsx("div", {
            className: "rbc-row rbc-time-header-cell" + (range2.length <= 1 ? " rbc-time-header-cell-single-day" : ""),
            children: _this3.renderHeaderCells(range2)
          }), /* @__PURE__ */ jsx(DateContentRow, {
            isAllDay: true,
            rtl,
            getNow: getNow2,
            minRows: 2,
            range: range2,
            events: groupedEvents.get(id2) || [],
            resourceId: resource && id2,
            className: "rbc-allday-cell",
            selectable,
            selected: _this3.props.selected,
            components,
            accessors: accessors2,
            getters,
            localizer,
            onSelect: _this3.props.onSelectEvent,
            onDoubleClick: _this3.props.onDoubleClickEvent,
            onKeyPress: _this3.props.onKeyPressEvent,
            onSelectSlot: _this3.props.onSelectSlot,
            longPressThreshold: _this3.props.longPressThreshold,
            resizable
          })]
        }, id2 || idx);
      })]
    });
  };
  return TimeGridHeader2;
}(React.Component);
TimeGridHeader.propTypes = {};
var NONE = {};
function Resources(resources, accessors2) {
  return {
    map: function map(fn3) {
      if (!resources)
        return [fn3([NONE, null], 0)];
      return resources.map(function(resource, idx) {
        return fn3([accessors2.resourceId(resource), resource], idx);
      });
    },
    groupEvents: function groupEvents(events) {
      var eventsByResource = new Map();
      if (!resources) {
        eventsByResource.set(NONE, events);
        return eventsByResource;
      }
      events.forEach(function(event) {
        var id2 = accessors2.resource(event) || NONE;
        var resourceEvents = eventsByResource.get(id2) || [];
        resourceEvents.push(event);
        eventsByResource.set(id2, resourceEvents);
      });
      return eventsByResource;
    }
  };
}
var TimeGrid = /* @__PURE__ */ function(_Component) {
  _inheritsLoose(TimeGrid2, _Component);
  function TimeGrid2(props) {
    var _this;
    _this = _Component.call(this, props) || this;
    _this.handleScroll = function(e) {
      if (_this.scrollRef.current) {
        _this.scrollRef.current.scrollLeft = e.target.scrollLeft;
      }
    };
    _this.handleResize = function() {
      cancel(_this.rafHandle);
      _this.rafHandle = request(_this.checkOverflow);
    };
    _this.gutterRef = function(ref) {
      _this.gutter = ref && _reactDom_17_0_2_reactDom.exports.findDOMNode(ref);
    };
    _this.handleSelectAlldayEvent = function() {
      _this.clearSelection();
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      notify(_this.props.onSelectEvent, args);
    };
    _this.handleSelectAllDaySlot = function(slots, slotInfo) {
      var onSelectSlot = _this.props.onSelectSlot;
      var start2 = new Date(slots[0]);
      var end2 = new Date(slots[slots.length - 1]);
      end2.setDate(slots[slots.length - 1].getDate() + 1);
      notify(onSelectSlot, {
        slots,
        start: start2,
        end: end2,
        action: slotInfo.action,
        resourceId: slotInfo.resourceId
      });
    };
    _this.checkOverflow = function() {
      if (_this._updatingOverflow)
        return;
      var content = _this.contentRef.current;
      var isOverflowing = content.scrollHeight > content.clientHeight;
      if (_this.state.isOverflowing !== isOverflowing) {
        _this._updatingOverflow = true;
        _this.setState({
          isOverflowing
        }, function() {
          _this._updatingOverflow = false;
        });
      }
    };
    _this.memoizedResources = memoizeOne(function(resources, accessors2) {
      return Resources(resources, accessors2);
    });
    _this.state = {
      gutterWidth: void 0,
      isOverflowing: null
    };
    _this.scrollRef = /* @__PURE__ */ React.createRef();
    _this.contentRef = /* @__PURE__ */ React.createRef();
    _this._scrollRatio = null;
    return _this;
  }
  var _proto = TimeGrid2.prototype;
  _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {
    this.calculateScroll();
  };
  _proto.componentDidMount = function componentDidMount() {
    this.checkOverflow();
    if (this.props.width == null) {
      this.measureGutter();
    }
    this.applyScroll();
    window.addEventListener("resize", this.handleResize);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener("resize", this.handleResize);
    cancel(this.rafHandle);
    if (this.measureGutterAnimationFrameRequest) {
      window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);
    }
  };
  _proto.componentDidUpdate = function componentDidUpdate() {
    if (this.props.width == null) {
      this.measureGutter();
    }
    this.applyScroll();
  };
  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    var _this$props = this.props, range2 = _this$props.range, scrollToTime = _this$props.scrollToTime, localizer = _this$props.localizer;
    if (localizer.neq(nextProps.range[0], range2[0], "minutes") || localizer.neq(nextProps.scrollToTime, scrollToTime, "minutes")) {
      this.calculateScroll(nextProps);
    }
  };
  _proto.renderEvents = function renderEvents(range2, events, backgroundEvents, now) {
    var _this2 = this;
    var _this$props2 = this.props, min2 = _this$props2.min, max2 = _this$props2.max, components = _this$props2.components, accessors2 = _this$props2.accessors, localizer = _this$props2.localizer, dayLayoutAlgorithm = _this$props2.dayLayoutAlgorithm;
    var resources = this.memoizedResources(this.props.resources, accessors2);
    var groupedEvents = resources.groupEvents(events);
    var groupedBackgroundEvents = resources.groupEvents(backgroundEvents);
    return resources.map(function(_ref, i) {
      var id2 = _ref[0], resource = _ref[1];
      return range2.map(function(date2, jj2) {
        var daysEvents = (groupedEvents.get(id2) || []).filter(function(event) {
          return localizer.inRange(date2, accessors2.start(event), accessors2.end(event), "day");
        });
        var daysBackgroundEvents = (groupedBackgroundEvents.get(id2) || []).filter(function(event) {
          return localizer.inRange(date2, accessors2.start(event), accessors2.end(event), "day");
        });
        return /* @__PURE__ */ _react_17_0_2_react.exports.createElement(DayColumn, __spreadProps(__spreadValues({}, _this2.props), {
          localizer,
          min: localizer.merge(date2, min2),
          max: localizer.merge(date2, max2),
          resource: resource && id2,
          components,
          isNow: localizer.isSameDate(date2, now),
          key: i + "-" + jj2,
          date: date2,
          events: daysEvents,
          backgroundEvents: daysBackgroundEvents,
          dayLayoutAlgorithm
        }));
      });
    });
  };
  _proto.render = function render() {
    var _this$props3 = this.props, events = _this$props3.events, backgroundEvents = _this$props3.backgroundEvents, range2 = _this$props3.range, width = _this$props3.width, rtl = _this$props3.rtl, selected = _this$props3.selected, getNow2 = _this$props3.getNow, resources = _this$props3.resources, components = _this$props3.components, accessors2 = _this$props3.accessors, getters = _this$props3.getters, localizer = _this$props3.localizer, min2 = _this$props3.min, max2 = _this$props3.max, showMultiDayTimes = _this$props3.showMultiDayTimes, longPressThreshold = _this$props3.longPressThreshold, resizable = _this$props3.resizable;
    width = width || this.state.gutterWidth;
    var start2 = range2[0], end2 = range2[range2.length - 1];
    this.slots = range2.length;
    var allDayEvents = [], rangeEvents = [], rangeBackgroundEvents = [];
    events.forEach(function(event) {
      if (inRange$1(event, start2, end2, accessors2, localizer)) {
        var eStart = accessors2.start(event), eEnd = accessors2.end(event);
        if (accessors2.allDay(event) || localizer.startAndEndAreDateOnly(eStart, eEnd) || !showMultiDayTimes && !localizer.isSameDate(eStart, eEnd)) {
          allDayEvents.push(event);
        } else {
          rangeEvents.push(event);
        }
      }
    });
    backgroundEvents.forEach(function(event) {
      if (inRange$1(event, start2, end2, accessors2, localizer)) {
        rangeBackgroundEvents.push(event);
      }
    });
    allDayEvents.sort(function(a, b) {
      return sortEvents$1$1(a, b, accessors2, localizer);
    });
    return /* @__PURE__ */ jsxs("div", {
      className: clsx("rbc-time-view", resources && "rbc-time-view-resources"),
      children: [/* @__PURE__ */ jsx(TimeGridHeader, {
        range: range2,
        events: allDayEvents,
        width,
        rtl,
        getNow: getNow2,
        localizer,
        selected,
        resources: this.memoizedResources(resources, accessors2),
        selectable: this.props.selectable,
        accessors: accessors2,
        getters,
        components,
        scrollRef: this.scrollRef,
        isOverflowing: this.state.isOverflowing,
        longPressThreshold,
        onSelectSlot: this.handleSelectAllDaySlot,
        onSelectEvent: this.handleSelectAlldayEvent,
        onDoubleClickEvent: this.props.onDoubleClickEvent,
        onKeyPressEvent: this.props.onKeyPressEvent,
        onDrillDown: this.props.onDrillDown,
        getDrilldownView: this.props.getDrilldownView,
        resizable
      }), /* @__PURE__ */ jsxs("div", {
        ref: this.contentRef,
        className: "rbc-time-content",
        onScroll: this.handleScroll,
        children: [/* @__PURE__ */ jsx(TimeGutter, {
          date: start2,
          ref: this.gutterRef,
          localizer,
          min: localizer.merge(start2, min2),
          max: localizer.merge(start2, max2),
          step: this.props.step,
          getNow: this.props.getNow,
          timeslots: this.props.timeslots,
          components,
          className: "rbc-time-gutter",
          getters
        }), this.renderEvents(range2, rangeEvents, rangeBackgroundEvents, getNow2())]
      })]
    });
  };
  _proto.clearSelection = function clearSelection() {
    clearTimeout(this._selectTimer);
    this._pendingSelection = [];
  };
  _proto.measureGutter = function measureGutter() {
    var _this3 = this;
    if (this.measureGutterAnimationFrameRequest) {
      window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);
    }
    this.measureGutterAnimationFrameRequest = window.requestAnimationFrame(function() {
      var width = getWidth(_this3.gutter);
      if (width && _this3.state.gutterWidth !== width) {
        _this3.setState({
          gutterWidth: width
        });
      }
    });
  };
  _proto.applyScroll = function applyScroll() {
    if (this._scrollRatio != null) {
      var content = this.contentRef.current;
      content.scrollTop = content.scrollHeight * this._scrollRatio;
      this._scrollRatio = null;
    }
  };
  _proto.calculateScroll = function calculateScroll(props) {
    if (props === void 0) {
      props = this.props;
    }
    var _props = props, min2 = _props.min, max2 = _props.max, scrollToTime = _props.scrollToTime, localizer = _props.localizer;
    var diffMillis = scrollToTime - localizer.startOf(scrollToTime, "day");
    var totalMillis = localizer.diff(min2, max2, "milliseconds");
    this._scrollRatio = diffMillis / totalMillis;
  };
  return TimeGrid2;
}(_react_17_0_2_react.exports.Component);
TimeGrid.propTypes = {};
TimeGrid.defaultProps = {
  step: 30,
  timeslots: 2
};
var _excluded$3 = ["date", "localizer", "min", "max", "scrollToTime"];
var Day = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Day2, _React$Component);
  function Day2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = Day2.prototype;
  _proto.render = function render() {
    var _this$props = this.props, date2 = _this$props.date, localizer = _this$props.localizer, _this$props$min = _this$props.min, min2 = _this$props$min === void 0 ? localizer.startOf(new Date(), "day") : _this$props$min, _this$props$max = _this$props.max, max2 = _this$props$max === void 0 ? localizer.endOf(new Date(), "day") : _this$props$max, _this$props$scrollToT = _this$props.scrollToTime, scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), "day") : _this$props$scrollToT, props = _objectWithoutPropertiesLoose(_this$props, _excluded$3);
    var range2 = Day2.range(date2, {
      localizer
    });
    return /* @__PURE__ */ jsx(TimeGrid, __spreadProps(__spreadValues({}, props), {
      range: range2,
      eventOffset: 10,
      localizer,
      min: min2,
      max: max2,
      scrollToTime
    }));
  };
  return Day2;
}(React.Component);
Day.propTypes = {};
Day.range = function(date2, _ref) {
  var localizer = _ref.localizer;
  return [localizer.startOf(date2, "day")];
};
Day.navigate = function(date2, action, _ref2) {
  var localizer = _ref2.localizer;
  switch (action) {
    case navigate$1.PREVIOUS:
      return localizer.add(date2, -1, "day");
    case navigate$1.NEXT:
      return localizer.add(date2, 1, "day");
    default:
      return date2;
  }
};
Day.title = function(date2, _ref3) {
  var localizer = _ref3.localizer;
  return localizer.format(date2, "dayHeaderFormat");
};
var _excluded$4 = ["date", "localizer", "min", "max", "scrollToTime"];
var Week = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Week2, _React$Component);
  function Week2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = Week2.prototype;
  _proto.render = function render() {
    var _this$props = this.props, date2 = _this$props.date, localizer = _this$props.localizer, _this$props$min = _this$props.min, min2 = _this$props$min === void 0 ? localizer.startOf(new Date(), "day") : _this$props$min, _this$props$max = _this$props.max, max2 = _this$props$max === void 0 ? localizer.endOf(new Date(), "day") : _this$props$max, _this$props$scrollToT = _this$props.scrollToTime, scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), "day") : _this$props$scrollToT, props = _objectWithoutPropertiesLoose(_this$props, _excluded$4);
    var range2 = Week2.range(date2, this.props);
    return /* @__PURE__ */ jsx(TimeGrid, __spreadProps(__spreadValues({}, props), {
      range: range2,
      eventOffset: 15,
      localizer,
      min: min2,
      max: max2,
      scrollToTime
    }));
  };
  return Week2;
}(React.Component);
Week.propTypes = {};
Week.defaultProps = TimeGrid.defaultProps;
Week.navigate = function(date2, action, _ref) {
  var localizer = _ref.localizer;
  switch (action) {
    case navigate$1.PREVIOUS:
      return localizer.add(date2, -1, "week");
    case navigate$1.NEXT:
      return localizer.add(date2, 1, "week");
    default:
      return date2;
  }
};
Week.range = function(date2, _ref2) {
  var localizer = _ref2.localizer;
  var firstOfWeek = localizer.startOfWeek();
  var start2 = localizer.startOf(date2, "week", firstOfWeek);
  var end2 = localizer.endOf(date2, "week", firstOfWeek);
  return localizer.range(start2, end2);
};
Week.title = function(date2, _ref3) {
  var localizer = _ref3.localizer;
  var _Week$range = Week.range(date2, {
    localizer
  }), start2 = _Week$range[0], rest = _Week$range.slice(1);
  return localizer.format({
    start: start2,
    end: rest.pop()
  }, "dayRangeHeaderFormat");
};
var _excluded$5 = ["date", "localizer", "min", "max", "scrollToTime"];
function workWeekRange(date2, options2) {
  return Week.range(date2, options2).filter(function(d) {
    return [6, 0].indexOf(d.getDay()) === -1;
  });
}
var WorkWeek = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(WorkWeek2, _React$Component);
  function WorkWeek2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = WorkWeek2.prototype;
  _proto.render = function render() {
    var _this$props = this.props, date2 = _this$props.date, localizer = _this$props.localizer, _this$props$min = _this$props.min, min2 = _this$props$min === void 0 ? localizer.startOf(new Date(), "day") : _this$props$min, _this$props$max = _this$props.max, max2 = _this$props$max === void 0 ? localizer.endOf(new Date(), "day") : _this$props$max, _this$props$scrollToT = _this$props.scrollToTime, scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), "day") : _this$props$scrollToT, props = _objectWithoutPropertiesLoose(_this$props, _excluded$5);
    var range2 = workWeekRange(date2, this.props);
    return /* @__PURE__ */ jsx(TimeGrid, __spreadProps(__spreadValues({}, props), {
      range: range2,
      eventOffset: 15,
      localizer,
      min: min2,
      max: max2,
      scrollToTime
    }));
  };
  return WorkWeek2;
}(React.Component);
WorkWeek.propTypes = {};
WorkWeek.defaultProps = TimeGrid.defaultProps;
WorkWeek.range = workWeekRange;
WorkWeek.navigate = Week.navigate;
WorkWeek.title = function(date2, _ref) {
  var localizer = _ref.localizer;
  var _workWeekRange = workWeekRange(date2, {
    localizer
  }), start2 = _workWeekRange[0], rest = _workWeekRange.slice(1);
  return localizer.format({
    start: start2,
    end: rest.pop()
  }, "dayRangeHeaderFormat");
};
function Agenda(_ref) {
  var accessors2 = _ref.accessors, components = _ref.components, date2 = _ref.date, events = _ref.events, getters = _ref.getters, length = _ref.length, localizer = _ref.localizer, onDoubleClickEvent = _ref.onDoubleClickEvent, onSelectEvent = _ref.onSelectEvent, selected = _ref.selected;
  var headerRef = _react_17_0_2_react.exports.useRef(null);
  var dateColRef = _react_17_0_2_react.exports.useRef(null);
  var timeColRef = _react_17_0_2_react.exports.useRef(null);
  var contentRef = _react_17_0_2_react.exports.useRef(null);
  var tbodyRef = _react_17_0_2_react.exports.useRef(null);
  _react_17_0_2_react.exports.useEffect(function() {
    _adjustHeader();
  });
  var renderDay = function renderDay2(day2, events2, dayKey) {
    var Event2 = components.event, AgendaDate = components.date;
    events2 = events2.filter(function(e) {
      return inRange$1(e, localizer.startOf(day2, "day"), localizer.endOf(day2, "day"), accessors2, localizer);
    });
    return events2.map(function(event, idx) {
      var title = accessors2.title(event);
      var end3 = accessors2.end(event);
      var start2 = accessors2.start(event);
      var userProps = getters.eventProp(event, start2, end3, isSelected$1(event, selected));
      var dateLabel = idx === 0 && localizer.format(day2, "agendaDateFormat");
      var first = idx === 0 ? /* @__PURE__ */ jsx("td", {
        rowSpan: events2.length,
        className: "rbc-agenda-date-cell",
        children: AgendaDate ? /* @__PURE__ */ jsx(AgendaDate, {
          day: day2,
          label: dateLabel
        }) : dateLabel
      }) : false;
      return /* @__PURE__ */ jsxs("tr", {
        className: userProps.className,
        style: userProps.style,
        children: [first, /* @__PURE__ */ jsx("td", {
          className: "rbc-agenda-time-cell",
          children: timeRangeLabel(day2, event)
        }), /* @__PURE__ */ jsx("td", {
          className: "rbc-agenda-event-cell",
          onClick: function onClick(e) {
            return onSelectEvent && onSelectEvent(event, e);
          },
          onDoubleClick: function onDoubleClick(e) {
            return onDoubleClickEvent && onDoubleClickEvent(event, e);
          },
          children: Event2 ? /* @__PURE__ */ jsx(Event2, {
            event,
            title
          }) : title
        })]
      }, dayKey + "_" + idx);
    }, []);
  };
  var timeRangeLabel = function timeRangeLabel2(day2, event) {
    var labelClass = "", TimeComponent = components.time, label = localizer.messages.allDay;
    var end3 = accessors2.end(event);
    var start2 = accessors2.start(event);
    if (!accessors2.allDay(event)) {
      if (localizer.eq(start2, end3)) {
        label = localizer.format(start2, "agendaTimeFormat");
      } else if (localizer.isSameDate(start2, end3)) {
        label = localizer.format({
          start: start2,
          end: end3
        }, "agendaTimeRangeFormat");
      } else if (localizer.isSameDate(day2, start2)) {
        label = localizer.format(start2, "agendaTimeFormat");
      } else if (localizer.isSameDate(day2, end3)) {
        label = localizer.format(end3, "agendaTimeFormat");
      }
    }
    if (localizer.gt(day2, start2, "day"))
      labelClass = "rbc-continues-prior";
    if (localizer.lt(day2, end3, "day"))
      labelClass += " rbc-continues-after";
    return /* @__PURE__ */ jsx("span", {
      className: labelClass.trim(),
      children: TimeComponent ? /* @__PURE__ */ jsx(TimeComponent, {
        event,
        day: day2,
        label
      }) : label
    });
  };
  var _adjustHeader = function _adjustHeader2() {
    if (!tbodyRef.current)
      return;
    var header = headerRef.current;
    var firstRow = tbodyRef.current.firstChild;
    if (!firstRow)
      return;
    var isOverflowing = contentRef.current.scrollHeight > contentRef.current.clientHeight;
    var _widths = [];
    var widths = _widths;
    _widths = [getWidth(firstRow.children[0]), getWidth(firstRow.children[1])];
    if (widths[0] !== _widths[0] || widths[1] !== _widths[1]) {
      dateColRef.current.style.width = _widths[0] + "px";
      timeColRef.current.style.width = _widths[1] + "px";
    }
    if (isOverflowing) {
      addClass(header, "rbc-header-overflowing");
      header.style.marginRight = scrollbarSize() + "px";
    } else {
      removeClass(header, "rbc-header-overflowing");
    }
  };
  var messages2 = localizer.messages;
  var end2 = localizer.add(date2, length, "day");
  var range2 = localizer.range(date2, end2, "day");
  events = events.filter(function(event) {
    return inRange$1(event, localizer.startOf(date2, "day"), localizer.endOf(end2, "day"), accessors2, localizer);
  });
  events.sort(function(a, b) {
    return +accessors2.start(a) - +accessors2.start(b);
  });
  return /* @__PURE__ */ jsx("div", {
    className: "rbc-agenda-view",
    children: events.length !== 0 ? /* @__PURE__ */ jsxs(Fragment, {
      children: [/* @__PURE__ */ jsx("table", {
        ref: headerRef,
        className: "rbc-agenda-table",
        children: /* @__PURE__ */ jsx("thead", {
          children: /* @__PURE__ */ jsxs("tr", {
            children: [/* @__PURE__ */ jsx("th", {
              className: "rbc-header",
              ref: dateColRef,
              children: messages2.date
            }), /* @__PURE__ */ jsx("th", {
              className: "rbc-header",
              ref: timeColRef,
              children: messages2.time
            }), /* @__PURE__ */ jsx("th", {
              className: "rbc-header",
              children: messages2.event
            })]
          })
        })
      }), /* @__PURE__ */ jsx("div", {
        className: "rbc-agenda-content",
        ref: contentRef,
        children: /* @__PURE__ */ jsx("table", {
          className: "rbc-agenda-table",
          children: /* @__PURE__ */ jsx("tbody", {
            ref: tbodyRef,
            children: range2.map(function(day2, idx) {
              return renderDay(day2, events, idx);
            })
          })
        })
      })]
    }) : /* @__PURE__ */ jsx("span", {
      className: "rbc-agenda-empty",
      children: messages2.noEventsInRange
    })
  });
}
Agenda.propTypes = {};
Agenda.defaultProps = {
  length: 30
};
Agenda.range = function(start2, _ref2) {
  var _ref2$length = _ref2.length, length = _ref2$length === void 0 ? Agenda.defaultProps.length : _ref2$length, localizer = _ref2.localizer;
  var end2 = localizer.add(start2, length, "day");
  return {
    start: start2,
    end: end2
  };
};
Agenda.navigate = function(date2, action, _ref3) {
  var _ref3$length = _ref3.length, length = _ref3$length === void 0 ? Agenda.defaultProps.length : _ref3$length, localizer = _ref3.localizer;
  switch (action) {
    case navigate$1.PREVIOUS:
      return localizer.add(date2, -length, "day");
    case navigate$1.NEXT:
      return localizer.add(date2, length, "day");
    default:
      return date2;
  }
};
Agenda.title = function(start2, _ref4) {
  var _ref4$length = _ref4.length, length = _ref4$length === void 0 ? Agenda.defaultProps.length : _ref4$length, localizer = _ref4.localizer;
  var end2 = localizer.add(start2, length, "day");
  return localizer.format({
    start: start2,
    end: end2
  }, "agendaHeaderFormat");
};
var _VIEWS;
var VIEWS = (_VIEWS = {}, _VIEWS[views$1.MONTH] = MonthView, _VIEWS[views$1.WEEK] = Week, _VIEWS[views$1.WORK_WEEK] = WorkWeek, _VIEWS[views$1.DAY] = Day, _VIEWS[views$1.AGENDA] = Agenda, _VIEWS);
var _excluded$6 = ["action", "date", "today"];
function moveDate(View, _ref) {
  var action = _ref.action, date2 = _ref.date, today = _ref.today, props = _objectWithoutPropertiesLoose(_ref, _excluded$6);
  View = typeof View === "string" ? VIEWS[View] : View;
  switch (action) {
    case navigate$1.TODAY:
      date2 = today || new Date();
      break;
    case navigate$1.DATE:
      break;
    default:
      !(View && typeof View.navigate === "function") ? browser(false) : void 0;
      date2 = View.navigate(date2, action, props);
  }
  return date2;
}
var Toolbar = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Toolbar2, _React$Component);
  function Toolbar2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.navigate = function(action) {
      _this.props.onNavigate(action);
    };
    _this.view = function(view) {
      _this.props.onView(view);
    };
    return _this;
  }
  var _proto = Toolbar2.prototype;
  _proto.render = function render() {
    var _this$props = this.props, messages2 = _this$props.localizer.messages, label = _this$props.label;
    return /* @__PURE__ */ jsxs("div", {
      className: "rbc-toolbar",
      children: [/* @__PURE__ */ jsxs("span", {
        className: "rbc-btn-group",
        children: [/* @__PURE__ */ jsx("button", {
          type: "button",
          onClick: this.navigate.bind(null, navigate$1.TODAY),
          children: messages2.today
        }), /* @__PURE__ */ jsx("button", {
          type: "button",
          onClick: this.navigate.bind(null, navigate$1.PREVIOUS),
          children: messages2.previous
        }), /* @__PURE__ */ jsx("button", {
          type: "button",
          onClick: this.navigate.bind(null, navigate$1.NEXT),
          children: messages2.next
        })]
      }), /* @__PURE__ */ jsx("span", {
        className: "rbc-toolbar-label",
        children: label
      }), /* @__PURE__ */ jsx("span", {
        className: "rbc-btn-group",
        children: this.viewNamesGroup(messages2)
      })]
    });
  };
  _proto.viewNamesGroup = function viewNamesGroup(messages2) {
    var _this2 = this;
    var viewNames2 = this.props.views;
    var view = this.props.view;
    if (viewNames2.length > 1) {
      return viewNames2.map(function(name) {
        return /* @__PURE__ */ jsx("button", {
          type: "button",
          className: clsx({
            "rbc-active": view === name
          }),
          onClick: _this2.view.bind(null, name),
          children: messages2[name]
        }, name);
      });
    }
  };
  return Toolbar2;
}(React.Component);
Toolbar.propTypes = {};
function accessor$1(data, field) {
  var value = null;
  if (typeof field === "function")
    value = field(data);
  else if (typeof field === "string" && typeof data === "object" && data != null && field in data)
    value = data[field];
  return value;
}
var wrapAccessor$1 = function wrapAccessor2(acc) {
  return function(data) {
    return accessor$1(data, acc);
  };
};
var _excluded$7 = ["view", "date", "getNow", "onNavigate"], _excluded2$1 = ["view", "toolbar", "events", "backgroundEvents", "style", "className", "elementProps", "date", "getNow", "length", "showMultiDayTimes", "onShowMore", "doShowMoreDrillDown", "components", "formats", "messages", "culture"];
function viewNames$1$1(_views) {
  return !Array.isArray(_views) ? Object.keys(_views) : _views;
}
function isValidView(view, _ref) {
  var _views = _ref.views;
  var names = viewNames$1$1(_views);
  return names.indexOf(view) !== -1;
}
var Calendar = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Calendar2, _React$Component);
  function Calendar2() {
    var _this;
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
    _this.getViews = function() {
      var views2 = _this.props.views;
      if (Array.isArray(views2)) {
        return transform(views2, function(obj, name) {
          return obj[name] = VIEWS[name];
        }, {});
      }
      if (typeof views2 === "object") {
        return mapValues(views2, function(value, key) {
          if (value === true) {
            return VIEWS[key];
          }
          return value;
        });
      }
      return VIEWS;
    };
    _this.getView = function() {
      var views2 = _this.getViews();
      return views2[_this.props.view];
    };
    _this.getDrilldownView = function(date2) {
      var _this$props = _this.props, view = _this$props.view, drilldownView = _this$props.drilldownView, getDrilldownView = _this$props.getDrilldownView;
      if (!getDrilldownView)
        return drilldownView;
      return getDrilldownView(date2, view, Object.keys(_this.getViews()));
    };
    _this.handleRangeChange = function(date2, viewComponent, view) {
      var _this$props2 = _this.props, onRangeChange = _this$props2.onRangeChange, localizer = _this$props2.localizer;
      if (onRangeChange) {
        if (viewComponent.range) {
          onRangeChange(viewComponent.range(date2, {
            localizer
          }), view);
        }
      }
    };
    _this.handleNavigate = function(action, newDate) {
      var _this$props3 = _this.props, view = _this$props3.view, date2 = _this$props3.date, getNow2 = _this$props3.getNow, onNavigate = _this$props3.onNavigate, props = _objectWithoutPropertiesLoose(_this$props3, _excluded$7);
      var ViewComponent = _this.getView();
      var today = getNow2();
      date2 = moveDate(ViewComponent, _extends$1({}, props, {
        action,
        date: newDate || date2 || today,
        today
      }));
      onNavigate(date2, view, action);
      _this.handleRangeChange(date2, ViewComponent);
    };
    _this.handleViewChange = function(view) {
      if (view !== _this.props.view && isValidView(view, _this.props)) {
        _this.props.onView(view);
      }
      var views2 = _this.getViews();
      _this.handleRangeChange(_this.props.date || _this.props.getNow(), views2[view], view);
    };
    _this.handleSelectEvent = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      notify(_this.props.onSelectEvent, args);
    };
    _this.handleDoubleClickEvent = function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      notify(_this.props.onDoubleClickEvent, args);
    };
    _this.handleKeyPressEvent = function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      notify(_this.props.onKeyPressEvent, args);
    };
    _this.handleSelectSlot = function(slotInfo) {
      notify(_this.props.onSelectSlot, slotInfo);
    };
    _this.handleDrillDown = function(date2, view) {
      var onDrillDown = _this.props.onDrillDown;
      if (onDrillDown) {
        onDrillDown(date2, view, _this.drilldownView);
        return;
      }
      if (view)
        _this.handleViewChange(view);
      _this.handleNavigate(navigate$1.DATE, date2);
    };
    _this.state = {
      context: _this.getContext(_this.props)
    };
    return _this;
  }
  var _proto = Calendar2.prototype;
  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    this.setState({
      context: this.getContext(nextProps)
    });
  };
  _proto.getContext = function getContext(_ref2) {
    var startAccessor = _ref2.startAccessor, endAccessor = _ref2.endAccessor, allDayAccessor = _ref2.allDayAccessor, tooltipAccessor = _ref2.tooltipAccessor, titleAccessor = _ref2.titleAccessor, resourceAccessor = _ref2.resourceAccessor, resourceIdAccessor = _ref2.resourceIdAccessor, resourceTitleAccessor = _ref2.resourceTitleAccessor, eventPropGetter = _ref2.eventPropGetter, backgroundEventPropGetter = _ref2.backgroundEventPropGetter, slotPropGetter = _ref2.slotPropGetter, slotGroupPropGetter = _ref2.slotGroupPropGetter, dayPropGetter = _ref2.dayPropGetter, view = _ref2.view, views2 = _ref2.views, localizer = _ref2.localizer, culture = _ref2.culture, _ref2$messages = _ref2.messages, messages$1 = _ref2$messages === void 0 ? {} : _ref2$messages, _ref2$components = _ref2.components, components = _ref2$components === void 0 ? {} : _ref2$components, _ref2$formats = _ref2.formats, formats2 = _ref2$formats === void 0 ? {} : _ref2$formats;
    var names = viewNames$1$1(views2);
    var msgs = messages(messages$1);
    return {
      viewNames: names,
      localizer: mergeWithDefaults(localizer, culture, formats2, msgs),
      getters: {
        eventProp: function eventProp() {
          return eventPropGetter && eventPropGetter.apply(void 0, arguments) || {};
        },
        backgroundEventProp: function backgroundEventProp() {
          return backgroundEventPropGetter && backgroundEventPropGetter.apply(void 0, arguments) || {};
        },
        slotProp: function slotProp() {
          return slotPropGetter && slotPropGetter.apply(void 0, arguments) || {};
        },
        slotGroupProp: function slotGroupProp() {
          return slotGroupPropGetter && slotGroupPropGetter.apply(void 0, arguments) || {};
        },
        dayProp: function dayProp() {
          return dayPropGetter && dayPropGetter.apply(void 0, arguments) || {};
        }
      },
      components: defaults$1(components[view] || {}, omit$1(components, names), {
        eventWrapper: NoopWrapper$1,
        backgroundEventWrapper: NoopWrapper$1,
        eventContainerWrapper: NoopWrapper$1,
        dateCellWrapper: NoopWrapper$1,
        weekWrapper: NoopWrapper$1,
        timeSlotWrapper: NoopWrapper$1
      }),
      accessors: {
        start: wrapAccessor$1(startAccessor),
        end: wrapAccessor$1(endAccessor),
        allDay: wrapAccessor$1(allDayAccessor),
        tooltip: wrapAccessor$1(tooltipAccessor),
        title: wrapAccessor$1(titleAccessor),
        resource: wrapAccessor$1(resourceAccessor),
        resourceId: wrapAccessor$1(resourceIdAccessor),
        resourceTitle: wrapAccessor$1(resourceTitleAccessor)
      }
    };
  };
  _proto.render = function render() {
    var _this$props4 = this.props, view = _this$props4.view, toolbar = _this$props4.toolbar, events = _this$props4.events, _this$props4$backgrou = _this$props4.backgroundEvents, backgroundEvents = _this$props4$backgrou === void 0 ? [] : _this$props4$backgrou, style2 = _this$props4.style, className = _this$props4.className, elementProps = _this$props4.elementProps, current = _this$props4.date, getNow2 = _this$props4.getNow, length = _this$props4.length, showMultiDayTimes = _this$props4.showMultiDayTimes, onShowMore = _this$props4.onShowMore, doShowMoreDrillDown = _this$props4.doShowMoreDrillDown;
    _this$props4.components;
    _this$props4.formats;
    _this$props4.messages;
    _this$props4.culture;
    var props = _objectWithoutPropertiesLoose(_this$props4, _excluded2$1);
    current = current || getNow2();
    var View = this.getView();
    var _this$state$context = this.state.context, accessors2 = _this$state$context.accessors, components = _this$state$context.components, getters = _this$state$context.getters, localizer = _this$state$context.localizer, viewNames2 = _this$state$context.viewNames;
    var CalToolbar = components.toolbar || Toolbar;
    var label = View.title(current, {
      localizer,
      length
    });
    return /* @__PURE__ */ jsxs("div", __spreadProps(__spreadValues({}, elementProps), {
      className: clsx(className, "rbc-calendar", props.rtl && "rbc-rtl"),
      style: style2,
      children: [toolbar && /* @__PURE__ */ jsx(CalToolbar, {
        date: current,
        view,
        views: viewNames2,
        label,
        onView: this.handleViewChange,
        onNavigate: this.handleNavigate,
        localizer
      }), /* @__PURE__ */ jsx(View, __spreadProps(__spreadValues({}, props), {
        events,
        backgroundEvents,
        date: current,
        getNow: getNow2,
        length,
        localizer,
        getters,
        components,
        accessors: accessors2,
        showMultiDayTimes,
        getDrilldownView: this.getDrilldownView,
        onNavigate: this.handleNavigate,
        onDrillDown: this.handleDrillDown,
        onSelectEvent: this.handleSelectEvent,
        onDoubleClickEvent: this.handleDoubleClickEvent,
        onKeyPressEvent: this.handleKeyPressEvent,
        onSelectSlot: this.handleSelectSlot,
        onShowMore,
        doShowMoreDrillDown
      }))]
    }));
  };
  return Calendar2;
}(React.Component);
Calendar.defaultProps = {
  elementProps: {},
  popup: false,
  toolbar: true,
  view: views$1.MONTH,
  views: [views$1.MONTH, views$1.WEEK, views$1.DAY, views$1.AGENDA],
  step: 30,
  length: 30,
  doShowMoreDrillDown: true,
  drilldownView: views$1.DAY,
  titleAccessor: "title",
  tooltipAccessor: "title",
  allDayAccessor: "allDay",
  startAccessor: "start",
  endAccessor: "end",
  resourceAccessor: "resourceId",
  resourceIdAccessor: "id",
  resourceTitleAccessor: "title",
  longPressThreshold: 250,
  getNow: function getNow() {
    return new Date();
  },
  dayLayoutAlgorithm: "overlap"
};
Calendar.propTypes = {};
var Calendar$1 = uncontrollable(Calendar, {
  view: "onView",
  date: "onNavigate",
  selected: "onSelectEvent"
});
var weekRangeFormat = function weekRangeFormat2(_ref, culture, local) {
  var start2 = _ref.start, end2 = _ref.end;
  return local.format(start2, "MMMM DD", culture) + " \u2013 " + local.format(end2, local.eq(start2, end2, "month") ? "DD" : "MMMM DD", culture);
};
var dateRangeFormat$1 = function dateRangeFormat(_ref2, culture, local) {
  var start2 = _ref2.start, end2 = _ref2.end;
  return local.format(start2, "L", culture) + " \u2013 " + local.format(end2, "L", culture);
};
var timeRangeFormat = function timeRangeFormat2(_ref3, culture, local) {
  var start2 = _ref3.start, end2 = _ref3.end;
  return local.format(start2, "LT", culture) + " \u2013 " + local.format(end2, "LT", culture);
};
var timeRangeStartFormat = function timeRangeStartFormat2(_ref4, culture, local) {
  var start2 = _ref4.start;
  return local.format(start2, "LT", culture) + " \u2013 ";
};
var timeRangeEndFormat = function timeRangeEndFormat2(_ref5, culture, local) {
  var end2 = _ref5.end;
  return " \u2013 " + local.format(end2, "LT", culture);
};
var formats = {
  dateFormat: "DD",
  dayFormat: "DD ddd",
  weekdayFormat: "ddd",
  selectRangeFormat: timeRangeFormat,
  eventTimeRangeFormat: timeRangeFormat,
  eventTimeRangeStartFormat: timeRangeStartFormat,
  eventTimeRangeEndFormat: timeRangeEndFormat,
  timeGutterFormat: "LT",
  monthHeaderFormat: "MMMM YYYY",
  dayHeaderFormat: "dddd MMM DD",
  dayRangeHeaderFormat: weekRangeFormat,
  agendaHeaderFormat: dateRangeFormat$1,
  agendaDateFormat: "ddd MMM DD",
  agendaTimeFormat: "LT",
  agendaTimeRangeFormat: timeRangeFormat
};
function fixUnit(unit) {
  var datePart = unit ? unit.toLowerCase() : unit;
  if (datePart === "FullYear") {
    datePart = "year";
  } else if (!datePart) {
    datePart = void 0;
  }
  return datePart;
}
function moment(moment2) {
  var locale2 = function locale3(m2, c) {
    return c ? m2.locale(c) : m2;
  };
  function defineComparators(a, b, unit) {
    var datePart = fixUnit(unit);
    var dtA = datePart ? moment2(a).startOf(datePart) : moment2(a);
    var dtB = datePart ? moment2(b).startOf(datePart) : moment2(b);
    return [dtA, dtB, datePart];
  }
  function startOf2(date2, unit) {
    if (date2 === void 0) {
      date2 = null;
    }
    var datePart = fixUnit(unit);
    if (datePart) {
      return moment2(date2).startOf(datePart).toDate();
    }
    return moment2(date2).toDate();
  }
  function endOf2(date2, unit) {
    if (date2 === void 0) {
      date2 = null;
    }
    var datePart = fixUnit(unit);
    if (datePart) {
      return moment2(date2).endOf(datePart).toDate();
    }
    return moment2(date2).toDate();
  }
  function eq2(a, b, unit) {
    var _defineComparators = defineComparators(a, b, unit), dtA = _defineComparators[0], dtB = _defineComparators[1], datePart = _defineComparators[2];
    return dtA.isSame(dtB, datePart);
  }
  function neq2(a, b, unit) {
    return !eq2(a, b, unit);
  }
  function gt2(a, b, unit) {
    var _defineComparators2 = defineComparators(a, b, unit), dtA = _defineComparators2[0], dtB = _defineComparators2[1], datePart = _defineComparators2[2];
    return dtA.isAfter(dtB, datePart);
  }
  function lt2(a, b, unit) {
    var _defineComparators3 = defineComparators(a, b, unit), dtA = _defineComparators3[0], dtB = _defineComparators3[1], datePart = _defineComparators3[2];
    return dtA.isBefore(dtB, datePart);
  }
  function gte2(a, b, unit) {
    var _defineComparators4 = defineComparators(a, b, unit), dtA = _defineComparators4[0], dtB = _defineComparators4[1], datePart = _defineComparators4[2];
    return dtA.isSameOrBefore(dtB, datePart);
  }
  function lte2(a, b, unit) {
    var _defineComparators5 = defineComparators(a, b, unit), dtA = _defineComparators5[0], dtB = _defineComparators5[1], datePart = _defineComparators5[2];
    return dtA.isSameOrBefore(dtB, datePart);
  }
  function inRange2(day2, min3, max3, unit) {
    if (unit === void 0) {
      unit = "day";
    }
    var datePart = fixUnit(unit);
    var mDay = moment2(day2);
    var mMin = moment2(min3);
    var mMax = moment2(max3);
    return mDay.isBetween(mMin, mMax, datePart, "[]");
  }
  function min2(dateA, dateB) {
    var dtA = moment2(dateA);
    var dtB = moment2(dateB);
    var minDt = moment2.min(dtA, dtB);
    return minDt.toDate();
  }
  function max2(dateA, dateB) {
    var dtA = moment2(dateA);
    var dtB = moment2(dateB);
    var maxDt = moment2.max(dtA, dtB);
    return maxDt.toDate();
  }
  function merge2(date2, time) {
    if (!date2 && !time)
      return null;
    var tm = moment2(time).format("HH:mm:ss");
    var dt = moment2(date2).startOf("day").format("MM/DD/YYYY");
    return moment2(dt + " " + tm, "MM/DD/YYYY HH:mm:ss").toDate();
  }
  function add2(date2, adder, unit) {
    var datePart = fixUnit(unit);
    return moment2(date2).add(adder, datePart).toDate();
  }
  function range2(start2, end2, unit) {
    if (unit === void 0) {
      unit = "day";
    }
    var datePart = fixUnit(unit);
    var current = moment2(start2).toDate();
    var days = [];
    while (lte2(current, end2)) {
      days.push(current);
      current = add2(current, 1, datePart);
    }
    return days;
  }
  function ceil2(date2, unit) {
    var datePart = fixUnit(unit);
    var floor = startOf2(date2, datePart);
    return eq2(floor, date2) ? floor : add2(floor, 1, datePart);
  }
  function diff2(a, b, unit) {
    if (unit === void 0) {
      unit = "day";
    }
    var datePart = fixUnit(unit);
    var dtA = moment2(a);
    var dtB = moment2(b);
    return dtB.diff(dtA, datePart);
  }
  function minutes2(date2) {
    var dt = moment2(date2);
    return dt.minutes();
  }
  function firstOfWeek(culture) {
    var data = culture ? moment2.localeData(culture) : moment2.localeData();
    return data ? data.firstDayOfWeek() : 0;
  }
  function firstVisibleDay2(date2) {
    return moment2(date2).startOf("month").startOf("week").toDate();
  }
  function lastVisibleDay2(date2) {
    return moment2(date2).endOf("month").endOf("week").toDate();
  }
  function visibleDays2(date2) {
    var current = firstVisibleDay2(date2);
    var last2 = lastVisibleDay2(date2);
    var days = [];
    while (lte2(current, last2)) {
      days.push(current);
      current = add2(current, 1, "d");
    }
    return days;
  }
  function getSlotDate2(dt, minutesFromMidnight, offset2) {
    return moment2(dt).startOf("day").minute(minutesFromMidnight + offset2).toDate();
  }
  function getTotalMin2(start2, end2) {
    return diff2(start2, end2, "minutes");
  }
  function getMinutesFromMidnight2(start2) {
    var dayStart = moment2(start2).startOf("day");
    var day2 = moment2(start2);
    return day2.diff(dayStart, "minutes");
  }
  function continuesPrior2(start2, first) {
    var mStart = moment2(start2);
    var mFirst = moment2(first);
    return mStart.isBefore(mFirst, "day");
  }
  function continuesAfter2(start2, end2, last2) {
    var mEnd = moment2(end2);
    var mLast = moment2(last2);
    return mEnd.isSameOrAfter(mLast, "minutes");
  }
  function sortEvents2(_ref6) {
    var _ref6$evtA = _ref6.evtA, aStart = _ref6$evtA.start, aEnd = _ref6$evtA.end, aAllDay = _ref6$evtA.allDay, _ref6$evtB = _ref6.evtB, bStart = _ref6$evtB.start, bEnd = _ref6$evtB.end, bAllDay = _ref6$evtB.allDay;
    var startSort = +startOf2(aStart, "day") - +startOf2(bStart, "day");
    var durA = diff2(aStart, ceil2(aEnd, "day"), "day");
    var durB = diff2(bStart, ceil2(bEnd, "day"), "day");
    return startSort || Math.max(durB, 1) - Math.max(durA, 1) || !!bAllDay - !!aAllDay || +aStart - +bStart || +aEnd - +bEnd;
  }
  function inEventRange2(_ref7) {
    var _ref7$event = _ref7.event, start2 = _ref7$event.start, end2 = _ref7$event.end, _ref7$range = _ref7.range, rangeStart = _ref7$range.start, rangeEnd = _ref7$range.end;
    var startOfDay = moment2(start2).startOf("day");
    var eEnd = moment2(end2);
    var rStart = moment2(rangeStart);
    var rEnd = moment2(rangeEnd);
    var startsBeforeEnd = startOfDay.isSameOrBefore(rEnd, "day");
    var sameMin = !startOfDay.isSame(eEnd, "minutes");
    var endsAfterStart = sameMin ? eEnd.isAfter(rStart, "minutes") : eEnd.isSameOrAfter(rStart, "minutes");
    return startsBeforeEnd && endsAfterStart;
  }
  function isSameDate2(date1, date2) {
    var dt = moment2(date1);
    var dt2 = moment2(date2);
    return dt.isSame(dt2, "date");
  }
  function browserTZOffset() {
    var dt = new Date();
    var neg = /-/.test(dt.toString()) ? "-" : "";
    var dtOffset = dt.getTimezoneOffset();
    var comparator = Number("" + neg + Math.abs(dtOffset));
    var mtOffset = moment2().utcOffset();
    return mtOffset > comparator ? 1 : 0;
  }
  return new DateLocalizer({
    formats,
    firstOfWeek,
    firstVisibleDay: firstVisibleDay2,
    lastVisibleDay: lastVisibleDay2,
    visibleDays: visibleDays2,
    format: function format(value, _format2, culture) {
      return locale2(moment2(value), culture).format(_format2);
    },
    lt: lt2,
    lte: lte2,
    gt: gt2,
    gte: gte2,
    eq: eq2,
    neq: neq2,
    merge: merge2,
    inRange: inRange2,
    startOf: startOf2,
    endOf: endOf2,
    range: range2,
    add: add2,
    diff: diff2,
    ceil: ceil2,
    min: min2,
    max: max2,
    minutes: minutes2,
    getSlotDate: getSlotDate2,
    getTotalMin: getTotalMin2,
    getMinutesFromMidnight: getMinutesFromMidnight2,
    continuesPrior: continuesPrior2,
    continuesAfter: continuesAfter2,
    sortEvents: sortEvents2,
    inEventRange: inEventRange2,
    isSameDate: isSameDate2,
    browserTZOffset
  });
}
var dragAndDrop = { exports: {} };
var interopRequireDefault = { exports: {} };
(function(module2) {
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }
  module2.exports = _interopRequireDefault2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
})(interopRequireDefault);
var withDragAndDrop$1 = { exports: {} };
var _extends = { exports: {} };
(function(module2) {
  function _extends3() {
    module2.exports = _extends3 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    return _extends3.apply(this, arguments);
  }
  module2.exports = _extends3, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
})(_extends);
var objectWithoutPropertiesLoose = { exports: {} };
(function(module2) {
  function _objectWithoutPropertiesLoose3(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  module2.exports = _objectWithoutPropertiesLoose3, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
})(objectWithoutPropertiesLoose);
var inheritsLoose = { exports: {} };
var setPrototypeOf = { exports: {} };
(function(module2) {
  function _setPrototypeOf2(o, p2) {
    module2.exports = _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    return _setPrototypeOf2(o, p2);
  }
  module2.exports = _setPrototypeOf2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
})(setPrototypeOf);
(function(module2) {
  var setPrototypeOf$1 = setPrototypeOf.exports;
  function _inheritsLoose2(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf$1(subClass, superClass);
  }
  module2.exports = _inheritsLoose2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
})(inheritsLoose);
var require$$6 = /* @__PURE__ */ getAugmentedNamespace(clsx_m);
var constants = {};
constants.__esModule = true;
constants.views = constants.navigate = void 0;
var navigate = {
  PREVIOUS: "PREV",
  NEXT: "NEXT",
  TODAY: "TODAY",
  DATE: "DATE"
};
constants.navigate = navigate;
var views = {
  MONTH: "month",
  WEEK: "week",
  WORK_WEEK: "work_week",
  DAY: "day",
  AGENDA: "agenda"
};
constants.views = views;
var _interopRequireDefault$5 = interopRequireDefault.exports;
var _propTypes = _interopRequireDefault$5(_propTypes_15_7_2_propTypes.exports);
var _constants = constants;
var viewNames = Object.keys(_constants.views).map(function(k) {
  return _constants.views[k];
});
_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]);
_propTypes.default.any;
_propTypes.default.func;
_propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOf(viewNames)), _propTypes.default.objectOf(function(prop, key) {
  var isBuiltinView = viewNames.indexOf(key) !== -1 && typeof prop[key] === "boolean";
  if (isBuiltinView) {
    return null;
  } else {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    return _propTypes.default.elementType.apply(_propTypes.default, [prop, key].concat(args));
  }
})]);
_propTypes.default.oneOfType([_propTypes.default.oneOf(["overlap", "no-overlap"]), _propTypes.default.func]);
var EventWrapper = { exports: {} };
var accessors = {};
accessors.__esModule = true;
accessors.accessor = accessor;
accessors.wrapAccessor = void 0;
function accessor(data, field) {
  var value = null;
  if (typeof field === "function")
    value = field(data);
  else if (typeof field === "string" && typeof data === "object" && data != null && field in data)
    value = data[field];
  return value;
}
var wrapAccessor = function wrapAccessor3(acc) {
  return function(data) {
    return accessor(data, acc);
  };
};
accessors.wrapAccessor = wrapAccessor;
var DnDContext$1 = {};
var _interopRequireDefault$4 = interopRequireDefault.exports;
DnDContext$1.__esModule = true;
DnDContext$1.DnDContext = void 0;
var _react$1 = _interopRequireDefault$4(_react_17_0_2_react.exports);
var DnDContext = /* @__PURE__ */ _react$1.default.createContext();
DnDContext$1.DnDContext = DnDContext;
(function(module2, exports2) {
  var _interopRequireDefault2 = interopRequireDefault.exports;
  exports2.__esModule = true;
  exports2.default = void 0;
  var _inheritsLoose2 = _interopRequireDefault2(inheritsLoose.exports);
  _interopRequireDefault2(_propTypes_15_7_2_propTypes.exports);
  var _react2 = _interopRequireDefault2(_react_17_0_2_react.exports);
  var _clsx = _interopRequireDefault2(require$$6);
  var _accessors2 = accessors;
  var _DnDContext = DnDContext$1;
  var EventWrapper2 = /* @__PURE__ */ function(_React$Component) {
    (0, _inheritsLoose2.default)(EventWrapper3, _React$Component);
    function EventWrapper3() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.handleResizeUp = function(e) {
        if (e.button !== 0)
          return;
        _this.context.draggable.onBeginAction(_this.props.event, "resize", "UP");
      };
      _this.handleResizeDown = function(e) {
        if (e.button !== 0)
          return;
        _this.context.draggable.onBeginAction(_this.props.event, "resize", "DOWN");
      };
      _this.handleResizeLeft = function(e) {
        if (e.button !== 0)
          return;
        _this.context.draggable.onBeginAction(_this.props.event, "resize", "LEFT");
      };
      _this.handleResizeRight = function(e) {
        if (e.button !== 0)
          return;
        _this.context.draggable.onBeginAction(_this.props.event, "resize", "RIGHT");
      };
      _this.handleStartDragging = function(e) {
        if (e.button !== 0)
          return;
        var isResizeHandle = e.target.className.includes("rbc-addons-dnd-resize");
        if (!isResizeHandle)
          _this.context.draggable.onBeginAction(_this.props.event, "move");
      };
      return _this;
    }
    var _proto = EventWrapper3.prototype;
    _proto.renderAnchor = function renderAnchor(direction) {
      var cls = direction === "Up" || direction === "Down" ? "ns" : "ew";
      return /* @__PURE__ */ _react2.default.createElement("div", {
        className: "rbc-addons-dnd-resize-" + cls + "-anchor",
        onMouseDown: this["handleResize" + direction]
      }, /* @__PURE__ */ _react2.default.createElement("div", {
        className: "rbc-addons-dnd-resize-" + cls + "-icon"
      }));
    };
    _proto.render = function render() {
      var _this$props = this.props, event = _this$props.event, type = _this$props.type, continuesPrior2 = _this$props.continuesPrior, continuesAfter2 = _this$props.continuesAfter, resizable = _this$props.resizable;
      var children = this.props.children;
      if (event.__isPreview)
        return /* @__PURE__ */ _react2.default.cloneElement(children, {
          className: (0, _clsx.default)(children.props.className, "rbc-addons-dnd-drag-preview")
        });
      var draggable = this.context.draggable;
      var draggableAccessor = draggable.draggableAccessor, resizableAccessor = draggable.resizableAccessor;
      var isDraggable = draggableAccessor ? !!(0, _accessors2.accessor)(event, draggableAccessor) : true;
      if (!isDraggable) {
        return children;
      }
      var isResizable = resizable && (resizableAccessor ? !!(0, _accessors2.accessor)(event, resizableAccessor) : true);
      if (isResizable || isDraggable) {
        var newProps = {
          onMouseDown: this.handleStartDragging,
          onTouchStart: this.handleStartDragging
        };
        if (isResizable) {
          var StartAnchor = null;
          var EndAnchor = null;
          if (type === "date") {
            StartAnchor = !continuesPrior2 && this.renderAnchor("Left");
            EndAnchor = !continuesAfter2 && this.renderAnchor("Right");
          } else {
            StartAnchor = !continuesPrior2 && this.renderAnchor("Up");
            EndAnchor = !continuesAfter2 && this.renderAnchor("Down");
          }
          newProps.children = /* @__PURE__ */ _react2.default.createElement("div", {
            className: "rbc-addons-dnd-resizable"
          }, StartAnchor, children.props.children, EndAnchor);
        }
        if (draggable.dragAndDropAction.interacting && draggable.dragAndDropAction.event === event) {
          newProps.className = (0, _clsx.default)(children.props.className, "rbc-addons-dnd-dragged-event");
        }
        children = /* @__PURE__ */ _react2.default.cloneElement(children, newProps);
      }
      return children;
    };
    return EventWrapper3;
  }(_react2.default.Component);
  EventWrapper2.contextType = _DnDContext.DnDContext;
  EventWrapper2.propTypes = {};
  var _default2 = EventWrapper2;
  exports2.default = _default2;
  module2.exports = exports2.default;
})(EventWrapper, EventWrapper.exports);
var EventContainerWrapper = { exports: {} };
var Selection$1 = {};
var require$$1 = /* @__PURE__ */ getAugmentedNamespace(contains$2);
var require$$2 = /* @__PURE__ */ getAugmentedNamespace(closest$1);
var require$$3 = /* @__PURE__ */ getAugmentedNamespace(listen$1);
var _interopRequireDefault$3 = interopRequireDefault.exports;
Selection$1.__esModule = true;
Selection$1.getEventNodeFromPoint = getEventNodeFromPoint;
Selection$1.isEvent = isEvent;
Selection$1.objectsCollide = objectsCollide;
Selection$1.getBoundsForNode = getBoundsForNode;
Selection$1.default = void 0;
var _contains = _interopRequireDefault$3(require$$1);
var _closest = _interopRequireDefault$3(require$$2);
var _listen = _interopRequireDefault$3(require$$3);
function addEventListener(type, handler, target) {
  if (target === void 0) {
    target = document;
  }
  return (0, _listen.default)(target, type, handler, {
    passive: false
  });
}
function isOverContainer(container, x2, y2) {
  return !container || (0, _contains.default)(container, document.elementFromPoint(x2, y2));
}
function getEventNodeFromPoint(node, _ref) {
  var clientX = _ref.clientX, clientY = _ref.clientY;
  var target = document.elementFromPoint(clientX, clientY);
  return (0, _closest.default)(target, ".rbc-event", node);
}
function isEvent(node, bounds) {
  return !!getEventNodeFromPoint(node, bounds);
}
function getEventCoordinates(e) {
  var target = e;
  if (e.touches && e.touches.length) {
    target = e.touches[0];
  }
  return {
    clientX: target.clientX,
    clientY: target.clientY,
    pageX: target.pageX,
    pageY: target.pageY
  };
}
var clickTolerance = 5;
var clickInterval = 250;
var Selection = /* @__PURE__ */ function() {
  function Selection2(node, _temp) {
    var _ref2 = _temp === void 0 ? {} : _temp, _ref2$global = _ref2.global, global2 = _ref2$global === void 0 ? false : _ref2$global, _ref2$longPressThresh = _ref2.longPressThreshold, longPressThreshold = _ref2$longPressThresh === void 0 ? 250 : _ref2$longPressThresh;
    this.isDetached = false;
    this.container = node;
    this.globalMouse = !node || global2;
    this.longPressThreshold = longPressThreshold;
    this._listeners = Object.create(null);
    this._handleInitialEvent = this._handleInitialEvent.bind(this);
    this._handleMoveEvent = this._handleMoveEvent.bind(this);
    this._handleTerminatingEvent = this._handleTerminatingEvent.bind(this);
    this._keyListener = this._keyListener.bind(this);
    this._dropFromOutsideListener = this._dropFromOutsideListener.bind(this);
    this._dragOverFromOutsideListener = this._dragOverFromOutsideListener.bind(this);
    this._removeTouchMoveWindowListener = addEventListener("touchmove", function() {
    }, window);
    this._removeKeyDownListener = addEventListener("keydown", this._keyListener);
    this._removeKeyUpListener = addEventListener("keyup", this._keyListener);
    this._removeDropFromOutsideListener = addEventListener("drop", this._dropFromOutsideListener);
    this._removeDragOverFromOutsideListener = addEventListener("dragover", this._dragOverFromOutsideListener);
    this._addInitialEventListener();
  }
  var _proto = Selection2.prototype;
  _proto.on = function on(type, handler) {
    var handlers = this._listeners[type] || (this._listeners[type] = []);
    handlers.push(handler);
    return {
      remove: function remove() {
        var idx = handlers.indexOf(handler);
        if (idx !== -1)
          handlers.splice(idx, 1);
      }
    };
  };
  _proto.emit = function emit(type) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var result;
    var handlers = this._listeners[type] || [];
    handlers.forEach(function(fn3) {
      if (result === void 0)
        result = fn3.apply(void 0, args);
    });
    return result;
  };
  _proto.teardown = function teardown() {
    this.isDetached = true;
    this._listeners = Object.create(null);
    this._removeTouchMoveWindowListener && this._removeTouchMoveWindowListener();
    this._removeInitialEventListener && this._removeInitialEventListener();
    this._removeEndListener && this._removeEndListener();
    this._onEscListener && this._onEscListener();
    this._removeMoveListener && this._removeMoveListener();
    this._removeKeyUpListener && this._removeKeyUpListener();
    this._removeKeyDownListener && this._removeKeyDownListener();
    this._removeDropFromOutsideListener && this._removeDropFromOutsideListener();
    this._removeDragOverFromOutsideListener && this._removeDragOverFromOutsideListener();
  };
  _proto.isSelected = function isSelected2(node) {
    var box = this._selectRect;
    if (!box || !this.selecting)
      return false;
    return objectsCollide(box, getBoundsForNode(node));
  };
  _proto.filter = function filter(items) {
    var box = this._selectRect;
    if (!box || !this.selecting)
      return [];
    return items.filter(this.isSelected, this);
  };
  _proto._addLongPressListener = function _addLongPressListener(handler, initialEvent) {
    var _this = this;
    var timer = null;
    var removeTouchMoveListener = null;
    var removeTouchEndListener = null;
    var handleTouchStart = function handleTouchStart2(initialEvent2) {
      timer = setTimeout(function() {
        cleanup();
        handler(initialEvent2);
      }, _this.longPressThreshold);
      removeTouchMoveListener = addEventListener("touchmove", function() {
        return cleanup();
      });
      removeTouchEndListener = addEventListener("touchend", function() {
        return cleanup();
      });
    };
    var removeTouchStartListener = addEventListener("touchstart", handleTouchStart);
    var cleanup = function cleanup2() {
      if (timer) {
        clearTimeout(timer);
      }
      if (removeTouchMoveListener) {
        removeTouchMoveListener();
      }
      if (removeTouchEndListener) {
        removeTouchEndListener();
      }
      timer = null;
      removeTouchMoveListener = null;
      removeTouchEndListener = null;
    };
    if (initialEvent) {
      handleTouchStart(initialEvent);
    }
    return function() {
      cleanup();
      removeTouchStartListener();
    };
  };
  _proto._addInitialEventListener = function _addInitialEventListener() {
    var _this2 = this;
    var removeMouseDownListener = addEventListener("mousedown", function(e) {
      _this2._removeInitialEventListener();
      _this2._handleInitialEvent(e);
      _this2._removeInitialEventListener = addEventListener("mousedown", _this2._handleInitialEvent);
    });
    var removeTouchStartListener = addEventListener("touchstart", function(e) {
      _this2._removeInitialEventListener();
      _this2._removeInitialEventListener = _this2._addLongPressListener(_this2._handleInitialEvent, e);
    });
    this._removeInitialEventListener = function() {
      removeMouseDownListener();
      removeTouchStartListener();
    };
  };
  _proto._dropFromOutsideListener = function _dropFromOutsideListener(e) {
    var _getEventCoordinates = getEventCoordinates(e), pageX = _getEventCoordinates.pageX, pageY = _getEventCoordinates.pageY, clientX = _getEventCoordinates.clientX, clientY = _getEventCoordinates.clientY;
    this.emit("dropFromOutside", {
      x: pageX,
      y: pageY,
      clientX,
      clientY
    });
    e.preventDefault();
  };
  _proto._dragOverFromOutsideListener = function _dragOverFromOutsideListener(e) {
    var _getEventCoordinates2 = getEventCoordinates(e), pageX = _getEventCoordinates2.pageX, pageY = _getEventCoordinates2.pageY, clientX = _getEventCoordinates2.clientX, clientY = _getEventCoordinates2.clientY;
    this.emit("dragOverFromOutside", {
      x: pageX,
      y: pageY,
      clientX,
      clientY
    });
    e.preventDefault();
  };
  _proto._handleInitialEvent = function _handleInitialEvent(e) {
    if (this.isDetached) {
      return;
    }
    var _getEventCoordinates3 = getEventCoordinates(e), clientX = _getEventCoordinates3.clientX, clientY = _getEventCoordinates3.clientY, pageX = _getEventCoordinates3.pageX, pageY = _getEventCoordinates3.pageY;
    var node = this.container(), collides, offsetData;
    if (e.which === 3 || e.button === 2 || !isOverContainer(node, clientX, clientY))
      return;
    if (!this.globalMouse && node && !(0, _contains.default)(node, e.target)) {
      var _normalizeDistance = normalizeDistance(0), top2 = _normalizeDistance.top, left2 = _normalizeDistance.left, bottom2 = _normalizeDistance.bottom, right2 = _normalizeDistance.right;
      offsetData = getBoundsForNode(node);
      collides = objectsCollide({
        top: offsetData.top - top2,
        left: offsetData.left - left2,
        bottom: offsetData.bottom + bottom2,
        right: offsetData.right + right2
      }, {
        top: pageY,
        left: pageX
      });
      if (!collides)
        return;
    }
    var result = this.emit("beforeSelect", this._initialEventData = {
      isTouch: /^touch/.test(e.type),
      x: pageX,
      y: pageY,
      clientX,
      clientY
    });
    if (result === false)
      return;
    switch (e.type) {
      case "mousedown":
        this._removeEndListener = addEventListener("mouseup", this._handleTerminatingEvent);
        this._onEscListener = addEventListener("keydown", this._handleTerminatingEvent);
        this._removeMoveListener = addEventListener("mousemove", this._handleMoveEvent);
        break;
      case "touchstart":
        this._handleMoveEvent(e);
        this._removeEndListener = addEventListener("touchend", this._handleTerminatingEvent);
        this._removeMoveListener = addEventListener("touchmove", this._handleMoveEvent);
        break;
    }
  };
  _proto._handleTerminatingEvent = function _handleTerminatingEvent(e) {
    var _getEventCoordinates4 = getEventCoordinates(e), pageX = _getEventCoordinates4.pageX, pageY = _getEventCoordinates4.pageY;
    this.selecting = false;
    this._removeEndListener && this._removeEndListener();
    this._removeMoveListener && this._removeMoveListener();
    if (!this._initialEventData)
      return;
    var inRoot = !this.container || (0, _contains.default)(this.container(), e.target);
    var bounds = this._selectRect;
    var click = this.isClick(pageX, pageY);
    this._initialEventData = null;
    if (e.key === "Escape") {
      return this.emit("reset");
    }
    if (!inRoot) {
      return this.emit("reset");
    }
    if (click && inRoot) {
      return this._handleClickEvent(e);
    }
    if (!click)
      return this.emit("select", bounds);
  };
  _proto._handleClickEvent = function _handleClickEvent(e) {
    var _getEventCoordinates5 = getEventCoordinates(e), pageX = _getEventCoordinates5.pageX, pageY = _getEventCoordinates5.pageY, clientX = _getEventCoordinates5.clientX, clientY = _getEventCoordinates5.clientY;
    var now = new Date().getTime();
    if (this._lastClickData && now - this._lastClickData.timestamp < clickInterval) {
      this._lastClickData = null;
      return this.emit("doubleClick", {
        x: pageX,
        y: pageY,
        clientX,
        clientY
      });
    }
    this._lastClickData = {
      timestamp: now
    };
    return this.emit("click", {
      x: pageX,
      y: pageY,
      clientX,
      clientY
    });
  };
  _proto._handleMoveEvent = function _handleMoveEvent(e) {
    if (this._initialEventData === null || this.isDetached) {
      return;
    }
    var _this$_initialEventDa = this._initialEventData, x2 = _this$_initialEventDa.x, y2 = _this$_initialEventDa.y;
    var _getEventCoordinates6 = getEventCoordinates(e), pageX = _getEventCoordinates6.pageX, pageY = _getEventCoordinates6.pageY;
    var w2 = Math.abs(x2 - pageX);
    var h2 = Math.abs(y2 - pageY);
    var left2 = Math.min(pageX, x2), top2 = Math.min(pageY, y2), old = this.selecting;
    if (this.isClick(pageX, pageY) && !old && !(w2 || h2)) {
      return;
    }
    this.selecting = true;
    this._selectRect = {
      top: top2,
      left: left2,
      x: pageX,
      y: pageY,
      right: left2 + w2,
      bottom: top2 + h2
    };
    if (!old) {
      this.emit("selectStart", this._initialEventData);
    }
    if (!this.isClick(pageX, pageY))
      this.emit("selecting", this._selectRect);
    e.preventDefault();
  };
  _proto._keyListener = function _keyListener(e) {
    this.ctrl = e.metaKey || e.ctrlKey;
  };
  _proto.isClick = function isClick(pageX, pageY) {
    var _this$_initialEventDa2 = this._initialEventData, x2 = _this$_initialEventDa2.x, y2 = _this$_initialEventDa2.y, isTouch = _this$_initialEventDa2.isTouch;
    return !isTouch && Math.abs(pageX - x2) <= clickTolerance && Math.abs(pageY - y2) <= clickTolerance;
  };
  return Selection2;
}();
function normalizeDistance(distance) {
  if (distance === void 0) {
    distance = 0;
  }
  if (typeof distance !== "object")
    distance = {
      top: distance,
      left: distance,
      right: distance,
      bottom: distance
    };
  return distance;
}
function objectsCollide(nodeA, nodeB, tolerance) {
  if (tolerance === void 0) {
    tolerance = 0;
  }
  var _getBoundsForNode = getBoundsForNode(nodeA), aTop = _getBoundsForNode.top, aLeft = _getBoundsForNode.left, _getBoundsForNode$rig = _getBoundsForNode.right, aRight = _getBoundsForNode$rig === void 0 ? aLeft : _getBoundsForNode$rig, _getBoundsForNode$bot = _getBoundsForNode.bottom, aBottom = _getBoundsForNode$bot === void 0 ? aTop : _getBoundsForNode$bot;
  var _getBoundsForNode2 = getBoundsForNode(nodeB), bTop = _getBoundsForNode2.top, bLeft = _getBoundsForNode2.left, _getBoundsForNode2$ri = _getBoundsForNode2.right, bRight = _getBoundsForNode2$ri === void 0 ? bLeft : _getBoundsForNode2$ri, _getBoundsForNode2$bo = _getBoundsForNode2.bottom, bBottom = _getBoundsForNode2$bo === void 0 ? bTop : _getBoundsForNode2$bo;
  return !(aBottom - tolerance < bTop || aTop + tolerance > bBottom || aRight - tolerance < bLeft || aLeft + tolerance > bRight);
}
function getBoundsForNode(node) {
  if (!node.getBoundingClientRect)
    return node;
  var rect = node.getBoundingClientRect(), left2 = rect.left + pageOffset("left"), top2 = rect.top + pageOffset("top");
  return {
    top: top2,
    left: left2,
    right: (node.offsetWidth || 0) + left2,
    bottom: (node.offsetHeight || 0) + top2
  };
}
function pageOffset(dir) {
  if (dir === "left")
    return window.pageXOffset || document.body.scrollLeft || 0;
  if (dir === "top")
    return window.pageYOffset || document.body.scrollTop || 0;
}
var _default = Selection;
Selection$1.default = _default;
var TimeGridEvent = { exports: {} };
(function(module2, exports2) {
  var _interopRequireDefault2 = interopRequireDefault.exports;
  exports2.__esModule = true;
  exports2.default = void 0;
  var _extends4 = _interopRequireDefault2(_extends.exports);
  var _clsx = _interopRequireDefault2(require$$6);
  var _react2 = _interopRequireDefault2(_react_17_0_2_react.exports);
  function stringifyPercent2(v2) {
    return typeof v2 === "string" ? v2 : v2 + "%";
  }
  function TimeGridEvent2(props) {
    var _extends22, _extends3;
    var style2 = props.style, className = props.className, event = props.event, accessors2 = props.accessors, rtl = props.rtl, selected = props.selected, label = props.label, continuesEarlier = props.continuesEarlier, continuesLater = props.continuesLater, getters = props.getters, onClick = props.onClick, onDoubleClick = props.onDoubleClick, isBackgroundEvent = props.isBackgroundEvent, onKeyPress = props.onKeyPress, _props$components = props.components, Event2 = _props$components.event, EventWrapper2 = _props$components.eventWrapper;
    var title = accessors2.title(event);
    var tooltip = accessors2.tooltip(event);
    var end2 = accessors2.end(event);
    var start2 = accessors2.start(event);
    var userProps = getters.eventProp(event, start2, end2, selected);
    var height2 = style2.height, top2 = style2.top, width = style2.width, xOffset = style2.xOffset;
    var inner = [/* @__PURE__ */ _react2.default.createElement("div", {
      key: "1",
      className: "rbc-event-label"
    }, label), /* @__PURE__ */ _react2.default.createElement("div", {
      key: "2",
      className: "rbc-event-content"
    }, Event2 ? /* @__PURE__ */ _react2.default.createElement(Event2, {
      event,
      title
    }) : title)];
    var eventStyle = isBackgroundEvent ? (0, _extends4.default)({}, userProps.style, (_extends22 = {
      top: stringifyPercent2(top2),
      height: stringifyPercent2(height2),
      width: "calc(" + width + " + 10px)"
    }, _extends22[rtl ? "right" : "left"] = stringifyPercent2(Math.max(0, xOffset)), _extends22)) : (0, _extends4.default)({}, userProps.style, (_extends3 = {
      top: stringifyPercent2(top2),
      width: stringifyPercent2(width),
      height: stringifyPercent2(height2)
    }, _extends3[rtl ? "right" : "left"] = stringifyPercent2(xOffset), _extends3));
    return /* @__PURE__ */ _react2.default.createElement(EventWrapper2, (0, _extends4.default)({
      type: "time"
    }, props), /* @__PURE__ */ _react2.default.createElement("div", {
      onClick,
      onDoubleClick,
      style: eventStyle,
      onKeyPress,
      title: tooltip ? (typeof label === "string" ? label + ": " : "") + tooltip : void 0,
      className: (0, _clsx.default)(isBackgroundEvent ? "rbc-background-event" : "rbc-event", className, userProps.className, {
        "rbc-selected": selected,
        "rbc-event-continues-earlier": continuesEarlier,
        "rbc-event-continues-later": continuesLater
      })
    }, inner));
  }
  var _default2 = TimeGridEvent2;
  exports2.default = _default2;
  module2.exports = exports2.default;
})(TimeGridEvent, TimeGridEvent.exports);
var common = {};
var _interopRequireDefault$2 = interopRequireDefault.exports;
common.__esModule = true;
common.mergeComponents = mergeComponents;
common.pointInColumn = pointInColumn;
common.eventTimes = eventTimes;
common.dragAccessors = void 0;
var _extends2 = _interopRequireDefault$2(_extends.exports);
var _objectWithoutPropertiesLoose2 = _interopRequireDefault$2(objectWithoutPropertiesLoose.exports);
var _accessors = accessors;
var _react = _react_17_0_2_react.exports;
var _excluded = ["children"];
var dragAccessors = {
  start: (0, _accessors.wrapAccessor)(function(e) {
    return e.start;
  }),
  end: (0, _accessors.wrapAccessor)(function(e) {
    return e.end;
  })
};
common.dragAccessors = dragAccessors;
function nest() {
  for (var _len = arguments.length, Components = new Array(_len), _key = 0; _key < _len; _key++) {
    Components[_key] = arguments[_key];
  }
  var factories = Components.filter(Boolean).map(_react.createFactory);
  var Nest = function Nest2(_ref) {
    var children = _ref.children, props = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
    return factories.reduceRight(function(child, factory) {
      return factory(props, child);
    }, children);
  };
  return Nest;
}
function mergeComponents(components, addons) {
  if (components === void 0) {
    components = {};
  }
  var keys2 = Object.keys(addons);
  var result = (0, _extends2.default)({}, components);
  keys2.forEach(function(key) {
    result[key] = components[key] ? nest(components[key], addons[key]) : addons[key];
  });
  return result;
}
function pointInColumn(bounds, point) {
  var left2 = bounds.left, right2 = bounds.right, top2 = bounds.top;
  var x2 = point.x, y2 = point.y;
  return x2 < right2 + 10 && x2 > left2 && y2 > top2;
}
function eventTimes(event, accessors2, localizer) {
  var start2 = accessors2.start(event);
  var end2 = accessors2.end(event);
  var isZeroDuration = localizer.eq(start2, end2, "minutes") && localizer.diff(start2, end2, "minutes") === 0;
  if (isZeroDuration)
    end2 = localizer.add(end2, 1, "day");
  var duration = localizer.diff(start2, end2, "milliseconds");
  return {
    start: start2,
    end: end2,
    duration
  };
}
var NoopWrapper = { exports: {} };
(function(module2, exports2) {
  exports2.__esModule = true;
  exports2.default = void 0;
  function NoopWrapper2(props) {
    return props.children;
  }
  var _default2 = NoopWrapper2;
  exports2.default = _default2;
  module2.exports = exports2.default;
})(NoopWrapper, NoopWrapper.exports);
(function(module2, exports2) {
  var _interopRequireDefault2 = interopRequireDefault.exports;
  exports2.__esModule = true;
  exports2.default = void 0;
  var _extends22 = _interopRequireDefault2(_extends.exports);
  var _inheritsLoose2 = _interopRequireDefault2(inheritsLoose.exports);
  _interopRequireDefault2(_propTypes_15_7_2_propTypes.exports);
  var _react2 = _interopRequireDefault2(_react_17_0_2_react.exports);
  var _DnDContext = DnDContext$1;
  var _Selection = _interopRequireWildcard(Selection$1);
  var _TimeGridEvent = _interopRequireDefault2(TimeGridEvent.exports);
  var _common = common;
  var _NoopWrapper = _interopRequireDefault2(NoopWrapper.exports);
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var EventContainerWrapper2 = /* @__PURE__ */ function(_React$Component) {
    (0, _inheritsLoose2.default)(EventContainerWrapper3, _React$Component);
    function EventContainerWrapper3() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.handleMove = function(point, bounds) {
        if (!(0, _common.pointInColumn)(bounds, point))
          return _this.reset();
        var event = _this.context.draggable.dragAndDropAction.event;
        var _this$props = _this.props, accessors2 = _this$props.accessors, slotMetrics = _this$props.slotMetrics;
        var newSlot = slotMetrics.closestSlotFromPoint({
          y: point.y - _this.eventOffsetTop,
          x: point.x
        }, bounds);
        var _eventTimes = (0, _common.eventTimes)(event, accessors2, _this.props.localizer), duration = _eventTimes.duration;
        var newEnd = _this.props.localizer.add(newSlot, duration, "milliseconds");
        _this.update(event, slotMetrics.getRange(newSlot, newEnd, false, true));
      };
      _this.handleDropFromOutside = function(point, boundaryBox) {
        var _this$props2 = _this.props, slotMetrics = _this$props2.slotMetrics, resource = _this$props2.resource;
        var start2 = slotMetrics.closestSlotFromPoint({
          y: point.y,
          x: point.x
        }, boundaryBox);
        _this.context.draggable.onDropFromOutside({
          start: start2,
          end: slotMetrics.nextSlot(start2),
          allDay: false,
          resource
        });
      };
      _this._selectable = function() {
        var wrapper = _this.ref.current;
        var node = wrapper.children[0];
        var isBeingDragged = false;
        var selector = _this._selector = new _Selection.default(function() {
          return wrapper.closest(".rbc-time-view");
        });
        selector.on("beforeSelect", function(point) {
          var dragAndDropAction = _this.context.draggable.dragAndDropAction;
          if (!dragAndDropAction.action)
            return false;
          if (dragAndDropAction.action === "resize") {
            return (0, _common.pointInColumn)((0, _Selection.getBoundsForNode)(node), point);
          }
          var eventNode = (0, _Selection.getEventNodeFromPoint)(node, point);
          if (!eventNode)
            return false;
          _this.eventOffsetTop = point.y - (0, _Selection.getBoundsForNode)(eventNode).top;
        });
        selector.on("selecting", function(box) {
          var bounds = (0, _Selection.getBoundsForNode)(node);
          var dragAndDropAction = _this.context.draggable.dragAndDropAction;
          if (dragAndDropAction.action === "move")
            _this.handleMove(box, bounds);
          if (dragAndDropAction.action === "resize")
            _this.handleResize(box, bounds);
        });
        selector.on("dropFromOutside", function(point) {
          if (!_this.context.draggable.onDropFromOutside)
            return;
          var bounds = (0, _Selection.getBoundsForNode)(node);
          if (!(0, _common.pointInColumn)(bounds, point))
            return;
          _this.handleDropFromOutside(point, bounds);
        });
        selector.on("dragOver", function(point) {
          if (!_this.context.draggable.dragFromOutsideItem)
            return;
          var bounds = (0, _Selection.getBoundsForNode)(node);
          _this.handleDropFromOutside(point, bounds);
        });
        selector.on("selectStart", function() {
          isBeingDragged = true;
          _this.context.draggable.onStart();
        });
        selector.on("select", function(point) {
          var bounds = (0, _Selection.getBoundsForNode)(node);
          isBeingDragged = false;
          if (!_this.state.event || !(0, _common.pointInColumn)(bounds, point))
            return;
          _this.handleInteractionEnd();
        });
        selector.on("click", function() {
          if (isBeingDragged)
            _this.reset();
          _this.context.draggable.onEnd(null);
        });
        selector.on("reset", function() {
          _this.reset();
          _this.context.draggable.onEnd(null);
        });
      };
      _this.handleInteractionEnd = function() {
        var resource = _this.props.resource;
        var event = _this.state.event;
        _this.reset();
        _this.context.draggable.onEnd({
          start: event.start,
          end: event.end,
          resourceId: resource
        });
      };
      _this._teardownSelectable = function() {
        if (!_this._selector)
          return;
        _this._selector.teardown();
        _this._selector = null;
      };
      _this.state = {};
      _this.ref = /* @__PURE__ */ _react2.default.createRef();
      return _this;
    }
    var _proto = EventContainerWrapper3.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this._selectable();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this._teardownSelectable();
    };
    _proto.reset = function reset() {
      if (this.state.event)
        this.setState({
          event: null,
          top: null,
          height: null
        });
    };
    _proto.update = function update(event, _ref) {
      var startDate = _ref.startDate, endDate = _ref.endDate, top2 = _ref.top, height2 = _ref.height;
      var lastEvent = this.state.event;
      if (lastEvent && startDate === lastEvent.start && endDate === lastEvent.end) {
        return;
      }
      this.setState({
        top: top2,
        height: height2,
        event: (0, _extends22.default)({}, event, {
          start: startDate,
          end: endDate
        })
      });
    };
    _proto.handleResize = function handleResize(point, bounds) {
      var _this$props3 = this.props, accessors2 = _this$props3.accessors, slotMetrics = _this$props3.slotMetrics, localizer = _this$props3.localizer;
      var _this$context$draggab = this.context.draggable.dragAndDropAction, event = _this$context$draggab.event, direction = _this$context$draggab.direction;
      var newTime = slotMetrics.closestSlotFromPoint(point, bounds);
      var _eventTimes2 = (0, _common.eventTimes)(event, accessors2, localizer), start2 = _eventTimes2.start, end2 = _eventTimes2.end;
      if (direction === "UP") {
        start2 = localizer.min(newTime, slotMetrics.closestSlotFromDate(end2, -1));
      } else if (direction === "DOWN") {
        end2 = localizer.max(newTime, slotMetrics.closestSlotFromDate(start2));
      }
      this.update(event, slotMetrics.getRange(start2, end2));
    };
    _proto.renderContent = function renderContent() {
      var _this$props4 = this.props, children = _this$props4.children, accessors2 = _this$props4.accessors, components = _this$props4.components, getters = _this$props4.getters, slotMetrics = _this$props4.slotMetrics, localizer = _this$props4.localizer;
      var _this$state = this.state, event = _this$state.event, top2 = _this$state.top, height2 = _this$state.height;
      if (!event)
        return children;
      var events = children.props.children;
      var start2 = event.start, end2 = event.end;
      var label;
      var format = "eventTimeRangeFormat";
      var startsBeforeDay = slotMetrics.startsBeforeDay(start2);
      var startsAfterDay = slotMetrics.startsAfterDay(end2);
      if (startsBeforeDay)
        format = "eventTimeRangeEndFormat";
      else if (startsAfterDay)
        format = "eventTimeRangeStartFormat";
      if (startsBeforeDay && startsAfterDay)
        label = localizer.messages.allDay;
      else
        label = localizer.format({
          start: start2,
          end: end2
        }, format);
      return /* @__PURE__ */ _react2.default.cloneElement(children, {
        children: /* @__PURE__ */ _react2.default.createElement(_react2.default.Fragment, null, events, event && /* @__PURE__ */ _react2.default.createElement(_TimeGridEvent.default, {
          event,
          label,
          className: "rbc-addons-dnd-drag-preview",
          style: {
            top: top2,
            height: height2,
            width: 100
          },
          getters,
          components: (0, _extends22.default)({}, components, {
            eventWrapper: _NoopWrapper.default
          }),
          accessors: (0, _extends22.default)({}, accessors2, _common.dragAccessors),
          continuesEarlier: startsBeforeDay,
          continuesLater: startsAfterDay
        }))
      });
    };
    _proto.render = function render() {
      return /* @__PURE__ */ _react2.default.createElement("div", {
        ref: this.ref
      }, this.renderContent());
    };
    return EventContainerWrapper3;
  }(_react2.default.Component);
  EventContainerWrapper2.contextType = _DnDContext.DnDContext;
  EventContainerWrapper2.propTypes = {};
  var _default2 = EventContainerWrapper2;
  exports2.default = _default2;
  module2.exports = exports2.default;
})(EventContainerWrapper, EventContainerWrapper.exports);
var WeekWrapper = { exports: {} };
var EventRow = { exports: {} };
var EventRowMixin = { exports: {} };
var EventCell = { exports: {} };
(function(module2, exports2) {
  var _interopRequireDefault2 = interopRequireDefault.exports;
  exports2.__esModule = true;
  exports2.default = void 0;
  var _extends22 = _interopRequireDefault2(_extends.exports);
  var _objectWithoutPropertiesLoose22 = _interopRequireDefault2(objectWithoutPropertiesLoose.exports);
  var _inheritsLoose2 = _interopRequireDefault2(inheritsLoose.exports);
  _interopRequireDefault2(_propTypes_15_7_2_propTypes.exports);
  var _react2 = _interopRequireDefault2(_react_17_0_2_react.exports);
  var _clsx = _interopRequireDefault2(require$$6);
  var _excluded3 = ["style", "className", "event", "selected", "isAllDay", "onSelect", "onDoubleClick", "onKeyPress", "localizer", "continuesPrior", "continuesAfter", "accessors", "getters", "children", "components", "slotStart", "slotEnd"];
  var EventCell2 = /* @__PURE__ */ function(_React$Component) {
    (0, _inheritsLoose2.default)(EventCell3, _React$Component);
    function EventCell3() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = EventCell3.prototype;
    _proto.render = function render() {
      var _this$props = this.props, style2 = _this$props.style, className = _this$props.className, event = _this$props.event, selected = _this$props.selected, isAllDay = _this$props.isAllDay, onSelect = _this$props.onSelect, _onDoubleClick = _this$props.onDoubleClick, _onKeyPress = _this$props.onKeyPress, localizer = _this$props.localizer, continuesPrior2 = _this$props.continuesPrior, continuesAfter2 = _this$props.continuesAfter, accessors2 = _this$props.accessors, getters = _this$props.getters, children = _this$props.children, _this$props$component = _this$props.components, Event2 = _this$props$component.event, EventWrapper2 = _this$props$component.eventWrapper, slotStart = _this$props.slotStart, slotEnd = _this$props.slotEnd, props = (0, _objectWithoutPropertiesLoose22.default)(_this$props, _excluded3);
      delete props.resizable;
      var title = accessors2.title(event);
      var tooltip = accessors2.tooltip(event);
      var end2 = accessors2.end(event);
      var start2 = accessors2.start(event);
      var allDay = accessors2.allDay(event);
      var showAsAllDay = isAllDay || allDay || localizer.diff(start2, localizer.ceil(end2, "day"), "day") > 1;
      var userProps = getters.eventProp(event, start2, end2, selected);
      var content = /* @__PURE__ */ _react2.default.createElement("div", {
        className: "rbc-event-content",
        title: tooltip || void 0
      }, Event2 ? /* @__PURE__ */ _react2.default.createElement(Event2, {
        event,
        continuesPrior: continuesPrior2,
        continuesAfter: continuesAfter2,
        title,
        isAllDay: allDay,
        localizer,
        slotStart,
        slotEnd
      }) : title);
      return /* @__PURE__ */ _react2.default.createElement(EventWrapper2, (0, _extends22.default)({}, this.props, {
        type: "date"
      }), /* @__PURE__ */ _react2.default.createElement("div", (0, _extends22.default)({}, props, {
        tabIndex: 0,
        style: (0, _extends22.default)({}, userProps.style, style2),
        className: (0, _clsx.default)("rbc-event", className, userProps.className, {
          "rbc-selected": selected,
          "rbc-event-allday": showAsAllDay,
          "rbc-event-continues-prior": continuesPrior2,
          "rbc-event-continues-after": continuesAfter2
        }),
        onClick: function onClick(e) {
          return onSelect && onSelect(event, e);
        },
        onDoubleClick: function onDoubleClick(e) {
          return _onDoubleClick && _onDoubleClick(event, e);
        },
        onKeyPress: function onKeyPress(e) {
          return _onKeyPress && _onKeyPress(event, e);
        }
      }), typeof children === "function" ? children(content) : content));
    };
    return EventCell3;
  }(_react2.default.Component);
  EventCell2.propTypes = {};
  var _default2 = EventCell2;
  exports2.default = _default2;
  module2.exports = exports2.default;
})(EventCell, EventCell.exports);
var selection = {};
function listCacheClear$1() {
  this.__data__ = [];
  this.size = 0;
}
var _listCacheClear = listCacheClear$1;
function eq$2(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_1 = eq$2;
var eq$1 = eq_1;
function assocIndexOf$4(array, key) {
  var length = array.length;
  while (length--) {
    if (eq$1(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var _assocIndexOf = assocIndexOf$4;
var assocIndexOf$3 = _assocIndexOf;
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete$1(key) {
  var data = this.__data__, index = assocIndexOf$3(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
var _listCacheDelete = listCacheDelete$1;
var assocIndexOf$2 = _assocIndexOf;
function listCacheGet$1(key) {
  var data = this.__data__, index = assocIndexOf$2(data, key);
  return index < 0 ? void 0 : data[index][1];
}
var _listCacheGet = listCacheGet$1;
var assocIndexOf$1 = _assocIndexOf;
function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}
var _listCacheHas = listCacheHas$1;
var assocIndexOf = _assocIndexOf;
function listCacheSet$1(key, value) {
  var data = this.__data__, index = assocIndexOf(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
var _listCacheSet = listCacheSet$1;
var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
function ListCache$4(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache$4.prototype.clear = listCacheClear;
ListCache$4.prototype["delete"] = listCacheDelete;
ListCache$4.prototype.get = listCacheGet;
ListCache$4.prototype.has = listCacheHas;
ListCache$4.prototype.set = listCacheSet;
var _ListCache = ListCache$4;
var ListCache$3 = _ListCache;
function stackClear$1() {
  this.__data__ = new ListCache$3();
  this.size = 0;
}
var _stackClear = stackClear$1;
function stackDelete$1(key) {
  var data = this.__data__, result = data["delete"](key);
  this.size = data.size;
  return result;
}
var _stackDelete = stackDelete$1;
function stackGet$1(key) {
  return this.__data__.get(key);
}
var _stackGet = stackGet$1;
function stackHas$1(key) {
  return this.__data__.has(key);
}
var _stackHas = stackHas$1;
var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal$1;
var freeGlobal = _freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root$8 = freeGlobal || freeSelf || Function("return this")();
var _root = root$8;
var root$7 = _root;
var Symbol$5 = root$7.Symbol;
var _Symbol = Symbol$5;
var Symbol$4 = _Symbol;
var objectProto$b = Object.prototype;
var hasOwnProperty$8 = objectProto$b.hasOwnProperty;
var nativeObjectToString$1 = objectProto$b.toString;
var symToStringTag$1 = Symbol$4 ? Symbol$4.toStringTag : void 0;
function getRawTag$1(value) {
  var isOwn = hasOwnProperty$8.call(value, symToStringTag$1), tag = value[symToStringTag$1];
  try {
    value[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}
var _getRawTag = getRawTag$1;
var objectProto$a = Object.prototype;
var nativeObjectToString = objectProto$a.toString;
function objectToString$1(value) {
  return nativeObjectToString.call(value);
}
var _objectToString = objectToString$1;
var Symbol$3 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$3 ? Symbol$3.toStringTag : void 0;
function baseGetTag$5(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
var _baseGetTag = baseGetTag$5;
function isObject$4(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_1 = isObject$4;
var baseGetTag$4 = _baseGetTag, isObject$3 = isObject_1;
var asyncTag = "[object AsyncFunction]", funcTag$1 = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction$3(value) {
  if (!isObject$3(value)) {
    return false;
  }
  var tag = baseGetTag$4(value);
  return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_1 = isFunction$3;
var root$6 = _root;
var coreJsData$1 = root$6["__core-js_shared__"];
var _coreJsData = coreJsData$1;
var coreJsData = _coreJsData;
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked$1(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var _isMasked = isMasked$1;
var funcProto$1 = Function.prototype;
var funcToString$1 = funcProto$1.toString;
function toSource$2(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var _toSource = toSource$2;
var isFunction$2 = isFunction_1, isMasked = _isMasked, isObject$2 = isObject_1, toSource$1 = _toSource;
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto = Function.prototype, objectProto$9 = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty$7).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative$1(value) {
  if (!isObject$2(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource$1(value));
}
var _baseIsNative = baseIsNative$1;
function getValue$1(object, key) {
  return object == null ? void 0 : object[key];
}
var _getValue = getValue$1;
var baseIsNative = _baseIsNative, getValue = _getValue;
function getNative$6(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : void 0;
}
var _getNative = getNative$6;
var getNative$5 = _getNative, root$5 = _root;
var Map$4 = getNative$5(root$5, "Map");
var _Map = Map$4;
var getNative$4 = _getNative;
var nativeCreate$4 = getNative$4(Object, "create");
var _nativeCreate = nativeCreate$4;
var nativeCreate$3 = _nativeCreate;
function hashClear$1() {
  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
  this.size = 0;
}
var _hashClear = hashClear$1;
function hashDelete$1(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var _hashDelete = hashDelete$1;
var nativeCreate$2 = _nativeCreate;
var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
var objectProto$8 = Object.prototype;
var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
function hashGet$1(key) {
  var data = this.__data__;
  if (nativeCreate$2) {
    var result = data[key];
    return result === HASH_UNDEFINED$2 ? void 0 : result;
  }
  return hasOwnProperty$6.call(data, key) ? data[key] : void 0;
}
var _hashGet = hashGet$1;
var nativeCreate$1 = _nativeCreate;
var objectProto$7 = Object.prototype;
var hasOwnProperty$5 = objectProto$7.hasOwnProperty;
function hashHas$1(key) {
  var data = this.__data__;
  return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$5.call(data, key);
}
var _hashHas = hashHas$1;
var nativeCreate = _nativeCreate;
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
function hashSet$1(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED$1 : value;
  return this;
}
var _hashSet = hashSet$1;
var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
function Hash$1(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash$1.prototype.clear = hashClear;
Hash$1.prototype["delete"] = hashDelete;
Hash$1.prototype.get = hashGet;
Hash$1.prototype.has = hashHas;
Hash$1.prototype.set = hashSet;
var _Hash = Hash$1;
var Hash = _Hash, ListCache$2 = _ListCache, Map$3 = _Map;
function mapCacheClear$1() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash(),
    "map": new (Map$3 || ListCache$2)(),
    "string": new Hash()
  };
}
var _mapCacheClear = mapCacheClear$1;
function isKeyable$1(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var _isKeyable = isKeyable$1;
var isKeyable = _isKeyable;
function getMapData$4(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var _getMapData = getMapData$4;
var getMapData$3 = _getMapData;
function mapCacheDelete$1(key) {
  var result = getMapData$3(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
var _mapCacheDelete = mapCacheDelete$1;
var getMapData$2 = _getMapData;
function mapCacheGet$1(key) {
  return getMapData$2(this, key).get(key);
}
var _mapCacheGet = mapCacheGet$1;
var getMapData$1 = _getMapData;
function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}
var _mapCacheHas = mapCacheHas$1;
var getMapData = _getMapData;
function mapCacheSet$1(key, value) {
  var data = getMapData(this, key), size2 = data.size;
  data.set(key, value);
  this.size += data.size == size2 ? 0 : 1;
  return this;
}
var _mapCacheSet = mapCacheSet$1;
var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
function MapCache$3(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache$3.prototype.clear = mapCacheClear;
MapCache$3.prototype["delete"] = mapCacheDelete;
MapCache$3.prototype.get = mapCacheGet;
MapCache$3.prototype.has = mapCacheHas;
MapCache$3.prototype.set = mapCacheSet;
var _MapCache = MapCache$3;
var ListCache$1 = _ListCache, Map$2 = _Map, MapCache$2 = _MapCache;
var LARGE_ARRAY_SIZE = 200;
function stackSet$1(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache$1) {
    var pairs = data.__data__;
    if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache$2(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}
var _stackSet = stackSet$1;
var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
function Stack$2(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}
Stack$2.prototype.clear = stackClear;
Stack$2.prototype["delete"] = stackDelete;
Stack$2.prototype.get = stackGet;
Stack$2.prototype.has = stackHas;
Stack$2.prototype.set = stackSet;
var _Stack = Stack$2;
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function setCacheAdd$1(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}
var _setCacheAdd = setCacheAdd$1;
function setCacheHas$1(value) {
  return this.__data__.has(value);
}
var _setCacheHas = setCacheHas$1;
var MapCache$1 = _MapCache, setCacheAdd = _setCacheAdd, setCacheHas = _setCacheHas;
function SetCache$1(values) {
  var index = -1, length = values == null ? 0 : values.length;
  this.__data__ = new MapCache$1();
  while (++index < length) {
    this.add(values[index]);
  }
}
SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
SetCache$1.prototype.has = setCacheHas;
var _SetCache = SetCache$1;
function arraySome$1(array, predicate) {
  var index = -1, length = array == null ? 0 : array.length;
  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}
var _arraySome = arraySome$1;
function cacheHas$1(cache, key) {
  return cache.has(key);
}
var _cacheHas = cacheHas$1;
var SetCache = _SetCache, arraySome = _arraySome, cacheHas = _cacheHas;
var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array.length, othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
  stack.set(array, other);
  stack.set(other, array);
  while (++index < arrLength) {
    var arrValue = array[index], othValue = other[index];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== void 0) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    if (seen) {
      if (!arraySome(other, function(othValue2, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack["delete"](array);
  stack["delete"](other);
  return result;
}
var _equalArrays = equalArrays$2;
var root$4 = _root;
var Uint8Array$1 = root$4.Uint8Array;
var _Uint8Array = Uint8Array$1;
function mapToArray$1(map) {
  var index = -1, result = Array(map.size);
  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}
var _mapToArray = mapToArray$1;
function setToArray$1(set) {
  var index = -1, result = Array(set.size);
  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}
var _setToArray = setToArray$1;
var Symbol$2 = _Symbol, Uint8Array = _Uint8Array, eq = eq_1, equalArrays$1 = _equalArrays, mapToArray = _mapToArray, setToArray = _setToArray;
var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
var boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", symbolTag$1 = "[object Symbol]";
var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]";
var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : void 0;
function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag$2:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;
    case arrayBufferTag$1:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;
    case boolTag$1:
    case dateTag$1:
    case numberTag$1:
      return eq(+object, +other);
    case errorTag$1:
      return object.name == other.name && object.message == other.message;
    case regexpTag$1:
    case stringTag$1:
      return object == other + "";
    case mapTag$2:
      var convert = mapToArray;
    case setTag$2:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = setToArray);
      if (object.size != other.size && !isPartial) {
        return false;
      }
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;
      stack.set(object, other);
      var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack["delete"](object);
      return result;
    case symbolTag$1:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}
var _equalByTag = equalByTag$1;
function arrayPush$1(array, values) {
  var index = -1, length = values.length, offset2 = array.length;
  while (++index < length) {
    array[offset2 + index] = values[index];
  }
  return array;
}
var _arrayPush = arrayPush$1;
var isArray$8 = Array.isArray;
var isArray_1 = isArray$8;
var arrayPush = _arrayPush, isArray$7 = isArray_1;
function baseGetAllKeys$1(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$7(object) ? result : arrayPush(result, symbolsFunc(object));
}
var _baseGetAllKeys = baseGetAllKeys$1;
function arrayFilter$1(array, predicate) {
  var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}
var _arrayFilter = arrayFilter$1;
function stubArray$1() {
  return [];
}
var stubArray_1 = stubArray$1;
var arrayFilter = _arrayFilter, stubArray = stubArray_1;
var objectProto$6 = Object.prototype;
var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbols$1 = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable$1.call(object, symbol);
  });
};
var _getSymbols = getSymbols$1;
function baseTimes$1(n2, iteratee) {
  var index = -1, result = Array(n2);
  while (++index < n2) {
    result[index] = iteratee(index);
  }
  return result;
}
var _baseTimes = baseTimes$1;
function isObjectLike$5(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_1 = isObjectLike$5;
var baseGetTag$3 = _baseGetTag, isObjectLike$4 = isObjectLike_1;
var argsTag$2 = "[object Arguments]";
function baseIsArguments$1(value) {
  return isObjectLike$4(value) && baseGetTag$3(value) == argsTag$2;
}
var _baseIsArguments = baseIsArguments$1;
var baseIsArguments = _baseIsArguments, isObjectLike$3 = isObjectLike_1;
var objectProto$5 = Object.prototype;
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;
var isArguments$2 = baseIsArguments(function() {
  return arguments;
}()) ? baseIsArguments : function(value) {
  return isObjectLike$3(value) && hasOwnProperty$4.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
};
var isArguments_1 = isArguments$2;
var isBuffer$2 = { exports: {} };
function stubFalse() {
  return false;
}
var stubFalse_1 = stubFalse;
(function(module2, exports2) {
  var root2 = _root, stubFalse2 = stubFalse_1;
  var freeExports2 = exports2 && !exports2.nodeType && exports2;
  var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
  var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
  var Buffer2 = moduleExports2 ? root2.Buffer : void 0;
  var nativeIsBuffer2 = Buffer2 ? Buffer2.isBuffer : void 0;
  var isBuffer2 = nativeIsBuffer2 || stubFalse2;
  module2.exports = isBuffer2;
})(isBuffer$2, isBuffer$2.exports);
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex$2(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
var _isIndex = isIndex$2;
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength$3(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
var isLength_1 = isLength$3;
var baseGetTag$2 = _baseGetTag, isLength$2 = isLength_1, isObjectLike$2 = isObjectLike_1;
var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag$1 = "[object Map]", numberTag = "[object Number]", objectTag$2 = "[object Object]", regexpTag = "[object RegExp]", setTag$1 = "[object Set]", stringTag = "[object String]", weakMapTag$1 = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag$1] = typedArrayTags[numberTag] = typedArrayTags[objectTag$2] = typedArrayTags[regexpTag] = typedArrayTags[setTag$1] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag$1] = false;
function baseIsTypedArray$1(value) {
  return isObjectLike$2(value) && isLength$2(value.length) && !!typedArrayTags[baseGetTag$2(value)];
}
var _baseIsTypedArray = baseIsTypedArray$1;
function baseUnary$1(func) {
  return function(value) {
    return func(value);
  };
}
var _baseUnary = baseUnary$1;
var _nodeUtil = { exports: {} };
(function(module2, exports2) {
  var freeGlobal2 = _freeGlobal;
  var freeExports2 = exports2 && !exports2.nodeType && exports2;
  var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
  var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
  var freeProcess2 = moduleExports2 && freeGlobal2.process;
  var nodeUtil2 = function() {
    try {
      var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
    } catch (e) {
    }
  }();
  module2.exports = nodeUtil2;
})(_nodeUtil, _nodeUtil.exports);
var baseIsTypedArray = _baseIsTypedArray, baseUnary = _baseUnary, nodeUtil = _nodeUtil.exports;
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
var isTypedArray$2 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
var isTypedArray_1 = isTypedArray$2;
var baseTimes = _baseTimes, isArguments$1 = isArguments_1, isArray$6 = isArray_1, isBuffer$1 = isBuffer$2.exports, isIndex$1 = _isIndex, isTypedArray$1 = isTypedArray_1;
var objectProto$4 = Object.prototype;
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
function arrayLikeKeys$1(value, inherited) {
  var isArr = isArray$6(value), isArg = !isArr && isArguments$1(value), isBuff = !isArr && !isArg && isBuffer$1(value), isType = !isArr && !isArg && !isBuff && isTypedArray$1(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
  for (var key in value) {
    if ((inherited || hasOwnProperty$3.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex$1(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
var _arrayLikeKeys = arrayLikeKeys$1;
var objectProto$3 = Object.prototype;
function isPrototype$1(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$3;
  return value === proto;
}
var _isPrototype = isPrototype$1;
function overArg$1(func, transform2) {
  return function(arg) {
    return func(transform2(arg));
  };
}
var _overArg = overArg$1;
var overArg = _overArg;
var nativeKeys$1 = overArg(Object.keys, Object);
var _nativeKeys = nativeKeys$1;
var isPrototype = _isPrototype, nativeKeys = _nativeKeys;
var objectProto$2 = Object.prototype;
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
function baseKeys$1(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$2.call(object, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
var _baseKeys = baseKeys$1;
var isFunction$1 = isFunction_1, isLength$1 = isLength_1;
function isArrayLike$1(value) {
  return value != null && isLength$1(value.length) && !isFunction$1(value);
}
var isArrayLike_1 = isArrayLike$1;
var arrayLikeKeys = _arrayLikeKeys, baseKeys = _baseKeys, isArrayLike = isArrayLike_1;
function keys$2(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
var keys_1 = keys$2;
var baseGetAllKeys = _baseGetAllKeys, getSymbols = _getSymbols, keys$1 = keys_1;
function getAllKeys$1(object) {
  return baseGetAllKeys(object, keys$1, getSymbols);
}
var _getAllKeys = getAllKeys$1;
var getAllKeys = _getAllKeys;
var COMPARE_PARTIAL_FLAG$3 = 1;
var objectProto$1 = Object.prototype;
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
      return false;
    }
  }
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key], othValue = other[key];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == "constructor");
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor, othCtor = other.constructor;
    if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack["delete"](object);
  stack["delete"](other);
  return result;
}
var _equalObjects = equalObjects$1;
var getNative$3 = _getNative, root$3 = _root;
var DataView$1 = getNative$3(root$3, "DataView");
var _DataView = DataView$1;
var getNative$2 = _getNative, root$2 = _root;
var Promise$2 = getNative$2(root$2, "Promise");
var _Promise = Promise$2;
var getNative$1 = _getNative, root$1 = _root;
var Set$2 = getNative$1(root$1, "Set");
var _Set = Set$2;
var getNative = _getNative, root = _root;
var WeakMap$2 = getNative(root, "WeakMap");
var _WeakMap = WeakMap$2;
var DataView = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$1 = _Set, WeakMap$1 = _WeakMap, baseGetTag$1 = _baseGetTag, toSource = _toSource;
var mapTag = "[object Map]", objectTag$1 = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
var dataViewTag = "[object DataView]";
var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
var getTag$1 = baseGetTag$1;
if (DataView && getTag$1(new DataView(new ArrayBuffer(1))) != dataViewTag || Map$1 && getTag$1(new Map$1()) != mapTag || Promise$1 && getTag$1(Promise$1.resolve()) != promiseTag || Set$1 && getTag$1(new Set$1()) != setTag || WeakMap$1 && getTag$1(new WeakMap$1()) != weakMapTag) {
  getTag$1 = function(value) {
    var result = baseGetTag$1(value), Ctor = result == objectTag$1 ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;
        case mapCtorString:
          return mapTag;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag;
        case weakMapCtorString:
          return weakMapTag;
      }
    }
    return result;
  };
}
var _getTag = getTag$1;
var Stack$1 = _Stack, equalArrays = _equalArrays, equalByTag = _equalByTag, equalObjects = _equalObjects, getTag = _getTag, isArray$5 = isArray_1, isBuffer = isBuffer$2.exports, isTypedArray = isTypedArray_1;
var COMPARE_PARTIAL_FLAG$2 = 1;
var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$5(object), othIsArr = isArray$5(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack$1());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack$1());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack$1());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
var _baseIsEqualDeep = baseIsEqualDeep$1;
var baseIsEqualDeep = _baseIsEqualDeep, isObjectLike$1 = isObjectLike_1;
function baseIsEqual$3(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike$1(value) && !isObjectLike$1(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$3, stack);
}
var _baseIsEqual = baseIsEqual$3;
var baseIsEqual$2 = _baseIsEqual;
function isEqual(value, other) {
  return baseIsEqual$2(value, other);
}
var isEqual_1 = isEqual;
var _interopRequireDefault$1 = interopRequireDefault.exports;
selection.__esModule = true;
selection.isSelected = isSelected;
selection.slotWidth = slotWidth;
selection.getSlotAtX = getSlotAtX;
selection.pointInBox = pointInBox;
selection.dateCellSelection = dateCellSelection;
var _isEqual = _interopRequireDefault$1(isEqual_1);
function isSelected(event, selected) {
  if (!event || selected == null)
    return false;
  return (0, _isEqual.default)(event, selected);
}
function slotWidth(rowBox, slots) {
  var rowWidth = rowBox.right - rowBox.left;
  var cellWidth = rowWidth / slots;
  return cellWidth;
}
function getSlotAtX(rowBox, x2, rtl, slots) {
  var cellWidth = slotWidth(rowBox, slots);
  return rtl ? slots - 1 - Math.floor((x2 - rowBox.left) / cellWidth) : Math.floor((x2 - rowBox.left) / cellWidth);
}
function pointInBox(box, _ref) {
  var x2 = _ref.x, y2 = _ref.y;
  return y2 >= box.top && y2 <= box.bottom && x2 >= box.left && x2 <= box.right;
}
function dateCellSelection(start2, rowBox, box, slots, rtl) {
  var startIdx = -1;
  var endIdx = -1;
  var lastSlotIdx = slots - 1;
  var cellWidth = slotWidth(rowBox, slots);
  var currentSlot = getSlotAtX(rowBox, box.x, rtl, slots);
  var isCurrentRow = rowBox.top < box.y && rowBox.bottom > box.y;
  var isStartRow = rowBox.top < start2.y && rowBox.bottom > start2.y;
  var isAboveStart = start2.y > rowBox.bottom;
  var isBelowStart = rowBox.top > start2.y;
  var isBetween = box.top < rowBox.top && box.bottom > rowBox.bottom;
  if (isBetween) {
    startIdx = 0;
    endIdx = lastSlotIdx;
  }
  if (isCurrentRow) {
    if (isBelowStart) {
      startIdx = 0;
      endIdx = currentSlot;
    } else if (isAboveStart) {
      startIdx = currentSlot;
      endIdx = lastSlotIdx;
    }
  }
  if (isStartRow) {
    startIdx = endIdx = rtl ? lastSlotIdx - Math.floor((start2.x - rowBox.left) / cellWidth) : Math.floor((start2.x - rowBox.left) / cellWidth);
    if (isCurrentRow) {
      if (currentSlot < startIdx)
        startIdx = currentSlot;
      else
        endIdx = currentSlot;
    } else if (start2.y < box.y) {
      endIdx = lastSlotIdx;
    } else {
      startIdx = 0;
    }
  }
  return {
    startIdx,
    endIdx
  };
}
(function(module2, exports2) {
  var _interopRequireDefault2 = interopRequireDefault.exports;
  exports2.__esModule = true;
  exports2.default = void 0;
  var _propTypes2 = _interopRequireDefault2(_propTypes_15_7_2_propTypes.exports);
  var _react2 = _interopRequireDefault2(_react_17_0_2_react.exports);
  var _EventCell = _interopRequireDefault2(EventCell.exports);
  var _selection = selection;
  var _default2 = {
    propTypes: {
      slotMetrics: _propTypes2.default.object.isRequired,
      selected: _propTypes2.default.object,
      isAllDay: _propTypes2.default.bool,
      accessors: _propTypes2.default.object.isRequired,
      localizer: _propTypes2.default.object.isRequired,
      components: _propTypes2.default.object.isRequired,
      getters: _propTypes2.default.object.isRequired,
      onSelect: _propTypes2.default.func,
      onDoubleClick: _propTypes2.default.func,
      onKeyPress: _propTypes2.default.func
    },
    defaultProps: {
      segments: [],
      selected: {}
    },
    renderEvent: function renderEvent2(props, event) {
      var selected = props.selected;
      props.isAllDay;
      var accessors2 = props.accessors, getters = props.getters, onSelect = props.onSelect, onDoubleClick = props.onDoubleClick, onKeyPress = props.onKeyPress, localizer = props.localizer, slotMetrics = props.slotMetrics, components = props.components, resizable = props.resizable;
      var continuesPrior2 = slotMetrics.continuesPrior(event);
      var continuesAfter2 = slotMetrics.continuesAfter(event);
      return /* @__PURE__ */ _react2.default.createElement(_EventCell.default, {
        event,
        getters,
        localizer,
        accessors: accessors2,
        components,
        onSelect,
        onDoubleClick,
        onKeyPress,
        continuesPrior: continuesPrior2,
        continuesAfter: continuesAfter2,
        slotStart: slotMetrics.first,
        slotEnd: slotMetrics.last,
        selected: (0, _selection.isSelected)(event, selected),
        resizable
      });
    },
    renderSpan: function renderSpan2(slots, len, key, content) {
      if (content === void 0) {
        content = " ";
      }
      var per = Math.abs(len) / slots * 100 + "%";
      return /* @__PURE__ */ _react2.default.createElement("div", {
        key,
        className: "rbc-row-segment",
        style: {
          WebkitFlexBasis: per,
          flexBasis: per,
          maxWidth: per
        }
      }, content);
    }
  };
  exports2.default = _default2;
  module2.exports = exports2.default;
})(EventRowMixin, EventRowMixin.exports);
(function(module2, exports2) {
  var _interopRequireDefault2 = interopRequireDefault.exports;
  exports2.__esModule = true;
  exports2.default = void 0;
  var _extends22 = _interopRequireDefault2(_extends.exports);
  var _inheritsLoose2 = _interopRequireDefault2(inheritsLoose.exports);
  _interopRequireDefault2(_propTypes_15_7_2_propTypes.exports);
  var _clsx = _interopRequireDefault2(require$$6);
  var _react2 = _interopRequireDefault2(_react_17_0_2_react.exports);
  var _EventRowMixin = _interopRequireDefault2(EventRowMixin.exports);
  var EventRow2 = /* @__PURE__ */ function(_React$Component) {
    (0, _inheritsLoose2.default)(EventRow3, _React$Component);
    function EventRow3() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = EventRow3.prototype;
    _proto.render = function render() {
      var _this = this;
      var _this$props = this.props, segments = _this$props.segments, slots = _this$props.slotMetrics.slots, className = _this$props.className;
      var lastEnd = 1;
      return /* @__PURE__ */ _react2.default.createElement("div", {
        className: (0, _clsx.default)(className, "rbc-row")
      }, segments.reduce(function(row, _ref, li2) {
        var event = _ref.event, left2 = _ref.left, right2 = _ref.right, span = _ref.span;
        var key = "_lvl_" + li2;
        var gap = left2 - lastEnd;
        var content = _EventRowMixin.default.renderEvent(_this.props, event);
        if (gap)
          row.push(_EventRowMixin.default.renderSpan(slots, gap, key + "_gap"));
        row.push(_EventRowMixin.default.renderSpan(slots, span, key, content));
        lastEnd = right2 + 1;
        return row;
      }, []));
    };
    return EventRow3;
  }(_react2.default.Component);
  EventRow2.propTypes = {};
  EventRow2.defaultProps = (0, _extends22.default)({}, _EventRowMixin.default.defaultProps);
  var _default2 = EventRow2;
  exports2.default = _default2;
  module2.exports = exports2.default;
})(EventRow, EventRow.exports);
var eventLevels$1 = {};
function baseFindIndex$1(array, predicate, fromIndex, fromRight) {
  var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}
var _baseFindIndex = baseFindIndex$1;
var Stack = _Stack, baseIsEqual$1 = _baseIsEqual;
var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
function baseIsMatch$1(object, source, matchData, customizer) {
  var index = matchData.length, length = index, noCustomizer = !customizer;
  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0], objValue = object[key], srcValue = data[1];
    if (noCustomizer && data[2]) {
      if (objValue === void 0 && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === void 0 ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}
var _baseIsMatch = baseIsMatch$1;
var isObject$1 = isObject_1;
function isStrictComparable$2(value) {
  return value === value && !isObject$1(value);
}
var _isStrictComparable = isStrictComparable$2;
var isStrictComparable$1 = _isStrictComparable, keys = keys_1;
function getMatchData$1(object) {
  var result = keys(object), length = result.length;
  while (length--) {
    var key = result[length], value = object[key];
    result[length] = [key, value, isStrictComparable$1(value)];
  }
  return result;
}
var _getMatchData = getMatchData$1;
function matchesStrictComparable$2(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
  };
}
var _matchesStrictComparable = matchesStrictComparable$2;
var baseIsMatch = _baseIsMatch, getMatchData = _getMatchData, matchesStrictComparable$1 = _matchesStrictComparable;
function baseMatches$1(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}
var _baseMatches = baseMatches$1;
var baseGetTag = _baseGetTag, isObjectLike = isObjectLike_1;
var symbolTag = "[object Symbol]";
function isSymbol$4(value) {
  return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
var isSymbol_1 = isSymbol$4;
var isArray$4 = isArray_1, isSymbol$3 = isSymbol_1;
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
function isKey$3(value, object) {
  if (isArray$4(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol$3(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
var _isKey = isKey$3;
var MapCache = _MapCache;
var FUNC_ERROR_TEXT = "Expected a function";
function memoize$1(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize$1.Cache || MapCache)();
  return memoized;
}
memoize$1.Cache = MapCache;
var memoize_1 = memoize$1;
var memoize = memoize_1;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped$1(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var _memoizeCapped = memoizeCapped$1;
var memoizeCapped = _memoizeCapped;
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath$1 = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46) {
    result.push("");
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
  });
  return result;
});
var _stringToPath = stringToPath$1;
function arrayMap$1(array, iteratee) {
  var index = -1, length = array == null ? 0 : array.length, result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}
var _arrayMap = arrayMap$1;
var Symbol$1 = _Symbol, arrayMap = _arrayMap, isArray$3 = isArray_1, isSymbol$2 = isSymbol_1;
var INFINITY$2 = 1 / 0;
var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseToString$1(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray$3(value)) {
    return arrayMap(value, baseToString$1) + "";
  }
  if (isSymbol$2(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$2 ? "-0" : result;
}
var _baseToString = baseToString$1;
var baseToString = _baseToString;
function toString$1(value) {
  return value == null ? "" : baseToString(value);
}
var toString_1 = toString$1;
var isArray$2 = isArray_1, isKey$2 = _isKey, stringToPath = _stringToPath, toString = toString_1;
function castPath$2(value, object) {
  if (isArray$2(value)) {
    return value;
  }
  return isKey$2(value, object) ? [value] : stringToPath(toString(value));
}
var _castPath = castPath$2;
var isSymbol$1 = isSymbol_1;
var INFINITY$1 = 1 / 0;
function toKey$4(value) {
  if (typeof value == "string" || isSymbol$1(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
}
var _toKey = toKey$4;
var castPath$1 = _castPath, toKey$3 = _toKey;
function baseGet$2(object, path) {
  path = castPath$1(path, object);
  var index = 0, length = path.length;
  while (object != null && index < length) {
    object = object[toKey$3(path[index++])];
  }
  return index && index == length ? object : void 0;
}
var _baseGet = baseGet$2;
var baseGet$1 = _baseGet;
function get$1(object, path, defaultValue) {
  var result = object == null ? void 0 : baseGet$1(object, path);
  return result === void 0 ? defaultValue : result;
}
var get_1 = get$1;
function baseHasIn$1(object, key) {
  return object != null && key in Object(object);
}
var _baseHasIn = baseHasIn$1;
var castPath = _castPath, isArguments = isArguments_1, isArray$1 = isArray_1, isIndex = _isIndex, isLength = isLength_1, toKey$2 = _toKey;
function hasPath$1(object, path, hasFunc) {
  path = castPath(path, object);
  var index = -1, length = path.length, result = false;
  while (++index < length) {
    var key = toKey$2(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray$1(object) || isArguments(object));
}
var _hasPath = hasPath$1;
var baseHasIn = _baseHasIn, hasPath = _hasPath;
function hasIn$1(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}
var hasIn_1 = hasIn$1;
var baseIsEqual = _baseIsEqual, get = get_1, hasIn = hasIn_1, isKey$1 = _isKey, isStrictComparable = _isStrictComparable, matchesStrictComparable = _matchesStrictComparable, toKey$1 = _toKey;
var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
function baseMatchesProperty$1(path, srcValue) {
  if (isKey$1(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey$1(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}
var _baseMatchesProperty = baseMatchesProperty$1;
function identity$1(value) {
  return value;
}
var identity_1 = identity$1;
function baseProperty$1(key) {
  return function(object) {
    return object == null ? void 0 : object[key];
  };
}
var _baseProperty = baseProperty$1;
var baseGet = _baseGet;
function basePropertyDeep$1(path) {
  return function(object) {
    return baseGet(object, path);
  };
}
var _basePropertyDeep = basePropertyDeep$1;
var baseProperty = _baseProperty, basePropertyDeep = _basePropertyDeep, isKey = _isKey, toKey = _toKey;
function property$1(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}
var property_1 = property$1;
var baseMatches = _baseMatches, baseMatchesProperty = _baseMatchesProperty, identity = identity_1, isArray = isArray_1, property = property_1;
function baseIteratee$1(value) {
  if (typeof value == "function") {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == "object") {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }
  return property(value);
}
var _baseIteratee = baseIteratee$1;
var reWhitespace = /\s/;
function trimmedEndIndex$1(string) {
  var index = string.length;
  while (index-- && reWhitespace.test(string.charAt(index))) {
  }
  return index;
}
var _trimmedEndIndex = trimmedEndIndex$1;
var trimmedEndIndex = _trimmedEndIndex;
var reTrimStart = /^\s+/;
function baseTrim$1(string) {
  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
}
var _baseTrim = baseTrim$1;
var baseTrim = _baseTrim, isObject = isObject_1, isSymbol = isSymbol_1;
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber$1(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_1 = toNumber$1;
var toNumber = toNumber_1;
var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
function toFinite$1(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}
var toFinite_1 = toFinite$1;
var toFinite = toFinite_1;
function toInteger$1(value) {
  var result = toFinite(value), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
var toInteger_1 = toInteger$1;
var baseFindIndex = _baseFindIndex, baseIteratee = _baseIteratee, toInteger = toInteger_1;
var nativeMax = Math.max;
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate), index);
}
var findIndex_1 = findIndex;
var _interopRequireDefault = interopRequireDefault.exports;
eventLevels$1.__esModule = true;
eventLevels$1.endOfRange = endOfRange;
eventLevels$1.eventSegments = eventSegments;
eventLevels$1.eventLevels = eventLevels;
eventLevels$1.inRange = inRange;
eventLevels$1.segsOverlap = segsOverlap;
eventLevels$1.sortEvents = sortEvents;
var _findIndex = _interopRequireDefault(findIndex_1);
function endOfRange(_ref) {
  var dateRange = _ref.dateRange, _ref$unit = _ref.unit, unit = _ref$unit === void 0 ? "day" : _ref$unit, localizer = _ref.localizer;
  return {
    first: dateRange[0],
    last: localizer.add(dateRange[dateRange.length - 1], 1, unit)
  };
}
function eventSegments(event, range2, accessors2, localizer) {
  var _endOfRange = endOfRange({
    dateRange: range2,
    localizer
  }), first = _endOfRange.first, last2 = _endOfRange.last;
  var slots = localizer.diff(first, last2, "day");
  var start2 = localizer.max(localizer.startOf(accessors2.start(event), "day"), first);
  var end2 = localizer.min(localizer.ceil(accessors2.end(event), "day"), last2);
  var padding = (0, _findIndex.default)(range2, function(x2) {
    return localizer.isSameDate(x2, start2);
  });
  var span = localizer.diff(start2, end2, "day");
  span = Math.min(span, slots);
  span = Math.max(span - localizer.segmentOffset, 1);
  return {
    event,
    span,
    left: padding + 1,
    right: Math.max(padding + span, 1)
  };
}
function eventLevels(rowSegments, limit) {
  if (limit === void 0) {
    limit = Infinity;
  }
  var i, j, seg, levels = [], extra = [];
  for (i = 0; i < rowSegments.length; i++) {
    seg = rowSegments[i];
    for (j = 0; j < levels.length; j++) {
      if (!segsOverlap(seg, levels[j]))
        break;
    }
    if (j >= limit) {
      extra.push(seg);
    } else {
      (levels[j] || (levels[j] = [])).push(seg);
    }
  }
  for (i = 0; i < levels.length; i++) {
    levels[i].sort(function(a, b) {
      return a.left - b.left;
    });
  }
  return {
    levels,
    extra
  };
}
function inRange(e, start2, end2, accessors2, localizer) {
  var event = {
    start: accessors2.start(e),
    end: accessors2.end(e)
  };
  var range2 = {
    start: start2,
    end: end2
  };
  return localizer.inEventRange({
    event,
    range: range2
  });
}
function segsOverlap(seg, otherSegs) {
  return otherSegs.some(function(otherSeg) {
    return otherSeg.left <= seg.right && otherSeg.right >= seg.left;
  });
}
function sortEvents(eventA, eventB, accessors2, localizer) {
  var evtA = {
    start: accessors2.start(eventA),
    end: accessors2.end(eventA),
    allDay: accessors2.allDay(eventA)
  };
  var evtB = {
    start: accessors2.start(eventB),
    end: accessors2.end(eventB),
    allDay: accessors2.allDay(eventB)
  };
  return localizer.sortEvents({
    evtA,
    evtB
  });
}
(function(module2, exports2) {
  var _interopRequireDefault2 = interopRequireDefault.exports;
  exports2.__esModule = true;
  exports2.default = void 0;
  var _extends22 = _interopRequireDefault2(_extends.exports);
  var _inheritsLoose2 = _interopRequireDefault2(inheritsLoose.exports);
  _interopRequireDefault2(_propTypes_15_7_2_propTypes.exports);
  var _react2 = _interopRequireDefault2(_react_17_0_2_react.exports);
  var _EventRow = _interopRequireDefault2(EventRow.exports);
  var _Selection = _interopRequireWildcard(Selection$1);
  var _eventLevels = eventLevels$1;
  var _selection = selection;
  var _common = common;
  var _DnDContext = DnDContext$1;
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var WeekWrapper2 = /* @__PURE__ */ function(_React$Component) {
    (0, _inheritsLoose2.default)(WeekWrapper3, _React$Component);
    function WeekWrapper3() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.handleMove = function(point, bounds, draggedEvent) {
        if (!(0, _selection.pointInBox)(bounds, point))
          return _this.reset();
        var event = _this.context.draggable.dragAndDropAction.event || draggedEvent;
        var _this$props = _this.props, accessors2 = _this$props.accessors, slotMetrics = _this$props.slotMetrics, rtl = _this$props.rtl, localizer = _this$props.localizer;
        var slot = (0, _selection.getSlotAtX)(bounds, point.x, rtl, slotMetrics.slots);
        var date2 = slotMetrics.getDateForSlot(slot);
        var _eventTimes = (0, _common.eventTimes)(event, accessors2, localizer), start2 = _eventTimes.start, duration = _eventTimes.duration;
        start2 = localizer.merge(date2, start2);
        var end2 = localizer.add(start2, duration, "milliseconds");
        _this.update(event, start2, end2);
      };
      _this.handleDropFromOutside = function(point, bounds) {
        if (!_this.context.draggable.onDropFromOutside)
          return;
        var _this$props2 = _this.props, slotMetrics = _this$props2.slotMetrics, rtl = _this$props2.rtl, localizer = _this$props2.localizer;
        var slot = (0, _selection.getSlotAtX)(bounds, point.x, rtl, slotMetrics.slots);
        var start2 = slotMetrics.getDateForSlot(slot);
        _this.context.draggable.onDropFromOutside({
          start: start2,
          end: localizer.add(start2, 1, "day"),
          allDay: false
        });
      };
      _this.handleDragOverFromOutside = function(point, node) {
        if (!_this.context.draggable.dragFromOutsideItem)
          return;
        _this.handleMove(point, node, _this.context.draggable.dragFromOutsideItem());
      };
      _this._selectable = function() {
        var node = _this.ref.current.closest(".rbc-month-row, .rbc-allday-cell");
        var container = node.closest(".rbc-month-view, .rbc-time-view");
        var selector = _this._selector = new _Selection.default(function() {
          return container;
        });
        selector.on("beforeSelect", function(point) {
          var isAllDay = _this.props.isAllDay;
          var action = _this.context.draggable.dragAndDropAction.action;
          var bounds = (0, _Selection.getBoundsForNode)(node);
          var isInBox = (0, _selection.pointInBox)(bounds, point);
          return action === "move" || action === "resize" && (!isAllDay || isInBox);
        });
        selector.on("selecting", function(box) {
          var bounds = (0, _Selection.getBoundsForNode)(node);
          var dragAndDropAction = _this.context.draggable.dragAndDropAction;
          if (dragAndDropAction.action === "move")
            _this.handleMove(box, bounds);
          if (dragAndDropAction.action === "resize")
            _this.handleResize(box, bounds);
        });
        selector.on("selectStart", function() {
          return _this.context.draggable.onStart();
        });
        selector.on("select", function(point) {
          var bounds = (0, _Selection.getBoundsForNode)(node);
          if (!_this.state.segment)
            return;
          if (!(0, _selection.pointInBox)(bounds, point)) {
            _this.reset();
          } else {
            _this.handleInteractionEnd();
          }
        });
        selector.on("dropFromOutside", function(point) {
          if (!_this.context.draggable.onDropFromOutside)
            return;
          var bounds = (0, _Selection.getBoundsForNode)(node);
          if (!(0, _selection.pointInBox)(bounds, point))
            return;
          _this.handleDropFromOutside(point, bounds);
        });
        selector.on("dragOverFromOutside", function(point) {
          if (!_this.context.draggable.dragFromOutsideItem)
            return;
          var bounds = (0, _Selection.getBoundsForNode)(node);
          _this.handleDragOverFromOutside(point, bounds);
        });
        selector.on("click", function() {
          return _this.context.draggable.onEnd(null);
        });
        selector.on("reset", function() {
          _this.reset();
          _this.context.draggable.onEnd(null);
        });
      };
      _this.handleInteractionEnd = function() {
        var _this$props3 = _this.props, resourceId = _this$props3.resourceId, isAllDay = _this$props3.isAllDay;
        var event = _this.state.segment.event;
        _this.reset();
        _this.context.draggable.onEnd({
          start: event.start,
          end: event.end,
          resourceId,
          isAllDay
        });
      };
      _this._teardownSelectable = function() {
        if (!_this._selector)
          return;
        _this._selector.teardown();
        _this._selector = null;
      };
      _this.state = {};
      _this.ref = /* @__PURE__ */ _react2.default.createRef();
      return _this;
    }
    var _proto = WeekWrapper3.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this._selectable();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this._teardownSelectable();
    };
    _proto.reset = function reset() {
      if (this.state.segment)
        this.setState({
          segment: null
        });
    };
    _proto.update = function update(event, start2, end2) {
      var segment = (0, _eventLevels.eventSegments)((0, _extends22.default)({}, event, {
        end: end2,
        start: start2,
        __isPreview: true
      }), this.props.slotMetrics.range, _common.dragAccessors, this.props.localizer);
      var lastSegment = this.state.segment;
      if (lastSegment && segment.span === lastSegment.span && segment.left === lastSegment.left && segment.right === lastSegment.right) {
        return;
      }
      this.setState({
        segment
      });
    };
    _proto.handleResize = function handleResize(point, bounds) {
      var _this$context$draggab = this.context.draggable.dragAndDropAction, event = _this$context$draggab.event, direction = _this$context$draggab.direction;
      var _this$props4 = this.props, accessors2 = _this$props4.accessors, slotMetrics = _this$props4.slotMetrics, rtl = _this$props4.rtl, localizer = _this$props4.localizer;
      var _eventTimes2 = (0, _common.eventTimes)(event, accessors2, localizer), start2 = _eventTimes2.start, end2 = _eventTimes2.end;
      var slot = (0, _selection.getSlotAtX)(bounds, point.x, rtl, slotMetrics.slots);
      var date2 = slotMetrics.getDateForSlot(slot);
      var cursorInRow = (0, _selection.pointInBox)(bounds, point);
      if (direction === "RIGHT") {
        if (cursorInRow) {
          if (slotMetrics.last < start2)
            return this.reset();
          end2 = localizer.add(date2, 1, "day");
        } else if (localizer.inRange(start2, slotMetrics.first, slotMetrics.last) || bounds.bottom < point.y && +slotMetrics.first > +start2) {
          end2 = localizer.add(slotMetrics.last, 1, "milliseconds");
        } else {
          this.setState({
            segment: null
          });
          return;
        }
        var originalEnd = accessors2.end(event);
        end2 = localizer.merge(end2, originalEnd);
        if (localizer.lt(end2, start2)) {
          end2 = originalEnd;
        }
      } else if (direction === "LEFT") {
        if (cursorInRow) {
          if (slotMetrics.first > end2)
            return this.reset();
          start2 = date2;
        } else if (localizer.inRange(end2, slotMetrics.first, slotMetrics.last) || bounds.top > point.y && localizer.lt(slotMetrics.last, end2)) {
          start2 = localizer.add(slotMetrics.first, -1, "milliseconds");
        } else {
          this.reset();
          return;
        }
        var originalStart = accessors2.start(event);
        start2 = localizer.merge(start2, originalStart);
        if (localizer.gt(start2, end2)) {
          start2 = originalStart;
        }
      }
      this.update(event, start2, end2);
    };
    _proto.render = function render() {
      var _this$props5 = this.props, children = _this$props5.children, accessors2 = _this$props5.accessors;
      var segment = this.state.segment;
      return /* @__PURE__ */ _react2.default.createElement("div", {
        ref: this.ref,
        className: "rbc-addons-dnd-row-body"
      }, children, segment && /* @__PURE__ */ _react2.default.createElement(_EventRow.default, (0, _extends22.default)({}, this.props, {
        selected: null,
        className: "rbc-addons-dnd-drag-row",
        segments: [segment],
        accessors: (0, _extends22.default)({}, accessors2, _common.dragAccessors)
      })));
    };
    return WeekWrapper3;
  }(_react2.default.Component);
  WeekWrapper2.contextType = _DnDContext.DnDContext;
  WeekWrapper2.propTypes = {};
  var _default2 = WeekWrapper2;
  exports2.default = _default2;
  module2.exports = exports2.default;
})(WeekWrapper, WeekWrapper.exports);
(function(module2, exports2) {
  var _interopRequireDefault2 = interopRequireDefault.exports;
  exports2.__esModule = true;
  exports2.default = withDragAndDrop2;
  var _extends22 = _interopRequireDefault2(_extends.exports);
  var _objectWithoutPropertiesLoose22 = _interopRequireDefault2(objectWithoutPropertiesLoose.exports);
  var _inheritsLoose2 = _interopRequireDefault2(inheritsLoose.exports);
  _interopRequireDefault2(_propTypes_15_7_2_propTypes.exports);
  var _react2 = _interopRequireDefault2(_react_17_0_2_react.exports);
  var _clsx = _interopRequireDefault2(require$$6);
  var _EventWrapper = _interopRequireDefault2(EventWrapper.exports);
  var _EventContainerWrapper = _interopRequireDefault2(EventContainerWrapper.exports);
  var _WeekWrapper = _interopRequireDefault2(WeekWrapper.exports);
  var _common = common;
  var _DnDContext = DnDContext$1;
  var _excluded3 = ["selectable", "elementProps"];
  function withDragAndDrop2(Calendar2) {
    var DragAndDropCalendar = /* @__PURE__ */ function(_React$Component) {
      (0, _inheritsLoose2.default)(DragAndDropCalendar2, _React$Component);
      function DragAndDropCalendar2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.defaultOnDragOver = function(event) {
          event.preventDefault();
        };
        _this.handleBeginAction = function(event, action, direction) {
          _this.setState({
            event,
            action,
            direction
          });
          var onDragStart = _this.props.onDragStart;
          if (onDragStart)
            onDragStart({
              event,
              action,
              direction
            });
        };
        _this.handleInteractionStart = function() {
          if (_this.state.interacting === false)
            _this.setState({
              interacting: true
            });
        };
        _this.handleInteractionEnd = function(interactionInfo) {
          var _this$state = _this.state, action = _this$state.action, event = _this$state.event;
          if (!action)
            return;
          _this.setState({
            action: null,
            event: null,
            interacting: false,
            direction: null
          });
          if (interactionInfo == null)
            return;
          interactionInfo.event = event;
          var _this$props = _this.props, onEventDrop = _this$props.onEventDrop, onEventResize = _this$props.onEventResize;
          if (action === "move" && onEventDrop)
            onEventDrop(interactionInfo);
          if (action === "resize" && onEventResize)
            onEventResize(interactionInfo);
        };
        var components = _this.props.components;
        _this.components = (0, _common.mergeComponents)(components, {
          eventWrapper: _EventWrapper.default,
          eventContainerWrapper: _EventContainerWrapper.default,
          weekWrapper: _WeekWrapper.default
        });
        _this.state = {
          interacting: false
        };
        return _this;
      }
      var _proto = DragAndDropCalendar2.prototype;
      _proto.getDnDContextValue = function getDnDContextValue() {
        return {
          draggable: {
            onStart: this.handleInteractionStart,
            onEnd: this.handleInteractionEnd,
            onBeginAction: this.handleBeginAction,
            onDropFromOutside: this.props.onDropFromOutside,
            dragFromOutsideItem: this.props.dragFromOutsideItem,
            draggableAccessor: this.props.draggableAccessor,
            resizableAccessor: this.props.resizableAccessor,
            dragAndDropAction: this.state
          }
        };
      };
      _proto.render = function render() {
        var _this$props2 = this.props, selectable = _this$props2.selectable, elementProps = _this$props2.elementProps, props = (0, _objectWithoutPropertiesLoose22.default)(_this$props2, _excluded3);
        var interacting = this.state.interacting;
        delete props.onEventDrop;
        delete props.onEventResize;
        props.selectable = selectable ? "ignoreEvents" : false;
        var elementPropsWithDropFromOutside = this.props.onDropFromOutside ? (0, _extends22.default)({}, elementProps, {
          onDragOver: this.props.onDragOver || this.defaultOnDragOver
        }) : elementProps;
        props.className = (0, _clsx.default)(props.className, "rbc-addons-dnd", !!interacting && "rbc-addons-dnd-is-dragging");
        var context = this.getDnDContextValue();
        return /* @__PURE__ */ _react2.default.createElement(_DnDContext.DnDContext.Provider, {
          value: context
        }, /* @__PURE__ */ _react2.default.createElement(Calendar2, (0, _extends22.default)({}, props, {
          elementProps: elementPropsWithDropFromOutside,
          components: this.components
        })));
      };
      return DragAndDropCalendar2;
    }(_react2.default.Component);
    DragAndDropCalendar.defaultProps = (0, _extends22.default)({}, Calendar2.defaultProps, {
      draggableAccessor: null,
      resizableAccessor: null,
      resizable: true
    });
    DragAndDropCalendar.propTypes = {};
    return DragAndDropCalendar;
  }
  module2.exports = exports2.default;
})(withDragAndDrop$1, withDragAndDrop$1.exports);
(function(module2, exports2) {
  var _interopRequireDefault2 = interopRequireDefault.exports;
  exports2.__esModule = true;
  exports2.default = void 0;
  var _withDragAndDrop = _interopRequireDefault2(withDragAndDrop$1.exports);
  var _default2 = _withDragAndDrop.default;
  exports2.default = _default2;
  module2.exports = exports2.default;
})(dragAndDrop, dragAndDrop.exports);
var withDragAndDrop = /* @__PURE__ */ getDefaultExportFromCjs(dragAndDrop.exports);
class GenericInputPrompt extends require$$0.Modal {
  constructor(app, header, placeholder, value) {
    super(app);
    __publicField(this, "waitForClose");
    __publicField(this, "resolvePromise");
    __publicField(this, "rejectPromise");
    __publicField(this, "didSubmit", false);
    __publicField(this, "inputComponent");
    __publicField(this, "input");
    __publicField(this, "placeholder");
    __publicField(this, "submitClickCallback", (evt) => this.submit());
    __publicField(this, "cancelClickCallback", (evt) => this.cancel());
    __publicField(this, "submitEnterCallback", (evt) => {
      if (evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    });
    this.header = header;
    this.placeholder = placeholder;
    this.input = value;
    this.waitForClose = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app, header, placeholder, value) {
    const newPromptModal = new GenericInputPrompt(app, header, placeholder, value);
    return newPromptModal.waitForClose;
  }
  display() {
    this.contentEl.empty();
    this.titleEl.textContent = this.header;
    const mainContentContainer = this.contentEl.createDiv();
    this.inputComponent = this.createInputField(mainContentContainer, this.placeholder, this.input);
    this.createButtonBar(mainContentContainer);
  }
  createInputField(container, placeholder, value) {
    const textComponent = new require$$0.TextComponent(container);
    textComponent.inputEl.style.width = "100%";
    textComponent.setPlaceholder(placeholder != null ? placeholder : "").setValue(value != null ? value : "").onChange((value2) => this.input = value2).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  createButton(container, text, callback) {
    const btn = new require$$0.ButtonComponent(container);
    btn.setButtonText(text).onClick(callback);
    return btn;
  }
  createButtonBar(mainContentContainer) {
    const buttonBarContainer = mainContentContainer.createDiv();
    this.createButton(buttonBarContainer, "Ok", this.submitClickCallback).setCta().buttonEl.style.marginRight = "0";
    this.createButton(buttonBarContainer, "Cancel", this.cancelClickCallback);
    buttonBarContainer.style.display = "flex";
    buttonBarContainer.style.flexDirection = "row-reverse";
    buttonBarContainer.style.justifyContent = "flex-start";
    buttonBarContainer.style.marginTop = "1rem";
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise("No input given.");
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener("keydown", this.submitEnterCallback);
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
    this.inputComponent.inputEl.select();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
}
const OnlyWhen = (props) => {
  const {
    children,
    when
  } = props;
  return when ? /* @__PURE__ */ jsx(Fragment, {
    children
  }) : null;
};
const Only = OnlyWhen;
var react_1 = _react_17_0_2_react.exports;
var isFunction = function(setStateAction) {
  return typeof setStateAction === "function";
};
var useStateRef = function(initialState) {
  var _a = react_1.useState(initialState), state = _a[0], setState = _a[1];
  var ref = react_1.useRef(state);
  var dispatch = react_1.useCallback(function(setStateAction) {
    ref.current = isFunction(setStateAction) ? setStateAction(ref.current) : setStateAction;
    setState(ref.current);
  }, []);
  return [state, dispatch, ref];
};
var dist = useStateRef;
const CalendarComponent = _react_17_0_2_react.exports.forwardRef((props, ref) => {
  const {
    selectable,
    resizeable,
    defaultView,
    popup,
    onEventDoubleClick: handleDoubleClickEventCallback,
    onEventSelect: handleEventSelectCallback
  } = props;
  const {
    eventState: {
      events
    }
  } = _react_17_0_2_react.exports.useContext(appContext);
  const refresh = useRefresh();
  const [newEvents, setNewEvents, eventRef] = dist(null);
  const [calendarView, setCalendarView, calendarViewRef] = dist(null);
  const DragAndDropCalendar = withDragAndDrop(Calendar$1);
  const localizer = moment(require$$0.moment);
  _react_17_0_2_react.exports.useEffect(() => {
    momentChange();
    const getView = getEditorContentCache();
    if (getView !== null && getView !== "month") {
      handleViewChange(getView);
    }
    if (eventRef.current !== events) {
      setNewEvents(events);
      refresh();
    }
  }, [events]);
  _react_17_0_2_react.exports.useImperativeHandle(ref, () => ({
    setEvents: () => {
      if (eventRef.current !== events) {
        setNewEvents(events);
        refresh();
      }
    }
  }), []);
  const momentChange = () => {
    require$$0.moment.locale("en");
    if (StartDate == "sunday") {
      require$$0.moment.updateLocale("en", {
        week: {
          dow: 0
        }
      });
      return require$$0.moment;
    }
    if (StartDate == "monday") {
      require$$0.moment.updateLocale("en", {
        week: {
          dow: 1
        }
      });
    }
    return require$$0.moment;
  };
  const styleEvents = (event) => {
    const className = event.eventType;
    return {
      className
    };
  };
  const handleDoubleClickEvent = _react_17_0_2_react.exports.useCallback((event) => {
    handleDoubleClickEventCallback(event);
  }, []);
  const handleEventSelect = _react_17_0_2_react.exports.useCallback(async (slotInfo) => {
    const {
      app
    } = dailyNotesService.getState();
    const addEvent = await GenericInputPrompt.Prompt(app, "Input Event", "", "");
    handleEventSelectCallback(addEvent, slotInfo);
  }, []);
  const handleViewChange = (view) => {
    setCalendarView(view);
    setEditorContentCache(view);
  };
  const onEventResize = (data) => {
    console.log(data);
  };
  const onEventDrop = (data) => {
    console.log(data);
  };
  return /* @__PURE__ */ jsx(Only, {
    when: newEvents !== void 0,
    children: /* @__PURE__ */ jsx(DragAndDropCalendar, {
      selectable,
      localizer,
      events: eventRef.current,
      resizable: resizeable,
      defaultView: calendarViewRef.current || defaultView,
      style: {
        height: "90vh"
      },
      eventPropGetter: styleEvents,
      popup,
      onEventDrop,
      onEventResize,
      titleAccessor: (event) => event.title,
      tooltipAccessor: (event) => event.title,
      onView: handleViewChange,
      onDoubleClickEvent: handleDoubleClickEvent,
      onSelectSlot: handleEventSelect
    })
  });
});
function getEditorContentCache() {
  var _a;
  return (_a = storage.get(["viewCache"]).viewCache) != null ? _a : "month";
}
function setEditorContentCache(view) {
  storage.set({
    viewCache: view
  });
}
const showEventInDailyNotes = async (eventId) => {
  const { app } = dailyNotesService.getState();
  const lineNum = parseInt(eventId.slice(14));
  const eventDateString = eventId.slice(0, 14);
  console.log(eventDateString);
  const date2 = require$$0.moment(eventDateString, "YYYYMMDDHHmmss");
  console.log(eventDateString);
  const file = await dailyNotesService.getDailyNoteByEvent(date2);
  if (!require$$0.Platform.isMobile) {
    const leaf = app.workspace.splitActiveLeaf();
    leaf.openFile(file, { eState: { line: lineNum } });
  } else {
    let leaf = app.workspace.activeLeaf;
    if (leaf === null) {
      leaf = app.workspace.getLeaf(true);
    }
    leaf.openFile(file, { eState: { line: lineNum } });
  }
  return;
};
const BigCalendar$1 = () => {
  const {
    globalState,
    eventState: {
      events
    }
  } = _react_17_0_2_react.exports.useContext(appContext);
  _react_17_0_2_react.exports.useRef(globalState);
  const [isFetching, setFetchStatus] = _react_17_0_2_react.exports.useState(true);
  const eventRef = _react_17_0_2_react.exports.useRef(null);
  _react_17_0_2_react.exports.useEffect(() => {
    eventService.fetchAllEvents().then(() => {
      setFetchStatus(false);
    }).catch(() => {
      new require$$0.Notice("\u{1F62D} Fetch Error");
    });
    dailyNotesService.getMyAllDailyNotes().then(() => {
      setFetchStatus(false);
    }).catch(() => {
      new require$$0.Notice("\u{1F62D} Fetch DailyNotes Error");
    });
    dailyNotesService.getState();
  }, []);
  const handleEventSelect = _react_17_0_2_react.exports.useCallback(async (content, slotInfo) => {
    const newEvent = await eventService.createEvent(content, slotInfo.start);
    eventService.pushEvent(newEvent);
  }, []);
  const handleEventDoubleClick = _react_17_0_2_react.exports.useCallback(async (event) => {
    if (event.path === void 0) {
      console.log(event.id);
      showEventInDailyNotes(event.id);
    }
  }, []);
  const calendarConfig = _react_17_0_2_react.exports.useMemo(() => ({
    selectable: true,
    resizeable: true,
    defaultView: "month",
    popup: true,
    onEventDoubleClick: handleEventDoubleClick,
    onEventSelect: handleEventSelect
  }), []);
  return /* @__PURE__ */ jsx("div", {
    className: `big-calendar-wrapper`,
    children: /* @__PURE__ */ jsx(Only, {
      when: events.length > 0,
      children: /* @__PURE__ */ jsx(CalendarComponent, __spreadValues({
        ref: eventRef
      }, calendarConfig))
    })
  });
};
const homeRouter = {
  "*": /* @__PURE__ */ jsx(BigCalendar$1, {})
};
const routerSwitch = (router) => {
  return (pathname) => {
    for (const key of Object.keys(router)) {
      if (key === pathname) {
        return router[key];
      }
    }
    return router["*"];
  };
};
const homeRouterSwitch = routerSwitch(homeRouter);
function useLoading(initialState = true) {
  const [state, setState] = _react_17_0_2_react.exports.useState({ isLoading: initialState, isFailed: false, isSucceed: false });
  return __spreadProps(__spreadValues({}, state), {
    setLoading: () => {
      setState(__spreadProps(__spreadValues({}, state), {
        isLoading: true,
        isFailed: false,
        isSucceed: false
      }));
    },
    setFinish: () => {
      setState(__spreadProps(__spreadValues({}, state), {
        isLoading: false,
        isFailed: false,
        isSucceed: true
      }));
    },
    setError: () => {
      setState(__spreadProps(__spreadValues({}, state), {
        isLoading: false,
        isFailed: true,
        isSucceed: false
      }));
    }
  });
}
function Home() {
  const {
    locationState: {
      pathname
    }
  } = _react_17_0_2_react.exports.useContext(appContext);
  const loadingState = useLoading();
  _react_17_0_2_react.exports.useEffect(() => {
    loadingState.setFinish();
  }, []);
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsx("section", {
      id: "page-wrapper",
      children: /* @__PURE__ */ jsx("main", {
        className: "content-wrapper",
        children: homeRouterSwitch(pathname)
      })
    })
  });
}
const Provider = (props) => {
  const {
    children,
    store,
    context: Context
  } = props;
  const [appState, setAppState] = _react_17_0_2_react.exports.useState(store.getState());
  _react_17_0_2_react.exports.useEffect(() => {
    const unsubscribe = store.subscribe((ns) => {
      setAppState(ns);
    });
    return () => {
      unsubscribe();
    };
  }, []);
  return /* @__PURE__ */ jsx(Context.Provider, {
    value: appState,
    children
  });
};
(() => {
  if (!String.prototype.replaceAll) {
    String.prototype.replaceAll = function(str, newStr) {
      if (Object.prototype.toString.call(str).toLowerCase() === "[object regexp]") {
        return this.replace(str, newStr);
      }
      return this.replace(new RegExp(str, "g"), newStr);
    };
  }
})();
function StrictApp() {
  return /* @__PURE__ */ jsx(Provider, {
    store: appStore,
    context: appContext,
    children: /* @__PURE__ */ jsx(App, {})
  });
}
function App() {
  _react_17_0_2_react.exports.useEffect(() => {
    const handleWindowResize = () => {
      globalStateService.setIsMobileView(document.body.clientWidth <= 875);
    };
    handleWindowResize();
    window.addEventListener("resize", handleWindowResize);
    return () => {
      window.removeEventListener("resize", handleWindowResize);
    };
  }, []);
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsx(Home, {})
  });
}
class BigCalendar extends require$$0.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    __publicField(this, "plugin");
    __publicField(this, "bigCalendarComponent");
    this.plugin = plugin;
  }
  getDisplayText() {
    return "Big Calendar";
  }
  getIcon() {
    return "calendar-with-checkmark";
  }
  getViewType() {
    return CALENDAR_VIEW_TYPE;
  }
  onEventsSettingsUpdate() {
    eventService.clearEvents();
    eventService.fetchAllEvents();
  }
  async onFileDeleted(file) {
    if (getDateFromFile_1(file, "day")) {
      await dailyNotesService.getMyAllDailyNotes();
      eventService.clearEvents();
      eventService.fetchAllEvents();
    }
  }
  async onFileModified(file) {
    const date2 = getDateFromFile_1(file, "day");
    if (date2 && this.bigCalendarComponent) {
      eventService.fetchAllEvents();
    }
  }
  onFileCreated(file) {
    if (this.app.workspace.layoutReady && this.bigCalendarComponent) {
      if (getDateFromFile_1(file, "day")) {
        dailyNotesService.getMyAllDailyNotes();
        eventService.fetchAllEvents();
      }
    }
  }
  async onOpen() {
    this.onEventsSettingsUpdate = this.onEventsSettingsUpdate.bind(this);
    this.onFileCreated = this.onFileCreated.bind(this);
    this.onFileDeleted = this.onFileDeleted.bind(this);
    this.onFileModified = this.onFileModified.bind(this);
    this.registerEvent(this.app.workspace.on("obsidian-events:settings-updated", this.onEventsSettingsUpdate));
    this.registerEvent(this.app.vault.on("create", this.onFileCreated));
    this.registerEvent(this.app.vault.on("delete", this.onFileDeleted));
    this.registerEvent(this.app.vault.on("modify", this.onFileModified));
    dailyNotesService.getApp(this.app);
    InsertAfter = this.plugin.settings.InsertAfter;
    StartDate = this.plugin.settings.StartDate;
    DefaultEventComposition = this.plugin.settings.DefaultEventComposition;
    ProcessEntriesBelow = this.plugin.settings.ProcessEntriesBelow;
    this.bigCalendarComponent = React.createElement(StrictApp);
    ReactDOM.render(this.bigCalendarComponent, this.contentEl);
  }
  async onClose() {
  }
}
let InsertAfter;
let StartDate;
let DefaultEventComposition;
let ProcessEntriesBelow;
const icons = {
  changeTaskStatus: `<svg t="1637072255349" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4250" width="100" height="100"><path d="M662.75 440.612c15.863-17.426 42.848-18.693 60.274-2.83 17.426 15.861 18.693 42.847 2.831 60.273L527.617 715.832c-16.55 18.18-45 18.65-62.14 1.026l-112.064-115.23c-16.429-16.894-16.053-43.906 0.84-60.335 16.893-16.428 43.905-16.052 60.334 0.84l80.45 82.724 167.714-184.245zM697.653 256c-23.565 0-42.667-19.103-42.667-42.667s19.102-42.666 42.667-42.666h124.651c40.288 0 73.697 31.956 73.697 72.347v85.783c0 23.564-19.103 42.667-42.667 42.667s-42.666-19.103-42.666-42.667V256H697.652z m113.015 597.333V449.167c0-23.564 19.102-42.667 42.666-42.667 23.564 0 42.667 19.103 42.667 42.667v417.152c0 40.391-33.41 72.348-73.697 72.348H201.697c-40.288 0-73.697-31.957-73.697-72.348V243.014c0-40.39 33.41-72.347 73.697-72.347h124.727c23.564 0 42.667 19.102 42.667 42.666 0 23.564-19.103 42.667-42.667 42.667h-113.09v597.333h597.333z m-384-682.666c-23.564 0-42.667 19.102-42.667 42.666C384 236.897 403.103 256 426.667 256h170.666C620.897 256 640 236.897 640 213.333s-19.103-42.666-42.667-42.666H426.667z m0-85.334h170.666c70.693 0 128 57.308 128 128 0 70.693-57.307 128-128 128H426.667c-70.693 0-128-57.307-128-128 0-70.692 57.307-128 128-128z" p-id="4251" fill="currentColor"></path></svg>`
};
function addIcons() {
  Object.keys(icons).forEach((key) => {
    require$$0.addIcon(key, icons[key]);
  });
}
var ar = {};
var cz = {};
var da = {};
var de = {};
var en = {
  welcome: "Welcome to the Big Calendar",
  "Open Big Calendar Successfully": "Open Big Calendar Successfully",
  "Open Big Calendar": "Open Big Calendar",
  Sunday: "Sunday",
  Monday: "Monday",
  "Regular Options": "Regular Options",
  "First Day of Week": "First Day of Week",
  "Insert after heading": "Insert after heading",
  "Choose the first day of the week. Sunday is the default.": "Choose the first day of the week. Sunday is the default.",
  "You should set the same heading below if you want to insert and process events below the same heading.": "You should set the same heading below if you want to insert and process events below the same heading.",
  "Process Events below": "Process events below",
  "Only entries below this string/section in your notes will be processed. If it does not exist no notes will be processed for that file.": "Only entries below this string/section in your notes will be processed. If it does not exist no notes will be processed for that file.",
  "Experimental Options": "Experimental Options",
  'Set default event composition, you should use {TIME} as "HH:mm" and {CONTENT} as content. "{TIME} {CONTENT}" by default': 'Set default event composition, you should use {TIME} as "HH:mm" and {CONTENT} as content. "{TIME} {CONTENT}" by default',
  "Default Event Composition": "Default Event Composition",
  "Say Thank You": "Say Thank You",
  Donate: "Donate",
  "If you like this plugin, consider donating to support continued development:": "If you like this plugin, consider donating to support continued development:"
};
var enGB = {};
var es = {};
var fr = {};
var hi = {};
var id = {};
var it = {};
var ja = {};
var ko = {};
var nl = {};
var no = {};
var pl = {};
var pt = {};
var ptBR = {};
var ro = {};
var ru = {};
var tr = {};
var zhCN = {
  welcome: "\u6B22\u8FCE\u4F7F\u7528\u5927\u65E5\u5386",
  "Open Big Calendar Successfully": "\u6210\u529F\u6253\u5F00\u5927\u65E5\u5386",
  "Open Big Calendar": "\u6253\u5F00\u5927\u65E5\u5386",
  Sunday: "\u661F\u671F\u65E5",
  Monday: "\u661F\u671F\u4E00",
  "Regular Options": "\u5E38\u89C4\u9009\u9879",
  "First Day of Week": "\u4E00\u5468\u5F00\u59CB",
  "Choose the first day of the week. Sunday is the default.": "\u9009\u62E9\u4E00\u5468\u7684\u5F00\u59CB\u65E5\u671F\u3002\u9ED8\u8BA4\u4E3A\u661F\u671F\u65E5\u3002",
  "Insert after heading": "\u5728\u6307\u5B9A\u6807\u9898\u540E\u63D2\u5165\u4E8B\u4EF6",
  "You should set the same heading below if you want to insert and process events below the same heading.": "\u4F60\u5982\u679C\u60F3\u8981\u63D2\u5165\u6807\u9898\u7684\u540C\u65F6\u663E\u793A\u5BF9\u5E94\u6807\u9898\u4E0B\u7684\u4E8B\u4EF6\uFF0C\u4F60\u5FC5\u987B\u4FDD\u8BC1\u5F53\u524D\u8BBE\u7F6E\u4E0E\u4E0B\u65B9\u7684\u89E3\u6790\u8BBE\u7F6E\u662F\u4E00\u81F4\u7684\u3002\u5F53\u4E3A\u7A7A\u65F6\u63D2\u5165\u5230\u6587\u672B",
  "Process Events below": "\u89E3\u6790\u6307\u5B9A\u6807\u9898\u540E\u7684\u4E8B\u4EF6",
  "Only entries below this string/section in your notes will be processed. If it does not exist no notes will be processed for that file.": "\u53EA\u6709\u5728\u8BBE\u7F6E\u7684\u6807\u9898\u540E\u7684\u4E8B\u4EF6 \u624D\u4F1A\u88AB\u89E3\u6790\u3002\u5F53\u4E3A\u7A7A\u65F6\u89E3\u6790\u5168\u6587\u7684\u4E8B\u4EF6",
  "Experimental Options": "\u5B9E\u9A8C\u6027\u9009\u9879",
  'Set default event composition, you should use {TIME} as "HH:mm" and {CONTENT} as content. "{TIME} {CONTENT}" by default': '\u8BBE\u7F6E\u9ED8\u8BA4\u4E8B\u4EF6\u7EC4\u6210\uFF0C\u4F60\u53EF\u4EE5\u4F7F\u7528 {TIME} \u4F5C\u4E3A "HH:mm" \u548C {CONTENT} \u4F5C\u4E3A\u5185\u5BB9\u3002\u9ED8\u8BA4\u4E3A "{TIME} {CONTENT}"',
  "Default Event Composition": "\u9ED8\u8BA4\u4E8B\u4EF6\u7EC4\u6210",
  "Say Thank You": "Say Thank You",
  Donate: "\u6350\u8D60",
  "If you like this plugin, consider donating to support continued development:": "\u5982\u679C\u4F60\u559C\u6B22\u8FD9\u4E2A\u63D2\u4EF6\uFF0C\u800C\u4E14\u4E5F\u5E0C\u671B\u7ED9\u6211\u4E70\u9E21\u817F\uFF0C\u90A3\u4E48\u53EF\u4EE5\u8003\u8651 Github \u9875\u9762\u53F3\u8FB9\u7684 Sponsor~"
};
var zhTW = {};
const localeMap = {
  ar,
  cs: cz,
  da,
  de,
  en,
  "en-gb": enGB,
  es,
  fr,
  hi,
  id,
  it,
  ja,
  ko,
  nl,
  nn: no,
  pl,
  pt,
  "pt-br": ptBR,
  ro,
  ru,
  tr,
  "zh-cn": zhCN,
  "zh-tw": zhTW
};
const locale = localeMap[require$$0.moment.locale()];
function t(str) {
  return locale && locale[str] || en[str];
}
const DEFAULT_SETTINGS = {
  StartDate: "Sunday",
  InsertAfter: "# Journal",
  ProcessEntriesBelow: "",
  DefaultEventComposition: "{TIME} {CONTENT}"
};
class BigCalendarSettingTab extends require$$0.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    __publicField(this, "plugin");
    __publicField(this, "applyDebounceTimer", 0);
    this.plugin = plugin;
  }
  applySettingsUpdate() {
    clearTimeout(this.applyDebounceTimer);
    const plugin = this.plugin;
    this.applyDebounceTimer = window.setTimeout(() => {
      plugin.saveSettings();
    }, 100);
  }
  async hide() {
  }
  async display() {
    await this.plugin.loadSettings();
    const { containerEl } = this;
    this.containerEl.empty();
    this.containerEl.createEl("h1", { text: t("Regular Options") });
    new require$$0.Setting(containerEl).setName(t("First Day of Week")).setDesc(t("Choose the first day of the week. Sunday is the default.")).addDropdown((dropdown) => dropdown.addOption("sunday", t("Sunday")).addOption("monday", t("Monday")).setValue(this.plugin.settings.StartDate).onChange(async (value) => {
      this.plugin.settings.StartDate = value;
      this.applySettingsUpdate();
    }));
    new require$$0.Setting(containerEl).setName(t("Insert after heading")).setDesc(t("You should set the same heading below if you want to insert and process events below the same heading.")).addText((text) => text.setPlaceholder("# JOURNAL").setValue(this.plugin.settings.InsertAfter).onChange(async (value) => {
      this.plugin.settings.InsertAfter = value;
      this.applySettingsUpdate();
    }));
    new require$$0.Setting(containerEl).setName(t("Process Events below")).setDesc(t("Only entries below this string/section in your notes will be processed. If it does not exist no notes will be processed for that file.")).addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.ProcessEntriesBelow).setValue(this.plugin.settings.ProcessEntriesBelow).onChange(async (value) => {
      this.plugin.settings.ProcessEntriesBelow = value;
      this.applySettingsUpdate();
    }));
    this.containerEl.createEl("h1", { text: t("Experimental Options") });
    new require$$0.Setting(containerEl).setName(t("Default Event Composition")).setDesc(t('Set default event composition, you should use {TIME} as "HH:mm" and {CONTENT} as content. "{TIME} {CONTENT}" by default')).addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.DefaultEventComposition).setValue(this.plugin.settings.DefaultEventComposition).onChange(async (value) => {
      this.plugin.settings.DefaultEventComposition = value;
      this.applySettingsUpdate();
    }));
    this.containerEl.createEl("h1", { text: t("Say Thank You") });
    new require$$0.Setting(containerEl).setName(t("Donate")).setDesc(t("If you like this plugin, consider donating to support continued development:")).addButton((bt) => {
      bt.buttonEl.outerHTML = `<a href="https://www.buymeacoffee.com/boninall"><img src="https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=boninall&button_colour=6495ED&font_colour=ffffff&font_family=Inter&outline_colour=000000&coffee_colour=FFDD00"></a>`;
    });
  }
}
class BigCalendarPlugin extends require$$0.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new BigCalendarSettingTab(this.app, this));
    this.registerView(CALENDAR_VIEW_TYPE, (leaf) => new BigCalendar(leaf, this));
    addIcons();
    this.addRibbonIcon("changeTaskStatus", "Big Calendar", () => {
      new require$$0.Notice(t("Open Big Calendar Successfully"));
      this.openCalendar();
    });
    this.addCommand({
      id: "open-big-calendar",
      name: t("Open Big Calendar"),
      callback: () => this.openCalendar(),
      hotkeys: []
    });
    await this.loadSettings();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(CALENDAR_VIEW_TYPE);
    new require$$0.Notice("Close Big Calendar Successfully");
  }
  async openCalendar() {
    const workspace = this.app.workspace;
    workspace.detachLeavesOfType(CALENDAR_VIEW_TYPE);
    const leaf = workspace.getLeaf(!require$$0.Platform.isMobile && workspace.activeLeaf && workspace.activeLeaf.view instanceof require$$0.FileView);
    await leaf.setViewState({ type: CALENDAR_VIEW_TYPE });
    workspace.revealLeaf(leaf);
  }
}
module.exports = BigCalendarPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsic3JjL2NvbnN0YW50cy50cyIsIm5vZGVfbW9kdWxlcy9fb2JqZWN0LWFzc2lnbkA0LjEuMUBvYmplY3QtYXNzaWduL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdEAxNy4wLjJAcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdEAxNy4wLjJAcmVhY3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvX3NjaGVkdWxlckAwLjIwLjJAc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJub2RlX21vZHVsZXMvX3NjaGVkdWxlckAwLjIwLjJAc2NoZWR1bGVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdC1kb21AMTcuMC4yQHJlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdC1kb21AMTcuMC4yQHJlYWN0LWRvbS9pbmRleC5qcyIsInNyYy9sYWJzL2NvbWJpbmVSZWR1Y2Vycy50cyIsInNyYy9sYWJzL2NyZWF0ZVN0b3JlLnRzIiwic3JjL3N0b3Jlcy9nbG9iYWxTdGF0ZVN0b3JlLnRzIiwic3JjL3N0b3Jlcy9sb2NhdGlvblN0b3JlLnRzIiwic3JjL2hlbHBlcnMvdXRpbHMudHMiLCJzcmMvc3RvcmVzL2V2ZW50U3RvcmUudHMiLCJub2RlX21vZHVsZXMvX29ic2lkaWFuLWRhaWx5LW5vdGVzLWludGVyZmFjZUAwLjkuNEBvYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2UvZGlzdC9tYWluLmpzIiwic3JjL3N0b3Jlcy9kYWlseU5vdGVzU3RvcmUudHMiLCJzcmMvc3RvcmVzL2FwcFN0b3JlLnRzIiwic3JjL3N0b3Jlcy9hcHBDb250ZXh0LnRzIiwic3JjL3NlcnZpY2VzL2RhaWx5Tm90ZXNTZXJ2aWNlLnRzIiwic3JjL2hlbHBlcnMvc3RvcmFnZS50cyIsInNyYy9zZXJ2aWNlcy9nbG9iYWxTdGF0ZVNlcnZpY2UudHMiLCJzcmMvc2VydmljZXMvbG9jYXRpb25TZXJ2aWNlLnRzIiwic3JjL29iQ29tcG9uZW50cy9vYkNyZWF0ZUV2ZW50LnRzIiwic3JjL29iQ29tcG9uZW50cy9vYlVwZGF0ZUV2ZW50LnRzIiwic3JjL29iQ29tcG9uZW50cy9vYkdldEV2ZW50cy50cyIsInNyYy9vYkNvbXBvbmVudHMvb2JEZWxldGVFdmVudC50cyIsInNyYy9vYkNvbXBvbmVudHMvb2JIaWRlRXZlbnQudHMiLCJzcmMvaGVscGVycy9hcGkudHMiLCJzcmMvc2VydmljZXMvZXZlbnRTZXJ2aWNlLnRzIiwic3JjL2hvb2tzL3VzZVJlZnJlc2gudHMiLCJub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTYuNUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwibm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjE2LjVAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIm5vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xNi41QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwibm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjE2LjVAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIm5vZGVfbW9kdWxlcy9fcHJvcC10eXBlc0AxNS43LjJAcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJub2RlX21vZHVsZXMvX3Byb3AtdHlwZXNAMTUuNy4yQHByb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwibm9kZV9tb2R1bGVzL19wcm9wLXR5cGVzQDE1LjcuMkBwcm9wLXR5cGVzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL19pbnZhcmlhbnRAMi4yLjRAaW52YXJpYW50L2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvX3VuY29udHJvbGxhYmxlQDcuMi4xQHVuY29udHJvbGxhYmxlL2xpYi9lc20vdXRpbHMuanMiLCJub2RlX21vZHVsZXMvX3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0QDMuMC40QHJlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmVzLmpzIiwibm9kZV9tb2R1bGVzL191bmNvbnRyb2xsYWJsZUA3LjIuMUB1bmNvbnRyb2xsYWJsZS9saWIvZXNtL3VuY29udHJvbGxhYmxlLmpzIiwibm9kZV9tb2R1bGVzL19jbHN4QDEuMS4xQGNsc3gvZGlzdC9jbHN4Lm0uanMiLCJub2RlX21vZHVsZXMvX2RhdGUtYXJpdGhtZXRpY0A0LjEuMEBkYXRlLWFyaXRobWV0aWMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTYuNUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZVNsaWNlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvZXEuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19yb290LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvaXNGdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL2lzTGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvaXNBcnJheUxpa2UuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9faXNJbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19pc0l0ZXJhdGVlQ2FsbC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL190cmltbWVkRW5kSW5kZXguanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZVRyaW0uanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9pc1N5bWJvbC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL3RvTnVtYmVyLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvdG9GaW5pdGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy90b0ludGVnZXIuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9jaHVuay5qcyIsIm5vZGVfbW9kdWxlcy9fZG9tLWhlbHBlcnNANS4yLjFAZG9tLWhlbHBlcnMvZXNtL293bmVyRG9jdW1lbnQuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9vd25lcldpbmRvdy5qcyIsIm5vZGVfbW9kdWxlcy9fZG9tLWhlbHBlcnNANS4yLjFAZG9tLWhlbHBlcnMvZXNtL2dldENvbXB1dGVkU3R5bGUuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9oeXBoZW5hdGUuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9oeXBoZW5hdGVTdHlsZS5qcyIsIm5vZGVfbW9kdWxlcy9fZG9tLWhlbHBlcnNANS4yLjFAZG9tLWhlbHBlcnMvZXNtL2lzVHJhbnNmb3JtLmpzIiwibm9kZV9tb2R1bGVzL19kb20taGVscGVyc0A1LjIuMUBkb20taGVscGVycy9lc20vY3NzLmpzIiwibm9kZV9tb2R1bGVzL19kb20taGVscGVyc0A1LjIuMUBkb20taGVscGVycy9lc20vY29udGFpbnMuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9pc0RvY3VtZW50LmpzIiwibm9kZV9tb2R1bGVzL19kb20taGVscGVyc0A1LjIuMUBkb20taGVscGVycy9lc20vaXNXaW5kb3cuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9nZXRTY3JvbGxBY2Nlc3Nvci5qcyIsIm5vZGVfbW9kdWxlcy9fZG9tLWhlbHBlcnNANS4yLjFAZG9tLWhlbHBlcnMvZXNtL3Njcm9sbExlZnQuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9zY3JvbGxUb3AuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9vZmZzZXQuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9vZmZzZXRQYXJlbnQuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9wb3NpdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9fZG9tLWhlbHBlcnNANS4yLjFAZG9tLWhlbHBlcnMvZXNtL2NhblVzZURPTS5qcyIsIm5vZGVfbW9kdWxlcy9fZG9tLWhlbHBlcnNANS4yLjFAZG9tLWhlbHBlcnMvZXNtL2FuaW1hdGlvbkZyYW1lLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2xpc3RDYWNoZUNsZWFyLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Fzc29jSW5kZXhPZi5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19saXN0Q2FjaGVEZWxldGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fbGlzdENhY2hlR2V0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2xpc3RDYWNoZUhhcy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19saXN0Q2FjaGVTZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fTGlzdENhY2hlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX3N0YWNrQ2xlYXIuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fc3RhY2tEZWxldGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fc3RhY2tHZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fc3RhY2tIYXMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fY29yZUpzRGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19pc01hc2tlZC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL190b1NvdXJjZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19iYXNlSXNOYXRpdmUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fZ2V0VmFsdWUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fZ2V0TmF0aXZlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX01hcC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19uYXRpdmVDcmVhdGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9faGFzaENsZWFyLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2hhc2hEZWxldGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9faGFzaEdldC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19oYXNoSGFzLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2hhc2hTZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fSGFzaC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19tYXBDYWNoZUNsZWFyLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2lzS2V5YWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19nZXRNYXBEYXRhLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX21hcENhY2hlRGVsZXRlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX21hcENhY2hlR2V0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX21hcENhY2hlSGFzLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX21hcENhY2hlU2V0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX01hcENhY2hlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX3N0YWNrU2V0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX1N0YWNrLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX3NldENhY2hlQWRkLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX3NldENhY2hlSGFzLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX1NldENhY2hlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2FycmF5U29tZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19jYWNoZUhhcy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19lcXVhbEFycmF5cy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19VaW50OEFycmF5LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX21hcFRvQXJyYXkuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fc2V0VG9BcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19lcXVhbEJ5VGFnLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2FycmF5UHVzaC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL2lzQXJyYXkuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZUdldEFsbEtleXMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYXJyYXlGaWx0ZXIuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9zdHViQXJyYXkuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fZ2V0U3ltYm9scy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19iYXNlVGltZXMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZUlzQXJndW1lbnRzLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvaXNBcmd1bWVudHMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9zdHViRmFsc2UuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9pc0J1ZmZlci5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19iYXNlSXNUeXBlZEFycmF5LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Jhc2VVbmFyeS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19ub2RlVXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL2lzVHlwZWRBcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19hcnJheUxpa2VLZXlzLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2lzUHJvdG90eXBlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX292ZXJBcmcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fbmF0aXZlS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19iYXNlS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL2tleXMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fZ2V0QWxsS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19lcXVhbE9iamVjdHMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fRGF0YVZpZXcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fUHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19TZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fV2Vha01hcC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19nZXRUYWcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZUlzRXF1YWxEZWVwLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Jhc2VJc0VxdWFsLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvaXNFcXVhbC5qcyIsIm5vZGVfbW9kdWxlcy9fQHJlc3RhcnRfaG9va3NAMC4zLjI3QEByZXN0YXJ0L2hvb2tzL2VzbS91c2VDYWxsYmFja1JlZi5qcyIsIm5vZGVfbW9kdWxlcy9fQHJlc3RhcnRfaG9va3NAMC4zLjI3QEByZXN0YXJ0L2hvb2tzL2VzbS91c2VNZXJnZWRSZWZzLmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL2VudW1zLmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvdy5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tYXRoLmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldExheW91dFJlY3QuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2NvbnRhaW5zLmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlTmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNUYWJsZUVsZW1lbnQuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi91dGlscy93aXRoaW4uanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldFZhcmlhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbC5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsQmFyWC5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Vmlld3BvcnRSZWN0LmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzU2Nyb2xsUGFyZW50LmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZXRlY3RPdmVyZmxvdy5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZmxpcC5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvaGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvb2Zmc2V0LmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzIiwibm9kZV9tb2R1bGVzL19AcG9wcGVyanNfY29yZUAyLjExLjBAQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEFsdEF4aXMuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qcyIsIm5vZGVfbW9kdWxlcy9fQHBvcHBlcmpzX2NvcmVAMi4xMS4wQEBwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE5vZGVTY3JvbGwuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvdXRpbHMvb3JkZXJNb2RpZmllcnMuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGVib3VuY2UuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VCeU5hbWUuanMiLCJub2RlX21vZHVsZXMvX0Bwb3BwZXJqc19jb3JlQDIuMTEuMEBAcG9wcGVyanMvY29yZS9saWIvY3JlYXRlUG9wcGVyLmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdC1vdmVybGF5c0A0LjEuMUByZWFjdC1vdmVybGF5cy9lc20vcG9wcGVyLmpzIiwibm9kZV9tb2R1bGVzL19AcmVzdGFydF9ob29rc0AwLjMuMjdAQHJlc3RhcnQvaG9va3MvZXNtL3VzZU1vdW50ZWQuanMiLCJub2RlX21vZHVsZXMvX0ByZXN0YXJ0X2hvb2tzQDAuMy4yN0BAcmVzdGFydC9ob29rcy9lc20vdXNlU2FmZVN0YXRlLmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdC1vdmVybGF5c0A0LjEuMUByZWFjdC1vdmVybGF5cy9lc20vdXNlUG9wcGVyLmpzIiwibm9kZV9tb2R1bGVzL19kb20taGVscGVyc0A1LjIuMUBkb20taGVscGVycy9lc20vYWRkRXZlbnRMaXN0ZW5lci5qcyIsIm5vZGVfbW9kdWxlcy9fZG9tLWhlbHBlcnNANS4yLjFAZG9tLWhlbHBlcnMvZXNtL3JlbW92ZUV2ZW50TGlzdGVuZXIuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9saXN0ZW4uanMiLCJub2RlX21vZHVsZXMvX0ByZXN0YXJ0X2hvb2tzQDAuMy4yN0BAcmVzdGFydC9ob29rcy9lc20vdXNlQ29tbWl0dGVkUmVmLmpzIiwibm9kZV9tb2R1bGVzL19AcmVzdGFydF9ob29rc0AwLjMuMjdAQHJlc3RhcnQvaG9va3MvZXNtL3VzZUV2ZW50Q2FsbGJhY2suanMiLCJub2RlX21vZHVsZXMvX3JlYWN0LW92ZXJsYXlzQDQuMS4xQHJlYWN0LW92ZXJsYXlzL2VzbS9zYWZlRmluZERPTU5vZGUuanMiLCJub2RlX21vZHVsZXMvX3JlYWN0LW92ZXJsYXlzQDQuMS4xQHJlYWN0LW92ZXJsYXlzL2VzbS9vd25lckRvY3VtZW50LmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdC1vdmVybGF5c0A0LjEuMUByZWFjdC1vdmVybGF5cy9lc20vdXNlUm9vdENsb3NlLmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdC1vdmVybGF5c0A0LjEuMUByZWFjdC1vdmVybGF5cy9lc20vdXNlV2FpdEZvckRPTVJlZi5qcyIsIm5vZGVfbW9kdWxlcy9fcmVhY3Qtb3ZlcmxheXNANC4xLjFAcmVhY3Qtb3ZlcmxheXMvZXNtL21lcmdlT3B0aW9uc1dpdGhQb3BwZXJDb25maWcuanMiLCJub2RlX21vZHVsZXMvX3JlYWN0QDE3LjAuMkByZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCJub2RlX21vZHVsZXMvX3JlYWN0QDE3LjAuMkByZWFjdC9qc3gtcnVudGltZS5qcyIsInJlYWN0L2pzeC1ydW50aW1lIiwibm9kZV9tb2R1bGVzL19yZWFjdC1vdmVybGF5c0A0LjEuMUByZWFjdC1vdmVybGF5cy9lc20vT3ZlcmxheS5qcyIsIm5vZGVfbW9kdWxlcy9fZG9tLWhlbHBlcnNANS4yLjFAZG9tLWhlbHBlcnMvZXNtL2hlaWdodC5qcyIsIm5vZGVfbW9kdWxlcy9fZG9tLWhlbHBlcnNANS4yLjFAZG9tLWhlbHBlcnMvZXNtL3F1ZXJ5U2VsZWN0b3JBbGwuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9tYXRjaGVzLmpzIiwibm9kZV9tb2R1bGVzL19kb20taGVscGVyc0A1LjIuMUBkb20taGVscGVycy9lc20vY2xvc2VzdC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19iYXNlRmluZEluZGV4LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Jhc2VJc01hdGNoLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2lzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19nZXRNYXRjaERhdGEuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZU1hdGNoZXMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9faXNLZXkuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9tZW1vaXplLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX21lbW9pemVDYXBwZWQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fc3RyaW5nVG9QYXRoLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2FycmF5TWFwLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Jhc2VUb1N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL3RvU3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Nhc3RQYXRoLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX3RvS2V5LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Jhc2VHZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9nZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZUhhc0luLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2hhc1BhdGguanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9oYXNJbi5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvaWRlbnRpdHkuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZVByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Jhc2VQcm9wZXJ0eURlZXAuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19iYXNlSXRlcmF0ZWUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9maW5kSW5kZXguanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZVJhbmdlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2NyZWF0ZVJhbmdlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvcmFuZ2UuanMiLCJub2RlX21vZHVsZXMvX21lbW9pemUtb25lQDUuMi4xQG1lbW9pemUtb25lL2Rpc3QvbWVtb2l6ZS1vbmUuZXNtLmpzIiwibm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjE2LjVAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9faXNGbGF0dGVuYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19iYXNlRmxhdHRlbi5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19jcmVhdGVCYXNlRm9yLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Jhc2VGb3IuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZUZvck93bi5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19jcmVhdGVCYXNlRWFjaC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19iYXNlRWFjaC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19iYXNlTWFwLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Jhc2VTb3J0QnkuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fY29tcGFyZUFzY2VuZGluZy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19jb21wYXJlTXVsdGlwbGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZU9yZGVyQnkuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYXBwbHkuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fb3ZlclJlc3QuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9jb25zdGFudC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19kZWZpbmVQcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19iYXNlU2V0VG9TdHJpbmcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fc2hvcnRPdXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fc2V0VG9TdHJpbmcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZVJlc3QuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9zb3J0QnkuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS93aWR0aC5qcyIsIm5vZGVfbW9kdWxlcy9fZG9tLWhlbHBlcnNANS4yLjFAZG9tLWhlbHBlcnMvZXNtL3Njcm9sbGJhclNpemUuanMiLCJub2RlX21vZHVsZXMvX2RvbS1oZWxwZXJzQDUuMi4xQGRvbS1oZWxwZXJzL2VzbS9oYXNDbGFzcy5qcyIsIm5vZGVfbW9kdWxlcy9fZG9tLWhlbHBlcnNANS4yLjFAZG9tLWhlbHBlcnMvZXNtL2FkZENsYXNzLmpzIiwibm9kZV9tb2R1bGVzL19kb20taGVscGVyc0A1LjIuMUBkb20taGVscGVycy9lc20vcmVtb3ZlQ2xhc3MuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYXJyYXlFYWNoLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Jhc2VBc3NpZ25WYWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19hc3NpZ25WYWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19jb3B5T2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Jhc2VBc3NpZ24uanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fbmF0aXZlS2V5c0luLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Jhc2VLZXlzSW4uanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9rZXlzSW4uanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZUFzc2lnbkluLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Nsb25lQnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2NvcHlBcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19jb3B5U3ltYm9scy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fZ2V0U3ltYm9sc0luLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2NvcHlTeW1ib2xzSW4uanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fZ2V0QWxsS2V5c0luLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2luaXRDbG9uZUFycmF5LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2Nsb25lQXJyYXlCdWZmZXIuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fY2xvbmVEYXRhVmlldy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19jbG9uZVJlZ0V4cC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19jbG9uZVN5bWJvbC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19jbG9uZVR5cGVkQXJyYXkuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9faW5pdENsb25lQnlUYWcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZUNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19pbml0Q2xvbmVPYmplY3QuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZUlzTWFwLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvaXNNYXAuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZUlzU2V0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvaXNTZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZUNsb25lLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvbGFzdC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19wYXJlbnQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9fYmFzZVVuc2V0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvaXNQbGFpbk9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL19jdXN0b21PbWl0Q2xvbmUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaC1lc0A0LjE3LjIxQGxvZGFzaC1lcy9mbGF0dGVuLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvX2ZsYXRSZXN0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvb21pdC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoLWVzQDQuMTcuMjFAbG9kYXNoLWVzL2RlZmF1bHRzLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvdHJhbnNmb3JtLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2gtZXNANC4xNy4yMUBsb2Rhc2gtZXMvbWFwVmFsdWVzLmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdC1iaWctY2FsZW5kYXJAMC4zOC4yQHJlYWN0LWJpZy1jYWxlbmRhci9kaXN0L3JlYWN0LWJpZy1jYWxlbmRhci5lc20uanMiLCJub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTYuNUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIm5vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xNi41QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIm5vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xNi41QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIm5vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xNi41QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTYuNUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UuanMiLCJub2RlX21vZHVsZXMvX3JlYWN0LWJpZy1jYWxlbmRhckAwLjM4LjJAcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi91dGlscy9jb25zdGFudHMuanMiLCJub2RlX21vZHVsZXMvX3JlYWN0LWJpZy1jYWxlbmRhckAwLjM4LjJAcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi91dGlscy9wcm9wVHlwZXMuanMiLCJub2RlX21vZHVsZXMvX3JlYWN0LWJpZy1jYWxlbmRhckAwLjM4LjJAcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi91dGlscy9hY2Nlc3NvcnMuanMiLCJub2RlX21vZHVsZXMvX3JlYWN0LWJpZy1jYWxlbmRhckAwLjM4LjJAcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9hZGRvbnMvZHJhZ0FuZERyb3AvRG5EQ29udGV4dC5qcyIsIm5vZGVfbW9kdWxlcy9fcmVhY3QtYmlnLWNhbGVuZGFyQDAuMzguMkByZWFjdC1iaWctY2FsZW5kYXIvbGliL2FkZG9ucy9kcmFnQW5kRHJvcC9FdmVudFdyYXBwZXIuanMiLCJub2RlX21vZHVsZXMvX3JlYWN0LWJpZy1jYWxlbmRhckAwLjM4LjJAcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9TZWxlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvX3JlYWN0LWJpZy1jYWxlbmRhckAwLjM4LjJAcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9UaW1lR3JpZEV2ZW50LmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdC1iaWctY2FsZW5kYXJAMC4zOC4yQHJlYWN0LWJpZy1jYWxlbmRhci9saWIvYWRkb25zL2RyYWdBbmREcm9wL2NvbW1vbi5qcyIsIm5vZGVfbW9kdWxlcy9fcmVhY3QtYmlnLWNhbGVuZGFyQDAuMzguMkByZWFjdC1iaWctY2FsZW5kYXIvbGliL05vb3BXcmFwcGVyLmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdC1iaWctY2FsZW5kYXJAMC4zOC4yQHJlYWN0LWJpZy1jYWxlbmRhci9saWIvYWRkb25zL2RyYWdBbmREcm9wL0V2ZW50Q29udGFpbmVyV3JhcHBlci5qcyIsIm5vZGVfbW9kdWxlcy9fcmVhY3QtYmlnLWNhbGVuZGFyQDAuMzguMkByZWFjdC1iaWctY2FsZW5kYXIvbGliL0V2ZW50Q2VsbC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL2VxLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fbGlzdENhY2hlR2V0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19saXN0Q2FjaGVTZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fTGlzdENhY2hlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fc3RhY2tHZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fc3RhY2tIYXMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19yb290LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX1N5bWJvbC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19nZXRSYXdUYWcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fYmFzZUdldFRhZy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL2lzT2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2lzTWFza2VkLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX3RvU291cmNlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19nZXRWYWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19nZXROYXRpdmUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fTWFwLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19oYXNoQ2xlYXIuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9faGFzaERlbGV0ZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19oYXNoR2V0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2hhc2hIYXMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9faGFzaFNldC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19IYXNoLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9faXNLZXlhYmxlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2dldE1hcERhdGEuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fTWFwQ2FjaGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fc3RhY2tTZXQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fU3RhY2suanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fc2V0Q2FjaGVIYXMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fU2V0Q2FjaGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fYXJyYXlTb21lLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2NhY2hlSGFzLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2VxdWFsQXJyYXlzLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fbWFwVG9BcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19zZXRUb0FycmF5LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2VxdWFsQnlUYWcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fYXJyYXlQdXNoLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvaXNBcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19iYXNlR2V0QWxsS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19hcnJheUZpbHRlci5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL3N0dWJBcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL3N0dWJGYWxzZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL2lzQnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2lzSW5kZXguanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9pc0xlbmd0aC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19ub2RlVXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL2lzVHlwZWRBcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19hcnJheUxpa2VLZXlzLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX292ZXJBcmcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19iYXNlS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gva2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19EYXRhVmlldy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19Qcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX1NldC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19XZWFrTWFwLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2dldFRhZy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19iYXNlSXNFcXVhbERlZXAuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9pc0VxdWFsLmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdC1iaWctY2FsZW5kYXJAMC4zOC4yQHJlYWN0LWJpZy1jYWxlbmRhci9saWIvdXRpbHMvc2VsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL19yZWFjdC1iaWctY2FsZW5kYXJAMC4zOC4yQHJlYWN0LWJpZy1jYWxlbmRhci9saWIvRXZlbnRSb3dNaXhpbi5qcyIsIm5vZGVfbW9kdWxlcy9fcmVhY3QtYmlnLWNhbGVuZGFyQDAuMzguMkByZWFjdC1iaWctY2FsZW5kYXIvbGliL0V2ZW50Um93LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2Jhc2VGaW5kSW5kZXguanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fYmFzZUlzTWF0Y2guanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9faXNTdHJpY3RDb21wYXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2dldE1hdGNoRGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19iYXNlTWF0Y2hlcy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL2lzU3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2lzS2V5LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvbWVtb2l6ZS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19hcnJheU1hcC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC90b1N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19jYXN0UGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL190b0tleS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19iYXNlR2V0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvZ2V0LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2Jhc2VIYXNJbi5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19oYXNQYXRoLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvaGFzSW4uanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fYmFzZU1hdGNoZXNQcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL2lkZW50aXR5LmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX2Jhc2VQcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19iYXNlUHJvcGVydHlEZWVwLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9fYmFzZUl0ZXJhdGVlLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvX3RyaW1tZWRFbmRJbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL19iYXNlVHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9fbG9kYXNoQDQuMTcuMjFAbG9kYXNoL3RvTnVtYmVyLmpzIiwibm9kZV9tb2R1bGVzL19sb2Rhc2hANC4xNy4yMUBsb2Rhc2gvdG9GaW5pdGUuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC90b0ludGVnZXIuanMiLCJub2RlX21vZHVsZXMvX2xvZGFzaEA0LjE3LjIxQGxvZGFzaC9maW5kSW5kZXguanMiLCJub2RlX21vZHVsZXMvX3JlYWN0LWJpZy1jYWxlbmRhckAwLjM4LjJAcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi91dGlscy9ldmVudExldmVscy5qcyIsIm5vZGVfbW9kdWxlcy9fcmVhY3QtYmlnLWNhbGVuZGFyQDAuMzguMkByZWFjdC1iaWctY2FsZW5kYXIvbGliL2FkZG9ucy9kcmFnQW5kRHJvcC9XZWVrV3JhcHBlci5qcyIsIm5vZGVfbW9kdWxlcy9fcmVhY3QtYmlnLWNhbGVuZGFyQDAuMzguMkByZWFjdC1iaWctY2FsZW5kYXIvbGliL2FkZG9ucy9kcmFnQW5kRHJvcC93aXRoRHJhZ0FuZERyb3AuanMiLCJub2RlX21vZHVsZXMvX3JlYWN0LWJpZy1jYWxlbmRhckAwLjM4LjJAcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9hZGRvbnMvZHJhZ0FuZERyb3AvaW5kZXguanMiLCJzcmMvb2JDb21wb25lbnRzL0dlbmVyaWNJbnB1dFByb21wdC50cyIsInNyYy9jb21wb25lbnQvY29tbW9uL09ubHlXaGVuLnRzeCIsIm5vZGVfbW9kdWxlcy9fcmVhY3QtdXNlc3RhdGVyZWZAMS4wLjhAcmVhY3QtdXNlc3RhdGVyZWYvZGlzdC9pbmRleC5qcyIsInNyYy9jb21wb25lbnQvQ2FsZW5kYXIvQ2FsZW5kYXIudHN4Iiwic3JjL29iQ29tcG9uZW50cy9vYlNob3dFdmVudC50cyIsInNyYy9jb21wb25lbnQvYmlnQ2FsZW5kYXIudHN4Iiwic3JjL3JvdXRlcnMvaG9tZVJvdXRlci50c3giLCJzcmMvcm91dGVycy9pbmRleC50cyIsInNyYy9ob29rcy91c2VMb2FkaW5nLnRzIiwic3JjL3BhZ2VzL0hvbWUudHN4Iiwic3JjL2xhYnMvUHJvdmlkZXIudHN4Iiwic3JjL2hlbHBlcnMvcG9seWZpbGwudHMiLCJzcmMvQXBwLnRzeCIsInNyYy9iaWdDYWxlbmRhci50cyIsInNyYy9vYkNvbXBvbmVudHMvY3VzdG9tSWNvbnMudHMiLCJzcmMvdHJhbnNsYXRpb25zL2xvY2FsZS9hci50cyIsInNyYy90cmFuc2xhdGlvbnMvbG9jYWxlL2N6LnRzIiwic3JjL3RyYW5zbGF0aW9ucy9sb2NhbGUvZGEudHMiLCJzcmMvdHJhbnNsYXRpb25zL2xvY2FsZS9kZS50cyIsInNyYy90cmFuc2xhdGlvbnMvbG9jYWxlL2VuLnRzIiwic3JjL3RyYW5zbGF0aW9ucy9sb2NhbGUvZW4tZ2IudHMiLCJzcmMvdHJhbnNsYXRpb25zL2xvY2FsZS9lcy50cyIsInNyYy90cmFuc2xhdGlvbnMvbG9jYWxlL2ZyLnRzIiwic3JjL3RyYW5zbGF0aW9ucy9sb2NhbGUvaGkudHMiLCJzcmMvdHJhbnNsYXRpb25zL2xvY2FsZS9pZC50cyIsInNyYy90cmFuc2xhdGlvbnMvbG9jYWxlL2l0LnRzIiwic3JjL3RyYW5zbGF0aW9ucy9sb2NhbGUvamEudHMiLCJzcmMvdHJhbnNsYXRpb25zL2xvY2FsZS9rby50cyIsInNyYy90cmFuc2xhdGlvbnMvbG9jYWxlL25sLnRzIiwic3JjL3RyYW5zbGF0aW9ucy9sb2NhbGUvbm8udHMiLCJzcmMvdHJhbnNsYXRpb25zL2xvY2FsZS9wbC50cyIsInNyYy90cmFuc2xhdGlvbnMvbG9jYWxlL3B0LnRzIiwic3JjL3RyYW5zbGF0aW9ucy9sb2NhbGUvcHQtYnIudHMiLCJzcmMvdHJhbnNsYXRpb25zL2xvY2FsZS9yby50cyIsInNyYy90cmFuc2xhdGlvbnMvbG9jYWxlL3J1LnRzIiwic3JjL3RyYW5zbGF0aW9ucy9sb2NhbGUvdHIudHMiLCJzcmMvdHJhbnNsYXRpb25zL2xvY2FsZS96aC1jbi50cyIsInNyYy90cmFuc2xhdGlvbnMvbG9jYWxlL3poLXR3LnRzIiwic3JjL3RyYW5zbGF0aW9ucy9oZWxwZXIudHMiLCJzcmMvc2V0dGluZy50cyIsInNyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgQ0FMRU5EQVJfVklFV19UWVBFID0gJ2JpZy1jYWxlbmRhcic7XHJcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjIwLjJcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGs7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fVxuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHQ9bnVsbCx1PW51bGwsdz1mdW5jdGlvbigpe2lmKG51bGwhPT10KXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3QoITAsYSk7dD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodywwKSxiO319O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXQ/c2V0VGltZW91dChmLDAsYSk6KHQ9YSxzZXRUaW1lb3V0KHcsMCkpfTtnPWZ1bmN0aW9uKGEsYil7dT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSl9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX07az1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB4PXdpbmRvdy5zZXRUaW1lb3V0LHk9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciB6PVxud2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIHomJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpfXZhciBBPSExLEI9bnVsbCxDPS0xLEQ9NSxFPTA7ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1cbkV9O2s9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOkQ9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBGPW5ldyBNZXNzYWdlQ2hhbm5lbCxHPUYucG9ydDI7Ri5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZihudWxsIT09Qil7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtFPWErRDt0cnl7QighMCxhKT9HLnBvc3RNZXNzYWdlKG51bGwpOihBPSExLEI9bnVsbCl9Y2F0Y2goYil7dGhyb3cgRy5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBBPSExfTtmPWZ1bmN0aW9uKGEpe0I9YTtBfHwoQT0hMCxHLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0M9XG54KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt5KEMpO0M9LTF9fWZ1bmN0aW9uIEgoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SShlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gSihhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gSyhhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5JKG4sYykpdm9pZCAwIT09ciYmMD5JKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5JKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBJKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBMPVtdLE09W10sTj0xLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEpe2Zvcih2YXIgYj1KKE0pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spSyhNKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKUsoTSksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxIKEwsYik7ZWxzZSBicmVhaztiPUooTSl9fWZ1bmN0aW9uIFUoYSl7Uz0hMTtUKGEpO2lmKCFSKWlmKG51bGwhPT1KKEwpKVI9ITAsZihWKTtlbHNle3ZhciBiPUooTSk7bnVsbCE9PWImJmcoVSxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBWKGEsYil7Uj0hMTtTJiYoUz0hMSxoKCkpO1E9ITA7dmFyIGM9UDt0cnl7VChiKTtmb3IoTz1KKEwpO251bGwhPT1PJiYoIShPLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCgpKTspe3ZhciBkPU8uY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe08uY2FsbGJhY2s9bnVsbDtQPU8ucHJpb3JpdHlMZXZlbDt2YXIgZT1kKE8uZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9PLmNhbGxiYWNrPWU6Tz09PUooTCkmJksoTCk7VChiKX1lbHNlIEsoTCk7Tz1KKEwpfWlmKG51bGwhPT1PKXZhciBtPSEwO2Vsc2V7dmFyIG49SihNKTtudWxsIT09biYmZyhVLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtPPW51bGwsUD1jLFE9ITF9fXZhciBXPWs7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7Unx8UXx8KFI9ITAsZihWKSl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUH07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBKKEwpfTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUCl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9UH12YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1A9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVc7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1QO1A9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1A9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDpOKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxIKE0sYSksbnVsbD09PUooTCkmJmE9PT1KKE0pJiYoUz9oKCk6Uz0hMCxnKFUsYy1kKSkpOihhLnNvcnRJbmRleD1lLEgoTCxhKSxSfHxRfHwoUj0hMCxmKFYpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7UD1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB5KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih5KDIyNykpO3ZhciBiYT1uZXcgU2V0LGNhPXt9O2Z1bmN0aW9uIGRhKGEsYil7ZWEoYSxiKTtlYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gZWEoYSxiKXtjYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspYmEuYWRkKGJbYV0pfVxudmFyIGZhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxoYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8saWE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbmphPXt9LGthPXt9O2Z1bmN0aW9uIGxhKGEpe2lmKGlhLmNhbGwoa2EsYSkpcmV0dXJuITA7aWYoaWEuY2FsbChqYSxhKSlyZXR1cm4hMTtpZihoYS50ZXN0KGEpKXJldHVybiBrYVthXT0hMDtqYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBtYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIG5hKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG1hKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciBvYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHBhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLFxucGEpO0RbYl09bmV3IEIoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuRC54bGlua0hyZWY9bmV3IEIoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gcWEoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwobmEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP2xhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgcmE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsc2E9NjAxMDMsdGE9NjAxMDYsdWE9NjAxMDcsd2E9NjAxMDgseGE9NjAxMTQseWE9NjAxMDksemE9NjAxMTAsQWE9NjAxMTIsQmE9NjAxMTMsQ2E9NjAxMjAsRGE9NjAxMTUsRWE9NjAxMTYsRmE9NjAxMjEsR2E9NjAxMjgsSGE9NjAxMjksSWE9NjAxMzAsSmE9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgRT1TeW1ib2wuZm9yO3NhPUUoXCJyZWFjdC5lbGVtZW50XCIpO3RhPUUoXCJyZWFjdC5wb3J0YWxcIik7dWE9RShcInJlYWN0LmZyYWdtZW50XCIpO3dhPUUoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTt4YT1FKFwicmVhY3QucHJvZmlsZXJcIik7eWE9RShcInJlYWN0LnByb3ZpZGVyXCIpO3phPUUoXCJyZWFjdC5jb250ZXh0XCIpO0FhPUUoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtCYT1FKFwicmVhY3Quc3VzcGVuc2VcIik7Q2E9RShcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7RGE9RShcInJlYWN0Lm1lbW9cIik7RWE9RShcInJlYWN0LmxhenlcIik7RmE9RShcInJlYWN0LmJsb2NrXCIpO0UoXCJyZWFjdC5zY29wZVwiKTtHYT1FKFwicmVhY3Qub3BhcXVlLmlkXCIpO0hhPUUoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO0lhPUUoXCJyZWFjdC5vZmZzY3JlZW5cIik7SmE9RShcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG52YXIgS2E9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIExhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1LYSYmYVtLYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgTWE7ZnVuY3Rpb24gTmEoYSl7aWYodm9pZCAwPT09TWEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TWE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK01hK2F9dmFyIE9hPSExO1xuZnVuY3Rpb24gUGEoYSxiKXtpZighYXx8T2EpcmV0dXJuXCJcIjtPYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2goayl7dmFyIGQ9a31SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGspe2Q9a31hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGspe2Q9a31hKCl9fWNhdGNoKGspe2lmKGsmJmQmJlwic3RyaW5nXCI9PT10eXBlb2Ygay5zdGFjayl7Zm9yKHZhciBlPWsuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSlyZXR1cm5cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO3doaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtPYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP05hKGEpOlwiXCJ9XG5mdW5jdGlvbiBRYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTmEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBOYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTmEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBOYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9UGEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9UGEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDIyOnJldHVybiBhPVBhKGEudHlwZS5fcmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1QYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFJhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgdGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIHhhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHdhOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgQmE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgQ2E6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgemE6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgeWE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgQWE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7XG5yZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIERhOnJldHVybiBSYShhLnR5cGUpO2Nhc2UgRmE6cmV0dXJuIFJhKGEuX3JlbmRlcik7Y2FzZSBFYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUmEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uICRhKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmcWEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGFiKGEsYil7JGEoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9iYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZiYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBiYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBkYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBlYihhLGIpe2E9bSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWRiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHkoOTEpKTtyZXR1cm4gbSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih5KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IoeSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIGtiPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5iLG9iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWtiLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle25iPW5ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW5iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHBiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcWI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scmI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHFiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cWJbYl09cWJbYV19KX0pO2Z1bmN0aW9uIHNiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxxYi5oYXNPd25Qcm9wZXJ0eShhKSYmcWJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gdGIoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9c2IoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdWI9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHZiKGEsYil7aWYoYil7aWYodWJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih5KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih5KDYyKSk7fX1cbmZ1bmN0aW9uIHdiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHkoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPUdiLEtiPSExLExiPSExO2Z1bmN0aW9uIE1iKCl7aWYobnVsbCE9PXpifHxudWxsIT09QWIpSWIoKSxGYigpfVxuZnVuY3Rpb24gTmIoYSxiLGMpe2lmKExiKXJldHVybiBhKGIsYyk7TGI9ITA7dHJ5e3JldHVybiBKYihhLGIsYyl9ZmluYWxseXtMYj0hMSxNYigpfX1cbmZ1bmN0aW9uIE9iKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IoeSgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBQYj0hMTtpZihmYSl0cnl7dmFyIFFiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShRYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7UGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKX1jYXRjaChhKXtQYj0hMX1mdW5jdGlvbiBSYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgU2I9ITEsVGI9bnVsbCxVYj0hMSxWYj1udWxsLFdiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe1NiPSEwO1RiPWF9fTtmdW5jdGlvbiBYYihhLGIsYyxkLGUsZixnLGgsayl7U2I9ITE7VGI9bnVsbDtSYi5hcHBseShXYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gWWIoYSxiLGMsZCxlLGYsZyxoLGspe1hiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihTYil7aWYoU2Ipe3ZhciBsPVRiO1NiPSExO1RiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih5KDE5OCkpO1VifHwoVWI9ITAsVmI9bCl9fWZ1bmN0aW9uIFpiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBhYyhhKXtpZihaYihhKSE9PWEpdGhyb3cgRXJyb3IoeSgxODgpKTt9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1aYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBhYyhlKSxhO2lmKGY9PT1kKXJldHVybiBhYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHkoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IoeSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih5KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGNjKGEpe2E9YmMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkYyhhLGIpe2Zvcih2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09Yjspe2lmKGI9PT1hfHxiPT09YylyZXR1cm4hMDtiPWIucmV0dXJufXJldHVybiExfXZhciBlYyxmYyxnYyxoYyxpYz0hMSxqYz1bXSxrYz1udWxsLGxjPW51bGwsbWM9bnVsbCxuYz1uZXcgTWFwLG9jPW5ldyBNYXAscGM9W10scWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gcmMoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsZG9tRXZlbnROYW1lOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDE2LG5hdGl2ZUV2ZW50OmUsdGFyZ2V0Q29udGFpbmVyczpbZF19fWZ1bmN0aW9uIHNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6a2M9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmxjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOm1jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpuYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpvYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIHRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9cmMoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJmZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIGtjPXRjKGtjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBsYz10YyhsYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gbWM9dGMobWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtuYy5zZXQoZix0YyhuYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsb2Muc2V0KGYsdGMob2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gdmMoYSl7dmFyIGI9d2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1aYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj0kYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtoYyhhLmxhbmVQcmlvcml0eSxmdW5jdGlvbigpe3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtnYyhjKX0pfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIHhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09YylyZXR1cm4gYj1DYihjKSxudWxsIT09YiYmZmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gemMoYSxiLGMpe3hjKGEpJiZjLmRlbGV0ZShiKX1cbmZ1bmN0aW9uIEFjKCl7Zm9yKGljPSExOzA8amMubGVuZ3RoOyl7dmFyIGE9amNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNiKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmZWMoYSk7YnJlYWt9Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpe2EuYmxvY2tlZE9uPWM7YnJlYWt9Yi5zaGlmdCgpfW51bGw9PT1hLmJsb2NrZWRPbiYmamMuc2hpZnQoKX1udWxsIT09a2MmJnhjKGtjKSYmKGtjPW51bGwpO251bGwhPT1sYyYmeGMobGMpJiYobGM9bnVsbCk7bnVsbCE9PW1jJiZ4YyhtYykmJihtYz1udWxsKTtuYy5mb3JFYWNoKHpjKTtvYy5mb3JFYWNoKHpjKX1cbmZ1bmN0aW9uIEJjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxpY3x8KGljPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LEFjKSkpfVxuZnVuY3Rpb24gQ2MoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gQmMoYixhKX1pZigwPGpjLmxlbmd0aCl7QmMoamNbMF0sYSk7Zm9yKHZhciBjPTE7YzxqYy5sZW5ndGg7YysrKXt2YXIgZD1qY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PWtjJiZCYyhrYyxhKTtudWxsIT09bGMmJkJjKGxjLGEpO251bGwhPT1tYyYmQmMobWMsYSk7bmMuZm9yRWFjaChiKTtvYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxwYy5sZW5ndGg7YysrKWQ9cGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPHBjLmxlbmd0aCYmKGM9cGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspdmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZwYy5zaGlmdCgpfVxuZnVuY3Rpb24gRGMoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgRWM9e2FuaW1hdGlvbmVuZDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOkRjKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sRmM9e30sR2M9e307XG5mYSYmKEdjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIEVjLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIEVjLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gSGMoYSl7aWYoRmNbYV0pcmV0dXJuIEZjW2FdO2lmKCFFY1thXSlyZXR1cm4gYTt2YXIgYj1FY1thXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBHYylyZXR1cm4gRmNbYV09YltjXTtyZXR1cm4gYX1cbnZhciBJYz1IYyhcImFuaW1hdGlvbmVuZFwiKSxKYz1IYyhcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxLYz1IYyhcImFuaW1hdGlvbnN0YXJ0XCIpLExjPUhjKFwidHJhbnNpdGlvbmVuZFwiKSxNYz1uZXcgTWFwLE5jPW5ldyBNYXAsT2M9W1wiYWJvcnRcIixcImFib3J0XCIsSWMsXCJhbmltYXRpb25FbmRcIixKYyxcImFuaW1hdGlvbkl0ZXJhdGlvblwiLEtjLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFxuXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsTGMsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIFBjKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdO2U9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7TmMuc2V0KGQsYik7TWMuc2V0KGQsZSk7ZGEoZSxbZF0pfX12YXIgUWM9ci51bnN0YWJsZV9ub3c7UWMoKTt2YXIgRj04O1xuZnVuY3Rpb24gUmMoYSl7aWYoMCE9PSgxJmEpKXJldHVybiBGPTE1LDE7aWYoMCE9PSgyJmEpKXJldHVybiBGPTE0LDI7aWYoMCE9PSg0JmEpKXJldHVybiBGPTEzLDQ7dmFyIGI9MjQmYTtpZigwIT09YilyZXR1cm4gRj0xMixiO2lmKDAhPT0oYSYzMikpcmV0dXJuIEY9MTEsMzI7Yj0xOTImYTtpZigwIT09YilyZXR1cm4gRj0xMCxiO2lmKDAhPT0oYSYyNTYpKXJldHVybiBGPTksMjU2O2I9MzU4NCZhO2lmKDAhPT1iKXJldHVybiBGPTgsYjtpZigwIT09KGEmNDA5NikpcmV0dXJuIEY9Nyw0MDk2O2I9NDE4NjExMiZhO2lmKDAhPT1iKXJldHVybiBGPTYsYjtiPTYyOTE0NTYwJmE7aWYoMCE9PWIpcmV0dXJuIEY9NSxiO2lmKGEmNjcxMDg4NjQpcmV0dXJuIEY9NCw2NzEwODg2NDtpZigwIT09KGEmMTM0MjE3NzI4KSlyZXR1cm4gRj0zLDEzNDIxNzcyODtiPTgwNTMwNjM2OCZhO2lmKDAhPT1iKXJldHVybiBGPTIsYjtpZigwIT09KDEwNzM3NDE4MjQmYSkpcmV0dXJuIEY9MSwxMDczNzQxODI0O1xuRj04O3JldHVybiBhfWZ1bmN0aW9uIFNjKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiAxNTtjYXNlIDk4OnJldHVybiAxMDtjYXNlIDk3OmNhc2UgOTY6cmV0dXJuIDg7Y2FzZSA5NTpyZXR1cm4gMjtkZWZhdWx0OnJldHVybiAwfX1mdW5jdGlvbiBUYyhhKXtzd2l0Y2goYSl7Y2FzZSAxNTpjYXNlIDE0OnJldHVybiA5OTtjYXNlIDEzOmNhc2UgMTI6Y2FzZSAxMTpjYXNlIDEwOnJldHVybiA5ODtjYXNlIDk6Y2FzZSA4OmNhc2UgNzpjYXNlIDY6Y2FzZSA0OmNhc2UgNTpyZXR1cm4gOTc7Y2FzZSAzOmNhc2UgMjpjYXNlIDE6cmV0dXJuIDk1O2Nhc2UgMDpyZXR1cm4gOTA7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDM1OCxhKSk7fX1cbmZ1bmN0aW9uIFVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIEY9MDt2YXIgZD0wLGU9MCxmPWEuZXhwaXJlZExhbmVzLGc9YS5zdXNwZW5kZWRMYW5lcyxoPWEucGluZ2VkTGFuZXM7aWYoMCE9PWYpZD1mLGU9Rj0xNTtlbHNlIGlmKGY9YyYxMzQyMTc3MjcsMCE9PWYpe3ZhciBrPWYmfmc7MCE9PWs/KGQ9UmMoayksZT1GKTooaCY9ZiwwIT09aCYmKGQ9UmMoaCksZT1GKSl9ZWxzZSBmPWMmfmcsMCE9PWY/KGQ9UmMoZiksZT1GKTowIT09aCYmKGQ9UmMoaCksZT1GKTtpZigwPT09ZClyZXR1cm4gMDtkPTMxLVZjKGQpO2Q9YyYoKDA+ZD8wOjE8PGQpPDwxKS0xO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmcpKXtSYyhiKTtpZihlPD1GKXJldHVybiBiO0Y9ZX1iPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLVZjKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gV2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIFhjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTU6cmV0dXJuIDE7Y2FzZSAxNDpyZXR1cm4gMjtjYXNlIDEyOnJldHVybiBhPVljKDI0Jn5iKSwwPT09YT9YYygxMCxiKTphO2Nhc2UgMTA6cmV0dXJuIGE9WWMoMTkyJn5iKSwwPT09YT9YYyg4LGIpOmE7Y2FzZSA4OnJldHVybiBhPVljKDM1ODQmfmIpLDA9PT1hJiYoYT1ZYyg0MTg2MTEyJn5iKSwwPT09YSYmKGE9NTEyKSksYTtjYXNlIDI6cmV0dXJuIGI9WWMoODA1MzA2MzY4Jn5iKSwwPT09YiYmKGI9MjY4NDM1NDU2KSxifXRocm93IEVycm9yKHkoMzU4LGEpKTt9ZnVuY3Rpb24gWWMoYSl7cmV0dXJuIGEmLWF9ZnVuY3Rpb24gWmMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7dmFyIGQ9Yi0xO2Euc3VzcGVuZGVkTGFuZXMmPWQ7YS5waW5nZWRMYW5lcyY9ZDthPWEuZXZlbnRUaW1lcztiPTMxLVZjKGIpO2FbYl09Y312YXIgVmM9TWF0aC5jbHozMj9NYXRoLmNsejMyOmFkLGJkPU1hdGgubG9nLGNkPU1hdGguTE4yO2Z1bmN0aW9uIGFkKGEpe3JldHVybiAwPT09YT8zMjozMS0oYmQoYSkvY2R8MCl8MH12YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBnZChhLGIsYyxkKXtLYnx8SWIoKTt2YXIgZT1oZCxmPUtiO0tiPSEwO3RyeXtIYihlLGEsYixjLGQpfWZpbmFsbHl7KEtiPWYpfHxNYigpfX1mdW5jdGlvbiBpZChhLGIsYyxkKXtlZChkZCxoZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCl7aWYoZmQpe3ZhciBlO2lmKChlPTA9PT0oYiY0KSkmJjA8amMubGVuZ3RoJiYtMTxxYy5pbmRleE9mKGEpKWE9cmMobnVsbCxhLGIsYyxkKSxqYy5wdXNoKGEpO2Vsc2V7dmFyIGY9eWMoYSxiLGMsZCk7aWYobnVsbD09PWYpZSYmc2MoYSxkKTtlbHNle2lmKGUpe2lmKC0xPHFjLmluZGV4T2YoYSkpe2E9cmMoZixhLGIsYyxkKTtqYy5wdXNoKGEpO3JldHVybn1pZih1YyhmLGEsYixjLGQpKXJldHVybjtzYyhhLGQpfWpkKGEsYixkLG51bGwsYyl9fX19XG5mdW5jdGlvbiB5YyhhLGIsYyxkKXt2YXIgZT14YihkKTtlPXdjKGUpO2lmKG51bGwhPT1lKXt2YXIgZj1aYihlKTtpZihudWxsPT09ZillPW51bGw7ZWxzZXt2YXIgZz1mLnRhZztpZigxMz09PWcpe2U9JGIoZik7aWYobnVsbCE9PWUpcmV0dXJuIGU7ZT1udWxsfWVsc2UgaWYoMz09PWcpe2lmKGYuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1mLnRhZz9mLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZT1udWxsfWVsc2UgZiE9PWUmJihlPW51bGwpfX1qZChhLGIsZCxlLGMpO3JldHVybiBudWxsfXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtcbmZ1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfW0oYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPW0oe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1tKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1tKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1tKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9bSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPW0oe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9bSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPW0oe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9bSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9bSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPW0oe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPW0oe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWZhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2ZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1mYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWZhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGZhKXt2YXIgeGU7aWYoZmEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTthPXJlO2lmKEtiKWEoYik7ZWxzZXtLYj0hMDt0cnl7R2IoYSxiKX1maW5hbGx5e0tiPSExLE1iKCl9fX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZSxJZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gSmUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIUllLmNhbGwoYixjW2RdKXx8IUhlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gS2UoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGUoYSxiKXt2YXIgYz1LZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZShjKX19ZnVuY3Rpb24gTWUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFBlPWZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZPZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZKZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5QYyhcImNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzaW4gZm9jdXMgZm9jdXNvdXQgYmx1ciBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLFxuMCk7UGMoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7UGMoT2MsMik7Zm9yKHZhciBWZT1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksV2U9MDtXZTxWZS5sZW5ndGg7V2UrKylOYy5zZXQoVmVbV2VdLDApO2VhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7XG5lYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2VhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtkYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2RhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZGEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2RhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBYZT1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksWWU9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQoWGUpKTtcbmZ1bmN0aW9uIFplKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1liKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a319fWlmKFViKXRocm93IGE9VmIsVWI9ITEsVmI9bnVsbCxhO31cbmZ1bmN0aW9uIEcoYSxiKXt2YXIgYz0kZShiKSxkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwoYWYoYixhLDIsITEpLGMuYWRkKGQpKX12YXIgYmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBjZihhKXthW2JmXXx8KGFbYmZdPSEwLGJhLmZvckVhY2goZnVuY3Rpb24oYil7WWUuaGFzKGIpfHxkZihiLCExLGEsbnVsbCk7ZGYoYiwhMCxhLG51bGwpfSkpfVxuZnVuY3Rpb24gZGYoYSxiLGMsZCl7dmFyIGU9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOjAsZj1jO1wic2VsZWN0aW9uY2hhbmdlXCI9PT1hJiY5IT09Yy5ub2RlVHlwZSYmKGY9Yy5vd25lckRvY3VtZW50KTtpZihudWxsIT09ZCYmIWImJlllLmhhcyhhKSl7aWYoXCJzY3JvbGxcIiE9PWEpcmV0dXJuO2V8PTI7Zj1kfXZhciBnPSRlKGYpLGg9YStcIl9fXCIrKGI/XCJjYXB0dXJlXCI6XCJidWJibGVcIik7Zy5oYXMoaCl8fChiJiYoZXw9NCksYWYoZixhLGUsYiksZy5hZGQoaCkpfVxuZnVuY3Rpb24gYWYoYSxiLGMsZCl7dmFyIGU9TmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1lPzI6ZSl7Y2FzZSAwOmU9Z2Q7YnJlYWs7Y2FzZSAxOmU9aWQ7YnJlYWs7ZGVmYXVsdDplPWhkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFQYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBqZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPXdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1OYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9TWMuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLHg9YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6eD1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjp4PVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSBJYzpjYXNlIEpjOmNhc2UgS2M6az1IZDticmVhaztjYXNlIExjOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHc9MCE9PShiJjQpLHo9IXcmJlwic2Nyb2xsXCI9PT1hLHU9dz9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt3PVtdO2Zvcih2YXIgdD1kLHE7bnVsbCE9PVxudDspe3E9dDt2YXIgdj1xLnN0YXRlTm9kZTs1PT09cS50YWcmJm51bGwhPT12JiYocT12LG51bGwhPT11JiYodj1PYih0LHUpLG51bGwhPXYmJncucHVzaChlZih0LHYscSkpKSk7aWYoeilicmVhazt0PXQucmV0dXJufTA8dy5sZW5ndGgmJihoPW5ldyBrKGgseCxudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp3fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmMD09PShiJjE2KSYmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKHdjKHgpfHx4W2ZmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQseD14P3djKHgpOm51bGwsbnVsbCE9PVxueCYmKHo9WmIoeCkseCE9PXp8fDUhPT14LnRhZyYmNiE9PXgudGFnKSl4PW51bGx9ZWxzZSBrPW51bGwseD1kO2lmKGshPT14KXt3PUJkO3Y9XCJvbk1vdXNlTGVhdmVcIjt1PVwib25Nb3VzZUVudGVyXCI7dD1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXc9VGQsdj1cIm9uUG9pbnRlckxlYXZlXCIsdT1cIm9uUG9pbnRlckVudGVyXCIsdD1cInBvaW50ZXJcIjt6PW51bGw9PWs/aDp1ZShrKTtxPW51bGw9PXg/aDp1ZSh4KTtoPW5ldyB3KHYsdCtcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PXo7aC5yZWxhdGVkVGFyZ2V0PXE7dj1udWxsO3djKGUpPT09ZCYmKHc9bmV3IHcodSx0K1wiZW50ZXJcIix4LGMsZSksdy50YXJnZXQ9cSx3LnJlbGF0ZWRUYXJnZXQ9eix2PXcpO3o9djtpZihrJiZ4KWI6e3c9azt1PXg7dD0wO2ZvcihxPXc7cTtxPWdmKHEpKXQrKztxPTA7Zm9yKHY9dTt2O3Y9Z2YodikpcSsrO2Zvcig7MDx0LXE7KXc9Z2YodyksdC0tO2Zvcig7MDxxLXQ7KXU9XG5nZih1KSxxLS07Zm9yKDt0LS07KXtpZih3PT09dXx8bnVsbCE9PXUmJnc9PT11LmFsdGVybmF0ZSlicmVhayBiO3c9Z2Yodyk7dT1nZih1KX13PW51bGx9ZWxzZSB3PW51bGw7bnVsbCE9PWsmJmhmKGcsaCxrLHcsITEpO251bGwhPT14JiZudWxsIT09eiYmaGYoZyx6LHgsdywhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgSj12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKUo9RmU7ZWxzZXtKPURlO3ZhciBLPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYoSj1FZSk7aWYoSiYmKEo9SihhLGQpKSl7bmUoZyxKLGMsZSk7YnJlYWsgYX1LJiZLKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoSz1oLl93cmFwcGVyU3RhdGUpJiZcbksuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfUs9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoSyl8fFwidHJ1ZVwiPT09Sy5jb250ZW50RWRpdGFibGUpUWU9SyxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyIFE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOkw9XCJvbkNvbXBvc2l0aW9uRW5kXCI7YnJlYWsgYjtcbmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOkw9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1MPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihMPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7TCYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09TD9cIm9uQ29tcG9zaXRpb25FbmRcIj09PUwmJmllJiYoUT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLEs9b2UoZCxMKSwwPEsubGVuZ3RoJiYoTD1uZXcgTGQoTCxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OkwsbGlzdGVuZXJzOkt9KSxRP0wuZGF0YT1ROihRPWhlKGMpLG51bGwhPT1RJiYoTC5kYXRhPVEpKSkpO2lmKFE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFxuXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9USl9c2UoZyxiKX0pfWZ1bmN0aW9uIGVmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1PYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdChlZihhLGYsZSkpLGY9T2IoYSxiKSxudWxsIT1mJiZkLnB1c2goZWYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiBnZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gaGYoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1PYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdChlZihjLGssaCkpKTplfHwoaz1PYihjLGYpLG51bGwhPWsmJmcucHVzaChlZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfWZ1bmN0aW9uIGpmKCl7fXZhciBrZj1udWxsLGxmPW51bGw7ZnVuY3Rpb24gbWYoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gbmYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBvZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxwZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gcWYoYSl7MT09PWEubm9kZVR5cGU/YS50ZXh0Q29udGVudD1cIlwiOjk9PT1hLm5vZGVUeXBlJiYoYT1hLmJvZHksbnVsbCE9YSYmKGEudGV4dENvbnRlbnQ9XCJcIikpfVxuZnVuY3Rpb24gcmYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9ZnVuY3Rpb24gc2YoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIHRmPTA7ZnVuY3Rpb24gdWYoYSl7cmV0dXJueyQkdHlwZW9mOkdhLHRvU3RyaW5nOmEsdmFsdWVPZjphfX12YXIgdmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksd2Y9XCJfX3JlYWN0RmliZXIkXCIrdmYseGY9XCJfX3JlYWN0UHJvcHMkXCIrdmYsZmY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK3ZmLHlmPVwiX19yZWFjdEV2ZW50cyRcIit2ZjtcbmZ1bmN0aW9uIHdjKGEpe3ZhciBiPWFbd2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW2ZmXXx8Y1t3Zl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZihhKTtudWxsIT09YTspe2lmKGM9YVt3Zl0pcmV0dXJuIGM7YT1zZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW3dmXXx8YVtmZl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih5KDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW3hmXXx8bnVsbH1cbmZ1bmN0aW9uICRlKGEpe3ZhciBiPWFbeWZdO3ZvaWQgMD09PWImJihiPWFbeWZdPW5ldyBTZXQpO3JldHVybiBifXZhciB6Zj1bXSxBZj0tMTtmdW5jdGlvbiBCZihhKXtyZXR1cm57Y3VycmVudDphfX1mdW5jdGlvbiBIKGEpezA+QWZ8fChhLmN1cnJlbnQ9emZbQWZdLHpmW0FmXT1udWxsLEFmLS0pfWZ1bmN0aW9uIEkoYSxiKXtBZisrO3pmW0FmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LE09QmYoQ2YpLE49QmYoITEpLERmPUNmO1xuZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBGZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEdmKCl7SChOKTtIKE0pfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihNLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih5KDE2OCkpO0koTSxiKTtJKE4sYyl9XG5mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHkoMTA4LFJhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBKZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9TS5jdXJyZW50O0koTSxhKTtJKE4sTi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IoeSgxNjkpKTtjPyhhPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoTiksSChNKSxJKE0sYSkpOkgoTik7SShOLGMpfVxudmFyIExmPW51bGwsTWY9bnVsbCxOZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxPZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssUGY9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxRZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFJmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LFNmPXIudW5zdGFibGVfbm93LFRmPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsVWY9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxWZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFdmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksWGY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxZZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxaZj17fSwkZj12b2lkIDAhPT1SZj9SZjpmdW5jdGlvbigpe30sYWc9bnVsbCxiZz1udWxsLGNnPSExLGRnPVNmKCksTz0xRTQ+ZGc/U2Y6ZnVuY3Rpb24oKXtyZXR1cm4gU2YoKS1kZ307XG5mdW5jdGlvbiBlZygpe3N3aXRjaChUZigpKXtjYXNlIFVmOnJldHVybiA5OTtjYXNlIFZmOnJldHVybiA5ODtjYXNlIFdmOnJldHVybiA5NztjYXNlIFhmOnJldHVybiA5NjtjYXNlIFlmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBmZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gVWY7Y2FzZSA5ODpyZXR1cm4gVmY7Y2FzZSA5NzpyZXR1cm4gV2Y7Y2FzZSA5NjpyZXR1cm4gWGY7Y2FzZSA5NTpyZXR1cm4gWWY7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZ2coYSxiKXthPWZnKGEpO3JldHVybiBOZihhLGIpfWZ1bmN0aW9uIGhnKGEsYixjKXthPWZnKGEpO3JldHVybiBPZihhLGIsYyl9ZnVuY3Rpb24gaWcoKXtpZihudWxsIT09Ymcpe3ZhciBhPWJnO2JnPW51bGw7UGYoYSl9amcoKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWNnJiZudWxsIT09YWcpe2NnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPWFnO2dnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTthZz1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1hZyYmKGFnPWFnLnNsaWNlKGErMSkpLE9mKFVmLGlnKSxjO31maW5hbGx5e2NnPSExfX19dmFyIGtnPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIGxnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBtZz1CZihudWxsKSxuZz1udWxsLG9nPW51bGwscGc9bnVsbDtmdW5jdGlvbiBxZygpe3BnPW9nPW5nPW51bGx9XG5mdW5jdGlvbiByZyhhKXt2YXIgYj1tZy5jdXJyZW50O0gobWcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gc2coYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoKGEuY2hpbGRMYW5lcyZiKT09PWIpaWYobnVsbD09PWN8fChjLmNoaWxkTGFuZXMmYik9PT1iKWJyZWFrO2Vsc2UgYy5jaGlsZExhbmVzfD1iO2Vsc2UgYS5jaGlsZExhbmVzfD1iLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKTthPWEucmV0dXJufX1mdW5jdGlvbiB0ZyhhLGIpe25nPWE7cGc9b2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih1Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB2ZyhhLGIpe2lmKHBnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilwZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09b2cpe2lmKG51bGw9PT1uZyl0aHJvdyBFcnJvcih5KDMwOCkpO29nPWI7bmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBvZz1vZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgd2c9ITE7ZnVuY3Rpb24geGcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19ZnVuY3Rpb24gQWcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiBCZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gQ2coYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXtuPW4udXBkYXRlUXVldWU7dmFyIEE9bi5sYXN0QmFzZVVwZGF0ZTtBIT09ZyYmKG51bGw9PT1BP24uZmlyc3RCYXNlVXBkYXRlPWw6QS5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKX19aWYobnVsbCE9PWYpe0E9ZS5iYXNlU3RhdGU7Zz0wO249bD1rPW51bGw7ZG97aD1mLmxhbmU7dmFyIHA9Zi5ldmVudFRpbWU7aWYoKGQmaCk9PT1oKXtudWxsIT09biYmKG49bi5uZXh0PXtldmVudFRpbWU6cCxsYW5lOjAsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgQz1hLHg9ZjtoPWI7cD1jO3N3aXRjaCh4LnRhZyl7Y2FzZSAxOkM9eC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDKXtBPUMuY2FsbChwLEEsaCk7YnJlYWsgYX1BPUM7YnJlYWsgYTtjYXNlIDM6Qy5mbGFncz1DLmZsYWdzJi00MDk3fDY0O2Nhc2UgMDpDPXgucGF5bG9hZDtoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDP0MuY2FsbChwLEEsaCk6QztpZihudWxsPT09aHx8dm9pZCAwPT09aClicmVhayBhO0E9bSh7fSxBLGgpO2JyZWFrIGE7Y2FzZSAyOndnPSEwfX1udWxsIT09Zi5jYWxsYmFjayYmKGEuZmxhZ3N8PTMyLGg9ZS5lZmZlY3RzLG51bGw9PT1oP2UuZWZmZWN0cz1bZl06aC5wdXNoKGYpKX1lbHNlIHA9e2V2ZW50VGltZTpwLGxhbmU6aCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1uPyhsPW49cCxrPUEpOm49bi5uZXh0PXAsZ3w9aDtmPWYubmV4dDtpZihudWxsPT09XG5mKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIGY9aC5uZXh0LGgubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9aCxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW4mJihrPUEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW47RGd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1BfX1mdW5jdGlvbiBFZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IoeSgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBGZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIEdnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBLZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9aYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUhnKCksZD1JZyhhKSxlPXpnKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9XG5iKTtBZyhhLGUpO0pnKGEsZCxjKX19O2Z1bmN0aW9uIExnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUplKGMsZCl8fCFKZShlLGYpOiEwfVxuZnVuY3Rpb24gTWcoYSxiLGMpe3ZhciBkPSExLGU9Q2Y7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dmcoZik6KGU9RmYoYik/RGY6TS5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUtnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gT2coYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1GZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXZnKGYpOihmPUZmKGIpP0RmOk0uY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Q2coYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEdnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLENnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQpfXZhciBQZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHkoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUZnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHkoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHkoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBSZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih5KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO31cbmZ1bmN0aW9uIFNnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZmxhZ3M9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9VGcoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3M9MixcbmMpOmQ7Yi5mbGFncz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFncz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVZnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuV2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG4oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVhnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGM9VmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHRhOnJldHVybiBiPVdnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihQZyhiKXx8TGEoYikpcmV0dXJuIGI9WGcoYixcbmEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtSZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHAoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT11YT9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgdGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoUGcoYyl8fExhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTtSZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09dWE/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgdGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoUGcoZCl8fExhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTtSZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLHU9Zyx6PWc9MCxxPW51bGw7bnVsbCE9PXUmJno8aC5sZW5ndGg7eisrKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciBuPXAoZSx1LGhbel0sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcseik7bnVsbD09PXQ/bD1uOnQuc2libGluZz1uO3Q9bjt1PXF9aWYoej09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDt6PGgubGVuZ3RoO3orKyl1PUEoZSxoW3pdLGspLG51bGwhPT11JiYoZz1mKHUsZyx6KSxudWxsPT09dD9sPXU6dC5zaWJsaW5nPXUsdD11KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7ejxoLmxlbmd0aDt6KyspcT1DKHUsZSx6LGhbel0sayksbnVsbCE9PXEmJihhJiZudWxsIT09cS5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1xLmtleT96OnEua2V5KSxnPWYocSxnLHopLG51bGw9PT10P2w9cTp0LnNpYmxpbmc9cSx0PXEpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1MYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih5KDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PVxuaCl0aHJvdyBFcnJvcih5KDE1MSkpO2Zvcih2YXIgdD1sPW51bGwsdT1nLHo9Zz0wLHE9bnVsbCxuPWgubmV4dCgpO251bGwhPT11JiYhbi5kb25lO3orKyxuPWgubmV4dCgpKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciB3PXAoZSx1LG4udmFsdWUsayk7aWYobnVsbD09PXcpe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSx1KTtnPWYodyxnLHopO251bGw9PT10P2w9dzp0LnNpYmxpbmc9dzt0PXc7dT1xfWlmKG4uZG9uZSlyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUModSxlLHosbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmXG51LmRlbGV0ZShudWxsPT09bi5rZXk/ejpuLmtleSksZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT11YSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBzYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PXVhKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7XG5kPWUoayxmLnByb3BzKTtkLnJlZj1RZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PXVhPyhkPVhnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1WZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1RZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9XG5XZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1VZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihQZyhmKSlyZXR1cm4geChhLGQsZixoKTtpZihMYShmKSlyZXR1cm4gdyhhLGQsZixoKTtsJiZSZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAyMjpjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRocm93IEVycm9yKHkoMTUyLFJhKGEudHlwZSl8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFlnPVNnKCEwKSxaZz1TZyghMSksJGc9e30sYWg9QmYoJGcpLGJoPUJmKCRnKSxjaD1CZigkZyk7XG5mdW5jdGlvbiBkaChhKXtpZihhPT09JGcpdGhyb3cgRXJyb3IoeSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBlaChhLGIpe0koY2gsYik7SShiaCxhKTtJKGFoLCRnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1tYihiLGEpfUgoYWgpO0koYWgsYil9ZnVuY3Rpb24gZmgoKXtIKGFoKTtIKGJoKTtIKGNoKX1mdW5jdGlvbiBnaChhKXtkaChjaC5jdXJyZW50KTt2YXIgYj1kaChhaC5jdXJyZW50KTt2YXIgYz1tYihiLGEudHlwZSk7YiE9PWMmJihJKGJoLGEpLEkoYWgsYykpfWZ1bmN0aW9uIGhoKGEpe2JoLmN1cnJlbnQ9PT1hJiYoSChhaCksSChiaCkpfXZhciBQPUJmKDApO1xuZnVuY3Rpb24gaWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgamg9bnVsbCxraD1udWxsLGxoPSExO1xuZnVuY3Rpb24gbWgoYSxiKXt2YXIgYz1uaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5mbGFncz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gb2goYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHBoKGEpe2lmKGxoKXt2YXIgYj1raDtpZihiKXt2YXIgYz1iO2lmKCFvaChhLGIpKXtiPXJmKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhb2goYSxiKSl7YS5mbGFncz1hLmZsYWdzJi0xMDI1fDI7bGg9ITE7amg9YTtyZXR1cm59bWgoamgsYyl9amg9YTtraD1yZihiLmZpcnN0Q2hpbGQpfWVsc2UgYS5mbGFncz1hLmZsYWdzJi0xMDI1fDIsbGg9ITEsamg9YX19ZnVuY3Rpb24gcWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2poPWF9XG5mdW5jdGlvbiByaChhKXtpZihhIT09amgpcmV0dXJuITE7aWYoIWxoKXJldHVybiBxaChhKSxsaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW5mKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1raDtiOyltaChhLGIpLGI9cmYoYi5uZXh0U2libGluZyk7cWgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih5KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtraD1yZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWtoPW51bGx9fWVsc2Uga2g9amg/cmYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBzaCgpe2toPWpoPW51bGw7bGg9ITF9dmFyIHRoPVtdO2Z1bmN0aW9uIHVoKCl7Zm9yKHZhciBhPTA7YTx0aC5sZW5ndGg7YSsrKXRoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7dGgubGVuZ3RoPTB9dmFyIHZoPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsd2g9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcseGg9MCxSPW51bGwsUz1udWxsLFQ9bnVsbCx5aD0hMSx6aD0hMTtmdW5jdGlvbiBBaCgpe3Rocm93IEVycm9yKHkoMzIxKSk7fWZ1bmN0aW9uIEJoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBDaChhLGIsYyxkLGUsZil7eGg9ZjtSPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDt2aC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP0RoOkVoO2E9YyhkLGUpO2lmKHpoKXtmPTA7ZG97emg9ITE7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih5KDMwMSkpO2YrPTE7VD1TPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO3ZoLmN1cnJlbnQ9Rmg7YT1jKGQsZSl9d2hpbGUoemgpfXZoLmN1cnJlbnQ9R2g7Yj1udWxsIT09UyYmbnVsbCE9PVMubmV4dDt4aD0wO1Q9Uz1SPW51bGw7eWg9ITE7aWYoYil0aHJvdyBFcnJvcih5KDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIEhoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hO3JldHVybiBUfVxuZnVuY3Rpb24gSWgoKXtpZihudWxsPT09Uyl7dmFyIGE9Ui5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Uy5uZXh0O3ZhciBiPW51bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZTpULm5leHQ7aWYobnVsbCE9PWIpVD1iLFM9YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHkoMzEwKSk7Uz1hO2E9e21lbW9pemVkU3RhdGU6Uy5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpTLmJhc2VTdGF0ZSxiYXNlUXVldWU6Uy5iYXNlUXVldWUscXVldWU6Uy5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YX1yZXR1cm4gVH1mdW5jdGlvbiBKaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIEtoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9UyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmxhbmU7aWYoKHhoJmwpPT09bCludWxsIT09aCYmKGg9aC5uZXh0PXtsYW5lOjAsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtlbHNle3ZhciBuPXtsYW5lOmwsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixcbmVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1uLGY9ZCk6aD1oLm5leHQ9bjtSLmxhbmVzfD1sO0RnfD1sfWs9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBMaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIE1oKGEsYixjKXt2YXIgZD1iLl9nZXRWZXJzaW9uO2Q9ZChiLl9zb3VyY2UpO3ZhciBlPWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk7aWYobnVsbCE9PWUpYT1lPT09ZDtlbHNlIGlmKGE9YS5tdXRhYmxlUmVhZExhbmVzLGE9KHhoJmEpPT09YSliLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWQsdGgucHVzaChiKTtpZihhKXJldHVybiBjKGIuX3NvdXJjZSk7dGgucHVzaChiKTt0aHJvdyBFcnJvcih5KDM1MCkpO31cbmZ1bmN0aW9uIE5oKGEsYixjLGQpe3ZhciBlPVU7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IoeSgzNDkpKTt2YXIgZj1iLl9nZXRWZXJzaW9uLGc9ZihiLl9zb3VyY2UpLGg9dmguY3VycmVudCxrPWgudXNlU3RhdGUoZnVuY3Rpb24oKXtyZXR1cm4gTWgoZSxiLGMpfSksbD1rWzFdLG49a1swXTtrPVQ7dmFyIEE9YS5tZW1vaXplZFN0YXRlLHA9QS5yZWZzLEM9cC5nZXRTbmFwc2hvdCx4PUEuc291cmNlO0E9QS5zdWJzY3JpYmU7dmFyIHc9UjthLm1lbW9pemVkU3RhdGU9e3JlZnM6cCxzb3VyY2U6YixzdWJzY3JpYmU6ZH07aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtwLmdldFNuYXBzaG90PWM7cC5zZXRTbmFwc2hvdD1sO3ZhciBhPWYoYi5fc291cmNlKTtpZighSGUoZyxhKSl7YT1jKGIuX3NvdXJjZSk7SGUobixhKXx8KGwoYSksYT1JZyh3KSxlLm11dGFibGVSZWFkTGFuZXN8PWEmZS5wZW5kaW5nTGFuZXMpO2E9ZS5tdXRhYmxlUmVhZExhbmVzO2UuZW50YW5nbGVkTGFuZXN8PWE7Zm9yKHZhciBkPVxuZS5lbnRhbmdsZW1lbnRzLGg9YTswPGg7KXt2YXIgaz0zMS1WYyhoKSx2PTE8PGs7ZFtrXXw9YTtoJj1+dn19fSxbYyxiLGRdKTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3JldHVybiBkKGIuX3NvdXJjZSxmdW5jdGlvbigpe3ZhciBhPXAuZ2V0U25hcHNob3QsYz1wLnNldFNuYXBzaG90O3RyeXtjKGEoYi5fc291cmNlKSk7dmFyIGQ9SWcodyk7ZS5tdXRhYmxlUmVhZExhbmVzfD1kJmUucGVuZGluZ0xhbmVzfWNhdGNoKHEpe2MoZnVuY3Rpb24oKXt0aHJvdyBxO30pfX0pfSxbYixkXSk7SGUoQyxjKSYmSGUoeCxiKSYmSGUoQSxkKXx8KGE9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6bn0sYS5kaXNwYXRjaD1sPU9oLmJpbmQobnVsbCxSLGEpLGsucXVldWU9YSxrLmJhc2VRdWV1ZT1udWxsLG49TWgoZSxiLGMpLGsubWVtb2l6ZWRTdGF0ZT1rLmJhc2VTdGF0ZT1uKTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFBoKGEsYixjKXt2YXIgZD1JaCgpO3JldHVybiBOaChkLGEsYixjKX1mdW5jdGlvbiBRaChhKXt2YXIgYj1IaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIFJoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPVIudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sUi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBTaChhKXt2YXIgYj1IaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfWZ1bmN0aW9uIFRoKCl7cmV0dXJuIEloKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBVaChhLGIsYyxkKXt2YXIgZT1IaCgpO1IuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1JaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1TKXt2YXIgZz1TLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkJoKGQsZy5kZXBzKSl7UmgoYixjLGYsZCk7cmV0dXJufX1SLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIFdoKGEsYil7cmV0dXJuIFVoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDQsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBWaCg0LDIsYSxiKX1mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fVxuZnVuY3Rpb24gJGgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDIsWmguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gYWkoKXt9ZnVuY3Rpb24gYmkoYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gY2koYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBkaShhLGIpe3ZhciBjPWVnKCk7Z2coOTg+Yz85ODpjLGZ1bmN0aW9uKCl7YSghMCl9KTtnZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYz13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7YSghMSksYigpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1jfX0pfVxuZnVuY3Rpb24gT2goYSxiLGMpe3ZhciBkPUhnKCksZT1JZyhhKSxmPXtsYW5lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLnBlbmRpbmc7bnVsbD09PWc/Zi5uZXh0PWY6KGYubmV4dD1nLm5leHQsZy5uZXh0PWYpO2IucGVuZGluZz1mO2c9YS5hbHRlcm5hdGU7aWYoYT09PVJ8fG51bGwhPT1nJiZnPT09Uil6aD15aD0hMDtlbHNle2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWd8fDA9PT1nLmxhbmVzKSYmKGc9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1nKSl0cnl7dmFyIGg9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWcoaCxjKTtmLmVhZ2VyUmVkdWNlcj1nO2YuZWFnZXJTdGF0ZT1rO2lmKEhlKGssaCkpcmV0dXJufWNhdGNoKGwpe31maW5hbGx5e31KZyhhLGUsZCl9fVxudmFyIEdoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpBaCx1c2VDb250ZXh0OkFoLHVzZUVmZmVjdDpBaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkFoLHVzZUxheW91dEVmZmVjdDpBaCx1c2VNZW1vOkFoLHVzZVJlZHVjZXI6QWgsdXNlUmVmOkFoLHVzZVN0YXRlOkFoLHVzZURlYnVnVmFsdWU6QWgsdXNlRGVmZXJyZWRWYWx1ZTpBaCx1c2VUcmFuc2l0aW9uOkFoLHVzZU11dGFibGVTb3VyY2U6QWgsdXNlT3BhcXVlSWRlbnRpZmllcjpBaCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LERoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe0hoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OldoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBVaCg0LDIsWmguYmluZChudWxsLFxuYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFVoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9SGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6U2gsdXNlU3RhdGU6UWgsdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVFoKGEpLGM9YlswXSxkPWJbMV07V2goZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO1xud2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVFoKCExKSxiPWFbMF07YT1kaS5iaW5kKG51bGwsYVsxXSk7U2goYSk7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7ZC5tZW1vaXplZFN0YXRlPXtyZWZzOntnZXRTbmFwc2hvdDpiLHNldFNuYXBzaG90Om51bGx9LHNvdXJjZTphLHN1YnNjcmliZTpjfTtyZXR1cm4gTmgoZCxhLGIsYyl9LHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtpZihsaCl7dmFyIGE9ITEsYj11ZihmdW5jdGlvbigpe2F8fChhPSEwLGMoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpKTt0aHJvdyBFcnJvcih5KDM1NSkpO30pLGM9UWgoYilbMV07MD09PShSLm1vZGUmMikmJihSLmZsYWdzfD01MTYsUmgoNSxmdW5jdGlvbigpe2MoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpfSxcbnZvaWQgMCxudWxsKSk7cmV0dXJuIGJ9Yj1cInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KTtRaChiKTtyZXR1cm4gYn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxFaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOktoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBLaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1LaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUtoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBLaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRmg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpMaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9TGgoSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1MaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LGVpPXJhLlJlYWN0Q3VycmVudE93bmVyLHVnPSExO2Z1bmN0aW9uIGZpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmcoYixudWxsLGMsZCk6WWcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3RnKGIsZSk7ZD1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWppKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGtpKGEsYixnLGQsZSxmKTthPVZnKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZigwPT09KGUmZikmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6SmUsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gaGkoYSxiLGYpO2IuZmxhZ3N8PTE7YT1UZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGtpKGEsYixjLGQsZSxmKXtpZihudWxsIT09YSYmSmUoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmKWlmKHVnPSExLDAhPT0oZiZlKSkwIT09KGEuZmxhZ3MmMTYzODQpJiYodWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxoaShhLGIsZik7cmV0dXJuIGxpKGEsYixjLGQsZil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZXx8XCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsYyk7ZWxzZSBpZigwIT09KGMmMTA3Mzc0MTgyNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixudWxsIT09Zj9mLmJhc2VMYW5lczpjKTtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmF9LG5pKGIsYSksbnVsbDtlbHNlIG51bGwhPT1mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxuaShiLGQpO2ZpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gb2koYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9MTI4fWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7dmFyIGY9RmYoYyk/RGY6TS5jdXJyZW50O2Y9RWYoYixmKTt0ZyhiLGUpO2M9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlKXtpZihGZihjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLE1nKGIsYyxkKSxPZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD12ZyhsKToobD1GZihjKT9EZjpNLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTmcoYixnLGQsbCk7d2c9ITE7dmFyIHA9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8cCE9PWt8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoR2coYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxMZyhiLGMsaCxkLHAsayxsKSk/KEF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmxnKGIudHlwZSxoKTtnLnByb3BzPWw7QT1iLnBlbmRpbmdQcm9wcztwPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXZnKGspOihrPUZmKGMpP0RmOk0uY3VycmVudCxrPUVmKGIsaykpO3ZhciBDPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDfHxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09QXx8cCE9PWspJiZOZyhiLGcsZCxrKTt3Zz0hMTtwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2ghPT1BfHxwIT09eHx8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIEMmJihHZyhiLGMsQyxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKGw9d2d8fExnKGIsYyxsLGQscCx4LGspKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxcbmg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksZD0hMSl9cmV0dXJuIHFpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQsZSxmKXtvaShhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLGhpKGEsYixmKTtkPWIuc3RhdGVOb2RlO2VpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1ZZyhiLG51bGwsaCxmKSk6ZmkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTtlaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgc2k9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeUxhbmU6MH07XG5mdW5jdGlvbiB0aShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1QLmN1cnJlbnQsZj0hMSxnOyhnPTAhPT0oYi5mbGFncyY2NCkpfHwoZz1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2c/KGY9ITAsYi5mbGFncyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZC5mYWxsYmFja3x8ITA9PT1kLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZXw9MSk7SShQLGUmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWQuZmFsbGJhY2smJnBoKGIpO2E9ZC5jaGlsZHJlbjtlPWQuZmFsbGJhY2s7aWYoZilyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxiLm1lbW9pemVkU3RhdGU9c2ksYTtpZihcIm51bWJlclwiPT09dHlwZW9mIGQudW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSlyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxcbmIubWVtb2l6ZWRTdGF0ZT1zaSxiLmxhbmVzPTMzNTU0NDMyLGE7Yz12aSh7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjphfSxiLm1vZGUsYyxudWxsKTtjLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWN9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTp7YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31pZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9Olxue2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9ZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9YS5tb2RlLGY9YS5jaGlsZDtiPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Yn07MD09PShlJjIpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9Yik6Zj12aShiLGUsMCxudWxsKTtjPVhnKGMsZSxkLG51bGwpO2YucmV0dXJuPWE7Yy5yZXR1cm49YTtmLnNpYmxpbmc9YzthLmNoaWxkPWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB4aShhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9VGcoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMikmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihhLm5leHRFZmZlY3Q9bnVsbCxhLmZsYWdzPTgsYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIHdpKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlLGc9YS5jaGlsZDthPWcuc2libGluZzt2YXIgaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYyKSYmYi5jaGlsZCE9PWc/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGc9Yy5sYXN0RWZmZWN0LG51bGwhPT1nPyhiLmZpcnN0RWZmZWN0PWMuZmlyc3RFZmZlY3QsYi5sYXN0RWZmZWN0PWcsZy5uZXh0RWZmZWN0PW51bGwpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGwpOmM9VGcoZyxoKTtudWxsIT09YT9kPVRnKGEsZCk6KGQ9WGcoZCxmLGUsbnVsbCksZC5mbGFnc3w9Mik7ZC5yZXR1cm49YjtjLnJldHVybj1iO2Muc2libGluZz1kO2IuY2hpbGQ9YztyZXR1cm4gZH1mdW5jdGlvbiB5aShhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtzZyhhLnJldHVybixiKX1cbmZ1bmN0aW9uIHppKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBBaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO2ZpKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ5aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl5aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKFAsZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWloKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7emkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXppKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp6aShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO0RnfD1iLmxhbmVzO2lmKDAhPT0oYyZiLmNoaWxkTGFuZXMpKXtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IoeSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9VGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVRnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9cmV0dXJuIG51bGx9dmFyIEJpLENpLERpLEVpO1xuQmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0NpPWZ1bmN0aW9uKCl7fTtcbkRpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtkaChhaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxlKTtkPWViKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfXZiKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09XG5sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fFxuKGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLGMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZHKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUdhP2sudG9TdHJpbmcoKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsXG5jKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07ZnVuY3Rpb24gRmkoYSxiKXtpZighbGgpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKXJoKGIpP2IuZmxhZ3N8PTQ6ZC5oeWRyYXRlfHwoYi5mbGFnc3w9MjU2KTtDaShiKTtyZXR1cm4gbnVsbDtjYXNlIDU6aGgoYik7dmFyIGU9ZGgoY2guY3VycmVudCk7Yz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKURpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PVxuYi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtyZXR1cm4gbnVsbH1hPWRoKGFoLmN1cnJlbnQpO2lmKHJoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW3dmXT1iO2RbeGZdPWY7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsZCk7RyhcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxYZS5sZW5ndGg7YSsrKUcoWGVbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGQpO0coXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRyhcImludmFsaWRcIixkKX12YihjLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilmLmhhc093blByb3BlcnR5KGcpJiYoZT1mW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBlP2QudGV4dENvbnRlbnQhPT1lJiYoYT1bXCJjaGlsZHJlblwiLGVdKTpcIm51bWJlclwiPT09dHlwZW9mIGUmJmQudGV4dENvbnRlbnQhPT1cIlwiK2UmJihhPVtcImNoaWxkcmVuXCIsXCJcIitlXSk6Y2EuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWUmJlwib25TY3JvbGxcIj09PWcmJkcoXCJzY3JvbGxcIixkKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2NiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9XG5qZil9ZD1hO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDthPT09a2IuaHRtbCYmKGE9bGIoYykpO2E9PT1rYi5odG1sP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVt3Zl09YjthW3hmXT1kO0JpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXdiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsYSk7RyhcImNsb3NlXCIsYSk7XG5lPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8WGUubGVuZ3RoO2UrKylHKFhlW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGEpO0coXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9XG5nYihhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dmIoYyxlKTt2YXIgaD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3RiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZvYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Y3x8XCJcIiE9PWspJiZwYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmcGIoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihjYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZHKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmcWEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtjYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfW1mKGMsZCkmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlFaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtcbmM9ZGgoY2guY3VycmVudCk7ZGgoYWguY3VycmVudCk7cmgoYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFt3Zl09YixkLm5vZGVWYWx1ZSE9PWMmJihiLmZsYWdzfD00KSk6KGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW3dmXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTM6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZyaChiKTpjPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoZCYmIWMmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShQLmN1cnJlbnQmMSkpMD09PVYmJihWPTMpO2Vsc2V7aWYoMD09PVZ8fDM9PT1WKVY9XG40O251bGw9PT1VfHwwPT09KERnJjEzNDIxNzcyNykmJjA9PT0oSGkmMTM0MjE3NzI3KXx8SWkoVSxXKX1pZihkfHxjKWIuZmxhZ3N8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLENpKGIpLG51bGw9PT1hJiZjZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMTk6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtmPTAhPT0oYi5mbGFncyY2NCk7Zz1kLnJlbmRlcmluZztpZihudWxsPT09ZylpZihmKUZpKGQsITEpO2Vsc2V7aWYoMCE9PVZ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPWloKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD02NDtGaShkLCExKTtmPWcudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5mbGFnc3w9NCk7XG5udWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTIsZi5uZXh0RWZmZWN0PW51bGwsZi5maXJzdEVmZmVjdD1udWxsLGYubGFzdEVmZmVjdD1udWxsLGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxcbmYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7SShQLFAuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1kLnRhaWwmJk8oKT5KaSYmKGIuZmxhZ3N8PTY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMil9ZWxzZXtpZighZilpZihhPWloKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD02NCxmPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxGaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhbGgpcmV0dXJuIGI9Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMipPKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+SmkmJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9XG42NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpO2QuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxkLmxhc3Q9Zyl9cmV0dXJuIG51bGwhPT1kLnRhaWw/KGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPU8oKSxjLnNpYmxpbmc9bnVsbCxiPVAuY3VycmVudCxJKFAsZj9iJjF8MjpiJjEpLGMpOm51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09KG51bGwhPT1iLm1lbW9pemVkU3RhdGUpJiZcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCIhPT1kLm1vZGUmJihiLmZsYWdzfD00KSxudWxsfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gTGkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6RmYoYS50eXBlKSYmR2YoKTt2YXIgYj1hLmZsYWdzO3JldHVybiBiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2I9YS5mbGFncztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHkoMjg1KSk7YS5mbGFncz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gaGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKFApLGI9YS5mbGFncyxiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoUCksbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksbnVsbDtjYXNlIDEwOnJldHVybiByZyhhKSxudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UWEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmV9fWZ1bmN0aW9uIE5pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBQaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtRaXx8KFFpPSEwLFJpPWQpO05pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe05pKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1UaT9UaT1uZXcgU2V0KFt0aGlzXSk6VGkuYWRkKHRoaXMpLE5pKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfXZhciBVaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtcbmZ1bmN0aW9uIFZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1dpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBYaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5mbGFncyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmxnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpiLmZsYWdzJjI1NiYmcWYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cmV0dXJuO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gWWkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOmI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve2lmKDM9PT0oYS50YWcmMykpe3ZhciBkPWEuY3JlYXRlO2EuZGVzdHJveT1kKCl9YT1hLm5leHR9d2hpbGUoYSE9PWIpfWI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve3ZhciBlPWE7ZD1lLm5leHQ7ZT1lLnRhZzswIT09KGUmNCkmJjAhPT0oZSYxKSYmKFppKGMsYSksJGkoYyxhKSk7YT1kfXdoaWxlKGEhPT1iKX1yZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7Yy5mbGFncyY0JiYobnVsbD09PWI/YS5jb21wb25lbnREaWRNb3VudCgpOihkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmxnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpLGEuY29tcG9uZW50RGlkVXBkYXRlKGQsXG5iLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSkpKTtiPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkVnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9RWcoYyxiLGEpfXJldHVybjtjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5mbGFncyY0JiZtZihjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJkNjKGMpKSkpO1xucmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6Y2FzZSAyMzpjYXNlIDI0OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIGFqKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQ9ZC5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5zZXRQcm9wZXJ0eT9kLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmQuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1zYihcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigoMjMhPT1jLnRhZyYmMjQhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8Yz09PWEpJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PVxuYSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGJqKGEsYil7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7TWYub25Db21taXRGaWJlclVubW91bnQoTGYsYil9Y2F0Y2goZil7fXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgYz1hPWEubmV4dDtkb3t2YXIgZD1jLGU9ZC5kZXN0cm95O2Q9ZC50YWc7aWYodm9pZCAwIT09ZSlpZigwIT09KGQmNCkpWmkoYixjKTtlbHNle2Q9Yjt0cnl7ZSgpfWNhdGNoKGYpe1dpKGQsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1hKX1icmVhaztjYXNlIDE6VmkoYik7YT1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe1dpKGIsXG5mKX1icmVhaztjYXNlIDU6VmkoYik7YnJlYWs7Y2FzZSA0OmNqKGEsYil9fWZ1bmN0aW9uIGRqKGEpe2EuYWx0ZXJuYXRlPW51bGw7YS5jaGlsZD1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5yZXR1cm49bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gZWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBmaihhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihlaihiKSlicmVhayBhO2I9Yi5yZXR1cm59dGhyb3cgRXJyb3IoeSgxNjApKTt9dmFyIGM9YjtiPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgxNjEpKTt9Yy5mbGFncyYxNiYmKHBiKGIsXCJcIiksYy5mbGFncyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGVqKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZmxhZ3MmMiljb250aW51ZSBiO2lmKG51bGw9PT1cbmMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmZsYWdzJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/Z2ooYSxjLGIpOmhqKGEsYyxiKX1cbmZ1bmN0aW9uIGdqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1qZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihnaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGhqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoaGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOyloaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBjaihhLGIpe2Zvcih2YXIgYz1iLGQ9ITEsZSxmOzspe2lmKCFkKXtkPWMucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZCl0aHJvdyBFcnJvcih5KDE2MCkpO2U9ZC5zdGF0ZU5vZGU7c3dpdGNoKGQudGFnKXtjYXNlIDU6Zj0hMTticmVhayBhO2Nhc2UgMzplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGE7Y2FzZSA0OmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYX1kPWQucmV0dXJufWQ9ITB9aWYoNT09PWMudGFnfHw2PT09Yy50YWcpe2E6Zm9yKHZhciBnPWEsaD1jLGs9aDs7KWlmKGJqKGcsayksbnVsbCE9PWsuY2hpbGQmJjQhPT1rLnRhZylrLmNoaWxkLnJldHVybj1rLGs9ay5jaGlsZDtlbHNle2lmKGs9PT1oKWJyZWFrIGE7Zm9yKDtudWxsPT09ay5zaWJsaW5nOyl7aWYobnVsbD09PWsucmV0dXJufHxrLnJldHVybj09PWgpYnJlYWsgYTtrPWsucmV0dXJufWsuc2libGluZy5yZXR1cm49ay5yZXR1cm47az1rLnNpYmxpbmd9Zj8oZz1lLGg9Yy5zdGF0ZU5vZGUsXG44PT09Zy5ub2RlVHlwZT9nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaCk6Zy5yZW1vdmVDaGlsZChoKSk6ZS5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihiaihhLGMpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGlqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjp2YXIgYz1iLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2RvIDM9PT0oZC50YWcmMykmJihhPWQuZGVzdHJveSxkLmRlc3Ryb3k9dm9pZCAwLHZvaWQgMCE9PWEmJmEoKSksZD1kLm5leHQ7d2hpbGUoZCE9PWMpfXJldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTpjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe2Q9Yi5tZW1vaXplZFByb3BzO3ZhciBlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3hmXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiYkYShjLGQpO3diKGEsZSk7Yj13YihhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz1cbjIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz90YihjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/b2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP3BiKGMsaCk6cWEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOmFiKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YT1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxmPWQudmFsdWUsbnVsbCE9Zj9mYihjLCEhZC5tdWx0aXBsZSxmLCExKTphIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/ZmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOmZiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9XG5iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpjPWIuc3RhdGVOb2RlO2MuaHlkcmF0ZSYmKGMuaHlkcmF0ZT0hMSxDYyhjLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsIT09Yi5tZW1vaXplZFN0YXRlJiYoamo9TygpLGFqKGIuY2hpbGQsITApKTtraihiKTtyZXR1cm47Y2FzZSAxOTpraihiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm47Y2FzZSAyMzpjYXNlIDI0OmFqKGIsbnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSk7cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IFVpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9bGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBtaihhLGIpe3JldHVybiBudWxsIT09YSYmKGE9YS5tZW1vaXplZFN0YXRlLG51bGw9PT1hfHxudWxsIT09YS5kZWh5ZHJhdGVkKT8oYj1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWImJm51bGw9PT1iLmRlaHlkcmF0ZWQpOiExfXZhciBuaj1NYXRoLmNlaWwsb2o9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixwaj1yYS5SZWFjdEN1cnJlbnRPd25lcixYPTAsVT1udWxsLFk9bnVsbCxXPTAscWo9MCxyaj1CZigwKSxWPTAsc2o9bnVsbCx0aj0wLERnPTAsSGk9MCx1aj0wLHZqPW51bGwsamo9MCxKaT1JbmZpbml0eTtmdW5jdGlvbiB3aigpe0ppPU8oKSs1MDB9dmFyIFo9bnVsbCxRaT0hMSxSaT1udWxsLFRpPW51bGwseGo9ITEseWo9bnVsbCx6aj05MCxBaj1bXSxCaj1bXSxDaj1udWxsLERqPTAsRWo9bnVsbCxGaj0tMSxHaj0wLEhqPTAsSWo9bnVsbCxKaj0hMTtmdW5jdGlvbiBIZygpe3JldHVybiAwIT09KFgmNDgpP08oKTotMSE9PUZqP0ZqOkZqPU8oKX1cbmZ1bmN0aW9uIElnKGEpe2E9YS5tb2RlO2lmKDA9PT0oYSYyKSlyZXR1cm4gMTtpZigwPT09KGEmNCkpcmV0dXJuIDk5PT09ZWcoKT8xOjI7MD09PUdqJiYoR2o9dGopO2lmKDAhPT1rZy50cmFuc2l0aW9uKXswIT09SGomJihIaj1udWxsIT09dmo/dmoucGVuZGluZ0xhbmVzOjApO2E9R2o7dmFyIGI9NDE4NjExMiZ+SGo7YiY9LWI7MD09PWImJihhPTQxODYxMTImfmEsYj1hJi1hLDA9PT1iJiYoYj04MTkyKSk7cmV0dXJuIGJ9YT1lZygpOzAhPT0oWCY0KSYmOTg9PT1hP2E9WGMoMTIsR2opOihhPVNjKGEpLGE9WGMoYSxHaikpO3JldHVybiBhfVxuZnVuY3Rpb24gSmcoYSxiLGMpe2lmKDUwPERqKXRocm93IERqPTAsRWo9bnVsbCxFcnJvcih5KDE4NSkpO2E9S2ooYSxiKTtpZihudWxsPT09YSlyZXR1cm4gbnVsbDskYyhhLGIsYyk7YT09PVUmJihIaXw9Yiw0PT09ViYmSWkoYSxXKSk7dmFyIGQ9ZWcoKTsxPT09Yj8wIT09KFgmOCkmJjA9PT0oWCY0OCk/TGooYSk6KE1qKGEsYyksMD09PVgmJih3aigpLGlnKCkpKTooMD09PShYJjQpfHw5OCE9PWQmJjk5IT09ZHx8KG51bGw9PT1Daj9Daj1uZXcgU2V0KFthXSk6Q2ouYWRkKGEpKSxNaihhLGMpKTt2aj1hfWZ1bmN0aW9uIEtqKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH1cbmZ1bmN0aW9uIE1qKGEsYil7Zm9yKHZhciBjPWEuY2FsbGJhY2tOb2RlLGQ9YS5zdXNwZW5kZWRMYW5lcyxlPWEucGluZ2VkTGFuZXMsZj1hLmV4cGlyYXRpb25UaW1lcyxnPWEucGVuZGluZ0xhbmVzOzA8Zzspe3ZhciBoPTMxLVZjKGcpLGs9MTw8aCxsPWZbaF07aWYoLTE9PT1sKXtpZigwPT09KGsmZCl8fDAhPT0oayZlKSl7bD1iO1JjKGspO3ZhciBuPUY7ZltoXT0xMDw9bj9sKzI1MDo2PD1uP2wrNUUzOi0xfX1lbHNlIGw8PWImJihhLmV4cGlyZWRMYW5lc3w9ayk7ZyY9fmt9ZD1VYyhhLGE9PT1VP1c6MCk7Yj1GO2lmKDA9PT1kKW51bGwhPT1jJiYoYyE9PVpmJiZQZihjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wKTtlbHNle2lmKG51bGwhPT1jKXtpZihhLmNhbGxiYWNrUHJpb3JpdHk9PT1iKXJldHVybjtjIT09WmYmJlBmKGMpfTE1PT09Yj8oYz1Mai5iaW5kKG51bGwsYSksbnVsbD09PWFnPyhhZz1bY10sYmc9T2YoVWYsamcpKTphZy5wdXNoKGMpLFxuYz1aZik6MTQ9PT1iP2M9aGcoOTksTGouYmluZChudWxsLGEpKTooYz1UYyhiKSxjPWhnKGMsTmouYmluZChudWxsLGEpKSk7YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBOaihhKXtGaj0tMTtIaj1Haj0wO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYj1hLmNhbGxiYWNrTm9kZTtpZihPaigpJiZhLmNhbGxiYWNrTm9kZSE9PWIpcmV0dXJuIG51bGw7dmFyIGM9VWMoYSxhPT09VT9XOjApO2lmKDA9PT1jKXJldHVybiBudWxsO3ZhciBkPWM7dmFyIGU9WDtYfD0xNjt2YXIgZj1QaigpO2lmKFUhPT1hfHxXIT09ZCl3aigpLFFqKGEsZCk7ZG8gdHJ5e1JqKCk7YnJlYWt9Y2F0Y2goaCl7U2ooYSxoKX13aGlsZSgxKTtxZygpO29qLmN1cnJlbnQ9ZjtYPWU7bnVsbCE9PVk/ZD0wOihVPW51bGwsVz0wLGQ9Vik7aWYoMCE9PSh0aiZIaSkpUWooYSwwKTtlbHNlIGlmKDAhPT1kKXsyPT09ZCYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxjPVdjKGEpLDAhPT1jJiYoZD1UaihhLGMpKSk7aWYoMT09PWQpdGhyb3cgYj1zaixRaihhLDApLElpKGEsYyksTWooYSxPKCkpLGI7YS5maW5pc2hlZFdvcms9XG5hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1jO3N3aXRjaChkKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHkoMzQ1KSk7Y2FzZSAyOlVqKGEpO2JyZWFrO2Nhc2UgMzpJaShhLGMpO2lmKChjJjYyOTE0NTYwKT09PWMmJihkPWpqKzUwMC1PKCksMTA8ZCkpe2lmKDAhPT1VYyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZjKSE9PWMpe0hnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksZCk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA0OklpKGEsYyk7aWYoKGMmNDE4NjExMik9PT1jKWJyZWFrO2Q9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8Yzspe3ZhciBnPTMxLVZjKGMpO2Y9MTw8ZztnPWRbZ107Zz5lJiYoZT1nKTtjJj1+Zn1jPWU7Yz1PKCktYztjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPlxuYz80MzIwOjE5NjAqbmooYy8xOTYwKSktYztpZigxMDxjKXthLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGMpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNTpVaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMzI5KSk7fX1NaihhLE8oKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yj9Oai5iaW5kKG51bGwsYSk6bnVsbH1mdW5jdGlvbiBJaShhLGIpe2ImPX51ajtiJj1+SGk7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1WYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19XG5mdW5jdGlvbiBMaihhKXtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7T2ooKTtpZihhPT09VSYmMCE9PShhLmV4cGlyZWRMYW5lcyZXKSl7dmFyIGI9Vzt2YXIgYz1UaihhLGIpOzAhPT0odGomSGkpJiYoYj1VYyhhLGIpLGM9VGooYSxiKSl9ZWxzZSBiPVVjKGEsMCksYz1UaihhLGIpOzAhPT1hLnRhZyYmMj09PWMmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYj1XYyhhKSwwIT09YiYmKGM9VGooYSxiKSkpO2lmKDE9PT1jKXRocm93IGM9c2osUWooYSwwKSxJaShhLGIpLE1qKGEsTygpKSxjO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7VWooYSk7TWooYSxPKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmooKXtpZihudWxsIT09Q2ope3ZhciBhPUNqO0NqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZXhwaXJlZExhbmVzfD0yNCZhLnBlbmRpbmdMYW5lcztNaihhLE8oKSl9KX1pZygpfWZ1bmN0aW9uIFdqKGEsYil7dmFyIGM9WDtYfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIFhqKGEsYil7dmFyIGM9WDtYJj0tMjtYfD04O3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIG5pKGEsYil7SShyaixxaik7cWp8PWI7dGp8PWJ9ZnVuY3Rpb24gS2koKXtxaj1yai5jdXJyZW50O0gocmopfVxuZnVuY3Rpb24gUWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEscGYoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmR2YoKTticmVhaztjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTticmVhaztjYXNlIDU6aGgoZCk7YnJlYWs7Y2FzZSA0OmZoKCk7YnJlYWs7Y2FzZSAxMzpIKFApO2JyZWFrO2Nhc2UgMTk6SChQKTticmVhaztjYXNlIDEwOnJnKGQpO2JyZWFrO2Nhc2UgMjM6Y2FzZSAyNDpLaSgpfWM9Yy5yZXR1cm59VT1hO1k9VGcoYS5jdXJyZW50LG51bGwpO1c9cWo9dGo9YjtWPTA7c2o9bnVsbDt1aj1IaT1EZz0wfVxuZnVuY3Rpb24gU2ooYSxiKXtkb3t2YXIgYz1ZO3RyeXtxZygpO3ZoLmN1cnJlbnQ9R2g7aWYoeWgpe2Zvcih2YXIgZD1SLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fXloPSExfXhoPTA7VD1TPVI9bnVsbDt6aD0hMTtwai5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Vj0xO3NqPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9VztoLmZsYWdzfD0yMDQ4O2guZmlyc3RFZmZlY3Q9aC5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9aztpZigwPT09KGgubW9kZSYyKSl7dmFyIG49aC5hbHRlcm5hdGU7bj8oaC51cGRhdGVRdWV1ZT1uLnVwZGF0ZVF1ZXVlLGgubWVtb2l6ZWRTdGF0ZT1uLm1lbW9pemVkU3RhdGUsaC5sYW5lcz1uLmxhbmVzKTpcbihoLnVwZGF0ZVF1ZXVlPW51bGwsaC5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBBPTAhPT0oUC5jdXJyZW50JjEpLHA9Zztkb3t2YXIgQztpZihDPTEzPT09cC50YWcpe3ZhciB4PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eClDPW51bGwhPT14LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgdz1wLm1lbW9pemVkUHJvcHM7Qz12b2lkIDA9PT13LmZhbGxiYWNrPyExOiEwIT09dy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpBPyExOiEwfX1pZihDKXt2YXIgej1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT16KXt2YXIgdT1uZXcgU2V0O3UuYWRkKGwpO3AudXBkYXRlUXVldWU9dX1lbHNlIHouYWRkKGwpO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmZsYWdzfD02NDtoLmZsYWdzfD0xNjM4NDtoLmZsYWdzJj0tMjk4MTtpZigxPT09aC50YWcpaWYobnVsbD09PWguYWx0ZXJuYXRlKWgudGFnPTE3O2Vsc2V7dmFyIHQ9emcoLTEsMSk7dC50YWc9MjtBZyhoLHQpfWgubGFuZXN8PTE7YnJlYWsgYX1rPVxudm9pZCAwO2g9Yjt2YXIgcT1mLnBpbmdDYWNoZTtudWxsPT09cT8ocT1mLnBpbmdDYWNoZT1uZXcgT2ksaz1uZXcgU2V0LHEuc2V0KGwsaykpOihrPXEuZ2V0KGwpLHZvaWQgMD09PWsmJihrPW5ldyBTZXQscS5zZXQobCxrKSkpO2lmKCFrLmhhcyhoKSl7ay5hZGQoaCk7dmFyIHY9WWouYmluZChudWxsLGYsbCxoKTtsLnRoZW4odix2KX1wLmZsYWdzfD00MDk2O3AubGFuZXM9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2s9RXJyb3IoKFJhKGgudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIil9NSE9PVYmJihWPTIpO2s9TWkoayxoKTtwPVxuZztkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzpmPWs7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBKPVBpKHAsZixiKTtCZyhwLEopO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgSz1wLnR5cGUsUT1wLnN0YXRlTm9kZTtpZigwPT09KHAuZmxhZ3MmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEsuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09USYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFEuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoUSkpKSl7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBMPVNpKHAsZixiKTtCZyhwLEwpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVpqKGMpfWNhdGNoKHZhKXtiPXZhO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBQaigpe3ZhciBhPW9qLmN1cnJlbnQ7b2ouY3VycmVudD1HaDtyZXR1cm4gbnVsbD09PWE/R2g6YX1mdW5jdGlvbiBUaihhLGIpe3ZhciBjPVg7WHw9MTY7dmFyIGQ9UGooKTtVPT09YSYmVz09PWJ8fFFqKGEsYik7ZG8gdHJ5e2FrKCk7YnJlYWt9Y2F0Y2goZSl7U2ooYSxlKX13aGlsZSgxKTtxZygpO1g9Yztvai5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IoeSgyNjEpKTtVPW51bGw7Vz0wO3JldHVybiBWfWZ1bmN0aW9uIGFrKCl7Zm9yKDtudWxsIT09WTspYmsoWSl9ZnVuY3Rpb24gUmooKXtmb3IoO251bGwhPT1ZJiYhUWYoKTspYmsoWSl9ZnVuY3Rpb24gYmsoYSl7dmFyIGI9Y2soYS5hbHRlcm5hdGUsYSxxaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1pqKGEpOlk9Yjtwai5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBaaihhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjIwNDgpKXtjPUdpKGMsYixxaik7aWYobnVsbCE9PWMpe1k9YztyZXR1cm59Yz1iO2lmKDI0IT09Yy50YWcmJjIzIT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fDAhPT0ocWomMTA3Mzc0MTgyNCl8fDA9PT0oYy5tb2RlJjQpKXtmb3IodmFyIGQ9MCxlPWMuY2hpbGQ7bnVsbCE9PWU7KWR8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGU9ZS5zaWJsaW5nO2MuY2hpbGRMYW5lcz1kfW51bGwhPT1hJiYwPT09KGEuZmxhZ3MmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Yi5maXJzdEVmZmVjdCksbnVsbCE9PWIubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0KSwxPGIuZmxhZ3MmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YjphLmZpcnN0RWZmZWN0PWIsYS5sYXN0RWZmZWN0PWIpKX1lbHNle2M9TGkoYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTIwNDc7WT1jO3JldHVybn1udWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5mbGFnc3w9MjA0OCl9Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1WJiYoVj01KX1mdW5jdGlvbiBVaihhKXt2YXIgYj1lZygpO2dnKDk5LGRrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRrKGEsYil7ZG8gT2ooKTt3aGlsZShudWxsIT09eWopO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yaztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IoeSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO3ZhciBkPWMubGFuZXN8Yy5jaGlsZExhbmVzLGU9ZCxmPWEucGVuZGluZ0xhbmVzJn5lO2EucGVuZGluZ0xhbmVzPWU7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9ZTthLm11dGFibGVSZWFkTGFuZXMmPWU7YS5lbnRhbmdsZWRMYW5lcyY9ZTtlPWEuZW50YW5nbGVtZW50cztmb3IodmFyIGc9YS5ldmVudFRpbWVzLGg9YS5leHBpcmF0aW9uVGltZXM7MDxmOyl7dmFyIGs9MzEtVmMoZiksbD0xPDxrO2Vba109MDtnW2tdPS0xO2hba109LTE7ZiY9fmx9bnVsbCE9PVxuQ2omJjA9PT0oZCYyNCkmJkNqLmhhcyhhKSYmQ2ouZGVsZXRlKGEpO2E9PT1VJiYoWT1VPW51bGwsVz0wKTsxPGMuZmxhZ3M/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxkPWMuZmlyc3RFZmZlY3QpOmQ9YzpkPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWQpe2U9WDtYfD0zMjtwai5jdXJyZW50PW51bGw7a2Y9ZmQ7Zz1OZSgpO2lmKE9lKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKWg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6aWYoaD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3csKGw9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCkpJiYwIT09bC5yYW5nZUNvdW50KXtoPWwuYW5jaG9yTm9kZTtmPWwuYW5jaG9yT2Zmc2V0O2s9bC5mb2N1c05vZGU7bD1sLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2godmEpe2g9bnVsbDtcbmJyZWFrIGF9dmFyIG49MCxBPS0xLHA9LTEsQz0wLHg9MCx3PWcsej1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7dyE9PWh8fDAhPT1mJiYzIT09dy5ub2RlVHlwZXx8KEE9bitmKTt3IT09a3x8MCE9PWwmJjMhPT13Lm5vZGVUeXBlfHwocD1uK2wpOzM9PT13Lm5vZGVUeXBlJiYobis9dy5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9dy5maXJzdENoaWxkKSlicmVhazt6PXc7dz11fWZvcig7Oyl7aWYodz09PWcpYnJlYWsgYjt6PT09aCYmKytDPT09ZiYmKEE9bik7ej09PWsmJisreD09PWwmJihwPW4pO2lmKG51bGwhPT0odT13Lm5leHRTaWJsaW5nKSlicmVhazt3PXo7ej13LnBhcmVudE5vZGV9dz11fWg9LTE9PT1BfHwtMT09PXA/bnVsbDp7c3RhcnQ6QSxlbmQ6cH19ZWxzZSBoPW51bGw7aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPW51bGw7bGY9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7SWo9bnVsbDtKaj0hMTtaPWQ7ZG8gdHJ5e2VrKCl9Y2F0Y2godmEpe2lmKG51bGw9PT1cblopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7SWo9bnVsbDtaPWQ7ZG8gdHJ5e2ZvcihnPWE7bnVsbCE9PVo7KXt2YXIgdD1aLmZsYWdzO3QmMTYmJnBiKFouc3RhdGVOb2RlLFwiXCIpO2lmKHQmMTI4KXt2YXIgcT1aLmFsdGVybmF0ZTtpZihudWxsIT09cSl7dmFyIHY9cS5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHQmMTAzOCl7Y2FzZSAyOmZqKFopO1ouZmxhZ3MmPS0zO2JyZWFrO2Nhc2UgNjpmaihaKTtaLmZsYWdzJj0tMztpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDEwMjQ6Wi5mbGFncyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlouZmxhZ3MmPS0xMDI1O2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgNDppaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDg6aD1aO2NqKGcsaCk7dmFyIEo9aC5hbHRlcm5hdGU7ZGooaCk7bnVsbCE9PVxuSiYmZGooSil9Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTt2PWxmO3E9TmUoKTt0PXYuZm9jdXNlZEVsZW07Zz12LnNlbGVjdGlvblJhbmdlO2lmKHEhPT10JiZ0JiZ0Lm93bmVyRG9jdW1lbnQmJk1lKHQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdCkpe251bGwhPT1nJiZPZSh0KSYmKHE9Zy5zdGFydCx2PWcuZW5kLHZvaWQgMD09PXYmJih2PXEpLFwic2VsZWN0aW9uU3RhcnRcImluIHQ/KHQuc2VsZWN0aW9uU3RhcnQ9cSx0LnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHQudmFsdWUubGVuZ3RoKSk6KHY9KHE9dC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnEuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxoPXQudGV4dENvbnRlbnQubGVuZ3RoLEo9TWF0aC5taW4oZy5zdGFydCxoKSxnPXZvaWQgMD09PVxuZy5lbmQ/SjpNYXRoLm1pbihnLmVuZCxoKSwhdi5leHRlbmQmJko+ZyYmKGg9ZyxnPUosSj1oKSxoPUxlKHQsSiksZj1MZSh0LGcpLGgmJmYmJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1oLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09aC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09Zi5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpJiYocT1xLmNyZWF0ZVJhbmdlKCkscS5zZXRTdGFydChoLm5vZGUsaC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksSj5nPyh2LmFkZFJhbmdlKHEpLHYuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihxLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLHYuYWRkUmFuZ2UocSkpKSkpKTtxPVtdO2Zvcih2PXQ7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZxLnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgdC5mb2N1cyYmdC5mb2N1cygpO2Zvcih0PVxuMDt0PHEubGVuZ3RoO3QrKyl2PXFbdF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9ZmQ9ISFrZjtsZj1rZj1udWxsO2EuY3VycmVudD1jO1o9ZDtkbyB0cnl7Zm9yKHQ9YTtudWxsIT09Wjspe3ZhciBLPVouZmxhZ3M7SyYzNiYmWWkodCxaLmFsdGVybmF0ZSxaKTtpZihLJjEyOCl7cT12b2lkIDA7dmFyIFE9Wi5yZWY7aWYobnVsbCE9PVEpe3ZhciBMPVouc3RhdGVOb2RlO3N3aXRjaChaLnRhZyl7Y2FzZSA1OnE9TDticmVhaztkZWZhdWx0OnE9TH1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUT9RKHEpOlEuY3VycmVudD1xfX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO1o9bnVsbDskZigpO1g9ZX1lbHNlIGEuY3VycmVudD1jO2lmKHhqKXhqPSExLHlqPWEsemo9YjtlbHNlIGZvcihaPWQ7bnVsbCE9PVo7KWI9XG5aLm5leHRFZmZlY3QsWi5uZXh0RWZmZWN0PW51bGwsWi5mbGFncyY4JiYoSz1aLEsuc2libGluZz1udWxsLEsuc3RhdGVOb2RlPW51bGwpLFo9YjtkPWEucGVuZGluZ0xhbmVzOzA9PT1kJiYoVGk9bnVsbCk7MT09PWQ/YT09PUVqP0RqKys6KERqPTAsRWo9YSk6RGo9MDtjPWMuc3RhdGVOb2RlO2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclJvb3QpdHJ5e01mLm9uQ29tbWl0RmliZXJSb290KExmLGMsdm9pZCAwLDY0PT09KGMuY3VycmVudC5mbGFncyY2NCkpfWNhdGNoKHZhKXt9TWooYSxPKCkpO2lmKFFpKXRocm93IFFpPSExLGE9UmksUmk9bnVsbCxhO2lmKDAhPT0oWCY4KSlyZXR1cm4gbnVsbDtpZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZWsoKXtmb3IoO251bGwhPT1aOyl7dmFyIGE9Wi5hbHRlcm5hdGU7Smp8fG51bGw9PT1Janx8KDAhPT0oWi5mbGFncyY4KT9kYyhaLElqKSYmKEpqPSEwKToxMz09PVoudGFnJiZtaihhLFopJiZkYyhaLElqKSYmKEpqPSEwKSk7dmFyIGI9Wi5mbGFnczswIT09KGImMjU2KSYmWGkoYSxaKTswPT09KGImNTEyKXx8eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSk7Wj1aLm5leHRFZmZlY3R9fWZ1bmN0aW9uIE9qKCl7aWYoOTAhPT16ail7dmFyIGE9OTc8emo/OTc6emo7emo9OTA7cmV0dXJuIGdnKGEsZmspfXJldHVybiExfWZ1bmN0aW9uICRpKGEsYil7QWoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfWZ1bmN0aW9uIFppKGEsYil7QmoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfVxuZnVuY3Rpb24gZmsoKXtpZihudWxsPT09eWopcmV0dXJuITE7dmFyIGE9eWo7eWo9bnVsbDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzMxKSk7dmFyIGI9WDtYfD0zMjt2YXIgYz1CajtCaj1bXTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrPTIpe3ZhciBlPWNbZF0sZj1jW2QrMV0sZz1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyl0cnl7ZygpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Yz1BajtBaj1bXTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7ZT1jW2RdO2Y9Y1tkKzFdO3RyeXt2YXIgaD1lLmNyZWF0ZTtlLmRlc3Ryb3k9aCgpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Zm9yKGg9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1oOylhPWgubmV4dEVmZmVjdCxoLm5leHRFZmZlY3Q9bnVsbCxoLmZsYWdzJjgmJihoLnNpYmxpbmc9XG5udWxsLGguc3RhdGVOb2RlPW51bGwpLGg9YTtYPWI7aWcoKTtyZXR1cm4hMH1mdW5jdGlvbiBnayhhLGIsYyl7Yj1NaShjLGIpO2I9UGkoYSxiLDEpO0FnKGEsYik7Yj1IZygpO2E9S2ooYSwxKTtudWxsIT09YSYmKCRjKGEsMSxiKSxNaihhLGIpKX1cbmZ1bmN0aW9uIFdpKGEsYil7aWYoMz09PWEudGFnKWdrKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7Z2soYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXthPU1pKGIsYSk7dmFyIGU9U2koYyxhLDEpO0FnKGMsZSk7ZT1IZygpO2M9S2ooYywxKTtpZihudWxsIT09YykkYyhjLDEsZSksTWooYyxlKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl0cnl7ZC5jb21wb25lbnREaWRDYXRjaChiLGEpfWNhdGNoKGYpe31icmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBZaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7VT09PWEmJihXJmMpPT09YyYmKDQ9PT1WfHwzPT09ViYmKFcmNjI5MTQ1NjApPT09VyYmNTAwPk8oKS1qaj9RaihhLDApOnVqfD1jKTtNaihhLGIpfWZ1bmN0aW9uIGxqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9YS5tb2RlLDA9PT0oYiYyKT9iPTE6MD09PShiJjQpP2I9OTk9PT1lZygpPzE6MjooMD09PUdqJiYoR2o9dGopLGI9WWMoNjI5MTQ1NjAmfkdqKSwwPT09YiYmKGI9NDE5NDMwNCkpKTtjPUhnKCk7YT1LaihhLGIpO251bGwhPT1hJiYoJGMoYSxiLGMpLE1qKGEsYykpfXZhciBjaztcbmNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmxhbmVzO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxOLmN1cnJlbnQpdWc9ITA7ZWxzZSBpZigwIT09KGMmZCkpdWc9MCE9PShhLmZsYWdzJjE2Mzg0KT8hMDohMTtlbHNle3VnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOnJpKGIpO3NoKCk7YnJlYWs7Y2FzZSA1OmdoKGIpO2JyZWFrO2Nhc2UgMTpGZihiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6ZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO3ZhciBlPWIudHlwZS5fY29udGV4dDtJKG1nLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdGkoYSxiLGMpO0koUCxQLmN1cnJlbnQmMSk7Yj1oaShhLGIsYyk7cmV0dXJuIG51bGwhPT1cbmI/Yi5zaWJsaW5nOm51bGx9SShQLFAuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjY0KSl7aWYoZClyZXR1cm4gQWkoYSxiLGMpO2IuZmxhZ3N8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7SShQLFAuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gYi5sYW5lcz0wLG1pKGEsYixjKX1yZXR1cm4gaGkoYSxiLGMpfWVsc2UgdWc9ITE7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1FZihiLE0uY3VycmVudCk7dGcoYixjKTtlPUNoKG51bGwsYixkLGEsZSxjKTtiLmZsYWdzfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihGZihkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7eGcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkdnKGIsZCxnLGEpO2UudXBkYXRlcj1LZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxzPWI7T2coYixkLGEsYyk7Yj1xaShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxmaShudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7YTp7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7XG5hPWIucGVuZGluZ1Byb3BzO2Y9ZS5faW5pdDtlPWYoZS5fcGF5bG9hZCk7Yi50eXBlPWU7Zj1iLnRhZz1oayhlKTthPWxnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWxpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1waShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPWdpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9aWkobnVsbCxiLGUsbGcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih5KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGxpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLHBpKGEsYixkLGUsYyk7Y2FzZSAzOnJpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IoeSgyODIpKTtcbmQ9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZyhhLGIpO0NnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpc2goKSxiPWhpKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZj1lLmh5ZHJhdGUpa2g9cmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxqaD1iLGY9bGg9ITA7aWYoZil7YT1lLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE7aWYobnVsbCE9YSlmb3IoZT0wO2U8YS5sZW5ndGg7ZSs9MilmPWFbZV0sZi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1hW2UrMV0sdGgucHVzaChmKTtjPVpnKGIsbnVsbCxkLGMpO2ZvcihiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDEwMjQsYz1jLnNpYmxpbmd9ZWxzZSBmaShhLGIsZCxjKSxzaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGdoKGIpLG51bGw9PT1hJiZcbnBoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sbmYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJm5mKGQsZikmJihiLmZsYWdzfD0xNiksb2koYSxiKSxmaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnBoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdGkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WWcoYixudWxsLGQsYyk6ZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGdpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShtZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPUhlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFOLmN1cnJlbnQpe2I9aGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2c9aC5jaGlsZDtmb3IodmFyIGw9XG5rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9emcoLTEsYyYtYyksbC50YWc9MixBZyhoLGwpKTtoLmxhbmVzfD1jO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJihsLmxhbmVzfD1jKTtzZyhoLnJldHVybixjKTtrLmxhbmVzfD1jO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9ZmkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sdGcoYixjKSxlPXZnKGUsXG5mLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZmxhZ3N8PTEsZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWxnKGUsYi5wZW5kaW5nUHJvcHMpLGY9bGcoZS50eXBlLGYpLGlpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBraShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLEZmKGQpPyhhPSEwLEpmKGIpKTphPSExLHRnKGIsYyksTWcoYixkLGUpLE9nKGIsZCxlLGMpLHFpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gQWkoYSxiLGMpO2Nhc2UgMjM6cmV0dXJuIG1pKGEsYixjKTtjYXNlIDI0OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTtcbn07ZnVuY3Rpb24gaWsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmZsYWdzPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIG5oKGEsYixjLGQpe3JldHVybiBuZXcgaWsoYSxiLGMsZCl9ZnVuY3Rpb24gamkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIGhrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBqaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09QWEpcmV0dXJuIDExO2lmKGE9PT1EYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPW5oKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFZnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlqaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm4gWGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBIYTpnPTg7ZXw9MTY7YnJlYWs7Y2FzZSB3YTpnPTg7ZXw9MTticmVhaztjYXNlIHhhOnJldHVybiBhPW5oKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9eGEsYS50eXBlPXhhLGEubGFuZXM9ZixhO2Nhc2UgQmE6cmV0dXJuIGE9bmgoMTMsYyxiLGUpLGEudHlwZT1CYSxhLmVsZW1lbnRUeXBlPUJhLGEubGFuZXM9ZixhO2Nhc2UgQ2E6cmV0dXJuIGE9bmgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9Q2EsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gdmkoYyxlLGYsYik7Y2FzZSBKYTpyZXR1cm4gYT1uaCgyNCxjLGIsZSksYS5lbGVtZW50VHlwZT1KYSxhLmxhbmVzPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB5YTpnPTEwO2JyZWFrIGE7Y2FzZSB6YTpnPTk7YnJlYWsgYTtjYXNlIEFhOmc9MTE7YnJlYWsgYTtjYXNlIERhOmc9MTQ7YnJlYWsgYTtjYXNlIEVhOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBGYTpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1uaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFhnKGEsYixjLGQpe2E9bmgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHZpKGEsYixjLGQpe2E9bmgoMjMsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIFVnKGEsYixjKXthPW5oKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFdnKGEsYixjKXtiPW5oKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gamsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9WmMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9WmMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9WmMoMCk7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPW51bGx9XG5mdW5jdGlvbiBrayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gbGsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9SGcoKSxnPUlnKGUpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFscztiOntpZihaYihjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEZmKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IoeSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoRmYoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj16ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1cbmQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7SmcoZSxnLGYpO3JldHVybiBnfWZ1bmN0aW9uIG1rKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gbmsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIG9rKGEsYil7bmsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJm5rKGEsYil9ZnVuY3Rpb24gcGsoKXtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHFrKGEsYixjKXt2YXIgZD1udWxsIT1jJiZudWxsIT1jLmh5ZHJhdGlvbk9wdGlvbnMmJmMuaHlkcmF0aW9uT3B0aW9ucy5tdXRhYmxlU291cmNlc3x8bnVsbDtjPW5ldyBqayhhLGIsbnVsbCE9YyYmITA9PT1jLmh5ZHJhdGUpO2I9bmgoMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2MuY3VycmVudD1iO2Iuc3RhdGVOb2RlPWM7eGcoYik7YVtmZl09Yy5jdXJyZW50O2NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspe2I9ZFthXTt2YXIgZT1iLl9nZXRWZXJzaW9uO2U9ZShiLl9zb3VyY2UpO251bGw9PWMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2IsZV06Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYixlKX10aGlzLl9pbnRlcm5hbFJvb3Q9Y31cbnFrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7bGsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07cWsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87bGsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW2ZmXT1udWxsfSl9O2Z1bmN0aW9uIHJrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHNrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgcWsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiB0ayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2guY2FsbChhKX19bGsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1zayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtrLmNhbGwoYSl9fVhqKGZ1bmN0aW9uKCl7bGsoYixnLGEsZSl9KX1yZXR1cm4gbWsoZyl9ZWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDQsYik7b2soYSw0KX19O2ZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw2NzEwODg2NCxiKTtvayhhLDY3MTA4ODY0KX19O1xuZ2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKSxjPUlnKGEpO0pnKGEsYyxiKTtvayhhLGMpfX07aGM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYigpfTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YWIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHkoOTApKTtXYShkKTthYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9V2o7XG5IYj1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVg7WHw9NDt0cnl7cmV0dXJuIGdnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1g9ZiwwPT09WCYmKHdqKCksaWcoKSl9fTtJYj1mdW5jdGlvbigpezA9PT0oWCY0OSkmJihWaigpLE9qKCkpfTtKYj1mdW5jdGlvbihhLGIpe3ZhciBjPVg7WHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX07ZnVuY3Rpb24gdWsoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4ga2soYSxiLG51bGwsYyl9dmFyIHZrPXtFdmVudHM6W0NiLHVlLERiLEViLEZiLE9qLHtjdXJyZW50OiExfV19LHdrPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE3LjAuMlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgeGs9e2J1bmRsZVR5cGU6d2suYnVuZGxlVHlwZSx2ZXJzaW9uOndrLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp3ay5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOndrLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1jYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2suZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxucGssZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB5az1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXlrLmlzRGlzYWJsZWQmJnlrLnN1cHBvcnRzRmliZXIpdHJ5e0xmPXlrLmluamVjdCh4ayksTWY9eWt9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXZrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPXVrO1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih5KDE4OCkpO3Rocm93IEVycm9yKHkoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9Y2MoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe3ZhciBjPVg7aWYoMCE9PShjJjQ4KSlyZXR1cm4gYShiKTtYfD0xO3RyeXtpZihhKXJldHVybiBnZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtYPWMsaWcoKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcmsoYSkpdGhyb3cgRXJyb3IoeSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFhqKGZ1bmN0aW9uKCl7dGsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW2ZmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9V2o7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdWsoYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFyayhjKSl0aHJvdyBFcnJvcih5KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHkoMzgpKTtyZXR1cm4gdGsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaW1wb3J0IHtBY3Rpb24sIFJlZHVjZXIsIFN0YXRlfSBmcm9tICcuL2NyZWF0ZVN0b3JlJztcclxuXHJcbmludGVyZmFjZSBSZWR1Y2Vyc01hcE9iamVjdDxTIGV4dGVuZHMgU3RhdGUgPSBhbnksIEEgZXh0ZW5kcyBBY3Rpb24gPSBhbnk+IHtcclxuICBba2V5OiBzdHJpbmddOiBSZWR1Y2VyPFMsIEE+O1xyXG59XHJcblxyXG50eXBlIFN0YXRlRnJvbVJlZHVjZXJzTWFwT2JqZWN0PE0+ID0gTSBleHRlbmRzIFJlZHVjZXJzTWFwT2JqZWN0XHJcbiAgPyB7W1AgaW4ga2V5b2YgTV06IE1bUF0gZXh0ZW5kcyBSZWR1Y2VyPGluZmVyIFMsIGFueT4gPyBTIDogbmV2ZXJ9XHJcbiAgOiBuZXZlcjtcclxuXHJcbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VyczxTIGV4dGVuZHMgU3RhdGUsIEEgZXh0ZW5kcyBBY3Rpb24+KHJlZHVjZXJzOiBSZWR1Y2Vyc01hcE9iamVjdCk6IFJlZHVjZXI8UywgQT4ge1xyXG4gIGNvbnN0IHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xyXG4gIGNvbnN0IGZpbmFsUmVkdWNlcnNPYmo6IFJlZHVjZXJzTWFwT2JqZWN0ID0ge307XHJcblxyXG4gIGZvciAoY29uc3Qga2V5IG9mIHJlZHVjZXJLZXlzKSB7XHJcbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgZmluYWxSZWR1Y2Vyc09ialtrZXldID0gcmVkdWNlcnNba2V5XTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiAoKHN0YXRlOiBTdGF0ZUZyb21SZWR1Y2Vyc01hcE9iamVjdDx0eXBlb2YgcmVkdWNlcnM+ID0ge30sIGFjdGlvbjogQSkgPT4ge1xyXG4gICAgbGV0IGhhc0NoYW5nZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0IG5leHRTdGF0ZTogU3RhdGVGcm9tUmVkdWNlcnNNYXBPYmplY3Q8dHlwZW9mIHJlZHVjZXJzPiA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IG9mIHJlZHVjZXJLZXlzKSB7XHJcbiAgICAgIGNvbnN0IHByZXZTdGF0ZUZvcktleSA9IHN0YXRlW2tleV07XHJcbiAgICAgIGNvbnN0IG5leHRTdGF0ZUZvcktleSA9IGZpbmFsUmVkdWNlcnNPYmpba2V5XShwcmV2U3RhdGVGb3JLZXksIGFjdGlvbik7XHJcbiAgICAgIG5leHRTdGF0ZVtrZXldID0gbmV4dFN0YXRlRm9yS2V5O1xyXG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZTdGF0ZUZvcktleTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xyXG4gIH0pIGFzIGFueSBhcyBSZWR1Y2VyPFMsIEE+O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb21iaW5lUmVkdWNlcnM7XHJcbiIsImV4cG9ydCB0eXBlIFN0YXRlID0gUmVhZG9ubHk8UmVjb3JkPHN0cmluZywgYW55Pj47XHJcbmV4cG9ydCB0eXBlIEFjdGlvbiA9IHtcclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgcGF5bG9hZDogYW55O1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgUmVkdWNlcjxTIGV4dGVuZHMgU3RhdGUsIEEgZXh0ZW5kcyBBY3Rpb24+ID0gKHM6IFMsIGE6IEEpID0+IFM7XHJcbnR5cGUgTGlzdGVuZXI8UyBleHRlbmRzIFN0YXRlPiA9IChuczogUywgcHM/OiBTKSA9PiB2b2lkO1xyXG50eXBlIFVuc3Vic2NyaWJlID0gKCkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RvcmU8UyBleHRlbmRzIFN0YXRlLCBBIGV4dGVuZHMgQWN0aW9uPiB7XHJcbiAgZGlzcGF0Y2g6IChhOiBBKSA9PiB2b2lkO1xyXG4gIGdldFN0YXRlOiAoKSA9PiBTO1xyXG4gIHN1YnNjcmliZTogKGxpc3RlbmVyOiBMaXN0ZW5lcjxTPikgPT4gVW5zdWJzY3JpYmU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDnroDljZXlrp7njrDnmoQgUmVkdXhcclxuICogQHBhcmFtIHByZWxvYWRlZFN0YXRlIOWIneWniyBzdGF0ZVxyXG4gKiBAcGFyYW0gcmVkdWNlciByZWR1Y2VyIHB1cmUgZnVuY3Rpb25cclxuICogQHJldHVybnMgc3RvcmVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlPFMgZXh0ZW5kcyBTdGF0ZSwgQSBleHRlbmRzIEFjdGlvbj4oXHJcbiAgcHJlbG9hZGVkU3RhdGU6IFMsXHJcbiAgcmVkdWNlcjogUmVkdWNlcjxTLCBBPixcclxuKTogU3RvcmU8UmVhZG9ubHk8Uz4sIEE+IHtcclxuICBjb25zdCBsaXN0ZW5lcnM6IExpc3RlbmVyPFM+W10gPSBbXTtcclxuICBsZXQgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XHJcblxyXG4gIGNvbnN0IGRpc3BhdGNoID0gKGFjdGlvbjogQSkgPT4ge1xyXG4gICAgY29uc3QgbmV4dFN0YXRlID0gcmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XHJcbiAgICBjb25zdCBwcmV2U3RhdGUgPSBjdXJyZW50U3RhdGU7XHJcbiAgICBjdXJyZW50U3RhdGUgPSBuZXh0U3RhdGU7XHJcblxyXG4gICAgZm9yIChjb25zdCBjYiBvZiBsaXN0ZW5lcnMpIHtcclxuICAgICAgY2IoY3VycmVudFN0YXRlLCBwcmV2U3RhdGUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHN1YnNjcmliZSA9IChsaXN0ZW5lcjogTGlzdGVuZXI8Uz4pID0+IHtcclxuICAgIGxldCBpc1N1YnNjcmliZWQgPSB0cnVlO1xyXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcclxuICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICBjb25zdCBnZXRTdGF0ZSA9ICgpID0+IHtcclxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGRpc3BhdGNoLFxyXG4gICAgZ2V0U3RhdGUsXHJcbiAgICBzdWJzY3JpYmUsXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3RvcmU7XHJcbiIsImV4cG9ydCBpbnRlcmZhY2UgQXBwU2V0dGluZyB7XHJcbiAgICBzaG91bGRTcGxpdEV2ZW50V29yZDogYm9vbGVhbjtcclxuICAgIHNob3VsZEhpZGVJbWFnZVVybDogYm9vbGVhbjtcclxuICAgIHNob3VsZFVzZU1hcmtkb3duUGFyc2VyOiBib29sZWFuO1xyXG4gICAgdXNlVGlueVVuZG9IaXN0b3J5Q2FjaGU6IGJvb2xlYW47XHJcbiAgfVxyXG4gIFxyXG4gIGV4cG9ydCBpbnRlcmZhY2UgU3RhdGUgZXh0ZW5kcyBBcHBTZXR0aW5nIHtcclxuICAgIG1hcmtFdmVudElkOiBzdHJpbmc7XHJcbiAgICBlZGl0RXZlbnRJZDogc3RyaW5nO1xyXG4gICAgaXNNb2JpbGVWaWV3OiBib29sZWFuO1xyXG4gICAgc2hvd1NpZGVyYmFySW5Nb2JpbGVWaWV3OiBib29sZWFuO1xyXG4gIH1cclxuICBcclxuICBpbnRlcmZhY2UgU2V0TWFya0V2ZW50SWRBY3Rpb24ge1xyXG4gICAgdHlwZTogJ1NFVF9NQVJLX0VWRU5UX0lEJztcclxuICAgIHBheWxvYWQ6IHtcclxuICAgICAgbWFya0V2ZW50SWQ6IHN0cmluZztcclxuICAgIH07XHJcbiAgfVxyXG4gIFxyXG4gIGludGVyZmFjZSBTZXRFZGl0RXZlbnRJZEFjdGlvbiB7XHJcbiAgICB0eXBlOiAnU0VUX0VESVRfRVZFTlRfSUQnO1xyXG4gICAgcGF5bG9hZDoge1xyXG4gICAgICBlZGl0RXZlbnRJZDogc3RyaW5nO1xyXG4gICAgfTtcclxuICB9XHJcbiAgXHJcbiAgaW50ZXJmYWNlIFNldE1vYmlsZVZpZXdBY3Rpb24ge1xyXG4gICAgdHlwZTogJ1NFVF9NT0JJTEVfVklFVyc7XHJcbiAgICBwYXlsb2FkOiB7XHJcbiAgICAgIGlzTW9iaWxlVmlldzogYm9vbGVhbjtcclxuICAgIH07XHJcbiAgfVxyXG4gIFxyXG4gIGludGVyZmFjZSBTZXRTaG93U2lkZWJhckFjdGlvbiB7XHJcbiAgICB0eXBlOiAnU0VUX1NIT1dfU0lERUJBUl9JTl9NT0JJTEVfVklFVyc7XHJcbiAgICBwYXlsb2FkOiB7XHJcbiAgICAgIHNob3dTaWRlcmJhckluTW9iaWxlVmlldzogYm9vbGVhbjtcclxuICAgIH07XHJcbiAgfVxyXG4gIFxyXG4gIGludGVyZmFjZSBTZXRBcHBTZXR0aW5nQWN0aW9uIHtcclxuICAgIHR5cGU6ICdTRVRfQVBQX1NFVFRJTkcnO1xyXG4gICAgcGF5bG9hZDogUGFydGlhbDxBcHBTZXR0aW5nPjtcclxuICB9XHJcbiAgXHJcbiAgZXhwb3J0IHR5cGUgQWN0aW9ucyA9XHJcbiAgICB8IFNldE1vYmlsZVZpZXdBY3Rpb25cclxuICAgIHwgU2V0U2hvd1NpZGViYXJBY3Rpb25cclxuICAgIHwgU2V0RWRpdEV2ZW50SWRBY3Rpb25cclxuICAgIHwgU2V0TWFya0V2ZW50SWRBY3Rpb25cclxuICAgIHwgU2V0QXBwU2V0dGluZ0FjdGlvbjtcclxuICBcclxuICBleHBvcnQgZnVuY3Rpb24gcmVkdWNlcihzdGF0ZTogU3RhdGUsIGFjdGlvbjogQWN0aW9ucyk6IFN0YXRlIHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgY2FzZSAnU0VUX01BUktfRVZFTlRfSUQnOiB7XHJcbiAgICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkLm1hcmtFdmVudElkID09PSBzdGF0ZS5tYXJrRXZlbnRJZCkge1xyXG4gICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICBtYXJrRXZlbnRJZDogYWN0aW9uLnBheWxvYWQubWFya0V2ZW50SWQsXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdTRVRfRURJVF9FVkVOVF9JRCc6IHtcclxuICAgICAgICBpZiAoYWN0aW9uLnBheWxvYWQuZWRpdEV2ZW50SWQgPT09IHN0YXRlLmVkaXRFdmVudElkKSB7XHJcbiAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgIGVkaXRFdmVudElkOiBhY3Rpb24ucGF5bG9hZC5lZGl0RXZlbnRJZCxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ1NFVF9NT0JJTEVfVklFVyc6IHtcclxuICAgICAgICBpZiAoYWN0aW9uLnBheWxvYWQuaXNNb2JpbGVWaWV3ID09PSBzdGF0ZS5pc01vYmlsZVZpZXcpIHtcclxuICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgaXNNb2JpbGVWaWV3OiBhY3Rpb24ucGF5bG9hZC5pc01vYmlsZVZpZXcsXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdTRVRfU0hPV19TSURFQkFSX0lOX01PQklMRV9WSUVXJzoge1xyXG4gICAgICAgIGlmIChhY3Rpb24ucGF5bG9hZC5zaG93U2lkZXJiYXJJbk1vYmlsZVZpZXcgPT09IHN0YXRlLnNob3dTaWRlcmJhckluTW9iaWxlVmlldykge1xyXG4gICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICBzaG93U2lkZXJiYXJJbk1vYmlsZVZpZXc6IGFjdGlvbi5wYXlsb2FkLnNob3dTaWRlcmJhckluTW9iaWxlVmlldyxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ1NFVF9BUFBfU0VUVElORyc6IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZCxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZXhwb3J0IGNvbnN0IGRlZmF1bHRTdGF0ZTogU3RhdGUgPSB7XHJcbiAgICBtYXJrRXZlbnRJZDogJycsXHJcbiAgICBlZGl0RXZlbnRJZDogJycsXHJcbiAgICBzaG91bGRTcGxpdEV2ZW50V29yZDogdHJ1ZSxcclxuICAgIHNob3VsZEhpZGVJbWFnZVVybDogdHJ1ZSxcclxuICAgIHNob3VsZFVzZU1hcmtkb3duUGFyc2VyOiB0cnVlLFxyXG4gICAgdXNlVGlueVVuZG9IaXN0b3J5Q2FjaGU6IGZhbHNlLFxyXG4gICAgaXNNb2JpbGVWaWV3OiBmYWxzZSxcclxuICAgIHNob3dTaWRlcmJhckluTW9iaWxlVmlldzogZmFsc2UsXHJcbiAgfTtcclxuICAiLCJleHBvcnQgdHlwZSBTdGF0ZSA9IEFwcExvY2F0aW9uO1xyXG5cclxuaW50ZXJmYWNlIFNldExvY2F0aW9uIHtcclxuICB0eXBlOiAnU0VUX0xPQ0FUSU9OJztcclxuICBwYXlsb2FkOiBTdGF0ZTtcclxufVxyXG5cclxuaW50ZXJmYWNlIFNldFBhdGhuYW1lQWN0aW9uIHtcclxuICB0eXBlOiAnU0VUX1BBVEhOQU1FJztcclxuICBwYXlsb2FkOiB7XHJcbiAgICBwYXRobmFtZTogc3RyaW5nO1xyXG4gIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBTZXRRdWVyeSB7XHJcbiAgdHlwZTogJ1NFVF9RVUVSWSc7XHJcbiAgcGF5bG9hZDogUXVlcnk7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTZXRRdWVyeUZpbHRlckFjdGlvbiB7XHJcbiAgdHlwZTogJ1NFVF9RVUVSWV9GSUxURVInO1xyXG4gIHBheWxvYWQ6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIFNldFRhZ1F1ZXJ5QWN0aW9uIHtcclxuICB0eXBlOiAnU0VUX1RBR19RVUVSWSc7XHJcbiAgcGF5bG9hZDoge1xyXG4gICAgdGFnOiBzdHJpbmc7XHJcbiAgfTtcclxufVxyXG5cclxuaW50ZXJmYWNlIFNldEZyb21BbmRUb1F1ZXJ5QWN0aW9uIHtcclxuICB0eXBlOiAnU0VUX0RVUkFUSU9OX1FVRVJZJztcclxuICBwYXlsb2FkOiB7XHJcbiAgICBkdXJhdGlvbjogRHVyYXRpb24gfCBudWxsO1xyXG4gIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBTZXRUeXBlQWN0aW9uIHtcclxuICB0eXBlOiAnU0VUX1RZUEUnO1xyXG4gIHBheWxvYWQ6IHtcclxuICAgIHR5cGU6IEV2ZW50U3BlY1R5cGUgfCAnJztcclxuICB9O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU2V0VGV4dEFjdGlvbiB7XHJcbiAgdHlwZTogJ1NFVF9URVhUJztcclxuICBwYXlsb2FkOiB7XHJcbiAgICB0ZXh0OiBzdHJpbmc7XHJcbiAgfTtcclxufVxyXG5cclxuaW50ZXJmYWNlIFNldEhhc2hBY3Rpb24ge1xyXG4gIHR5cGU6ICdTRVRfSEFTSCc7XHJcbiAgcGF5bG9hZDoge1xyXG4gICAgaGFzaDogc3RyaW5nO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEFjdGlvbnMgPVxyXG4gIHwgU2V0TG9jYXRpb25cclxuICB8IFNldFBhdGhuYW1lQWN0aW9uXHJcbiAgfCBTZXRRdWVyeVxyXG4gIHwgU2V0VGFnUXVlcnlBY3Rpb25cclxuICB8IFNldEZyb21BbmRUb1F1ZXJ5QWN0aW9uXHJcbiAgfCBTZXRUeXBlQWN0aW9uXHJcbiAgfCBTZXRUZXh0QWN0aW9uXHJcbiAgfCBTZXRRdWVyeUZpbHRlckFjdGlvblxyXG4gIHwgU2V0SGFzaEFjdGlvbjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlOiBTdGF0ZSwgYWN0aW9uOiBBY3Rpb25zKSB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSAnU0VUX0xPQ0FUSU9OJzoge1xyXG4gICAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICB9XHJcbiAgICBjYXNlICdTRVRfUEFUSE5BTUUnOiB7XHJcbiAgICAgIGlmIChhY3Rpb24ucGF5bG9hZC5wYXRobmFtZSA9PT0gc3RhdGUucGF0aG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgcGF0aG5hbWU6IGFjdGlvbi5wYXlsb2FkLnBhdGhuYW1lLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2FzZSAnU0VUX0hBU0gnOiB7XHJcbiAgICAgIGlmIChhY3Rpb24ucGF5bG9hZC5oYXNoID09PSBzdGF0ZS5oYXNoKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGhhc2g6IGFjdGlvbi5wYXlsb2FkLmhhc2gsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlICdTRVRfUVVFUlknOiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgcXVlcnk6IHtcclxuICAgICAgICAgIC4uLmFjdGlvbi5wYXlsb2FkLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlICdTRVRfVEFHX1FVRVJZJzoge1xyXG4gICAgICBpZiAoYWN0aW9uLnBheWxvYWQudGFnID09PSBzdGF0ZS5xdWVyeS50YWcpIHtcclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgcXVlcnk6IHtcclxuICAgICAgICAgIC4uLnN0YXRlLnF1ZXJ5LFxyXG4gICAgICAgICAgdGFnOiBhY3Rpb24ucGF5bG9hZC50YWcsXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgJ1NFVF9EVVJBVElPTl9RVUVSWSc6IHtcclxuICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkLmR1cmF0aW9uID09PSBzdGF0ZS5xdWVyeS5kdXJhdGlvbikge1xyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBxdWVyeToge1xyXG4gICAgICAgICAgLi4uc3RhdGUucXVlcnksXHJcbiAgICAgICAgICBkdXJhdGlvbjoge1xyXG4gICAgICAgICAgICAuLi5zdGF0ZS5xdWVyeS5kdXJhdGlvbixcclxuICAgICAgICAgICAgLi4uYWN0aW9uLnBheWxvYWQuZHVyYXRpb24sXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlICdTRVRfVFlQRSc6IHtcclxuICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkLnR5cGUgPT09IHN0YXRlLnF1ZXJ5LnR5cGUpIHtcclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgcXVlcnk6IHtcclxuICAgICAgICAgIC4uLnN0YXRlLnF1ZXJ5LFxyXG4gICAgICAgICAgdHlwZTogYWN0aW9uLnBheWxvYWQudHlwZSxcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2FzZSAnU0VUX1RFWFQnOiB7XHJcbiAgICAgIGlmIChhY3Rpb24ucGF5bG9hZC50ZXh0ID09PSBzdGF0ZS5xdWVyeS50ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHF1ZXJ5OiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZS5xdWVyeSxcclxuICAgICAgICAgIHRleHQ6IGFjdGlvbi5wYXlsb2FkLnRleHQsXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgJ1NFVF9RVUVSWV9GSUxURVInOiB7XHJcbiAgICAgIGlmIChhY3Rpb24ucGF5bG9hZCA9PT0gc3RhdGUucXVlcnkuZmlsdGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHF1ZXJ5OiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZS5xdWVyeSxcclxuICAgICAgICAgIGZpbHRlcjogYWN0aW9uLnBheWxvYWQsXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGRlZmF1bHQ6IHtcclxuICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTdGF0ZTogU3RhdGUgPSB7XHJcbiAgcGF0aG5hbWU6ICcvJyxcclxuICBoYXNoOiAnJyxcclxuICBxdWVyeToge1xyXG4gICAgdGFnOiAnJyxcclxuICAgIGR1cmF0aW9uOiBudWxsLFxyXG4gICAgdHlwZTogJycsXHJcbiAgICB0ZXh0OiAnJyxcclxuICAgIGZpbHRlcjogJycsXHJcbiAgfSxcclxufTtcclxuIiwiaW1wb3J0IHttb21lbnR9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbm5hbWVzcGFjZSB1dGlscyB7XHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGdldE5vd1RpbWVTdGFtcCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHBhcnNlSW50KG1vbWVudCgpLmZvcm1hdCgneCcpKTtcclxuICB9XHJcblxyXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRPU1ZlcnNpb24oKTogJ1dpbmRvd3MnIHwgJ01hY09TJyB8ICdMaW51eCcgfCAnVW5rbm93bicge1xyXG4gICAgY29uc3QgYXBwVmVyc2lvbiA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XHJcbiAgICBsZXQgZGV0ZWN0ZWRPUzogJ1dpbmRvd3MnIHwgJ01hY09TJyB8ICdMaW51eCcgfCAnVW5rbm93bicgPSAnVW5rbm93bic7XHJcblxyXG4gICAgaWYgKGFwcFZlcnNpb24uaW5kZXhPZignV2luJykgIT0gLTEpIHtcclxuICAgICAgZGV0ZWN0ZWRPUyA9ICdXaW5kb3dzJztcclxuICAgIH0gZWxzZSBpZiAoYXBwVmVyc2lvbi5pbmRleE9mKCdNYWMnKSAhPSAtMSkge1xyXG4gICAgICBkZXRlY3RlZE9TID0gJ01hY09TJztcclxuICAgIH0gZWxzZSBpZiAoYXBwVmVyc2lvbi5pbmRleE9mKCdMaW51eCcpICE9IC0xKSB7XHJcbiAgICAgIGRldGVjdGVkT1MgPSAnTGludXgnO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkZXRlY3RlZE9TO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWVTdGFtcEJ5RGF0ZSh0OiBEYXRlIHwgbnVtYmVyIHwgc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGlmICh0eXBlb2YgdCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdCA9IHQucmVwbGFjZUFsbCgnLScsICcvJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IERhdGUodCkuZ2V0VGltZSgpO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGdldERhdGVTdGFtcEJ5RGF0ZSh0OiBEYXRlIHwgbnVtYmVyIHwgc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGQgPSBuZXcgRGF0ZShnZXRUaW1lU3RhbXBCeURhdGUodCkpO1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpLCBkLmdldERhdGUoKSkuZ2V0VGltZSgpO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGdldERhdGVTdHJpbmcodDogRGF0ZSB8IG51bWJlciB8IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBkID0gbmV3IERhdGUoZ2V0VGltZVN0YW1wQnlEYXRlKHQpKTtcclxuXHJcbiAgICBjb25zdCB5ZWFyID0gZC5nZXRGdWxsWWVhcigpO1xyXG4gICAgY29uc3QgbW9udGggPSBkLmdldE1vbnRoKCkgKyAxO1xyXG4gICAgY29uc3QgZGF0ZSA9IGQuZ2V0RGF0ZSgpO1xyXG5cclxuICAgIHJldHVybiBgJHt5ZWFyfS8ke21vbnRofS8ke2RhdGV9YDtcclxuICB9XHJcblxyXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRUaW1lU3RyaW5nKHQ6IERhdGUgfCBudW1iZXIgfCBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKGdldFRpbWVTdGFtcEJ5RGF0ZSh0KSk7XHJcblxyXG4gICAgY29uc3QgaG91cnMgPSBkLmdldEhvdXJzKCk7XHJcbiAgICBjb25zdCBtaW5zID0gZC5nZXRNaW51dGVzKCk7XHJcblxyXG4gICAgY29uc3QgaG91cnNTdHIgPSBob3VycyA8IDEwID8gJzAnICsgaG91cnMgOiBob3VycztcclxuICAgIGNvbnN0IG1pbnNTdHIgPSBtaW5zIDwgMTAgPyAnMCcgKyBtaW5zIDogbWlucztcclxuXHJcbiAgICByZXR1cm4gYCR7aG91cnNTdHJ9OiR7bWluc1N0cn1gO1xyXG4gIH1cclxuXHJcbiAgLy8gRm9yIGV4YW1wbGU6IDIwMjEtNC04IDE3OjUyOjE3XHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGdldERhdGVUaW1lU3RyaW5nKHQ6IERhdGUgfCBudW1iZXIgfCBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKGdldFRpbWVTdGFtcEJ5RGF0ZSh0KSk7XHJcblxyXG4gICAgY29uc3QgeWVhciA9IGQuZ2V0RnVsbFllYXIoKTtcclxuICAgIGNvbnN0IG1vbnRoID0gZC5nZXRNb250aCgpICsgMTtcclxuICAgIGNvbnN0IGRhdGUgPSBkLmdldERhdGUoKTtcclxuICAgIGNvbnN0IGhvdXJzID0gZC5nZXRIb3VycygpO1xyXG4gICAgY29uc3QgbWlucyA9IGQuZ2V0TWludXRlcygpO1xyXG4gICAgLy8gY29uc3Qgc2VjcyA9IGQuZ2V0U2Vjb25kcygpO1xyXG5cclxuICAgIGNvbnN0IG1vbnRoU3RyID0gbW9udGggPCAxMCA/ICcwJyArIG1vbnRoIDogbW9udGg7XHJcbiAgICBjb25zdCBkYXRlU3RyID0gZGF0ZSA8IDEwID8gJzAnICsgZGF0ZSA6IGRhdGU7XHJcbiAgICBjb25zdCBob3Vyc1N0ciA9IGhvdXJzIDwgMTAgPyAnMCcgKyBob3VycyA6IGhvdXJzO1xyXG4gICAgY29uc3QgbWluc1N0ciA9IG1pbnMgPCAxMCA/ICcwJyArIG1pbnMgOiBtaW5zO1xyXG4gICAgLy8gY29uc3Qgc2Vjc1N0ciA9IHNlY3MgPCAxMCA/IFwiMFwiICsgc2VjcyA6IHNlY3M7XHJcbiAgICBjb25zdCBzZWNzU3RyID0gJzAwJztcclxuXHJcbiAgICByZXR1cm4gYCR7eWVhcn0vJHttb250aFN0cn0vJHtkYXRlU3RyfSAke2hvdXJzU3RyfToke21pbnNTdHJ9OiR7c2Vjc1N0cn1gO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGRlZHVwZTxUPihkYXRhOiBUW10pOiBUW10ge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChkYXRhKSk7XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gZGVkdXBlT2JqZWN0V2l0aElkPFQgZXh0ZW5kcyB7aWQ6IHN0cmluZ30+KGRhdGE6IFRbXSk6IFRbXSB7XHJcbiAgICBjb25zdCBpZFNldCA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcblxyXG4gICAgZm9yIChjb25zdCBkIG9mIGRhdGEpIHtcclxuICAgICAgaWYgKCFpZFNldC5oYXMoZC5pZCkpIHtcclxuICAgICAgICBpZFNldC5hZGQoZC5pZCk7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goZCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlKGZuOiBGdW5jdGlvblR5cGUsIGRlbGF5OiBudW1iZXIpIHtcclxuICAgIGxldCB0aW1lcjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgaWYgKHRpbWVyKSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZm4sIGRlbGF5KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZm4sIGRlbGF5KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZShmbjogRnVuY3Rpb25UeXBlLCBkZWxheTogbnVtYmVyKSB7XHJcbiAgICBsZXQgdmFsaWQgPSB0cnVlO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGlmICghdmFsaWQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgZm4oKTtcclxuICAgICAgICB2YWxpZCA9IHRydWU7XHJcbiAgICAgIH0sIGRlbGF5KTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtT2JqZWN0VG9QYXJhbXNTdHJpbmcob2JqZWN0OiBLVk9iamVjdCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSBbXTtcclxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpLnNvcnQoKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgIGNvbnN0IHZhbCA9IG9iamVjdFtrZXldO1xyXG4gICAgICBpZiAodmFsKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICBwYXJhbXMucHVzaCguLi50cmFuc2Zvcm1PYmplY3RUb1BhcmFtc1N0cmluZyh2YWwpLnNwbGl0KCcmJykpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwYXJhbXMucHVzaChgJHtrZXl9PSR7dmFsfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwYXJhbXMuam9pbignJicpO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVBhcmFtc1N0cmluZ1RvT2JqZWN0KHBhcmFtc1N0cmluZzogc3RyaW5nKTogS1ZPYmplY3Qge1xyXG4gICAgY29uc3Qgb2JqZWN0OiBLVk9iamVjdCA9IHt9O1xyXG4gICAgY29uc3QgcGFyYW1zID0gcGFyYW1zU3RyaW5nLnNwbGl0KCcmJyk7XHJcblxyXG4gICAgZm9yIChjb25zdCBwIG9mIHBhcmFtcykge1xyXG4gICAgICBjb25zdCBba2V5LCB2YWxdID0gcC5zcGxpdCgnPScpO1xyXG4gICAgICBpZiAoa2V5ICYmIHZhbCkge1xyXG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9iamVjdDtcclxuICB9XHJcblxyXG4gIGV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJPYmplY3ROdWxsS2V5cyhvYmplY3Q6IEtWT2JqZWN0KTogS1ZPYmplY3Qge1xyXG4gICAgaWYgKCFvYmplY3QpIHtcclxuICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZpbmFsT2JqZWN0OiBLVk9iamVjdCA9IHt9O1xyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCkuc29ydCgpO1xyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcclxuICAgICAgY29uc3QgdmFsID0gb2JqZWN0W2tleV07XHJcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGNvbnN0IHRlbXAgPSBmaWx0ZXJPYmplY3ROdWxsS2V5cyhKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHZhbCkpKTtcclxuICAgICAgICBpZiAodGVtcCAmJiBPYmplY3Qua2V5cyh0ZW1wKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBmaW5hbE9iamVjdFtrZXldID0gdGVtcDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgZmluYWxPYmplY3Rba2V5XSA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmluYWxPYmplY3Q7XHJcbiAgfVxyXG5cclxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gY29weVRleHRUb0NsaXBib2FyZCh0ZXh0OiBzdHJpbmcpIHtcclxuICAgIGlmIChuYXZpZ2F0b3IuY2xpcGJvYXJkICYmIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dCk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdDb3B5IHRvIGNsaXBib2FyZCBmYWlsZWQuJywgZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ0NvcHkgdG8gY2xpcGJvYXJkIGZhaWxlZCwgbWV0aG9kcyBub3Qgc3VwcG9ydHMuJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gZ2V0SW1hZ2VTaXplKHNyYzogc3RyaW5nKTogUHJvbWlzZTx7d2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXJ9PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgY29uc3QgaW1nRWwgPSBuZXcgSW1hZ2UoKTtcclxuXHJcbiAgICAgIGltZ0VsLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBpbWdFbDtcclxuXHJcbiAgICAgICAgaWYgKHdpZHRoID4gMCAmJiBoZWlnaHQgPiAwKSB7XHJcbiAgICAgICAgICByZXNvbHZlKHt3aWR0aCwgaGVpZ2h0fSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlc29sdmUoe3dpZHRoOiAwLCBoZWlnaHQ6IDB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBpbWdFbC5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICAgIHJlc29sdmUoe3dpZHRoOiAwLCBoZWlnaHQ6IDB9KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGltZ0VsLmNsYXNzTmFtZSA9ICdoaWRkZW4nO1xyXG4gICAgICBpbWdFbC5zcmMgPSBzcmM7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaW1nRWwpO1xyXG4gICAgICBpbWdFbC5yZW1vdmUoKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXRpbHM7XHJcbiIsImltcG9ydCB1dGlscyBmcm9tICcuLi9oZWxwZXJzL3V0aWxzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGUge1xyXG4gIGV2ZW50czogTW9kZWwuRXZlbnRbXTtcclxuICB0YWdzOiBzdHJpbmdbXTtcclxufVxyXG5cclxuaW50ZXJmYWNlIFNldEV2ZW50c0FjdGlvbiB7XHJcbiAgdHlwZTogJ1NFVF9FVkVOVFMnO1xyXG4gIHBheWxvYWQ6IHtcclxuICAgIGV2ZW50czogTW9kZWwuRXZlbnRbXTtcclxuICB9O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU2V0VGFnc0FjdGlvbiB7XHJcbiAgdHlwZTogJ1NFVF9UQUdTJztcclxuICBwYXlsb2FkOiB7XHJcbiAgICB0YWdzOiBzdHJpbmdbXTtcclxuICB9O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgSW5zZXJ0RXZlbnRBY3Rpb24ge1xyXG4gIHR5cGU6ICdJTlNFUlRfRVZFTlQnO1xyXG4gIHBheWxvYWQ6IHtcclxuICAgIGV2ZW50OiBNb2RlbC5FdmVudDtcclxuICB9O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRGVsZXRlRXZlbnRCeUlkQWN0aW9uIHtcclxuICB0eXBlOiAnREVMRVRFX0VWRU5UX0JZX0lEJztcclxuICBwYXlsb2FkOiB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBFZGl0RXZlbnRCeUlkQWN0aW9uIHtcclxuICB0eXBlOiAnRURJVF9FVkVOVCc7XHJcbiAgcGF5bG9hZDogTW9kZWwuRXZlbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEFjdGlvbnMgPSBTZXRFdmVudHNBY3Rpb24gfCBTZXRUYWdzQWN0aW9uIHwgSW5zZXJ0RXZlbnRBY3Rpb24gfCBEZWxldGVFdmVudEJ5SWRBY3Rpb24gfCBFZGl0RXZlbnRCeUlkQWN0aW9uO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGU6IFN0YXRlLCBhY3Rpb246IEFjdGlvbnMpOiBTdGF0ZSB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSAnU0VUX0VWRU5UUyc6IHtcclxuICAgICAgY29uc3QgZXZlbnRzID0gdXRpbHMuZGVkdXBlT2JqZWN0V2l0aElkKFxyXG4gICAgICAgIGFjdGlvbi5wYXlsb2FkLmV2ZW50cy5zb3J0KFxyXG4gICAgICAgICAgKGEsIGIpID0+IHV0aWxzLmdldFRpbWVTdGFtcEJ5RGF0ZShiLnN0YXJ0KSAtIHV0aWxzLmdldFRpbWVTdGFtcEJ5RGF0ZShhLnN0YXJ0KSxcclxuICAgICAgICApLFxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gY29uc3QgZXZlbnRzID0gYWN0aW9uLnBheWxvYWQuZXZlbnRzLnNvcnQoKGEsIGIpID0+IHV0aWxzLmdldFRpbWVTdGFtcEJ5RGF0ZShiLmNyZWF0ZWRBdCkgLSB1dGlscy5nZXRUaW1lU3RhbXBCeURhdGUoYS5jcmVhdGVkQXQpKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgZXZlbnRzOiBbLi4uZXZlbnRzXSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgJ1NFVF9UQUdTJzoge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHRhZ3M6IGFjdGlvbi5wYXlsb2FkLnRhZ3MsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlICdJTlNFUlRfRVZFTlQnOiB7XHJcbiAgICAgIGNvbnN0IGV2ZW50cyA9IHV0aWxzLmRlZHVwZU9iamVjdFdpdGhJZChcclxuICAgICAgICBbYWN0aW9uLnBheWxvYWQuZXZlbnQsIC4uLnN0YXRlLmV2ZW50c11cclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgZXZlbnRzLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2FzZSAnREVMRVRFX0VWRU5UX0JZX0lEJzoge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGV2ZW50czogWy4uLnN0YXRlLmV2ZW50c10uZmlsdGVyKChldmVudCkgPT4gZXZlbnQuaWQgIT09IGFjdGlvbi5wYXlsb2FkLmlkKSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgJ0VESVRfRVZFTlQnOiB7XHJcbiAgICAgIGNvbnN0IGV2ZW50cyA9IHN0YXRlLmV2ZW50cy5tYXAoKG0pID0+IHtcclxuICAgICAgICBpZiAobS5pZCA9PT0gYWN0aW9uLnBheWxvYWQuaWQpIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLm0sXHJcbiAgICAgICAgICAgIC4uLmFjdGlvbi5wYXlsb2FkLFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgZXZlbnRzLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgZGVmYXVsdDoge1xyXG4gICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZGVmYXVsdFN0YXRlOiBTdGF0ZSA9IHtcclxuICBldmVudHM6IFtdLFxyXG4gIHRhZ3M6IFtdLFxyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBvYnNpZGlhbiA9IHJlcXVpcmUoJ29ic2lkaWFuJyk7XG5cbmNvbnN0IERFRkFVTFRfREFJTFlfTk9URV9GT1JNQVQgPSBcIllZWVktTU0tRERcIjtcbmNvbnN0IERFRkFVTFRfV0VFS0xZX05PVEVfRk9STUFUID0gXCJnZ2dnLVtXXXd3XCI7XG5jb25zdCBERUZBVUxUX01PTlRITFlfTk9URV9GT1JNQVQgPSBcIllZWVktTU1cIjtcbmNvbnN0IERFRkFVTFRfUVVBUlRFUkxZX05PVEVfRk9STUFUID0gXCJZWVlZLVtRXVFcIjtcbmNvbnN0IERFRkFVTFRfWUVBUkxZX05PVEVfRk9STUFUID0gXCJZWVlZXCI7XG5cbmZ1bmN0aW9uIHNob3VsZFVzZVBlcmlvZGljTm90ZXNTZXR0aW5ncyhwZXJpb2RpY2l0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IHdpbmRvdy5hcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKTtcbiAgICByZXR1cm4gcGVyaW9kaWNOb3RlcyAmJiBwZXJpb2RpY05vdGVzLnNldHRpbmdzPy5bcGVyaW9kaWNpdHldPy5lbmFibGVkO1xufVxuLyoqXG4gKiBSZWFkIHRoZSB1c2VyIHNldHRpbmdzIGZvciB0aGUgYGRhaWx5LW5vdGVzYCBwbHVnaW5cbiAqIHRvIGtlZXAgYmVoYXZpb3Igb2YgY3JlYXRpbmcgYSBuZXcgbm90ZSBpbi1zeW5jLlxuICovXG5mdW5jdGlvbiBnZXREYWlseU5vdGVTZXR0aW5ncygpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBjb25zdCB7IGludGVybmFsUGx1Z2lucywgcGx1Z2lucyB9ID0gd2luZG93LmFwcDtcbiAgICAgICAgaWYgKHNob3VsZFVzZVBlcmlvZGljTm90ZXNTZXR0aW5ncyhcImRhaWx5XCIpKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZvcm1hdCwgZm9sZGVyLCB0ZW1wbGF0ZSB9ID0gcGx1Z2lucy5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKT8uc2V0dGluZ3M/LmRhaWx5IHx8IHt9O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IGZvcm1hdCB8fCBERUZBVUxUX0RBSUxZX05PVEVfRk9STUFULFxuICAgICAgICAgICAgICAgIGZvbGRlcjogZm9sZGVyPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGVtcGxhdGU/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGZvbGRlciwgZm9ybWF0LCB0ZW1wbGF0ZSB9ID0gaW50ZXJuYWxQbHVnaW5zLmdldFBsdWdpbkJ5SWQoXCJkYWlseS1ub3Rlc1wiKT8uaW5zdGFuY2U/Lm9wdGlvbnMgfHwge307XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3JtYXQ6IGZvcm1hdCB8fCBERUZBVUxUX0RBSUxZX05PVEVfRk9STUFULFxuICAgICAgICAgICAgZm9sZGVyOiBmb2xkZXI/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmluZm8oXCJObyBjdXN0b20gZGFpbHkgbm90ZSBzZXR0aW5ncyBmb3VuZCFcIiwgZXJyKTtcbiAgICB9XG59XG4vKipcbiAqIFJlYWQgdGhlIHVzZXIgc2V0dGluZ3MgZm9yIHRoZSBgd2Vla2x5LW5vdGVzYCBwbHVnaW5cbiAqIHRvIGtlZXAgYmVoYXZpb3Igb2YgY3JlYXRpbmcgYSBuZXcgbm90ZSBpbi1zeW5jLlxuICovXG5mdW5jdGlvbiBnZXRXZWVrbHlOb3RlU2V0dGluZ3MoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgY29uc3QgcGx1Z2luTWFuYWdlciA9IHdpbmRvdy5hcHAucGx1Z2lucztcbiAgICAgICAgY29uc3QgY2FsZW5kYXJTZXR0aW5ncyA9IHBsdWdpbk1hbmFnZXIuZ2V0UGx1Z2luKFwiY2FsZW5kYXJcIik/Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHBlcmlvZGljTm90ZXNTZXR0aW5ncyA9IHBsdWdpbk1hbmFnZXIuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik/LnNldHRpbmdzPy53ZWVrbHk7XG4gICAgICAgIGlmIChzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MoXCJ3ZWVrbHlcIikpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBwZXJpb2RpY05vdGVzU2V0dGluZ3MuZm9ybWF0IHx8IERFRkFVTFRfV0VFS0xZX05PVEVfRk9STUFULFxuICAgICAgICAgICAgICAgIGZvbGRlcjogcGVyaW9kaWNOb3Rlc1NldHRpbmdzLmZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHBlcmlvZGljTm90ZXNTZXR0aW5ncy50ZW1wbGF0ZT8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gY2FsZW5kYXJTZXR0aW5ncyB8fCB7fTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvcm1hdDogc2V0dGluZ3Mud2Vla2x5Tm90ZUZvcm1hdCB8fCBERUZBVUxUX1dFRUtMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgIGZvbGRlcjogc2V0dGluZ3Mud2Vla2x5Tm90ZUZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogc2V0dGluZ3Mud2Vla2x5Tm90ZVRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmluZm8oXCJObyBjdXN0b20gd2Vla2x5IG5vdGUgc2V0dGluZ3MgZm91bmQhXCIsIGVycik7XG4gICAgfVxufVxuLyoqXG4gKiBSZWFkIHRoZSB1c2VyIHNldHRpbmdzIGZvciB0aGUgYHBlcmlvZGljLW5vdGVzYCBwbHVnaW5cbiAqIHRvIGtlZXAgYmVoYXZpb3Igb2YgY3JlYXRpbmcgYSBuZXcgbm90ZSBpbi1zeW5jLlxuICovXG5mdW5jdGlvbiBnZXRNb250aGx5Tm90ZVNldHRpbmdzKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGx1Z2luTWFuYWdlciA9IHdpbmRvdy5hcHAucGx1Z2lucztcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IChzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MoXCJtb250aGx5XCIpICYmXG4gICAgICAgICAgICBwbHVnaW5NYW5hZ2VyLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpPy5zZXR0aW5ncz8ubW9udGhseSkgfHxcbiAgICAgICAgICAgIHt9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0OiBzZXR0aW5ncy5mb3JtYXQgfHwgREVGQVVMVF9NT05USExZX05PVEVfRk9STUFULFxuICAgICAgICAgICAgZm9sZGVyOiBzZXR0aW5ncy5mb2xkZXI/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IHNldHRpbmdzLnRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmluZm8oXCJObyBjdXN0b20gbW9udGhseSBub3RlIHNldHRpbmdzIGZvdW5kIVwiLCBlcnIpO1xuICAgIH1cbn1cbi8qKlxuICogUmVhZCB0aGUgdXNlciBzZXR0aW5ncyBmb3IgdGhlIGBwZXJpb2RpYy1ub3Rlc2AgcGx1Z2luXG4gKiB0byBrZWVwIGJlaGF2aW9yIG9mIGNyZWF0aW5nIGEgbmV3IG5vdGUgaW4tc3luYy5cbiAqL1xuZnVuY3Rpb24gZ2V0UXVhcnRlcmx5Tm90ZVNldHRpbmdzKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGx1Z2luTWFuYWdlciA9IHdpbmRvdy5hcHAucGx1Z2lucztcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IChzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MoXCJxdWFydGVybHlcIikgJiZcbiAgICAgICAgICAgIHBsdWdpbk1hbmFnZXIuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik/LnNldHRpbmdzPy5xdWFydGVybHkpIHx8XG4gICAgICAgICAgICB7fTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvcm1hdDogc2V0dGluZ3MuZm9ybWF0IHx8IERFRkFVTFRfUVVBUlRFUkxZX05PVEVfRk9STUFULFxuICAgICAgICAgICAgZm9sZGVyOiBzZXR0aW5ncy5mb2xkZXI/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IHNldHRpbmdzLnRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmluZm8oXCJObyBjdXN0b20gcXVhcnRlcmx5IG5vdGUgc2V0dGluZ3MgZm91bmQhXCIsIGVycik7XG4gICAgfVxufVxuLyoqXG4gKiBSZWFkIHRoZSB1c2VyIHNldHRpbmdzIGZvciB0aGUgYHBlcmlvZGljLW5vdGVzYCBwbHVnaW5cbiAqIHRvIGtlZXAgYmVoYXZpb3Igb2YgY3JlYXRpbmcgYSBuZXcgbm90ZSBpbi1zeW5jLlxuICovXG5mdW5jdGlvbiBnZXRZZWFybHlOb3RlU2V0dGluZ3MoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwbHVnaW5NYW5hZ2VyID0gd2luZG93LmFwcC5wbHVnaW5zO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gKHNob3VsZFVzZVBlcmlvZGljTm90ZXNTZXR0aW5ncyhcInllYXJseVwiKSAmJlxuICAgICAgICAgICAgcGx1Z2luTWFuYWdlci5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKT8uc2V0dGluZ3M/LnllYXJseSkgfHxcbiAgICAgICAgICAgIHt9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0OiBzZXR0aW5ncy5mb3JtYXQgfHwgREVGQVVMVF9ZRUFSTFlfTk9URV9GT1JNQVQsXG4gICAgICAgICAgICBmb2xkZXI6IHNldHRpbmdzLmZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogc2V0dGluZ3MudGVtcGxhdGU/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhcIk5vIGN1c3RvbSB5ZWFybHkgbm90ZSBzZXR0aW5ncyBmb3VuZCFcIiwgZXJyKTtcbiAgICB9XG59XG5cbi8vIENyZWRpdDogQGNyZWF0aW9uaXgvcGF0aC5qc1xuZnVuY3Rpb24gam9pbiguLi5wYXJ0U2VnbWVudHMpIHtcbiAgICAvLyBTcGxpdCB0aGUgaW5wdXRzIGludG8gYSBsaXN0IG9mIHBhdGggY29tbWFuZHMuXG4gICAgbGV0IHBhcnRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXJ0U2VnbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcnRzID0gcGFydHMuY29uY2F0KHBhcnRTZWdtZW50c1tpXS5zcGxpdChcIi9cIikpO1xuICAgIH1cbiAgICAvLyBJbnRlcnByZXQgdGhlIHBhdGggY29tbWFuZHMgdG8gZ2V0IHRoZSBuZXcgcmVzb2x2ZWQgcGF0aC5cbiAgICBjb25zdCBuZXdQYXJ0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gcGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXNcbiAgICAgICAgLy8gQWxzbyByZW1vdmUgXCIuXCIgc2VnbWVudHNcbiAgICAgICAgaWYgKCFwYXJ0IHx8IHBhcnQgPT09IFwiLlwiKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIC8vIFB1c2ggbmV3IHBhdGggc2VnbWVudHMuXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG5ld1BhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuICAgIC8vIFByZXNlcnZlIHRoZSBpbml0aWFsIHNsYXNoIGlmIHRoZXJlIHdhcyBvbmUuXG4gICAgaWYgKHBhcnRzWzBdID09PSBcIlwiKVxuICAgICAgICBuZXdQYXJ0cy51bnNoaWZ0KFwiXCIpO1xuICAgIC8vIFR1cm4gYmFjayBpbnRvIGEgc2luZ2xlIHN0cmluZyBwYXRoLlxuICAgIHJldHVybiBuZXdQYXJ0cy5qb2luKFwiL1wiKTtcbn1cbmZ1bmN0aW9uIGJhc2VuYW1lKGZ1bGxQYXRoKSB7XG4gICAgbGV0IGJhc2UgPSBmdWxsUGF0aC5zdWJzdHJpbmcoZnVsbFBhdGgubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XG4gICAgaWYgKGJhc2UubGFzdEluZGV4T2YoXCIuXCIpICE9IC0xKVxuICAgICAgICBiYXNlID0gYmFzZS5zdWJzdHJpbmcoMCwgYmFzZS5sYXN0SW5kZXhPZihcIi5cIikpO1xuICAgIHJldHVybiBiYXNlO1xufVxuYXN5bmMgZnVuY3Rpb24gZW5zdXJlRm9sZGVyRXhpc3RzKHBhdGgpIHtcbiAgICBjb25zdCBkaXJzID0gcGF0aC5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKS5zcGxpdChcIi9cIik7XG4gICAgZGlycy5wb3AoKTsgLy8gcmVtb3ZlIGJhc2VuYW1lXG4gICAgaWYgKGRpcnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGRpciA9IGpvaW4oLi4uZGlycyk7XG4gICAgICAgIGlmICghd2luZG93LmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZGlyKSkge1xuICAgICAgICAgICAgYXdhaXQgd2luZG93LmFwcC52YXVsdC5jcmVhdGVGb2xkZXIoZGlyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGdldE5vdGVQYXRoKGRpcmVjdG9yeSwgZmlsZW5hbWUpIHtcbiAgICBpZiAoIWZpbGVuYW1lLmVuZHNXaXRoKFwiLm1kXCIpKSB7XG4gICAgICAgIGZpbGVuYW1lICs9IFwiLm1kXCI7XG4gICAgfVxuICAgIGNvbnN0IHBhdGggPSBvYnNpZGlhbi5ub3JtYWxpemVQYXRoKGpvaW4oZGlyZWN0b3J5LCBmaWxlbmFtZSkpO1xuICAgIGF3YWl0IGVuc3VyZUZvbGRlckV4aXN0cyhwYXRoKTtcbiAgICByZXR1cm4gcGF0aDtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFRlbXBsYXRlSW5mbyh0ZW1wbGF0ZSkge1xuICAgIGNvbnN0IHsgbWV0YWRhdGFDYWNoZSwgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgdGVtcGxhdGVQYXRoID0gb2JzaWRpYW4ubm9ybWFsaXplUGF0aCh0ZW1wbGF0ZSk7XG4gICAgaWYgKHRlbXBsYXRlUGF0aCA9PT0gXCIvXCIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXCJcIiwgbnVsbF0pO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZUZpbGUgPSBtZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KHRlbXBsYXRlUGF0aCwgXCJcIik7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRzID0gYXdhaXQgdmF1bHQuY2FjaGVkUmVhZCh0ZW1wbGF0ZUZpbGUpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBjb25zdCBJRm9sZEluZm8gPSB3aW5kb3cuYXBwLmZvbGRNYW5hZ2VyLmxvYWQodGVtcGxhdGVGaWxlKTtcbiAgICAgICAgcmV0dXJuIFtjb250ZW50cywgSUZvbGRJbmZvXTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gcmVhZCB0aGUgZGFpbHkgbm90ZSB0ZW1wbGF0ZSAnJHt0ZW1wbGF0ZVBhdGh9J2AsIGVycik7XG4gICAgICAgIG5ldyBvYnNpZGlhbi5Ob3RpY2UoXCJGYWlsZWQgdG8gcmVhZCB0aGUgZGFpbHkgbm90ZSB0ZW1wbGF0ZVwiKTtcbiAgICAgICAgcmV0dXJuIFtcIlwiLCBudWxsXTtcbiAgICB9XG59XG5cbi8qKlxuICogZGF0ZVVJRCBpcyBhIHdheSBvZiB3ZWVrbHkgaWRlbnRpZnlpbmcgZGFpbHkvd2Vla2x5L21vbnRobHkgbm90ZXMuXG4gKiBUaGV5IGFyZSBwcmVmaXhlZCB3aXRoIHRoZSBncmFudWxhcml0eSB0byBhdm9pZCBhbWJpZ3VpdHkuXG4gKi9cbmZ1bmN0aW9uIGdldERhdGVVSUQoZGF0ZSwgZ3JhbnVsYXJpdHkgPSBcImRheVwiKSB7XG4gICAgY29uc3QgdHMgPSBkYXRlLmNsb25lKCkuc3RhcnRPZihncmFudWxhcml0eSkuZm9ybWF0KCk7XG4gICAgcmV0dXJuIGAke2dyYW51bGFyaXR5fS0ke3RzfWA7XG59XG5mdW5jdGlvbiByZW1vdmVFc2NhcGVkQ2hhcmFjdGVycyhmb3JtYXQpIHtcbiAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1xcW1teXFxdXSpcXF0vZywgXCJcIik7IC8vIHJlbW92ZSBldmVyeXRoaW5nIHdpdGhpbiBicmFja2V0c1xufVxuLyoqXG4gKiBYWFg6IFdoZW4gcGFyc2luZyBkYXRlcyB0aGF0IGNvbnRhaW4gYm90aCB3ZWVrIG51bWJlcnMgYW5kIG1vbnRocyxcbiAqIE1vbWVudCBjaG9zZXMgdG8gaWdub3JlIHRoZSB3ZWVrIG51bWJlcnMuIEZvciB0aGUgd2VlayBkYXRlVUlELCB3ZVxuICogd2FudCB0aGUgb3Bwb3NpdGUgYmVoYXZpb3IuIFN0cmlwIHRoZSBNTU0gZnJvbSB0aGUgZm9ybWF0IHRvIHBhdGNoLlxuICovXG5mdW5jdGlvbiBpc0Zvcm1hdEFtYmlndW91cyhmb3JtYXQsIGdyYW51bGFyaXR5KSB7XG4gICAgaWYgKGdyYW51bGFyaXR5ID09PSBcIndlZWtcIikge1xuICAgICAgICBjb25zdCBjbGVhbkZvcm1hdCA9IHJlbW92ZUVzY2FwZWRDaGFyYWN0ZXJzKGZvcm1hdCk7XG4gICAgICAgIHJldHVybiAoL3d7MSwyfS9pLnRlc3QoY2xlYW5Gb3JtYXQpICYmXG4gICAgICAgICAgICAoL017MSw0fS8udGVzdChjbGVhbkZvcm1hdCkgfHwgL0R7MSw0fS8udGVzdChjbGVhbkZvcm1hdCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZ2V0RGF0ZUZyb21GaWxlKGZpbGUsIGdyYW51bGFyaXR5KSB7XG4gICAgcmV0dXJuIGdldERhdGVGcm9tRmlsZW5hbWUoZmlsZS5iYXNlbmFtZSwgZ3JhbnVsYXJpdHkpO1xufVxuZnVuY3Rpb24gZ2V0RGF0ZUZyb21QYXRoKHBhdGgsIGdyYW51bGFyaXR5KSB7XG4gICAgcmV0dXJuIGdldERhdGVGcm9tRmlsZW5hbWUoYmFzZW5hbWUocGF0aCksIGdyYW51bGFyaXR5KTtcbn1cbmZ1bmN0aW9uIGdldERhdGVGcm9tRmlsZW5hbWUoZmlsZW5hbWUsIGdyYW51bGFyaXR5KSB7XG4gICAgY29uc3QgZ2V0U2V0dGluZ3MgPSB7XG4gICAgICAgIGRheTogZ2V0RGFpbHlOb3RlU2V0dGluZ3MsXG4gICAgICAgIHdlZWs6IGdldFdlZWtseU5vdGVTZXR0aW5ncyxcbiAgICAgICAgbW9udGg6IGdldE1vbnRobHlOb3RlU2V0dGluZ3MsXG4gICAgICAgIHF1YXJ0ZXI6IGdldFF1YXJ0ZXJseU5vdGVTZXR0aW5ncyxcbiAgICAgICAgeWVhcjogZ2V0WWVhcmx5Tm90ZVNldHRpbmdzLFxuICAgIH07XG4gICAgY29uc3QgZm9ybWF0ID0gZ2V0U2V0dGluZ3NbZ3JhbnVsYXJpdHldKCkuZm9ybWF0LnNwbGl0KFwiL1wiKS5wb3AoKTtcbiAgICBjb25zdCBub3RlRGF0ZSA9IHdpbmRvdy5tb21lbnQoZmlsZW5hbWUsIGZvcm1hdCwgdHJ1ZSk7XG4gICAgaWYgKCFub3RlRGF0ZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpc0Zvcm1hdEFtYmlndW91cyhmb3JtYXQsIGdyYW51bGFyaXR5KSkge1xuICAgICAgICBpZiAoZ3JhbnVsYXJpdHkgPT09IFwid2Vla1wiKSB7XG4gICAgICAgICAgICBjb25zdCBjbGVhbkZvcm1hdCA9IHJlbW92ZUVzY2FwZWRDaGFyYWN0ZXJzKGZvcm1hdCk7XG4gICAgICAgICAgICBpZiAoL3d7MSwyfS9pLnRlc3QoY2xlYW5Gb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5tb21lbnQoZmlsZW5hbWUsIFxuICAgICAgICAgICAgICAgIC8vIElmIGZvcm1hdCBjb250YWlucyB3ZWVrLCByZW1vdmUgZGF5ICYgbW9udGggZm9ybWF0dGluZ1xuICAgICAgICAgICAgICAgIGZvcm1hdC5yZXBsYWNlKC9NezEsNH0vZywgXCJcIikucmVwbGFjZSgvRHsxLDR9L2csIFwiXCIpLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vdGVEYXRlO1xufVxuXG5jbGFzcyBEYWlseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIG1pbWljcyB0aGUgYmVoYXZpb3Igb2YgdGhlIGRhaWx5LW5vdGVzIHBsdWdpblxuICogc28gaXQgd2lsbCByZXBsYWNlIHt7ZGF0ZX19LCB7e3RpdGxlfX0sIGFuZCB7e3RpbWV9fSB3aXRoIHRoZVxuICogZm9ybWF0dGVkIHRpbWVzdGFtcC5cbiAqXG4gKiBOb3RlOiBpdCBoYXMgYW4gYWRkZWQgYm9udXMgdGhhdCBpdCdzIG5vdCAndG9kYXknIHNwZWNpZmljLlxuICovXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVEYWlseU5vdGUoZGF0ZSkge1xuICAgIGNvbnN0IGFwcCA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyB2YXVsdCB9ID0gYXBwO1xuICAgIGNvbnN0IG1vbWVudCA9IHdpbmRvdy5tb21lbnQ7XG4gICAgY29uc3QgeyB0ZW1wbGF0ZSwgZm9ybWF0LCBmb2xkZXIgfSA9IGdldERhaWx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgW3RlbXBsYXRlQ29udGVudHMsIElGb2xkSW5mb10gPSBhd2FpdCBnZXRUZW1wbGF0ZUluZm8odGVtcGxhdGUpO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gZGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICBjb25zdCBub3JtYWxpemVkUGF0aCA9IGF3YWl0IGdldE5vdGVQYXRoKGZvbGRlciwgZmlsZW5hbWUpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWRGaWxlID0gYXdhaXQgdmF1bHQuY3JlYXRlKG5vcm1hbGl6ZWRQYXRoLCB0ZW1wbGF0ZUNvbnRlbnRzXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqZGF0ZVxccyp9fS9naSwgZmlsZW5hbWUpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGltZVxccyp9fS9naSwgbW9tZW50KCkuZm9ybWF0KFwiSEg6bW1cIikpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGl0bGVcXHMqfX0vZ2ksIGZpbGVuYW1lKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKihkYXRlfHRpbWUpXFxzKigoWystXVxcZCspKFt5cW13ZGhzXSkpP1xccyooOi4rPyk/fX0vZ2ksIChfLCBfdGltZU9yRGF0ZSwgY2FsYywgdGltZURlbHRhLCB1bml0LCBtb21lbnRGb3JtYXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IG1vbWVudCgpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBkYXRlLmNsb25lKCkuc2V0KHtcbiAgICAgICAgICAgICAgICBob3VyOiBub3cuZ2V0KFwiaG91clwiKSxcbiAgICAgICAgICAgICAgICBtaW51dGU6IG5vdy5nZXQoXCJtaW51dGVcIiksXG4gICAgICAgICAgICAgICAgc2Vjb25kOiBub3cuZ2V0KFwic2Vjb25kXCIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY2FsYykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlLmFkZChwYXJzZUludCh0aW1lRGVsdGEsIDEwKSwgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9tZW50Rm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChtb21lbnRGb3JtYXQuc3Vic3RyaW5nKDEpLnRyaW0oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqeWVzdGVyZGF5XFxzKn19L2dpLCBkYXRlLmNsb25lKCkuc3VidHJhY3QoMSwgXCJkYXlcIikuZm9ybWF0KGZvcm1hdCkpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdG9tb3Jyb3dcXHMqfX0vZ2ksIGRhdGUuY2xvbmUoKS5hZGQoMSwgXCJkXCIpLmZvcm1hdChmb3JtYXQpKSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGFwcC5mb2xkTWFuYWdlci5zYXZlKGNyZWF0ZWRGaWxlLCBJRm9sZEluZm8pO1xuICAgICAgICByZXR1cm4gY3JlYXRlZEZpbGU7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBmaWxlOiAnJHtub3JtYWxpemVkUGF0aH0nYCwgZXJyKTtcbiAgICAgICAgbmV3IG9ic2lkaWFuLk5vdGljZShcIlVuYWJsZSB0byBjcmVhdGUgbmV3IGZpbGUuXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldERhaWx5Tm90ZShkYXRlLCBkYWlseU5vdGVzKSB7XG4gICAgcmV0dXJuIGRhaWx5Tm90ZXNbZ2V0RGF0ZVVJRChkYXRlLCBcImRheVwiKV0gPz8gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEFsbERhaWx5Tm90ZXMoKSB7XG4gICAgLyoqXG4gICAgICogRmluZCBhbGwgZGFpbHkgbm90ZXMgaW4gdGhlIGRhaWx5IG5vdGUgZm9sZGVyXG4gICAgICovXG4gICAgY29uc3QgeyB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB7IGZvbGRlciB9ID0gZ2V0RGFpbHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCBkYWlseU5vdGVzRm9sZGVyID0gdmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoZm9sZGVyKSk7XG4gICAgaWYgKCFkYWlseU5vdGVzRm9sZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBEYWlseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yKFwiRmFpbGVkIHRvIGZpbmQgZGFpbHkgbm90ZXMgZm9sZGVyXCIpO1xuICAgIH1cbiAgICBjb25zdCBkYWlseU5vdGVzID0ge307XG4gICAgb2JzaWRpYW4uVmF1bHQucmVjdXJzZUNoaWxkcmVuKGRhaWx5Tm90ZXNGb2xkZXIsIChub3RlKSA9PiB7XG4gICAgICAgIGlmIChub3RlIGluc3RhbmNlb2Ygb2JzaWRpYW4uVEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBnZXREYXRlRnJvbUZpbGUobm90ZSwgXCJkYXlcIik7XG4gICAgICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBnZXREYXRlVUlEKGRhdGUsIFwiZGF5XCIpO1xuICAgICAgICAgICAgICAgIGRhaWx5Tm90ZXNbZGF0ZVN0cmluZ10gPSBub3RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhaWx5Tm90ZXM7XG59XG5cbmNsYXNzIFdlZWtseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuZnVuY3Rpb24gZ2V0RGF5c09mV2VlaygpIHtcbiAgICBjb25zdCB7IG1vbWVudCB9ID0gd2luZG93O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgbGV0IHdlZWtTdGFydCA9IG1vbWVudC5sb2NhbGVEYXRhKCkuX3dlZWsuZG93O1xuICAgIGNvbnN0IGRheXNPZldlZWsgPSBbXG4gICAgICAgIFwic3VuZGF5XCIsXG4gICAgICAgIFwibW9uZGF5XCIsXG4gICAgICAgIFwidHVlc2RheVwiLFxuICAgICAgICBcIndlZG5lc2RheVwiLFxuICAgICAgICBcInRodXJzZGF5XCIsXG4gICAgICAgIFwiZnJpZGF5XCIsXG4gICAgICAgIFwic2F0dXJkYXlcIixcbiAgICBdO1xuICAgIHdoaWxlICh3ZWVrU3RhcnQpIHtcbiAgICAgICAgZGF5c09mV2Vlay5wdXNoKGRheXNPZldlZWsuc2hpZnQoKSk7XG4gICAgICAgIHdlZWtTdGFydC0tO1xuICAgIH1cbiAgICByZXR1cm4gZGF5c09mV2Vlaztcbn1cbmZ1bmN0aW9uIGdldERheU9mV2Vla051bWVyaWNhbFZhbHVlKGRheU9mV2Vla05hbWUpIHtcbiAgICByZXR1cm4gZ2V0RGF5c09mV2VlaygpLmluZGV4T2YoZGF5T2ZXZWVrTmFtZS50b0xvd2VyQ2FzZSgpKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVdlZWtseU5vdGUoZGF0ZSkge1xuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyB0ZW1wbGF0ZSwgZm9ybWF0LCBmb2xkZXIgfSA9IGdldFdlZWtseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IFt0ZW1wbGF0ZUNvbnRlbnRzLCBJRm9sZEluZm9dID0gYXdhaXQgZ2V0VGVtcGxhdGVJbmZvKHRlbXBsYXRlKTtcbiAgICBjb25zdCBmaWxlbmFtZSA9IGRhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgY29uc3Qgbm9ybWFsaXplZFBhdGggPSBhd2FpdCBnZXROb3RlUGF0aChmb2xkZXIsIGZpbGVuYW1lKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjcmVhdGVkRmlsZSA9IGF3YWl0IHZhdWx0LmNyZWF0ZShub3JtYWxpemVkUGF0aCwgdGVtcGxhdGVDb250ZW50c1xuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKihkYXRlfHRpbWUpXFxzKigoWystXVxcZCspKFt5cW13ZGhzXSkpP1xccyooOi4rPyk/fX0vZ2ksIChfLCBfdGltZU9yRGF0ZSwgY2FsYywgdGltZURlbHRhLCB1bml0LCBtb21lbnRGb3JtYXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IHdpbmRvdy5tb21lbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gZGF0ZS5jbG9uZSgpLnNldCh7XG4gICAgICAgICAgICAgICAgaG91cjogbm93LmdldChcImhvdXJcIiksXG4gICAgICAgICAgICAgICAgbWludXRlOiBub3cuZ2V0KFwibWludXRlXCIpLFxuICAgICAgICAgICAgICAgIHNlY29uZDogbm93LmdldChcInNlY29uZFwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNhbGMpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZS5hZGQocGFyc2VJbnQodGltZURlbHRhLCAxMCksIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vbWVudEZvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQobW9tZW50Rm9ybWF0LnN1YnN0cmluZygxKS50cmltKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpdGxlXFxzKn19L2dpLCBmaWxlbmFtZSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aW1lXFxzKn19L2dpLCB3aW5kb3cubW9tZW50KCkuZm9ybWF0KFwiSEg6bW1cIikpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KVxccyo6KC4qPyl9fS9naSwgKF8sIGRheU9mV2VlaywgbW9tZW50Rm9ybWF0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXkgPSBnZXREYXlPZldlZWtOdW1lcmljYWxWYWx1ZShkYXlPZldlZWspO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGUud2Vla2RheShkYXkpLmZvcm1hdChtb21lbnRGb3JtYXQudHJpbSgpKTtcbiAgICAgICAgfSkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cuYXBwLmZvbGRNYW5hZ2VyLnNhdmUoY3JlYXRlZEZpbGUsIElGb2xkSW5mbyk7XG4gICAgICAgIHJldHVybiBjcmVhdGVkRmlsZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGZpbGU6ICcke25vcm1hbGl6ZWRQYXRofSdgLCBlcnIpO1xuICAgICAgICBuZXcgb2JzaWRpYW4uTm90aWNlKFwiVW5hYmxlIHRvIGNyZWF0ZSBuZXcgZmlsZS5cIik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0V2Vla2x5Tm90ZShkYXRlLCB3ZWVrbHlOb3Rlcykge1xuICAgIHJldHVybiB3ZWVrbHlOb3Rlc1tnZXREYXRlVUlEKGRhdGUsIFwid2Vla1wiKV0gPz8gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEFsbFdlZWtseU5vdGVzKCkge1xuICAgIGNvbnN0IHdlZWtseU5vdGVzID0ge307XG4gICAgaWYgKCFhcHBIYXNXZWVrbHlOb3Rlc1BsdWdpbkxvYWRlZCgpKSB7XG4gICAgICAgIHJldHVybiB3ZWVrbHlOb3RlcztcbiAgICB9XG4gICAgY29uc3QgeyB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB7IGZvbGRlciB9ID0gZ2V0V2Vla2x5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3Qgd2Vla2x5Tm90ZXNGb2xkZXIgPSB2YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgob2JzaWRpYW4ubm9ybWFsaXplUGF0aChmb2xkZXIpKTtcbiAgICBpZiAoIXdlZWtseU5vdGVzRm9sZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBXZWVrbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvcihcIkZhaWxlZCB0byBmaW5kIHdlZWtseSBub3RlcyBmb2xkZXJcIik7XG4gICAgfVxuICAgIG9ic2lkaWFuLlZhdWx0LnJlY3Vyc2VDaGlsZHJlbih3ZWVrbHlOb3Rlc0ZvbGRlciwgKG5vdGUpID0+IHtcbiAgICAgICAgaWYgKG5vdGUgaW5zdGFuY2VvZiBvYnNpZGlhbi5URmlsZSkge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGdldERhdGVGcm9tRmlsZShub3RlLCBcIndlZWtcIik7XG4gICAgICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBnZXREYXRlVUlEKGRhdGUsIFwid2Vla1wiKTtcbiAgICAgICAgICAgICAgICB3ZWVrbHlOb3Rlc1tkYXRlU3RyaW5nXSA9IG5vdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gd2Vla2x5Tm90ZXM7XG59XG5cbmNsYXNzIE1vbnRobHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBtaW1pY3MgdGhlIGJlaGF2aW9yIG9mIHRoZSBkYWlseS1ub3RlcyBwbHVnaW5cbiAqIHNvIGl0IHdpbGwgcmVwbGFjZSB7e2RhdGV9fSwge3t0aXRsZX19LCBhbmQge3t0aW1lfX0gd2l0aCB0aGVcbiAqIGZvcm1hdHRlZCB0aW1lc3RhbXAuXG4gKlxuICogTm90ZTogaXQgaGFzIGFuIGFkZGVkIGJvbnVzIHRoYXQgaXQncyBub3QgJ3RvZGF5JyBzcGVjaWZpYy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlTW9udGhseU5vdGUoZGF0ZSkge1xuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyB0ZW1wbGF0ZSwgZm9ybWF0LCBmb2xkZXIgfSA9IGdldE1vbnRobHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCBbdGVtcGxhdGVDb250ZW50cywgSUZvbGRJbmZvXSA9IGF3YWl0IGdldFRlbXBsYXRlSW5mbyh0ZW1wbGF0ZSk7XG4gICAgY29uc3QgZmlsZW5hbWUgPSBkYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gYXdhaXQgZ2V0Tm90ZVBhdGgoZm9sZGVyLCBmaWxlbmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3JlYXRlZEZpbGUgPSBhd2FpdCB2YXVsdC5jcmVhdGUobm9ybWFsaXplZFBhdGgsIHRlbXBsYXRlQ29udGVudHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyooZGF0ZXx0aW1lKVxccyooKFsrLV1cXGQrKShbeXFtd2Roc10pKT9cXHMqKDouKz8pP319L2dpLCAoXywgX3RpbWVPckRhdGUsIGNhbGMsIHRpbWVEZWx0YSwgdW5pdCwgbW9tZW50Rm9ybWF0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSB3aW5kb3cubW9tZW50KCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IGRhdGUuY2xvbmUoKS5zZXQoe1xuICAgICAgICAgICAgICAgIGhvdXI6IG5vdy5nZXQoXCJob3VyXCIpLFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogbm93LmdldChcIm1pbnV0ZVwiKSxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6IG5vdy5nZXQoXCJzZWNvbmRcIiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjYWxjKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGUuYWRkKHBhcnNlSW50KHRpbWVEZWx0YSwgMTApLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb21lbnRGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KG1vbWVudEZvcm1hdC5zdWJzdHJpbmcoMSkudHJpbSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccypkYXRlXFxzKn19L2dpLCBmaWxlbmFtZSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aW1lXFxzKn19L2dpLCB3aW5kb3cubW9tZW50KCkuZm9ybWF0KFwiSEg6bW1cIikpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGl0bGVcXHMqfX0vZ2ksIGZpbGVuYW1lKSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHdpbmRvdy5hcHAuZm9sZE1hbmFnZXIuc2F2ZShjcmVhdGVkRmlsZSwgSUZvbGRJbmZvKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZWRGaWxlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgZmlsZTogJyR7bm9ybWFsaXplZFBhdGh9J2AsIGVycik7XG4gICAgICAgIG5ldyBvYnNpZGlhbi5Ob3RpY2UoXCJVbmFibGUgdG8gY3JlYXRlIG5ldyBmaWxlLlwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRNb250aGx5Tm90ZShkYXRlLCBtb250aGx5Tm90ZXMpIHtcbiAgICByZXR1cm4gbW9udGhseU5vdGVzW2dldERhdGVVSUQoZGF0ZSwgXCJtb250aFwiKV0gPz8gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEFsbE1vbnRobHlOb3RlcygpIHtcbiAgICBjb25zdCBtb250aGx5Tm90ZXMgPSB7fTtcbiAgICBpZiAoIWFwcEhhc01vbnRobHlOb3Rlc1BsdWdpbkxvYWRlZCgpKSB7XG4gICAgICAgIHJldHVybiBtb250aGx5Tm90ZXM7XG4gICAgfVxuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyBmb2xkZXIgfSA9IGdldE1vbnRobHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCBtb250aGx5Tm90ZXNGb2xkZXIgPSB2YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgob2JzaWRpYW4ubm9ybWFsaXplUGF0aChmb2xkZXIpKTtcbiAgICBpZiAoIW1vbnRobHlOb3Rlc0ZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgTW9udGhseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yKFwiRmFpbGVkIHRvIGZpbmQgbW9udGhseSBub3RlcyBmb2xkZXJcIik7XG4gICAgfVxuICAgIG9ic2lkaWFuLlZhdWx0LnJlY3Vyc2VDaGlsZHJlbihtb250aGx5Tm90ZXNGb2xkZXIsIChub3RlKSA9PiB7XG4gICAgICAgIGlmIChub3RlIGluc3RhbmNlb2Ygb2JzaWRpYW4uVEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBnZXREYXRlRnJvbUZpbGUobm90ZSwgXCJtb250aFwiKTtcbiAgICAgICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IGdldERhdGVVSUQoZGF0ZSwgXCJtb250aFwiKTtcbiAgICAgICAgICAgICAgICBtb250aGx5Tm90ZXNbZGF0ZVN0cmluZ10gPSBub3RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1vbnRobHlOb3Rlcztcbn1cblxuY2xhc3MgUXVhcnRlcmx5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gbWltaWNzIHRoZSBiZWhhdmlvciBvZiB0aGUgZGFpbHktbm90ZXMgcGx1Z2luXG4gKiBzbyBpdCB3aWxsIHJlcGxhY2Uge3tkYXRlfX0sIHt7dGl0bGV9fSwgYW5kIHt7dGltZX19IHdpdGggdGhlXG4gKiBmb3JtYXR0ZWQgdGltZXN0YW1wLlxuICpcbiAqIE5vdGU6IGl0IGhhcyBhbiBhZGRlZCBib251cyB0aGF0IGl0J3Mgbm90ICd0b2RheScgc3BlY2lmaWMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVF1YXJ0ZXJseU5vdGUoZGF0ZSkge1xuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyB0ZW1wbGF0ZSwgZm9ybWF0LCBmb2xkZXIgfSA9IGdldFF1YXJ0ZXJseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IFt0ZW1wbGF0ZUNvbnRlbnRzLCBJRm9sZEluZm9dID0gYXdhaXQgZ2V0VGVtcGxhdGVJbmZvKHRlbXBsYXRlKTtcbiAgICBjb25zdCBmaWxlbmFtZSA9IGRhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgY29uc3Qgbm9ybWFsaXplZFBhdGggPSBhd2FpdCBnZXROb3RlUGF0aChmb2xkZXIsIGZpbGVuYW1lKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjcmVhdGVkRmlsZSA9IGF3YWl0IHZhdWx0LmNyZWF0ZShub3JtYWxpemVkUGF0aCwgdGVtcGxhdGVDb250ZW50c1xuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKihkYXRlfHRpbWUpXFxzKigoWystXVxcZCspKFt5cW13ZGhzXSkpP1xccyooOi4rPyk/fX0vZ2ksIChfLCBfdGltZU9yRGF0ZSwgY2FsYywgdGltZURlbHRhLCB1bml0LCBtb21lbnRGb3JtYXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IHdpbmRvdy5tb21lbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gZGF0ZS5jbG9uZSgpLnNldCh7XG4gICAgICAgICAgICAgICAgaG91cjogbm93LmdldChcImhvdXJcIiksXG4gICAgICAgICAgICAgICAgbWludXRlOiBub3cuZ2V0KFwibWludXRlXCIpLFxuICAgICAgICAgICAgICAgIHNlY29uZDogbm93LmdldChcInNlY29uZFwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNhbGMpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZS5hZGQocGFyc2VJbnQodGltZURlbHRhLCAxMCksIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vbWVudEZvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQobW9tZW50Rm9ybWF0LnN1YnN0cmluZygxKS50cmltKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKmRhdGVcXHMqfX0vZ2ksIGZpbGVuYW1lKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpbWVcXHMqfX0vZ2ksIHdpbmRvdy5tb21lbnQoKS5mb3JtYXQoXCJISDptbVwiKSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aXRsZVxccyp9fS9naSwgZmlsZW5hbWUpKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgd2luZG93LmFwcC5mb2xkTWFuYWdlci5zYXZlKGNyZWF0ZWRGaWxlLCBJRm9sZEluZm8pO1xuICAgICAgICByZXR1cm4gY3JlYXRlZEZpbGU7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBmaWxlOiAnJHtub3JtYWxpemVkUGF0aH0nYCwgZXJyKTtcbiAgICAgICAgbmV3IG9ic2lkaWFuLk5vdGljZShcIlVuYWJsZSB0byBjcmVhdGUgbmV3IGZpbGUuXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFF1YXJ0ZXJseU5vdGUoZGF0ZSwgcXVhcnRlcmx5KSB7XG4gICAgcmV0dXJuIHF1YXJ0ZXJseVtnZXREYXRlVUlEKGRhdGUsIFwicXVhcnRlclwiKV0gPz8gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEFsbFF1YXJ0ZXJseU5vdGVzKCkge1xuICAgIGNvbnN0IHF1YXJ0ZXJseSA9IHt9O1xuICAgIGlmICghYXBwSGFzUXVhcnRlcmx5Tm90ZXNQbHVnaW5Mb2FkZWQoKSkge1xuICAgICAgICByZXR1cm4gcXVhcnRlcmx5O1xuICAgIH1cbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgZm9sZGVyIH0gPSBnZXRRdWFydGVybHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCBxdWFydGVybHlGb2xkZXIgPSB2YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgob2JzaWRpYW4ubm9ybWFsaXplUGF0aChmb2xkZXIpKTtcbiAgICBpZiAoIXF1YXJ0ZXJseUZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgUXVhcnRlcmx5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IoXCJGYWlsZWQgdG8gZmluZCBxdWFydGVybHkgbm90ZXMgZm9sZGVyXCIpO1xuICAgIH1cbiAgICBvYnNpZGlhbi5WYXVsdC5yZWN1cnNlQ2hpbGRyZW4ocXVhcnRlcmx5Rm9sZGVyLCAobm90ZSkgPT4ge1xuICAgICAgICBpZiAobm90ZSBpbnN0YW5jZW9mIG9ic2lkaWFuLlRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZ2V0RGF0ZUZyb21GaWxlKG5vdGUsIFwicXVhcnRlclwiKTtcbiAgICAgICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IGdldERhdGVVSUQoZGF0ZSwgXCJxdWFydGVyXCIpO1xuICAgICAgICAgICAgICAgIHF1YXJ0ZXJseVtkYXRlU3RyaW5nXSA9IG5vdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcXVhcnRlcmx5O1xufVxuXG5jbGFzcyBZZWFybHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBtaW1pY3MgdGhlIGJlaGF2aW9yIG9mIHRoZSBkYWlseS1ub3RlcyBwbHVnaW5cbiAqIHNvIGl0IHdpbGwgcmVwbGFjZSB7e2RhdGV9fSwge3t0aXRsZX19LCBhbmQge3t0aW1lfX0gd2l0aCB0aGVcbiAqIGZvcm1hdHRlZCB0aW1lc3RhbXAuXG4gKlxuICogTm90ZTogaXQgaGFzIGFuIGFkZGVkIGJvbnVzIHRoYXQgaXQncyBub3QgJ3RvZGF5JyBzcGVjaWZpYy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlWWVhcmx5Tm90ZShkYXRlKSB7XG4gICAgY29uc3QgeyB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB7IHRlbXBsYXRlLCBmb3JtYXQsIGZvbGRlciB9ID0gZ2V0WWVhcmx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgW3RlbXBsYXRlQ29udGVudHMsIElGb2xkSW5mb10gPSBhd2FpdCBnZXRUZW1wbGF0ZUluZm8odGVtcGxhdGUpO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gZGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICBjb25zdCBub3JtYWxpemVkUGF0aCA9IGF3YWl0IGdldE5vdGVQYXRoKGZvbGRlciwgZmlsZW5hbWUpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWRGaWxlID0gYXdhaXQgdmF1bHQuY3JlYXRlKG5vcm1hbGl6ZWRQYXRoLCB0ZW1wbGF0ZUNvbnRlbnRzXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqKGRhdGV8dGltZSlcXHMqKChbKy1dXFxkKykoW3lxbXdkaHNdKSk/XFxzKig6Lis/KT99fS9naSwgKF8sIF90aW1lT3JEYXRlLCBjYWxjLCB0aW1lRGVsdGEsIHVuaXQsIG1vbWVudEZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gd2luZG93Lm1vbWVudCgpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBkYXRlLmNsb25lKCkuc2V0KHtcbiAgICAgICAgICAgICAgICBob3VyOiBub3cuZ2V0KFwiaG91clwiKSxcbiAgICAgICAgICAgICAgICBtaW51dGU6IG5vdy5nZXQoXCJtaW51dGVcIiksXG4gICAgICAgICAgICAgICAgc2Vjb25kOiBub3cuZ2V0KFwic2Vjb25kXCIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY2FsYykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlLmFkZChwYXJzZUludCh0aW1lRGVsdGEsIDEwKSwgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9tZW50Rm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChtb21lbnRGb3JtYXQuc3Vic3RyaW5nKDEpLnRyaW0oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqZGF0ZVxccyp9fS9naSwgZmlsZW5hbWUpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGltZVxccyp9fS9naSwgd2luZG93Lm1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpdGxlXFxzKn19L2dpLCBmaWxlbmFtZSkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cuYXBwLmZvbGRNYW5hZ2VyLnNhdmUoY3JlYXRlZEZpbGUsIElGb2xkSW5mbyk7XG4gICAgICAgIHJldHVybiBjcmVhdGVkRmlsZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGZpbGU6ICcke25vcm1hbGl6ZWRQYXRofSdgLCBlcnIpO1xuICAgICAgICBuZXcgb2JzaWRpYW4uTm90aWNlKFwiVW5hYmxlIHRvIGNyZWF0ZSBuZXcgZmlsZS5cIik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0WWVhcmx5Tm90ZShkYXRlLCB5ZWFybHlOb3Rlcykge1xuICAgIHJldHVybiB5ZWFybHlOb3Rlc1tnZXREYXRlVUlEKGRhdGUsIFwieWVhclwiKV0gPz8gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEFsbFllYXJseU5vdGVzKCkge1xuICAgIGNvbnN0IHllYXJseU5vdGVzID0ge307XG4gICAgaWYgKCFhcHBIYXNZZWFybHlOb3Rlc1BsdWdpbkxvYWRlZCgpKSB7XG4gICAgICAgIHJldHVybiB5ZWFybHlOb3RlcztcbiAgICB9XG4gICAgY29uc3QgeyB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB7IGZvbGRlciB9ID0gZ2V0WWVhcmx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgeWVhcmx5Tm90ZXNGb2xkZXIgPSB2YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgob2JzaWRpYW4ubm9ybWFsaXplUGF0aChmb2xkZXIpKTtcbiAgICBpZiAoIXllYXJseU5vdGVzRm9sZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBZZWFybHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvcihcIkZhaWxlZCB0byBmaW5kIHllYXJseSBub3RlcyBmb2xkZXJcIik7XG4gICAgfVxuICAgIG9ic2lkaWFuLlZhdWx0LnJlY3Vyc2VDaGlsZHJlbih5ZWFybHlOb3Rlc0ZvbGRlciwgKG5vdGUpID0+IHtcbiAgICAgICAgaWYgKG5vdGUgaW5zdGFuY2VvZiBvYnNpZGlhbi5URmlsZSkge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGdldERhdGVGcm9tRmlsZShub3RlLCBcInllYXJcIik7XG4gICAgICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBnZXREYXRlVUlEKGRhdGUsIFwieWVhclwiKTtcbiAgICAgICAgICAgICAgICB5ZWFybHlOb3Rlc1tkYXRlU3RyaW5nXSA9IG5vdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4geWVhcmx5Tm90ZXM7XG59XG5cbmZ1bmN0aW9uIGFwcEhhc0RhaWx5Tm90ZXNQbHVnaW5Mb2FkZWQoKSB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHdpbmRvdztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IGRhaWx5Tm90ZXNQbHVnaW4gPSBhcHAuaW50ZXJuYWxQbHVnaW5zLnBsdWdpbnNbXCJkYWlseS1ub3Rlc1wiXTtcbiAgICBpZiAoZGFpbHlOb3Rlc1BsdWdpbiAmJiBkYWlseU5vdGVzUGx1Z2luLmVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/LmRhaWx5Py5lbmFibGVkO1xufVxuLyoqXG4gKiBYWFg6IFwiV2Vla2x5IE5vdGVzXCIgbGl2ZSBpbiBlaXRoZXIgdGhlIENhbGVuZGFyIHBsdWdpbiBvciB0aGUgcGVyaW9kaWMtbm90ZXMgcGx1Z2luLlxuICogQ2hlY2sgYm90aCB1bnRpbCB0aGUgd2Vla2x5IG5vdGVzIGZlYXR1cmUgaXMgcmVtb3ZlZCBmcm9tIHRoZSBDYWxlbmRhciBwbHVnaW4uXG4gKi9cbmZ1bmN0aW9uIGFwcEhhc1dlZWtseU5vdGVzUGx1Z2luTG9hZGVkKCkge1xuICAgIGNvbnN0IHsgYXBwIH0gPSB3aW5kb3c7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBpZiAoYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwiY2FsZW5kYXJcIikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/LndlZWtseT8uZW5hYmxlZDtcbn1cbmZ1bmN0aW9uIGFwcEhhc01vbnRobHlOb3Rlc1BsdWdpbkxvYWRlZCgpIHtcbiAgICBjb25zdCB7IGFwcCB9ID0gd2luZG93O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/Lm1vbnRobHk/LmVuYWJsZWQ7XG59XG5mdW5jdGlvbiBhcHBIYXNRdWFydGVybHlOb3Rlc1BsdWdpbkxvYWRlZCgpIHtcbiAgICBjb25zdCB7IGFwcCB9ID0gd2luZG93O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/LnF1YXJ0ZXJseT8uZW5hYmxlZDtcbn1cbmZ1bmN0aW9uIGFwcEhhc1llYXJseU5vdGVzUGx1Z2luTG9hZGVkKCkge1xuICAgIGNvbnN0IHsgYXBwIH0gPSB3aW5kb3c7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwZXJpb2RpY05vdGVzID0gYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik7XG4gICAgcmV0dXJuIHBlcmlvZGljTm90ZXMgJiYgcGVyaW9kaWNOb3Rlcy5zZXR0aW5ncz8ueWVhcmx5Py5lbmFibGVkO1xufVxuZnVuY3Rpb24gZ2V0UGVyaW9kaWNOb3RlU2V0dGluZ3MoZ3JhbnVsYXJpdHkpIHtcbiAgICBjb25zdCBnZXRTZXR0aW5ncyA9IHtcbiAgICAgICAgZGF5OiBnZXREYWlseU5vdGVTZXR0aW5ncyxcbiAgICAgICAgd2VlazogZ2V0V2Vla2x5Tm90ZVNldHRpbmdzLFxuICAgICAgICBtb250aDogZ2V0TW9udGhseU5vdGVTZXR0aW5ncyxcbiAgICAgICAgcXVhcnRlcjogZ2V0UXVhcnRlcmx5Tm90ZVNldHRpbmdzLFxuICAgICAgICB5ZWFyOiBnZXRZZWFybHlOb3RlU2V0dGluZ3MsXG4gICAgfVtncmFudWxhcml0eV07XG4gICAgcmV0dXJuIGdldFNldHRpbmdzKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVQZXJpb2RpY05vdGUoZ3JhbnVsYXJpdHksIGRhdGUpIHtcbiAgICBjb25zdCBjcmVhdGVGbiA9IHtcbiAgICAgICAgZGF5OiBjcmVhdGVEYWlseU5vdGUsXG4gICAgICAgIG1vbnRoOiBjcmVhdGVNb250aGx5Tm90ZSxcbiAgICAgICAgd2VlazogY3JlYXRlV2Vla2x5Tm90ZSxcbiAgICB9O1xuICAgIHJldHVybiBjcmVhdGVGbltncmFudWxhcml0eV0oZGF0ZSk7XG59XG5cbmV4cG9ydHMuREVGQVVMVF9EQUlMWV9OT1RFX0ZPUk1BVCA9IERFRkFVTFRfREFJTFlfTk9URV9GT1JNQVQ7XG5leHBvcnRzLkRFRkFVTFRfTU9OVEhMWV9OT1RFX0ZPUk1BVCA9IERFRkFVTFRfTU9OVEhMWV9OT1RFX0ZPUk1BVDtcbmV4cG9ydHMuREVGQVVMVF9RVUFSVEVSTFlfTk9URV9GT1JNQVQgPSBERUZBVUxUX1FVQVJURVJMWV9OT1RFX0ZPUk1BVDtcbmV4cG9ydHMuREVGQVVMVF9XRUVLTFlfTk9URV9GT1JNQVQgPSBERUZBVUxUX1dFRUtMWV9OT1RFX0ZPUk1BVDtcbmV4cG9ydHMuREVGQVVMVF9ZRUFSTFlfTk9URV9GT1JNQVQgPSBERUZBVUxUX1lFQVJMWV9OT1RFX0ZPUk1BVDtcbmV4cG9ydHMuYXBwSGFzRGFpbHlOb3Rlc1BsdWdpbkxvYWRlZCA9IGFwcEhhc0RhaWx5Tm90ZXNQbHVnaW5Mb2FkZWQ7XG5leHBvcnRzLmFwcEhhc01vbnRobHlOb3Rlc1BsdWdpbkxvYWRlZCA9IGFwcEhhc01vbnRobHlOb3Rlc1BsdWdpbkxvYWRlZDtcbmV4cG9ydHMuYXBwSGFzUXVhcnRlcmx5Tm90ZXNQbHVnaW5Mb2FkZWQgPSBhcHBIYXNRdWFydGVybHlOb3Rlc1BsdWdpbkxvYWRlZDtcbmV4cG9ydHMuYXBwSGFzV2Vla2x5Tm90ZXNQbHVnaW5Mb2FkZWQgPSBhcHBIYXNXZWVrbHlOb3Rlc1BsdWdpbkxvYWRlZDtcbmV4cG9ydHMuYXBwSGFzWWVhcmx5Tm90ZXNQbHVnaW5Mb2FkZWQgPSBhcHBIYXNZZWFybHlOb3Rlc1BsdWdpbkxvYWRlZDtcbmV4cG9ydHMuY3JlYXRlRGFpbHlOb3RlID0gY3JlYXRlRGFpbHlOb3RlO1xuZXhwb3J0cy5jcmVhdGVNb250aGx5Tm90ZSA9IGNyZWF0ZU1vbnRobHlOb3RlO1xuZXhwb3J0cy5jcmVhdGVQZXJpb2RpY05vdGUgPSBjcmVhdGVQZXJpb2RpY05vdGU7XG5leHBvcnRzLmNyZWF0ZVF1YXJ0ZXJseU5vdGUgPSBjcmVhdGVRdWFydGVybHlOb3RlO1xuZXhwb3J0cy5jcmVhdGVXZWVrbHlOb3RlID0gY3JlYXRlV2Vla2x5Tm90ZTtcbmV4cG9ydHMuY3JlYXRlWWVhcmx5Tm90ZSA9IGNyZWF0ZVllYXJseU5vdGU7XG5leHBvcnRzLmdldEFsbERhaWx5Tm90ZXMgPSBnZXRBbGxEYWlseU5vdGVzO1xuZXhwb3J0cy5nZXRBbGxNb250aGx5Tm90ZXMgPSBnZXRBbGxNb250aGx5Tm90ZXM7XG5leHBvcnRzLmdldEFsbFF1YXJ0ZXJseU5vdGVzID0gZ2V0QWxsUXVhcnRlcmx5Tm90ZXM7XG5leHBvcnRzLmdldEFsbFdlZWtseU5vdGVzID0gZ2V0QWxsV2Vla2x5Tm90ZXM7XG5leHBvcnRzLmdldEFsbFllYXJseU5vdGVzID0gZ2V0QWxsWWVhcmx5Tm90ZXM7XG5leHBvcnRzLmdldERhaWx5Tm90ZSA9IGdldERhaWx5Tm90ZTtcbmV4cG9ydHMuZ2V0RGFpbHlOb3RlU2V0dGluZ3MgPSBnZXREYWlseU5vdGVTZXR0aW5ncztcbmV4cG9ydHMuZ2V0RGF0ZUZyb21GaWxlID0gZ2V0RGF0ZUZyb21GaWxlO1xuZXhwb3J0cy5nZXREYXRlRnJvbVBhdGggPSBnZXREYXRlRnJvbVBhdGg7XG5leHBvcnRzLmdldERhdGVVSUQgPSBnZXREYXRlVUlEO1xuZXhwb3J0cy5nZXRNb250aGx5Tm90ZSA9IGdldE1vbnRobHlOb3RlO1xuZXhwb3J0cy5nZXRNb250aGx5Tm90ZVNldHRpbmdzID0gZ2V0TW9udGhseU5vdGVTZXR0aW5ncztcbmV4cG9ydHMuZ2V0UGVyaW9kaWNOb3RlU2V0dGluZ3MgPSBnZXRQZXJpb2RpY05vdGVTZXR0aW5ncztcbmV4cG9ydHMuZ2V0UXVhcnRlcmx5Tm90ZSA9IGdldFF1YXJ0ZXJseU5vdGU7XG5leHBvcnRzLmdldFF1YXJ0ZXJseU5vdGVTZXR0aW5ncyA9IGdldFF1YXJ0ZXJseU5vdGVTZXR0aW5ncztcbmV4cG9ydHMuZ2V0VGVtcGxhdGVJbmZvID0gZ2V0VGVtcGxhdGVJbmZvO1xuZXhwb3J0cy5nZXRXZWVrbHlOb3RlID0gZ2V0V2Vla2x5Tm90ZTtcbmV4cG9ydHMuZ2V0V2Vla2x5Tm90ZVNldHRpbmdzID0gZ2V0V2Vla2x5Tm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXRZZWFybHlOb3RlID0gZ2V0WWVhcmx5Tm90ZTtcbmV4cG9ydHMuZ2V0WWVhcmx5Tm90ZVNldHRpbmdzID0gZ2V0WWVhcmx5Tm90ZVNldHRpbmdzO1xuIiwiaW1wb3J0IHtBcHAsIFRGaWxlfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7Z2V0QWxsRGFpbHlOb3Rlc30gZnJvbSAnb2JzaWRpYW4tZGFpbHktbm90ZXMtaW50ZXJmYWNlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGUge1xyXG4gIGRhaWx5Tm90ZXM6IFJlY29yZDxzdHJpbmcsIFRGaWxlPjtcclxuICBhcHA6IEFwcDtcclxufVxyXG5cclxuaW50ZXJmYWNlIFNldERhaWx5Tm90ZXNBY3Rpb24ge1xyXG4gIHR5cGU6ICdTRVRfREFJTFlOT1RFUyc7XHJcbiAgcGF5bG9hZDoge1xyXG4gICAgZGFpbHlOb3RlczogUmVjb3JkPHN0cmluZywgVEZpbGU+O1xyXG4gIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBTZXRPYnNpZGlhbkFwcEFjdGlvbiB7XHJcbiAgdHlwZTogJ1NFVF9BUFAnO1xyXG4gIHBheWxvYWQ6IHtcclxuICAgIGFwcDogQXBwO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vIGludGVyZmFjZSBJbnNlcnREYWlseU5vdGVBY3Rpb24ge1xyXG4vLyAgIHR5cGU6IFwiSU5TRVJUX0RBSUxZTk9URVwiO1xyXG4vLyAgIHBheWxvYWQ6IHtcclxuLy8gICAgIGRhaWx5Tm90ZTogVEZpbGU7XHJcbi8vICAgfTtcclxuLy8gfVxyXG5cclxuZXhwb3J0IHR5cGUgQWN0aW9ucyA9IFNldERhaWx5Tm90ZXNBY3Rpb24gfCBTZXRPYnNpZGlhbkFwcEFjdGlvbjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlOiBTdGF0ZSwgYWN0aW9uOiBBY3Rpb25zKTogU3RhdGUge1xyXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgJ1NFVF9EQUlMWU5PVEVTJzoge1xyXG4gICAgICBjb25zdCBkYWlseU5vdGVzID0gZ2V0QWxsRGFpbHlOb3RlcygpO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBkYWlseU5vdGVzOiBkYWlseU5vdGVzLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2FzZSAnU0VUX0FQUCc6IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBhcHA6IGFjdGlvbi5wYXlsb2FkLmFwcCxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGRlZmF1bHQ6IHtcclxuICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTdGF0ZTogU3RhdGUgPSB7XHJcbiAgZGFpbHlOb3RlczogbnVsbCxcclxuICBhcHA6IG51bGwsXHJcbn07XHJcbiIsImltcG9ydCBjb21iaW5lUmVkdWNlcnMgZnJvbSAnLi4vbGFicy9jb21iaW5lUmVkdWNlcnMnO1xyXG5pbXBvcnQgY3JlYXRlU3RvcmUgZnJvbSAnLi4vbGFicy9jcmVhdGVTdG9yZSc7XHJcbmltcG9ydCAqIGFzIGdsb2JhbFN0b3JlIGZyb20gJy4vZ2xvYmFsU3RhdGVTdG9yZSc7XHJcbmltcG9ydCAqIGFzIGxvY2F0aW9uU3RvcmUgZnJvbSAnLi9sb2NhdGlvblN0b3JlJztcclxuaW1wb3J0ICogYXMgZXZlbnRTdG9yZSBmcm9tICcuL2V2ZW50U3RvcmUnO1xyXG5pbXBvcnQgKiBhcyBkYWlseU5vdGVzU3RvcmUgZnJvbSAnLi9kYWlseU5vdGVzU3RvcmUnO1xyXG5cclxuaW50ZXJmYWNlIEFwcFN0YXRlIHtcclxuICBnbG9iYWxTdGF0ZTogZ2xvYmFsU3RvcmUuU3RhdGU7XHJcbiAgbG9jYXRpb25TdGF0ZTogbG9jYXRpb25TdG9yZS5TdGF0ZTtcclxuICBldmVudFN0YXRlOiBldmVudFN0b3JlLlN0YXRlO1xyXG4gIGRhaWx5Tm90ZXNTdGF0ZTogZGFpbHlOb3Rlc1N0b3JlLlN0YXRlO1xyXG59XHJcblxyXG50eXBlIEFwcFN0YXRlQWN0aW9ucyA9XHJcbiAgfCBnbG9iYWxTdG9yZS5BY3Rpb25zXHJcbiAgfCBsb2NhdGlvblN0b3JlLkFjdGlvbnNcclxuICB8IGV2ZW50U3RvcmUuQWN0aW9uc1xyXG4gIHwgZGFpbHlOb3Rlc1N0b3JlLkFjdGlvbnM7XHJcblxyXG5jb25zdCBhcHBTdG9yZSA9IGNyZWF0ZVN0b3JlPEFwcFN0YXRlLCBBcHBTdGF0ZUFjdGlvbnM+KFxyXG4gIHtcclxuICAgIGdsb2JhbFN0YXRlOiBnbG9iYWxTdG9yZS5kZWZhdWx0U3RhdGUsXHJcbiAgICBsb2NhdGlvblN0YXRlOiBsb2NhdGlvblN0b3JlLmRlZmF1bHRTdGF0ZSxcclxuICAgIGV2ZW50U3RhdGU6IGV2ZW50U3RvcmUuZGVmYXVsdFN0YXRlLFxyXG4gICAgZGFpbHlOb3Rlc1N0YXRlOiBkYWlseU5vdGVzU3RvcmUuZGVmYXVsdFN0YXRlLFxyXG4gIH0sXHJcbiAgY29tYmluZVJlZHVjZXJzPEFwcFN0YXRlLCBBcHBTdGF0ZUFjdGlvbnM+KHtcclxuICAgIGdsb2JhbFN0YXRlOiBnbG9iYWxTdG9yZS5yZWR1Y2VyLFxyXG4gICAgbG9jYXRpb25TdGF0ZTogbG9jYXRpb25TdG9yZS5yZWR1Y2VyLFxyXG4gICAgZXZlbnRTdGF0ZTogZXZlbnRTdG9yZS5yZWR1Y2VyLFxyXG4gICAgZGFpbHlOb3Rlc1N0YXRlOiBkYWlseU5vdGVzU3RvcmUucmVkdWNlcixcclxuICB9KSxcclxuKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFwcFN0b3JlO1xyXG4iLCJpbXBvcnQge2NyZWF0ZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGFwcFN0b3JlIGZyb20gJy4vYXBwU3RvcmUnO1xyXG5cclxuY29uc3QgYXBwQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoYXBwU3RvcmUuZ2V0U3RhdGUoKSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhcHBDb250ZXh0O1xyXG4iLCIvLyBpbXBvcnQgeyBtb21lbnQgfSBmcm9tICdvYnNpZGlhbic7XG4vLyBpbXBvcnQgdXNlclNlcnZpY2UgZnJvbSBcIi4vdXNlclNlcnZpY2VcIjtcbi8vIGltcG9ydCBhcGkgZnJvbSBcIi4uL2hlbHBlcnMvYXBpXCI7XG5pbXBvcnQgYXBwU3RvcmUgZnJvbSAnLi4vc3RvcmVzL2FwcFN0b3JlJztcbmltcG9ydCB7Z2V0QWxsRGFpbHlOb3RlcywgZ2V0RGFpbHlOb3RlfSBmcm9tICdvYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2UnO1xuaW1wb3J0IHtBcHAsIFRGaWxlfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQge01vbWVudH0gZnJvbSAnX29ic2lkaWFuQDAuMTMuMTFAb2JzaWRpYW4vbm9kZV9tb2R1bGVzL21vbWVudCc7XG4vLyBpbXBvcnQgeyBNb21lbnR9ICBmcm9tIFwib2JzaWRpYW5cIjtcblxuY2xhc3MgRGFpbHlOb3Rlc1NlcnZpY2Uge1xuICBwdWJsaWMgZ2V0U3RhdGUoKSB7XG4gICAgcmV0dXJuIGFwcFN0b3JlLmdldFN0YXRlKCkuZGFpbHlOb3Rlc1N0YXRlO1xuICB9XG5cbiAgcHVibGljIGdldEFwcChhcHA6IEFwcCkge1xuICAgIGFwcFN0b3JlLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdTRVRfQVBQJyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgYXBwLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gYXBwO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldE15QWxsRGFpbHlOb3RlcygpIHtcbiAgICBjb25zdCBkYWlseU5vdGVzID0gZ2V0QWxsRGFpbHlOb3RlcygpO1xuXG4gICAgYXBwU3RvcmUuZGlzcGF0Y2goe1xuICAgICAgdHlwZTogJ1NFVF9EQUlMWU5PVEVTJyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgZGFpbHlOb3RlcyxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGRhaWx5Tm90ZXM7XG4gIH1cblxuICAvLyBwdWJsaWMgcHVzaERhaWx5Tm90ZShkYWlseU5vdGU6IFRGaWxlKSB7XG4gIC8vICAgYXBwU3RvcmUuZGlzcGF0Y2goe1xuICAvLyAgICAgdHlwZTogXCJJTlNFUlRfREFJTFlOT1RFXCIsXG4gIC8vICAgICBwYXlsb2FkOiB7XG4gIC8vICAgICAgIGV2ZW50OiB7XG4gIC8vICAgICAgICAgLi4uZXZlbnQsXG4gIC8vICAgICAgIH0sXG4gIC8vICAgICB9LFxuICAvLyAgIH0pO1xuICAvLyB9XG5cbiAgcHVibGljIGFzeW5jIGdldERhaWx5Tm90ZUJ5RXZlbnQoZGF0ZTogTW9tZW50KTogUHJvbWlzZTxURmlsZT4ge1xuICAgIGNvbnN0IHtkYWlseU5vdGVzfSA9IHRoaXMuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBkYWlseU5vdGUgPSBnZXREYWlseU5vdGUoZGF0ZSwgZGFpbHlOb3Rlcyk7XG4gICAgcmV0dXJuIGRhaWx5Tm90ZTtcbiAgfVxufVxuXG5jb25zdCBkYWlseU5vdGVzU2VydmljZSA9IG5ldyBEYWlseU5vdGVzU2VydmljZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBkYWlseU5vdGVzU2VydmljZTtcbiIsImltcG9ydCB7IFZpZXcgfSBmcm9tIFwicmVhY3QtYmlnLWNhbGVuZGFyXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIERlZmluZSBzdG9yYWdlIGRhdGEgdHlwZVxyXG4gKi9cclxuaW50ZXJmYWNlIFN0b3JhZ2VEYXRhIHtcclxuICAvLyDnvJbovpHlmajovpPlhaXnvJPlrZjlhoXlrrlcclxuICBlZGl0b3JDb250ZW50Q2FjaGU6IHN0cmluZztcclxuICAvLyDliIbor43lvIDlhbNcclxuICBzaG91bGRTcGxpdEV2ZW50V29yZDogYm9vbGVhbjtcclxuICAvLyDmmK/lkKbpmpDol4/lm77niYfpk77mjqXlnLDlnYBcclxuICBzaG91bGRIaWRlSW1hZ2VVcmw6IGJvb2xlYW47XHJcbiAgLy8gbWFya2Rvd24g6Kej5p6Q5byA5YWzXHJcbiAgc2hvdWxkVXNlTWFya2Rvd25QYXJzZXI6IGJvb2xlYW47XHJcbiAgLy8g6KeG5Zu+54q25oCBXHJcbiAgdmlld0NhY2hlOiBWaWV3O1xyXG5cclxufVxyXG5cclxudHlwZSBTdG9yYWdlS2V5ID0ga2V5b2YgU3RvcmFnZURhdGE7XHJcblxyXG4vKipcclxuICogc3RvcmFnZSBoZWxwZXJcclxuICovXHJcbmV4cG9ydCBuYW1lc3BhY2Ugc3RvcmFnZSB7XHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGdldChrZXlzOiBTdG9yYWdlS2V5W10pOiBQYXJ0aWFsPFN0b3JhZ2VEYXRhPiB7XHJcbiAgICBjb25zdCBkYXRhOiBQYXJ0aWFsPFN0b3JhZ2VEYXRhPiA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBzdHJpbmdpZnlWYWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgaWYgKHN0cmluZ2lmeVZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICBjb25zdCB2YWwgPSBKU09OLnBhcnNlKHN0cmluZ2lmeVZhbHVlKTtcclxuICAgICAgICAgIGRhdGFba2V5XSA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdHZXQgc3RvcmFnZSBmYWlsZWQgaW4gJywga2V5LCBlcnJvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcblxyXG4gIGV4cG9ydCBmdW5jdGlvbiBzZXQoZGF0YTogUGFydGlhbDxTdG9yYWdlRGF0YT4pIHtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBzdHJpbmdpZnlWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KGRhdGFba2V5IGFzIFN0b3JhZ2VLZXldKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHN0cmluZ2lmeVZhbHVlKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NhdmUgc3RvcmFnZSBmYWlsZWQgaW4gJywga2V5LCBlcnJvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGV4cG9ydCBmdW5jdGlvbiByZW1vdmUoa2V5czogU3RvcmFnZUtleVtdKSB7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1JlbW92ZSBzdG9yYWdlIGZhaWxlZCBpbiAnLCBrZXksIGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGVtaXRTdG9yYWdlQ2hhbmdlZEV2ZW50KCkge1xyXG4gICAgY29uc3QgaWZyYW1lRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcclxuICAgIGlmcmFtZUVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZUVsKTtcclxuXHJcbiAgICBpZnJhbWVFbC5jb250ZW50V2luZG93Py5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndCcsIERhdGUubm93KCkudG9TdHJpbmcoKSk7XHJcbiAgICBpZnJhbWVFbC5yZW1vdmUoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtzdG9yYWdlfSBmcm9tICcuLi9oZWxwZXJzL3N0b3JhZ2UnO1xuaW1wb3J0IGFwcFN0b3JlIGZyb20gJy4uL3N0b3Jlcy9hcHBTdG9yZSc7XG5pbXBvcnQge0FwcFNldHRpbmd9IGZyb20gJy4uL3N0b3Jlcy9nbG9iYWxTdGF0ZVN0b3JlJztcblxuY2xhc3MgR2xvYmFsU3RhdGVTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgY2FjaGVkU2V0dGluZyA9IHN0b3JhZ2UuZ2V0KFtcbiAgICAgICdzaG91bGRTcGxpdEV2ZW50V29yZCcsXG4gICAgICAnc2hvdWxkSGlkZUltYWdlVXJsJyxcbiAgICAgICdzaG91bGRVc2VNYXJrZG93blBhcnNlcicsXG4gICAgXSk7XG4gICAgY29uc3QgZGVmYXVsdEFwcFNldHRpbmcgPSB7XG4gICAgICBzaG91bGRTcGxpdEV2ZW50V29yZDogY2FjaGVkU2V0dGluZy5zaG91bGRTcGxpdEV2ZW50V29yZCA/PyB0cnVlLFxuICAgICAgc2hvdWxkSGlkZUltYWdlVXJsOiBjYWNoZWRTZXR0aW5nLnNob3VsZEhpZGVJbWFnZVVybCA/PyB0cnVlLFxuICAgICAgc2hvdWxkVXNlTWFya2Rvd25QYXJzZXI6IGNhY2hlZFNldHRpbmcuc2hvdWxkVXNlTWFya2Rvd25QYXJzZXIgPz8gdHJ1ZSxcbiAgICB9O1xuXG4gICAgdGhpcy5zZXRBcHBTZXR0aW5nKGRlZmF1bHRBcHBTZXR0aW5nKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGF0ZSA9ICgpID0+IHtcbiAgICByZXR1cm4gYXBwU3RvcmUuZ2V0U3RhdGUoKS5nbG9iYWxTdGF0ZTtcbiAgfTtcblxuICBwdWJsaWMgc2V0RWRpdEV2ZW50SWQgPSAoZWRpdEV2ZW50SWQ6IHN0cmluZykgPT4ge1xuICAgIGFwcFN0b3JlLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdTRVRfRURJVF9FVkVOVF9JRCcsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIGVkaXRFdmVudElkLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcblxuICBwdWJsaWMgc2V0TWFya0V2ZW50SWQgPSAobWFya0V2ZW50SWQ6IHN0cmluZykgPT4ge1xuICAgIGFwcFN0b3JlLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdTRVRfTUFSS19FVkVOVF9JRCcsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIG1hcmtFdmVudElkLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcblxuICBwdWJsaWMgc2V0SXNNb2JpbGVWaWV3ID0gKGlzTW9iaWxlVmlldzogYm9vbGVhbikgPT4ge1xuICAgIGFwcFN0b3JlLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdTRVRfTU9CSUxFX1ZJRVcnLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBpc01vYmlsZVZpZXcsXG4gICAgICB9LFxuICAgIH0pO1xuICB9O1xuXG4gIHB1YmxpYyBzZXRTaG93U2lkZXJiYXJJbk1vYmlsZVZpZXcgPSAoc2hvd1NpZGVyYmFySW5Nb2JpbGVWaWV3OiBib29sZWFuKSA9PiB7XG4gICAgYXBwU3RvcmUuZGlzcGF0Y2goe1xuICAgICAgdHlwZTogJ1NFVF9TSE9XX1NJREVCQVJfSU5fTU9CSUxFX1ZJRVcnLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBzaG93U2lkZXJiYXJJbk1vYmlsZVZpZXcsXG4gICAgICB9LFxuICAgIH0pO1xuICB9O1xuXG4gIHB1YmxpYyBzZXRBcHBTZXR0aW5nID0gKGFwcFNldHRpbmc6IFBhcnRpYWw8QXBwU2V0dGluZz4pID0+IHtcbiAgICBhcHBTdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnU0VUX0FQUF9TRVRUSU5HJyxcbiAgICAgIHBheWxvYWQ6IGFwcFNldHRpbmcsXG4gICAgfSk7XG4gICAgc3RvcmFnZS5zZXQoYXBwU2V0dGluZyk7XG4gIH07XG59XG5cbmNvbnN0IGdsb2JhbFN0YXRlU2VydmljZSA9IG5ldyBHbG9iYWxTdGF0ZVNlcnZpY2UoKTtcblxuZXhwb3J0IGRlZmF1bHQgZ2xvYmFsU3RhdGVTZXJ2aWNlO1xuIiwiLy8gaW1wb3J0IHV0aWxzIGZyb20gXCIuLi9oZWxwZXJzL3V0aWxzXCI7XG5pbXBvcnQgYXBwU3RvcmUgZnJvbSAnLi4vc3RvcmVzL2FwcFN0b3JlJztcblxuLy8gY29uc3QgdXBkYXRlTG9jYXRpb25VcmwgPSAobWV0aG9kOiBcInJlcGxhY2VcIiB8IFwicHVzaFwiID0gXCJyZXBsYWNlXCIpID0+IHtcbi8vICAgY29uc3QgeyBxdWVyeSwgcGF0aG5hbWUsIGhhc2ggfSA9IGFwcFN0b3JlLmdldFN0YXRlKCkubG9jYXRpb25TdGF0ZTtcbi8vICAgbGV0IHF1ZXJ5U3RyaW5nID0gdXRpbHMudHJhbnNmb3JtT2JqZWN0VG9QYXJhbXNTdHJpbmcocXVlcnkpO1xuLy8gICBpZiAocXVlcnlTdHJpbmcpIHtcbi8vICAgICBxdWVyeVN0cmluZyA9IFwiP1wiICsgcXVlcnlTdHJpbmc7XG4vLyAgIH0gZWxzZSB7XG4vLyAgICAgcXVlcnlTdHJpbmcgPSBcIlwiO1xuLy8gICB9XG5cbi8vICAgaWYgKG1ldGhvZCA9PT0gXCJyZXBsYWNlXCIpIHtcbi8vICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgXCJcIiwgcGF0aG5hbWUgKyBoYXNoICsgcXVlcnlTdHJpbmcpO1xuLy8gICB9IGVsc2Uge1xuLy8gICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBcIlwiLCBwYXRobmFtZSArIGhhc2ggKyBxdWVyeVN0cmluZyk7XG4vLyAgIH1cbi8vIH07XG5cbmNsYXNzIExvY2F0aW9uU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudXBkYXRlU3RhdGVXaXRoTG9jYXRpb24oKTtcbiAgICB3aW5kb3cub25wb3BzdGF0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlU3RhdGVXaXRoTG9jYXRpb24oKTtcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZVN0YXRlV2l0aExvY2F0aW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHtwYXRobmFtZSwgc2VhcmNoLCBoYXNofSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaCk7XG4gICAgY29uc3Qgc3RhdGU6IEFwcExvY2F0aW9uID0ge1xuICAgICAgcGF0aG5hbWU6ICcvJyxcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgcXVlcnk6IHtcbiAgICAgICAgdGFnOiAnJyxcbiAgICAgICAgZHVyYXRpb246IG51bGwsXG4gICAgICAgIHRleHQ6ICcnLFxuICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgZmlsdGVyOiAnJyxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBzdGF0ZS5xdWVyeS50YWcgPSB1cmxQYXJhbXMuZ2V0KCd0YWcnKSA/PyAnJztcbiAgICBzdGF0ZS5xdWVyeS50eXBlID0gKHVybFBhcmFtcy5nZXQoJ3R5cGUnKSA/PyAnJykgYXMgRXZlbnRTcGVjVHlwZTtcbiAgICBzdGF0ZS5xdWVyeS50ZXh0ID0gdXJsUGFyYW1zLmdldCgndGV4dCcpID8/ICcnO1xuICAgIHN0YXRlLnF1ZXJ5LmZpbHRlciA9IHVybFBhcmFtcy5nZXQoJ2ZpbHRlcicpID8/ICcnO1xuICAgIGNvbnN0IGZyb20gPSBwYXJzZUludCh1cmxQYXJhbXMuZ2V0KCdmcm9tJykgPz8gJzAnKTtcbiAgICBjb25zdCB0byA9IHBhcnNlSW50KHVybFBhcmFtcy5nZXQoJ3RvJykgPz8gJzAnKTtcbiAgICBpZiAodG8gPiBmcm9tICYmIHRvICE9PSAwKSB7XG4gICAgICBzdGF0ZS5xdWVyeS5kdXJhdGlvbiA9IHtcbiAgICAgICAgZnJvbSxcbiAgICAgICAgdG8sXG4gICAgICB9O1xuICAgIH1cbiAgICBzdGF0ZS5oYXNoID0gaGFzaDtcbiAgICBzdGF0ZS5wYXRobmFtZSA9IHRoaXMuZ2V0VmFsaWRQYXRobmFtZShwYXRobmFtZSk7XG4gICAgYXBwU3RvcmUuZGlzcGF0Y2goe1xuICAgICAgdHlwZTogJ1NFVF9MT0NBVElPTicsXG4gICAgICBwYXlsb2FkOiBzdGF0ZSxcbiAgICB9KTtcbiAgfTtcblxuICBwdWJsaWMgZ2V0U3RhdGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGFwcFN0b3JlLmdldFN0YXRlKCkubG9jYXRpb25TdGF0ZTtcbiAgfTtcblxuICBwdWJsaWMgY2xlYXJRdWVyeSA9ICgpID0+IHtcbiAgICBhcHBTdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnU0VUX1FVRVJZJyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgdGFnOiAnJyxcbiAgICAgICAgZHVyYXRpb246IG51bGwsXG4gICAgICAgIHRleHQ6ICcnLFxuICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgZmlsdGVyOiAnJyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGVMb2NhdGlvblVybCgpO1xuICB9O1xuXG4gIHB1YmxpYyBzZXRRdWVyeSA9IChxdWVyeTogUXVlcnkpID0+IHtcbiAgICBhcHBTdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnU0VUX1FVRVJZJyxcbiAgICAgIHBheWxvYWQ6IHF1ZXJ5LFxuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlTG9jYXRpb25VcmwoKTtcbiAgfTtcblxuICBwdWJsaWMgc2V0SGFzaCA9IChoYXNoOiBzdHJpbmcpID0+IHtcbiAgICBhcHBTdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnU0VUX0hBU0gnLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBoYXNoLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZUxvY2F0aW9uVXJsKCk7XG4gIH07XG5cbiAgcHVibGljIHNldFBhdGhuYW1lID0gKHBhdGhuYW1lOiBzdHJpbmcpID0+IHtcbiAgICBhcHBTdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnU0VUX1BBVEhOQU1FJyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgcGF0aG5hbWUsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlTG9jYXRpb25VcmwoKTtcbiAgfTtcblxuICBwdWJsaWMgcHVzaEhpc3RvcnkgPSAocGF0aG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGFwcFN0b3JlLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdTRVRfUEFUSE5BTUUnLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBwYXRobmFtZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGVMb2NhdGlvblVybChcInB1c2hcIik7XG4gIH07XG5cbiAgcHVibGljIHJlcGxhY2VIaXN0b3J5ID0gKHBhdGhuYW1lOiBzdHJpbmcpID0+IHtcbiAgICBhcHBTdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnU0VUX1BBVEhOQU1FJyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgcGF0aG5hbWUsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlTG9jYXRpb25VcmwoXCJyZXBsYWNlXCIpO1xuICB9O1xuXG4gIHB1YmxpYyBzZXRFdmVudFR5cGVRdWVyeSA9ICh0eXBlOiBFdmVudFNwZWNUeXBlIHwgJycgPSAnJykgPT4ge1xuICAgIGFwcFN0b3JlLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdTRVRfVFlQRScsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIHR5cGUsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlTG9jYXRpb25VcmwoKTtcbiAgfTtcblxuICBwdWJsaWMgc2V0RXZlbnRGaWx0ZXIgPSAoZmlsdGVySWQ6IHN0cmluZykgPT4ge1xuICAgIGFwcFN0b3JlLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdTRVRfUVVFUllfRklMVEVSJyxcbiAgICAgIHBheWxvYWQ6IGZpbHRlcklkLFxuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlTG9jYXRpb25VcmwoKTtcbiAgfTtcblxuICBwdWJsaWMgc2V0VGV4dFF1ZXJ5ID0gKHRleHQ6IHN0cmluZykgPT4ge1xuICAgIGFwcFN0b3JlLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdTRVRfVEVYVCcsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIHRleHQsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlTG9jYXRpb25VcmwoKTtcbiAgfTtcblxuICBwdWJsaWMgc2V0VGFnUXVlcnkgPSAodGFnOiBzdHJpbmcpID0+IHtcbiAgICBhcHBTdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnU0VUX1RBR19RVUVSWScsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIHRhZyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGVMb2NhdGlvblVybCgpO1xuICB9O1xuXG4gIHB1YmxpYyBzZXRGcm9tQW5kVG9RdWVyeSA9IChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+IHtcbiAgICBhcHBTdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnU0VUX0RVUkFUSU9OX1FVRVJZJyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgZHVyYXRpb246IHtmcm9tLCB0b30sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlTG9jYXRpb25VcmwoKTtcbiAgfTtcblxuICBwdWJsaWMgZ2V0VmFsaWRQYXRobmFtZSA9IChwYXRobmFtZTogc3RyaW5nKTogQXBwUm91dGVyID0+IHtcbiAgICBpZiAoWycvJywgJy9yZWN5Y2xlJywgJy9zZXR0aW5nJ10uaW5jbHVkZXMocGF0aG5hbWUpKSB7XG4gICAgICByZXR1cm4gcGF0aG5hbWUgYXMgQXBwUm91dGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJy8nO1xuICAgIH1cbiAgfTtcbn1cblxuY29uc3QgbG9jYXRpb25TZXJ2aWNlID0gbmV3IExvY2F0aW9uU2VydmljZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBsb2NhdGlvblNlcnZpY2U7XG4iLCJpbXBvcnQge21vbWVudH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQge2NyZWF0ZURhaWx5Tm90ZSwgZ2V0QWxsRGFpbHlOb3RlcywgZ2V0RGFpbHlOb3RlfSBmcm9tICdvYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2UnO1xyXG5pbXBvcnQgYXBwU3RvcmUgZnJvbSAnLi4vc3RvcmVzL2FwcFN0b3JlJztcclxuaW1wb3J0IHtJbnNlcnRBZnRlcn0gZnJvbSAnLi4vYmlnQ2FsZW5kYXInO1xyXG5pbXBvcnQge2RhaWx5Tm90ZXNTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcyc7XHJcbmltcG9ydCB7RGVmYXVsdEV2ZW50Q29tcG9zaXRpb259IGZyb20gJy4uL2JpZ0NhbGVuZGFyJztcclxuaW1wb3J0IHtzdHJpbmdPckRhdGV9IGZyb20gJ3JlYWN0LWJpZy1jYWxlbmRhcic7XHJcblxyXG5pbnRlcmZhY2UgTUNvbnRlbnQge1xyXG4gIGNvbnRlbnQ6IHN0cmluZztcclxuICBwb3NOdW0/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMxMTUxNTAvaG93LXRvLWVzY2FwZS1yZWd1bGFyLWV4cHJlc3Npb24tc3BlY2lhbC1jaGFyYWN0ZXJzLXVzaW5nLWphdmFzY3JpcHRcclxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJyk7XHJcbn1cclxuXHJcbi8vY3JlZGl0IHRvIGNoaG91bWFubiwgb3JpZ2luYWwgY29kZSBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vY2hob3VtYW5uL3F1aWNrYWRkL2Jsb2IvNzUzNmExMjA3MDFhNjI2ZWYwMTBkYjU2N2NlYTdjZjMwMThlNmM4Mi9zcmMvdXRpbGl0eS50cyNMMTMwXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaW5lc0luU3RyaW5nKGlucHV0OiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgY29uc3QgbGluZXM6IHN0cmluZ1tdID0gW107XHJcbiAgbGV0IHRlbXBTdHJpbmcgPSBpbnB1dDtcclxuXHJcbiAgd2hpbGUgKHRlbXBTdHJpbmcuY29udGFpbnMoJ1xcbicpKSB7XHJcbiAgICBjb25zdCBsaW5lRW5kSW5kZXggPSB0ZW1wU3RyaW5nLmluZGV4T2YoJ1xcbicpO1xyXG4gICAgbGluZXMucHVzaCh0ZW1wU3RyaW5nLnNsaWNlKDAsIGxpbmVFbmRJbmRleCkpO1xyXG4gICAgdGVtcFN0cmluZyA9IHRlbXBTdHJpbmcuc2xpY2UobGluZUVuZEluZGV4ICsgMSk7XHJcbiAgfVxyXG5cclxuICBsaW5lcy5wdXNoKHRlbXBTdHJpbmcpO1xyXG5cclxuICByZXR1cm4gbGluZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9ySW5zZXJ0KEV2ZW50Q29udGVudDogc3RyaW5nLCBzdGFydERhdGU6IHN0cmluZ09yRGF0ZSk6IFByb21pc2U8TW9kZWwuRXZlbnQ+IHtcclxuICAvLyBjb25zdCBwbHVnaW4gPSB3aW5kb3cucGx1Z2luO1xyXG4gIGNvbnN0IHt2YXVsdH0gPSBhcHBTdG9yZS5nZXRTdGF0ZSgpLmRhaWx5Tm90ZXNTdGF0ZS5hcHA7XHJcbiAgLy8gY29uc3QgcmVtb3ZlRW50ZXIgPSBFdmVudENvbnRlbnQucmVwbGFjZSgvXFxuL2csICc8YnI+Jyk7XHJcbiAgLy8gY29uc3QgZGF0ZSA9IG1vbWVudCgpO1xyXG4gIC8vIGNvbnN0IHRpbWVIb3VyID0gZGF0ZS5mb3JtYXQoJ0hIJyk7XHJcbiAgLy8gY29uc3QgdGltZU1pbnV0ZSA9IGRhdGUuZm9ybWF0KCdtbScpO1xyXG4gIGxldCBsaW5lTnVtO1xyXG4gIGNvbnN0IHN0YXJ0VGltZSA9IHN0YXJ0RGF0ZS50b1N0cmluZygpO1xyXG4gIC8vIGNvbnN0IHRpbWVUZXh0ID0gU3RyaW5nKHRpbWVIb3VyKSArIGA6YCArIFN0cmluZyh0aW1lTWludXRlKTtcclxuXHJcbiAgLy8gaWYgKGlzTGlzdCAmJiBEZWZhdWx0RXZlbnRDb21wb3NpdGlvbiA9PT0gJycpIHtcclxuICAvLyAgIG5ld0V2ZW50ID0gYC0gWyBdIGAgKyBTdHJpbmcodGltZUhvdXIpICsgYDpgICsgU3RyaW5nKHRpbWVNaW51dGUpICsgYCBgICsgcmVtb3ZlRW50ZXI7XHJcbiAgLy8gfSBlbHNlIGlmICghaXNMaXN0ICYmIERlZmF1bHRFdmVudENvbXBvc2l0aW9uID09PSAnJykge1xyXG4gIC8vICAgbmV3RXZlbnQgPSBgLSBgICsgU3RyaW5nKHRpbWVIb3VyKSArIGA6YCArIFN0cmluZyh0aW1lTWludXRlKSArIGAgYCArIHJlbW92ZUVudGVyO1xyXG4gIC8vIH1cclxuXHJcbiAgLy8gaWYgKGlzTGlzdCAmJiBEZWZhdWx0RXZlbnRDb21wb3NpdGlvbiAhPSAnJykge1xyXG4gIC8vICAgbmV3RXZlbnQgPSBgLSBbIF0gYCArIERlZmF1bHRFdmVudENvbXBvc2l0aW9uLnJlcGxhY2UoL3tUSU1FfS9nLCB0aW1lVGV4dCkucmVwbGFjZSgve0NPTlRFTlR9L2csIHJlbW92ZUVudGVyKTtcclxuICAvLyB9IGVsc2UgaWYgKCFpc0xpc3QgJiYgRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24gIT0gJycpIHtcclxuICAvLyAgIG5ld0V2ZW50ID0gYC0gYCArIERlZmF1bHRFdmVudENvbXBvc2l0aW9uLnJlcGxhY2UoL3tUSU1FfS9nLCB0aW1lVGV4dCkucmVwbGFjZSgve0NPTlRFTlR9L2csIHJlbW92ZUVudGVyKTtcclxuICAvLyB9XHJcblxyXG4gIGNvbnN0IG5ld0V2ZW50ID1cclxuICAgIGAtIFsgXSBgICtcclxuICAgIERlZmF1bHRFdmVudENvbXBvc2l0aW9uLnJlcGxhY2UoL3tUSU1FfS9nLCBtb21lbnQoc3RhcnRUaW1lKS5mb3JtYXQoJ0hIOm1tJykpLnJlcGxhY2UoL3tDT05URU5UfS9nLCBFdmVudENvbnRlbnQpO1xyXG5cclxuICBjb25zdCBkYWlseU5vdGVzID0gYXdhaXQgZ2V0QWxsRGFpbHlOb3RlcygpO1xyXG4gIGNvbnN0IGV4aXN0aW5nRmlsZSA9IGdldERhaWx5Tm90ZShtb21lbnQoc3RhcnREYXRlKSwgZGFpbHlOb3Rlcyk7XHJcbiAgaWYgKCFleGlzdGluZ0ZpbGUpIHtcclxuICAgIGNvbnN0IGZpbGUgPSBhd2FpdCBjcmVhdGVEYWlseU5vdGUobW9tZW50KHN0YXJ0RGF0ZSkpO1xyXG4gICAgYXdhaXQgZGFpbHlOb3Rlc1NlcnZpY2UuZ2V0TXlBbGxEYWlseU5vdGVzKCk7XHJcbiAgICBjb25zdCBmaWxlQ29udGVudHMgPSBhd2FpdCB2YXVsdC5yZWFkKGZpbGUpO1xyXG4gICAgY29uc3QgbmV3RmlsZUNvbnRlbnQgPSBhd2FpdCBpbnNlcnRBZnRlckhhbmRsZXIoSW5zZXJ0QWZ0ZXIsIG5ld0V2ZW50LCBmaWxlQ29udGVudHMpO1xyXG4gICAgYXdhaXQgdmF1bHQubW9kaWZ5KGZpbGUsIG5ld0ZpbGVDb250ZW50LmNvbnRlbnQpO1xyXG4gICAgaWYgKG5ld0ZpbGVDb250ZW50LnBvc051bSA9PT0gLTEpIHtcclxuICAgICAgY29uc3QgYWxsTGluZXMgPSBnZXRBbGxMaW5lc0Zyb21GaWxlKG5ld0ZpbGVDb250ZW50LmNvbnRlbnQpO1xyXG4gICAgICBsaW5lTnVtID0gYWxsTGluZXMubGVuZ3RoICsgMTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxpbmVOdW0gPSBuZXdGaWxlQ29udGVudC5wb3NOdW0gKyAxO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgKGlzTGlzdCkge1xyXG4gICAgLy8gICByZXR1cm4ge1xyXG4gICAgLy8gICAgIGlkOiBzdGFydERhdGUuZm9ybWF0KCdZWVlZTU1EREhIbW0nKSArICcwMCcgKyBsaW5lTnVtLFxyXG4gICAgLy8gICAgIGNvbnRlbnQ6IEV2ZW50Q29udGVudCxcclxuICAgIC8vICAgICBkZWxldGVkQXQ6ICcnLFxyXG4gICAgLy8gICAgIGNyZWF0ZWRBdDogc3RhcnREYXRlLmZvcm1hdCgnWVlZWS9NTS9ERCBISDptbTpzcycpLFxyXG4gICAgLy8gICAgIHVwZGF0ZWRBdDogc3RhcnREYXRlLmZvcm1hdCgnWVlZWS9NTS9ERCBISDptbTpzcycpLFxyXG4gICAgLy8gICAgIGV2ZW50VHlwZTogJ1RBU0stVE9ETycsXHJcbiAgICAvLyAgIH07XHJcbiAgICAvLyB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQ6IG1vbWVudChzdGFydERhdGUpLmZvcm1hdCgnWVlZWU1NRERISG1tJykgKyAnMDAnICsgbGluZU51bSxcclxuICAgICAgdGl0bGU6IEV2ZW50Q29udGVudCxcclxuICAgICAgc3RhcnQ6IG1vbWVudChzdGFydERhdGUpLnRvRGF0ZSgpLFxyXG4gICAgICBlbmQ6IG1vbWVudChzdGFydERhdGUpLnRvRGF0ZSgpLFxyXG4gICAgICBldmVudFR5cGU6ICdUQVNLLVRPRE8nLFxyXG4gICAgICAvLyB9O1xyXG4gICAgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgZmlsZUNvbnRlbnRzID0gYXdhaXQgdmF1bHQucmVhZChleGlzdGluZ0ZpbGUpO1xyXG4gICAgY29uc3QgbmV3RmlsZUNvbnRlbnQgPSBhd2FpdCBpbnNlcnRBZnRlckhhbmRsZXIoSW5zZXJ0QWZ0ZXIsIG5ld0V2ZW50LCBmaWxlQ29udGVudHMpO1xyXG4gICAgYXdhaXQgdmF1bHQubW9kaWZ5KGV4aXN0aW5nRmlsZSwgbmV3RmlsZUNvbnRlbnQuY29udGVudCk7XHJcbiAgICBpZiAobmV3RmlsZUNvbnRlbnQucG9zTnVtID09PSAtMSkge1xyXG4gICAgICBjb25zdCBhbGxMaW5lcyA9IGdldEFsbExpbmVzRnJvbUZpbGUobmV3RmlsZUNvbnRlbnQuY29udGVudCk7XHJcbiAgICAgIGxpbmVOdW0gPSBhbGxMaW5lcy5sZW5ndGggKyAxO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGluZU51bSA9IG5ld0ZpbGVDb250ZW50LnBvc051bSArIDE7XHJcbiAgICB9XHJcbiAgICAvLyBpZiAoaXNMaXN0KSB7XHJcbiAgICAvLyAgIHJldHVybiB7XHJcbiAgICAvLyAgICAgaWQ6IGRhdGUuZm9ybWF0KCdZWVlZTU1EREhIbW0nKSArICcwMCcgKyBsaW5lTnVtLFxyXG4gICAgLy8gICAgIHRpbGU6IEV2ZW50Q29udGVudCxcclxuICAgIC8vICAgICBkZWxldGVkQXQ6ICcnLFxyXG4gICAgLy8gICAgIGNyZWF0ZWRBdDogZGF0ZS5mb3JtYXQoJ1lZWVkvTU0vREQgSEg6bW06c3MnKSxcclxuICAgIC8vICAgICB1cGRhdGVkQXQ6IGRhdGUuZm9ybWF0KCdZWVlZL01NL0REIEhIOm1tOnNzJyksXHJcbiAgICAvLyAgICAgZXZlbnRUeXBlOiAnVE9ETy1CbGFuaycsXHJcbiAgICAvLyAgIH07XHJcbiAgICAvLyB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQ6IG1vbWVudChzdGFydERhdGUpLmZvcm1hdCgnWVlZWU1NRERISG1tJykgKyAnMDAnICsgbGluZU51bSxcclxuICAgICAgdGl0bGU6IEV2ZW50Q29udGVudCxcclxuICAgICAgc3RhcnQ6IG1vbWVudChzdGFydERhdGUpLnRvRGF0ZSgpLFxyXG4gICAgICBlbmQ6IG1vbWVudChzdGFydERhdGUpLnRvRGF0ZSgpLFxyXG4gICAgICBldmVudFR5cGU6ICdUQVNLLVRPRE8nLFxyXG4gICAgfTtcclxuICAgIC8vIH1cclxuICB9XHJcbn1cclxuXHJcbi8vY3JlZGl0IHRvIGNoaG91bWFubiwgb3JpZ2luYWwgY29kZSBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vY2hob3VtYW5uL3F1aWNrYWRkXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbnNlcnRBZnRlckhhbmRsZXIodGFyZ2V0U3RyaW5nOiBzdHJpbmcsIGZvcm1hdHRlZDogc3RyaW5nLCBmaWxlQ29udGVudDogc3RyaW5nKTogUHJvbWlzZTxNQ29udGVudD4ge1xyXG4gIC8vIGNvbnN0IHRhcmdldFN0cmluZzogc3RyaW5nID0gcGx1Z2luLnNldHRpbmdzLkluc2VydEFmdGVyO1xyXG4gIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgY29uc3QgdGFyZ2V0UmVnZXggPSBuZXcgUmVnRXhwKGBcXHMqJHthd2FpdCBlc2NhcGVSZWdFeHAodGFyZ2V0U3RyaW5nKX1cXHMqYCk7XHJcbiAgY29uc3QgZmlsZUNvbnRlbnRMaW5lczogc3RyaW5nW10gPSBnZXRMaW5lc0luU3RyaW5nKGZpbGVDb250ZW50KTtcclxuXHJcbiAgY29uc3QgdGFyZ2V0UG9zaXRpb24gPSBmaWxlQ29udGVudExpbmVzLmZpbmRJbmRleCgobGluZSkgPT4gdGFyZ2V0UmVnZXgudGVzdChsaW5lKSk7XHJcbiAgY29uc3QgdGFyZ2V0Tm90Rm91bmQgPSB0YXJnZXRQb3NpdGlvbiA9PT0gLTE7XHJcbiAgaWYgKHRhcmdldE5vdEZvdW5kKSB7XHJcbiAgICAvLyBpZiAodGhpcy5jaG9pY2UuaW5zZXJ0QWZ0ZXI/LmNyZWF0ZUlmTm90Rm91bmQpIHtcclxuICAgIC8vICAgICByZXR1cm4gYXdhaXQgY3JlYXRlSW5zZXJ0QWZ0ZXJJZk5vdEZvdW5kKGZvcm1hdHRlZCk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgY29uc29sZS5sb2coJ3VuYWJsZSB0byBmaW5kIGluc2VydCBhZnRlciBsaW5lIGluIGZpbGUuJyk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBuZXh0SGVhZGVyUG9zaXRpb25BZnRlclRhcmdldFBvc2l0aW9uID0gZmlsZUNvbnRlbnRMaW5lc1xyXG4gICAgLnNsaWNlKHRhcmdldFBvc2l0aW9uICsgMSlcclxuICAgIC5maW5kSW5kZXgoKGxpbmUpID0+IC9eIysgfC0tLS8udGVzdChsaW5lKSk7XHJcbiAgY29uc3QgZm91bmROZXh0SGVhZGVyID0gbmV4dEhlYWRlclBvc2l0aW9uQWZ0ZXJUYXJnZXRQb3NpdGlvbiAhPT0gLTE7XHJcblxyXG4gIGlmIChmb3VuZE5leHRIZWFkZXIpIHtcclxuICAgIGxldCBlbmRPZlNlY3Rpb25JbmRleDogbnVtYmVyO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSBuZXh0SGVhZGVyUG9zaXRpb25BZnRlclRhcmdldFBvc2l0aW9uICsgdGFyZ2V0UG9zaXRpb247IGkgPiB0YXJnZXRQb3NpdGlvbjsgaS0tKSB7XHJcbiAgICAgIGNvbnN0IGxpbmVJc05ld2xpbmU6IGJvb2xlYW4gPSAvXltcXHNcXG4gXSokLy50ZXN0KGZpbGVDb250ZW50TGluZXNbaV0pO1xyXG4gICAgICBpZiAoIWxpbmVJc05ld2xpbmUpIHtcclxuICAgICAgICBlbmRPZlNlY3Rpb25JbmRleCA9IGk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWVuZE9mU2VjdGlvbkluZGV4KSBlbmRPZlNlY3Rpb25JbmRleCA9IHRhcmdldFBvc2l0aW9uO1xyXG5cclxuICAgIHJldHVybiBhd2FpdCBpbnNlcnRUZXh0QWZ0ZXJQb3NpdGlvbkluQm9keShmb3JtYXR0ZWQsIGZpbGVDb250ZW50LCBlbmRPZlNlY3Rpb25JbmRleCwgZm91bmROZXh0SGVhZGVyKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGF3YWl0IGluc2VydFRleHRBZnRlclBvc2l0aW9uSW5Cb2R5KGZvcm1hdHRlZCwgZmlsZUNvbnRlbnQsIGZpbGVDb250ZW50TGluZXMubGVuZ3RoIC0gMSwgZm91bmROZXh0SGVhZGVyKTtcclxuICB9XHJcbiAgLy8gcmV0dXJuIGluc2VydFRleHRBZnRlclBvc2l0aW9uSW5Cb2R5KGZvcm1hdHRlZCwgZmlsZUNvbnRlbnQsIHRhcmdldFBvc2l0aW9uKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluc2VydFRleHRBZnRlclBvc2l0aW9uSW5Cb2R5KFxyXG4gIHRleHQ6IHN0cmluZyxcclxuICBib2R5OiBzdHJpbmcsXHJcbiAgcG9zOiBudW1iZXIsXHJcbiAgZm91bmQ/OiBib29sZWFuLFxyXG4pOiBQcm9taXNlPE1Db250ZW50PiB7XHJcbiAgaWYgKHBvcyA9PT0gLTEpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNvbnRlbnQ6IGAke2JvZHl9XFxuJHt0ZXh0fWAsXHJcbiAgICAgIHBvc051bTogLTEsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgc3BsaXRDb250ZW50ID0gYm9keS5zcGxpdCgnXFxuJyk7XHJcblxyXG4gIGlmIChmb3VuZCkge1xyXG4gICAgY29uc3QgcHJlID0gc3BsaXRDb250ZW50LnNsaWNlKDAsIHBvcyArIDEpLmpvaW4oJ1xcbicpO1xyXG4gICAgY29uc3QgcG9zdCA9IHNwbGl0Q29udGVudC5zbGljZShwb3MgKyAxKS5qb2luKCdcXG4nKTtcclxuICAgIC8vIHJldHVybiBgJHtwcmV9XFxuJHt0ZXh0fVxcbiR7cG9zdH1gO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY29udGVudDogYCR7cHJlfVxcbiR7dGV4dH1cXG4ke3Bvc3R9YCxcclxuICAgICAgcG9zTnVtOiBwb3MsXHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBwcmUgPSBzcGxpdENvbnRlbnQuc2xpY2UoMCwgcG9zICsgMSkuam9pbignXFxuJyk7XHJcbiAgICBjb25zdCBwb3N0ID0gc3BsaXRDb250ZW50LnNsaWNlKHBvcyArIDEpLmpvaW4oJ1xcbicpO1xyXG4gICAgaWYgKC9bXFxzXFxTXSo/L2cudGVzdChwb3N0KSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGNvbnRlbnQ6IGAke3ByZX1cXG4ke3RleHR9YCxcclxuICAgICAgICBwb3NOdW06IHBvcyxcclxuICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgY29udGVudDogYCR7cHJlfSR7dGV4dH1cXG4ke3Bvc3R9YCxcclxuICAgICAgICBwb3NOdW06IHBvcyxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIC8vIHJldHVybiBgJHtwcmV9JHt0ZXh0fVxcbiR7cG9zdH1gO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgZ2V0QWxsTGluZXNGcm9tRmlsZSA9IChjYWNoZTogc3RyaW5nKSA9PiBjYWNoZS5zcGxpdCgvXFxyP1xcbi8pO1xyXG4iLCJpbXBvcnQge21vbWVudH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHtnZXREYWlseU5vdGUsIGdldERhaWx5Tm90ZVNldHRpbmdzfSBmcm9tICdvYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2UnO1xuLy8gaW1wb3J0IGFwcFN0b3JlIGZyb20gXCIuLi9zdG9yZXMvYXBwU3RvcmVcIjtcbmltcG9ydCBkYWlseU5vdGVzU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9kYWlseU5vdGVzU2VydmljZSc7XG5pbXBvcnQge1RGaWxlfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgYXBwU3RvcmUgZnJvbSAnLi4vc3RvcmVzL2FwcFN0b3JlJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoYW5nZUV2ZW50KFxuICBldmVudGlkOiBzdHJpbmcsXG4gIG9yaWdpbmFsQ29udGVudDogc3RyaW5nLFxuICBjb250ZW50OiBzdHJpbmcsXG4gIGV2ZW50VHlwZTogc3RyaW5nLFxuKTogUHJvbWlzZTxNb2RlbC5FdmVudD4ge1xuICBjb25zdCB7ZGFpbHlOb3Rlc30gPSBkYWlseU5vdGVzU2VydmljZS5nZXRTdGF0ZSgpO1xuICBjb25zdCB7dmF1bHR9ID0gYXBwU3RvcmUuZ2V0U3RhdGUoKS5kYWlseU5vdGVzU3RhdGUuYXBwO1xuICBjb25zdCB0aW1lU3RyaW5nID0gZXZlbnRpZC5zbGljZSgwLCAxMykgKyAnMDAnO1xuICBjb25zdCBpZFN0cmluZyA9IHBhcnNlSW50KGV2ZW50aWQuc2xpY2UoMTQpKTtcbiAgY29uc3Qgb3JpZ2luYWxEYXRlID0gbW9tZW50KHRpbWVTdHJpbmcsICdZWVlZTU1EREhIbW1TUycpO1xuICBjb25zdCBkYWlseU5vdGUgPSBnZXREYWlseU5vdGUob3JpZ2luYWxEYXRlLCBkYWlseU5vdGVzKTtcbiAgY29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCB2YXVsdC5yZWFkKGRhaWx5Tm90ZSk7XG4gIGNvbnN0IGZpbGVMaW5lcyA9IGdldEFsbExpbmVzRnJvbUZpbGUoZmlsZUNvbnRlbnQpO1xuICBjb25zdCByZW1vdmVFbnRlciA9IGNvbnRlbnQucmVwbGFjZSgvXFxuL2csICc8YnI+Jyk7XG4gIGNvbnN0IG9yaWdpbmFsTGluZSA9IGZpbGVMaW5lc1tpZFN0cmluZ107XG4gIGNvbnN0IG5ld0xpbmUgPSBmaWxlTGluZXNbaWRTdHJpbmddLnJlcGxhY2Uob3JpZ2luYWxDb250ZW50LCByZW1vdmVFbnRlcik7XG4gIGNvbnN0IG5ld0ZpbGVDb250ZW50ID0gZmlsZUNvbnRlbnQucmVwbGFjZShvcmlnaW5hbExpbmUsIG5ld0xpbmUpO1xuICBhd2FpdCB2YXVsdC5tb2RpZnkoZGFpbHlOb3RlLCBuZXdGaWxlQ29udGVudCk7XG4gIHJldHVybiB7XG4gICAgaWQ6IGV2ZW50aWQsXG4gICAgdGl0bGU6IHJlbW92ZUVudGVyLFxuICAgIHN0YXJ0OiBtb21lbnQob3JpZ2luYWxEYXRlLmZvcm1hdCgnWVlZWS9NTS9ERCBISDptbTpTUycpKS50b0RhdGUoKSxcbiAgICBlbmQ6IG1vbWVudChvcmlnaW5hbERhdGUuZm9ybWF0KCdZWVlZL01NL0REIEhIOm1tOlNTJykpLnRvRGF0ZSgpLFxuICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsZShldmVudGlkOiBzdHJpbmcpOiBURmlsZSB7XG4gIGNvbnN0IHtkYWlseU5vdGVzfSA9IGRhaWx5Tm90ZXNTZXJ2aWNlLmdldFN0YXRlKCk7XG4gIGNvbnN0IHRpbWVTdHJpbmcgPSBldmVudGlkLnNsaWNlKDAsIDEzKTtcbiAgY29uc3QgY2hhbmdlRGF0ZSA9IG1vbWVudCh0aW1lU3RyaW5nLCAnWVlZWU1NRERISG1tU1MnKTtcbiAgY29uc3QgZGFpbHlOb3RlID0gZ2V0RGFpbHlOb3RlKGNoYW5nZURhdGUsIGRhaWx5Tm90ZXMpO1xuICByZXR1cm4gZGFpbHlOb3RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGFpbHlOb3RlUGF0aCgpOiBzdHJpbmcge1xuICBjb25zdCBkYWlseU5vdGVzU2V0dGluZyA9IGdldERhaWx5Tm90ZVNldHRpbmdzKCk7XG4gIGNvbnN0IGRhaWx5Tm90ZVBhdGggPSBkYWlseU5vdGVzU2V0dGluZy5mb2xkZXI7XG4gIHJldHVybiBkYWlseU5vdGVQYXRoO1xufVxuXG5jb25zdCBnZXRBbGxMaW5lc0Zyb21GaWxlID0gKGNhY2hlOiBzdHJpbmcpID0+IGNhY2hlLnNwbGl0KC9cXHI/XFxuLyk7XG4iLCJpbXBvcnQge25vcm1hbGl6ZVBhdGgsIFRGb2xkZXIsIFRGaWxlLCBtb21lbnR9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7Z2V0QWxsRGFpbHlOb3RlcywgZ2V0RGFpbHlOb3RlU2V0dGluZ3MsIGdldERhdGVGcm9tRmlsZX0gZnJvbSAnb2JzaWRpYW4tZGFpbHktbm90ZXMtaW50ZXJmYWNlJztcbmltcG9ydCBhcHBTdG9yZSBmcm9tICcuLi9zdG9yZXMvYXBwU3RvcmUnO1xuaW1wb3J0IHtQcm9jZXNzRW50cmllc0JlbG93fSBmcm9tICcuLi9iaWdDYWxlbmRhcic7XG5pbXBvcnQge0RlZmF1bHRFdmVudENvbXBvc2l0aW9ufSBmcm9tICcuLi9iaWdDYWxlbmRhcic7XG5cbmV4cG9ydCBjbGFzcyBEYWlseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJlbWFpbmluZ0V2ZW50cyhub3RlOiBURmlsZSk6IFByb21pc2U8bnVtYmVyPiB7XG4gIGlmICghbm90ZSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGNvbnN0IHt2YXVsdH0gPSBhcHBTdG9yZS5nZXRTdGF0ZSgpLmRhaWx5Tm90ZXNTdGF0ZS5hcHA7XG4gIGxldCBmaWxlQ29udGVudHMgPSBhd2FpdCB2YXVsdC5yZWFkKG5vdGUpO1xuICBsZXQgcmVnZXhNYXRjaDtcbiAgaWYgKFxuICAgIERlZmF1bHRFdmVudENvbXBvc2l0aW9uICE9ICcnICYmXG4gICAgL3tUSU1FfS9nLnRlc3QoRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24pICYmXG4gICAgL3tDT05URU5UfS9nLnRlc3QoRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24pXG4gICkge1xuICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcmVnZXhNYXRjaCA9XG4gICAgICAnKC18XFxcXCopIChcXFxcWyguezF9KVxcXFxdXFxcXHMpPycgK1xuICAgICAgRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24ucmVwbGFjZSgve1RJTUV9L2csICcoKFxcXFw8dGltZVxcXFw+KT9cXFxcZHsxLDJ9OlxcXFxkezJ9KT8nKS5yZXBsYWNlKC8ge0NPTlRFTlR9L2csICcnKTtcbiAgfSBlbHNlIHtcbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHJlZ2V4TWF0Y2ggPSAnKC18XFxcXCopIChcXFxcWyguezF9KVxcXFxdXFxcXHMpPygoXFxcXDx0aW1lXFxcXD4pP1xcXFxkezEsMn1cXFxcOlxcXFxkezJ9KT8nO1xuICB9XG4gIGNvbnN0IHJlZ2V4TWF0Y2hSZSA9IG5ldyBSZWdFeHAocmVnZXhNYXRjaCwgJ2cnKTtcbiAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgbWF0Y2hMZW5ndGggPSAoZmlsZUNvbnRlbnRzLm1hdGNoKHJlZ2V4TWF0Y2hSZSkgfHwgW10pLmxlbmd0aDtcbiAgLy8gY29uc3QgbWF0Y2hMZW5ndGggPSAoZmlsZUNvbnRlbnRzLm1hdGNoKC8oLXxcXCopIChcXFsgXFxdXFxzKT8oKFxcPHRpbWVcXD4pP1xcZHsxLDJ9XFw6XFxkezJ9KT8vZykgfHwgW10pLmxlbmd0aDtcbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKFByb2Nlc3NFbnRyaWVzQmVsb3cucmVwbGFjZSgvKFsuPyorXiRbXFxdXFxcXCgpe318LV0pL2csICdcXFxcJDEnKSwgJ2cnKTtcbiAgY29uc3QgcHJvY2Vzc0VudHJpZXNIZWFkZXIgPSAoZmlsZUNvbnRlbnRzLm1hdGNoKHJlKSB8fCBbXSkubGVuZ3RoO1xuICBmaWxlQ29udGVudHMgPSBudWxsO1xuICBpZiAocHJvY2Vzc0VudHJpZXNIZWFkZXIpIHtcbiAgICByZXR1cm4gbWF0Y2hMZW5ndGg7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRFdmVudHNGcm9tRGFpbHlOb3RlKGRhaWx5Tm90ZTogVEZpbGUgfCBudWxsLCBkYWlseUV2ZW50czogYW55W10pOiBQcm9taXNlPE1vZGVsLkV2ZW50W10+IHtcbiAgaWYgKCFkYWlseU5vdGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3Qge3ZhdWx0fSA9IGFwcFN0b3JlLmdldFN0YXRlKCkuZGFpbHlOb3Rlc1N0YXRlLmFwcDtcbiAgY29uc3QgRXZlbnRzID0gYXdhaXQgZ2V0UmVtYWluaW5nRXZlbnRzKGRhaWx5Tm90ZSk7XG5cbiAgaWYgKEV2ZW50cykge1xuICAgIGxldCBmaWxlQ29udGVudHMgPSBhd2FpdCB2YXVsdC5yZWFkKGRhaWx5Tm90ZSk7XG4gICAgbGV0IGZpbGVMaW5lcyA9IGdldEFsbExpbmVzRnJvbUZpbGUoZmlsZUNvbnRlbnRzKTtcbiAgICBjb25zdCBzdGFydERhdGUgPSBnZXREYXRlRnJvbUZpbGUoZGFpbHlOb3RlLCAnZGF5Jyk7XG4gICAgY29uc3QgZW5kRGF0ZSA9IGdldERhdGVGcm9tRmlsZShkYWlseU5vdGUsICdkYXknKTtcbiAgICBsZXQgcHJvY2Vzc0hlYWRlckZvdW5kID0gZmFsc2U7XG4gICAgbGV0IGV2ZW50VHlwZTogc3RyaW5nO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZUxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsaW5lID0gZmlsZUxpbmVzW2ldO1xuICAgICAgaWYgKGxpbmUubGVuZ3RoID09PSAwKSBjb250aW51ZTtcbiAgICAgIGlmIChwcm9jZXNzSGVhZGVyRm91bmQgPT0gZmFsc2UgJiYgbGluZUNvbnRhaW5zUGFyc2VCZWxvd1Rva2VuKGxpbmUpKSB7XG4gICAgICAgIHByb2Nlc3NIZWFkZXJGb3VuZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzc0hlYWRlckZvdW5kID09IHRydWUgJiYgIWxpbmVDb250YWluc1BhcnNlQmVsb3dUb2tlbihsaW5lKSAmJiAvXiN7MSx9IC9nLnRlc3QobGluZSkpIHtcbiAgICAgICAgcHJvY2Vzc0hlYWRlckZvdW5kID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChsaW5lQ29udGFpbnNUaW1lKGxpbmUpICYmIHByb2Nlc3NIZWFkZXJGb3VuZCkge1xuICAgICAgICBjb25zdCBob3VyVGV4dCA9IGV4dHJhY3RIb3VyRnJvbUJ1bGxldExpbmUobGluZSk7XG4gICAgICAgIGNvbnN0IG1pblRleHQgPSBleHRyYWN0TWluRnJvbUJ1bGxldExpbmUobGluZSk7XG4gICAgICAgIHN0YXJ0RGF0ZS5ob3VycyhwYXJzZUludChob3VyVGV4dCkpO1xuICAgICAgICBzdGFydERhdGUubWludXRlcyhwYXJzZUludChtaW5UZXh0KSk7XG4gICAgICAgIGVuZERhdGUuaG91cnMocGFyc2VJbnQoaG91clRleHQpKTtcbiAgICAgICAgaWYgKHBhcnNlSW50KGhvdXJUZXh0KSA+IDIyKSB7XG4gICAgICAgICAgZW5kRGF0ZS5taW51dGVzKHBhcnNlSW50KG1pblRleHQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmREYXRlLm1pbnV0ZXMocGFyc2VJbnQobWluVGV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvXlxccypbLSpdXFxzKFxcWyguezF9KVxcXSlcXHMvZy50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgY29uc3QgZXZlbnRUYXNrVHlwZSA9IGV4dHJhY3RFdmVudFRhc2tUeXBlRnJvbUxpbmUobGluZSk7XG4gICAgICAgICAgaWYgKGV2ZW50VGFza1R5cGUgPT09ICcgJykge1xuICAgICAgICAgICAgZXZlbnRUeXBlID0gJ1RBU0stVE9ETyc7XG4gICAgICAgICAgfSBlbHNlIGlmIChldmVudFRhc2tUeXBlID09PSAneCcgfHwgZXZlbnRUYXNrVHlwZSA9PT0gJ1gnKSB7XG4gICAgICAgICAgICBldmVudFR5cGUgPSAnVEFTSy1ET05FJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXZlbnRUeXBlID0gJ1RBU0stJyArIGV2ZW50VGFza1R5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZW50VHlwZSA9ICdKT1VSTkFMJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByYXdUZXh0ID0gZXh0cmFjdFRleHRGcm9tVG9kb0xpbmUobGluZSk7XG4gICAgICAgIGlmIChyYXdUZXh0ICE9PSAnJykge1xuICAgICAgICAgIGRhaWx5RXZlbnRzLnB1c2goe1xuICAgICAgICAgICAgaWQ6IHN0YXJ0RGF0ZS5mb3JtYXQoJ1lZWVlNTURESEhtbScpICsgJzAwJyArIGksXG4gICAgICAgICAgICB0aXRsZTogcmF3VGV4dCxcbiAgICAgICAgICAgIHN0YXJ0OiBtb21lbnQoc3RhcnREYXRlKS50b0RhdGUoKSxcbiAgICAgICAgICAgIGVuZDogbW9tZW50KHN0YXJ0RGF0ZSkudG9EYXRlKCksXG4gICAgICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmaWxlTGluZXMgPSBudWxsO1xuICAgIGZpbGVDb250ZW50cyA9IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEV2ZW50cygpOiBQcm9taXNlPGFueVtdPiB7XG4gIGNvbnN0IGV2ZW50czogYW55W10gfCBQcm9taXNlTGlrZTxhbnlbXT4gPSBbXTtcbiAgY29uc3Qge3ZhdWx0fSA9IGFwcFN0b3JlLmdldFN0YXRlKCkuZGFpbHlOb3Rlc1N0YXRlLmFwcDtcbiAgY29uc3Qge2ZvbGRlcn0gPSBnZXREYWlseU5vdGVTZXR0aW5ncygpO1xuXG4gIGNvbnN0IGRhaWx5Tm90ZXNGb2xkZXIgPSB2YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgobm9ybWFsaXplUGF0aChmb2xkZXIpKSBhcyBURm9sZGVyO1xuXG4gIGlmICghZGFpbHlOb3Rlc0ZvbGRlcikge1xuICAgIHRocm93IG5ldyBEYWlseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yKCdGYWlsZWQgdG8gZmluZCBkYWlseSBub3RlcyBmb2xkZXInKTtcbiAgfVxuXG4gIGNvbnN0IGRhaWx5Tm90ZXMgPSBnZXRBbGxEYWlseU5vdGVzKCk7XG5cbiAgZm9yIChjb25zdCBzdHJpbmcgaW4gZGFpbHlOb3Rlcykge1xuICAgIGlmIChkYWlseU5vdGVzW3N0cmluZ10gaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgYXdhaXQgZ2V0RXZlbnRzRnJvbURhaWx5Tm90ZShkYWlseU5vdGVzW3N0cmluZ10sIGV2ZW50cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50cztcbn1cblxuY29uc3QgZ2V0QWxsTGluZXNGcm9tRmlsZSA9IChjYWNoZTogc3RyaW5nKSA9PiBjYWNoZS5zcGxpdCgvXFxyP1xcbi8pO1xuLy8gY29uc3QgbGluZUlzVmFsaWRUb2RvID0gKGxpbmU6IHN0cmluZykgPT4ge1xuLy8gLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbi8vICAgcmV0dXJuIC9eXFxzKltcXC1cXCpdXFxzXFxbKFxcc3x4fFh8XFxcXHxcXC18XFw+fER8XFw/fFxcL3xcXCt8UnxcXCF8aXxCfFB8QylcXF1cXHM/XFxzKlxcUy8udGVzdChsaW5lKVxuLy8gfVxuY29uc3QgbGluZUNvbnRhaW5zVGltZSA9IChsaW5lOiBzdHJpbmcpID0+IHtcbiAgbGV0IHJlZ2V4TWF0Y2g7XG4gIGlmIChcbiAgICBEZWZhdWx0RXZlbnRDb21wb3NpdGlvbiAhPSAnJyAmJlxuICAgIC97VElNRX0vZy50ZXN0KERlZmF1bHRFdmVudENvbXBvc2l0aW9uKSAmJlxuICAgIC97Q09OVEVOVH0vZy50ZXN0KERlZmF1bHRFdmVudENvbXBvc2l0aW9uKVxuICApIHtcbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHJlZ2V4TWF0Y2ggPVxuICAgICAgJ15cXFxccyooLXxcXFxcKilcXFxccyhcXFxcWyguezF9KVxcXFxdXFxcXHMpPycgK1xuICAgICAgRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24ucmVwbGFjZSgve1RJTUV9L2csICcoXFxcXDx0aW1lXFxcXD4pP1xcXFxkezEsMn06XFxcXGR7Mn0oXFxcXDxcXFxcL3RpbWVcXFxcPik/JykucmVwbGFjZShcbiAgICAgICAgL3tDT05URU5UfS9nLFxuICAgICAgICAnKC4qKSQnLFxuICAgICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHJlZ2V4TWF0Y2ggPSAnXlxcXFxzKigtfFxcXFwqKVxcXFxzKFxcXFxbKC57MX0pXFxcXF1cXFxccyk/KFxcXFw8dGltZVxcXFw+KT9cXFxcZHsxLDJ9XFxcXDpcXFxcZHsyfSguKikkJztcbiAgfVxuICBjb25zdCByZWdleE1hdGNoUmUgPSBuZXcgUmVnRXhwKHJlZ2V4TWF0Y2gsICcnKTtcbiAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgcmV0dXJuIHJlZ2V4TWF0Y2hSZS50ZXN0KGxpbmUpO1xuICAvLyBUaGUgYmVsb3cgbGluZSBleGNsdWRlcyBlbnRyaWVzIHdpdGggYSAnOicgYWZ0ZXIgdGhlIHRpbWUgYXMgSSB3YXMgaGF2aW5nIGlzc3VlcyB3aXRoIG15IGNhbGVuZGFyXG4gIC8vIGJlaW5nIHB1bGxlZCBpbi4gT25jZSBtYWRlIGNvbmZpZ3VyYWJsZSB3aWxsIGJlIHNpbXBsZXIgdG8gbWFuYWdlLlxuICAvLyByZXR1cm4gL15cXHMqW1xcLVxcKl1cXHMoXFxbKFxcc3x4fFh8XFxcXHxcXC18XFw+fER8XFw/fFxcL3xcXCt8UnxcXCF8aXxCfFB8QylcXF1cXHMpPyhcXDx0aW1lXFw+KT9cXGR7MSwyfVxcOlxcZHsyfVteOl0oLiopJC8udGVzdChsaW5lKTtcbn07XG5cbmNvbnN0IGxpbmVDb250YWluc1BhcnNlQmVsb3dUb2tlbiA9IChsaW5lOiBzdHJpbmcpID0+IHtcbiAgaWYgKFByb2Nlc3NFbnRyaWVzQmVsb3cgPT09ICcnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKFByb2Nlc3NFbnRyaWVzQmVsb3cucmVwbGFjZSgvKFsuPyorXiRbXFxdXFxcXCgpe318LV0pL2csICdcXFxcJDEnKSwgJycpO1xuICByZXR1cm4gcmUudGVzdChsaW5lKTtcbn07XG5cbmNvbnN0IGV4dHJhY3RUZXh0RnJvbVRvZG9MaW5lID0gKGxpbmU6IHN0cmluZykgPT4ge1xuICBsZXQgcmVnZXhNYXRjaDtcbiAgaWYgKFxuICAgIERlZmF1bHRFdmVudENvbXBvc2l0aW9uICE9ICcnICYmXG4gICAgL3tUSU1FfS9nLnRlc3QoRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24pICYmXG4gICAgL3tDT05URU5UfS9nLnRlc3QoRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24pXG4gICkge1xuICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcmVnZXhNYXRjaCA9XG4gICAgICAnXlxcXFxzKltcXFxcLVxcXFwqXVxcXFxzKFxcXFxbKC57MX0pXFxcXF1cXFxccz8pPycgK1xuICAgICAgRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24ucmVwbGFjZSgve1RJTUV9L2csICcoXFxcXDx0aW1lXFxcXD4pPygoXFxcXGR7MSwyfSlcXFxcOihcXFxcZHsyfSkpPyhcXFxcPFxcXFwvdGltZVxcXFw+KT8nKS5yZXBsYWNlKFxuICAgICAgICAve0NPTlRFTlR9L2csXG4gICAgICAgICcoLiopJCcsXG4gICAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcmVnZXhNYXRjaCA9ICdeXFxcXHMqW1xcXFwtXFxcXCpdXFxcXHMoXFxcXFsoLnsxfSlcXFxcXVxcXFxzPyk/KFxcXFw8dGltZVxcXFw+KT8oKFxcXFxkezEsMn0pXFxcXDooXFxcXGR7Mn0pKT8oXFxcXDxcXFxcL3RpbWVcXFxcPik/XFxcXHM/KC4qKSQnO1xuICB9XG4gIGNvbnN0IHJlZ2V4TWF0Y2hSZSA9IG5ldyBSZWdFeHAocmVnZXhNYXRjaCwgJycpO1xuICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICByZXR1cm4gcmVnZXhNYXRjaFJlLmV4ZWMobGluZSk/Lls4XTtcbiAgLy8gcmV0dXJuIC9eXFxzKltcXC1cXCpdXFxzKFxcWyguezF9KVxcXVxccz8pPyhcXDx0aW1lXFw+KT8oKFxcZHsxLDJ9KVxcOihcXGR7Mn0pKT8oXFw8XFwvdGltZVxcPik/XFxzPyguKikkLy5leGVjKGxpbmUpPy5bOF07XG59O1xuXG5jb25zdCBleHRyYWN0SG91ckZyb21CdWxsZXRMaW5lID0gKGxpbmU6IHN0cmluZykgPT4ge1xuICBsZXQgcmVnZXhIb3VyTWF0Y2g7XG4gIGlmIChcbiAgICBEZWZhdWx0RXZlbnRDb21wb3NpdGlvbiAhPSAnJyAmJlxuICAgIC97VElNRX0vZy50ZXN0KERlZmF1bHRFdmVudENvbXBvc2l0aW9uKSAmJlxuICAgIC97Q09OVEVOVH0vZy50ZXN0KERlZmF1bHRFdmVudENvbXBvc2l0aW9uKVxuICApIHtcbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHJlZ2V4SG91ck1hdGNoID1cbiAgICAgICdeXFxcXHMqW1xcXFwtXFxcXCpdXFxcXHMoXFxcXFsoLnsxfSlcXFxcXVxcXFxzPyk/JyArXG4gICAgICBEZWZhdWx0RXZlbnRDb21wb3NpdGlvbi5yZXBsYWNlKC97VElNRX0vZywgJyhcXFxcPHRpbWVcXFxcPik/KFxcXFxkezEsMn0pXFxcXDooXFxcXGR7Mn0pKFxcXFw8XFxcXC90aW1lXFxcXD4pPycpLnJlcGxhY2UoXG4gICAgICAgIC97Q09OVEVOVH0vZyxcbiAgICAgICAgJyguKikkJyxcbiAgICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZWdleEhvdXJNYXRjaCA9ICdeXFxcXHMqW1xcXFwtXFxcXCpdXFxcXHMoXFxcXFsoLnsxfSlcXFxcXVxcXFxzPyk/KFxcXFw8dGltZVxcXFw+KT8oXFxcXGR7MSwyfSlcXFxcOihcXFxcZHsyfSkoLiopJCc7XG4gIH1cbiAgY29uc3QgcmVnZXhNYXRjaFJlID0gbmV3IFJlZ0V4cChyZWdleEhvdXJNYXRjaCwgJycpO1xuICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICByZXR1cm4gcmVnZXhNYXRjaFJlLmV4ZWMobGluZSk/Lls0XTtcbn07XG5cbmNvbnN0IGV4dHJhY3RNaW5Gcm9tQnVsbGV0TGluZSA9IChsaW5lOiBzdHJpbmcpID0+IHtcbiAgbGV0IHJlZ2V4SG91ck1hdGNoO1xuICBpZiAoXG4gICAgRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24gIT0gJycgJiZcbiAgICAve1RJTUV9L2cudGVzdChEZWZhdWx0RXZlbnRDb21wb3NpdGlvbikgJiZcbiAgICAve0NPTlRFTlR9L2cudGVzdChEZWZhdWx0RXZlbnRDb21wb3NpdGlvbilcbiAgKSB7XG4gICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZWdleEhvdXJNYXRjaCA9XG4gICAgICAnXlxcXFxzKltcXFxcLVxcXFwqXVxcXFxzKFxcXFxbKC57MX0pXFxcXF1cXFxccz8pPycgK1xuICAgICAgRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24ucmVwbGFjZSgve1RJTUV9L2csICcoXFxcXDx0aW1lXFxcXD4pPyhcXFxcZHsxLDJ9KVxcXFw6KFxcXFxkezJ9KShcXFxcPFxcXFwvdGltZVxcXFw+KT8nKS5yZXBsYWNlKFxuICAgICAgICAve0NPTlRFTlR9L2csXG4gICAgICAgICcoLiopJCcsXG4gICAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcmVnZXhIb3VyTWF0Y2ggPSAnXlxcXFxzKltcXFxcLVxcXFwqXVxcXFxzKFxcXFxbKC57MX0pXFxcXF1cXFxccz8pPyhcXFxcPHRpbWVcXFxcPik/KFxcXFxkezEsMn0pXFxcXDooXFxcXGR7Mn0pKC4qKSQnO1xuICB9XG4gIGNvbnN0IHJlZ2V4TWF0Y2hSZSA9IG5ldyBSZWdFeHAocmVnZXhIb3VyTWF0Y2gsICcnKTtcbiAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgcmV0dXJuIHJlZ2V4TWF0Y2hSZS5leGVjKGxpbmUpPy5bNV07XG4gIC8vIC9eXFxzKltcXC1cXCpdXFxzKFxcWyguezF9KVxcXVxccz8pPyhcXDx0aW1lXFw+KT8oXFxkezEsMn0pXFw6KFxcZHsyfSkoLiopJC8uZXhlYyhsaW5lKT8uWzVdO1xufTtcblxuY29uc3QgZXh0cmFjdEV2ZW50VGFza1R5cGVGcm9tTGluZSA9IChsaW5lOiBzdHJpbmcpID0+XG4gIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIC9eXFxzKltcXC1cXCpdXFxzKFxcWyguezF9KVxcXSlcXHMoLiopJC8uZXhlYyhsaW5lKT8uWzJdO1xuLy8gVGhlIGJlbG93IGxpbmUgZXhjbHVkZXMgZW50cmllcyB3aXRoIGEgJzonIGFmdGVyIHRoZSB0aW1lIGFzIEkgd2FzIGhhdmluZyBpc3N1ZXMgd2l0aCBteSBjYWxlbmRhclxuLy8gYmVpbmcgcHVsbGVkIGluLiBPbmNlIG1hZGUgY29uZmlndXJhYmxlIHdpbGwgYmUgc2ltcGxlciB0byBtYW5hZ2UuXG4vLyByZXR1cm4gL15cXHMqW1xcLVxcKl1cXHMoXFxbKFxcc3x4fFh8XFxcXHxcXC18XFw+fER8XFw/fFxcL3xcXCt8UnxcXCF8aXxCfFB8QylcXF1cXHMpPyhcXDx0aW1lXFw+KT9cXGR7MSwyfVxcOlxcZHsyfVteOl0oLiopJC8udGVzdChsaW5lKTtcbiIsImltcG9ydCB7Z2V0RGFpbHlOb3RlUGF0aH0gZnJvbSAnLi9vYlVwZGF0ZUV2ZW50JztcbmltcG9ydCB7VEZpbGUsIG5vcm1hbGl6ZVBhdGgsIE5vdGljZX0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHttb21lbnR9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBhcHBTdG9yZSBmcm9tICcuLi9zdG9yZXMvYXBwU3RvcmUnO1xuaW1wb3J0IHtjcmVhdGVEYWlseU5vdGUsIGdldEFsbERhaWx5Tm90ZXMsIGdldERhaWx5Tm90ZX0gZnJvbSAnb2JzaWRpYW4tZGFpbHktbm90ZXMtaW50ZXJmYWNlJztcbmltcG9ydCB7aW5zZXJ0QWZ0ZXJIYW5kbGVyfSBmcm9tICcuL29iQ3JlYXRlRXZlbnQnO1xuaW1wb3J0IHtJbnNlcnRBZnRlcn0gZnJvbSAnLi4vYmlnQ2FsZW5kYXInO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzdG9yZURlbGV0ZWRFdmVudChkZWxldGVkRXZlbnRpZDogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT4ge1xuICBjb25zdCB7dmF1bHQsIG1ldGFkYXRhQ2FjaGV9ID0gYXBwU3RvcmUuZ2V0U3RhdGUoKS5kYWlseU5vdGVzU3RhdGUuYXBwO1xuICBpZiAoL1xcZHsxNCx9Ly50ZXN0KGRlbGV0ZWRFdmVudGlkKSkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gZ2V0RGFpbHlOb3RlUGF0aCgpO1xuICAgIGNvbnN0IGFic29sdXRlUGF0aCA9IGZpbGVQYXRoICsgJy9kZWxldGUubWQnO1xuICAgIGNvbnN0IGRlbGV0ZUZpbGUgPSBtZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KCcnLCBhYnNvbHV0ZVBhdGgpO1xuXG4gICAgaWYgKGRlbGV0ZUZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgbGV0IGZpbGVDb250ZW50cyA9IGF3YWl0IHZhdWx0LnJlYWQoZGVsZXRlRmlsZSk7XG4gICAgICBsZXQgZmlsZUxpbmVzID0gZ2V0QWxsTGluZXNGcm9tRmlsZShmaWxlQ29udGVudHMpO1xuICAgICAgaWYgKGZpbGVMaW5lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbGluZU51bSA9IHBhcnNlSW50KGRlbGV0ZWRFdmVudGlkLnNsaWNlKDE0KSk7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBmaWxlTGluZXNbbGluZU51bSAtIDFdO1xuICAgICAgICBjb25zdCBuZXdEZWxldGVmaWxlQ29udGVudHMgPSBmaWxlQ29udGVudHMucmVwbGFjZShsaW5lLCAnJyk7XG4gICAgICAgIGF3YWl0IHZhdWx0Lm1vZGlmeShkZWxldGVGaWxlLCBuZXdEZWxldGVmaWxlQ29udGVudHMpO1xuICAgICAgICBpZiAoL14tICguKykkLy50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgY29uc3QgaWQgPSBleHRyYWN0SURmcm9tVGV4dChsaW5lKTtcbiAgICAgICAgICBjb25zdCBkYXRlID0gbW9tZW50KGlkLCAnWVlZWU1NRERISG1tc3MnKTtcbiAgICAgICAgICBjb25zdCB0aW1lSG91ciA9IGRhdGUuZm9ybWF0KCdISCcpO1xuICAgICAgICAgIGNvbnN0IHRpbWVNaW51dGUgPSBkYXRlLmZvcm1hdCgnbW0nKTtcblxuICAgICAgICAgIGNvbnN0IG5ld0V2ZW50ID0gYC0gYCArIFN0cmluZyh0aW1lSG91cikgKyBgOmAgKyBTdHJpbmcodGltZU1pbnV0ZSkgKyBgIGAgKyBleHRyYWN0Q29udGVudGZyb21UZXh0KGxpbmUpO1xuICAgICAgICAgIGNvbnN0IGRhaWx5Tm90ZXMgPSBhd2FpdCBnZXRBbGxEYWlseU5vdGVzKCk7XG4gICAgICAgICAgY29uc3QgZXhpc3RpbmdGaWxlID0gZ2V0RGFpbHlOb3RlKGRhdGUsIGRhaWx5Tm90ZXMpO1xuICAgICAgICAgIGlmICghZXhpc3RpbmdGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXdhaXQgY3JlYXRlRGFpbHlOb3RlKGRhdGUpO1xuICAgICAgICAgICAgY29uc3QgZmlsZUNvbnRlbnRzID0gYXdhaXQgdmF1bHQucmVhZChmaWxlKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0ZpbGVDb250ZW50ID0gYXdhaXQgaW5zZXJ0QWZ0ZXJIYW5kbGVyKEluc2VydEFmdGVyLCBuZXdFdmVudCwgZmlsZUNvbnRlbnRzKTtcbiAgICAgICAgICAgIGF3YWl0IHZhdWx0Lm1vZGlmeShmaWxlLCBuZXdGaWxlQ29udGVudC5jb250ZW50KTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkZWxldGVkQXQ6ICcnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmlsZUNvbnRlbnRzID0gYXdhaXQgdmF1bHQucmVhZChleGlzdGluZ0ZpbGUpO1xuICAgICAgICAgICAgY29uc3QgbmV3RmlsZUNvbnRlbnQgPSBhd2FpdCBpbnNlcnRBZnRlckhhbmRsZXIoSW5zZXJ0QWZ0ZXIsIG5ld0V2ZW50LCBmaWxlQ29udGVudHMpO1xuICAgICAgICAgICAgYXdhaXQgdmF1bHQubW9kaWZ5KGV4aXN0aW5nRmlsZSwgbmV3RmlsZUNvbnRlbnQuY29udGVudCk7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGVsZXRlZEF0OiAnJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpbGVMaW5lcyA9IG51bGw7XG4gICAgICAgIGZpbGVDb250ZW50cyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVGb3JldmVyKGRlbGV0ZWRFdmVudGlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3Qge3ZhdWx0LCBtZXRhZGF0YUNhY2hlfSA9IGFwcFN0b3JlLmdldFN0YXRlKCkuZGFpbHlOb3Rlc1N0YXRlLmFwcDtcbiAgaWYgKC9cXGR7MTQsfS8udGVzdChkZWxldGVkRXZlbnRpZCkpIHtcbiAgICBjb25zdCBmaWxlUGF0aCA9IGdldERhaWx5Tm90ZVBhdGgoKTtcbiAgICBjb25zdCBhYnNvbHV0ZVBhdGggPSBmaWxlUGF0aCArICcvZGVsZXRlLm1kJztcbiAgICBjb25zdCBkZWxldGVGaWxlID0gbWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdCgnJywgYWJzb2x1dGVQYXRoKTtcblxuICAgIGlmIChkZWxldGVGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgIGxldCBmaWxlQ29udGVudHMgPSBhd2FpdCB2YXVsdC5yZWFkKGRlbGV0ZUZpbGUpO1xuICAgICAgbGV0IGZpbGVMaW5lcyA9IGdldEFsbExpbmVzRnJvbUZpbGUoZmlsZUNvbnRlbnRzKTtcbiAgICAgIGlmIChmaWxlTGluZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGxpbmVOdW0gPSBwYXJzZUludChkZWxldGVkRXZlbnRpZC5zbGljZSgxNCkpO1xuICAgICAgICBjb25zdCBsaW5lID0gZmlsZUxpbmVzW2xpbmVOdW0gLSAxXTtcbiAgICAgICAgaWYgKC9eLSAoLispJC8udGVzdChsaW5lKSkge1xuICAgICAgICAgIC8vIGNvbnN0IGlkID0gZXh0cmFjdElEZnJvbVRleHQoZmlsZUxpbmVzW2ldKTtcbiAgICAgICAgICBjb25zdCBuZXdGaWxlQ29udGVudCA9IGZpbGVDb250ZW50cy5yZXBsYWNlKGxpbmUsICcnKTtcbiAgICAgICAgICBhd2FpdCB2YXVsdC5tb2RpZnkoZGVsZXRlRmlsZSwgbmV3RmlsZUNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmaWxlTGluZXMgPSBudWxsO1xuICAgICAgZmlsZUNvbnRlbnRzID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgLy8gcmV0dXJuIGRlbGV0ZWRFdmVudHM7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREZWxldGVkRXZlbnRzKCk6IFByb21pc2U8YW55W10+IHtcbiAgY29uc3Qge3ZhdWx0LCBtZXRhZGF0YUNhY2hlfSA9IGFwcFN0b3JlLmdldFN0YXRlKCkuZGFpbHlOb3Rlc1N0YXRlLmFwcDtcblxuICBjb25zdCBmaWxlUGF0aCA9IGdldERhaWx5Tm90ZVBhdGgoKTtcbiAgY29uc3QgYWJzb2x1dGVQYXRoID0gZmlsZVBhdGggKyAnL2RlbGV0ZS5tZCc7XG4gIGNvbnN0IGRlbGV0ZWRFdmVudHM6IGFueVtdIHwgUHJvbWlzZUxpa2U8YW55W10+ID0gW107XG4gIGNvbnN0IGRlbGV0ZUZpbGUgPSBtZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KCcnLCBhYnNvbHV0ZVBhdGgpO1xuICBpZiAoZGVsZXRlRmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgbGV0IGZpbGVDb250ZW50cyA9IGF3YWl0IHZhdWx0LnJlYWQoZGVsZXRlRmlsZSk7XG4gICAgbGV0IGZpbGVMaW5lcyA9IGdldEFsbExpbmVzRnJvbUZpbGUoZmlsZUNvbnRlbnRzKTtcbiAgICBpZiAoZmlsZUxpbmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGRlbGV0ZWRFdmVudHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZUxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBmaWxlTGluZXNbaV07XG4gICAgICAgIGlmICghLy0gLy50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgaWQgPSBleHRyYWN0SURmcm9tVGV4dChsaW5lKTtcbiAgICAgICAgICBjb25zdCB0aW1lU3RyaW5nID0gaWQuc2xpY2UoMCwgMTMpO1xuICAgICAgICAgIC8vIGNvbnN0IGlkU3RyaW5nID0gcGFyc2VJbnQoaWQuc2xpY2UoMTQpKTtcbiAgICAgICAgICBjb25zdCBjcmVhdGVkRGF0ZSA9IG1vbWVudCh0aW1lU3RyaW5nLCAnWVlZWU1NRERISG1tc3MnKTtcbiAgICAgICAgICBjb25zdCBkZWxldGVkRGF0ZUlEID0gZXh0cmFjdERlbGV0ZURhdGVmcm9tVGV4dChmaWxlTGluZXNbaV0pO1xuICAgICAgICAgIGNvbnN0IGRlbGV0ZWREYXRlID0gbW9tZW50KGRlbGV0ZWREYXRlSUQuc2xpY2UoMCwgMTMpLCAnWVlZWU1NRERISG1tc3MnKTtcbiAgICAgICAgICBjb25zdCBjb250ZW50ID0gZXh0cmFjdENvbnRlbnRmcm9tVGV4dChmaWxlTGluZXNbaV0pO1xuICAgICAgICAgIGRlbGV0ZWRFdmVudHMucHVzaCh7XG4gICAgICAgICAgICBpZDogZGVsZXRlZERhdGVJRCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICAgICAgICB1c2VyX2lkOiAxLFxuICAgICAgICAgICAgY3JlYXRlZEF0OiBjcmVhdGVkRGF0ZS5mb3JtYXQoJ1lZWVkvTU0vREQgSEg6bW06U1MnKSxcbiAgICAgICAgICAgIHVwZGF0ZWRBdDogY3JlYXRlZERhdGUuZm9ybWF0KCdZWVlZL01NL0REIEhIOm1tOlNTJyksXG4gICAgICAgICAgICBkZWxldGVkQXQ6IGRlbGV0ZWREYXRlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmlsZUxpbmVzID0gbnVsbDtcbiAgICBmaWxlQ29udGVudHMgPSBudWxsO1xuICB9XG4gIHJldHVybiBkZWxldGVkRXZlbnRzO1xufVxuXG5leHBvcnQgY29uc3Qgc2VuZEV2ZW50VG9EZWxldGUgPSBhc3luYyAoZXZlbnRDb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPGFueT4gPT4ge1xuICBjb25zdCB7bWV0YWRhdGFDYWNoZSwgdmF1bHR9ID0gYXBwU3RvcmUuZ2V0U3RhdGUoKS5kYWlseU5vdGVzU3RhdGUuYXBwO1xuXG4gIGNvbnN0IGZpbGVQYXRoID0gZ2V0RGFpbHlOb3RlUGF0aCgpO1xuICBjb25zdCBhYnNvbHV0ZVBhdGggPSBmaWxlUGF0aCArICcvZGVsZXRlLm1kJztcblxuICBjb25zdCBkZWxldGVGaWxlID0gbWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdCgnJywgYWJzb2x1dGVQYXRoKTtcblxuICBpZiAoZGVsZXRlRmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgY29uc3QgZmlsZUNvbnRlbnRzID0gYXdhaXQgdmF1bHQucmVhZChkZWxldGVGaWxlKTtcbiAgICBjb25zdCBmaWxlTGluZXMgPSBnZXRBbGxMaW5lc0Zyb21GaWxlKGZpbGVDb250ZW50cyk7XG4gICAgY29uc3QgZGF0ZSA9IG1vbWVudCgpO1xuICAgIGNvbnN0IGRlbGV0ZURhdGUgPSBkYXRlLmZvcm1hdCgnWVlZWS9NTS9ERCBISDptbTpzcycpO1xuICAgIGxldCBsaW5lTnVtO1xuICAgIGlmIChmaWxlTGluZXMubGVuZ3RoID09PSAxICYmIGZpbGVMaW5lc1swXSA9PT0gJycpIHtcbiAgICAgIGxpbmVOdW0gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lTnVtID0gZmlsZUxpbmVzLmxlbmd0aCArIDE7XG4gICAgfVxuICAgIGNvbnN0IGRlbGV0ZURhdGVJRCA9IGRhdGUuZm9ybWF0KCdZWVlZTU1EREhIbW1zcycpICsgbGluZU51bTtcblxuICAgIGF3YWl0IGNyZWF0ZURlbGV0ZUV2ZW50SW5GaWxlKGRlbGV0ZUZpbGUsIGZpbGVDb250ZW50cywgZXZlbnRDb250ZW50LCBkZWxldGVEYXRlSUQpO1xuXG4gICAgcmV0dXJuIGRlbGV0ZURhdGU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZGVsZXRlRmlsZVBhdGggPSBub3JtYWxpemVQYXRoKGFic29sdXRlUGF0aCk7XG4gICAgY29uc3QgZmlsZSA9IGF3YWl0IGNyZWF0ZWRlbGV0ZUZpbGUoZGVsZXRlRmlsZVBhdGgpO1xuICAgIC8vIGNvbnN0IGZpbGVDb250ZW50cyA9IGF3YWl0IHZhdWx0LnJlYWQoZGVsZXRlRmlsZSk7XG4gICAgLy8gY29uc3QgZmlsZUxpbmVzID0gZ2V0QWxsTGluZXNGcm9tRmlsZShmaWxlQ29udGVudHMpO1xuICAgIGNvbnN0IGRhdGUgPSBtb21lbnQoKTtcbiAgICBjb25zdCBkZWxldGVEYXRlID0gZGF0ZS5mb3JtYXQoJ1lZWVkvTU0vREQgSEg6bW06c3MnKTtcbiAgICBjb25zdCBsaW5lTnVtID0gMTtcbiAgICBjb25zdCBkZWxldGVEYXRlSUQgPSBkYXRlLmZvcm1hdCgnWVlZWU1NRERISG1tc3MnKSArIGxpbmVOdW07XG5cbiAgICBhd2FpdCBjcmVhdGVEZWxldGVFdmVudEluRmlsZShmaWxlLCAnJywgZXZlbnRDb250ZW50LCBkZWxldGVEYXRlSUQpO1xuXG4gICAgcmV0dXJuIGRlbGV0ZURhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVEZWxldGVFdmVudEluRmlsZSA9IGFzeW5jIChcbiAgZmlsZTogVEZpbGUsXG4gIGZpbGVDb250ZW50OiBzdHJpbmcsXG4gIGV2ZW50Q29udGVudDogc3RyaW5nLFxuICBkZWxldGVEYXRlOiBzdHJpbmcsXG4pOiBQcm9taXNlPGFueT4gPT4ge1xuICBjb25zdCB7dmF1bHR9ID0gYXBwU3RvcmUuZ2V0U3RhdGUoKS5kYWlseU5vdGVzU3RhdGUuYXBwO1xuICBsZXQgbmV3Q29udGVudDtcbiAgaWYgKGZpbGVDb250ZW50ID09PSAnJykge1xuICAgIG5ld0NvbnRlbnQgPSBldmVudENvbnRlbnQgKyAnIGRlbGV0ZWRBdDogJyArIGRlbGV0ZURhdGU7XG4gIH0gZWxzZSB7XG4gICAgbmV3Q29udGVudCA9IGZpbGVDb250ZW50ICsgJ1xcbicgKyBldmVudENvbnRlbnQgKyAnIGRlbGV0ZWRBdDogJyArIGRlbGV0ZURhdGU7XG4gIH1cblxuICBhd2FpdCB2YXVsdC5tb2RpZnkoZmlsZSwgbmV3Q29udGVudCk7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlZGVsZXRlRmlsZSA9IGFzeW5jIChwYXRoOiBzdHJpbmcpOiBQcm9taXNlPFRGaWxlPiA9PiB7XG4gIGNvbnN0IHt2YXVsdH0gPSBhcHBTdG9yZS5nZXRTdGF0ZSgpLmRhaWx5Tm90ZXNTdGF0ZS5hcHA7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBjcmVhdGVkRmlsZSA9IGF3YWl0IHZhdWx0LmNyZWF0ZShwYXRoLCAnJyk7XG4gICAgcmV0dXJuIGNyZWF0ZWRGaWxlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGZpbGU6ICcke3BhdGh9J2AsIGVycik7XG4gICAgbmV3IE5vdGljZSgnVW5hYmxlIHRvIGNyZWF0ZSBuZXcgZmlsZS4nKTtcbiAgfVxufTtcblxuY29uc3QgZ2V0QWxsTGluZXNGcm9tRmlsZSA9IChjYWNoZTogc3RyaW5nKSA9PiBjYWNoZS5zcGxpdCgvXFxyP1xcbi8pO1xuLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmNvbnN0IGV4dHJhY3RJRGZyb21UZXh0ID0gKGxpbmU6IHN0cmluZykgPT4gL14tIChcXGR7MTR9KShcXGQrKVxccyguKylcXHMoZGVsZXRlZEF0OiApKC4rKSQvLmV4ZWMobGluZSk/LlsxXTtcbi8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5jb25zdCBleHRyYWN0Q29udGVudGZyb21UZXh0ID0gKGxpbmU6IHN0cmluZykgPT4gL14tIChcXGQrKVxccyguKylcXHMoZGVsZXRlZEF0OiApKC4rKSQvLmV4ZWMobGluZSk/LlsyXTtcbi8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5jb25zdCBleHRyYWN0RGVsZXRlRGF0ZWZyb21UZXh0ID0gKGxpbmU6IHN0cmluZykgPT4gL14tIChcXGQrKVxccyguKylcXHMoZGVsZXRlZEF0OiApKC4rKSQvLmV4ZWMobGluZSk/Lls0XTtcbi8vIGNvbnN0IGV4dHJhY3RFdmVudFRhc2tUeXBlRnJvbUxpbmUgPSAobGluZTogc3RyaW5nKSA9PlxuLy8gICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxuLy8gICAvXlxccypbXFwtXFwqXVxccyhcXFsoLnsxfSlcXF0pXFxzKC4qKSQvLmV4ZWMobGluZSk/LlsyXTtcbiIsImltcG9ydCB7bW9tZW50fSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQge2dldERhaWx5Tm90ZX0gZnJvbSAnb2JzaWRpYW4tZGFpbHktbm90ZXMtaW50ZXJmYWNlJztcbmltcG9ydCB7RGVmYXVsdEV2ZW50Q29tcG9zaXRpb259IGZyb20gJy4uL2JpZ0NhbGVuZGFyJztcbi8vIGltcG9ydCBhcHBTdG9yZSBmcm9tIFwiLi4vc3RvcmVzL2FwcFN0b3JlXCI7XG5pbXBvcnQgZGFpbHlOb3Rlc1NlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvZGFpbHlOb3Rlc1NlcnZpY2UnO1xuLy8gaW1wb3J0IHsgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBhcHBTdG9yZSBmcm9tICcuLi9zdG9yZXMvYXBwU3RvcmUnO1xuaW1wb3J0IHtzZW5kRXZlbnRUb0RlbGV0ZX0gZnJvbSAnLi9vYkRlbGV0ZUV2ZW50JztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9iSGlkZUV2ZW50KGV2ZW50aWQ6IHN0cmluZyk6IFByb21pc2U8TW9kZWwuRXZlbnQ+IHtcbiAgY29uc3Qge2RhaWx5Tm90ZXN9ID0gZGFpbHlOb3Rlc1NlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgaWYgKC9cXGR7MTQsfS8udGVzdChldmVudGlkKSkge1xuICAgIGNvbnN0IHt2YXVsdH0gPSBhcHBTdG9yZS5nZXRTdGF0ZSgpLmRhaWx5Tm90ZXNTdGF0ZS5hcHA7XG4gICAgY29uc3QgdGltZVN0cmluZyA9IGV2ZW50aWQuc2xpY2UoMCwgMTQpO1xuICAgIGNvbnN0IGlkU3RyaW5nID0gcGFyc2VJbnQoZXZlbnRpZC5zbGljZSgxNCkpO1xuICAgIGNvbnN0IGNoYW5nZURhdGUgPSBtb21lbnQodGltZVN0cmluZywgJ1lZWVlNTURESEhtbVNTJyk7XG4gICAgY29uc3QgZGFpbHlOb3RlID0gZ2V0RGFpbHlOb3RlKGNoYW5nZURhdGUsIGRhaWx5Tm90ZXMpO1xuICAgIGNvbnN0IGZpbGVDb250ZW50ID0gYXdhaXQgdmF1bHQucmVhZChkYWlseU5vdGUpO1xuICAgIGNvbnN0IGZpbGVMaW5lcyA9IGdldEFsbExpbmVzRnJvbUZpbGUoZmlsZUNvbnRlbnQpO1xuICAgIGNvbnN0IGNvbnRlbnQgPSBleHRyYWN0Q29udGVudGZyb21UZXh0KGZpbGVMaW5lc1tpZFN0cmluZ10pO1xuICAgIGNvbnN0IG9yaWdpbmFsTGluZSA9ICctICcgKyBldmVudGlkICsgJyAnICsgY29udGVudDtcbiAgICBjb25zdCBuZXdMaW5lID0gZmlsZUxpbmVzW2lkU3RyaW5nXTtcbiAgICBjb25zdCBuZXdGaWxlQ29udGVudCA9IGZpbGVDb250ZW50LnJlcGxhY2UobmV3TGluZSwgJycpO1xuICAgIGF3YWl0IHZhdWx0Lm1vZGlmeShkYWlseU5vdGUsIG5ld0ZpbGVDb250ZW50KTtcbiAgICBjb25zdCBkZWxldGVEYXRlID0gYXdhaXQgc2VuZEV2ZW50VG9EZWxldGUob3JpZ2luYWxMaW5lKTtcbiAgICByZXR1cm4gZGVsZXRlRGF0ZTtcbiAgfVxufVxuXG5jb25zdCBnZXRBbGxMaW5lc0Zyb21GaWxlID0gKGNhY2hlOiBzdHJpbmcpID0+IGNhY2hlLnNwbGl0KC9cXHI/XFxuLyk7XG5jb25zdCBleHRyYWN0Q29udGVudGZyb21UZXh0ID0gKGxpbmU6IHN0cmluZykgPT4ge1xuICBsZXQgcmVnZXhNYXRjaDtcbiAgaWYgKFxuICAgIERlZmF1bHRFdmVudENvbXBvc2l0aW9uICE9ICcnICYmXG4gICAgL3tUSU1FfS9nLnRlc3QoRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24pICYmXG4gICAgL3tDT05URU5UfS9nLnRlc3QoRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24pXG4gICkge1xuICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcmVnZXhNYXRjaCA9ICdeXFxcXHMqW1xcXFwtXFxcXCpdXFxcXHMoXFxcXFsoLnsxfSlcXFxcXVxcXFxzPyk/JyArXG4gICAgICBEZWZhdWx0RXZlbnRDb21wb3NpdGlvbi5yZXBsYWNlKC97VElNRX0vZywgJyhcXFxcPHRpbWVcXFxcPik/KChcXFxcZHsxLDJ9KVxcXFw6KFxcXFxkezJ9KSk/KFxcXFw8XFxcXC90aW1lXFxcXD4pPycpLnJlcGxhY2UoXG4gICAgICAgIC97Q09OVEVOVH0vZyxcbiAgICAgICAgJyguKikkJyxcbiAgICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZWdleE1hdGNoID0gJ15cXFxccypbXFxcXC1cXFxcKl1cXFxccyhcXFxcWyguezF9KVxcXFxdXFxcXHM/KT8oXFxcXDx0aW1lXFxcXD4pPygoXFxcXGR7MSwyfSlcXFxcOihcXFxcZHsyfSkpPyhcXFxcPFxcXFwvdGltZVxcXFw+KT9cXFxccz8oLiopJCc7XG4gIH1cbiAgY29uc3QgcmVnZXhNYXRjaFJlID0gbmV3IFJlZ0V4cChyZWdleE1hdGNoLCAnJyk7XG4gIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIHJldHVybiByZWdleE1hdGNoUmUuZXhlYyhsaW5lKT8uWzhdO1xuICAvLyByZXR1cm4gL15cXHMqW1xcLVxcKl1cXHMoXFxbKC57MX0pXFxdXFxzPyk/KFxcPHRpbWVcXD4pPygoXFxkezEsMn0pXFw6KFxcZHsyfSkpPyhcXDxcXC90aW1lXFw+KT9cXHM/KC4qKSQvLmV4ZWMobGluZSk/Lls4XTtcbn07XG4iLCIvLyBpbXBvcnQgdXRpbHMgZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IHtnZXRFdmVudHN9IGZyb20gJy4uL29iQ29tcG9uZW50cy9vYkdldEV2ZW50cyc7XHJcbmltcG9ydCB7b2JIaWRlRXZlbnR9IGZyb20gJy4uL29iQ29tcG9uZW50cy9vYkhpZGVFdmVudCc7XHJcblxyXG4vLyB0eXBlIFJlc3BvbnNlVHlwZTxUID0gdW5rbm93bj4gPSB7XHJcbi8vICAgc3VjY2VlZDogYm9vbGVhbjtcclxuLy8gICBtZXNzYWdlOiBzdHJpbmc7XHJcbi8vICAgZGF0YTogVDtcclxuLy8gfTtcclxuXHJcbi8vIHR5cGUgUmVxdWVzdENvbmZpZyA9IHtcclxuLy8gICBtZXRob2Q6IHN0cmluZztcclxuLy8gICB1cmw6IHN0cmluZztcclxuLy8gICBkYXRhPzogYW55O1xyXG4vLyAgIGRhdGFUeXBlPzogXCJqc29uXCIgfCBcImZpbGVcIjtcclxuLy8gfTtcclxuXHJcbi8vIGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3Q8VD4oY29uZmlnOiBSZXF1ZXN0Q29uZmlnKTogUHJvbWlzZTxSZXNwb25zZVR5cGU8VD4+IHtcclxuLy8gICBjb25zdCB7IG1ldGhvZCwgdXJsLCBkYXRhLCBkYXRhVHlwZSB9ID0gY29uZmlnO1xyXG4vLyAgIGNvbnN0IHJlcXVlc3RDb25maWc6IFJlcXVlc3RJbml0ID0ge1xyXG4vLyAgICAgbWV0aG9kLFxyXG4vLyAgIH07XHJcblxyXG4vLyAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcclxuLy8gICAgIGlmIChkYXRhVHlwZSA9PT0gXCJmaWxlXCIpIHtcclxuLy8gICAgICAgcmVxdWVzdENvbmZpZy5ib2R5ID0gZGF0YTtcclxuLy8gICAgIH0gZWxzZSB7XHJcbi8vICAgICAgIHJlcXVlc3RDb25maWcuaGVhZGVycyA9IHtcclxuLy8gICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuLy8gICAgICAgfTtcclxuLy8gICAgICAgcmVxdWVzdENvbmZpZy5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XHJcbi8vICAgICB9XHJcbi8vICAgfVxyXG5cclxuLy8gICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgcmVxdWVzdENvbmZpZyk7XHJcbi8vICAgY29uc3QgcmVzcG9uc2VEYXRhID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkgYXMgUmVzcG9uc2VUeXBlPFQ+O1xyXG5cclxuLy8gICBpZiAoIXJlc3BvbnNlRGF0YS5zdWNjZWVkKSB7XHJcbi8vICAgICB0aHJvdyByZXNwb25zZURhdGE7XHJcbi8vICAgfVxyXG5cclxuLy8gICByZXR1cm4gcmVzcG9uc2VEYXRhO1xyXG4vLyB9XHJcblxyXG5uYW1lc3BhY2UgYXBpIHtcclxuICBleHBvcnQgZnVuY3Rpb24gZ2V0VXNlckluZm8oKSB7XHJcbiAgICAvLyByZXR1cm4gcmVxdWVzdDxNb2RlbC5Vc2VyPih7XHJcbiAgICAvLyAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgIC8vICAgdXJsOiBcIi9hcGkvdXNlci9tZVwiLFxyXG4gICAgLy8gfSk7XHJcbiAgfVxyXG5cclxuICAvLyBleHBvcnQgZnVuY3Rpb24gc2lnbmluKHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpIHtcclxuICAvLyAgIHJldHVybiByZXF1ZXN0KHtcclxuICAvLyAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAvLyAgICAgdXJsOiBcIi9hcGkvYXV0aC9zaWduaW5cIixcclxuICAvLyAgICAgZGF0YTogeyB1c2VybmFtZSwgcGFzc3dvcmQgfSxcclxuICAvLyAgIH0pO1xyXG4gIC8vIH1cclxuXHJcbiAgLy8gZXhwb3J0IGZ1bmN0aW9uIHNpZ251cCh1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSB7XHJcbiAgLy8gICByZXR1cm4gcmVxdWVzdCh7XHJcbiAgLy8gICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgLy8gICAgIHVybDogXCIvYXBpL2F1dGgvc2lnbnVwXCIsXHJcbiAgLy8gICAgIGRhdGE6IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0sXHJcbiAgLy8gICB9KTtcclxuICAvLyB9XHJcblxyXG4gIC8vIGV4cG9ydCBmdW5jdGlvbiBzaWdub3V0KCkge1xyXG4gIC8vICAgcmV0dXJuIHJlcXVlc3Qoe1xyXG4gIC8vICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gIC8vICAgICB1cmw6IFwiL2FwaS9hdXRoL3NpZ25vdXRcIixcclxuICAvLyAgIH0pO1xyXG4gIC8vIH1cclxuXHJcbiAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICBleHBvcnQgZnVuY3Rpb24gY2hlY2tVc2VybmFtZVVzYWJsZSh1c2VybmFtZTogc3RyaW5nKSB7XHJcbiAgICAvLyByZXR1cm4gcmVxdWVzdDxib29sZWFuPih7XHJcbiAgICAvLyAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAvLyAgIHVybDogXCIvYXBpL3VzZXIvY2hlY2t1c2VybmFtZVwiLFxyXG4gICAgLy8gICBkYXRhOiB7IHVzZXJuYW1lIH0sXHJcbiAgICAvLyB9KTtcclxuICB9XHJcblxyXG4gIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUGFzc3dvcmRWYWxpZChwYXNzd29yZDogc3RyaW5nKSB7XHJcbiAgICAvLyByZXR1cm4gcmVxdWVzdDxib29sZWFuPih7XHJcbiAgICAvLyAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAvLyAgIHVybDogXCIvYXBpL3VzZXIvdmFsaWRwYXNzd29yZFwiLFxyXG4gICAgLy8gICBkYXRhOiB7IHBhc3N3b3JkIH0sXHJcbiAgICAvLyB9KTtcclxuICB9XHJcblxyXG4gIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVVzZXJpbmZvKHVzZXJpbmZvOiBQYXJ0aWFsPHt1c2VybmFtZTogc3RyaW5nOyBwYXNzd29yZDogc3RyaW5nOyBnaXRodWJOYW1lOiBzdHJpbmd9Pikge1xyXG4gICAgLy8gcmV0dXJuIHJlcXVlc3Qoe1xyXG4gICAgLy8gICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgIC8vICAgdXJsOiBcIi9hcGkvdXNlci9tZVwiLFxyXG4gICAgLy8gICBkYXRhOiB1c2VyaW5mbyxcclxuICAgIC8vIH0pO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE15RXZlbnRzKCkge1xyXG4gICAgcmV0dXJuIGF3YWl0IGdldEV2ZW50cygpO1xyXG5cclxuICAgIC8vIHJldHVybiByZXF1ZXN0PE1vZGVsLkV2ZW50W10+KHtcclxuICAgIC8vICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgLy8gICB1cmw6IFwiL2FwaS9ldmVudC9hbGxcIixcclxuICAgIC8vIH0pO1xyXG4gIH1cclxuXHJcbi8vICAgZXhwb3J0IGZ1bmN0aW9uIGdldE15RGVsZXRlZEV2ZW50cygpIHtcclxuLy8gICAgIHJldHVybiBnZXREZWxldGVkRXZlbnRzKCk7XHJcbi8vICAgICAvLyByZXR1cm4gcmVxdWVzdDxNb2RlbC5FdmVudFtdPih7XHJcbi8vICAgICAvLyAgIG1ldGhvZDogXCJHRVRcIixcclxuLy8gICAgIC8vICAgdXJsOiBcIi9hcGkvZXZlbnQvYWxsP2RlbGV0ZWQ9dHJ1ZVwiLFxyXG4vLyAgICAgLy8gfSk7XHJcbi8vICAgfVxyXG5cclxuICAvLyBleHBvcnQgZnVuY3Rpb24gY3JlYXRlRXZlbnQoY29udGVudDogc3RyaW5nKSB7XHJcbiAgLy8gICByZXR1cm4gY3JlYXRlRXZlbnRzKGNvbnRlbnQpO1xyXG4gIC8vICAgLy8gcmV0dXJuIHJlcXVlc3Q8TW9kZWwuRXZlbnQ+KHtcclxuICAvLyAgIC8vICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gIC8vICAgLy8gICB1cmw6IFwiL2FwaS9ldmVudC9cIixcclxuICAvLyAgIC8vICAgZGF0YTogeyBjb250ZW50IH0sXHJcbiAgLy8gICAvLyB9KTtcclxuICAvLyB9XHJcblxyXG4gIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgLy8gZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUV2ZW50KGV2ZW50SWQ6IHN0cmluZywgY29udGVudDogc3RyaW5nKSB7XHJcbiAgLy8gICAvLyByZXR1cm4gcmVxdWVzdDxNb2RlbC5FdmVudD4oe1xyXG4gIC8vICAgLy8gICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAvLyAgIC8vICAgdXJsOiBgL2FwaS9ldmVudC8ke2V2ZW50SWR9YCxcclxuICAvLyAgIC8vICAgZGF0YTogeyBjb250ZW50IH0sXHJcbiAgLy8gICAvLyB9KTtcclxuICAvLyB9XHJcblxyXG4gIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGhpZGVFdmVudChldmVudElkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBvYkhpZGVFdmVudChldmVudElkKTtcclxuICAgIC8vIHJldHVybiByZXF1ZXN0KHtcclxuICAgIC8vICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAvLyAgIHVybDogYC9hcGkvZXZlbnQvJHtldmVudElkfWAsXHJcbiAgICAvLyAgIGRhdGE6IHtcclxuICAgIC8vICAgICBkZWxldGVkQXQ6IHV0aWxzLmdldERhdGVUaW1lU3RyaW5nKERhdGUubm93KCkpLFxyXG4gICAgLy8gICB9LFxyXG4gICAgLy8gfSk7XHJcbiAgfVxyXG5cclxuICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4vLyAgIGV4cG9ydCBmdW5jdGlvbiByZXN0b3JlRXZlbnQoZXZlbnRJZDogc3RyaW5nKSB7XHJcbi8vICAgICByZXR1cm4gcmVzdG9yZURlbGV0ZWRFdmVudChldmVudElkKTtcclxuLy8gICAgIC8vIHJldHVybiByZXF1ZXN0KHtcclxuLy8gICAgIC8vICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbi8vICAgICAvLyAgIHVybDogYC9hcGkvZXZlbnQvJHtldmVudElkfWAsXHJcbi8vICAgICAvLyAgIGRhdGE6IHtcclxuLy8gICAgIC8vICAgICBkZWxldGVkQXQ6IFwiXCIsXHJcbi8vICAgICAvLyAgIH0sXHJcbi8vICAgICAvLyB9KTtcclxuLy8gICB9XHJcblxyXG4vLyAgIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4vLyAgIGV4cG9ydCBmdW5jdGlvbiBkZWxldGVFdmVudChldmVudElkOiBzdHJpbmcpIHtcclxuLy8gICAgIHJldHVybiBkZWxldGVGb3JldmVyKGV2ZW50SWQpO1xyXG4vLyAgICAgcmV0dXJuIHJlcXVlc3Qoe1xyXG4vLyAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbi8vICAgICAgIHVybDogYC9hcGkvZXZlbnQvJHtldmVudElkfWAsXHJcbi8vICAgICB9KTtcclxuLy8gICB9XHJcblxyXG4vLyAgIGV4cG9ydCBmdW5jdGlvbiBnZXRNeVF1ZXJpZXMoKSB7XHJcbi8vICAgICByZXR1cm4gZmluZFF1ZXJ5KCk7XHJcbi8vICAgICByZXR1cm4gcmVxdWVzdDxNb2RlbC5RdWVyeVtdPih7XHJcbi8vICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuLy8gICAgICAgdXJsOiBcIi9hcGkvcXVlcnkvYWxsXCIsXHJcbi8vICAgICB9KTtcclxuLy8gICB9XHJcblxyXG4gIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbi8vICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVF1ZXJ5KHRpdGxlOiBzdHJpbmcsIHF1ZXJ5c3RyaW5nOiBzdHJpbmcpIHtcclxuLy8gICAgIHJldHVybiBjcmVhdGVPYnNpZGlhblF1ZXJ5KHRpdGxlLCBxdWVyeXN0cmluZyk7XHJcbi8vICAgICByZXR1cm4gcmVxdWVzdDxNb2RlbC5RdWVyeT4oe1xyXG4vLyAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbi8vICAgICAgIHVybDogXCIvYXBpL3F1ZXJ5L1wiLFxyXG4vLyAgICAgICBkYXRhOiB7IHRpdGxlLCBxdWVyeXN0cmluZyB9LFxyXG4vLyAgICAgfSk7XHJcbi8vICAgfVxyXG5cclxuICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4vLyAgIGV4cG9ydCBmdW5jdGlvbiB1cGRhdGVRdWVyeShxdWVyeUlkOiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcsIHF1ZXJ5c3RyaW5nOiBzdHJpbmcpIHtcclxuLy8gICAgIHJldHVybiB1cGRhdGVPYnNpZGlhblF1ZXJ5KHF1ZXJ5SWQsIHRpdGxlLCBxdWVyeXN0cmluZyk7XHJcbi8vICAgICByZXR1cm4gcmVxdWVzdDxNb2RlbC5RdWVyeT4oe1xyXG4vLyAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuLy8gICAgICAgdXJsOiBgL2FwaS9xdWVyeS8ke3F1ZXJ5SWR9YCxcclxuLy8gICAgICAgZGF0YTogeyB0aXRsZSwgcXVlcnlzdHJpbmcgfSxcclxuLy8gICAgIH0pO1xyXG4vLyAgIH1cclxuXHJcbiAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuLy8gICBleHBvcnQgZnVuY3Rpb24gZGVsZXRlUXVlcnlCeUlkKHF1ZXJ5SWQ6IHN0cmluZykge1xyXG4vLyAgICAgcmV0dXJuIGRlbGV0ZVF1ZXJ5Rm9yZXZlcihxdWVyeUlkKTtcclxuLy8gICAgIC8vIHJldHVybiByZXF1ZXN0KHtcclxuLy8gICAgIC8vICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4vLyAgICAgLy8gICB1cmw6IGAvYXBpL3F1ZXJ5LyR7cXVlcnlJZH1gLFxyXG4vLyAgICAgLy8gfSk7XHJcbi8vICAgfVxyXG5cclxuICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4vLyAgIGV4cG9ydCBmdW5jdGlvbiBwaW5RdWVyeShxdWVyeUlkOiBzdHJpbmcpIHtcclxuLy8gICAgIHJldHVybiBwaW5RdWVyeUluRmlsZShxdWVyeUlkKTtcclxuLy8gICAgIC8vIHJldHVybiByZXF1ZXN0KHtcclxuLy8gICAgIC8vICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbi8vICAgICAvLyAgIHVybDogYC9hcGkvcXVlcnkvJHtxdWVyeUlkfWAsXHJcbi8vICAgICAvLyAgIGRhdGE6IHsgcGlubmVkQXQ6IHV0aWxzLmdldERhdGVUaW1lU3RyaW5nKERhdGUubm93KCkpIH0sXHJcbi8vICAgICAvLyB9KTtcclxuLy8gICB9XHJcblxyXG4gIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbi8vICAgZXhwb3J0IGZ1bmN0aW9uIHVucGluUXVlcnkocXVlcnlJZDogc3RyaW5nKSB7XHJcbi8vICAgICByZXR1cm4gdW5waW5RdWVyeUluRmlsZShxdWVyeUlkKTtcclxuLy8gICAgIC8vIHJldHVybiByZXF1ZXN0KHtcclxuLy8gICAgIC8vICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbi8vICAgICAvLyAgIHVybDogYC9hcGkvcXVlcnkvJHtxdWVyeUlkfWAsXHJcbi8vICAgICAvLyAgIGRhdGE6IHsgcGlubmVkQXQ6IFwiXCIgfSxcclxuLy8gICAgIC8vIH0pO1xyXG4vLyAgIH1cclxuXHJcbiAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAvLyBleHBvcnQgZnVuY3Rpb24gdXBsb2FkRmlsZShmb3JtRGF0YTogRm9ybURhdGEpIHtcclxuICAvLyAgIC8vIHJldHVybiByZXF1ZXN0PE1vZGVsLlJlc291cmNlPih7XHJcbiAgLy8gICAvLyAgIG1ldGhvZDogXCJQVVRcIixcclxuICAvLyAgIC8vICAgdXJsOiBcIi9hcGkvcmVzb3VyY2UvXCIsXHJcbiAgLy8gICAvLyAgIGRhdGE6IGZvcm1EYXRhLFxyXG4gIC8vICAgLy8gICBkYXRhVHlwZTogXCJmaWxlXCIsXHJcbiAgLy8gICAvLyB9KTtcclxuICAvLyB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFwaTtcclxuIiwiaW1wb3J0IGFwcFN0b3JlIGZyb20gJy4uL3N0b3Jlcy9hcHBTdG9yZSc7XHJcbmltcG9ydCB7d2FpdEZvckluc2VydH0gZnJvbSAnLi4vb2JDb21wb25lbnRzL29iQ3JlYXRlRXZlbnQnO1xyXG5pbXBvcnQge2NoYW5nZUV2ZW50fSBmcm9tICcuLi9vYkNvbXBvbmVudHMvb2JVcGRhdGVFdmVudCc7XHJcbmltcG9ydCBhcGkgZnJvbSAnLi4vaGVscGVycy9hcGknO1xyXG4vLyBpbXBvcnQgdXNlclNlcnZpY2UgZnJvbSBcIi4vdXNlclNlcnZpY2VcIjtcclxuaW1wb3J0IHsgc3RyaW5nT3JEYXRlIH0gZnJvbSAncmVhY3QtYmlnLWNhbGVuZGFyJztcclxuXHJcbmNsYXNzIEV2ZW50U2VydmljZSB7XHJcbiAgcHVibGljIGluaXRpYWxpemVkID0gZmFsc2U7XHJcblxyXG4gIHB1YmxpYyBnZXRTdGF0ZSgpIHtcclxuICAgIHJldHVybiBhcHBTdG9yZS5nZXRTdGF0ZSgpLmV2ZW50U3RhdGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZmV0Y2hBbGxFdmVudHMoKSB7XHJcbiAgICAvLyBpZiAoIXVzZXJTZXJ2aWNlLmdldFN0YXRlKCkudXNlcikge1xyXG4gICAgLy8gICByZXR1cm4gZmFsc2U7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBhcGkuZ2V0TXlFdmVudHMoKTtcclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBhcGkuZ2V0TXlFdmVudHMoKTtcclxuICAgIGNvbnN0IGV2ZW50cyA9IFtdIGFzIGFueVtdO1xyXG4gICAgZm9yIChjb25zdCBtIG9mIGRhdGEpIHtcclxuICAgICAgZXZlbnRzLnB1c2gobSk7XHJcbiAgICB9XHJcbiAgICBhcHBTdG9yZS5kaXNwYXRjaCh7XHJcbiAgICAgIHR5cGU6ICdTRVRfRVZFTlRTJyxcclxuICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgIGV2ZW50cyxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xyXG4gICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZXZlbnRzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHB1c2hFdmVudChldmVudDogTW9kZWwuRXZlbnQpIHtcclxuICAgIGFwcFN0b3JlLmRpc3BhdGNoKHtcclxuICAgICAgdHlwZTogJ0lOU0VSVF9FVkVOVCcsXHJcbiAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICBldmVudDoge1xyXG4gICAgICAgICAgLi4uZXZlbnQsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEV2ZW50QnlJZChpZDogc3RyaW5nKSB7XHJcbiAgICBmb3IgKGNvbnN0IG0gb2YgdGhpcy5nZXRTdGF0ZSgpLmV2ZW50cykge1xyXG4gICAgICBpZiAobS5pZCA9PT0gaWQpIHtcclxuICAgICAgICByZXR1cm4gbTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGhpZGVFdmVudEJ5SWQoaWQ6IHN0cmluZykge1xyXG4gICAgYXdhaXQgYXBpLmhpZGVFdmVudChpZCk7XHJcbiAgICBhcHBTdG9yZS5kaXNwYXRjaCh7XHJcbiAgICAgIHR5cGU6ICdERUxFVEVfRVZFTlRfQllfSUQnLFxyXG4gICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgaWQ6IGlkLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBwdWJsaWMgYXN5bmMgcmVzdG9yZUV2ZW50QnlJZChpZDogc3RyaW5nKSB7XHJcbiAgLy8gICBhd2FpdCBhcGkucmVzdG9yZUV2ZW50KGlkKTtcclxuICAvLyAgIC8vIGV2ZW50U2VydmljZS5jbGVhckV2ZW50cygpO1xyXG4gIC8vICAgLy8gZXZlbnRTZXJ2aWNlLmZldGNoQWxsRXZlbnRzKCk7XHJcbiAgLy8gfVxyXG5cclxuICAvLyBwdWJsaWMgYXN5bmMgZGVsZXRlRXZlbnRCeUlkKGlkOiBzdHJpbmcpIHtcclxuICAvLyAgIGF3YWl0IGFwaS5kZWxldGVFdmVudChpZCk7XHJcbiAgLy8gfVxyXG5cclxuICBwdWJsaWMgZWRpdEV2ZW50KGV2ZW50OiBNb2RlbC5FdmVudCkge1xyXG4gICAgYXBwU3RvcmUuZGlzcGF0Y2goe1xyXG4gICAgICB0eXBlOiAnRURJVF9FVkVOVCcsXHJcbiAgICAgIHBheWxvYWQ6IGV2ZW50LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBwdWJsaWMgdXBkYXRlVGFnc1N0YXRlKCkge1xyXG4gIC8vICAgY29uc3Qge2V2ZW50c30gPSB0aGlzLmdldFN0YXRlKCk7XHJcbiAgLy8gICBjb25zdCB0YWdzU2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XHJcbiAgLy8gICBmb3IgKGNvbnN0IG0gb2YgZXZlbnRzKSB7XHJcbiAgLy8gICAgIGZvciAoY29uc3QgdCBvZiBBcnJheS5mcm9tKG0uY29udGVudC5tYXRjaChUQUdfUkVHKSA/PyBbXSkpIHtcclxuICAvLyAgICAgICB0YWdzU2V0LmFkZCh0LnJlcGxhY2UoVEFHX1JFRywgJyQxJykudHJpbSgpKTtcclxuICAvLyAgICAgfVxyXG4gIC8vICAgICBmb3IgKGNvbnN0IHQgb2YgQXJyYXkuZnJvbShtLmNvbnRlbnQubWF0Y2goTk9QX0ZJUlNUX1RBR19SRUcpID8/IFtdKSkge1xyXG4gIC8vICAgICAgIHRhZ3NTZXQuYWRkKHQucmVwbGFjZShOT1BfRklSU1RfVEFHX1JFRywgJyQxJykudHJpbSgpKTtcclxuICAvLyAgICAgfVxyXG4gIC8vICAgICBmb3IgKGNvbnN0IHQgb2YgQXJyYXkuZnJvbShtLmNvbnRlbnQubWF0Y2goRklSU1RfVEFHX1JFRykgPz8gW10pKSB7XHJcbiAgLy8gICAgICAgdGFnc1NldC5hZGQodC5yZXBsYWNlKEZJUlNUX1RBR19SRUcsICckMicpLnRyaW0oKSk7XHJcbiAgLy8gICAgIH1cclxuICAvLyAgIH1cclxuXHJcbiAgLy8gICBhcHBTdG9yZS5kaXNwYXRjaCh7XHJcbiAgLy8gICAgIHR5cGU6ICdTRVRfVEFHUycsXHJcbiAgLy8gICAgIHBheWxvYWQ6IHtcclxuICAvLyAgICAgICB0YWdzOiBBcnJheS5mcm9tKHRhZ3NTZXQpLFxyXG4gIC8vICAgICB9LFxyXG4gIC8vICAgfSk7XHJcbiAgLy8gfVxyXG5cclxuICBwdWJsaWMgY2xlYXJFdmVudHMoKSB7XHJcbiAgICBhcHBTdG9yZS5kaXNwYXRjaCh7XHJcbiAgICAgIHR5cGU6ICdTRVRfRVZFTlRTJyxcclxuICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgIGV2ZW50czogW10sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBjcmVhdGVFdmVudCh0ZXh0OiBzdHJpbmcsIHN0YXJ0RGF0ZTogc3RyaW5nT3JEYXRlKTogUHJvbWlzZTxNb2RlbC5FdmVudD4ge1xyXG4gICAgY29uc3QgZXZlbnQgPSBhd2FpdCB3YWl0Rm9ySW5zZXJ0KHRleHQsIHN0YXJ0RGF0ZSk7XHJcbiAgICByZXR1cm4gZXZlbnQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgdXBkYXRlRXZlbnQoZXZlbnRJZDogc3RyaW5nLCBvcmlnaW5hbFRleHQ6IHN0cmluZywgdGV4dDogc3RyaW5nLCB0eXBlOiBzdHJpbmcpOiBQcm9taXNlPE1vZGVsLkV2ZW50PiB7XHJcbiAgICBjb25zdCBldmVudCA9IGF3YWl0IGNoYW5nZUV2ZW50KGV2ZW50SWQsIG9yaWdpbmFsVGV4dCwgdGV4dCwgdHlwZSk7XHJcbiAgICByZXR1cm4gZXZlbnQ7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBldmVudFNlcnZpY2UgPSBuZXcgRXZlbnRTZXJ2aWNlKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBldmVudFNlcnZpY2U7XHJcbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZnVuY3Rpb24gdXNlUmVmcmVzaCgpIHtcclxuICBjb25zdCBbLCBzZXRCb29sZWFuXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuXHJcbiAgY29uc3QgcmVmcmVzaCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIHNldEJvb2xlYW4oKHBzKSA9PiB7XHJcbiAgICAgIHJldHVybiAhcHM7XHJcbiAgICB9KTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiByZWZyZXNoO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1c2VSZWZyZXNoO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsImltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbmZ1bmN0aW9uIHJlYWRPbmx5UHJvcFR5cGUoaGFuZGxlciwgbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSkge1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFwcm9wc1toYW5kbGVyXSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiWW91IGhhdmUgcHJvdmlkZWQgYSBgXCIgKyBwcm9wTmFtZSArIFwiYCBwcm9wIHRvIGBcIiArIG5hbWUgKyBcImAgXCIgKyAoXCJ3aXRob3V0IGFuIGBcIiArIGhhbmRsZXIgKyBcImAgaGFuZGxlciBwcm9wLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBcIikgKyAoXCJJZiB0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBcIiArIGRlZmF1bHRLZXkocHJvcE5hbWUpICsgXCJgLiBcIikgKyAoXCJPdGhlcndpc2UsIHNldCBgXCIgKyBoYW5kbGVyICsgXCJgLlwiKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5jb250cm9sbGVkUHJvcFR5cGVzKGNvbnRyb2xsZWRWYWx1ZXMsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciBwcm9wVHlwZXMgPSB7fTtcbiAgT2JqZWN0LmtleXMoY29udHJvbGxlZFZhbHVlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIC8vIGFkZCBkZWZhdWx0IHByb3BUeXBlcyBmb3IgZm9sa3MgdGhhdCB1c2UgcnVudGltZSBjaGVja3NcbiAgICBwcm9wVHlwZXNbZGVmYXVsdEtleShwcm9wKV0gPSBub29wO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBoYW5kbGVyID0gY29udHJvbGxlZFZhbHVlc1twcm9wXTtcbiAgICAgICEodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnICYmIGhhbmRsZXIudHJpbSgpLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdVbmNvbnRyb2xsYWJsZSAtIFslc106IHRoZSBwcm9wIGAlc2AgbmVlZHMgYSB2YWxpZCBoYW5kbGVyIGtleSBuYW1lIGluIG9yZGVyIHRvIG1ha2UgaXQgdW5jb250cm9sbGFibGUnLCBkaXNwbGF5TmFtZSwgcHJvcCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcHJvcFR5cGVzW3Byb3BdID0gcmVhZE9ubHlQcm9wVHlwZShoYW5kbGVyLCBkaXNwbGF5TmFtZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHByb3BUeXBlcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3AocHJvcHMsIHByb3ApIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9PSB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdEtleShrZXkpIHtcbiAgcmV0dXJuICdkZWZhdWx0JyArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHIoMSk7XG59XG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbkFjY2VwdFJlZihjb21wb25lbnQpIHtcbiAgcmV0dXJuICEhY29tcG9uZW50ICYmICh0eXBlb2YgY29tcG9uZW50ICE9PSAnZnVuY3Rpb24nIHx8IGNvbXBvbmVudC5wcm90b3R5cGUgJiYgY29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn0iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICBpZiAoc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICAvLyBVc2UgdGhlIHNldFN0YXRlKCkgdXBkYXRlciB0byBlbnN1cmUgc3RhdGUgaXNuJ3Qgc3RhbGUgaW4gY2VydGFpbiBlZGdlIGNhc2VzLlxuICBmdW5jdGlvbiB1cGRhdGVyKHByZXZTdGF0ZSkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcbiAgICByZXR1cm4gc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCA/IHN0YXRlIDogbnVsbDtcbiAgfVxuICAvLyBCaW5kaW5nIFwidGhpc1wiIGlzIGltcG9ydGFudCBmb3Igc2hhbGxvdyByZW5kZXJlciBzdXBwb3J0LlxuICB0aGlzLnNldFN0YXRlKHVwZGF0ZXIuYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcHJldlByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgcHJldlN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnByb3BzID0gbmV4dFByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgPSB0cnVlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3QgPSB0aGlzLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0aGlzLnByb3BzID0gcHJldlByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBwcmV2U3RhdGU7XG4gIH1cbn1cblxuLy8gUmVhY3QgbWF5IHdhcm4gYWJvdXQgY1dNL2NXUlAvY1dVIG1ldGhvZHMgYmVpbmcgZGVwcmVjYXRlZC5cbi8vIEFkZCBhIGZsYWcgdG8gc3VwcHJlc3MgdGhlc2Ugd2FybmluZ3MgZm9yIHRoaXMgc3BlY2lhbCBjYXNlLlxuY29tcG9uZW50V2lsbE1vdW50Ll9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxVcGRhdGUuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKENvbXBvbmVudCkge1xuICB2YXIgcHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuICBpZiAoIXByb3RvdHlwZSB8fCAhcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBvbmx5IHBvbHlmaWxsIGNsYXNzIGNvbXBvbmVudHMnKTtcbiAgfVxuXG4gIGlmIChcbiAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuXG4gIC8vIElmIG5ldyBjb21wb25lbnQgQVBJcyBhcmUgZGVmaW5lZCwgXCJ1bnNhZmVcIiBsaWZlY3ljbGVzIHdvbid0IGJlIGNhbGxlZC5cbiAgLy8gRXJyb3IgaWYgYW55IG9mIHRoZXNlIGxpZmVjeWNsZXMgYXJlIHByZXNlbnQsXG4gIC8vIEJlY2F1c2UgdGhleSB3b3VsZCB3b3JrIGRpZmZlcmVudGx5IGJldHdlZW4gb2xkZXIgYW5kIG5ld2VyICgxNi4zKykgdmVyc2lvbnMgb2YgUmVhY3QuXG4gIHZhciBmb3VuZFdpbGxNb3VudE5hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxVcGRhdGVOYW1lID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsTW91bnQnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdjb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH1cbiAgaWYgKFxuICAgIGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsXG4gICkge1xuICAgIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lO1xuICAgIHZhciBuZXdBcGlOYW1lID1cbiAgICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpJ1xuICAgICAgICA6ICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpJztcblxuICAgIHRocm93IEVycm9yKFxuICAgICAgJ1Vuc2FmZSBsZWdhY3kgbGlmZWN5Y2xlcyB3aWxsIG5vdCBiZSBjYWxsZWQgZm9yIGNvbXBvbmVudHMgdXNpbmcgbmV3IGNvbXBvbmVudCBBUElzLlxcblxcbicgK1xuICAgICAgICBjb21wb25lbnROYW1lICtcbiAgICAgICAgJyB1c2VzICcgK1xuICAgICAgICBuZXdBcGlOYW1lICtcbiAgICAgICAgJyBidXQgYWxzbyBjb250YWlucyB0aGUgZm9sbG93aW5nIGxlZ2FjeSBsaWZlY3ljbGVzOicgK1xuICAgICAgICAoZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbE1vdW50TmFtZSA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsXG4gICAgICAgICAgPyAnXFxuICAnICsgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZVxuICAgICAgICAgIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsVXBkYXRlTmFtZSA6ICcnKSArXG4gICAgICAgICdcXG5cXG5UaGUgYWJvdmUgbGlmZWN5Y2xlcyBzaG91bGQgYmUgcmVtb3ZlZC4gTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTpcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcydcbiAgICApO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXTSBhbmQgY1dSUCB0byBpbnZva2UgdGhlIG5ldyBzdGF0aWMgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGVzZSBsaWZlY3ljbGVzIGlmIGdEU0ZQIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGNvbXBvbmVudFdpbGxNb3VudDtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXVSB0byBpbnZva2UgdGhlIG5ldyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoYXQgbGlmZWN5Y2xlIGlmIGdTQlUgZXhpc3RzLlxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IHBvbHlmaWxsIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgZm9yIGNvbXBvbmVudHMgdGhhdCBkbyBub3QgZGVmaW5lIGNvbXBvbmVudERpZFVwZGF0ZSgpIG9uIHRoZSBwcm90b3R5cGUnXG4gICAgICApO1xuICAgIH1cblxuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gY29tcG9uZW50V2lsbFVwZGF0ZTtcblxuICAgIHZhciBjb21wb25lbnREaWRVcGRhdGUgPSBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlO1xuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVBvbHlmaWxsKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlLFxuICAgICAgbWF5YmVTbmFwc2hvdFxuICAgICkge1xuICAgICAgLy8gMTYuMysgd2lsbCBub3QgZXhlY3V0ZSBvdXIgd2lsbC11cGRhdGUgbWV0aG9kO1xuICAgICAgLy8gSXQgd2lsbCBwYXNzIGEgc25hcHNob3QgdmFsdWUgdG8gZGlkLXVwZGF0ZSB0aG91Z2guXG4gICAgICAvLyBPbGRlciB2ZXJzaW9ucyB3aWxsIHJlcXVpcmUgb3VyIHBvbHlmaWxsZWQgd2lsbC11cGRhdGUgdmFsdWUuXG4gICAgICAvLyBXZSBuZWVkIHRvIGhhbmRsZSBib3RoIGNhc2VzLCBidXQgY2FuJ3QganVzdCBjaGVjayBmb3IgdGhlIHByZXNlbmNlIG9mIFwibWF5YmVTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBmb3IgPD0gMTUueCB2ZXJzaW9ucyB0aGlzIG1pZ2h0IGJlIGEgXCJwcmV2Q29udGV4dFwiIG9iamVjdC5cbiAgICAgIC8vIFdlIGFsc28gY2FuJ3QganVzdCBjaGVjayBcIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGdldC1zbmFwc2hvdCBtaWdodCByZXR1cm4gYSBmYWxzeSB2YWx1ZS5cbiAgICAgIC8vIFNvIGNoZWNrIGZvciB0aGUgZXhwbGljaXQgX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIGZsYWcgdG8gZGV0ZXJtaW5lIGJlaGF2aW9yLlxuICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWdcbiAgICAgICAgPyB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XG4gICAgICAgIDogbWF5YmVTbmFwc2hvdDtcblxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlLmNhbGwodGhpcywgcHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn1cblxuZXhwb3J0IHsgcG9seWZpbGwgfTtcbiIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbnZhciBfanN4RmlsZU5hbWUgPSBcIi9Vc2Vycy9qcXVlbnNlL3NyYy91bmNvbnRyb2xsYWJsZS9zcmMvdW5jb250cm9sbGFibGUuanNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwb2x5ZmlsbCB9IGZyb20gJ3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5jb250cm9sbGFibGUoQ29tcG9uZW50LCBjb250cm9sbGVkVmFsdWVzLCBtZXRob2RzKSB7XG4gIGlmIChtZXRob2RzID09PSB2b2lkIDApIHtcbiAgICBtZXRob2RzID0gW107XG4gIH1cblxuICB2YXIgZGlzcGxheU5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gIHZhciBjYW5BY2NlcHRSZWYgPSBVdGlscy5jYW5BY2NlcHRSZWYoQ29tcG9uZW50KTtcbiAgdmFyIGNvbnRyb2xsZWRQcm9wcyA9IE9iamVjdC5rZXlzKGNvbnRyb2xsZWRWYWx1ZXMpO1xuICB2YXIgUFJPUFNfVE9fT01JVCA9IGNvbnRyb2xsZWRQcm9wcy5tYXAoVXRpbHMuZGVmYXVsdEtleSk7XG4gICEoY2FuQWNjZXB0UmVmIHx8ICFtZXRob2RzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdbdW5jb250cm9sbGFibGVdIHN0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBwYXNzIHRocm91Z2ggbWV0aG9kcyAnICsgJ2JlY2F1c2UgdGhleSBoYXZlIG5vIGFzc29jaWF0ZWQgaW5zdGFuY2VzLiBDaGVjayBjb21wb25lbnQ6ICcgKyBkaXNwbGF5TmFtZSArICcsICcgKyAnYXR0ZW1wdGluZyB0byBwYXNzIHRocm91Z2ggbWV0aG9kczogJyArIG1ldGhvZHMuam9pbignLCAnKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIHZhciBVbmNvbnRyb2xsZWRDb21wb25lbnQgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoVW5jb250cm9sbGVkQ29tcG9uZW50LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFVuY29udHJvbGxlZENvbXBvbmVudCgpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5oYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBjb250cm9sbGVkUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgICAgdmFyIGhhbmRsZXJOYW1lID0gY29udHJvbGxlZFZhbHVlc1twcm9wTmFtZV07XG5cbiAgICAgICAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgIGlmIChfdGhpcy5wcm9wc1toYW5kbGVyTmFtZV0pIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgICAgICAgX3RoaXMuX25vdGlmeWluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIChfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzKVtoYW5kbGVyTmFtZV0uYXBwbHkoX3RoaXMkcHJvcHMsIFt2YWx1ZV0uY29uY2F0KGFyZ3MpKTtcblxuICAgICAgICAgICAgX3RoaXMuX25vdGlmeWluZyA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghX3RoaXMudW5tb3VudGVkKSBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgdmFyIF9leHRlbmRzMjtcblxuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IF9yZWYudmFsdWVzO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdmFsdWVzOiBfZXh0ZW5kcyhPYmplY3QuY3JlYXRlKG51bGwpLCB2YWx1ZXMsIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW3Byb3BOYW1lXSA9IHZhbHVlLCBfZXh0ZW5kczIpKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpcy5oYW5kbGVyc1toYW5kbGVyTmFtZV0gPSBoYW5kbGVDaGFuZ2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChtZXRob2RzLmxlbmd0aCkgX3RoaXMuYXR0YWNoUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICBfdGhpcy5pbm5lciA9IHJlZjtcbiAgICAgIH07XG4gICAgICB2YXIgdmFsdWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGNvbnRyb2xsZWRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFsdWVzW2tleV0gPSBfdGhpcy5wcm9wc1tVdGlscy5kZWZhdWx0S2V5KGtleSldO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICAgIHByZXZQcm9wczoge31cbiAgICAgIH07XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFVuY29udHJvbGxlZENvbXBvbmVudC5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgLy9sZXQgc2V0U3RhdGUgdHJpZ2dlciB0aGUgdXBkYXRlXG4gICAgICByZXR1cm4gIXRoaXMuX25vdGlmeWluZztcbiAgICB9O1xuXG4gICAgVW5jb250cm9sbGVkQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgX3JlZjIpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBfcmVmMi52YWx1ZXMsXG4gICAgICAgICAgcHJldlByb3BzID0gX3JlZjIucHJldlByb3BzO1xuICAgICAgdmFyIG5leHRTdGF0ZSA9IHtcbiAgICAgICAgdmFsdWVzOiBfZXh0ZW5kcyhPYmplY3QuY3JlYXRlKG51bGwpLCB2YWx1ZXMpLFxuICAgICAgICBwcmV2UHJvcHM6IHt9XG4gICAgICB9O1xuICAgICAgY29udHJvbGxlZFByb3BzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYSBwcm9wIHN3aXRjaGVzIGZyb20gY29udHJvbGxlZCB0byBVbmNvbnRyb2xsZWRcbiAgICAgICAgICogcmVzZXQgaXRzIHZhbHVlIHRvIHRoZSBkZWZhdWx0VmFsdWVcbiAgICAgICAgICovXG4gICAgICAgIG5leHRTdGF0ZS5wcmV2UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG5cbiAgICAgICAgaWYgKCFVdGlscy5pc1Byb3AocHJvcHMsIGtleSkgJiYgVXRpbHMuaXNQcm9wKHByZXZQcm9wcywga2V5KSkge1xuICAgICAgICAgIG5leHRTdGF0ZS52YWx1ZXNba2V5XSA9IHByb3BzW1V0aWxzLmRlZmF1bHRLZXkoa2V5KV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnVubW91bnRlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wczIuaW5uZXJSZWYsXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImlubmVyUmVmXCJdKTtcblxuICAgICAgUFJPUFNfVE9fT01JVC5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIGRlbGV0ZSBwcm9wc1twcm9wXTtcbiAgICAgIH0pO1xuICAgICAgdmFyIG5ld1Byb3BzID0ge307XG4gICAgICBjb250cm9sbGVkUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IF90aGlzMi5wcm9wc1twcm9wTmFtZV07XG4gICAgICAgIG5ld1Byb3BzW3Byb3BOYW1lXSA9IHByb3BWYWx1ZSAhPT0gdW5kZWZpbmVkID8gcHJvcFZhbHVlIDogX3RoaXMyLnN0YXRlLnZhbHVlc1twcm9wTmFtZV07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCBuZXdQcm9wcywgdGhpcy5oYW5kbGVycywge1xuICAgICAgICByZWY6IGlubmVyUmVmIHx8IHRoaXMuYXR0YWNoUmVmXG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIHJldHVybiBVbmNvbnRyb2xsZWRDb21wb25lbnQ7XG4gIH0oUmVhY3QuQ29tcG9uZW50KTtcblxuICBwb2x5ZmlsbChVbmNvbnRyb2xsZWRDb21wb25lbnQpO1xuICBVbmNvbnRyb2xsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBcIlVuY29udHJvbGxlZChcIiArIGRpc3BsYXlOYW1lICsgXCIpXCI7XG4gIFVuY29udHJvbGxlZENvbXBvbmVudC5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7XG4gICAgaW5uZXJSZWY6IGZ1bmN0aW9uIGlubmVyUmVmKCkge31cbiAgfSwgVXRpbHMudW5jb250cm9sbGVkUHJvcFR5cGVzKGNvbnRyb2xsZWRWYWx1ZXMsIGRpc3BsYXlOYW1lKSk7XG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgVW5jb250cm9sbGVkQ29tcG9uZW50LnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gJHByb3hpZWRNZXRob2QoKSB7XG4gICAgICB2YXIgX3RoaXMkaW5uZXI7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkaW5uZXIgPSB0aGlzLmlubmVyKVttZXRob2RdLmFwcGx5KF90aGlzJGlubmVyLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xuICB2YXIgV3JhcHBlZENvbXBvbmVudCA9IFVuY29udHJvbGxlZENvbXBvbmVudDtcblxuICBpZiAoUmVhY3QuZm9yd2FyZFJlZikge1xuICAgIFdyYXBwZWRDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChVbmNvbnRyb2xsZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBpbm5lclJlZjogcmVmLFxuICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgbGluZU51bWJlcjogMTI4XG4gICAgICAgIH0sXG4gICAgICAgIF9fc2VsZjogdGhpc1xuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIFdyYXBwZWRDb21wb25lbnQucHJvcFR5cGVzID0gVW5jb250cm9sbGVkQ29tcG9uZW50LnByb3BUeXBlcztcbiAgfVxuXG4gIFdyYXBwZWRDb21wb25lbnQuQ29udHJvbGxlZENvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgLyoqXG4gICAqIHVzZWZ1bCB3aGVuIHdyYXBwaW5nIGEgQ29tcG9uZW50IGFuZCB5b3Ugd2FudCB0byBjb250cm9sXG4gICAqIGV2ZXJ5dGhpbmdcbiAgICovXG5cbiAgV3JhcHBlZENvbXBvbmVudC5kZWZlckNvbnRyb2xUbyA9IGZ1bmN0aW9uIChuZXdDb21wb25lbnQsIGFkZGl0aW9ucywgbmV4dE1ldGhvZHMpIHtcbiAgICBpZiAoYWRkaXRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIGFkZGl0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmNvbnRyb2xsYWJsZShuZXdDb21wb25lbnQsIF9leHRlbmRzKHt9LCBjb250cm9sbGVkVmFsdWVzLCBhZGRpdGlvbnMpLCBuZXh0TWV0aG9kcyk7XG4gIH07XG5cbiAgcmV0dXJuIFdyYXBwZWRDb21wb25lbnQ7XG59IiwiZnVuY3Rpb24gdG9WYWwobWl4KSB7XG5cdHZhciBrLCB5LCBzdHI9Jyc7XG5cblx0aWYgKHR5cGVvZiBtaXggPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBtaXggPT09ICdudW1iZXInKSB7XG5cdFx0c3RyICs9IG1peDtcblx0fSBlbHNlIGlmICh0eXBlb2YgbWl4ID09PSAnb2JqZWN0Jykge1xuXHRcdGlmIChBcnJheS5pc0FycmF5KG1peCkpIHtcblx0XHRcdGZvciAoaz0wOyBrIDwgbWl4Lmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdGlmIChtaXhba10pIHtcblx0XHRcdFx0XHRpZiAoeSA9IHRvVmFsKG1peFtrXSkpIHtcblx0XHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0XHRzdHIgKz0geTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yIChrIGluIG1peCkge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRzdHIgKz0gaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcblx0dmFyIGk9MCwgdG1wLCB4LCBzdHI9Jyc7XG5cdHdoaWxlIChpIDwgYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdGlmICh0bXAgPSBhcmd1bWVudHNbaSsrXSkge1xuXHRcdFx0aWYgKHggPSB0b1ZhbCh0bXApKSB7XG5cdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdHN0ciArPSB4XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdHI7XG59XG4iLCJ2YXIgTUlMSSAgICA9ICdtaWxsaXNlY29uZHMnXG4gICwgU0VDT05EUyA9ICdzZWNvbmRzJ1xuICAsIE1JTlVURVMgPSAnbWludXRlcydcbiAgLCBIT1VSUyAgID0gJ2hvdXJzJ1xuICAsIERBWSAgICAgPSAnZGF5J1xuICAsIFdFRUsgICAgPSAnd2VlaydcbiAgLCBNT05USCAgID0gJ21vbnRoJ1xuICAsIFlFQVIgICAgPSAneWVhcidcbiAgLCBERUNBREUgID0gJ2RlY2FkZSdcbiAgLCBDRU5UVVJZID0gJ2NlbnR1cnknO1xuXG52YXIgbXVsdGlwbGllck1pbGxpID0ge1xuICAnbWlsbGlzZWNvbmRzJzogMSxcbiAgJ3NlY29uZHMnOiAxMDAwLFxuICAnbWludXRlcyc6IDYwICogMTAwMCxcbiAgJ2hvdXJzJzogNjAgKiA2MCAqIDEwMDAsXG4gICdkYXknOiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAnd2Vlayc6IDcgKiAyNCAqIDYwICogNjAgKiAxMDAwIFxufVxuXG52YXIgbXVsdGlwbGllck1vbnRoID0ge1xuICAnbW9udGgnOiAxLFxuICAneWVhcic6IDEyLFxuICAnZGVjYWRlJzogMTAgKiAxMixcbiAgJ2NlbnR1cnknOiAxMDAgKiAxMlxufVxuXG5mdW5jdGlvbiBkYXlzT2YoeWVhcikge1xuICByZXR1cm4gWzMxLCBkYXlzSW5GZWIoeWVhciksIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXVxufVxuXG5mdW5jdGlvbiBkYXlzSW5GZWIoeWVhcikge1xuICByZXR1cm4gKFxuICAgICAgeWVhciAlIDQgPT09IDAgXG4gICAgICAmJiB5ZWFyICUgMTAwICE9PSAwXG4gICAgKSB8fCB5ZWFyICUgNDAwID09PSAwXG4gICAgICA/IDI5XG4gICAgICA6IDI4XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQoZCwgbnVtLCB1bml0KSB7XG4gIGQgPSBuZXcgRGF0ZShkKVxuXG4gIHN3aXRjaCAodW5pdCl7XG4gICAgY2FzZSBNSUxJOlxuICAgIGNhc2UgU0VDT05EUzpcbiAgICBjYXNlIE1JTlVURVM6XG4gICAgY2FzZSBIT1VSUzpcbiAgICBjYXNlIERBWTpcbiAgICBjYXNlIFdFRUs6XG4gICAgICByZXR1cm4gYWRkTWlsbGlzKGQsIG51bSAqIG11bHRpcGxpZXJNaWxsaVt1bml0XSlcbiAgICBjYXNlIE1PTlRIOlxuICAgIGNhc2UgWUVBUjpcbiAgICBjYXNlIERFQ0FERTpcbiAgICBjYXNlIENFTlRVUlk6XG4gICAgICByZXR1cm4gYWRkTW9udGhzKGQsIG51bSAqIG11bHRpcGxpZXJNb250aFt1bml0XSlcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdW5pdHM6IFwiJyArIHVuaXQgKyAnXCInKVxufVxuXG5mdW5jdGlvbiBhZGRNaWxsaXMoZCwgbnVtKSB7XG4gIHZhciBuZXh0RGF0ZSA9IG5ldyBEYXRlKCsoZCkgKyBudW0pXG5cbiAgcmV0dXJuIHNvbHZlRFNUKGQsIG5leHREYXRlKVxufVxuXG5mdW5jdGlvbiBhZGRNb250aHMoZCwgbnVtKSB7XG4gIHZhciB5ZWFyID0gZC5nZXRGdWxsWWVhcigpXG4gICAgLCBtb250aCA9IGQuZ2V0TW9udGgoKVxuICAgICwgZGF5ID0gZC5nZXREYXRlKClcbiAgICAsIHRvdGFsTW9udGhzID0geWVhciAqIDEyICsgbW9udGggKyBudW1cbiAgICAsIG5leHRZZWFyID0gTWF0aC50cnVuYyh0b3RhbE1vbnRocyAvIDEyKVxuICAgICwgbmV4dE1vbnRoID0gdG90YWxNb250aHMgJSAxMlxuICAgICwgbmV4dERheSA9IE1hdGgubWluKGRheSwgZGF5c09mKG5leHRZZWFyKVtuZXh0TW9udGhdKVxuXG4gIHZhciBuZXh0RGF0ZSA9IG5ldyBEYXRlKGQpXG4gIG5leHREYXRlLnNldEZ1bGxZZWFyKG5leHRZZWFyKVxuXG4gIC8vIFRvIGF2b2lkIGEgYnVnIHdoZW4gc2V0cyB0aGUgRmViIG1vbnRoXG4gIC8vIHdpdGggYSBkYXRlID4gMjggb3IgZGF0ZSA+IDI5IChsZWFwIHllYXIpXG4gIG5leHREYXRlLnNldERhdGUoMSlcblxuICBuZXh0RGF0ZS5zZXRNb250aChuZXh0TW9udGgpXG4gIG5leHREYXRlLnNldERhdGUobmV4dERheSlcblxuICByZXR1cm4gbmV4dERhdGVcbn1cblxuZnVuY3Rpb24gc29sdmVEU1QoY3VycmVudERhdGUsIG5leHREYXRlKSB7XG4gIHZhciBjdXJyZW50T2Zmc2V0ID0gY3VycmVudERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKVxuICAgICwgbmV4dE9mZnNldCA9IG5leHREYXRlLmdldFRpbWV6b25lT2Zmc2V0KClcblxuICAvLyBpZiBpcyBEU1QsIGFkZCB0aGUgZGlmZmVyZW5jZSBpbiBtaW51dGVzXG4gIC8vIGVsc2UgdGhlIGRpZmZlcmVuY2UgaXMgemVyb1xuICB2YXIgZGlmZk1pbnV0ZXMgPSAobmV4dE9mZnNldCAtIGN1cnJlbnRPZmZzZXQpXG5cbiAgcmV0dXJuIG5ldyBEYXRlKCsobmV4dERhdGUpICsgZGlmZk1pbnV0ZXMgKiBtdWx0aXBsaWVyTWlsbGlbJ21pbnV0ZXMnXSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KGQsIG51bSwgdW5pdCkge1xuICByZXR1cm4gYWRkKGQsIC1udW0sIHVuaXQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mKGQsIHVuaXQsIGZpcnN0T2ZXZWVrKSB7XG4gIGQgPSBuZXcgRGF0ZShkKVxuXG4gIHN3aXRjaCAodW5pdCkge1xuICAgIGNhc2UgQ0VOVFVSWTpcbiAgICBjYXNlIERFQ0FERTpcbiAgICBjYXNlIFlFQVI6XG4gICAgICAgIGQgPSBtb250aChkLCAwKTtcbiAgICBjYXNlIE1PTlRIOlxuICAgICAgICBkID0gZGF0ZShkLCAxKTtcbiAgICBjYXNlIFdFRUs6XG4gICAgY2FzZSBEQVk6XG4gICAgICAgIGQgPSBob3VycyhkLCAwKTtcbiAgICBjYXNlIEhPVVJTOlxuICAgICAgICBkID0gbWludXRlcyhkLCAwKTtcbiAgICBjYXNlIE1JTlVURVM6XG4gICAgICAgIGQgPSBzZWNvbmRzKGQsIDApO1xuICAgIGNhc2UgU0VDT05EUzpcbiAgICAgICAgZCA9IG1pbGxpc2Vjb25kcyhkLCAwKTtcbiAgfVxuXG4gIGlmICh1bml0ID09PSBERUNBREUpXG4gICAgZCA9IHN1YnRyYWN0KGQsIHllYXIoZCkgJSAxMCwgJ3llYXInKVxuXG4gIGlmICh1bml0ID09PSBDRU5UVVJZKVxuICAgIGQgPSBzdWJ0cmFjdChkLCB5ZWFyKGQpICUgMTAwLCAneWVhcicpXG5cbiAgaWYgKHVuaXQgPT09IFdFRUspXG4gICAgZCA9IHdlZWtkYXkoZCwgMCwgZmlyc3RPZldlZWspO1xuXG4gIHJldHVybiBkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmRPZihkLCB1bml0LCBmaXJzdE9mV2Vlayl7XG4gIGQgPSBuZXcgRGF0ZShkKVxuICBkID0gc3RhcnRPZihkLCB1bml0LCBmaXJzdE9mV2VlaylcbiAgc3dpdGNoICh1bml0KSB7XG4gICAgY2FzZSBDRU5UVVJZOlxuICAgIGNhc2UgREVDQURFOlxuICAgIGNhc2UgWUVBUjpcbiAgICBjYXNlIE1PTlRIOlxuICAgIGNhc2UgV0VFSzpcbiAgICAgIGQgPSBhZGQoZCwgMSwgdW5pdClcbiAgICAgIGQgPSBzdWJ0cmFjdChkLCAxLCBEQVkpXG4gICAgICBkLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSlcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgREFZOlxuICAgICAgZC5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpXG4gICAgICBicmVhaztcbiAgICBjYXNlIEhPVVJTOlxuICAgIGNhc2UgTUlOVVRFUzpcbiAgICBjYXNlIFNFQ09ORFM6XG4gICAgICBkID0gYWRkKGQsIDEsIHVuaXQpXG4gICAgICBkID0gc3VidHJhY3QoZCwgMSwgTUlMSSlcbiAgfVxuICByZXR1cm4gZFxufVxuXG5leHBvcnQgdmFyIGVxID0gIGNyZWF0ZUNvbXBhcmVyKGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gYSA9PT0gYiB9KVxuZXhwb3J0IHZhciBuZXEgPSBjcmVhdGVDb21wYXJlcihmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgIT09IGIgfSlcbmV4cG9ydCB2YXIgZ3QgPSAgY3JlYXRlQ29tcGFyZXIoZnVuY3Rpb24oYSwgYil7IHJldHVybiBhID4gYiB9KVxuZXhwb3J0IHZhciBndGUgPSBjcmVhdGVDb21wYXJlcihmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgPj0gYiB9KVxuZXhwb3J0IHZhciBsdCA9ICBjcmVhdGVDb21wYXJlcihmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgPCBiIH0pXG5leHBvcnQgdmFyIGx0ZSA9IGNyZWF0ZUNvbXBhcmVyKGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gYSA8PSBiIH0pXG5cbmV4cG9ydCBmdW5jdGlvbiBtaW4oKXtcbiAgcmV0dXJuIG5ldyBEYXRlKE1hdGgubWluLmFwcGx5KE1hdGgsIGFyZ3VtZW50cykpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXgoKXtcbiAgcmV0dXJuIG5ldyBEYXRlKE1hdGgubWF4LmFwcGx5KE1hdGgsIGFyZ3VtZW50cykpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpblJhbmdlKGRheSwgbWluLCBtYXgsIHVuaXQpe1xuICB1bml0ID0gdW5pdCB8fCAnZGF5J1xuXG4gIHJldHVybiAoIW1pbiB8fCBndGUoZGF5LCBtaW4sIHVuaXQpKVxuICAgICAgJiYgKCFtYXggfHwgbHRlKGRheSwgbWF4LCB1bml0KSlcbn1cblxuZXhwb3J0IHZhciBtaWxsaXNlY29uZHMgPSBjcmVhdGVBY2Nlc3NvcignTWlsbGlzZWNvbmRzJylcbmV4cG9ydCB2YXIgc2Vjb25kcyA9ICAgICAgY3JlYXRlQWNjZXNzb3IoJ1NlY29uZHMnKVxuZXhwb3J0IHZhciBtaW51dGVzID0gICAgICBjcmVhdGVBY2Nlc3NvcignTWludXRlcycpXG5leHBvcnQgdmFyIGhvdXJzID0gICAgICAgIGNyZWF0ZUFjY2Vzc29yKCdIb3VycycpXG5leHBvcnQgdmFyIGRheSA9ICAgICAgICAgIGNyZWF0ZUFjY2Vzc29yKCdEYXknKVxuZXhwb3J0IHZhciBkYXRlID0gICAgICAgICBjcmVhdGVBY2Nlc3NvcignRGF0ZScpXG5leHBvcnQgdmFyIG1vbnRoID0gICAgICAgIGNyZWF0ZUFjY2Vzc29yKCdNb250aCcpXG5leHBvcnQgdmFyIHllYXIgPSAgICAgICAgIGNyZWF0ZUFjY2Vzc29yKCdGdWxsWWVhcicpXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNhZGUoZCwgdmFsKSB7XG4gIHJldHVybiB2YWwgPT09IHVuZGVmaW5lZFxuICAgID8geWVhcihzdGFydE9mKGQsIERFQ0FERSkpXG4gICAgOiBhZGQoZCwgdmFsICsgMTAsIFlFQVIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VudHVyeShkLCB2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyB5ZWFyKHN0YXJ0T2YoZCwgQ0VOVFVSWSkpXG4gICAgOiBhZGQoZCwgdmFsICsgMTAwLCBZRUFSKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdlZWtkYXkoZCwgdmFsLCBmaXJzdERheSkge1xuICAgIHZhciB3ID0gKGRheShkKSArIDcgLSAoZmlyc3REYXkgfHwgMCkgKSAlIDc7XG5cbiAgICByZXR1cm4gdmFsID09PSB1bmRlZmluZWRcbiAgICAgID8gd1xuICAgICAgOiBhZGQoZCwgdmFsIC0gdywgREFZKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmYoZGF0ZTEsIGRhdGUyLCB1bml0LCBhc0Zsb2F0KSB7XG4gIHZhciBkaXZpZGVuZCwgZGl2aXNvciwgcmVzdWx0O1xuXG4gIHN3aXRjaCAodW5pdCkge1xuICAgIGNhc2UgTUlMSTpcbiAgICBjYXNlIFNFQ09ORFM6XG4gICAgY2FzZSBNSU5VVEVTOlxuICAgIGNhc2UgSE9VUlM6XG4gICAgY2FzZSBEQVk6XG4gICAgY2FzZSBXRUVLOlxuICAgICAgZGl2aWRlbmQgPSBkYXRlMi5nZXRUaW1lKCkgLSBkYXRlMS5nZXRUaW1lKCk7IGJyZWFrO1xuICAgIGNhc2UgTU9OVEg6XG4gICAgY2FzZSBZRUFSOlxuICAgIGNhc2UgREVDQURFOlxuICAgIGNhc2UgQ0VOVFVSWTpcbiAgICAgIGRpdmlkZW5kID0gKHllYXIoZGF0ZTIpIC0geWVhcihkYXRlMSkpICogMTIgKyBtb250aChkYXRlMikgLSBtb250aChkYXRlMSk7IGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHVuaXRzOiBcIicgKyB1bml0ICsgJ1wiJyk7XG4gIH1cblxuICBzd2l0Y2ggKHVuaXQpIHtcbiAgICBjYXNlIE1JTEk6XG4gICAgICAgIGRpdmlzb3IgPSAxOyBicmVhaztcbiAgICBjYXNlIFNFQ09ORFM6XG4gICAgICAgIGRpdmlzb3IgPSAxMDAwOyBicmVhaztcbiAgICBjYXNlIE1JTlVURVM6XG4gICAgICAgIGRpdmlzb3IgPSAxMDAwICogNjA7IGJyZWFrO1xuICAgIGNhc2UgSE9VUlM6XG4gICAgICAgIGRpdmlzb3IgPSAxMDAwICogNjAgKiA2MDsgYnJlYWs7XG4gICAgY2FzZSBEQVk6XG4gICAgICAgIGRpdmlzb3IgPSAxMDAwICogNjAgKiA2MCAqIDI0OyBicmVhaztcbiAgICBjYXNlIFdFRUs6XG4gICAgICAgIGRpdmlzb3IgPSAxMDAwICogNjAgKiA2MCAqIDI0ICogNzsgYnJlYWs7XG4gICAgY2FzZSBNT05USDpcbiAgICAgICAgZGl2aXNvciA9IDE7IGJyZWFrO1xuICAgIGNhc2UgWUVBUjpcbiAgICAgICAgZGl2aXNvciA9IDEyOyBicmVhaztcbiAgICBjYXNlIERFQ0FERTpcbiAgICAgICAgZGl2aXNvciA9IDEyMDsgYnJlYWs7XG4gICAgY2FzZSBDRU5UVVJZOlxuICAgICAgICBkaXZpc29yID0gMTIwMDsgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdW5pdHM6IFwiJyArIHVuaXQgKyAnXCInKTtcbiAgfVxuXG4gIHJlc3VsdCA9IGRpdmlkZW5kIC8gZGl2aXNvcjtcblxuICByZXR1cm4gYXNGbG9hdCA/IHJlc3VsdCA6IE1hdGgucm91bmQocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQWNjZXNzb3IobWV0aG9kKXtcbiAgdmFyIGhvdXJMZW5ndGggPSAoZnVuY3Rpb24obWV0aG9kKSB7ICBcbiAgICBzd2l0Y2gobWV0aG9kKSB7XG4gICAgICBjYXNlICdNaWxsaXNlY29uZHMnOlxuICAgICAgICByZXR1cm4gMzYwMDAwMDtcbiAgICAgIGNhc2UgJ1NlY29uZHMnOlxuICAgICAgICByZXR1cm4gMzYwMDtcbiAgICAgIGNhc2UgJ01pbnV0ZXMnOlxuICAgICAgICByZXR1cm4gNjA7XG4gICAgICBjYXNlICdIb3Vycyc6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9KShtZXRob2QpO1xuICBcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIHZhbCl7XG4gICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGRbJ2dldCcgKyBtZXRob2RdKClcblxuICAgIHZhciBkYXRlT3V0ID0gbmV3IERhdGUoZClcbiAgICBkYXRlT3V0WydzZXQnICsgbWV0aG9kXSh2YWwpXG4gICAgXG4gICAgaWYoaG91ckxlbmd0aCAmJiBkYXRlT3V0WydnZXQnK21ldGhvZF0oKSAhPSB2YWwgJiYgKG1ldGhvZCA9PT0gJ0hvdXJzJyB8fCB2YWwgPj1ob3VyTGVuZ3RoICYmIChkYXRlT3V0LmdldEhvdXJzKCktZC5nZXRIb3VycygpPE1hdGguZmxvb3IodmFsL2hvdXJMZW5ndGgpKSkgKXtcbiAgICAgIC8vU2tpcCBEU1QgaG91ciwgaWYgaXQgb2NjdXJzXG4gICAgICBkYXRlT3V0WydzZXQnK21ldGhvZF0odmFsK2hvdXJMZW5ndGgpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZGF0ZU91dFxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBhcmVyKG9wZXJhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgYiwgdW5pdCkge1xuICAgIHJldHVybiBvcGVyYXRvcigrc3RhcnRPZihhLCB1bml0KSwgK3N0YXJ0T2YoYiwgdW5pdCkpXG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgfVxuICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlbmd0aDtcbiAgfVxuICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gIHN0YXJ0ID4+Pj0gMDtcblxuICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVNsaWNlO1xuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVxO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdDtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Z1bmN0aW9uO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0xlbmd0aDtcbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5TGlrZTtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNJbmRleDtcbiIsImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBpc0luZGV4IGZyb20gJy4vX2lzSW5kZXguanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzSXRlcmF0ZWVDYWxsO1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggYSBzaW5nbGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuICovXG52YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbi8qKlxuICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAqL1xuZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuXG4gIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0cmltbWVkRW5kSW5kZXg7XG4iLCJpbXBvcnQgdHJpbW1lZEVuZEluZGV4IGZyb20gJy4vX3RyaW1tZWRFbmRJbmRleC5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW1TdGFydCA9IC9eXFxzKy87XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nXG4gICAgPyBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJylcbiAgICA6IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVRyaW07XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1N5bWJvbDtcbiIsImltcG9ydCBiYXNlVHJpbSBmcm9tICcuL19iYXNlVHJpbS5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSBiYXNlVHJpbSh2YWx1ZSk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b051bWJlcjtcbiIsImltcG9ydCB0b051bWJlciBmcm9tICcuL3RvTnVtYmVyLmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMi4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9GaW5pdGUoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgfVxuICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICB9XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvRmluaXRlO1xuIiwiaW1wb3J0IHRvRmluaXRlIGZyb20gJy4vdG9GaW5pdGUuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0ludGVnZXI7XG4iLCJpbXBvcnQgYmFzZVNsaWNlIGZyb20gJy4vX2Jhc2VTbGljZS5qcyc7XG5pbXBvcnQgaXNJdGVyYXRlZUNhbGwgZnJvbSAnLi9faXNJdGVyYXRlZUNhbGwuanMnO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuL3RvSW50ZWdlci5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICogZWxlbWVudHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSBUaGUgbGVuZ3RoIG9mIGVhY2ggY2h1bmtcbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gKlxuICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAqL1xuZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZSwgZ3VhcmQpIDogc2l6ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgIHNpemUgPSAxO1xuICB9IGVsc2Uge1xuICAgIHNpemUgPSBuYXRpdmVNYXgodG9JbnRlZ2VyKHNpemUpLCAwKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGlmICghbGVuZ3RoIHx8IHNpemUgPCAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciBpbmRleCA9IDAsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNodW5rO1xuIiwiLyoqXG4gKiBSZXR1cm5zIHRoZSBvd25lciBkb2N1bWVudCBvZiBhIGdpdmVuIGVsZW1lbnQuXG4gKiBcbiAqIEBwYXJhbSBub2RlIHRoZSBlbGVtZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi9vd25lckRvY3VtZW50Jztcbi8qKlxuICogUmV0dXJucyB0aGUgb3duZXIgd2luZG93IG9mIGEgZ2l2ZW4gZWxlbWVudC5cbiAqIFxuICogQHBhcmFtIG5vZGUgdGhlIGVsZW1lbnRcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lcldpbmRvdyhub2RlKSB7XG4gIHZhciBkb2MgPSBvd25lckRvY3VtZW50KG5vZGUpO1xuICByZXR1cm4gZG9jICYmIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwiaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4vb3duZXJXaW5kb3cnO1xuLyoqXG4gKiBSZXR1cm5zIG9uZSBvciBhbGwgY29tcHV0ZWQgc3R5bGUgcHJvcGVydGllcyBvZiBhbiBlbGVtZW50LlxuICogXG4gKiBAcGFyYW0gbm9kZSB0aGUgZWxlbWVudFxuICogQHBhcmFtIHBzdWVkb0VsZW1lbnQgdGhlIHN0eWxlIHByb3BlcnR5XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBwc3VlZG9FbGVtZW50KSB7XG4gIHJldHVybiBvd25lcldpbmRvdyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIHBzdWVkb0VsZW1lbnQpO1xufSIsInZhciByVXBwZXIgPSAvKFtBLVpdKS9nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHlwaGVuYXRlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoclVwcGVyLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMmFlYjhhMmE2YmViMDA2MTdhNDIxN2Y3ZjgyODQ5MjRmYTJhZDgxOS9zcmMvdmVuZG9yL2NvcmUvaHlwaGVuYXRlU3R5bGVOYW1lLmpzXG4gKi9cbmltcG9ydCBoeXBoZW5hdGUgZnJvbSAnLi9oeXBoZW5hdGUnO1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufSIsInZhciBzdXBwb3J0ZWRUcmFuc2Zvcm1zID0gL14oKHRyYW5zbGF0ZXxyb3RhdGV8c2NhbGUpKFh8WXxafDNkKT98bWF0cml4KDNkKT98cGVyc3BlY3RpdmV8c2tldyhYfFkpPykkL2k7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgc3VwcG9ydGVkVHJhbnNmb3Jtcy50ZXN0KHZhbHVlKSk7XG59IiwiaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSAnLi9nZXRDb21wdXRlZFN0eWxlJztcbmltcG9ydCBoeXBoZW5hdGUgZnJvbSAnLi9oeXBoZW5hdGVTdHlsZSc7XG5pbXBvcnQgaXNUcmFuc2Zvcm0gZnJvbSAnLi9pc1RyYW5zZm9ybSc7XG5cbmZ1bmN0aW9uIHN0eWxlKG5vZGUsIHByb3BlcnR5KSB7XG4gIHZhciBjc3MgPSAnJztcbiAgdmFyIHRyYW5zZm9ybXMgPSAnJztcblxuICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoaHlwaGVuYXRlKHByb3BlcnR5KSkgfHwgZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5nZXRQcm9wZXJ0eVZhbHVlKGh5cGhlbmF0ZShwcm9wZXJ0eSkpO1xuICB9XG5cbiAgT2JqZWN0LmtleXMocHJvcGVydHkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHByb3BlcnR5W2tleV07XG5cbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGh5cGhlbmF0ZShrZXkpKTtcbiAgICB9IGVsc2UgaWYgKGlzVHJhbnNmb3JtKGtleSkpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0ga2V5ICsgXCIoXCIgKyB2YWx1ZSArIFwiKSBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzICs9IGh5cGhlbmF0ZShrZXkpICsgXCI6IFwiICsgdmFsdWUgKyBcIjtcIjtcbiAgICB9XG4gIH0pO1xuXG4gIGlmICh0cmFuc2Zvcm1zKSB7XG4gICAgY3NzICs9IFwidHJhbnNmb3JtOiBcIiArIHRyYW5zZm9ybXMgKyBcIjtcIjtcbiAgfVxuXG4gIG5vZGUuc3R5bGUuY3NzVGV4dCArPSBcIjtcIiArIGNzcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGU7IiwiLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSwgbm8tY29uZC1hc3NpZ24gKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZWxlbWVudCBjb250YWlucyBhbm90aGVyIGdpdmVuIGVsZW1lbnQuXG4gKiBcbiAqIEBwYXJhbSBjb250ZXh0IHRoZSBjb250ZXh0IGVsZW1lbnRcbiAqIEBwYXJhbSBub2RlIHRoZSBlbGVtZW50IHRvIGNoZWNrXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRhaW5zKGNvbnRleHQsIG5vZGUpIHtcbiAgLy8gSFRNTCBET00gYW5kIFNWRyBET00gbWF5IGhhdmUgZGlmZmVyZW50IHN1cHBvcnQgbGV2ZWxzLFxuICAvLyBzbyB3ZSBuZWVkIHRvIGNoZWNrIG9uIGNvbnRleHQgaW5zdGVhZCBvZiBhIGRvY3VtZW50IHJvb3QgZWxlbWVudC5cbiAgaWYgKGNvbnRleHQuY29udGFpbnMpIHJldHVybiBjb250ZXh0LmNvbnRhaW5zKG5vZGUpO1xuICBpZiAoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikgcmV0dXJuIGNvbnRleHQgPT09IG5vZGUgfHwgISEoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIDE2KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0RvY3VtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuICdub2RlVHlwZScgaW4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSBkb2N1bWVudC5ET0NVTUVOVF9OT0RFO1xufSIsImltcG9ydCBpc0RvY3VtZW50IGZyb20gJy4vaXNEb2N1bWVudCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1dpbmRvdyhub2RlKSB7XG4gIGlmICgnd2luZG93JyBpbiBub2RlICYmIG5vZGUud2luZG93ID09PSBub2RlKSByZXR1cm4gbm9kZTtcbiAgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHJldHVybiBub2RlLmRlZmF1bHRWaWV3IHx8IGZhbHNlO1xuICByZXR1cm4gZmFsc2U7XG59IiwiaW1wb3J0IGlzV2luZG93IGZyb20gJy4vaXNXaW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0c2Nyb2xsQWNjZXNzb3Iob2Zmc2V0KSB7XG4gIHZhciBwcm9wID0gb2Zmc2V0ID09PSAncGFnZVhPZmZzZXQnID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCc7XG5cbiAgZnVuY3Rpb24gc2Nyb2xsQWNjZXNzb3Iobm9kZSwgdmFsKSB7XG4gICAgdmFyIHdpbiA9IGlzV2luZG93KG5vZGUpO1xuXG4gICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gd2luID8gd2luW29mZnNldF0gOiBub2RlW3Byb3BdO1xuICAgIH1cblxuICAgIGlmICh3aW4pIHtcbiAgICAgIHdpbi5zY3JvbGxUbyh3aW5bb2Zmc2V0XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZVtwcm9wXSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2Nyb2xsQWNjZXNzb3I7XG59IiwiaW1wb3J0IGdldFNjcm9sbEFjY2Vzc29yIGZyb20gJy4vZ2V0U2Nyb2xsQWNjZXNzb3InO1xuLyoqXG4gKiBHZXRzIG9yIHNldHMgdGhlIHNjcm9sbCBsZWZ0IHBvc2l0aW9uIG9mIGEgZ2l2ZW4gZWxlbWVudC5cbiAqIFxuICogQHBhcmFtIG5vZGUgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB2YWwgdGhlIHBvc2l0aW9uIHRvIHNldFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGdldFNjcm9sbEFjY2Vzc29yKCdwYWdlWE9mZnNldCcpOyIsImltcG9ydCBnZXRTY3JvbGxBY2Nlc3NvciBmcm9tICcuL2dldFNjcm9sbEFjY2Vzc29yJztcbi8qKlxuICogR2V0cyBvciBzZXRzIHRoZSBzY3JvbGwgdG9wIHBvc2l0aW9uIG9mIGEgZ2l2ZW4gZWxlbWVudC5cbiAqIFxuICogQHBhcmFtIG5vZGUgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB2YWwgdGhlIHBvc2l0aW9uIHRvIHNldFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGdldFNjcm9sbEFjY2Vzc29yKCdwYWdlWU9mZnNldCcpOyIsImltcG9ydCBjb250YWlucyBmcm9tICcuL2NvbnRhaW5zJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4vb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgc2Nyb2xsTGVmdCBmcm9tICcuL3Njcm9sbExlZnQnO1xuaW1wb3J0IHNjcm9sbFRvcCBmcm9tICcuL3Njcm9sbFRvcCc7XG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBvZiBhIGdpdmVuIGVsZW1lbnQsIGluY2x1ZGluZyB0b3AgYW5kIGxlZnQgcG9zaXRpb25zLCB3aWR0aCBhbmQgaGVpZ2h0LlxuICogXG4gKiBAcGFyYW0gbm9kZSB0aGUgZWxlbWVudFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9mZnNldChub2RlKSB7XG4gIHZhciBkb2MgPSBvd25lckRvY3VtZW50KG5vZGUpO1xuICB2YXIgYm94ID0ge1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIGhlaWdodDogMCxcbiAgICB3aWR0aDogMFxuICB9O1xuICB2YXIgZG9jRWxlbSA9IGRvYyAmJiBkb2MuZG9jdW1lbnRFbGVtZW50OyAvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcblxuICBpZiAoIWRvY0VsZW0gfHwgIWNvbnRhaW5zKGRvY0VsZW0sIG5vZGUpKSByZXR1cm4gYm94O1xuICBpZiAobm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09IHVuZGVmaW5lZCkgYm94ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgYm94ID0ge1xuICAgIHRvcDogYm94LnRvcCArIHNjcm9sbFRvcChkb2NFbGVtKSAtIChkb2NFbGVtLmNsaWVudFRvcCB8fCAwKSxcbiAgICBsZWZ0OiBib3gubGVmdCArIHNjcm9sbExlZnQoZG9jRWxlbSkgLSAoZG9jRWxlbS5jbGllbnRMZWZ0IHx8IDApLFxuICAgIHdpZHRoOiBib3gud2lkdGgsXG4gICAgaGVpZ2h0OiBib3guaGVpZ2h0XG4gIH07XG4gIHJldHVybiBib3g7XG59IiwiaW1wb3J0IGNzcyBmcm9tICcuL2Nzcyc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuL293bmVyRG9jdW1lbnQnO1xuXG52YXIgaXNIVE1MRWxlbWVudCA9IGZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQoZSkge1xuICByZXR1cm4gISFlICYmICdvZmZzZXRQYXJlbnQnIGluIGU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvZmZzZXRQYXJlbnQobm9kZSkge1xuICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgdmFyIHBhcmVudCA9IG5vZGUgJiYgbm9kZS5vZmZzZXRQYXJlbnQ7XG5cbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQocGFyZW50KSAmJiBwYXJlbnQubm9kZU5hbWUgIT09ICdIVE1MJyAmJiBjc3MocGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQub2Zmc2V0UGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIHBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGNzcyBmcm9tICcuL2Nzcyc7XG5pbXBvcnQgZ2V0T2Zmc2V0IGZyb20gJy4vb2Zmc2V0JztcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi9vZmZzZXRQYXJlbnQnO1xuaW1wb3J0IHNjcm9sbExlZnQgZnJvbSAnLi9zY3JvbGxMZWZ0JztcbmltcG9ydCBzY3JvbGxUb3AgZnJvbSAnLi9zY3JvbGxUb3AnO1xuXG52YXIgbm9kZU5hbWUgPSBmdW5jdGlvbiBub2RlTmFtZShub2RlKSB7XG4gIHJldHVybiBub2RlLm5vZGVOYW1lICYmIG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIGEgZ2l2ZW4gZWxlbWVudC5cbiAqIFxuICogQHBhcmFtIG5vZGUgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSBvZmZzZXRQYXJlbnQgdGhlIG9mZnNldCBwYXJlbnRcbiAqL1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBvc2l0aW9uKG5vZGUsIG9mZnNldFBhcmVudCkge1xuICB2YXIgcGFyZW50T2Zmc2V0ID0ge1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwXG4gIH07XG4gIHZhciBvZmZzZXQ7IC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG4gIC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXG4gIGlmIChjc3Mobm9kZSwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICBvZmZzZXQgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJlbnQgPSBvZmZzZXRQYXJlbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KG5vZGUpO1xuICAgIG9mZnNldCA9IGdldE9mZnNldChub2RlKTtcbiAgICBpZiAobm9kZU5hbWUocGFyZW50KSAhPT0gJ2h0bWwnKSBwYXJlbnRPZmZzZXQgPSBnZXRPZmZzZXQocGFyZW50KTtcbiAgICB2YXIgYm9yZGVyVG9wID0gU3RyaW5nKGNzcyhwYXJlbnQsICdib3JkZXJUb3BXaWR0aCcpIHx8IDApO1xuICAgIHBhcmVudE9mZnNldC50b3AgKz0gcGFyc2VJbnQoYm9yZGVyVG9wLCAxMCkgLSBzY3JvbGxUb3AocGFyZW50KSB8fCAwO1xuICAgIHZhciBib3JkZXJMZWZ0ID0gU3RyaW5nKGNzcyhwYXJlbnQsICdib3JkZXJMZWZ0V2lkdGgnKSB8fCAwKTtcbiAgICBwYXJlbnRPZmZzZXQubGVmdCArPSBwYXJzZUludChib3JkZXJMZWZ0LCAxMCkgLSBzY3JvbGxMZWZ0KHBhcmVudCkgfHwgMDtcbiAgfVxuXG4gIHZhciBtYXJnaW5Ub3AgPSBTdHJpbmcoY3NzKG5vZGUsICdtYXJnaW5Ub3AnKSB8fCAwKTtcbiAgdmFyIG1hcmdpbkxlZnQgPSBTdHJpbmcoY3NzKG5vZGUsICdtYXJnaW5MZWZ0JykgfHwgMCk7IC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBub2RlIG1hcmdpbnNcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldCwge1xuICAgIHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSAocGFyc2VJbnQobWFyZ2luVG9wLCAxMCkgfHwgMCksXG4gICAgbGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIChwYXJzZUludChtYXJnaW5MZWZ0LCAxMCkgfHwgMClcbiAgfSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTsiLCJpbXBvcnQgY2FuVXNlRE9NIGZyb20gJy4vY2FuVXNlRE9NJztcblxuLyogaHR0cHM6Ly9naXRodWIuY29tL2NvbXBvbmVudC9yYWYgKi9cbnZhciBwcmV2ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbmZ1bmN0aW9uIGZhbGxiYWNrKGZuKSB7XG4gIHZhciBjdXJyID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIHZhciBtcyA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnIgLSBwcmV2KSk7XG4gIHZhciBoYW5kbGUgPSBzZXRUaW1lb3V0KGZuLCBtcyk7XG4gIHByZXYgPSBjdXJyO1xuICByZXR1cm4gaGFuZGxlO1xufVxuXG52YXIgdmVuZG9ycyA9IFsnJywgJ3dlYmtpdCcsICdtb3onLCAnbycsICdtcyddO1xudmFyIGNhbmNlbE1ldGhvZCA9ICdjbGVhclRpbWVvdXQnO1xudmFyIHJhZkltcGwgPSBmYWxsYmFjazsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1tdXRhYmxlLWV4cG9ydHNcblxudmFyIGdldEtleSA9IGZ1bmN0aW9uIGdldEtleSh2ZW5kb3IsIGspIHtcbiAgcmV0dXJuIHZlbmRvciArICghdmVuZG9yID8gayA6IGtbMF0udG9VcHBlckNhc2UoKSArIGsuc3Vic3RyKDEpKSArIFwiQW5pbWF0aW9uRnJhbWVcIjtcbn07XG5cbmlmIChjYW5Vc2VET00pIHtcbiAgdmVuZG9ycy5zb21lKGZ1bmN0aW9uICh2ZW5kb3IpIHtcbiAgICB2YXIgcmFmTWV0aG9kID0gZ2V0S2V5KHZlbmRvciwgJ3JlcXVlc3QnKTtcblxuICAgIGlmIChyYWZNZXRob2QgaW4gd2luZG93KSB7XG4gICAgICBjYW5jZWxNZXRob2QgPSBnZXRLZXkodmVuZG9yLCAnY2FuY2VsJyk7IC8vIEB0cy1pZ25vcmVcblxuICAgICAgcmFmSW1wbCA9IGZ1bmN0aW9uIHJhZkltcGwoY2IpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvd1tyYWZNZXRob2RdKGNiKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuICEhcmFmSW1wbDtcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgY2FuY2VsID0gZnVuY3Rpb24gY2FuY2VsKGlkKSB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgaWYgKHR5cGVvZiB3aW5kb3dbY2FuY2VsTWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykgd2luZG93W2NhbmNlbE1ldGhvZF0oaWQpO1xufTtcbmV4cG9ydCB2YXIgcmVxdWVzdCA9IHJhZkltcGw7IiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVDbGVhcjtcbiIsImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzb2NJbmRleE9mO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZURlbGV0ZTtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlR2V0O1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlSGFzO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZVNldDtcbiIsImltcG9ydCBsaXN0Q2FjaGVDbGVhciBmcm9tICcuL19saXN0Q2FjaGVDbGVhci5qcyc7XG5pbXBvcnQgbGlzdENhY2hlRGVsZXRlIGZyb20gJy4vX2xpc3RDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbGlzdENhY2hlR2V0IGZyb20gJy4vX2xpc3RDYWNoZUdldC5qcyc7XG5pbXBvcnQgbGlzdENhY2hlSGFzIGZyb20gJy4vX2xpc3RDYWNoZUhhcy5qcyc7XG5pbXBvcnQgbGlzdENhY2hlU2V0IGZyb20gJy4vX2xpc3RDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuZXhwb3J0IGRlZmF1bHQgTGlzdENhY2hlO1xuIiwiaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0hhcztcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5leHBvcnQgZGVmYXVsdCBjb3JlSnNEYXRhO1xuIiwiaW1wb3J0IGNvcmVKc0RhdGEgZnJvbSAnLi9fY29yZUpzRGF0YS5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFza2VkO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1NvdXJjZTtcbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNNYXNrZWQgZnJvbSAnLi9faXNNYXNrZWQuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTmF0aXZlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwiaW1wb3J0IGJhc2VJc05hdGl2ZSBmcm9tICcuL19iYXNlSXNOYXRpdmUuanMnO1xuaW1wb3J0IGdldFZhbHVlIGZyb20gJy4vX2dldFZhbHVlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TmF0aXZlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5leHBvcnQgZGVmYXVsdCBNYXA7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUNyZWF0ZTtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hEZWxldGU7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEdldDtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoSGFzO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaFNldDtcbiIsImltcG9ydCBoYXNoQ2xlYXIgZnJvbSAnLi9faGFzaENsZWFyLmpzJztcbmltcG9ydCBoYXNoRGVsZXRlIGZyb20gJy4vX2hhc2hEZWxldGUuanMnO1xuaW1wb3J0IGhhc2hHZXQgZnJvbSAnLi9faGFzaEdldC5qcyc7XG5pbXBvcnQgaGFzaEhhcyBmcm9tICcuL19oYXNoSGFzLmpzJztcbmltcG9ydCBoYXNoU2V0IGZyb20gJy4vX2hhc2hTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuZXhwb3J0IGRlZmF1bHQgSGFzaDtcbiIsImltcG9ydCBIYXNoIGZyb20gJy4vX0hhc2guanMnO1xuaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlQ2xlYXI7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzS2V5YWJsZTtcbiIsImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZURlbGV0ZTtcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlR2V0O1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlSGFzO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVTZXQ7XG4iLCJpbXBvcnQgbWFwQ2FjaGVDbGVhciBmcm9tICcuL19tYXBDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBtYXBDYWNoZURlbGV0ZSBmcm9tICcuL19tYXBDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVHZXQgZnJvbSAnLi9fbWFwQ2FjaGVHZXQuanMnO1xuaW1wb3J0IG1hcENhY2hlSGFzIGZyb20gJy4vX21hcENhY2hlSGFzLmpzJztcbmltcG9ydCBtYXBDYWNoZVNldCBmcm9tICcuL19tYXBDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBNYXBDYWNoZTtcbiIsImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcbmltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja1NldDtcbiIsImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBzdGFja0NsZWFyIGZyb20gJy4vX3N0YWNrQ2xlYXIuanMnO1xuaW1wb3J0IHN0YWNrRGVsZXRlIGZyb20gJy4vX3N0YWNrRGVsZXRlLmpzJztcbmltcG9ydCBzdGFja0dldCBmcm9tICcuL19zdGFja0dldC5qcyc7XG5pbXBvcnQgc3RhY2tIYXMgZnJvbSAnLi9fc3RhY2tIYXMuanMnO1xuaW1wb3J0IHN0YWNrU2V0IGZyb20gJy4vX3N0YWNrU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBTdGFjaztcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0Q2FjaGVIYXM7XG4iLCJpbXBvcnQgTWFwQ2FjaGUgZnJvbSAnLi9fTWFwQ2FjaGUuanMnO1xuaW1wb3J0IHNldENhY2hlQWRkIGZyb20gJy4vX3NldENhY2hlQWRkLmpzJztcbmltcG9ydCBzZXRDYWNoZUhhcyBmcm9tICcuL19zZXRDYWNoZUhhcy5qcyc7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuZXhwb3J0IGRlZmF1bHQgU2V0Q2FjaGU7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheVNvbWU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FjaGVIYXM7XG4iLCJpbXBvcnQgU2V0Q2FjaGUgZnJvbSAnLi9fU2V0Q2FjaGUuanMnO1xuaW1wb3J0IGFycmF5U29tZSBmcm9tICcuL19hcnJheVNvbWUuanMnO1xuaW1wb3J0IGNhY2hlSGFzIGZyb20gJy4vX2NhY2hlSGFzLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbEFycmF5cztcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBVaW50OEFycmF5O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwVG9BcnJheTtcbiIsIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldFRvQXJyYXk7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgVWludDhBcnJheSBmcm9tICcuL19VaW50OEFycmF5LmpzJztcbmltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcbmltcG9ydCBlcXVhbEFycmF5cyBmcm9tICcuL19lcXVhbEFycmF5cy5qcyc7XG5pbXBvcnQgbWFwVG9BcnJheSBmcm9tICcuL19tYXBUb0FycmF5LmpzJztcbmltcG9ydCBzZXRUb0FycmF5IGZyb20gJy4vX3NldFRvQXJyYXkuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbEJ5VGFnO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheVB1c2g7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheTtcbiIsImltcG9ydCBhcnJheVB1c2ggZnJvbSAnLi9fYXJyYXlQdXNoLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldEFsbEtleXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5RmlsdGVyO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R1YkFycmF5O1xuIiwiaW1wb3J0IGFycmF5RmlsdGVyIGZyb20gJy4vX2FycmF5RmlsdGVyLmpzJztcbmltcG9ydCBzdHViQXJyYXkgZnJvbSAnLi9zdHViQXJyYXkuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldFN5bWJvbHM7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVGltZXM7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNBcmd1bWVudHM7XG4iLCJpbXBvcnQgYmFzZUlzQXJndW1lbnRzIGZyb20gJy4vX2Jhc2VJc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHViRmFsc2U7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcbmltcG9ydCBzdHViRmFsc2UgZnJvbSAnLi9zdHViRmFsc2UuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnVmZmVyO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVW5hcnk7XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgbm9kZVV0aWw7XG4iLCJpbXBvcnQgYmFzZUlzVHlwZWRBcnJheSBmcm9tICcuL19iYXNlSXNUeXBlZEFycmF5LmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBpc1R5cGVkQXJyYXk7XG4iLCJpbXBvcnQgYmFzZVRpbWVzIGZyb20gJy4vX2Jhc2VUaW1lcy5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUxpa2VLZXlzO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3RvdHlwZTtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdmVyQXJnO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlS2V5cztcbiIsImltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5pbXBvcnQgbmF0aXZlS2V5cyBmcm9tICcuL19uYXRpdmVLZXlzLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlS2V5cztcbiIsImltcG9ydCBhcnJheUxpa2VLZXlzIGZyb20gJy4vX2FycmF5TGlrZUtleXMuanMnO1xuaW1wb3J0IGJhc2VLZXlzIGZyb20gJy4vX2Jhc2VLZXlzLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGtleXM7XG4iLCJpbXBvcnQgYmFzZUdldEFsbEtleXMgZnJvbSAnLi9fYmFzZUdldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldFN5bWJvbHMgZnJvbSAnLi9fZ2V0U3ltYm9scy5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRBbGxLZXlzO1xuIiwiaW1wb3J0IGdldEFsbEtleXMgZnJvbSAnLi9fZ2V0QWxsS2V5cy5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBvYmpTdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgIHJldHVybiBvYmpTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gb2JqZWN0O1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbE9iamVjdHM7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5leHBvcnQgZGVmYXVsdCBEYXRhVmlldztcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9taXNlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5leHBvcnQgZGVmYXVsdCBTZXQ7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxuZXhwb3J0IGRlZmF1bHQgV2Vha01hcDtcbiIsImltcG9ydCBEYXRhVmlldyBmcm9tICcuL19EYXRhVmlldy5qcyc7XG5pbXBvcnQgTWFwIGZyb20gJy4vX01hcC5qcyc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICcuL19Qcm9taXNlLmpzJztcbmltcG9ydCBTZXQgZnJvbSAnLi9fU2V0LmpzJztcbmltcG9ydCBXZWFrTWFwIGZyb20gJy4vX1dlYWtNYXAuanMnO1xuaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgdG9Tb3VyY2UgZnJvbSAnLi9fdG9Tb3VyY2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRUYWc7XG4iLCJpbXBvcnQgU3RhY2sgZnJvbSAnLi9fU3RhY2suanMnO1xuaW1wb3J0IGVxdWFsQXJyYXlzIGZyb20gJy4vX2VxdWFsQXJyYXlzLmpzJztcbmltcG9ydCBlcXVhbEJ5VGFnIGZyb20gJy4vX2VxdWFsQnlUYWcuanMnO1xuaW1wb3J0IGVxdWFsT2JqZWN0cyBmcm9tICcuL19lcXVhbE9iamVjdHMuanMnO1xuaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0J1ZmZlciBmcm9tICcuL2lzQnVmZmVyLmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzRXF1YWxEZWVwO1xuIiwiaW1wb3J0IGJhc2VJc0VxdWFsRGVlcCBmcm9tICcuL19iYXNlSXNFcXVhbERlZXAuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNFcXVhbDtcbiIsImltcG9ydCBiYXNlSXNFcXVhbCBmcm9tICcuL19iYXNlSXNFcXVhbC5qcyc7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICogZXF1aXZhbGVudC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogb2JqZWN0ID09PSBvdGhlcjtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0VxdWFsO1xuIiwiaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEEgY29udmVuaWVuY2UgaG9vayBhcm91bmQgYHVzZVN0YXRlYCBkZXNpZ25lZCB0byBiZSBwYWlyZWQgd2l0aFxuICogdGhlIGNvbXBvbmVudCBbY2FsbGJhY2sgcmVmXShodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVmcy1hbmQtdGhlLWRvbS5odG1sI2NhbGxiYWNrLXJlZnMpIGFwaS5cbiAqIENhbGxiYWNrIHJlZnMgYXJlIHVzZWZ1bCBvdmVyIGB1c2VSZWYoKWAgd2hlbiB5b3UgbmVlZCB0byByZXNwb25kIHRvIHRoZSByZWYgYmVpbmcgc2V0XG4gKiBpbnN0ZWFkIG9mIGxhemlseSBhY2Nlc3NpbmcgaXQgaW4gYW4gZWZmZWN0LlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBbZWxlbWVudCwgYXR0YWNoUmVmXSA9IHVzZUNhbGxiYWNrUmVmPEhUTUxEaXZFbGVtZW50PigpXG4gKlxuICogdXNlRWZmZWN0KCgpID0+IHtcbiAqICAgaWYgKCFlbGVtZW50KSByZXR1cm5cbiAqXG4gKiAgIGNvbnN0IGNhbGVuZGFyID0gbmV3IEZ1bGxDYWxlbmRhci5DYWxlbmRhcihlbGVtZW50KVxuICpcbiAqICAgcmV0dXJuICgpID0+IHtcbiAqICAgICBjYWxlbmRhci5kZXN0cm95KClcbiAqICAgfVxuICogfSwgW2VsZW1lbnRdKVxuICpcbiAqIHJldHVybiA8ZGl2IHJlZj17YXR0YWNoUmVmfSAvPlxuICogYGBgXG4gKlxuICogQGNhdGVnb3J5IHJlZnNcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDYWxsYmFja1JlZigpIHtcbiAgcmV0dXJuIHVzZVN0YXRlKG51bGwpO1xufSIsImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbnZhciB0b0ZuUmVmID0gZnVuY3Rpb24gdG9GblJlZihyZWYpIHtcbiAgcmV0dXJuICFyZWYgfHwgdHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJyA/IHJlZiA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH07XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VSZWZzKHJlZkEsIHJlZkIpIHtcbiAgdmFyIGEgPSB0b0ZuUmVmKHJlZkEpO1xuICB2YXIgYiA9IHRvRm5SZWYocmVmQik7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoYSkgYSh2YWx1ZSk7XG4gICAgaWYgKGIpIGIodmFsdWUpO1xuICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYW5kIHJldHVybnMgYSBzaW5nbGUgY2FsbGJhY2sgcmVmIGNvbXBvc2VkIGZyb20gdHdvIG90aGVyIFJlZnMuXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBCdXR0b24gPSBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gKiAgIGNvbnN0IFtlbGVtZW50LCBhdHRhY2hSZWZdID0gdXNlQ2FsbGJhY2tSZWY8SFRNTEJ1dHRvbkVsZW1lbnQ+KCk7XG4gKiAgIGNvbnN0IG1lcmdlZFJlZiA9IHVzZU1lcmdlZFJlZnMocmVmLCBhdHRhY2hSZWYpO1xuICpcbiAqICAgcmV0dXJuIDxidXR0b24gcmVmPXttZXJnZWRSZWZ9IHsuLi5wcm9wc30vPlxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSByZWZBIEEgQ2FsbGJhY2sgb3IgbXV0YWJsZSBSZWZcbiAqIEBwYXJhbSByZWZCIEEgQ2FsbGJhY2sgb3IgbXV0YWJsZSBSZWZcbiAqIEBjYXRlZ29yeSByZWZzXG4gKi9cblxuZnVuY3Rpb24gdXNlTWVyZ2VkUmVmcyhyZWZBLCByZWZCKSB7XG4gIHJldHVybiB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbWVyZ2VSZWZzKHJlZkEsIHJlZkIpO1xuICB9LCBbcmVmQSwgcmVmQl0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VNZXJnZWRSZWZzOyIsImV4cG9ydCB2YXIgdG9wID0gJ3RvcCc7XG5leHBvcnQgdmFyIGJvdHRvbSA9ICdib3R0b20nO1xuZXhwb3J0IHZhciByaWdodCA9ICdyaWdodCc7XG5leHBvcnQgdmFyIGxlZnQgPSAnbGVmdCc7XG5leHBvcnQgdmFyIGF1dG8gPSAnYXV0byc7XG5leHBvcnQgdmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG5leHBvcnQgdmFyIHN0YXJ0ID0gJ3N0YXJ0JztcbmV4cG9ydCB2YXIgZW5kID0gJ2VuZCc7XG5leHBvcnQgdmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xuZXhwb3J0IHZhciB2aWV3cG9ydCA9ICd2aWV3cG9ydCc7XG5leHBvcnQgdmFyIHBvcHBlciA9ICdwb3BwZXInO1xuZXhwb3J0IHZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbmV4cG9ydCB2YXIgdmFyaWF0aW9uUGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9iYXNlUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pO1xuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0gLyojX19QVVJFX18qL1tdLmNvbmNhdChiYXNlUGxhY2VtZW50cywgW2F1dG9dKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQsIHBsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7IC8vIG1vZGlmaWVycyB0aGF0IG5lZWQgdG8gcmVhZCB0aGUgRE9NXG5cbmV4cG9ydCB2YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbmV4cG9ydCB2YXIgcmVhZCA9ICdyZWFkJztcbmV4cG9ydCB2YXIgYWZ0ZXJSZWFkID0gJ2FmdGVyUmVhZCc7IC8vIHB1cmUtbG9naWMgbW9kaWZpZXJzXG5cbmV4cG9ydCB2YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbmV4cG9ydCB2YXIgbWFpbiA9ICdtYWluJztcbmV4cG9ydCB2YXIgYWZ0ZXJNYWluID0gJ2FmdGVyTWFpbic7IC8vIG1vZGlmaWVyIHdpdGggdGhlIHB1cnBvc2UgdG8gd3JpdGUgdG8gdGhlIERPTSAob3Igd3JpdGUgaW50byBhIGZyYW1ld29yayBzdGF0ZSlcblxuZXhwb3J0IHZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG5leHBvcnQgdmFyIHdyaXRlID0gJ3dyaXRlJztcbmV4cG9ydCB2YXIgYWZ0ZXJXcml0ZSA9ICdhZnRlcldyaXRlJztcbmV4cG9ydCB2YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07IiwiaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlKSB7XG4gIC8vIElFIDExIGhhcyBubyBTaGFkb3dSb290XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5TaGFkb3dSb290O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG59XG5cbmV4cG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH07IiwiZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDsiLCJpbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGluY2x1ZGVTY2FsZSkge1xuICBpZiAoaW5jbHVkZVNjYWxlID09PSB2b2lkIDApIHtcbiAgICBpbmNsdWRlU2NhbGUgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNjYWxlWCA9IDE7XG4gIHZhciBzY2FsZVkgPSAxO1xuXG4gIGlmIChpc0hUTUxFbGVtZW50KGVsZW1lbnQpICYmIGluY2x1ZGVTY2FsZSkge1xuICAgIHZhciBvZmZzZXRIZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB2YXIgb2Zmc2V0V2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoOyAvLyBEbyBub3QgYXR0ZW1wdCB0byBkaXZpZGUgYnkgMCwgb3RoZXJ3aXNlIHdlIGdldCBgSW5maW5pdHlgIGFzIHNjYWxlXG4gICAgLy8gRmFsbGJhY2sgdG8gMSBpbiBjYXNlIGJvdGggdmFsdWVzIGFyZSBgMGBcblxuICAgIGlmIChvZmZzZXRXaWR0aCA+IDApIHtcbiAgICAgIHNjYWxlWCA9IHJvdW5kKHJlY3Qud2lkdGgpIC8gb2Zmc2V0V2lkdGggfHwgMTtcbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0SGVpZ2h0ID4gMCkge1xuICAgICAgc2NhbGVZID0gcm91bmQocmVjdC5oZWlnaHQpIC8gb2Zmc2V0SGVpZ2h0IHx8IDE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcmVjdC53aWR0aCAvIHNjYWxlWCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0IC8gc2NhbGVZLFxuICAgIHRvcDogcmVjdC50b3AgLyBzY2FsZVksXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQgLyBzY2FsZVgsXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSAvIHNjYWxlWSxcbiAgICBsZWZ0OiByZWN0LmxlZnQgLyBzY2FsZVgsXG4gICAgeDogcmVjdC5sZWZ0IC8gc2NhbGVYLFxuICAgIHk6IHJlY3QudG9wIC8gc2NhbGVZXG4gIH07XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjsgLy8gUmV0dXJucyB0aGUgbGF5b3V0IHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LiBMYXlvdXRcbi8vIG1lYW5zIGl0IGRvZXNuJ3QgdGFrZSBpbnRvIGFjY291bnQgdHJhbnNmb3Jtcy5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TGF5b3V0UmVjdChlbGVtZW50KSB7XG4gIHZhciBjbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpOyAvLyBVc2UgdGhlIGNsaWVudFJlY3Qgc2l6ZXMgaWYgaXQncyBub3QgYmVlbiB0cmFuc2Zvcm1lZC5cbiAgLy8gRml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMjIzXG5cbiAgdmFyIHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LndpZHRoIC0gd2lkdGgpIDw9IDEpIHtcbiAgICB3aWR0aCA9IGNsaWVudFJlY3Qud2lkdGg7XG4gIH1cblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC5oZWlnaHQgLSBoZWlnaHQpIDw9IDEpIHtcbiAgICBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogZWxlbWVudC5vZmZzZXRMZWZ0LFxuICAgIHk6IGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xufSIsImltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIHJvb3ROb2RlID0gY2hpbGQuZ2V0Um9vdE5vZGUgJiYgY2hpbGQuZ2V0Um9vdE5vZGUoKTsgLy8gRmlyc3QsIGF0dGVtcHQgd2l0aCBmYXN0ZXIgbmF0aXZlIG1ldGhvZFxuXG4gIGlmIChwYXJlbnQuY29udGFpbnMoY2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gdGhlbiBmYWxsYmFjayB0byBjdXN0b20gaW1wbGVtZW50YXRpb24gd2l0aCBTaGFkb3cgRE9NIHN1cHBvcnRcbiAgZWxzZSBpZiAocm9vdE5vZGUgJiYgaXNTaGFkb3dSb290KHJvb3ROb2RlKSkge1xuICAgICAgdmFyIG5leHQgPSBjaGlsZDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAobmV4dCAmJiBwYXJlbnQuaXNTYW1lTm9kZShuZXh0KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXTogbmVlZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMuLi5cblxuXG4gICAgICAgIG5leHQgPSBuZXh0LnBhcmVudE5vZGUgfHwgbmV4dC5ob3N0O1xuICAgICAgfSB3aGlsZSAobmV4dCk7XG4gICAgfSAvLyBHaXZlIHVwLCB0aGUgcmVzdWx0IGlzIGZhbHNlXG5cblxuICByZXR1cm4gZmFsc2U7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZU5hbWUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCA/IChlbGVtZW50Lm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn0iLCJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIFsndGFibGUnLCAndGQnLCAndGgnXS5pbmRleE9mKGdldE5vZGVOYW1lKGVsZW1lbnQpKSA+PSAwO1xufSIsImltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSB7XG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgcmV0dXJuICgoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudC5vd25lckRvY3VtZW50IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gIGVsZW1lbnQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50O1xufSIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZ2V0Tm9kZU5hbWUoZWxlbWVudCkgPT09ICdodG1sJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuICgvLyB0aGlzIGlzIGEgcXVpY2tlciAoYnV0IGxlc3MgdHlwZSBzYWZlKSB3YXkgdG8gc2F2ZSBxdWl0ZSBzb21lIGJ5dGVzIGZyb20gdGhlIGJ1bmRsZVxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICBlbGVtZW50LmFzc2lnbmVkU2xvdCB8fCAvLyBzdGVwIGludG8gdGhlIHNoYWRvdyBET00gb2YgdGhlIHBhcmVudCBvZiBhIHNsb3R0ZWQgbm9kZVxuICAgIGVsZW1lbnQucGFyZW50Tm9kZSB8fCAoIC8vIERPTSBFbGVtZW50IGRldGVjdGVkXG4gICAgaXNTaGFkb3dSb290KGVsZW1lbnQpID8gZWxlbWVudC5ob3N0IDogbnVsbCkgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBIVE1MRWxlbWVudCBpcyBhIE5vZGVcbiAgICBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkgLy8gZmFsbGJhY2tcblxuICApO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgaXNUYWJsZUVsZW1lbnQgZnJvbSBcIi4vaXNUYWJsZUVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcblxuZnVuY3Rpb24gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzgzN1xuICBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG59IC8vIGAub2Zmc2V0UGFyZW50YCByZXBvcnRzIGBudWxsYCBmb3IgZml4ZWQgZWxlbWVudHMsIHdoaWxlIGFic29sdXRlIGVsZW1lbnRzXG4vLyByZXR1cm4gdGhlIGNvbnRhaW5pbmcgYmxvY2tcblxuXG5mdW5jdGlvbiBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkge1xuICB2YXIgaXNGaXJlZm94ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2ZpcmVmb3gnKSAhPT0gLTE7XG4gIHZhciBpc0lFID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgIT09IC0xO1xuXG4gIGlmIChpc0lFICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAvLyBJbiBJRSA5LCAxMCBhbmQgMTEgZml4ZWQgZWxlbWVudHMgY29udGFpbmluZyBibG9jayBpcyBhbHdheXMgZXN0YWJsaXNoZWQgYnkgdGhlIHZpZXdwb3J0XG4gICAgdmFyIGVsZW1lbnRDc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnRDc3MucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG5cbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmIFsnaHRtbCcsICdib2R5J10uaW5kZXhPZihnZXROb2RlTmFtZShjdXJyZW50Tm9kZSkpIDwgMCkge1xuICAgIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTsgLy8gVGhpcyBpcyBub24tZXhoYXVzdGl2ZSBidXQgY292ZXJzIHRoZSBtb3N0IGNvbW1vbiBDU1MgcHJvcGVydGllcyB0aGF0XG4gICAgLy8gY3JlYXRlIGEgY29udGFpbmluZyBibG9jay5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ29udGFpbmluZ19ibG9jayNpZGVudGlmeWluZ190aGVfY29udGFpbmluZ19ibG9ja1xuXG4gICAgaWYgKGNzcy50cmFuc2Zvcm0gIT09ICdub25lJyB8fCBjc3MucGVyc3BlY3RpdmUgIT09ICdub25lJyB8fCBjc3MuY29udGFpbiA9PT0gJ3BhaW50JyB8fCBbJ3RyYW5zZm9ybScsICdwZXJzcGVjdGl2ZSddLmluZGV4T2YoY3NzLndpbGxDaGFuZ2UpICE9PSAtMSB8fCBpc0ZpcmVmb3ggJiYgY3NzLndpbGxDaGFuZ2UgPT09ICdmaWx0ZXInIHx8IGlzRmlyZWZveCAmJiBjc3MuZmlsdGVyICYmIGNzcy5maWx0ZXIgIT09ICdub25lJykge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IC8vIEdldHMgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgcG9zaXRpb25lZCBlbGVtZW50LiBIYW5kbGVzIHNvbWUgZWRnZSBjYXNlcyxcbi8vIHN1Y2ggYXMgdGFibGUgYW5jZXN0b3JzIGFuZCBjcm9zcyBicm93c2VyIGJ1Z3MuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7XG5cbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBpc1RhYmxlRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICBpZiAob2Zmc2V0UGFyZW50ICYmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnaHRtbCcgfHwgZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2JvZHknICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHx8IHdpbmRvdztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgPj0gMCA/ICd4JyA6ICd5Jztcbn0iLCJpbXBvcnQgeyBtYXggYXMgbWF0aE1heCwgbWluIGFzIG1hdGhNaW4gfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gd2l0aGluKG1pbiwgdmFsdWUsIG1heCkge1xuICByZXR1cm4gbWF0aE1heChtaW4sIG1hdGhNaW4odmFsdWUsIG1heCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhpbk1heENsYW1wKG1pbiwgdmFsdWUsIG1heCkge1xuICB2YXIgdiA9IHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpO1xuICByZXR1cm4gdiA+IG1heCA/IG1heCA6IHY7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufSIsImltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4vZ2V0RnJlc2hTaWRlT2JqZWN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZVBhZGRpbmdPYmplY3QocGFkZGluZ09iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZ2V0RnJlc2hTaWRlT2JqZWN0KCksIHBhZGRpbmdPYmplY3QpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcCh2YWx1ZSwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGhhc2hNYXAsIGtleSkge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuLi9kb20tdXRpbHMvY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgd2l0aGluIH0gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi4vdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuLi91dGlscy9leHBhbmRUb0hhc2hNYXAuanNcIjtcbmltcG9ydCB7IGxlZnQsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdG9wLCBib3R0b20gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdG9QYWRkaW5nT2JqZWN0ID0gZnVuY3Rpb24gdG9QYWRkaW5nT2JqZWN0KHBhZGRpbmcsIHN0YXRlKSB7XG4gIHBhZGRpbmcgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ2Z1bmN0aW9uJyA/IHBhZGRpbmcoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiBwYWRkaW5nO1xuICByZXR1cm4gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbn07XG5cbmZ1bmN0aW9uIGFycm93KF9yZWYpIHtcbiAgdmFyIF9zdGF0ZSRtb2RpZmllcnNEYXRhJDtcblxuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFkZGluZ09iamVjdCA9IHRvUGFkZGluZ09iamVjdChvcHRpb25zLnBhZGRpbmcsIHN0YXRlKTtcbiAgdmFyIGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgdmFyIG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICB2YXIgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICB2YXIgZW5kRGlmZiA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICsgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICB2YXIgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcbiAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIHZhciBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBheGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDAgOiAwO1xuICB2YXIgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7IC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuXG4gIHZhciBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICB2YXIgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgdmFyIGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIHZhciBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7IC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cblxuICB2YXIgYXhpc1Byb3AgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gKF9zdGF0ZSRtb2RpZmllcnNEYXRhJCA9IHt9LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSRbYXhpc1Byb3BdID0gb2Zmc2V0LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQuY2VudGVyT2Zmc2V0ID0gb2Zmc2V0IC0gY2VudGVyLCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQpO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50O1xuXG4gIGlmIChhcnJvd0VsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDU1Mgc2VsZWN0b3JcblxuXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIGVsZW1lbnQgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCAobm90IGFuIFNWR0VsZW1lbnQpLicsICdUbyB1c2UgYW4gU1ZHIGFycm93LCB3cmFwIGl0IGluIGFuIEhUTUxFbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIGFzJywgJ3RoZSBhcnJvdy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIG1vZGlmaWVyXFwncyBgZWxlbWVudGAgbXVzdCBiZSBhIGNoaWxkIG9mIHRoZSBwb3BwZXInLCAnZWxlbWVudC4nXS5qb2luKCcgJykpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YXRlLmVsZW1lbnRzLmFycm93ID0gYXJyb3dFbGVtZW50O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXJyb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogYXJyb3csXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J11cbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59IiwiaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBlbmQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB1bnNldFNpZGVzID0ge1xuICB0b3A6ICdhdXRvJyxcbiAgcmlnaHQ6ICdhdXRvJyxcbiAgYm90dG9tOiAnYXV0bycsXG4gIGxlZnQ6ICdhdXRvJ1xufTsgLy8gUm91bmQgdGhlIG9mZnNldHMgdG8gdGhlIG5lYXJlc3Qgc3VpdGFibGUgc3VicGl4ZWwgYmFzZWQgb24gdGhlIERQUi5cbi8vIFpvb21pbmcgY2FuIGNoYW5nZSB0aGUgRFBSLCBidXQgaXQgc2VlbXMgdG8gcmVwb3J0IGEgdmFsdWUgdGhhdCB3aWxsXG4vLyBjbGVhbmx5IGRpdmlkZSB0aGUgdmFsdWVzIGludG8gdGhlIGFwcHJvcHJpYXRlIHN1YnBpeGVscy5cblxuZnVuY3Rpb24gcm91bmRPZmZzZXRzQnlEUFIoX3JlZikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnk7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBkcHIgPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICByZXR1cm4ge1xuICAgIHg6IHJvdW5kKHggKiBkcHIpIC8gZHByIHx8IDAsXG4gICAgeTogcm91bmQoeSAqIGRwcikgLyBkcHIgfHwgMFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwVG9TdHlsZXMoX3JlZjIpIHtcbiAgdmFyIF9PYmplY3QkYXNzaWduMjtcblxuICB2YXIgcG9wcGVyID0gX3JlZjIucG9wcGVyLFxuICAgICAgcG9wcGVyUmVjdCA9IF9yZWYyLnBvcHBlclJlY3QsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmMi5wbGFjZW1lbnQsXG4gICAgICB2YXJpYXRpb24gPSBfcmVmMi52YXJpYXRpb24sXG4gICAgICBvZmZzZXRzID0gX3JlZjIub2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjIucG9zaXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfcmVmMi5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBhZGFwdGl2ZSA9IF9yZWYyLmFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzID0gX3JlZjIucm91bmRPZmZzZXRzLFxuICAgICAgaXNGaXhlZCA9IF9yZWYyLmlzRml4ZWQ7XG5cbiAgdmFyIF9yZWYzID0gcm91bmRPZmZzZXRzID09PSB0cnVlID8gcm91bmRPZmZzZXRzQnlEUFIob2Zmc2V0cykgOiB0eXBlb2Ygcm91bmRPZmZzZXRzID09PSAnZnVuY3Rpb24nID8gcm91bmRPZmZzZXRzKG9mZnNldHMpIDogb2Zmc2V0cyxcbiAgICAgIF9yZWYzJHggPSBfcmVmMy54LFxuICAgICAgeCA9IF9yZWYzJHggPT09IHZvaWQgMCA/IDAgOiBfcmVmMyR4LFxuICAgICAgX3JlZjMkeSA9IF9yZWYzLnksXG4gICAgICB5ID0gX3JlZjMkeSA9PT0gdm9pZCAwID8gMCA6IF9yZWYzJHk7XG5cbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuICAgIHZhciBoZWlnaHRQcm9wID0gJ2NsaWVudEhlaWdodCc7XG4gICAgdmFyIHdpZHRoUHJvcCA9ICdjbGllbnRXaWR0aCc7XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ID09PSBnZXRXaW5kb3cocG9wcGVyKSkge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KHBvcHBlcik7XG5cbiAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gIT09ICdzdGF0aWMnICYmIHBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XG4gICAgICAgIGhlaWdodFByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgICAgd2lkdGhQcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuXG5cbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3AgfHwgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCBwbGFjZW1lbnQgPT09IHJpZ2h0KSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVkgPSBib3R0b207XG4gICAgICB2YXIgb2Zmc2V0WSA9IGlzRml4ZWQgJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LmhlaWdodCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgb2Zmc2V0UGFyZW50W2hlaWdodFByb3BdO1xuICAgICAgeSAtPSBvZmZzZXRZIC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSBsZWZ0IHx8IChwbGFjZW1lbnQgPT09IHRvcCB8fCBwbGFjZW1lbnQgPT09IGJvdHRvbSkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGlzRml4ZWQgJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LndpZHRoIDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBvZmZzZXRQYXJlbnRbd2lkdGhQcm9wXTtcbiAgICAgIHggLT0gb2Zmc2V0WCAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uXG4gIH0sIGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpO1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICB2YXIgX09iamVjdCRhc3NpZ247XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25bc2lkZVldID0gaGFzWSA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbltzaWRlWF0gPSBoYXNYID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduLnRyYW5zZm9ybSA9ICh3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSA8PSAxID8gXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweClcIiA6IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCwgMClcIiwgX09iamVjdCRhc3NpZ24pKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbjIgPSB7fSwgX09iamVjdCRhc3NpZ24yW3NpZGVZXSA9IGhhc1kgPyB5ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMltzaWRlWF0gPSBoYXNYID8geCArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjIudHJhbnNmb3JtID0gJycsIF9PYmplY3QkYXNzaWduMikpO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlU3R5bGVzKF9yZWY0KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWY0Lm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPSBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGdwdUFjY2VsZXJhdCxcbiAgICAgIF9vcHRpb25zJGFkYXB0aXZlID0gb3B0aW9ucy5hZGFwdGl2ZSxcbiAgICAgIGFkYXB0aXZlID0gX29wdGlvbnMkYWRhcHRpdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhZGFwdGl2ZSxcbiAgICAgIF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9IG9wdGlvbnMucm91bmRPZmZzZXRzLFxuICAgICAgcm91bmRPZmZzZXRzID0gX29wdGlvbnMkcm91bmRPZmZzZXRzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcm91bmRPZmZzZXRzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gZ2V0Q29tcHV0ZWRTdHlsZShzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLnRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAnJztcblxuICAgIGlmIChhZGFwdGl2ZSAmJiBbJ3RyYW5zZm9ybScsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5zb21lKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25Qcm9wZXJ0eS5pbmRleE9mKHByb3BlcnR5KSA+PSAwO1xuICAgIH0pKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IERldGVjdGVkIENTUyB0cmFuc2l0aW9ucyBvbiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZycsICdDU1MgcHJvcGVydGllczogXCJ0cmFuc2Zvcm1cIiwgXCJ0b3BcIiwgXCJyaWdodFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIi4nLCAnXFxuXFxuJywgJ0Rpc2FibGUgdGhlIFwiY29tcHV0ZVN0eWxlc1wiIG1vZGlmaWVyXFwncyBgYWRhcHRpdmVgIG9wdGlvbiB0byBhbGxvdycsICdmb3Igc21vb3RoIHRyYW5zaXRpb25zLCBvciByZW1vdmUgdGhlc2UgcHJvcGVydGllcyBmcm9tIHRoZSBDU1MnLCAndHJhbnNpdGlvbiBkZWNsYXJhdGlvbiBvbiB0aGUgcG9wcGVyIGVsZW1lbnQgaWYgb25seSB0cmFuc2l0aW9uaW5nJywgJ29wYWNpdHkgb3IgYmFja2dyb3VuZC1jb2xvciBmb3IgZXhhbXBsZS4nLCAnXFxuXFxuJywgJ1dlIHJlY29tbWVuZCB1c2luZyB0aGUgcG9wcGVyIGVsZW1lbnQgYXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbm5lcicsICdlbGVtZW50IHRoYXQgY2FuIGhhdmUgYW55IENTUyBwcm9wZXJ0eSB0cmFuc2l0aW9uZWQgZm9yIGFuaW1hdGlvbnMuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0ge1xuICAgIHBsYWNlbWVudDogZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHZhcmlhdGlvbjogZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCksXG4gICAgcG9wcGVyOiBzdGF0ZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgcG9wcGVyUmVjdDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIGdwdUFjY2VsZXJhdGlvbjogZ3B1QWNjZWxlcmF0aW9uLFxuICAgIGlzRml4ZWQ6IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCdcbiAgfTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLnBvcHBlciwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93ICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMuYXJyb3cgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMuYXJyb3csIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYWRhcHRpdmU6IGZhbHNlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdjb21wdXRlU3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdiZWZvcmVXcml0ZScsXG4gIGZuOiBjb21wdXRlU3R5bGVzLFxuICBkYXRhOiB7fVxufTsiLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHBhc3NpdmUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gIGVmZmVjdDogZWZmZWN0LFxuICBkYXRhOiB7fVxufTsiLCJ2YXIgaGFzaCA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgYm90dG9tOiAndG9wJyxcbiAgdG9wOiAnYm90dG9tJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCJ2YXIgaGFzaCA9IHtcbiAgc3RhcnQ6ICdlbmQnLFxuICBlbmQ6ICdzdGFydCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luLnBhZ2VYT2Zmc2V0O1xuICB2YXIgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgLy8gUG9wcGVyIDEgaXMgYnJva2VuIGluIHRoaXMgY2FzZSBhbmQgbmV2ZXIgaGFkIGEgYnVnIHJlcG9ydCBzbyBsZXQncyBhc3N1bWVcbiAgLy8gaXQncyBub3QgYW4gaXNzdWUuIEkgZG9uJ3QgdGhpbmsgYW55b25lIGV2ZXIgc3BlY2lmaWVzIHdpZHRoIG9uIDxodG1sPlxuICAvLyBhbnl3YXkuXG4gIC8vIEJyb3dzZXJzIHdoZXJlIHRoZSBsZWZ0IHNjcm9sbGJhciBkb2Vzbid0IGNhdXNlIGFuIGlzc3VlIHJlcG9ydCBgMGAgZm9yXG4gIC8vIHRoaXMgKGUuZy4gRWRnZSAyMDE5LCBJRTExLCBTYWZhcmkpXG4gIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHZpc3VhbFZpZXdwb3J0ID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuICB2YXIgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gaHRtbC5jbGllbnRIZWlnaHQ7XG4gIHZhciB4ID0gMDtcbiAgdmFyIHkgPSAwOyAvLyBOQjogVGhpcyBpc24ndCBzdXBwb3J0ZWQgb24gaU9TIDw9IDEyLiBJZiB0aGUga2V5Ym9hcmQgaXMgb3BlbiwgdGhlIHBvcHBlclxuICAvLyBjYW4gYmUgb2JzY3VyZWQgdW5kZXJuZWF0aCBpdC5cbiAgLy8gQWxzbywgYGh0bWwuY2xpZW50SGVpZ2h0YCBhZGRzIHRoZSBib3R0b20gYmFyIGhlaWdodCBpbiBTYWZhcmkgaU9TLCBldmVuXG4gIC8vIGlmIGl0IGlzbid0IG9wZW4sIHNvIGlmIHRoaXMgaXNuJ3QgYXZhaWxhYmxlLCB0aGUgcG9wcGVyIHdpbGwgYmUgZGV0ZWN0ZWRcbiAgLy8gdG8gb3ZlcmZsb3cgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIHRvbyBlYXJseS5cblxuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDsgLy8gVXNlcyBMYXlvdXQgVmlld3BvcnQgKGxpa2UgQ2hyb21lOyBTYWZhcmkgZG9lcyBub3QgY3VycmVudGx5KVxuICAgIC8vIEluIENocm9tZSwgaXQgcmV0dXJucyBhIHZhbHVlIHZlcnkgY2xvc2UgdG8gMCAoKy8tKSBidXQgY29udGFpbnMgcm91bmRpbmdcbiAgICAvLyBlcnJvcnMgZHVlIHRvIGZsb2F0aW5nIHBvaW50IG51bWJlcnMsIHNvIHdlIG5lZWQgdG8gY2hlY2sgcHJlY2lzaW9uLlxuICAgIC8vIFNhZmFyaSByZXR1cm5zIGEgbnVtYmVyIDw9IDAsIHVzdWFsbHkgPCAtMSB3aGVuIHBpbmNoLXpvb21lZFxuICAgIC8vIEZlYXR1cmUgZGV0ZWN0aW9uIGZhaWxzIGluIG1vYmlsZSBlbXVsYXRpb24gbW9kZSBpbiBDaHJvbWUuXG4gICAgLy8gTWF0aC5hYnMod2luLmlubmVyV2lkdGggLyB2aXN1YWxWaWV3cG9ydC5zY2FsZSAtIHZpc3VhbFZpZXdwb3J0LndpZHRoKSA8XG4gICAgLy8gMC4wMDFcbiAgICAvLyBGYWxsYmFjayBoZXJlOiBcIk5vdCBTYWZhcmlcIiB1c2VyQWdlbnRcblxuICAgIGlmICghL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgeCA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQ7XG4gICAgICB5ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHggKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpLFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCB7IG1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIEdldHMgdGhlIGVudGlyZSBzaXplIG9mIHRoZSBzY3JvbGxhYmxlIGRvY3VtZW50IGFyZWEsIGV2ZW4gZXh0ZW5kaW5nIG91dHNpZGVcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGVcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHdpblNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbChlbGVtZW50KTtcbiAgdmFyIGJvZHkgPSAoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHk7XG4gIHZhciB3aWR0aCA9IG1heChodG1sLnNjcm9sbFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCk7XG4gIHZhciBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLCBib2R5ID8gYm9keS5jbGllbnRIZWlnaHQgOiAwKTtcbiAgdmFyIHggPSAtd2luU2Nyb2xsLnNjcm9sbExlZnQgKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpO1xuICB2YXIgeSA9IC13aW5TY3JvbGwuc2Nyb2xsVG9wO1xuXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKGJvZHkgfHwgaHRtbCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCkgLSB3aWR0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufSIsImltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WTtcblxuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKTtcbn0iLCJpbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gIGlmIChbJ2h0bWwnLCAnYm9keScsICcjZG9jdW1lbnQnXS5pbmRleE9mKGdldE5vZGVOYW1lKG5vZGUpKSA+PSAwKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGlmIChpc0hUTUxFbGVtZW50KG5vZGUpICYmIGlzU2Nyb2xsUGFyZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUobm9kZSkpO1xufSIsImltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSBcIi4vZ2V0U2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlXG5yZWZlcmVuY2UgZWxlbWVudCdzIHBvc2l0aW9uLlxuKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCwgbGlzdCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cblxuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50ID09PSAoKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5KTtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gW3dpbl0uY29uY2F0KHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSwgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdKSA6IHNjcm9sbFBhcmVudDtcbiAgdmFyIHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcbiAgcmV0dXJuIGlzQm9keSA/IHVwZGF0ZWRMaXN0IDogLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlY3QsIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn0iLCJpbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZpZXdwb3J0UmVjdCBmcm9tIFwiLi9nZXRWaWV3cG9ydFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudFJlY3QgZnJvbSBcIi4vZ2V0RG9jdW1lbnRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi4vdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgbWF4LCBtaW4gfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpO1xuICByZWN0LnRvcCA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRUb3A7XG4gIHJlY3QubGVmdCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50TGVmdDtcbiAgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnJpZ2h0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC53aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3QuaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QueCA9IHJlY3QubGVmdDtcbiAgcmVjdC55ID0gcmVjdC50b3A7XG4gIHJldHVybiByZWN0O1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCkge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0ID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkpIDogaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSA/IGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGNsaXBwaW5nUGFyZW50KSA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufSAvLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkge1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG4gIHZhciBjYW5Fc2NhcGVDbGlwcGluZyA9IFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIHZhciBjbGlwcGVyRWxlbWVudCA9IGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuXG5cbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNsaXBwaW5nUGFyZW50KSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiYgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KSAmJiBnZXROb2RlTmFtZShjbGlwcGluZ1BhcmVudCkgIT09ICdib2R5JyAmJiAoY2FuRXNjYXBlQ2xpcHBpbmcgPyBnZXRDb21wdXRlZFN0eWxlKGNsaXBwaW5nUGFyZW50KS5wb3NpdGlvbiAhPT0gJ3N0YXRpYycgOiB0cnVlKTtcbiAgfSk7XG59IC8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoZWxlbWVudCwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCk7XG4gICAgYWNjUmVjdC50b3AgPSBtYXgocmVjdC50b3AsIGFjY1JlY3QudG9wKTtcbiAgICBhY2NSZWN0LnJpZ2h0ID0gbWluKHJlY3QucmlnaHQsIGFjY1JlY3QucmlnaHQpO1xuICAgIGFjY1JlY3QuYm90dG9tID0gbWluKHJlY3QuYm90dG9tLCBhY2NSZWN0LmJvdHRvbSk7XG4gICAgYWNjUmVjdC5sZWZ0ID0gbWF4KHJlY3QubGVmdCwgYWNjUmVjdC5sZWZ0KTtcbiAgICByZXR1cm4gYWNjUmVjdDtcbiAgfSwgZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgZmlyc3RDbGlwcGluZ1BhcmVudCkpO1xuICBjbGlwcGluZ1JlY3Qud2lkdGggPSBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LmhlaWdodCA9IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wO1xuICBjbGlwcGluZ1JlY3QueCA9IGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QueSA9IGNsaXBwaW5nUmVjdC50b3A7XG4gIHJldHVybiBjbGlwcGluZ1JlY3Q7XG59IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4vZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIHN0YXJ0LCBlbmQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHJlZmVyZW5jZSA9IF9yZWYucmVmZXJlbmNlLFxuICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudCA/IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA6IG51bGw7XG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQgPyBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA6IG51bGw7XG4gIHZhciBjb21tb25YID0gcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGggLyAyIC0gZWxlbWVudC53aWR0aCAvIDI7XG4gIHZhciBjb21tb25ZID0gcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0IC8gMiAtIGVsZW1lbnQuaGVpZ2h0IC8gMjtcbiAgdmFyIG9mZnNldHM7XG5cbiAgc3dpdGNoIChiYXNlUGxhY2VtZW50KSB7XG4gICAgY2FzZSB0b3A6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSAtIGVsZW1lbnQuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIGJvdHRvbTpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSByaWdodDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIGxlZnQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCAtIGVsZW1lbnQud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnlcbiAgICAgIH07XG4gIH1cblxuICB2YXIgbWFpbkF4aXMgPSBiYXNlUGxhY2VtZW50ID8gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpIDogbnVsbDtcblxuICBpZiAobWFpbkF4aXMgIT0gbnVsbCkge1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gICAgc3dpdGNoICh2YXJpYXRpb24pIHtcbiAgICAgIGNhc2Ugc3RhcnQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gLSAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGVuZDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSArIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59IiwiaW1wb3J0IGdldENsaXBwaW5nUmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBjbGlwcGluZ1BhcmVudHMsIHJlZmVyZW5jZSwgcG9wcGVyLCBib3R0b20sIHRvcCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuL21lcmdlUGFkZGluZ09iamVjdC5qc1wiO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tIFwiLi9leHBhbmRUb0hhc2hNYXAuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gc3RhdGUucGxhY2VtZW50IDogX29wdGlvbnMkcGxhY2VtZW50LFxuICAgICAgX29wdGlvbnMkYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMkYm91bmRhcnkgPT09IHZvaWQgMCA/IGNsaXBwaW5nUGFyZW50cyA6IF9vcHRpb25zJGJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyB2aWV3cG9ydCA6IF9vcHRpb25zJHJvb3RCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGVsZW1lbnRDb250ZSA9IF9vcHRpb25zLmVsZW1lbnRDb250ZXh0LFxuICAgICAgZWxlbWVudENvbnRleHQgPSBfb3B0aW9ucyRlbGVtZW50Q29udGUgPT09IHZvaWQgMCA/IHBvcHBlciA6IF9vcHRpb25zJGVsZW1lbnRDb250ZSxcbiAgICAgIF9vcHRpb25zJGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IF9vcHRpb25zJGFsdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMkcGFkZGluZyA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHBhZGRpbmc7XG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbiAgdmFyIGFsdENvbnRleHQgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcmVmZXJlbmNlIDogcG9wcGVyO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1thbHRCb3VuZGFyeSA/IGFsdENvbnRleHQgOiBlbGVtZW50Q29udGV4dF07XG4gIHZhciBjbGlwcGluZ0NsaWVudFJlY3QgPSBnZXRDbGlwcGluZ1JlY3QoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudCA6IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgfHwgZ2V0RG9jdW1lbnRFbGVtZW50KHN0YXRlLmVsZW1lbnRzLnBvcHBlciksIGJvdW5kYXJ5LCByb290Qm91bmRhcnkpO1xuICB2YXIgcmVmZXJlbmNlQ2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChzdGF0ZS5lbGVtZW50cy5yZWZlcmVuY2UpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZUNsaWVudFJlY3QsXG4gICAgZWxlbWVudDogcG9wcGVyUmVjdCxcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KTtcbiAgdmFyIHBvcHBlckNsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KE9iamVjdC5hc3NpZ24oe30sIHBvcHBlclJlY3QsIHBvcHBlck9mZnNldHMpKTtcbiAgdmFyIGVsZW1lbnRDbGllbnRSZWN0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHBvcHBlckNsaWVudFJlY3QgOiByZWZlcmVuY2VDbGllbnRSZWN0OyAvLyBwb3NpdGl2ZSA9IG92ZXJmbG93aW5nIHRoZSBjbGlwcGluZyByZWN0XG4gIC8vIDAgb3IgbmVnYXRpdmUgPSB3aXRoaW4gdGhlIGNsaXBwaW5nIHJlY3RcblxuICB2YXIgb3ZlcmZsb3dPZmZzZXRzID0ge1xuICAgIHRvcDogY2xpcHBpbmdDbGllbnRSZWN0LnRvcCAtIGVsZW1lbnRDbGllbnRSZWN0LnRvcCArIHBhZGRpbmdPYmplY3QudG9wLFxuICAgIGJvdHRvbTogZWxlbWVudENsaWVudFJlY3QuYm90dG9tIC0gY2xpcHBpbmdDbGllbnRSZWN0LmJvdHRvbSArIHBhZGRpbmdPYmplY3QuYm90dG9tLFxuICAgIGxlZnQ6IGNsaXBwaW5nQ2xpZW50UmVjdC5sZWZ0IC0gZWxlbWVudENsaWVudFJlY3QubGVmdCArIHBhZGRpbmdPYmplY3QubGVmdCxcbiAgICByaWdodDogZWxlbWVudENsaWVudFJlY3QucmlnaHQgLSBjbGlwcGluZ0NsaWVudFJlY3QucmlnaHQgKyBwYWRkaW5nT2JqZWN0LnJpZ2h0XG4gIH07XG4gIHZhciBvZmZzZXREYXRhID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQ7IC8vIE9mZnNldHMgY2FuIGJlIGFwcGxpZWQgb25seSB0byB0aGUgcG9wcGVyIGVsZW1lbnRcblxuICBpZiAoZWxlbWVudENvbnRleHQgPT09IHBvcHBlciAmJiBvZmZzZXREYXRhKSB7XG4gICAgdmFyIG9mZnNldCA9IG9mZnNldERhdGFbcGxhY2VtZW50XTtcbiAgICBPYmplY3Qua2V5cyhvdmVyZmxvd09mZnNldHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIG11bHRpcGx5ID0gW3JpZ2h0LCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gMSA6IC0xO1xuICAgICAgdmFyIGF4aXMgPSBbdG9wLCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gJ3knIDogJ3gnO1xuICAgICAgb3ZlcmZsb3dPZmZzZXRzW2tleV0gKz0gb2Zmc2V0W2F4aXNdICogbXVsdGlwbHk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3ZlcmZsb3dPZmZzZXRzO1xufSIsImltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyB2YXJpYXRpb25QbGFjZW1lbnRzLCBiYXNlUGxhY2VtZW50cywgcGxhY2VtZW50cyBhcyBhbGxQbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9IF9vcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9PT0gdm9pZCAwID8gYWxsUGxhY2VtZW50cyA6IF9vcHRpb25zJGFsbG93ZWRBdXRvUDtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuICB2YXIgcGxhY2VtZW50cyA9IHZhcmlhdGlvbiA/IGZsaXBWYXJpYXRpb25zID8gdmFyaWF0aW9uUGxhY2VtZW50cyA6IHZhcmlhdGlvblBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHZhcmlhdGlvbjtcbiAgfSkgOiBiYXNlUGxhY2VtZW50cztcbiAgdmFyIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDA7XG4gIH0pO1xuXG4gIGlmIChhbGxvd2VkUGxhY2VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBUaGUgYGFsbG93ZWRBdXRvUGxhY2VtZW50c2Agb3B0aW9uIGRpZCBub3QgYWxsb3cgYW55JywgJ3BsYWNlbWVudHMuIEVuc3VyZSB0aGUgYHBsYWNlbWVudGAgb3B0aW9uIG1hdGNoZXMgdGhlIHZhcmlhdGlvbicsICdvZiB0aGUgYWxsb3dlZCBwbGFjZW1lbnRzLicsICdGb3IgZXhhbXBsZSwgXCJhdXRvXCIgY2Fubm90IGJlIHVzZWQgdG8gYWxsb3cgXCJib3R0b20tc3RhcnRcIi4nLCAnVXNlIFwiYXV0by1zdGFydFwiIGluc3RlYWQuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV06IEZsb3cgc2VlbXMgdG8gaGF2ZSBwcm9ibGVtcyB3aXRoIHR3byBhcnJheSB1bmlvbnMuLi5cblxuXG4gIHZhciBvdmVyZmxvd3MgPSBhbGxvd2VkUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KVtnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCldO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG92ZXJmbG93cykuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBvdmVyZmxvd3NbYV0gLSBvdmVyZmxvd3NbYl07XG4gIH0pO1xufSIsImltcG9ydCBnZXRPcHBvc2l0ZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyBib3R0b20sIHRvcCwgc3RhcnQsIHJpZ2h0LCBsZWZ0LCBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5mdW5jdGlvbiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwbGFjZW1lbnQpIHtcbiAgaWYgKGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBvcHBvc2l0ZVBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHJldHVybiBbZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSwgb3Bwb3NpdGVQbGFjZW1lbnQsIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KG9wcG9zaXRlUGxhY2VtZW50KV07XG59XG5cbmZ1bmN0aW9uIGZsaXAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgPSBvcHRpb25zLmZhbGxiYWNrUGxhY2VtZW50cyxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9IG9wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGZsaXBWYXJpYXRpbyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IG9wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzO1xuICB2YXIgcHJlZmVycmVkUGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gYmFzZVBsYWNlbWVudCA9PT0gcHJlZmVycmVkUGxhY2VtZW50O1xuICB2YXIgZmFsbGJhY2tQbGFjZW1lbnRzID0gc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIHx8IChpc0Jhc2VQbGFjZW1lbnQgfHwgIWZsaXBWYXJpYXRpb25zID8gW2dldE9wcG9zaXRlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCldIDogZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocHJlZmVycmVkUGxhY2VtZW50KSk7XG4gIHZhciBwbGFjZW1lbnRzID0gW3ByZWZlcnJlZFBsYWNlbWVudF0uY29uY2F0KGZhbGxiYWNrUGxhY2VtZW50cykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0byA/IGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zOiBmbGlwVmFyaWF0aW9ucyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50czogYWxsb3dlZEF1dG9QbGFjZW1lbnRzXG4gICAgfSkgOiBwbGFjZW1lbnQpO1xuICB9LCBbXSk7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGNoZWNrc01hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIG1ha2VGYWxsYmFja0NoZWNrcyA9IHRydWU7XG4gIHZhciBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzWzBdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhY2VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwbGFjZW1lbnQgPSBwbGFjZW1lbnRzW2ldO1xuXG4gICAgdmFyIF9iYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIGlzU3RhcnRWYXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gc3RhcnQ7XG4gICAgdmFyIGlzVmVydGljYWwgPSBbdG9wLCBib3R0b21dLmluZGV4T2YoX2Jhc2VQbGFjZW1lbnQpID49IDA7XG4gICAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSk7XG4gICAgdmFyIG1haW5WYXJpYXRpb25TaWRlID0gaXNWZXJ0aWNhbCA/IGlzU3RhcnRWYXJpYXRpb24gPyByaWdodCA6IGxlZnQgOiBpc1N0YXJ0VmFyaWF0aW9uID8gYm90dG9tIDogdG9wO1xuXG4gICAgaWYgKHJlZmVyZW5jZVJlY3RbbGVuXSA+IHBvcHBlclJlY3RbbGVuXSkge1xuICAgICAgbWFpblZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgfVxuXG4gICAgdmFyIGFsdFZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgdmFyIGNoZWNrcyA9IFtdO1xuXG4gICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W19iYXNlUGxhY2VtZW50XSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1ttYWluVmFyaWF0aW9uU2lkZV0gPD0gMCwgb3ZlcmZsb3dbYWx0VmFyaWF0aW9uU2lkZV0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrcy5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgIHJldHVybiBjaGVjaztcbiAgICB9KSkge1xuICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50O1xuICAgICAgbWFrZUZhbGxiYWNrQ2hlY2tzID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjaGVja3NNYXAuc2V0KHBsYWNlbWVudCwgY2hlY2tzKTtcbiAgfVxuXG4gIGlmIChtYWtlRmFsbGJhY2tDaGVja3MpIHtcbiAgICAvLyBgMmAgbWF5IGJlIGRlc2lyZWQgaW4gc29tZSBjYXNlcyDigJMgcmVzZWFyY2ggbGF0ZXJcbiAgICB2YXIgbnVtYmVyT2ZDaGVja3MgPSBmbGlwVmFyaWF0aW9ucyA/IDMgOiAxO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2kpIHtcbiAgICAgIHZhciBmaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50cy5maW5kKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICAgICAgdmFyIGNoZWNrcyA9IGNoZWNrc01hcC5nZXQocGxhY2VtZW50KTtcblxuICAgICAgICBpZiAoY2hlY2tzKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrcy5zbGljZSgwLCBfaSkuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2s7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZml0dGluZ1BsYWNlbWVudCkge1xuICAgICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBmaXR0aW5nUGxhY2VtZW50O1xuICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBfaSA9IG51bWJlck9mQ2hlY2tzOyBfaSA+IDA7IF9pLS0pIHtcbiAgICAgIHZhciBfcmV0ID0gX2xvb3AoX2kpO1xuXG4gICAgICBpZiAoX3JldCA9PT0gXCJicmVha1wiKSBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUucGxhY2VtZW50ICE9PSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwID0gdHJ1ZTtcbiAgICBzdGF0ZS5wbGFjZW1lbnQgPSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgc3RhdGUucmVzZXQgPSB0cnVlO1xuICB9XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdmbGlwJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGZsaXAsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J10sXG4gIGRhdGE6IHtcbiAgICBfc2tpcDogZmFsc2VcbiAgfVxufTsiLCJpbXBvcnQgeyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcblxuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMob3ZlcmZsb3csIHJlY3QsIHByZXZlbnRlZE9mZnNldHMpIHtcbiAgaWYgKHByZXZlbnRlZE9mZnNldHMgPT09IHZvaWQgMCkge1xuICAgIHByZXZlbnRlZE9mZnNldHMgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogb3ZlcmZsb3cudG9wIC0gcmVjdC5oZWlnaHQgLSBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgcmlnaHQ6IG92ZXJmbG93LnJpZ2h0IC0gcmVjdC53aWR0aCArIHByZXZlbnRlZE9mZnNldHMueCxcbiAgICBib3R0b206IG92ZXJmbG93LmJvdHRvbSAtIHJlY3QuaGVpZ2h0ICsgcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIGxlZnQ6IG92ZXJmbG93LmxlZnQgLSByZWN0LndpZHRoIC0gcHJldmVudGVkT2Zmc2V0cy54XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChvdmVyZmxvdykge1xuICByZXR1cm4gW3RvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdF0uc29tZShmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBvdmVyZmxvd1tzaWRlXSA+PSAwO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGlkZShfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBwcmV2ZW50ZWRPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wcmV2ZW50T3ZlcmZsb3c7XG4gIHZhciByZWZlcmVuY2VPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgZWxlbWVudENvbnRleHQ6ICdyZWZlcmVuY2UnXG4gIH0pO1xuICB2YXIgcG9wcGVyQWx0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGFsdEJvdW5kYXJ5OiB0cnVlXG4gIH0pO1xuICB2YXIgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocmVmZXJlbmNlT3ZlcmZsb3csIHJlZmVyZW5jZVJlY3QpO1xuICB2YXIgcG9wcGVyRXNjYXBlT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHBvcHBlckFsdE92ZXJmbG93LCBwb3BwZXJSZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKTtcbiAgdmFyIGlzUmVmZXJlbmNlSGlkZGVuID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyk7XG4gIHZhciBoYXNQb3BwZXJFc2NhcGVkID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHBvcHBlckVzY2FwZU9mZnNldHMpO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0ge1xuICAgIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0czogcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzLFxuICAgIHBvcHBlckVzY2FwZU9mZnNldHM6IHBvcHBlckVzY2FwZU9mZnNldHMsXG4gICAgaXNSZWZlcmVuY2VIaWRkZW46IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgIGhhc1BvcHBlckVzY2FwZWQ6IGhhc1BvcHBlckVzY2FwZWRcbiAgfTtcbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuJzogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgJ2RhdGEtcG9wcGVyLWVzY2FwZWQnOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGlkZScsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J10sXG4gIGZuOiBoaWRlXG59OyIsImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBwbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgcmVjdHMsIG9mZnNldCkge1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIHZhciBfcmVmID0gdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IG9mZnNldChPYmplY3QuYXNzaWduKHt9LCByZWN0cywge1xuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pKSA6IG9mZnNldCxcbiAgICAgIHNraWRkaW5nID0gX3JlZlswXSxcbiAgICAgIGRpc3RhbmNlID0gX3JlZlsxXTtcblxuICBza2lkZGluZyA9IHNraWRkaW5nIHx8IDA7XG4gIGRpc3RhbmNlID0gKGRpc3RhbmNlIHx8IDApICogaW52ZXJ0RGlzdGFuY2U7XG4gIHJldHVybiBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IHtcbiAgICB4OiBkaXN0YW5jZSxcbiAgICB5OiBza2lkZGluZ1xuICB9IDoge1xuICAgIHg6IHNraWRkaW5nLFxuICAgIHk6IGRpc3RhbmNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mZnNldChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYyLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRvZmZzZXQgPSBvcHRpb25zLm9mZnNldCxcbiAgICAgIG9mZnNldCA9IF9vcHRpb25zJG9mZnNldCA9PT0gdm9pZCAwID8gWzAsIDBdIDogX29wdGlvbnMkb2Zmc2V0O1xuICB2YXIgZGF0YSA9IHBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCBzdGF0ZS5yZWN0cywgb2Zmc2V0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHZhciBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQgPSBkYXRhW3N0YXRlLnBsYWNlbWVudF0sXG4gICAgICB4ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50LngsXG4gICAgICB5ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50Lnk7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnggKz0geDtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSArPSB5O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdvZmZzZXQnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIGZuOiBvZmZzZXRcbn07IiwiaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuLi91dGlscy9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuXG5mdW5jdGlvbiBwb3BwZXJPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIC8vIE9mZnNldHMgYXJlIHRoZSBhY3R1YWwgcG9zaXRpb24gdGhlIHBvcHBlciBuZWVkcyB0byBoYXZlIHRvIGJlXG4gIC8vIHByb3Blcmx5IHBvc2l0aW9uZWQgbmVhciBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBiYXNpYyBwbGFjZW1lbnQsIGFuZCB3aWxsIGJlIGFkanVzdGVkIGJ5XG4gIC8vIHRoZSBtb2RpZmllcnMgaW4gdGhlIG5leHQgc3RlcFxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogc3RhdGUucmVjdHMucmVmZXJlbmNlLFxuICAgIGVsZW1lbnQ6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3BvcHBlck9mZnNldHMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3JlYWQnLFxuICBmbjogcG9wcGVyT2Zmc2V0cyxcbiAgZGF0YToge31cbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QWx0QXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneCcgPyAneScgOiAneCc7XG59IiwiaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBzdGFydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEFsdEF4aXMgZnJvbSBcIi4uL3V0aWxzL2dldEFsdEF4aXMuanNcIjtcbmltcG9ydCB7IHdpdGhpbiwgd2l0aGluTWF4Q2xhbXAgfSBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi4vdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzXCI7XG5pbXBvcnQgeyBtaW4gYXMgbWF0aE1pbiwgbWF4IGFzIG1hdGhNYXggfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXIgPSBvcHRpb25zLnRldGhlcixcbiAgICAgIHRldGhlciA9IF9vcHRpb25zJHRldGhlciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHRldGhlcixcbiAgICAgIF9vcHRpb25zJHRldGhlck9mZnNldCA9IG9wdGlvbnMudGV0aGVyT2Zmc2V0LFxuICAgICAgdGV0aGVyT2Zmc2V0ID0gX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkdGV0aGVyT2Zmc2V0O1xuICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeVxuICB9KTtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9ICF2YXJpYXRpb247XG4gIHZhciBtYWluQXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGFsdEF4aXMgPSBnZXRBbHRBeGlzKG1haW5BeGlzKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IHRldGhlck9mZnNldChPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHRldGhlck9mZnNldDtcbiAgdmFyIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZSA9IHR5cGVvZiB0ZXRoZXJPZmZzZXRWYWx1ZSA9PT0gJ251bWJlcicgPyB7XG4gICAgbWFpbkF4aXM6IHRldGhlck9mZnNldFZhbHVlLFxuICAgIGFsdEF4aXM6IHRldGhlck9mZnNldFZhbHVlXG4gIH0gOiBPYmplY3QuYXNzaWduKHtcbiAgICBtYWluQXhpczogMCxcbiAgICBhbHRBeGlzOiAwXG4gIH0sIHRldGhlck9mZnNldFZhbHVlKTtcbiAgdmFyIG9mZnNldE1vZGlmaWVyU3RhdGUgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldCA/IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W3N0YXRlLnBsYWNlbWVudF0gOiBudWxsO1xuICB2YXIgZGF0YSA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQ7XG5cbiAgICB2YXIgbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgICB2YXIgYWx0U2lkZSA9IG1haW5BeGlzID09PSAneScgPyBib3R0b20gOiByaWdodDtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc107XG4gICAgdmFyIG1pbiA9IG9mZnNldCArIG92ZXJmbG93W21haW5TaWRlXTtcbiAgICB2YXIgbWF4ID0gb2Zmc2V0IC0gb3ZlcmZsb3dbYWx0U2lkZV07XG4gICAgdmFyIGFkZGl0aXZlID0gdGV0aGVyID8gLXBvcHBlclJlY3RbbGVuXSAvIDIgOiAwO1xuICAgIHZhciBtaW5MZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gcmVmZXJlbmNlUmVjdFtsZW5dIDogcG9wcGVyUmVjdFtsZW5dO1xuICAgIHZhciBtYXhMZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gLXBvcHBlclJlY3RbbGVuXSA6IC1yZWZlcmVuY2VSZWN0W2xlbl07IC8vIFdlIG5lZWQgdG8gaW5jbHVkZSB0aGUgYXJyb3cgaW4gdGhlIGNhbGN1bGF0aW9uIHNvIHRoZSBhcnJvdyBkb2Vzbid0IGdvXG4gICAgLy8gb3V0c2lkZSB0aGUgcmVmZXJlbmNlIGJvdW5kc1xuXG4gICAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICAgIHZhciBhcnJvd1JlY3QgPSB0ZXRoZXIgJiYgYXJyb3dFbGVtZW50ID8gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9O1xuICAgIHZhciBhcnJvd1BhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10gPyBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10ucGFkZGluZyA6IGdldEZyZXNoU2lkZU9iamVjdCgpO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNaW4gPSBhcnJvd1BhZGRpbmdPYmplY3RbbWFpblNpZGVdO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNYXggPSBhcnJvd1BhZGRpbmdPYmplY3RbYWx0U2lkZV07IC8vIElmIHRoZSByZWZlcmVuY2UgbGVuZ3RoIGlzIHNtYWxsZXIgdGhhbiB0aGUgYXJyb3cgbGVuZ3RoLCB3ZSBkb24ndCB3YW50XG4gICAgLy8gdG8gaW5jbHVkZSBpdHMgZnVsbCBzaXplIGluIHRoZSBjYWxjdWxhdGlvbi4gSWYgdGhlIHJlZmVyZW5jZSBpcyBzbWFsbFxuICAgIC8vIGFuZCBuZWFyIHRoZSBlZGdlIG9mIGEgYm91bmRhcnksIHRoZSBwb3BwZXIgY2FuIG92ZXJmbG93IGV2ZW4gaWYgdGhlXG4gICAgLy8gcmVmZXJlbmNlIGlzIG5vdCBvdmVyZmxvd2luZyBhcyB3ZWxsIChlLmcuIHZpcnR1YWwgZWxlbWVudHMgd2l0aCBub1xuICAgIC8vIHdpZHRoIG9yIGhlaWdodClcblxuICAgIHZhciBhcnJvd0xlbiA9IHdpdGhpbigwLCByZWZlcmVuY2VSZWN0W2xlbl0sIGFycm93UmVjdFtsZW5dKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiAtIGFkZGl0aXZlIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXMgOiBtaW5MZW4gLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcbiAgICB2YXIgbWF4T2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gLXJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgKyBhZGRpdGl2ZSArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzIDogbWF4TGVuICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXM7XG4gICAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3cgJiYgZ2V0T2Zmc2V0UGFyZW50KHN0YXRlLmVsZW1lbnRzLmFycm93KTtcbiAgICB2YXIgY2xpZW50T2Zmc2V0ID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBtYWluQXhpcyA9PT0gJ3knID8gYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50VG9wIHx8IDAgOiBhcnJvd09mZnNldFBhcmVudC5jbGllbnRMZWZ0IHx8IDAgOiAwO1xuICAgIHZhciBvZmZzZXRNb2RpZmllclZhbHVlID0gKF9vZmZzZXRNb2RpZmllclN0YXRlJCA9IG9mZnNldE1vZGlmaWVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IG9mZnNldE1vZGlmaWVyU3RhdGVbbWFpbkF4aXNdKSAhPSBudWxsID8gX29mZnNldE1vZGlmaWVyU3RhdGUkIDogMDtcbiAgICB2YXIgdGV0aGVyTWluID0gb2Zmc2V0ICsgbWluT2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIGNsaWVudE9mZnNldDtcbiAgICB2YXIgdGV0aGVyTWF4ID0gb2Zmc2V0ICsgbWF4T2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZTtcbiAgICB2YXIgcHJldmVudGVkT2Zmc2V0ID0gd2l0aGluKHRldGhlciA/IG1hdGhNaW4obWluLCB0ZXRoZXJNaW4pIDogbWluLCBvZmZzZXQsIHRldGhlciA/IG1hdGhNYXgobWF4LCB0ZXRoZXJNYXgpIDogbWF4KTtcbiAgICBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldCAtIG9mZnNldDtcbiAgfVxuXG4gIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICB2YXIgX29mZnNldE1vZGlmaWVyU3RhdGUkMjtcblxuICAgIHZhciBfbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gdG9wIDogbGVmdDtcblxuICAgIHZhciBfYWx0U2lkZSA9IG1haW5BeGlzID09PSAneCcgPyBib3R0b20gOiByaWdodDtcblxuICAgIHZhciBfb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1thbHRBeGlzXTtcblxuICAgIHZhciBfbGVuID0gYWx0QXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gICAgdmFyIF9taW4gPSBfb2Zmc2V0ICsgb3ZlcmZsb3dbX21haW5TaWRlXTtcblxuICAgIHZhciBfbWF4ID0gX29mZnNldCAtIG92ZXJmbG93W19hbHRTaWRlXTtcblxuICAgIHZhciBpc09yaWdpblNpZGUgPSBbdG9wLCBsZWZ0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IChfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb2Zmc2V0TW9kaWZpZXJTdGF0ZVthbHRBeGlzXSkgIT0gbnVsbCA/IF9vZmZzZXRNb2RpZmllclN0YXRlJDIgOiAwO1xuXG4gICAgdmFyIF90ZXRoZXJNaW4gPSBpc09yaWdpblNpZGUgPyBfbWluIDogX29mZnNldCAtIHJlZmVyZW5jZVJlY3RbX2xlbl0gLSBwb3BwZXJSZWN0W19sZW5dIC0gX29mZnNldE1vZGlmaWVyVmFsdWUgKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUuYWx0QXhpcztcblxuICAgIHZhciBfdGV0aGVyTWF4ID0gaXNPcmlnaW5TaWRlID8gX29mZnNldCArIHJlZmVyZW5jZVJlY3RbX2xlbl0gKyBwb3BwZXJSZWN0W19sZW5dIC0gX29mZnNldE1vZGlmaWVyVmFsdWUgLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUuYWx0QXhpcyA6IF9tYXg7XG5cbiAgICB2YXIgX3ByZXZlbnRlZE9mZnNldCA9IHRldGhlciAmJiBpc09yaWdpblNpZGUgPyB3aXRoaW5NYXhDbGFtcChfdGV0aGVyTWluLCBfb2Zmc2V0LCBfdGV0aGVyTWF4KSA6IHdpdGhpbih0ZXRoZXIgPyBfdGV0aGVyTWluIDogX21pbiwgX29mZnNldCwgdGV0aGVyID8gX3RldGhlck1heCA6IF9tYXgpO1xuXG4gICAgcG9wcGVyT2Zmc2V0c1thbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVthbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQgLSBfb2Zmc2V0O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogcHJldmVudE92ZXJmbG93LFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEhUTUxFbGVtZW50U2Nyb2xsKGVsZW1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBlbGVtZW50LnNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBlbGVtZW50LnNjcm9sbFRvcFxuICB9O1xufSIsImltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRIVE1MRWxlbWVudFNjcm9sbCBmcm9tIFwiLi9nZXRIVE1MRWxlbWVudFNjcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZVNjcm9sbChub2RlKSB7XG4gIGlmIChub2RlID09PSBnZXRXaW5kb3cobm9kZSkgfHwgIWlzSFRNTEVsZW1lbnQobm9kZSkpIHtcbiAgICByZXR1cm4gZ2V0V2luZG93U2Nyb2xsKG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRIVE1MRWxlbWVudFNjcm9sbChub2RlKTtcbiAgfVxufSIsImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZVNjcm9sbCBmcm9tIFwiLi9nZXROb2RlU2Nyb2xsLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudFNjYWxlZChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNjYWxlWCA9IHJvdW5kKHJlY3Qud2lkdGgpIC8gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAxO1xuICB2YXIgc2NhbGVZID0gcm91bmQocmVjdC5oZWlnaHQpIC8gZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgMTtcbiAgcmV0dXJuIHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDE7XG59IC8vIFJldHVybnMgdGhlIGNvbXBvc2l0ZSByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC5cbi8vIENvbXBvc2l0ZSBtZWFucyBpdCB0YWtlcyBpbnRvIGFjY291bnQgdHJhbnNmb3JtcyBhcyB3ZWxsIGFzIGxheW91dC5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wb3NpdGVSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50LCBvZmZzZXRQYXJlbnQsIGlzRml4ZWQpIHtcbiAgaWYgKGlzRml4ZWQgPT09IHZvaWQgMCkge1xuICAgIGlzRml4ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudElzU2NhbGVkID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGlzRWxlbWVudFNjYWxlZChvZmZzZXRQYXJlbnQpO1xuICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50LCBvZmZzZXRQYXJlbnRJc1NjYWxlZCk7XG4gIHZhciBzY3JvbGwgPSB7XG4gICAgc2Nyb2xsTGVmdDogMCxcbiAgICBzY3JvbGxUb3A6IDBcbiAgfTtcbiAgdmFyIG9mZnNldHMgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50IHx8ICFpc09mZnNldFBhcmVudEFuRWxlbWVudCAmJiAhaXNGaXhlZCkge1xuICAgIGlmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpICE9PSAnYm9keScgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMDc4XG4gICAgaXNTY3JvbGxQYXJlbnQoZG9jdW1lbnRFbGVtZW50KSkge1xuICAgICAgc2Nyb2xsID0gZ2V0Tm9kZVNjcm9sbChvZmZzZXRQYXJlbnQpO1xuICAgIH1cblxuICAgIGlmIChpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICAgIG9mZnNldHMgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50LCB0cnVlKTtcbiAgICAgIG9mZnNldHMueCArPSBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcbiAgICAgIG9mZnNldHMueSArPSBvZmZzZXRQYXJlbnQuY2xpZW50VG9wO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBvZmZzZXRzLnggPSBnZXRXaW5kb3dTY3JvbGxCYXJYKGRvY3VtZW50RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiByZWN0LmxlZnQgKyBzY3JvbGwuc2Nyb2xsTGVmdCAtIG9mZnNldHMueCxcbiAgICB5OiByZWN0LnRvcCArIHNjcm9sbC5zY3JvbGxUb3AgLSBvZmZzZXRzLnksXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICB9O1xufSIsImltcG9ydCB7IG1vZGlmaWVyUGhhc2VzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7IC8vIHNvdXJjZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDk4NzUyNTVcblxuZnVuY3Rpb24gb3JkZXIobW9kaWZpZXJzKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwKCk7XG4gIHZhciB2aXNpdGVkID0gbmV3IFNldCgpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIG1hcC5zZXQobW9kaWZpZXIubmFtZSwgbW9kaWZpZXIpO1xuICB9KTsgLy8gT24gdmlzaXRpbmcgb2JqZWN0LCBjaGVjayBmb3IgaXRzIGRlcGVuZGVuY2llcyBhbmQgdmlzaXQgdGhlbSByZWN1cnNpdmVseVxuXG4gIGZ1bmN0aW9uIHNvcnQobW9kaWZpZXIpIHtcbiAgICB2aXNpdGVkLmFkZChtb2RpZmllci5uYW1lKTtcbiAgICB2YXIgcmVxdWlyZXMgPSBbXS5jb25jYXQobW9kaWZpZXIucmVxdWlyZXMgfHwgW10sIG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMgfHwgW10pO1xuICAgIHJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKGRlcCkge1xuICAgICAgaWYgKCF2aXNpdGVkLmhhcyhkZXApKSB7XG4gICAgICAgIHZhciBkZXBNb2RpZmllciA9IG1hcC5nZXQoZGVwKTtcblxuICAgICAgICBpZiAoZGVwTW9kaWZpZXIpIHtcbiAgICAgICAgICBzb3J0KGRlcE1vZGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJlc3VsdC5wdXNoKG1vZGlmaWVyKTtcbiAgfVxuXG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmICghdmlzaXRlZC5oYXMobW9kaWZpZXIubmFtZSkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciB2aXNpdGVkIG9iamVjdFxuICAgICAgc29ydChtb2RpZmllcik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkZXJNb2RpZmllcnMobW9kaWZpZXJzKSB7XG4gIC8vIG9yZGVyIGJhc2VkIG9uIGRlcGVuZGVuY2llc1xuICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyKG1vZGlmaWVycyk7IC8vIG9yZGVyIGJhc2VkIG9uIHBoYXNlXG5cbiAgcmV0dXJuIG1vZGlmaWVyUGhhc2VzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwaGFzZSkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgcmV0dXJuIG1vZGlmaWVyLnBoYXNlID09PSBwaGFzZTtcbiAgICB9KSk7XG4gIH0sIFtdKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIGN1cnJlbnQsIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLm9wdGlvbnMsIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59IiwiaW1wb3J0IGdldENvbXBvc2l0ZVJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgb3JkZXJNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvb3JkZXJNb2RpZmllcnMuanNcIjtcbmltcG9ydCBkZWJvdW5jZSBmcm9tIFwiLi91dGlscy9kZWJvdW5jZS5qc1wiO1xuaW1wb3J0IHZhbGlkYXRlTW9kaWZpZXJzIGZyb20gXCIuL3V0aWxzL3ZhbGlkYXRlTW9kaWZpZXJzLmpzXCI7XG5pbXBvcnQgdW5pcXVlQnkgZnJvbSBcIi4vdXRpbHMvdW5pcXVlQnkuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBtZXJnZUJ5TmFtZSBmcm9tIFwiLi91dGlscy9tZXJnZUJ5TmFtZS5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuL2VudW1zLmpzXCI7XG52YXIgSU5WQUxJRF9FTEVNRU5UX0VSUk9SID0gJ1BvcHBlcjogSW52YWxpZCByZWZlcmVuY2Ugb3IgcG9wcGVyIGFyZ3VtZW50IHByb3ZpZGVkLiBUaGV5IG11c3QgYmUgZWl0aGVyIGEgRE9NIGVsZW1lbnQgb3IgdmlydHVhbCBlbGVtZW50Lic7XG52YXIgSU5GSU5JVEVfTE9PUF9FUlJPUiA9ICdQb3BwZXI6IEFuIGluZmluaXRlIGxvb3AgaW4gdGhlIG1vZGlmaWVycyBjeWNsZSBoYXMgYmVlbiBkZXRlY3RlZCEgVGhlIGN5Y2xlIGhhcyBiZWVuIGludGVycnVwdGVkIHRvIHByZXZlbnQgYSBicm93c2VyIGNyYXNoLic7XG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICBtb2RpZmllcnM6IFtdLFxuICBzdHJhdGVneTogJ2Fic29sdXRlJ1xufTtcblxuZnVuY3Rpb24gYXJlVmFsaWRFbGVtZW50cygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiAhYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuICEoZWxlbWVudCAmJiB0eXBlb2YgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPT09ICdmdW5jdGlvbicpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvcHBlckdlbmVyYXRvcihnZW5lcmF0b3JPcHRpb25zKSB7XG4gIGlmIChnZW5lcmF0b3JPcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBnZW5lcmF0b3JPcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX2dlbmVyYXRvck9wdGlvbnMgPSBnZW5lcmF0b3JPcHRpb25zLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE1vZGlmaWVycyxcbiAgICAgIGRlZmF1bHRNb2RpZmllcnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPT09IHZvaWQgMCA/IFtdIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRPcHRpb25zLFxuICAgICAgZGVmYXVsdE9wdGlvbnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID09PSB2b2lkIDAgPyBERUZBVUxUX09QVElPTlMgOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyO1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICBvcmRlcmVkTW9kaWZpZXJzOiBbXSxcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgZGVmYXVsdE9wdGlvbnMpLFxuICAgICAgbW9kaWZpZXJzRGF0YToge30sXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyOiBwb3BwZXJcbiAgICAgIH0sXG4gICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIHN0eWxlczoge31cbiAgICB9O1xuICAgIHZhciBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgdmFyIGlzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgdmFyIGluc3RhbmNlID0ge1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24gc2V0T3B0aW9ucyhzZXRPcHRpb25zQWN0aW9uKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHNldE9wdGlvbnNBY3Rpb24gPT09ICdmdW5jdGlvbicgPyBzZXRPcHRpb25zQWN0aW9uKHN0YXRlLm9wdGlvbnMpIDogc2V0T3B0aW9uc0FjdGlvbjtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBzdGF0ZS5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIHN0YXRlLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogaXNFbGVtZW50KHJlZmVyZW5jZSkgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UpIDogcmVmZXJlbmNlLmNvbnRleHRFbGVtZW50ID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlLmNvbnRleHRFbGVtZW50KSA6IFtdLFxuICAgICAgICAgIHBvcHBlcjogbGlzdFNjcm9sbFBhcmVudHMocG9wcGVyKVxuICAgICAgICB9OyAvLyBPcmRlcnMgdGhlIG1vZGlmaWVycyBiYXNlZCBvbiB0aGVpciBkZXBlbmRlbmNpZXMgYW5kIGBwaGFzZWBcbiAgICAgICAgLy8gcHJvcGVydGllc1xuXG4gICAgICAgIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJNb2RpZmllcnMobWVyZ2VCeU5hbWUoW10uY29uY2F0KGRlZmF1bHRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSkpOyAvLyBTdHJpcCBvdXQgZGlzYWJsZWQgbW9kaWZpZXJzXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0uZW5hYmxlZDtcbiAgICAgICAgfSk7IC8vIFZhbGlkYXRlIHRoZSBwcm92aWRlZCBtb2RpZmllcnMgc28gdGhhdCB0aGUgY29uc3VtZXIgd2lsbCBnZXQgd2FybmVkXG4gICAgICAgIC8vIGlmIG9uZSBvZiB0aGUgbW9kaWZpZXJzIGlzIGludmFsaWQgZm9yIGFueSByZWFzb25cblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgdmFyIG1vZGlmaWVycyA9IHVuaXF1ZUJ5KFtdLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycyksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhbGlkYXRlTW9kaWZpZXJzKG1vZGlmaWVycyk7XG5cbiAgICAgICAgICBpZiAoZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5vcHRpb25zLnBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICAgICAgICAgIHZhciBmbGlwTW9kaWZpZXIgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZpbmQoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZjIubmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09ICdmbGlwJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWZsaXBNb2RpZmllcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImF1dG9cIiBwbGFjZW1lbnRzIHJlcXVpcmUgdGhlIFwiZmxpcFwiIG1vZGlmaWVyIGJlJywgJ3ByZXNlbnQgYW5kIGVuYWJsZWQgdG8gd29yay4nXS5qb2luKCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUocG9wcGVyKSxcbiAgICAgICAgICAgICAgbWFyZ2luVG9wID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luVG9wLFxuICAgICAgICAgICAgICBtYXJnaW5SaWdodCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblJpZ2h0LFxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b20gPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Cb3R0b20sXG4gICAgICAgICAgICAgIG1hcmdpbkxlZnQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0OyAvLyBXZSBubyBsb25nZXIgdGFrZSBpbnRvIGFjY291bnQgYG1hcmdpbnNgIG9uIHRoZSBwb3BwZXIsIGFuZCBpdCBjYW5cbiAgICAgICAgICAvLyBjYXVzZSBidWdzIHdpdGggcG9zaXRpb25pbmcsIHNvIHdlJ2xsIHdhcm4gdGhlIGNvbnN1bWVyXG5cblxuICAgICAgICAgIGlmIChbbWFyZ2luVG9wLCBtYXJnaW5SaWdodCwgbWFyZ2luQm90dG9tLCBtYXJnaW5MZWZ0XS5zb21lKGZ1bmN0aW9uIChtYXJnaW4pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KG1hcmdpbik7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogQ1NTIFwibWFyZ2luXCIgc3R5bGVzIGNhbm5vdCBiZSB1c2VkIHRvIGFwcGx5IHBhZGRpbmcnLCAnYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgb3IgYm91bmRhcnkuJywgJ1RvIHJlcGxpY2F0ZSBtYXJnaW4sIHVzZSB0aGUgYG9mZnNldGAgbW9kaWZpZXIsIGFzIHdlbGwgYXMnLCAndGhlIGBwYWRkaW5nYCBvcHRpb24gaW4gdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIGFuZCBgZmxpcGAnLCAnbW9kaWZpZXJzLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcnVuTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICAvLyBTeW5jIHVwZGF0ZSDigJMgaXQgd2lsbCBhbHdheXMgYmUgZXhlY3V0ZWQsIGV2ZW4gaWYgbm90IG5lY2Vzc2FyeS4gVGhpc1xuICAgICAgLy8gaXMgdXNlZnVsIGZvciBsb3cgZnJlcXVlbmN5IHVwZGF0ZXMgd2hlcmUgc3luYyBiZWhhdmlvciBzaW1wbGlmaWVzIHRoZVxuICAgICAgLy8gbG9naWMuXG4gICAgICAvLyBGb3IgaGlnaCBmcmVxdWVuY3kgdXBkYXRlcyAoZS5nLiBgcmVzaXplYCBhbmQgYHNjcm9sbGAgZXZlbnRzKSwgYWx3YXlzXG4gICAgICAvLyBwcmVmZXIgdGhlIGFzeW5jIFBvcHBlciN1cGRhdGUgbWV0aG9kXG4gICAgICBmb3JjZVVwZGF0ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0Rlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfc3RhdGUkZWxlbWVudHMgPSBzdGF0ZS5lbGVtZW50cyxcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IF9zdGF0ZSRlbGVtZW50cy5yZWZlcmVuY2UsXG4gICAgICAgICAgICBwb3BwZXIgPSBfc3RhdGUkZWxlbWVudHMucG9wcGVyOyAvLyBEb24ndCBwcm9jZWVkIGlmIGByZWZlcmVuY2VgIG9yIGBwb3BwZXJgIGFyZSBub3QgdmFsaWQgZWxlbWVudHNcbiAgICAgICAgLy8gYW55bW9yZVxuXG4gICAgICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIFN0b3JlIHRoZSByZWZlcmVuY2UgYW5kIHBvcHBlciByZWN0cyB0byBiZSByZWFkIGJ5IG1vZGlmaWVyc1xuXG5cbiAgICAgICAgc3RhdGUucmVjdHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBnZXRDb21wb3NpdGVSZWN0KHJlZmVyZW5jZSwgZ2V0T2Zmc2V0UGFyZW50KHBvcHBlciksIHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCcpLFxuICAgICAgICAgIHBvcHBlcjogZ2V0TGF5b3V0UmVjdChwb3BwZXIpXG4gICAgICAgIH07IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIHJlc2V0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZS4gVGhlXG4gICAgICAgIC8vIG1vc3QgY29tbW9uIHVzZSBjYXNlIGZvciB0aGlzIGlzIHRoZSBgZmxpcGAgbW9kaWZpZXIgY2hhbmdpbmcgdGhlXG4gICAgICAgIC8vIHBsYWNlbWVudCwgd2hpY2ggdGhlbiBuZWVkcyB0byByZS1ydW4gYWxsIHRoZSBtb2RpZmllcnMsIGJlY2F1c2UgdGhlXG4gICAgICAgIC8vIGxvZ2ljIHdhcyBwcmV2aW91c2x5IHJhbiBmb3IgdGhlIHByZXZpb3VzIHBsYWNlbWVudCBhbmQgaXMgdGhlcmVmb3JlXG4gICAgICAgIC8vIHN0YWxlL2luY29ycmVjdFxuXG4gICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLnBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50OyAvLyBPbiBlYWNoIHVwZGF0ZSBjeWNsZSwgdGhlIGBtb2RpZmllcnNEYXRhYCBwcm9wZXJ0eSBmb3IgZWFjaCBtb2RpZmllclxuICAgICAgICAvLyBpcyBmaWxsZWQgd2l0aCB0aGUgaW5pdGlhbCBkYXRhIHNwZWNpZmllZCBieSB0aGUgbW9kaWZpZXIuIFRoaXMgbWVhbnNcbiAgICAgICAgLy8gaXQgZG9lc24ndCBwZXJzaXN0IGFuZCBpcyBmcmVzaCBvbiBlYWNoIHVwZGF0ZS5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHBlcnNpc3RlbnQgZGF0YSwgdXNlIGAke25hbWV9I3BlcnNpc3RlbnRgXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgICAgIHJldHVybiBzdGF0ZS5tb2RpZmllcnNEYXRhW21vZGlmaWVyLm5hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgbW9kaWZpZXIuZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgX19kZWJ1Z19sb29wc19fID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBfX2RlYnVnX2xvb3BzX18gKz0gMTtcblxuICAgICAgICAgICAgaWYgKF9fZGVidWdfbG9vcHNfXyA+IDEwMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKElORklOSVRFX0xPT1BfRVJST1IpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhdGUucmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZSA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnNbaW5kZXhdLFxuICAgICAgICAgICAgICBmbiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5mbixcbiAgICAgICAgICAgICAgX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5vcHRpb25zLFxuICAgICAgICAgICAgICBfb3B0aW9ucyA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPT09IHZvaWQgMCA/IHt9IDogX3N0YXRlJG9yZGVyZWRNb2RpZmllMixcbiAgICAgICAgICAgICAgbmFtZSA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5uYW1lO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RhdGUgPSBmbih7XG4gICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgICAgb3B0aW9uczogX29wdGlvbnMsXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxuICAgICAgICAgICAgfSkgfHwgc3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gQXN5bmMgYW5kIG9wdGltaXN0aWNhbGx5IG9wdGltaXplZCB1cGRhdGUg4oCTIGl0IHdpbGwgbm90IGJlIGV4ZWN1dGVkIGlmXG4gICAgICAvLyBub3QgbmVjZXNzYXJ5IChkZWJvdW5jZWQgdG8gcnVuIGF0IG1vc3Qgb25jZS1wZXItdGljaylcbiAgICAgIHVwZGF0ZTogZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBpc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3llZCAmJiBvcHRpb25zLm9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBiZWZvcmUgdGhlIGZpcnN0XG4gICAgLy8gdXBkYXRlIGN5Y2xlIHJ1bnMuIFRoZXkgd2lsbCBiZSBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgdXBkYXRlXG4gICAgLy8gY3ljbGUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBtb2RpZmllciBhZGRzIHNvbWUgcGVyc2lzdGVudCBkYXRhIHRoYXRcbiAgICAvLyBvdGhlciBtb2RpZmllcnMgbmVlZCB0byB1c2UsIGJ1dCB0aGUgbW9kaWZpZXIgaXMgcnVuIGFmdGVyIHRoZSBkZXBlbmRlbnRcbiAgICAvLyBvbmUuXG5cbiAgICBmdW5jdGlvbiBydW5Nb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgICAgIF9yZWYzJG9wdGlvbnMgPSBfcmVmMy5vcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9ucyA9IF9yZWYzJG9wdGlvbnMgPT09IHZvaWQgMCA/IHt9IDogX3JlZjMkb3B0aW9ucyxcbiAgICAgICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdDtcblxuICAgICAgICBpZiAodHlwZW9mIGVmZmVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciBjbGVhbnVwRm4gPSBlZmZlY3Qoe1xuICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBub29wRm4gPSBmdW5jdGlvbiBub29wRm4oKSB7fTtcblxuICAgICAgICAgIGVmZmVjdENsZWFudXBGbnMucHVzaChjbGVhbnVwRm4gfHwgbm9vcEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICB9KTtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG59XG5leHBvcnQgdmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3IoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBkZXRlY3RPdmVyZmxvdyB9OyIsImltcG9ydCBhcnJvdyBmcm9tICdAcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93JztcbmltcG9ydCBjb21wdXRlU3R5bGVzIGZyb20gJ0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcyc7XG5pbXBvcnQgZXZlbnRMaXN0ZW5lcnMgZnJvbSAnQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9ldmVudExpc3RlbmVycyc7XG5pbXBvcnQgZmxpcCBmcm9tICdAcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2ZsaXAnO1xuaW1wb3J0IGhpZGUgZnJvbSAnQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlJztcbmltcG9ydCBvZmZzZXQgZnJvbSAnQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXQnO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSAnQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzJztcbmltcG9ydCBwcmV2ZW50T3ZlcmZsb3cgZnJvbSAnQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cnO1xuaW1wb3J0IHsgcGxhY2VtZW50cyB9IGZyb20gJ0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcyc7XG5pbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IgfSBmcm9tICdAcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLWJhc2UnOyAvLyBGb3IgdGhlIGNvbW1vbiBKUyBidWlsZCB3ZSB3aWxsIHR1cm4gdGhpcyBmaWxlIGludG8gYSBidW5kbGUgd2l0aCBubyBpbXBvcnRzLlxuLy8gVGhpcyBpcyBiL2MgdGhlIFBvcHBlciBsaWIgaXMgYWxsIGVzbSBmaWxlcywgYW5kIHdvdWxkIGJyZWFrIGluIGEgY29tbW9uIGpzIG9ubHkgZW52aXJvbm1lbnRcblxuZXhwb3J0IHZhciBjcmVhdGVQb3BwZXIgPSBwb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBbaGlkZSwgcG9wcGVyT2Zmc2V0cywgY29tcHV0ZVN0eWxlcywgZXZlbnRMaXN0ZW5lcnMsIG9mZnNldCwgZmxpcCwgcHJldmVudE92ZXJmbG93LCBhcnJvd11cbn0pO1xuZXhwb3J0IHsgcGxhY2VtZW50cyB9OyIsImltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBUcmFjayB3aGV0aGVyIGEgY29tcG9uZW50IGlzIGN1cnJlbnQgbW91bnRlZC4gR2VuZXJhbGx5IGxlc3MgcHJlZmVyYWJsZSB0aGFuXG4gKiBwcm9wZXJsbHkgY2FuY2VsaW5nIGVmZmVjdHMgc28gdGhleSBkb24ndCBydW4gYWZ0ZXIgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkLFxuICogYnV0IGhlbHBmdWwgaW4gY2FzZXMgd2hlcmUgdGhhdCBpc24ndCBmZWFzaWJsZSwgc3VjaCBhcyBhIGBQcm9taXNlYCByZXNvbHV0aW9uLlxuICpcbiAqIEByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjdXJyZW50IGlzTW91bnRlZCBzdGF0ZSBvZiB0aGUgY29tcG9uZW50XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKG51bGwpXG4gKiBjb25zdCBpc01vdW50ZWQgPSB1c2VNb3VudGVkKClcbiAqXG4gKiB1c2VFZmZlY3QoKCkgPT4ge1xuICogICBmZXRjaGRhdGEoKS50aGVuKChuZXdEYXRhKSA9PiB7XG4gKiAgICAgIGlmIChpc01vdW50ZWQoKSkge1xuICogICAgICAgIHNldERhdGEobmV3RGF0YSk7XG4gKiAgICAgIH1cbiAqICAgfSlcbiAqIH0pXG4gKiBgYGBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VNb3VudGVkKCkge1xuICB2YXIgbW91bnRlZCA9IHVzZVJlZih0cnVlKTtcbiAgdmFyIGlzTW91bnRlZCA9IHVzZVJlZihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1vdW50ZWQuY3VycmVudDtcbiAgfSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGlzTW91bnRlZC5jdXJyZW50O1xufSIsImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZU1vdW50ZWQgZnJvbSAnLi91c2VNb3VudGVkJztcblxuZnVuY3Rpb24gdXNlU2FmZVN0YXRlKHN0YXRlKSB7XG4gIHZhciBpc01vdW50ZWQgPSB1c2VNb3VudGVkKCk7XG4gIHJldHVybiBbc3RhdGVbMF0sIHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChuZXh0U3RhdGUpIHtcbiAgICBpZiAoIWlzTW91bnRlZCgpKSByZXR1cm47XG4gICAgcmV0dXJuIHN0YXRlWzFdKG5leHRTdGF0ZSk7XG4gIH0sIFtpc01vdW50ZWQsIHN0YXRlWzFdXSldO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VTYWZlU3RhdGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlU2FmZVN0YXRlIGZyb20gJ0ByZXN0YXJ0L2hvb2tzL3VzZVNhZmVTdGF0ZSc7XG5pbXBvcnQgeyBjcmVhdGVQb3BwZXIgfSBmcm9tICcuL3BvcHBlcic7XG5cbnZhciBpbml0aWFsUG9wcGVyU3R5bGVzID0gZnVuY3Rpb24gaW5pdGlhbFBvcHBlclN0eWxlcyhwb3NpdGlvbikge1xuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICB0b3A6ICcwJyxcbiAgICBsZWZ0OiAnMCcsXG4gICAgb3BhY2l0eTogJzAnLFxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICB9O1xufTtcblxudmFyIGRpc2FibGVkQXBwbHlTdHlsZXNNb2RpZmllciA9IHtcbiAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgZW5hYmxlZDogZmFsc2Vcbn07IC8vIHVudGlsIGRvY2pzIHN1cHBvcnRzIHR5cGUgZXhwb3J0cy4uLlxuXG52YXIgYXJpYURlc2NyaWJlZEJ5TW9kaWZpZXIgPSB7XG4gIG5hbWU6ICdhcmlhRGVzY3JpYmVkQnknLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ2FmdGVyV3JpdGUnLFxuICBlZmZlY3Q6IGZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gICAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9zdGF0ZSRlbGVtZW50cyA9IHN0YXRlLmVsZW1lbnRzLFxuICAgICAgICAgIHJlZmVyZW5jZSA9IF9zdGF0ZSRlbGVtZW50cy5yZWZlcmVuY2UsXG4gICAgICAgICAgcG9wcGVyID0gX3N0YXRlJGVsZW1lbnRzLnBvcHBlcjtcblxuICAgICAgaWYgKCdyZW1vdmVBdHRyaWJ1dGUnIGluIHJlZmVyZW5jZSkge1xuICAgICAgICB2YXIgaWRzID0gKHJlZmVyZW5jZS5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKSB8fCAnJykuc3BsaXQoJywnKS5maWx0ZXIoZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgcmV0dXJuIGlkLnRyaW0oKSAhPT0gcG9wcGVyLmlkO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFpZHMubGVuZ3RoKSByZWZlcmVuY2UucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7ZWxzZSByZWZlcmVuY2Uuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgaWRzLmpvaW4oJywnKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgZm46IGZ1bmN0aW9uIGZuKF9yZWYyKSB7XG4gICAgdmFyIF9wb3BwZXIkZ2V0QXR0cmlidXRlO1xuXG4gICAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGU7XG4gICAgdmFyIF9zdGF0ZSRlbGVtZW50czIgPSBzdGF0ZS5lbGVtZW50cyxcbiAgICAgICAgcG9wcGVyID0gX3N0YXRlJGVsZW1lbnRzMi5wb3BwZXIsXG4gICAgICAgIHJlZmVyZW5jZSA9IF9zdGF0ZSRlbGVtZW50czIucmVmZXJlbmNlO1xuICAgIHZhciByb2xlID0gKF9wb3BwZXIkZ2V0QXR0cmlidXRlID0gcG9wcGVyLmdldEF0dHJpYnV0ZSgncm9sZScpKSA9PSBudWxsID8gdm9pZCAwIDogX3BvcHBlciRnZXRBdHRyaWJ1dGUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChwb3BwZXIuaWQgJiYgcm9sZSA9PT0gJ3Rvb2x0aXAnICYmICdzZXRBdHRyaWJ1dGUnIGluIHJlZmVyZW5jZSkge1xuICAgICAgdmFyIGlkcyA9IHJlZmVyZW5jZS5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKTtcblxuICAgICAgaWYgKGlkcyAmJiBpZHMuc3BsaXQoJywnKS5pbmRleE9mKHBvcHBlci5pZCkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVmZXJlbmNlLnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIGlkcyA/IGlkcyArIFwiLFwiICsgcG9wcGVyLmlkIDogcG9wcGVyLmlkKTtcbiAgICB9XG4gIH1cbn07XG52YXIgRU1QVFlfTU9ESUZJRVJTID0gW107XG4vKipcbiAqIFBvc2l0aW9uIGFuIGVsZW1lbnQgcmVsYXRpdmUgc29tZSByZWZlcmVuY2UgZWxlbWVudCB1c2luZyBQb3BwZXIuanNcbiAqXG4gKiBAcGFyYW0gcmVmZXJlbmNlRWxlbWVudFxuICogQHBhcmFtIHBvcHBlckVsZW1lbnRcbiAqIEBwYXJhbSB7b2JqZWN0fSAgICAgIG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0PX0gICAgIG9wdGlvbnMubW9kaWZpZXJzIFBvcHBlci5qcyBtb2RpZmllcnNcbiAqIEBwYXJhbSB7Ym9vbGVhbj19ICAgIG9wdGlvbnMuZW5hYmxlZCB0b2dnbGUgdGhlIHBvcHBlciBmdW5jdGlvbmFsaXR5IG9uL29mZlxuICogQHBhcmFtIHtzdHJpbmc9fSAgICAgb3B0aW9ucy5wbGFjZW1lbnQgVGhlIHBvcHBlciBlbGVtZW50IHBsYWNlbWVudCByZWxhdGl2ZSB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gICAgIG9wdGlvbnMuc3RyYXRlZ3kgdGhlIHBvc2l0aW9uaW5nIHN0cmF0ZWd5XG4gKiBAcGFyYW0ge2Jvb2xlYW49fSAgICBvcHRpb25zLmV2ZW50c0VuYWJsZWQgaGF2ZSBQb3BwZXIgbGlzdGVuIG9uIHdpbmRvdyByZXNpemUgZXZlbnRzIHRvIHJlcG9zaXRpb24gdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB7ZnVuY3Rpb249fSAgIG9wdGlvbnMub25DcmVhdGUgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkXG4gKiBAcGFyYW0ge2Z1bmN0aW9uPX0gICBvcHRpb25zLm9uVXBkYXRlIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZFxuICpcbiAqIEByZXR1cm5zIHtVc2VQb3BwZXJTdGF0ZX0gVGhlIHBvcHBlciBzdGF0ZVxuICovXG5cbmZ1bmN0aW9uIHVzZVBvcHBlcihyZWZlcmVuY2VFbGVtZW50LCBwb3BwZXJFbGVtZW50LCBfdGVtcCkge1xuICB2YXIgX3JlZjMgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYzJGVuYWJsZWQgPSBfcmVmMy5lbmFibGVkLFxuICAgICAgZW5hYmxlZCA9IF9yZWYzJGVuYWJsZWQgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMyRlbmFibGVkLFxuICAgICAgX3JlZjMkcGxhY2VtZW50ID0gX3JlZjMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZjMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyAnYm90dG9tJyA6IF9yZWYzJHBsYWNlbWVudCxcbiAgICAgIF9yZWYzJHN0cmF0ZWd5ID0gX3JlZjMuc3RyYXRlZ3ksXG4gICAgICBzdHJhdGVneSA9IF9yZWYzJHN0cmF0ZWd5ID09PSB2b2lkIDAgPyAnYWJzb2x1dGUnIDogX3JlZjMkc3RyYXRlZ3ksXG4gICAgICBfcmVmMyRtb2RpZmllcnMgPSBfcmVmMy5tb2RpZmllcnMsXG4gICAgICBtb2RpZmllcnMgPSBfcmVmMyRtb2RpZmllcnMgPT09IHZvaWQgMCA/IEVNUFRZX01PRElGSUVSUyA6IF9yZWYzJG1vZGlmaWVycyxcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJlbmFibGVkXCIsIFwicGxhY2VtZW50XCIsIFwic3RyYXRlZ3lcIiwgXCJtb2RpZmllcnNcIl0pO1xuXG4gIHZhciBwb3BwZXJJbnN0YW5jZVJlZiA9IHVzZVJlZigpO1xuICB2YXIgdXBkYXRlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcG9wcGVySW5zdGFuY2VSZWYkY3U7XG5cbiAgICAoX3BvcHBlckluc3RhbmNlUmVmJGN1ID0gcG9wcGVySW5zdGFuY2VSZWYuY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wb3BwZXJJbnN0YW5jZVJlZiRjdS51cGRhdGUoKTtcbiAgfSwgW10pO1xuICB2YXIgZm9yY2VVcGRhdGUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9wb3BwZXJJbnN0YW5jZVJlZiRjdTI7XG5cbiAgICAoX3BvcHBlckluc3RhbmNlUmVmJGN1MiA9IHBvcHBlckluc3RhbmNlUmVmLmN1cnJlbnQpID09IG51bGwgPyB2b2lkIDAgOiBfcG9wcGVySW5zdGFuY2VSZWYkY3UyLmZvcmNlVXBkYXRlKCk7XG4gIH0sIFtdKTtcblxuICB2YXIgX3VzZVNhZmVTdGF0ZSA9IHVzZVNhZmVTdGF0ZSh1c2VTdGF0ZSh7XG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgZm9yY2VVcGRhdGU6IGZvcmNlVXBkYXRlLFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIHN0eWxlczoge1xuICAgICAgcG9wcGVyOiBpbml0aWFsUG9wcGVyU3R5bGVzKHN0cmF0ZWd5KSxcbiAgICAgIGFycm93OiB7fVxuICAgIH1cbiAgfSkpLFxuICAgICAgcG9wcGVyU3RhdGUgPSBfdXNlU2FmZVN0YXRlWzBdLFxuICAgICAgc2V0U3RhdGUgPSBfdXNlU2FmZVN0YXRlWzFdO1xuXG4gIHZhciB1cGRhdGVNb2RpZmllciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAndXBkYXRlU3RhdGVNb2RpZmllcicsXG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgcGhhc2U6ICd3cml0ZScsXG4gICAgICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ10sXG4gICAgICBmbjogZnVuY3Rpb24gZm4oX3JlZjQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gX3JlZjQuc3RhdGU7XG4gICAgICAgIHZhciBzdHlsZXMgPSB7fTtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICBzdHlsZXNbZWxlbWVudF0gPSBzdGF0ZS5zdHlsZXNbZWxlbWVudF07XG4gICAgICAgICAgYXR0cmlidXRlc1tlbGVtZW50XSA9IHN0YXRlLmF0dHJpYnV0ZXNbZWxlbWVudF07XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICAgICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgICAgICAgZm9yY2VVcGRhdGU6IGZvcmNlVXBkYXRlLFxuICAgICAgICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFt1cGRhdGUsIGZvcmNlVXBkYXRlLCBzZXRTdGF0ZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghcG9wcGVySW5zdGFuY2VSZWYuY3VycmVudCB8fCAhZW5hYmxlZCkgcmV0dXJuO1xuICAgIHBvcHBlckluc3RhbmNlUmVmLmN1cnJlbnQuc2V0T3B0aW9ucyh7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIHN0cmF0ZWd5OiBzdHJhdGVneSxcbiAgICAgIG1vZGlmaWVyczogW10uY29uY2F0KG1vZGlmaWVycywgW3VwZGF0ZU1vZGlmaWVyLCBkaXNhYmxlZEFwcGx5U3R5bGVzTW9kaWZpZXJdKVxuICAgIH0pOyAvLyBpbnRlbnRpb25hbGx5IE5PVCByZS1ydW5uaW5nIG9uIG5ldyBtb2RpZmllcnNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtzdHJhdGVneSwgcGxhY2VtZW50LCB1cGRhdGVNb2RpZmllciwgZW5hYmxlZF0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghZW5hYmxlZCB8fCByZWZlcmVuY2VFbGVtZW50ID09IG51bGwgfHwgcG9wcGVyRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHBvcHBlckluc3RhbmNlUmVmLmN1cnJlbnQgPSBjcmVhdGVQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgcG9wcGVyRWxlbWVudCwgX2V4dGVuZHMoe30sIGNvbmZpZywge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBzdHJhdGVneTogc3RyYXRlZ3ksXG4gICAgICBtb2RpZmllcnM6IFtdLmNvbmNhdChtb2RpZmllcnMsIFthcmlhRGVzY3JpYmVkQnlNb2RpZmllciwgdXBkYXRlTW9kaWZpZXJdKVxuICAgIH0pKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHBvcHBlckluc3RhbmNlUmVmLmN1cnJlbnQgIT0gbnVsbCkge1xuICAgICAgICBwb3BwZXJJbnN0YW5jZVJlZi5jdXJyZW50LmRlc3Ryb3koKTtcbiAgICAgICAgcG9wcGVySW5zdGFuY2VSZWYuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgc2V0U3RhdGUoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHMsIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICAgICAgc3R5bGVzOiB7XG4gICAgICAgICAgICAgIHBvcHBlcjogaW5pdGlhbFBvcHBlclN0eWxlcyhzdHJhdGVneSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTsgLy8gVGhpcyBpcyBvbmx5IHJ1biBvbmNlIHRvIF9jcmVhdGVfIHRoZSBwb3BwZXJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtlbmFibGVkLCByZWZlcmVuY2VFbGVtZW50LCBwb3BwZXJFbGVtZW50XSk7XG4gIHJldHVybiBwb3BwZXJTdGF0ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlUG9wcGVyOyIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJldHVybi1hc3NpZ24gKi9cbmltcG9ydCBjYW5Vc2VET00gZnJvbSAnLi9jYW5Vc2VET00nO1xuZXhwb3J0IHZhciBvcHRpb25zU3VwcG9ydGVkID0gZmFsc2U7XG5leHBvcnQgdmFyIG9uY2VTdXBwb3J0ZWQgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgZ2V0IHBhc3NpdmUoKSB7XG4gICAgICByZXR1cm4gb3B0aW9uc1N1cHBvcnRlZCA9IHRydWU7XG4gICAgfSxcblxuICAgIGdldCBvbmNlKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW11bHRpLWFzc2lnblxuICAgICAgcmV0dXJuIG9uY2VTdXBwb3J0ZWQgPSBvcHRpb25zU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgfTtcblxuICBpZiAoY2FuVXNlRE9NKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBvcHRpb25zLCBvcHRpb25zKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIHRydWUpO1xuICB9XG59IGNhdGNoIChlKSB7XG4gIC8qICovXG59XG5cbi8qKlxuICogQW4gYGFkZEV2ZW50TGlzdGVuZXJgIHBvbnlmaWxsLCBzdXBwb3J0cyB0aGUgYG9uY2VgIG9wdGlvblxuICogXG4gKiBAcGFyYW0gbm9kZSB0aGUgZWxlbWVudFxuICogQHBhcmFtIGV2ZW50TmFtZSB0aGUgZXZlbnQgbmFtZVxuICogQHBhcmFtIGhhbmRsZSB0aGUgaGFuZGxlclxuICogQHBhcmFtIG9wdGlvbnMgZXZlbnQgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucyAhPT0gJ2Jvb2xlYW4nICYmICFvbmNlU3VwcG9ydGVkKSB7XG4gICAgdmFyIG9uY2UgPSBvcHRpb25zLm9uY2UsXG4gICAgICAgIGNhcHR1cmUgPSBvcHRpb25zLmNhcHR1cmU7XG4gICAgdmFyIHdyYXBwZWRIYW5kbGVyID0gaGFuZGxlcjtcblxuICAgIGlmICghb25jZVN1cHBvcnRlZCAmJiBvbmNlKSB7XG4gICAgICB3cmFwcGVkSGFuZGxlciA9IGhhbmRsZXIuX19vbmNlIHx8IGZ1bmN0aW9uIG9uY2VIYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uY2VIYW5kbGVyLCBjYXB0dXJlKTtcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgIH07XG5cbiAgICAgIGhhbmRsZXIuX19vbmNlID0gd3JhcHBlZEhhbmRsZXI7XG4gICAgfVxuXG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgd3JhcHBlZEhhbmRsZXIsIG9wdGlvbnNTdXBwb3J0ZWQgPyBvcHRpb25zIDogY2FwdHVyZSk7XG4gIH1cblxuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYWRkRXZlbnRMaXN0ZW5lcjsiLCIvKipcbiAqIEEgYHJlbW92ZUV2ZW50TGlzdGVuZXJgIHBvbnlmaWxsXG4gKiBcbiAqIEBwYXJhbSBub2RlIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0gZXZlbnROYW1lIHRoZSBldmVudCBuYW1lXG4gKiBAcGFyYW0gaGFuZGxlIHRoZSBoYW5kbGVyXG4gKiBAcGFyYW0gb3B0aW9ucyBldmVudCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gIHZhciBjYXB0dXJlID0gb3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucyAhPT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5jYXB0dXJlIDogb3B0aW9ucztcbiAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSk7XG5cbiAgaWYgKGhhbmRsZXIuX19vbmNlKSB7XG4gICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlci5fX29uY2UsIGNhcHR1cmUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbW92ZUV2ZW50TGlzdGVuZXI7IiwiaW1wb3J0IGFkZEV2ZW50TGlzdGVuZXIgZnJvbSAnLi9hZGRFdmVudExpc3RlbmVyJztcbmltcG9ydCByZW1vdmVFdmVudExpc3RlbmVyIGZyb20gJy4vcmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG5cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdGVuOyIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBDcmVhdGVzIGEgYFJlZmAgd2hvc2UgdmFsdWUgaXMgdXBkYXRlZCBpbiBhbiBlZmZlY3QsIGVuc3VyaW5nIHRoZSBtb3N0IHJlY2VudFxuICogdmFsdWUgaXMgdGhlIG9uZSByZW5kZXJlZCB3aXRoLiBHZW5lcmFsbHkgb25seSByZXF1aXJlZCBmb3IgQ29uY3VycmVudCBtb2RlIHVzYWdlXG4gKiB3aGVyZSBwcmV2aW91cyB3b3JrIGluIGByZW5kZXIoKWAgbWF5IGJlIGRpc2NhcmRlZCBiZWZvciBiZWluZyB1c2VkLlxuICpcbiAqIFRoaXMgaXMgc2FmZSB0byBhY2Nlc3MgaW4gYW4gZXZlbnQgaGFuZGxlci5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIGBSZWZgIHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29tbWl0dGVkUmVmKHZhbHVlKSB7XG4gIHZhciByZWYgPSB1c2VSZWYodmFsdWUpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH0sIFt2YWx1ZV0pO1xuICByZXR1cm4gcmVmO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VDb21taXR0ZWRSZWY7IiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlQ29tbWl0dGVkUmVmIGZyb20gJy4vdXNlQ29tbWl0dGVkUmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgdmFyIHJlZiA9IHVzZUNvbW1pdHRlZFJlZihmbik7XG4gIHJldHVybiB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlZi5jdXJyZW50ICYmIHJlZi5jdXJyZW50LmFwcGx5KHJlZiwgYXJndW1lbnRzKTtcbiAgfSwgW3JlZl0pO1xufSIsImltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2FmZUZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCkge1xuICBpZiAoY29tcG9uZW50T3JFbGVtZW50ICYmICdzZXRTdGF0ZScgaW4gY29tcG9uZW50T3JFbGVtZW50KSB7XG4gICAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50ICE9IG51bGwgPyBjb21wb25lbnRPckVsZW1lbnQgOiBudWxsO1xufSIsImltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJ2RvbS1oZWxwZXJzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IHNhZmVGaW5kRE9NTm9kZSBmcm9tICcuL3NhZmVGaW5kRE9NTm9kZSc7XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGNvbXBvbmVudE9yRWxlbWVudCkge1xuICByZXR1cm4gb3duZXJEb2N1bWVudChzYWZlRmluZERPTU5vZGUoY29tcG9uZW50T3JFbGVtZW50KSk7XG59KTsiLCJpbXBvcnQgY29udGFpbnMgZnJvbSAnZG9tLWhlbHBlcnMvY29udGFpbnMnO1xuaW1wb3J0IGxpc3RlbiBmcm9tICdkb20taGVscGVycy9saXN0ZW4nO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnQHJlc3RhcnQvaG9va3MvdXNlRXZlbnRDYWxsYmFjayc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4vb3duZXJEb2N1bWVudCc7XG52YXIgZXNjYXBlS2V5Q29kZSA9IDI3O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuZnVuY3Rpb24gaXNMZWZ0Q2xpY2tFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgZ2V0UmVmVGFyZ2V0ID0gZnVuY3Rpb24gZ2V0UmVmVGFyZ2V0KHJlZikge1xuICByZXR1cm4gcmVmICYmICgnY3VycmVudCcgaW4gcmVmID8gcmVmLmN1cnJlbnQgOiByZWYpO1xufTtcblxuLyoqXG4gKiBUaGUgYHVzZVJvb3RDbG9zZWAgaG9vayByZWdpc3RlcnMgeW91ciBjYWxsYmFjayBvbiB0aGUgZG9jdW1lbnRcbiAqIHdoZW4gcmVuZGVyZWQuIFBvd2VycyB0aGUgYDxPdmVybGF5Lz5gIGNvbXBvbmVudC4gVGhpcyBpcyB1c2VkIGFjaGlldmUgbW9kYWxcbiAqIHN0eWxlIGJlaGF2aW9yIHdoZXJlIHlvdXIgY2FsbGJhY2sgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgdHJpZXMgdG9cbiAqIGludGVyYWN0IHdpdGggdGhlIHJlc3Qgb2YgdGhlIGRvY3VtZW50IG9yIGhpdHMgdGhlIGBlc2NgIGtleS5cbiAqXG4gKiBAcGFyYW0ge1JlZjxIVE1MRWxlbWVudD58IEhUTUxFbGVtZW50fSByZWYgIFRoZSBlbGVtZW50IGJvdW5kYXJ5XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvblJvb3RDbG9zZVxuICogQHBhcmFtIHtvYmplY3Q9fSAgb3B0aW9uc1xuICogQHBhcmFtIHtib29sZWFuPX0gb3B0aW9ucy5kaXNhYmxlZFxuICogQHBhcmFtIHtzdHJpbmc9fSAgb3B0aW9ucy5jbGlja1RyaWdnZXIgVGhlIERPTSBldmVudCBuYW1lIChjbGljaywgbW91c2Vkb3duLCBldGMpIHRvIGF0dGFjaCBsaXN0ZW5lcnMgb25cbiAqL1xuZnVuY3Rpb24gdXNlUm9vdENsb3NlKHJlZiwgb25Sb290Q2xvc2UsIF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQsXG4gICAgICBfcmVmJGNsaWNrVHJpZ2dlciA9IF9yZWYuY2xpY2tUcmlnZ2VyLFxuICAgICAgY2xpY2tUcmlnZ2VyID0gX3JlZiRjbGlja1RyaWdnZXIgPT09IHZvaWQgMCA/ICdjbGljaycgOiBfcmVmJGNsaWNrVHJpZ2dlcjtcblxuICB2YXIgcHJldmVudE1vdXNlUm9vdENsb3NlUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgdmFyIG9uQ2xvc2UgPSBvblJvb3RDbG9zZSB8fCBub29wO1xuICB2YXIgaGFuZGxlTW91c2VDYXB0dXJlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgY3VycmVudFRhcmdldCA9IGdldFJlZlRhcmdldChyZWYpO1xuICAgIHdhcm5pbmcoISFjdXJyZW50VGFyZ2V0LCAnUm9vdENsb3NlIGNhcHR1cmVkIGEgY2xvc2UgZXZlbnQgYnV0IGRvZXMgbm90IGhhdmUgYSByZWYgdG8gY29tcGFyZSBpdCB0by4gJyArICd1c2VSb290Q2xvc2UoKSwgc2hvdWxkIGJlIHBhc3NlZCBhIHJlZiB0aGF0IHJlc29sdmVzIHRvIGEgRE9NIG5vZGUnKTtcbiAgICBwcmV2ZW50TW91c2VSb290Q2xvc2VSZWYuY3VycmVudCA9ICFjdXJyZW50VGFyZ2V0IHx8IGlzTW9kaWZpZWRFdmVudChlKSB8fCAhaXNMZWZ0Q2xpY2tFdmVudChlKSB8fCAhIWNvbnRhaW5zKGN1cnJlbnRUYXJnZXQsIGUudGFyZ2V0KTtcbiAgfSwgW3JlZl0pO1xuICB2YXIgaGFuZGxlTW91c2UgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCFwcmV2ZW50TW91c2VSb290Q2xvc2VSZWYuY3VycmVudCkge1xuICAgICAgb25DbG9zZShlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlS2V5VXAgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gZXNjYXBlS2V5Q29kZSkge1xuICAgICAgb25DbG9zZShlKTtcbiAgICB9XG4gIH0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChkaXNhYmxlZCB8fCByZWYgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDsgLy8gU3RvcmUgdGhlIGN1cnJlbnQgZXZlbnQgdG8gYXZvaWQgdHJpZ2dlcmluZyBoYW5kbGVycyBpbW1lZGlhdGVseVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMjAwNzRcblxuICAgIHZhciBjdXJyZW50RXZlbnQgPSB3aW5kb3cuZXZlbnQ7XG4gICAgdmFyIGRvYyA9IG93bmVyRG9jdW1lbnQoZ2V0UmVmVGFyZ2V0KHJlZikpOyAvLyBVc2UgY2FwdHVyZSBmb3IgdGhpcyBsaXN0ZW5lciBzbyBpdCBmaXJlcyBiZWZvcmUgUmVhY3QncyBsaXN0ZW5lciwgdG9cbiAgICAvLyBhdm9pZCBmYWxzZSBwb3NpdGl2ZXMgaW4gdGhlIGNvbnRhaW5zKCkgY2hlY2sgYmVsb3cgaWYgdGhlIHRhcmdldCBET01cbiAgICAvLyBlbGVtZW50IGlzIHJlbW92ZWQgaW4gdGhlIFJlYWN0IG1vdXNlIGNhbGxiYWNrLlxuXG4gICAgdmFyIHJlbW92ZU1vdXNlQ2FwdHVyZUxpc3RlbmVyID0gbGlzdGVuKGRvYywgY2xpY2tUcmlnZ2VyLCBoYW5kbGVNb3VzZUNhcHR1cmUsIHRydWUpO1xuICAgIHZhciByZW1vdmVNb3VzZUxpc3RlbmVyID0gbGlzdGVuKGRvYywgY2xpY2tUcmlnZ2VyLCBmdW5jdGlvbiAoZSkge1xuICAgICAgLy8gc2tpcCBpZiB0aGlzIGV2ZW50IGlzIHRoZSBzYW1lIGFzIHRoZSBvbmUgcnVubmluZyB3aGVuIHdlIGFkZGVkIHRoZSBoYW5kbGVyc1xuICAgICAgaWYgKGUgPT09IGN1cnJlbnRFdmVudCkge1xuICAgICAgICBjdXJyZW50RXZlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlTW91c2UoZSk7XG4gICAgfSk7XG4gICAgdmFyIHJlbW92ZUtleXVwTGlzdGVuZXIgPSBsaXN0ZW4oZG9jLCAna2V5dXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgLy8gc2tpcCBpZiB0aGlzIGV2ZW50IGlzIHRoZSBzYW1lIGFzIHRoZSBvbmUgcnVubmluZyB3aGVuIHdlIGFkZGVkIHRoZSBoYW5kbGVyc1xuICAgICAgaWYgKGUgPT09IGN1cnJlbnRFdmVudCkge1xuICAgICAgICBjdXJyZW50RXZlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlS2V5VXAoZSk7XG4gICAgfSk7XG4gICAgdmFyIG1vYmlsZVNhZmFyaUhhY2tMaXN0ZW5lcnMgPSBbXTtcblxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2MuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBtb2JpbGVTYWZhcmlIYWNrTGlzdGVuZXJzID0gW10uc2xpY2UuY2FsbChkb2MuYm9keS5jaGlsZHJlbikubWFwKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gbGlzdGVuKGVsLCAnbW91c2Vtb3ZlJywgbm9vcCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlTW91c2VDYXB0dXJlTGlzdGVuZXIoKTtcbiAgICAgIHJlbW92ZU1vdXNlTGlzdGVuZXIoKTtcbiAgICAgIHJlbW92ZUtleXVwTGlzdGVuZXIoKTtcbiAgICAgIG1vYmlsZVNhZmFyaUhhY2tMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAocmVtb3ZlKSB7XG4gICAgICAgIHJldHVybiByZW1vdmUoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0sIFtyZWYsIGRpc2FibGVkLCBjbGlja1RyaWdnZXIsIGhhbmRsZU1vdXNlQ2FwdHVyZSwgaGFuZGxlTW91c2UsIGhhbmRsZUtleVVwXSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVJvb3RDbG9zZTsiLCJpbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICdkb20taGVscGVycy9vd25lckRvY3VtZW50JztcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIHJlc29sdmVDb250YWluZXJSZWYgPSBmdW5jdGlvbiByZXNvbHZlQ29udGFpbmVyUmVmKHJlZikge1xuICB2YXIgX3JlZjtcblxuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIG51bGw7XG4gIGlmIChyZWYgPT0gbnVsbCkgcmV0dXJuIG93bmVyRG9jdW1lbnQoKS5ib2R5O1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykgcmVmID0gcmVmKCk7XG4gIGlmIChyZWYgJiYgJ2N1cnJlbnQnIGluIHJlZikgcmVmID0gcmVmLmN1cnJlbnQ7XG4gIGlmICgoX3JlZiA9IHJlZikgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZWYubm9kZVR5cGUpIHJldHVybiByZWYgfHwgbnVsbDtcbiAgcmV0dXJuIG51bGw7XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlV2FpdEZvckRPTVJlZihyZWYsIG9uUmVzb2x2ZWQpIHtcbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUNvbnRhaW5lclJlZihyZWYpO1xuICB9KSxcbiAgICAgIHJlc29sdmVkUmVmID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0UmVmID0gX3VzZVN0YXRlWzFdO1xuXG4gIGlmICghcmVzb2x2ZWRSZWYpIHtcbiAgICB2YXIgZWFybHlSZWYgPSByZXNvbHZlQ29udGFpbmVyUmVmKHJlZik7XG4gICAgaWYgKGVhcmx5UmVmKSBzZXRSZWYoZWFybHlSZWYpO1xuICB9XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAob25SZXNvbHZlZCAmJiByZXNvbHZlZFJlZikge1xuICAgICAgb25SZXNvbHZlZChyZXNvbHZlZFJlZik7XG4gICAgfVxuICB9LCBbb25SZXNvbHZlZCwgcmVzb2x2ZWRSZWZdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmV4dFJlZiA9IHJlc29sdmVDb250YWluZXJSZWYocmVmKTtcblxuICAgIGlmIChuZXh0UmVmICE9PSByZXNvbHZlZFJlZikge1xuICAgICAgc2V0UmVmKG5leHRSZWYpO1xuICAgIH1cbiAgfSwgW3JlZiwgcmVzb2x2ZWRSZWZdKTtcbiAgcmV0dXJuIHJlc29sdmVkUmVmO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHRvTW9kaWZpZXJNYXAobW9kaWZpZXJzKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkobW9kaWZpZXJzKSkge1xuICAgIHJldHVybiBtb2RpZmllcnMgfHwgcmVzdWx0O1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblxuXG4gIG1vZGlmaWVycyA9PSBudWxsID8gdm9pZCAwIDogbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICByZXN1bHRbbS5uYW1lXSA9IG07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvTW9kaWZpZXJBcnJheShtYXApIHtcbiAgaWYgKG1hcCA9PT0gdm9pZCAwKSB7XG4gICAgbWFwID0ge307XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShtYXApKSByZXR1cm4gbWFwO1xuICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICBtYXBba10ubmFtZSA9IGs7XG4gICAgcmV0dXJuIG1hcFtrXTtcbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZU9wdGlvbnNXaXRoUG9wcGVyQ29uZmlnKF9yZWYpIHtcbiAgdmFyIF9tb2RpZmllcnMkcHJldmVudE92ZSwgX21vZGlmaWVycyRwcmV2ZW50T3ZlMiwgX21vZGlmaWVycyRvZmZzZXQsIF9tb2RpZmllcnMkYXJyb3c7XG5cbiAgdmFyIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQsXG4gICAgICBlbmFibGVFdmVudHMgPSBfcmVmLmVuYWJsZUV2ZW50cyxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYucGxhY2VtZW50LFxuICAgICAgZmxpcCA9IF9yZWYuZmxpcCxcbiAgICAgIG9mZnNldCA9IF9yZWYub2Zmc2V0LFxuICAgICAgY29udGFpbmVyUGFkZGluZyA9IF9yZWYuY29udGFpbmVyUGFkZGluZyxcbiAgICAgIGFycm93RWxlbWVudCA9IF9yZWYuYXJyb3dFbGVtZW50LFxuICAgICAgX3JlZiRwb3BwZXJDb25maWcgPSBfcmVmLnBvcHBlckNvbmZpZyxcbiAgICAgIHBvcHBlckNvbmZpZyA9IF9yZWYkcG9wcGVyQ29uZmlnID09PSB2b2lkIDAgPyB7fSA6IF9yZWYkcG9wcGVyQ29uZmlnO1xuICB2YXIgbW9kaWZpZXJzID0gdG9Nb2RpZmllck1hcChwb3BwZXJDb25maWcubW9kaWZpZXJzKTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBwb3BwZXJDb25maWcsIHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICBlbmFibGVkOiBlbmFibGVkLFxuICAgIG1vZGlmaWVyczogdG9Nb2RpZmllckFycmF5KF9leHRlbmRzKHt9LCBtb2RpZmllcnMsIHtcbiAgICAgIGV2ZW50TGlzdGVuZXJzOiB7XG4gICAgICAgIGVuYWJsZWQ6IGVuYWJsZUV2ZW50c1xuICAgICAgfSxcbiAgICAgIHByZXZlbnRPdmVyZmxvdzogX2V4dGVuZHMoe30sIG1vZGlmaWVycy5wcmV2ZW50T3ZlcmZsb3csIHtcbiAgICAgICAgb3B0aW9uczogY29udGFpbmVyUGFkZGluZyA/IF9leHRlbmRzKHtcbiAgICAgICAgICBwYWRkaW5nOiBjb250YWluZXJQYWRkaW5nXG4gICAgICAgIH0sIChfbW9kaWZpZXJzJHByZXZlbnRPdmUgPSBtb2RpZmllcnMucHJldmVudE92ZXJmbG93KSA9PSBudWxsID8gdm9pZCAwIDogX21vZGlmaWVycyRwcmV2ZW50T3ZlLm9wdGlvbnMpIDogKF9tb2RpZmllcnMkcHJldmVudE92ZTIgPSBtb2RpZmllcnMucHJldmVudE92ZXJmbG93KSA9PSBudWxsID8gdm9pZCAwIDogX21vZGlmaWVycyRwcmV2ZW50T3ZlMi5vcHRpb25zXG4gICAgICB9KSxcbiAgICAgIG9mZnNldDoge1xuICAgICAgICBvcHRpb25zOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXRcbiAgICAgICAgfSwgKF9tb2RpZmllcnMkb2Zmc2V0ID0gbW9kaWZpZXJzLm9mZnNldCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9tb2RpZmllcnMkb2Zmc2V0Lm9wdGlvbnMpXG4gICAgICB9LFxuICAgICAgYXJyb3c6IF9leHRlbmRzKHt9LCBtb2RpZmllcnMuYXJyb3csIHtcbiAgICAgICAgZW5hYmxlZDogISFhcnJvd0VsZW1lbnQsXG4gICAgICAgIG9wdGlvbnM6IF9leHRlbmRzKHt9LCAoX21vZGlmaWVycyRhcnJvdyA9IG1vZGlmaWVycy5hcnJvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF9tb2RpZmllcnMkYXJyb3cub3B0aW9ucywge1xuICAgICAgICAgIGVsZW1lbnQ6IGFycm93RWxlbWVudFxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICBmbGlwOiBfZXh0ZW5kcyh7XG4gICAgICAgIGVuYWJsZWQ6ICEhZmxpcFxuICAgICAgfSwgbW9kaWZpZXJzLmZsaXApXG4gICAgfSkpXG4gIH0pO1xufSIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIik7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGc9NjAxMDM7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgaD1TeW1ib2wuZm9yO2c9aChcInJlYWN0LmVsZW1lbnRcIik7ZXhwb3J0cy5GcmFnbWVudD1oKFwicmVhY3QuZnJhZ21lbnRcIil9dmFyIG09Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixuPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsayl7dmFyIGIsZD17fSxlPW51bGwsbD1udWxsO3ZvaWQgMCE9PWsmJihlPVwiXCIrayk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYobD1hLnJlZik7Zm9yKGIgaW4gYSluLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6Zyx0eXBlOmMsa2V5OmUscmVmOmwscHJvcHM6ZCxfb3duZXI6bS5jdXJyZW50fX1leHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgKiBhcyBqc3hSdW50aW1lIGZyb20gXCJFOlxcXFxvYmRldlxcXFwub2JzaWRpYW5cXFxccGx1Z2luc1xcXFxPYnNpZGlhbi1CaWctQ2FsZW5kYXJcXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0XFxcXGpzeC1ydW50aW1lLmpzXCJcbmV4cG9ydCBjb25zdCBqc3ggPSBqc3hSdW50aW1lLmpzeFxuZXhwb3J0IGNvbnN0IGpzeHMgPSBqc3hSdW50aW1lLmpzeHNcbmV4cG9ydCBjb25zdCBGcmFnbWVudCA9IGpzeFJ1bnRpbWUuRnJhZ21lbnQiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHVzZUNhbGxiYWNrUmVmIGZyb20gJ0ByZXN0YXJ0L2hvb2tzL3VzZUNhbGxiYWNrUmVmJztcbmltcG9ydCB1c2VNZXJnZWRSZWZzIGZyb20gJ0ByZXN0YXJ0L2hvb2tzL3VzZU1lcmdlZFJlZnMnO1xuaW1wb3J0IHsgcGxhY2VtZW50cyB9IGZyb20gJy4vcG9wcGVyJztcbmltcG9ydCB1c2VQb3BwZXIgZnJvbSAnLi91c2VQb3BwZXInO1xuaW1wb3J0IHVzZVJvb3RDbG9zZSBmcm9tICcuL3VzZVJvb3RDbG9zZSc7XG5pbXBvcnQgdXNlV2FpdEZvckRPTVJlZiBmcm9tICcuL3VzZVdhaXRGb3JET01SZWYnO1xuaW1wb3J0IG1lcmdlT3B0aW9uc1dpdGhQb3BwZXJDb25maWcgZnJvbSAnLi9tZXJnZU9wdGlvbnNXaXRoUG9wcGVyQ29uZmlnJztcblxuLyoqXG4gKiBCdWlsdCBvbiB0b3Agb2YgYFBvcHBlci5qc2AsIHRoZSBvdmVybGF5IGNvbXBvbmVudCBpc1xuICogZ3JlYXQgZm9yIGN1c3RvbSB0b29sdGlwIG92ZXJsYXlzLlxuICovXG52YXIgT3ZlcmxheSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgb3V0ZXJSZWYpIHtcbiAgdmFyIGZsaXAgPSBwcm9wcy5mbGlwLFxuICAgICAgb2Zmc2V0ID0gcHJvcHMub2Zmc2V0LFxuICAgICAgcGxhY2VtZW50ID0gcHJvcHMucGxhY2VtZW50LFxuICAgICAgX3Byb3BzJGNvbnRhaW5lclBhZGRpID0gcHJvcHMuY29udGFpbmVyUGFkZGluZyxcbiAgICAgIGNvbnRhaW5lclBhZGRpbmcgPSBfcHJvcHMkY29udGFpbmVyUGFkZGkgPT09IHZvaWQgMCA/IDUgOiBfcHJvcHMkY29udGFpbmVyUGFkZGksXG4gICAgICBfcHJvcHMkcG9wcGVyQ29uZmlnID0gcHJvcHMucG9wcGVyQ29uZmlnLFxuICAgICAgcG9wcGVyQ29uZmlnID0gX3Byb3BzJHBvcHBlckNvbmZpZyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkcG9wcGVyQ29uZmlnLFxuICAgICAgVHJhbnNpdGlvbiA9IHByb3BzLnRyYW5zaXRpb247XG5cbiAgdmFyIF91c2VDYWxsYmFja1JlZiA9IHVzZUNhbGxiYWNrUmVmKCksXG4gICAgICByb290RWxlbWVudCA9IF91c2VDYWxsYmFja1JlZlswXSxcbiAgICAgIGF0dGFjaFJlZiA9IF91c2VDYWxsYmFja1JlZlsxXTtcblxuICB2YXIgX3VzZUNhbGxiYWNrUmVmMiA9IHVzZUNhbGxiYWNrUmVmKCksXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfdXNlQ2FsbGJhY2tSZWYyWzBdLFxuICAgICAgYXR0YWNoQXJyb3dSZWYgPSBfdXNlQ2FsbGJhY2tSZWYyWzFdO1xuXG4gIHZhciBtZXJnZWRSZWYgPSB1c2VNZXJnZWRSZWZzKGF0dGFjaFJlZiwgb3V0ZXJSZWYpO1xuICB2YXIgY29udGFpbmVyID0gdXNlV2FpdEZvckRPTVJlZihwcm9wcy5jb250YWluZXIpO1xuICB2YXIgdGFyZ2V0ID0gdXNlV2FpdEZvckRPTVJlZihwcm9wcy50YXJnZXQpO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSghcHJvcHMuc2hvdyksXG4gICAgICBleGl0ZWQgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBzZXRFeGl0ZWQgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIF91c2VQb3BwZXIgPSB1c2VQb3BwZXIodGFyZ2V0LCByb290RWxlbWVudCwgbWVyZ2VPcHRpb25zV2l0aFBvcHBlckNvbmZpZyh7XG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgZW5hYmxlRXZlbnRzOiAhIXByb3BzLnNob3csXG4gICAgY29udGFpbmVyUGFkZGluZzogY29udGFpbmVyUGFkZGluZyB8fCA1LFxuICAgIGZsaXA6IGZsaXAsXG4gICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgYXJyb3dFbGVtZW50OiBhcnJvd0VsZW1lbnQsXG4gICAgcG9wcGVyQ29uZmlnOiBwb3BwZXJDb25maWdcbiAgfSkpLFxuICAgICAgc3R5bGVzID0gX3VzZVBvcHBlci5zdHlsZXMsXG4gICAgICBhdHRyaWJ1dGVzID0gX3VzZVBvcHBlci5hdHRyaWJ1dGVzLFxuICAgICAgcG9wcGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3VzZVBvcHBlciwgW1wic3R5bGVzXCIsIFwiYXR0cmlidXRlc1wiXSk7XG5cbiAgaWYgKHByb3BzLnNob3cpIHtcbiAgICBpZiAoZXhpdGVkKSBzZXRFeGl0ZWQoZmFsc2UpO1xuICB9IGVsc2UgaWYgKCFwcm9wcy50cmFuc2l0aW9uICYmICFleGl0ZWQpIHtcbiAgICBzZXRFeGl0ZWQodHJ1ZSk7XG4gIH1cblxuICB2YXIgaGFuZGxlSGlkZGVuID0gZnVuY3Rpb24gaGFuZGxlSGlkZGVuKCkge1xuICAgIHNldEV4aXRlZCh0cnVlKTtcblxuICAgIGlmIChwcm9wcy5vbkV4aXRlZCkge1xuICAgICAgcHJvcHMub25FeGl0ZWQuYXBwbHkocHJvcHMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9OyAvLyBEb24ndCB1bi1yZW5kZXIgdGhlIG92ZXJsYXkgd2hpbGUgaXQncyB0cmFuc2l0aW9uaW5nIG91dC5cblxuXG4gIHZhciBtb3VudE92ZXJsYXkgPSBwcm9wcy5zaG93IHx8IFRyYW5zaXRpb24gJiYgIWV4aXRlZDtcbiAgdXNlUm9vdENsb3NlKHJvb3RFbGVtZW50LCBwcm9wcy5vbkhpZGUsIHtcbiAgICBkaXNhYmxlZDogIXByb3BzLnJvb3RDbG9zZSB8fCBwcm9wcy5yb290Q2xvc2VEaXNhYmxlZCxcbiAgICBjbGlja1RyaWdnZXI6IHByb3BzLnJvb3RDbG9zZUV2ZW50XG4gIH0pO1xuXG4gIGlmICghbW91bnRPdmVybGF5KSB7XG4gICAgLy8gRG9uJ3QgYm90aGVyIHNob3dpbmcgYW55dGhpbmcgaWYgd2UgZG9uJ3QgaGF2ZSB0by5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBjaGlsZCA9IHByb3BzLmNoaWxkcmVuKF9leHRlbmRzKHt9LCBwb3BwZXIsIHtcbiAgICBzaG93OiAhIXByb3BzLnNob3csXG4gICAgcHJvcHM6IF9leHRlbmRzKHt9LCBhdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICAgc3R5bGU6IHN0eWxlcy5wb3BwZXIsXG4gICAgICByZWY6IG1lcmdlZFJlZlxuICAgIH0pLFxuICAgIGFycm93UHJvcHM6IF9leHRlbmRzKHt9LCBhdHRyaWJ1dGVzLmFycm93LCB7XG4gICAgICBzdHlsZTogc3R5bGVzLmFycm93LFxuICAgICAgcmVmOiBhdHRhY2hBcnJvd1JlZlxuICAgIH0pXG4gIH0pKTtcblxuICBpZiAoVHJhbnNpdGlvbikge1xuICAgIHZhciBvbkV4aXQgPSBwcm9wcy5vbkV4aXQsXG4gICAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgICBvbkVudGVyZWQgPSBwcm9wcy5vbkVudGVyZWQ7XG4gICAgY2hpbGQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCB7XG4gICAgICBcImluXCI6IHByb3BzLnNob3csXG4gICAgICBhcHBlYXI6IHRydWUsXG4gICAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgICAgb25FeGl0ZWQ6IGhhbmRsZUhpZGRlbixcbiAgICAgIG9uRW50ZXI6IG9uRW50ZXIsXG4gICAgICBvbkVudGVyaW5nOiBvbkVudGVyaW5nLFxuICAgICAgb25FbnRlcmVkOiBvbkVudGVyZWRcbiAgICB9LCBjaGlsZCk7XG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyID8gLyojX19QVVJFX18qL1JlYWN0RE9NLmNyZWF0ZVBvcnRhbChjaGlsZCwgY29udGFpbmVyKSA6IG51bGw7XG59KTtcbk92ZXJsYXkuZGlzcGxheU5hbWUgPSAnT3ZlcmxheSc7XG5PdmVybGF5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldCB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgT3ZlcmxheVxuICAgKi9cbiAgc2hvdzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNwZWNpZnkgd2hlcmUgdGhlIG92ZXJsYXkgZWxlbWVudCBpcyBwb3NpdGlvbmVkIGluIHJlbGF0aW9uIHRvIHRoZSB0YXJnZXQgZWxlbWVudCAqL1xuICBwbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihwbGFjZW1lbnRzKSxcblxuICAvKipcbiAgICogQSBET00gRWxlbWVudCwgUmVmIHRvIGFuIGVsZW1lbnQsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuIFRoZSBgdGFyZ2V0YCBlbGVtZW50IGlzIHdoZXJlXG4gICAqIHRoZSBvdmVybGF5IGlzIHBvc2l0aW9uZWQgcmVsYXRpdmUgdG8uXG4gICAqL1xuICB0YXJnZXQ6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEEgRE9NIEVsZW1lbnQsIFJlZiB0byBhbiBlbGVtZW50LCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBQb3J0YWwgY2hpbGRyZW5cbiAgICogYXBwZW5kZWQgdG8gaXQuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgdGhlIFBvcHBlci5qcyBgZmxpcGAgbW9kaWZpZXIsIGFsbG93aW5nIHRoZSBPdmVybGF5IHRvXG4gICAqIGF1dG9tYXRpY2FsbHkgYWRqdXN0IGl0J3MgcGxhY2VtZW50IGluIGNhc2Ugb2Ygb3ZlcmxhcCB3aXRoIHRoZSB2aWV3cG9ydCBvciB0b2dnbGUuXG4gICAqIFJlZmVyIHRvIHRoZSBbZmxpcCBkb2NzXShodHRwczovL3BvcHBlci5qcy5vcmcvcG9wcGVyLWRvY3VtZW50YXRpb24uaHRtbCNtb2RpZmllcnMuLmZsaXAuZW5hYmxlZCkgZm9yIG1vcmUgaW5mb1xuICAgKi9cbiAgZmxpcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgcmVuZGVyIHByb3AgdGhhdCByZXR1cm5zIGFuIGVsZW1lbnQgdG8gb3ZlcmxheSBhbmQgcG9zaXRpb24uIFNlZVxuICAgKiB0aGUgW3JlYWN0LXBvcHBlciBkb2N1bWVudGF0aW9uXShodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3JlYWN0LXBvcHBlciNjaGlsZHJlbikgZm9yIG1vcmUgaW5mby5cbiAgICpcbiAgICogQHR5cGUge0Z1bmN0aW9uICh7XG4gICAqICAgc2hvdzogYm9vbGVhbixcbiAgICogICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgICogICB1cGRhdGU6ICgpID0+IHZvaWQsXG4gICAqICAgZm9yY2VVcGRhdGU6ICgpID0+IHZvaWQsXG4gICAqICAgcHJvcHM6IHtcbiAgICogICAgIHJlZjogKD9IVE1MRWxlbWVudCkgPT4gdm9pZCxcbiAgICogICAgIHN0eWxlOiB7IFtzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfSxcbiAgICogICAgIGFyaWEtbGFiZWxsZWRieTogP3N0cmluZ1xuICAgKiAgICAgW3N0cmluZ106IHN0cmluZyB8IG51bWJlcixcbiAgICogICB9LFxuICAgKiAgIGFycm93UHJvcHM6IHtcbiAgICogICAgIHJlZjogKD9IVE1MRWxlbWVudCkgPT4gdm9pZCxcbiAgICogICAgIHN0eWxlOiB7IFtzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfSxcbiAgICogICAgIFtzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIsXG4gICAqICAgfSxcbiAgICogfSkgPT4gUmVhY3QuRWxlbWVudH1cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBDb250cm9sIGhvdyBtdWNoIHNwYWNlIHRoZXJlIGlzIGJldHdlZW4gdGhlIGVkZ2Ugb2YgdGhlIGJvdW5kYXJ5IGVsZW1lbnQgYW5kIG92ZXJsYXkuXG4gICAqIEEgY29udmVuaWVuY2Ugc2hvcnRjdXQgdG8gc2V0dGluZyBgcG9wcGVyQ29uZmlnLm1vZGZpZXJzLnByZXZlbnRPdmVyZmxvdy5wYWRkaW5nYFxuICAgKi9cbiAgY29udGFpbmVyUGFkZGluZzogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQSBzZXQgb2YgcG9wcGVyIG9wdGlvbnMgYW5kIHByb3BzIHBhc3NlZCBkaXJlY3RseSB0byByZWFjdC1wb3BwZXIncyBQb3BwZXIgY29tcG9uZW50LlxuICAgKi9cbiAgcG9wcGVyQ29uZmlnOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoZXRoZXIgdGhlIG92ZXJsYXkgc2hvdWxkIHRyaWdnZXIgYG9uSGlkZWAgd2hlbiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSB0aGUgb3ZlcmxheVxuICAgKi9cbiAgcm9vdENsb3NlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogU3BlY2lmeSBldmVudCBmb3IgdG9nZ2xpbmcgb3ZlcmxheVxuICAgKi9cbiAgcm9vdENsb3NlRXZlbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2NsaWNrJywgJ21vdXNlZG93biddKSxcblxuICAvKipcbiAgICogU3BlY2lmeSBkaXNhYmxlZCBmb3IgZGlzYWJsZSBSb290Q2xvc2VXcmFwcGVyXG4gICAqL1xuICByb290Q2xvc2VEaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgQ2FsbGJhY2sgZmlyZWQgYnkgdGhlIE92ZXJsYXkgd2hlbiBpdCB3aXNoZXMgdG8gYmUgaGlkZGVuLlxuICAgKlxuICAgKiBfX3JlcXVpcmVkX18gd2hlbiBgcm9vdENsb3NlYCBpcyBgdHJ1ZWAuXG4gICAqXG4gICAqIEB0eXBlIGZ1bmNcbiAgICovXG4gIG9uSGlkZTogZnVuY3Rpb24gb25IaWRlKHByb3BzKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLnJvb3RDbG9zZSkge1xuICAgICAgdmFyIF9Qcm9wVHlwZXMkZnVuYztcblxuICAgICAgcmV0dXJuIChfUHJvcFR5cGVzJGZ1bmMgPSBQcm9wVHlwZXMuZnVuYykuaXNSZXF1aXJlZC5hcHBseShfUHJvcFR5cGVzJGZ1bmMsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvcFR5cGVzLmZ1bmMuYXBwbHkoUHJvcFR5cGVzLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEEgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBAMi4wLjBgIGA8VHJhbnNpdGlvbi8+YCBjb21wb25lbnRcbiAgICogdXNlZCB0byBhbmltYXRlIHRoZSBvdmVybGF5IGFzIGl0IGNoYW5nZXMgdmlzaWJpbGl0eS5cbiAgICovXG4gIC8vIEB0cy1pZ25vcmVcbiAgdHJhbnNpdGlvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE92ZXJsYXkgdHJhbnNpdGlvbnMgaW5cbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgT3ZlcmxheSBiZWdpbnMgdG8gdHJhbnNpdGlvbiBpblxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBPdmVybGF5IGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgaW5cbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgT3ZlcmxheSB0cmFuc2l0aW9ucyBvdXRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBPdmVybGF5IGJlZ2lucyB0byB0cmFuc2l0aW9uIG91dFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE92ZXJsYXkgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufTtcbmV4cG9ydCBkZWZhdWx0IE92ZXJsYXk7IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2lzV2luZG93JztcbmltcG9ydCBvZmZzZXQgZnJvbSAnLi9vZmZzZXQnO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBoZWlnaHQgb2YgYSBnaXZlbiBlbGVtZW50LlxuICogXG4gKiBAcGFyYW0gbm9kZSB0aGUgZWxlbWVudFxuICogQHBhcmFtIGNsaWVudCB3aGV0aGVyIHRvIHVzZSBgY2xpZW50SGVpZ2h0YCBpZiBwb3NzaWJsZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhlaWdodChub2RlLCBjbGllbnQpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhub2RlKTtcbiAgcmV0dXJuIHdpbiA/IHdpbi5pbm5lckhlaWdodCA6IGNsaWVudCA/IG5vZGUuY2xpZW50SGVpZ2h0IDogb2Zmc2V0KG5vZGUpLmhlaWdodDtcbn0iLCJ2YXIgdG9BcnJheSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwoRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwsIFtdLnNsaWNlKTtcbi8qKlxuICogUnVucyBgcXVlcnlTZWxlY3RvckFsbGAgb24gYSBnaXZlbiBlbGVtZW50LlxuICogXG4gKiBAcGFyYW0gZWxlbWVudCB0aGUgZWxlbWVudFxuICogQHBhcmFtIHNlbGVjdG9yIHRoZSBzZWxlY3RvclxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHFzYShlbGVtZW50LCBzZWxlY3Rvcikge1xuICByZXR1cm4gdG9BcnJheShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbn0iLCJ2YXIgbWF0Y2hlc0ltcGw7XG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIGVsZW1lbnQgbWF0Y2hlcyBhIHNlbGVjdG9yLlxuICogXG4gKiBAcGFyYW0gbm9kZSB0aGUgZWxlbWVudFxuICogQHBhcmFtIHNlbGVjdG9yIHRoZSBzZWxlY3RvclxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hdGNoZXMobm9kZSwgc2VsZWN0b3IpIHtcbiAgaWYgKCFtYXRjaGVzSW1wbCkge1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICB2YXIgbmF0aXZlTWF0Y2ggPSBib2R5Lm1hdGNoZXMgfHwgYm9keS5tYXRjaGVzU2VsZWN0b3IgfHwgYm9keS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgYm9keS5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgYm9keS5tc01hdGNoZXNTZWxlY3RvcjtcblxuICAgIG1hdGNoZXNJbXBsID0gZnVuY3Rpb24gbWF0Y2hlc0ltcGwobiwgcykge1xuICAgICAgcmV0dXJuIG5hdGl2ZU1hdGNoLmNhbGwobiwgcyk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzSW1wbChub2RlLCBzZWxlY3Rvcik7XG59IiwiaW1wb3J0IG1hdGNoZXMgZnJvbSAnLi9tYXRjaGVzJztcbi8qKlxuICogUmV0dXJucyB0aGUgY2xvc2VzdCBwYXJlbnQgZWxlbWVudCB0aGF0IG1hdGNoZXMgYSBnaXZlbiBzZWxlY3Rvci5cbiAqIFxuICogQHBhcmFtIG5vZGUgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAcGFyYW0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIHRvIG1hdGNoXG4gKiBAcGFyYW0gc3RvcEF0IHN0b3AgdHJhdmVyc2luZyB3aGVuIHRoaXMgZWxlbWVudCBpcyBmb3VuZFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsb3Nlc3Qobm9kZSwgc2VsZWN0b3IsIHN0b3BBdCkge1xuICBpZiAobm9kZS5jbG9zZXN0ICYmICFzdG9wQXQpIG5vZGUuY2xvc2VzdChzZWxlY3Rvcik7XG4gIHZhciBuZXh0Tm9kZSA9IG5vZGU7XG5cbiAgZG8ge1xuICAgIGlmIChtYXRjaGVzKG5leHROb2RlLCBzZWxlY3RvcikpIHJldHVybiBuZXh0Tm9kZTtcbiAgICBuZXh0Tm9kZSA9IG5leHROb2RlLnBhcmVudEVsZW1lbnQ7XG4gIH0gd2hpbGUgKG5leHROb2RlICYmIG5leHROb2RlICE9PSBzdG9wQXQgJiYgbmV4dE5vZGUubm9kZVR5cGUgPT09IGRvY3VtZW50LkVMRU1FTlRfTk9ERSk7XG5cbiAgcmV0dXJuIG51bGw7XG59IiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VGaW5kSW5kZXg7XG4iLCJpbXBvcnQgU3RhY2sgZnJvbSAnLi9fU3RhY2suanMnO1xuaW1wb3J0IGJhc2VJc0VxdWFsIGZyb20gJy4vX2Jhc2VJc0VxdWFsLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gIWxlbmd0aDtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc01hdGNoO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3RyaWN0Q29tcGFyYWJsZTtcbiIsImltcG9ydCBpc1N0cmljdENvbXBhcmFibGUgZnJvbSAnLi9faXNTdHJpY3RDb21wYXJhYmxlLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXRjaERhdGE7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlO1xuIiwiaW1wb3J0IGJhc2VJc01hdGNoIGZyb20gJy4vX2Jhc2VJc01hdGNoLmpzJztcbmltcG9ydCBnZXRNYXRjaERhdGEgZnJvbSAnLi9fZ2V0TWF0Y2hEYXRhLmpzJztcbmltcG9ydCBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSBmcm9tICcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlTWF0Y2hlcztcbiIsImltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNLZXk7XG4iLCJpbXBvcnQgTWFwQ2FjaGUgZnJvbSAnLi9fTWFwQ2FjaGUuanMnO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tICcuL21lbW9pemUuanMnO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICBjYWNoZS5jbGVhcigpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9KTtcblxuICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVDYXBwZWQ7XG4iLCJpbXBvcnQgbWVtb2l6ZUNhcHBlZCBmcm9tICcuL19tZW1vaXplQ2FwcGVkLmpzJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdUb1BhdGg7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheU1hcDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVG9TdHJpbmc7XG4iLCJpbXBvcnQgYmFzZVRvU3RyaW5nIGZyb20gJy4vX2Jhc2VUb1N0cmluZy5qcyc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9TdHJpbmc7XG4iLCJpbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzS2V5IGZyb20gJy4vX2lzS2V5LmpzJztcbmltcG9ydCBzdHJpbmdUb1BhdGggZnJvbSAnLi9fc3RyaW5nVG9QYXRoLmpzJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3RvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FzdFBhdGg7XG4iLCJpbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAqL1xuZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0tleTtcbiIsImltcG9ydCBjYXN0UGF0aCBmcm9tICcuL19jYXN0UGF0aC5qcyc7XG5pbXBvcnQgdG9LZXkgZnJvbSAnLi9fdG9LZXkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0O1xuIiwiaW1wb3J0IGJhc2VHZXQgZnJvbSAnLi9fYmFzZUdldC5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VIYXNJbjtcbiIsImltcG9ydCBjYXN0UGF0aCBmcm9tICcuL19jYXN0UGF0aC5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5pbXBvcnQgdG9LZXkgZnJvbSAnLi9fdG9LZXkuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG4gIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzUGF0aDtcbiIsImltcG9ydCBiYXNlSGFzSW4gZnJvbSAnLi9fYmFzZUhhc0luLmpzJztcbmltcG9ydCBoYXNQYXRoIGZyb20gJy4vX2hhc1BhdGguanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc0luO1xuIiwiaW1wb3J0IGJhc2VJc0VxdWFsIGZyb20gJy4vX2Jhc2VJc0VxdWFsLmpzJztcbmltcG9ydCBnZXQgZnJvbSAnLi9nZXQuanMnO1xuaW1wb3J0IGhhc0luIGZyb20gJy4vaGFzSW4uanMnO1xuaW1wb3J0IGlzS2V5IGZyb20gJy4vX2lzS2V5LmpzJztcbmltcG9ydCBpc1N0cmljdENvbXBhcmFibGUgZnJvbSAnLi9faXNTdHJpY3RDb21wYXJhYmxlLmpzJztcbmltcG9ydCBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSBmcm9tICcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZS5qcyc7XG5pbXBvcnQgdG9LZXkgZnJvbSAnLi9fdG9LZXkuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNYXRjaGVzUHJvcGVydHk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpZGVudGl0eTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VQcm9wZXJ0eTtcbiIsImltcG9ydCBiYXNlR2V0IGZyb20gJy4vX2Jhc2VHZXQuanMnO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVByb3BlcnR5RGVlcDtcbiIsImltcG9ydCBiYXNlUHJvcGVydHkgZnJvbSAnLi9fYmFzZVByb3BlcnR5LmpzJztcbmltcG9ydCBiYXNlUHJvcGVydHlEZWVwIGZyb20gJy4vX2Jhc2VQcm9wZXJ0eURlZXAuanMnO1xuaW1wb3J0IGlzS2V5IGZyb20gJy4vX2lzS2V5LmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcHJvcGVydHk7XG4iLCJpbXBvcnQgYmFzZU1hdGNoZXMgZnJvbSAnLi9fYmFzZU1hdGNoZXMuanMnO1xuaW1wb3J0IGJhc2VNYXRjaGVzUHJvcGVydHkgZnJvbSAnLi9fYmFzZU1hdGNoZXNQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IHByb3BlcnR5IGZyb20gJy4vcHJvcGVydHkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICovXG5mdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXRlcmF0ZWU7XG4iLCJpbXBvcnQgYmFzZUZpbmRJbmRleCBmcm9tICcuL19iYXNlRmluZEluZGV4LmpzJztcbmltcG9ydCBiYXNlSXRlcmF0ZWUgZnJvbSAnLi9fYmFzZUl0ZXJhdGVlLmpzJztcbmltcG9ydCB0b0ludGVnZXIgZnJvbSAnLi90b0ludGVnZXIuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICogXTtcbiAqXG4gKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAqIC8vID0+IDBcbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAqIC8vID0+IDFcbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICogLy8gPT4gMFxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAqIC8vID0+IDJcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICB9XG4gIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmaW5kSW5kZXg7XG4iLCIvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAqIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgc3RhcnQgKz0gc3RlcDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlUmFuZ2U7XG4iLCJpbXBvcnQgYmFzZVJhbmdlIGZyb20gJy4vX2Jhc2VSYW5nZS5qcyc7XG5pbXBvcnQgaXNJdGVyYXRlZUNhbGwgZnJvbSAnLi9faXNJdGVyYXRlZUNhbGwuanMnO1xuaW1wb3J0IHRvRmluaXRlIGZyb20gJy4vdG9GaW5pdGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICB9XG4gICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVJhbmdlO1xuIiwiaW1wb3J0IGNyZWF0ZVJhbmdlIGZyb20gJy4vX2NyZWF0ZVJhbmdlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICpcbiAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ucmFuZ2UoNCk7XG4gKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAqXG4gKiBfLnJhbmdlKC00KTtcbiAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICpcbiAqIF8ucmFuZ2UoMSwgNSk7XG4gKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAqXG4gKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gKlxuICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gKlxuICogXy5yYW5nZSgxLCA0LCAwKTtcbiAqIC8vID0+IFsxLCAxLCAxXVxuICpcbiAqIF8ucmFuZ2UoMCk7XG4gKiAvLyA9PiBbXVxuICovXG52YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG5leHBvcnQgZGVmYXVsdCByYW5nZTtcbiIsInZhciBzYWZlSXNOYU4gPSBOdW1iZXIuaXNOYU4gfHxcbiAgICBmdW5jdGlvbiBwb255ZmlsbCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gdmFsdWU7XG4gICAgfTtcbmZ1bmN0aW9uIGlzRXF1YWwoZmlyc3QsIHNlY29uZCkge1xuICAgIGlmIChmaXJzdCA9PT0gc2Vjb25kKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoc2FmZUlzTmFOKGZpcnN0KSAmJiBzYWZlSXNOYU4oc2Vjb25kKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gYXJlSW5wdXRzRXF1YWwobmV3SW5wdXRzLCBsYXN0SW5wdXRzKSB7XG4gICAgaWYgKG5ld0lucHV0cy5sZW5ndGggIT09IGxhc3RJbnB1dHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdJbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFpc0VxdWFsKG5ld0lucHV0c1tpXSwgbGFzdElucHV0c1tpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZU9uZShyZXN1bHRGbiwgaXNFcXVhbCkge1xuICAgIGlmIChpc0VxdWFsID09PSB2b2lkIDApIHsgaXNFcXVhbCA9IGFyZUlucHV0c0VxdWFsOyB9XG4gICAgdmFyIGxhc3RUaGlzO1xuICAgIHZhciBsYXN0QXJncyA9IFtdO1xuICAgIHZhciBsYXN0UmVzdWx0O1xuICAgIHZhciBjYWxsZWRPbmNlID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgICAgIHZhciBuZXdBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuZXdBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxlZE9uY2UgJiYgbGFzdFRoaXMgPT09IHRoaXMgJiYgaXNFcXVhbChuZXdBcmdzLCBsYXN0QXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxhc3RSZXN1bHQgPSByZXN1bHRGbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcbiAgICAgICAgY2FsbGVkT25jZSA9IHRydWU7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdEFyZ3MgPSBuZXdBcmdzO1xuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplT25lO1xuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGlzQXJndW1lbnRzIGZyb20gJy4vaXNBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRmxhdHRlbmFibGU7XG4iLCJpbXBvcnQgYXJyYXlQdXNoIGZyb20gJy4vX2FycmF5UHVzaC5qcyc7XG5pbXBvcnQgaXNGbGF0dGVuYWJsZSBmcm9tICcuL19pc0ZsYXR0ZW5hYmxlLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VGbGF0dGVuO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJhc2VGb3I7XG4iLCJpbXBvcnQgY3JlYXRlQmFzZUZvciBmcm9tICcuL19jcmVhdGVCYXNlRm9yLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBiYXNlRm9yO1xuIiwiaW1wb3J0IGJhc2VGb3IgZnJvbSAnLi9fYmFzZUZvci5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VGb3JPd247XG4iLCJpbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJhc2VFYWNoO1xuIiwiaW1wb3J0IGJhc2VGb3JPd24gZnJvbSAnLi9fYmFzZUZvck93bi5qcyc7XG5pbXBvcnQgY3JlYXRlQmFzZUVhY2ggZnJvbSAnLi9fY3JlYXRlQmFzZUVhY2guanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICovXG52YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuZXhwb3J0IGRlZmF1bHQgYmFzZUVhY2g7XG4iLCJpbXBvcnQgYmFzZUVhY2ggZnJvbSAnLi9fYmFzZUVhY2guanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlTWFwO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gKiB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVNvcnRCeTtcbiIsImltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcblxuLyoqXG4gKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wYXJlQXNjZW5kaW5nO1xuIiwiaW1wb3J0IGNvbXBhcmVBc2NlbmRpbmcgZnJvbSAnLi9fY29tcGFyZUFzY2VuZGluZy5qcyc7XG5cbi8qKlxuICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAqXG4gKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgfVxuICB9XG4gIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gIC8vXG4gIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBhcmVNdWx0aXBsZTtcbiIsImltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgYmFzZUdldCBmcm9tICcuL19iYXNlR2V0LmpzJztcbmltcG9ydCBiYXNlSXRlcmF0ZWUgZnJvbSAnLi9fYmFzZUl0ZXJhdGVlLmpzJztcbmltcG9ydCBiYXNlTWFwIGZyb20gJy4vX2Jhc2VNYXAuanMnO1xuaW1wb3J0IGJhc2VTb3J0QnkgZnJvbSAnLi9fYmFzZVNvcnRCeS5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgY29tcGFyZU11bHRpcGxlIGZyb20gJy4vX2NvbXBhcmVNdWx0aXBsZS5qcyc7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICBpZiAoaXRlcmF0ZWVzLmxlbmd0aCkge1xuICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgIGlmIChpc0FycmF5KGl0ZXJhdGVlKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZUdldCh2YWx1ZSwgaXRlcmF0ZWUubGVuZ3RoID09PSAxID8gaXRlcmF0ZWVbMF0gOiBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRlZTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyYXRlZXMgPSBbaWRlbnRpdHldO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gLTE7XG4gIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGJhc2VJdGVyYXRlZSkpO1xuXG4gIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICB9KTtcblxuICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlT3JkZXJCeTtcbiIsIi8qKlxuICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgfVxuICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXBwbHk7XG4iLCJpbXBvcnQgYXBwbHkgZnJvbSAnLi9fYXBwbHkuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdmVyUmVzdDtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb25zdGFudDtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZVByb3BlcnR5O1xuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gJy4vY29uc3RhbnQuanMnO1xuaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gJy4vX2RlZmluZVByb3BlcnR5LmpzJztcbmltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VTZXRUb1N0cmluZztcbiIsIi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU5vdyA9IERhdGUubm93O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hvcnRPdXQ7XG4iLCJpbXBvcnQgYmFzZVNldFRvU3RyaW5nIGZyb20gJy4vX2Jhc2VTZXRUb1N0cmluZy5qcyc7XG5pbXBvcnQgc2hvcnRPdXQgZnJvbSAnLi9fc2hvcnRPdXQuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG5leHBvcnQgZGVmYXVsdCBzZXRUb1N0cmluZztcbiIsImltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCBvdmVyUmVzdCBmcm9tICcuL19vdmVyUmVzdC5qcyc7XG5pbXBvcnQgc2V0VG9TdHJpbmcgZnJvbSAnLi9fc2V0VG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVJlc3Q7XG4iLCJpbXBvcnQgYmFzZUZsYXR0ZW4gZnJvbSAnLi9fYmFzZUZsYXR0ZW4uanMnO1xuaW1wb3J0IGJhc2VPcmRlckJ5IGZyb20gJy4vX2Jhc2VPcmRlckJ5LmpzJztcbmltcG9ydCBiYXNlUmVzdCBmcm9tICcuL19iYXNlUmVzdC5qcyc7XG5pbXBvcnQgaXNJdGVyYXRlZUNhbGwgZnJvbSAnLi9faXNJdGVyYXRlZUNhbGwuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIHNvcnQgb3JkZXIgb2ZcbiAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDMwIH0sXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAqIF07XG4gKlxuICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgMzBdXVxuICpcbiAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgMzBdLCBbJ2ZyZWQnLCA0OF1dXG4gKi9cbnZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgaXRlcmF0ZWVzID0gW107XG4gIH0gZWxzZSBpZiAobGVuZ3RoID4gMiAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSwgaXRlcmF0ZWVzWzJdKSkge1xuICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICB9XG4gIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihpdGVyYXRlZXMsIDEpLCBbXSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc29ydEJ5O1xuIiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2lzV2luZG93JztcbmltcG9ydCBvZmZzZXQgZnJvbSAnLi9vZmZzZXQnO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB3aWR0aCBvZiBhIGdpdmVuIGVsZW1lbnQuXG4gKiBcbiAqIEBwYXJhbSBub2RlIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0gY2xpZW50IHdoZXRoZXIgdG8gdXNlIGBjbGllbnRXaWR0aGAgaWYgcG9zc2libGVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaWR0aChub2RlLCBjbGllbnQpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhub2RlKTtcbiAgcmV0dXJuIHdpbiA/IHdpbi5pbm5lcldpZHRoIDogY2xpZW50ID8gbm9kZS5jbGllbnRXaWR0aCA6IG9mZnNldChub2RlKS53aWR0aDtcbn0iLCJpbXBvcnQgY2FuVXNlRE9NIGZyb20gJy4vY2FuVXNlRE9NJztcbnZhciBzaXplO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2Nyb2xsYmFyU2l6ZShyZWNhbGMpIHtcbiAgaWYgKCFzaXplICYmIHNpemUgIT09IDAgfHwgcmVjYWxjKSB7XG4gICAgaWYgKGNhblVzZURPTSkge1xuICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUud2lkdGggPSAnNTBweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUuaGVpZ2h0ID0gJzUwcHgnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICBzaXplID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzaXplO1xufSIsIi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gZWxlbWVudCBoYXMgYSBDU1MgY2xhc3MuXG4gKiBcbiAqIEBwYXJhbSBlbGVtZW50IHRoZSBlbGVtZW50XG4gKiBAcGFyYW0gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3MgbmFtZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSByZXR1cm4gISFjbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgcmV0dXJuIChcIiBcIiArIChlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8IGVsZW1lbnQuY2xhc3NOYW1lKSArIFwiIFwiKS5pbmRleE9mKFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIpICE9PSAtMTtcbn0iLCJpbXBvcnQgaGFzQ2xhc3MgZnJvbSAnLi9oYXNDbGFzcyc7XG4vKipcbiAqIEFkZHMgYSBDU1MgY2xhc3MgdG8gYSBnaXZlbiBlbGVtZW50LlxuICogXG4gKiBAcGFyYW0gZWxlbWVudCB0aGUgZWxlbWVudFxuICogQHBhcmFtIGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzIG5hbWVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtlbHNlIGlmICghaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSkgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUgKyBcIiBcIiArIGNsYXNzTmFtZTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnKSArIFwiIFwiICsgY2xhc3NOYW1lKTtcbn0iLCJmdW5jdGlvbiByZXBsYWNlQ2xhc3NOYW1lKG9yaWdDbGFzcywgY2xhc3NUb1JlbW92ZSkge1xuICByZXR1cm4gb3JpZ0NsYXNzLnJlcGxhY2UobmV3IFJlZ0V4cChcIihefFxcXFxzKVwiICsgY2xhc3NUb1JlbW92ZSArIFwiKD86XFxcXHN8JClcIiwgJ2cnKSwgJyQxJykucmVwbGFjZSgvXFxzKy9nLCAnICcpLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbn1cbi8qKlxuICogUmVtb3ZlcyBhIENTUyBjbGFzcyBmcm9tIGEgZ2l2ZW4gZWxlbWVudC5cbiAqIFxuICogQHBhcmFtIGVsZW1lbnQgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSBjbGFzc05hbWUgdGhlIENTUyBjbGFzcyBuYW1lXG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSwgY2xhc3NOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCByZXBsYWNlQ2xhc3NOYW1lKGVsZW1lbnQuY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NOYW1lLmJhc2VWYWwgfHwgJycsIGNsYXNzTmFtZSkpO1xuICB9XG59IiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUVhY2g7XG4iLCJpbXBvcnQgZGVmaW5lUHJvcGVydHkgZnJvbSAnLi9fZGVmaW5lUHJvcGVydHkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlQXNzaWduVmFsdWU7XG4iLCJpbXBvcnQgYmFzZUFzc2lnblZhbHVlIGZyb20gJy4vX2Jhc2VBc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc2lnblZhbHVlO1xuIiwiaW1wb3J0IGFzc2lnblZhbHVlIGZyb20gJy4vX2Fzc2lnblZhbHVlLmpzJztcbmltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlPYmplY3Q7XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUFzc2lnbjtcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVLZXlzSW47XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUtleXNJbiBmcm9tICcuL19uYXRpdmVLZXlzSW4uanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlS2V5c0luO1xuIiwiaW1wb3J0IGFycmF5TGlrZUtleXMgZnJvbSAnLi9fYXJyYXlMaWtlS2V5cy5qcyc7XG5pbXBvcnQgYmFzZUtleXNJbiBmcm9tICcuL19iYXNlS2V5c0luLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGtleXNJbjtcbiIsImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGtleXNJbiBmcm9tICcuL2tleXNJbi5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUFzc2lnbkluO1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lQnVmZmVyO1xuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlBcnJheTtcbiIsImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGdldFN5bWJvbHMgZnJvbSAnLi9fZ2V0U3ltYm9scy5qcyc7XG5cbi8qKlxuICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weVN5bWJvbHM7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsImltcG9ydCBhcnJheVB1c2ggZnJvbSAnLi9fYXJyYXlQdXNoLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBnZXRTeW1ib2xzIGZyb20gJy4vX2dldFN5bWJvbHMuanMnO1xuaW1wb3J0IHN0dWJBcnJheSBmcm9tICcuL3N0dWJBcnJheS5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKG9iamVjdCkge1xuICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldFN5bWJvbHNJbjtcbiIsImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGdldFN5bWJvbHNJbiBmcm9tICcuL19nZXRTeW1ib2xzSW4uanMnO1xuXG4vKipcbiAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlTeW1ib2xzSW47XG4iLCJpbXBvcnQgYmFzZUdldEFsbEtleXMgZnJvbSAnLi9fYmFzZUdldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldFN5bWJvbHNJbiBmcm9tICcuL19nZXRTeW1ib2xzSW4uanMnO1xuaW1wb3J0IGtleXNJbiBmcm9tICcuL2tleXNJbi5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEFsbEtleXNJbjtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDbG9uZUFycmF5O1xuIiwiaW1wb3J0IFVpbnQ4QXJyYXkgZnJvbSAnLi9fVWludDhBcnJheS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVBcnJheUJ1ZmZlcjtcbiIsImltcG9ydCBjbG9uZUFycmF5QnVmZmVyIGZyb20gJy4vX2Nsb25lQXJyYXlCdWZmZXIuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICovXG5mdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZURhdGFWaWV3O1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICovXG5mdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVSZWdFeHA7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVTeW1ib2w7XG4iLCJpbXBvcnQgY2xvbmVBcnJheUJ1ZmZlciBmcm9tICcuL19jbG9uZUFycmF5QnVmZmVyLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVUeXBlZEFycmF5O1xuIiwiaW1wb3J0IGNsb25lQXJyYXlCdWZmZXIgZnJvbSAnLi9fY2xvbmVBcnJheUJ1ZmZlci5qcyc7XG5pbXBvcnQgY2xvbmVEYXRhVmlldyBmcm9tICcuL19jbG9uZURhdGFWaWV3LmpzJztcbmltcG9ydCBjbG9uZVJlZ0V4cCBmcm9tICcuL19jbG9uZVJlZ0V4cC5qcyc7XG5pbXBvcnQgY2xvbmVTeW1ib2wgZnJvbSAnLi9fY2xvbmVTeW1ib2wuanMnO1xuaW1wb3J0IGNsb25lVHlwZWRBcnJheSBmcm9tICcuL19jbG9uZVR5cGVkQXJyYXkuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaW5pdENsb25lQnlUYWc7XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbnZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICB9XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VDcmVhdGU7XG4iLCJpbXBvcnQgYmFzZUNyZWF0ZSBmcm9tICcuL19iYXNlQ3JlYXRlLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW5pdENsb25lT2JqZWN0O1xuIiwiaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNNYXA7XG4iLCJpbXBvcnQgYmFzZUlzTWFwIGZyb20gJy4vX2Jhc2VJc01hcC5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc01hcChuZXcgTWFwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG5leHBvcnQgZGVmYXVsdCBpc01hcDtcbiIsImltcG9ydCBnZXRUYWcgZnJvbSAnLi9fZ2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzU2V0O1xuIiwiaW1wb3J0IGJhc2VJc1NldCBmcm9tICcuL19iYXNlSXNTZXQuanMnO1xuaW1wb3J0IGJhc2VVbmFyeSBmcm9tICcuL19iYXNlVW5hcnkuanMnO1xuaW1wb3J0IG5vZGVVdGlsIGZyb20gJy4vX25vZGVVdGlsLmpzJztcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTZXQobmV3IFNldCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxuZXhwb3J0IGRlZmF1bHQgaXNTZXQ7XG4iLCJpbXBvcnQgU3RhY2sgZnJvbSAnLi9fU3RhY2suanMnO1xuaW1wb3J0IGFycmF5RWFjaCBmcm9tICcuL19hcnJheUVhY2guanMnO1xuaW1wb3J0IGFzc2lnblZhbHVlIGZyb20gJy4vX2Fzc2lnblZhbHVlLmpzJztcbmltcG9ydCBiYXNlQXNzaWduIGZyb20gJy4vX2Jhc2VBc3NpZ24uanMnO1xuaW1wb3J0IGJhc2VBc3NpZ25JbiBmcm9tICcuL19iYXNlQXNzaWduSW4uanMnO1xuaW1wb3J0IGNsb25lQnVmZmVyIGZyb20gJy4vX2Nsb25lQnVmZmVyLmpzJztcbmltcG9ydCBjb3B5QXJyYXkgZnJvbSAnLi9fY29weUFycmF5LmpzJztcbmltcG9ydCBjb3B5U3ltYm9scyBmcm9tICcuL19jb3B5U3ltYm9scy5qcyc7XG5pbXBvcnQgY29weVN5bWJvbHNJbiBmcm9tICcuL19jb3B5U3ltYm9sc0luLmpzJztcbmltcG9ydCBnZXRBbGxLZXlzIGZyb20gJy4vX2dldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldEFsbEtleXNJbiBmcm9tICcuL19nZXRBbGxLZXlzSW4uanMnO1xuaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGluaXRDbG9uZUFycmF5IGZyb20gJy4vX2luaXRDbG9uZUFycmF5LmpzJztcbmltcG9ydCBpbml0Q2xvbmVCeVRhZyBmcm9tICcuL19pbml0Q2xvbmVCeVRhZy5qcyc7XG5pbXBvcnQgaW5pdENsb25lT2JqZWN0IGZyb20gJy4vX2luaXRDbG9uZU9iamVjdC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzTWFwIGZyb20gJy4vaXNNYXAuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzU2V0IGZyb20gJy4vaXNTZXQuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcbmltcG9ydCBrZXlzSW4gZnJvbSAnLi9rZXlzSW4uanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG52YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbmNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbmNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG5jbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gRGVlcCBjbG9uZVxuICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gKiAgNCAtIENsb25lIHN5bWJvbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUNsb25lO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxhc3Q7XG4iLCJpbXBvcnQgYmFzZUdldCBmcm9tICcuL19iYXNlR2V0LmpzJztcbmltcG9ydCBiYXNlU2xpY2UgZnJvbSAnLi9fYmFzZVNsaWNlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gcGF0aC5sZW5ndGggPCAyID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJlbnQ7XG4iLCJpbXBvcnQgY2FzdFBhdGggZnJvbSAnLi9fY2FzdFBhdGguanMnO1xuaW1wb3J0IGxhc3QgZnJvbSAnLi9sYXN0LmpzJztcbmltcG9ydCBwYXJlbnQgZnJvbSAnLi9fcGFyZW50LmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVVuc2V0O1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1BsYWluT2JqZWN0O1xuIiwiaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi9pc1BsYWluT2JqZWN0LmpzJztcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICogb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gKi9cbmZ1bmN0aW9uIGN1c3RvbU9taXRDbG9uZSh2YWx1ZSkge1xuICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3VzdG9tT21pdENsb25lO1xuIiwiaW1wb3J0IGJhc2VGbGF0dGVuIGZyb20gJy4vX2Jhc2VGbGF0dGVuLmpzJztcblxuLyoqXG4gKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZsYXR0ZW47XG4iLCJpbXBvcnQgZmxhdHRlbiBmcm9tICcuL2ZsYXR0ZW4uanMnO1xuaW1wb3J0IG92ZXJSZXN0IGZyb20gJy4vX292ZXJSZXN0LmpzJztcbmltcG9ydCBzZXRUb1N0cmluZyBmcm9tICcuL19zZXRUb1N0cmluZy5qcyc7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmxhdFJlc3Q7XG4iLCJpbXBvcnQgYXJyYXlNYXAgZnJvbSAnLi9fYXJyYXlNYXAuanMnO1xuaW1wb3J0IGJhc2VDbG9uZSBmcm9tICcuL19iYXNlQ2xvbmUuanMnO1xuaW1wb3J0IGJhc2VVbnNldCBmcm9tICcuL19iYXNlVW5zZXQuanMnO1xuaW1wb3J0IGNhc3RQYXRoIGZyb20gJy4vX2Nhc3RQYXRoLmpzJztcbmltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGN1c3RvbU9taXRDbG9uZSBmcm9tICcuL19jdXN0b21PbWl0Q2xvbmUuanMnO1xuaW1wb3J0IGZsYXRSZXN0IGZyb20gJy4vX2ZsYXRSZXN0LmpzJztcbmltcG9ydCBnZXRBbGxLZXlzSW4gZnJvbSAnLi9fZ2V0QWxsS2V5c0luLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gKlxuICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gKiAvLyA9PiB7ICdiJzogJzInIH1cbiAqL1xudmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH0pO1xuICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBvbWl0O1xuIiwiaW1wb3J0IGJhc2VSZXN0IGZyb20gJy4vX2Jhc2VSZXN0LmpzJztcbmltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcbmltcG9ydCBpc0l0ZXJhdGVlQ2FsbCBmcm9tICcuL19pc0l0ZXJhdGVlQ2FsbC5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICovXG52YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgIGxlbmd0aCA9IDE7XG4gIH1cblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0cztcbiIsImltcG9ydCBhcnJheUVhY2ggZnJvbSAnLi9fYXJyYXlFYWNoLmpzJztcbmltcG9ydCBiYXNlQ3JlYXRlIGZyb20gJy4vX2Jhc2VDcmVhdGUuanMnO1xuaW1wb3J0IGJhc2VGb3JPd24gZnJvbSAnLi9fYmFzZUZvck93bi5qcyc7XG5pbXBvcnQgYmFzZUl0ZXJhdGVlIGZyb20gJy4vX2Jhc2VJdGVyYXRlZS5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKipcbiAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAxLjMuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICogfSwgW10pO1xuICogLy8gPT4gWzQsIDldXG4gKlxuICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICogfSwge30pO1xuICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICBpdGVyYXRlZSA9IGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgfVxuICB9XG4gIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gIH0pO1xuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zZm9ybTtcbiIsImltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcbmltcG9ydCBiYXNlRm9yT3duIGZyb20gJy4vX2Jhc2VGb3JPd24uanMnO1xuaW1wb3J0IGJhc2VJdGVyYXRlZSBmcm9tICcuL19iYXNlSXRlcmF0ZWUuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICogQHNlZSBfLm1hcEtleXNcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0ge1xuICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAqIH07XG4gKlxuICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaXRlcmF0ZWUgPSBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwVmFsdWVzO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdW5jb250cm9sbGFibGUgfSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IHN0YXJ0T2YsIGVuZE9mLCBsdGUsIGFkZCwgZXEsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMsIGluUmFuZ2UgYXMgaW5SYW5nZSQxLCBsdCwgZ3QsIGd0ZSwgbmVxLCBtaW4sIG1heCB9IGZyb20gJ2RhdGUtYXJpdGhtZXRpYyc7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNodW5rIGZyb20gJ2xvZGFzaC1lcy9jaHVuayc7XG5pbXBvcnQgZ2V0UG9zaXRpb24gZnJvbSAnZG9tLWhlbHBlcnMvcG9zaXRpb24nO1xuaW1wb3J0IHsgcmVxdWVzdCwgY2FuY2VsIH0gZnJvbSAnZG9tLWhlbHBlcnMvYW5pbWF0aW9uRnJhbWUnO1xuaW1wb3J0IGdldE9mZnNldCBmcm9tICdkb20taGVscGVycy9vZmZzZXQnO1xuaW1wb3J0IGdldFNjcm9sbFRvcCBmcm9tICdkb20taGVscGVycy9zY3JvbGxUb3AnO1xuaW1wb3J0IGdldFNjcm9sbExlZnQgZnJvbSAnZG9tLWhlbHBlcnMvc2Nyb2xsTGVmdCc7XG5pbXBvcnQgaXNFcXVhbCQxIGZyb20gJ2xvZGFzaC1lcy9pc0VxdWFsJztcbmltcG9ydCBPdmVybGF5IGZyb20gJ3JlYWN0LW92ZXJsYXlzL092ZXJsYXknO1xuaW1wb3J0IGdldEhlaWdodCBmcm9tICdkb20taGVscGVycy9oZWlnaHQnO1xuaW1wb3J0IHFzYSBmcm9tICdkb20taGVscGVycy9xdWVyeVNlbGVjdG9yQWxsJztcbmltcG9ydCBjb250YWlucyBmcm9tICdkb20taGVscGVycy9jb250YWlucyc7XG5pbXBvcnQgY2xvc2VzdCBmcm9tICdkb20taGVscGVycy9jbG9zZXN0JztcbmltcG9ydCBsaXN0ZW4gZnJvbSAnZG9tLWhlbHBlcnMvbGlzdGVuJztcbmltcG9ydCBmaW5kSW5kZXggZnJvbSAnbG9kYXNoLWVzL2ZpbmRJbmRleCc7XG5pbXBvcnQgcmFuZ2UkMSBmcm9tICdsb2Rhc2gtZXMvcmFuZ2UnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnbWVtb2l6ZS1vbmUnO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgc29ydEJ5IGZyb20gJ2xvZGFzaC1lcy9zb3J0QnknO1xuaW1wb3J0IGdldFdpZHRoIGZyb20gJ2RvbS1oZWxwZXJzL3dpZHRoJztcbmltcG9ydCBzY3JvbGxiYXJTaXplIGZyb20gJ2RvbS1oZWxwZXJzL3Njcm9sbGJhclNpemUnO1xuaW1wb3J0IGFkZENsYXNzIGZyb20gJ2RvbS1oZWxwZXJzL2FkZENsYXNzJztcbmltcG9ydCByZW1vdmVDbGFzcyBmcm9tICdkb20taGVscGVycy9yZW1vdmVDbGFzcyc7XG5pbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gtZXMvb21pdCc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnbG9kYXNoLWVzL2RlZmF1bHRzJztcbmltcG9ydCB0cmFuc2Zvcm0gZnJvbSAnbG9kYXNoLWVzL3RyYW5zZm9ybSc7XG5pbXBvcnQgbWFwVmFsdWVzIGZyb20gJ2xvZGFzaC1lcy9tYXBWYWx1ZXMnO1xuXG5mdW5jdGlvbiBOb29wV3JhcHBlcihwcm9wcykge1xuICByZXR1cm4gcHJvcHMuY2hpbGRyZW47XG59XG5cbnZhciBuYXZpZ2F0ZSA9IHtcbiAgUFJFVklPVVM6ICdQUkVWJyxcbiAgTkVYVDogJ05FWFQnLFxuICBUT0RBWTogJ1RPREFZJyxcbiAgREFURTogJ0RBVEUnXG59O1xudmFyIHZpZXdzID0ge1xuICBNT05USDogJ21vbnRoJyxcbiAgV0VFSzogJ3dlZWsnLFxuICBXT1JLX1dFRUs6ICd3b3JrX3dlZWsnLFxuICBEQVk6ICdkYXknLFxuICBBR0VOREE6ICdhZ2VuZGEnXG59O1xuXG52YXIgdmlld05hbWVzID0gT2JqZWN0LmtleXModmlld3MpLm1hcChmdW5jdGlvbiAoaykge1xuICByZXR1cm4gdmlld3Nba107XG59KTtcbnZhciBhY2Nlc3NvciA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSk7XG52YXIgZGF0ZUZvcm1hdCA9IFByb3BUeXBlcy5hbnk7XG52YXIgZGF0ZVJhbmdlRm9ybWF0ID0gUHJvcFR5cGVzLmZ1bmM7XG4vKipcbiAqIGFjY2VwdHMgZWl0aGVyIGFuIGFycmF5IG9mIGJ1aWx0aW4gdmlldyBuYW1lczpcbiAqXG4gKiBgYGBcbiAqIHZpZXdzPXtbJ21vbnRoJywgJ2RheScsICdhZ2VuZGEnXX1cbiAqIGBgYFxuICpcbiAqIG9yIGFuIG9iamVjdCBoYXNoIG9mIHRoZSB2aWV3IG5hbWUgYW5kIHRoZSBjb21wb25lbnQgKG9yIGJvb2xlYW4gZm9yIGJ1aWx0aW4pXG4gKlxuICogYGBgXG4gKiB2aWV3cz17e1xuICogICBtb250aDogdHJ1ZSxcbiAqICAgd2VlazogZmFsc2UsXG4gKiAgIHdvcmt3ZWVrOiBXb3JrV2Vla1ZpZXdDb21wb25lbnQsXG4gKiB9fVxuICogYGBgXG4gKi9cblxudmFyIHZpZXdzJDEgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2Yodmlld05hbWVzKSksIFByb3BUeXBlcy5vYmplY3RPZihmdW5jdGlvbiAocHJvcCwga2V5KSB7XG4gIHZhciBpc0J1aWx0aW5WaWV3ID0gdmlld05hbWVzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgdHlwZW9mIHByb3Bba2V5XSA9PT0gJ2Jvb2xlYW4nO1xuXG4gIGlmIChpc0J1aWx0aW5WaWV3KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb3BUeXBlcy5lbGVtZW50VHlwZS5hcHBseShQcm9wVHlwZXMsIFtwcm9wLCBrZXldLmNvbmNhdChhcmdzKSk7XG4gIH1cbn0pXSk7XG52YXIgRGF5TGF5b3V0QWxnb3JpdGhtUHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydvdmVybGFwJywgJ25vLW92ZXJsYXAnXSksIFByb3BUeXBlcy5mdW5jXSk7XG5cbmZ1bmN0aW9uIG5vdGlmeShoYW5kbGVyLCBhcmdzKSB7XG4gIGhhbmRsZXIgJiYgaGFuZGxlci5hcHBseShudWxsLCBbXS5jb25jYXQoYXJncykpO1xufVxuXG4vKiBlc2xpbnQgbm8tZmFsbHRocm91Z2g6IG9mZiAqL1xudmFyIE1JTExJID0ge1xuICBzZWNvbmRzOiAxMDAwLFxuICBtaW51dGVzOiAxMDAwICogNjAsXG4gIGhvdXJzOiAxMDAwICogNjAgKiA2MCxcbiAgZGF5OiAxMDAwICogNjAgKiA2MCAqIDI0XG59O1xuZnVuY3Rpb24gZmlyc3RWaXNpYmxlRGF5KGRhdGUsIGxvY2FsaXplcikge1xuICB2YXIgZmlyc3RPZk1vbnRoID0gc3RhcnRPZihkYXRlLCAnbW9udGgnKTtcbiAgcmV0dXJuIHN0YXJ0T2YoZmlyc3RPZk1vbnRoLCAnd2VlaycsIGxvY2FsaXplci5zdGFydE9mV2VlaygpKTtcbn1cbmZ1bmN0aW9uIGxhc3RWaXNpYmxlRGF5KGRhdGUsIGxvY2FsaXplcikge1xuICB2YXIgZW5kT2ZNb250aCA9IGVuZE9mKGRhdGUsICdtb250aCcpO1xuICByZXR1cm4gZW5kT2YoZW5kT2ZNb250aCwgJ3dlZWsnLCBsb2NhbGl6ZXIuc3RhcnRPZldlZWsoKSk7XG59XG5mdW5jdGlvbiB2aXNpYmxlRGF5cyhkYXRlLCBsb2NhbGl6ZXIpIHtcbiAgdmFyIGN1cnJlbnQgPSBmaXJzdFZpc2libGVEYXkoZGF0ZSwgbG9jYWxpemVyKSxcbiAgICAgIGxhc3QgPSBsYXN0VmlzaWJsZURheShkYXRlLCBsb2NhbGl6ZXIpLFxuICAgICAgZGF5cyA9IFtdO1xuXG4gIHdoaWxlIChsdGUoY3VycmVudCwgbGFzdCwgJ2RheScpKSB7XG4gICAgZGF5cy5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBhZGQoY3VycmVudCwgMSwgJ2RheScpO1xuICB9XG5cbiAgcmV0dXJuIGRheXM7XG59XG5mdW5jdGlvbiBjZWlsKGRhdGUsIHVuaXQpIHtcbiAgdmFyIGZsb29yID0gc3RhcnRPZihkYXRlLCB1bml0KTtcbiAgcmV0dXJuIGVxKGZsb29yLCBkYXRlKSA/IGZsb29yIDogYWRkKGZsb29yLCAxLCB1bml0KTtcbn1cbmZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBlbmQsIHVuaXQpIHtcbiAgaWYgKHVuaXQgPT09IHZvaWQgMCkge1xuICAgIHVuaXQgPSAnZGF5JztcbiAgfVxuXG4gIHZhciBjdXJyZW50ID0gc3RhcnQsXG4gICAgICBkYXlzID0gW107XG5cbiAgd2hpbGUgKGx0ZShjdXJyZW50LCBlbmQsIHVuaXQpKSB7XG4gICAgZGF5cy5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBhZGQoY3VycmVudCwgMSwgdW5pdCk7XG4gIH1cblxuICByZXR1cm4gZGF5cztcbn1cbmZ1bmN0aW9uIG1lcmdlKGRhdGUsIHRpbWUpIHtcbiAgaWYgKHRpbWUgPT0gbnVsbCAmJiBkYXRlID09IG51bGwpIHJldHVybiBudWxsO1xuICBpZiAodGltZSA9PSBudWxsKSB0aW1lID0gbmV3IERhdGUoKTtcbiAgaWYgKGRhdGUgPT0gbnVsbCkgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gIGRhdGUgPSBzdGFydE9mKGRhdGUsICdkYXknKTtcbiAgZGF0ZSA9IGhvdXJzKGRhdGUsIGhvdXJzKHRpbWUpKTtcbiAgZGF0ZSA9IG1pbnV0ZXMoZGF0ZSwgbWludXRlcyh0aW1lKSk7XG4gIGRhdGUgPSBzZWNvbmRzKGRhdGUsIHNlY29uZHModGltZSkpO1xuICByZXR1cm4gbWlsbGlzZWNvbmRzKGRhdGUsIG1pbGxpc2Vjb25kcyh0aW1lKSk7XG59XG5mdW5jdGlvbiBpc0p1c3REYXRlKGRhdGUpIHtcbiAgcmV0dXJuIGhvdXJzKGRhdGUpID09PSAwICYmIG1pbnV0ZXMoZGF0ZSkgPT09IDAgJiYgc2Vjb25kcyhkYXRlKSA9PT0gMCAmJiBtaWxsaXNlY29uZHMoZGF0ZSkgPT09IDA7XG59XG5mdW5jdGlvbiBkaWZmKGRhdGVBLCBkYXRlQiwgdW5pdCkge1xuICBpZiAoIXVuaXQgfHwgdW5pdCA9PT0gJ21pbGxpc2Vjb25kcycpIHJldHVybiBNYXRoLmFicygrZGF0ZUEgLSArZGF0ZUIpOyAvLyB0aGUgLnJvdW5kKCkgaGFuZGxlcyBhbiBlZGdlIGNhc2VcbiAgLy8gd2l0aCBEU1Qgd2hlcmUgdGhlIHRvdGFsIHdvbid0IGJlIGV4YWN0XG4gIC8vIHNpbmNlIG9uZSBkYXkgaW4gdGhlIHJhbmdlIG1heSBiZSBzaG9ydGVyL2xvbmdlciBieSBhbiBob3VyXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5hYnMoK3N0YXJ0T2YoZGF0ZUEsIHVuaXQpIC8gTUlMTElbdW5pdF0gLSArc3RhcnRPZihkYXRlQiwgdW5pdCkgLyBNSUxMSVt1bml0XSkpO1xufVxuXG52YXIgbG9jYWxlUHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pO1xuXG5mdW5jdGlvbiBfZm9ybWF0KGxvY2FsaXplciwgZm9ybWF0dGVyLCB2YWx1ZSwgZm9ybWF0LCBjdWx0dXJlKSB7XG4gIHZhciByZXN1bHQgPSB0eXBlb2YgZm9ybWF0ID09PSAnZnVuY3Rpb24nID8gZm9ybWF0KHZhbHVlLCBjdWx0dXJlLCBsb2NhbGl6ZXIpIDogZm9ybWF0dGVyLmNhbGwobG9jYWxpemVyLCB2YWx1ZSwgZm9ybWF0LCBjdWx0dXJlKTtcbiAgIShyZXN1bHQgPT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdgbG9jYWxpemVyIGZvcm1hdCguLilgIG11c3QgcmV0dXJuIGEgc3RyaW5nLCBudWxsLCBvciB1bmRlZmluZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFRoaXMgZGF0ZSBjb252ZXJzaW9uIHdhcyBtb3ZlZCBvdXQgb2YgVGltZVNsb3RzLmpzLCB0b1xuICogYWxsb3cgZm9yIGxvY2FsaXplciBvdmVycmlkZVxuICogQHBhcmFtIHtEYXRlfSBkdCAtIFRoZSBkYXRlIHRvIHN0YXJ0IGZyb21cbiAqIEBwYXJhbSB7TnVtYmVyfSBtaW51dGVzRnJvbU1pZG5pZ2h0XG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJucyB7RGF0ZX1cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFNsb3REYXRlKGR0LCBtaW51dGVzRnJvbU1pZG5pZ2h0LCBvZmZzZXQpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKGR0LmdldEZ1bGxZZWFyKCksIGR0LmdldE1vbnRoKCksIGR0LmdldERhdGUoKSwgMCwgbWludXRlc0Zyb21NaWRuaWdodCArIG9mZnNldCwgMCwgMCk7XG59XG5cbmZ1bmN0aW9uIGdldERzdE9mZnNldChzdGFydCwgZW5kKSB7XG4gIHJldHVybiBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpIC0gZW5kLmdldFRpbWV6b25lT2Zmc2V0KCk7XG59IC8vIGlmIHRoZSBzdGFydCBpcyBvbiBhIERTVC1jaGFuZ2luZyBkYXkgYnV0ICphZnRlciogdGhlIG1vbWVudCBvZiBEU1Rcbi8vIHRyYW5zaXRpb24gd2UgbmVlZCB0byBhZGQgdGhvc2UgZXh0cmEgbWludXRlcyB0byBvdXIgbWludXRlc0Zyb21NaWRuaWdodFxuXG5cbmZ1bmN0aW9uIGdldFRvdGFsTWluKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGRpZmYoc3RhcnQsIGVuZCwgJ21pbnV0ZXMnKSArIGdldERzdE9mZnNldChzdGFydCwgZW5kKTtcbn1cblxuZnVuY3Rpb24gZ2V0TWludXRlc0Zyb21NaWRuaWdodChzdGFydCkge1xuICB2YXIgZGF5c3RhcnQgPSBzdGFydE9mKHN0YXJ0LCAnZGF5Jyk7XG4gIHJldHVybiBkaWZmKGRheXN0YXJ0LCBzdGFydCwgJ21pbnV0ZXMnKSArIGdldERzdE9mZnNldChkYXlzdGFydCwgc3RhcnQpO1xufSAvLyBUaGVzZSB0d28gYXJlIHVzZWQgYnkgRGF0ZVNsb3RNZXRyaWNzXG5cblxuZnVuY3Rpb24gY29udGludWVzUHJpb3Ioc3RhcnQsIGZpcnN0KSB7XG4gIHJldHVybiBsdChzdGFydCwgZmlyc3QsICdkYXknKTtcbn1cblxuZnVuY3Rpb24gY29udGludWVzQWZ0ZXIoc3RhcnQsIGVuZCwgbGFzdCkge1xuICB2YXIgc2luZ2xlRGF5RHVyYXRpb24gPSBlcShzdGFydCwgZW5kLCAnbWludXRlcycpO1xuICByZXR1cm4gc2luZ2xlRGF5RHVyYXRpb24gPyBndGUoZW5kLCBsYXN0LCAnbWludXRlcycpIDogZ3QoZW5kLCBsYXN0LCAnbWludXRlcycpO1xufSAvLyBUaGVzZSB0d28gYXJlIHVzZWQgYnkgZXZlbnRMZXZlbHNcblxuXG5mdW5jdGlvbiBzb3J0RXZlbnRzKF9yZWYpIHtcbiAgdmFyIF9yZWYkZXZ0QSA9IF9yZWYuZXZ0QSxcbiAgICAgIGFTdGFydCA9IF9yZWYkZXZ0QS5zdGFydCxcbiAgICAgIGFFbmQgPSBfcmVmJGV2dEEuZW5kLFxuICAgICAgYUFsbERheSA9IF9yZWYkZXZ0QS5hbGxEYXksXG4gICAgICBfcmVmJGV2dEIgPSBfcmVmLmV2dEIsXG4gICAgICBiU3RhcnQgPSBfcmVmJGV2dEIuc3RhcnQsXG4gICAgICBiRW5kID0gX3JlZiRldnRCLmVuZCxcbiAgICAgIGJBbGxEYXkgPSBfcmVmJGV2dEIuYWxsRGF5O1xuICB2YXIgc3RhcnRTb3J0ID0gK3N0YXJ0T2YoYVN0YXJ0LCAnZGF5JykgLSArc3RhcnRPZihiU3RhcnQsICdkYXknKTtcbiAgdmFyIGR1ckEgPSBkaWZmKGFTdGFydCwgY2VpbChhRW5kLCAnZGF5JyksICdkYXknKTtcbiAgdmFyIGR1ckIgPSBkaWZmKGJTdGFydCwgY2VpbChiRW5kLCAnZGF5JyksICdkYXknKTtcbiAgcmV0dXJuIHN0YXJ0U29ydCB8fCAvLyBzb3J0IGJ5IHN0YXJ0IERheSBmaXJzdFxuICBNYXRoLm1heChkdXJCLCAxKSAtIE1hdGgubWF4KGR1ckEsIDEpIHx8IC8vIGV2ZW50cyBzcGFubmluZyBtdWx0aXBsZSBkYXlzIGdvIGZpcnN0XG4gICEhYkFsbERheSAtICEhYUFsbERheSB8fCAvLyB0aGVuIGFsbERheSBzaW5nbGUgZGF5IGV2ZW50c1xuICArYVN0YXJ0IC0gK2JTdGFydCB8fCAvLyB0aGVuIHNvcnQgYnkgc3RhcnQgdGltZVxuICArYUVuZCAtICtiRW5kIC8vIHRoZW4gc29ydCBieSBlbmQgdGltZVxuICA7XG59XG5cbmZ1bmN0aW9uIGluRXZlbnRSYW5nZShfcmVmMikge1xuICB2YXIgX3JlZjIkZXZlbnQgPSBfcmVmMi5ldmVudCxcbiAgICAgIHN0YXJ0ID0gX3JlZjIkZXZlbnQuc3RhcnQsXG4gICAgICBlbmQgPSBfcmVmMiRldmVudC5lbmQsXG4gICAgICBfcmVmMiRyYW5nZSA9IF9yZWYyLnJhbmdlLFxuICAgICAgcmFuZ2VTdGFydCA9IF9yZWYyJHJhbmdlLnN0YXJ0LFxuICAgICAgcmFuZ2VFbmQgPSBfcmVmMiRyYW5nZS5lbmQ7XG4gIHZhciBlU3RhcnQgPSBzdGFydE9mKHN0YXJ0LCAnZGF5Jyk7XG4gIHZhciBzdGFydHNCZWZvcmVFbmQgPSBsdGUoZVN0YXJ0LCByYW5nZUVuZCwgJ2RheScpOyAvLyB3aGVuIHRoZSBldmVudCBpcyB6ZXJvIGR1cmF0aW9uIHdlIG5lZWQgdG8gaGFuZGxlIGEgYml0IGRpZmZlcmVudGx5XG5cbiAgdmFyIHNhbWVNaW4gPSBuZXEoZVN0YXJ0LCBlbmQsICdtaW51dGVzJyk7XG4gIHZhciBlbmRzQWZ0ZXJTdGFydCA9IHNhbWVNaW4gPyBndChlbmQsIHJhbmdlU3RhcnQsICdtaW51dGVzJykgOiBndGUoZW5kLCByYW5nZVN0YXJ0LCAnbWludXRlcycpO1xuICByZXR1cm4gc3RhcnRzQmVmb3JlRW5kICYmIGVuZHNBZnRlclN0YXJ0O1xufSAvLyBvdGhlciBsb2NhbGl6ZXJzIHRyZWF0cyAnZGF5JyBhbmQgJ2RhdGUnIGVxdWFsaXR5IHZlcnkgZGlmZmVyZW50bHksIHNvIHdlXG4vLyBhYnN0cmFjdCB0aGUgY2hhbmdlIHRoZSAnbG9jYWxpemVyLmVxKGRhdGUxLCBkYXRlMiwgJ2RheScpIGludG8gdGhpc1xuLy8gbmV3IG1ldGhvZCwgd2hlcmUgdGhleSBjYW4gYmUgdHJlYXRlZCBjb3JyZWN0bHkgYnkgdGhlIGxvY2FsaXplciBvdmVycmlkZXNcblxuXG5mdW5jdGlvbiBpc1NhbWVEYXRlKGRhdGUxLCBkYXRlMikge1xuICByZXR1cm4gZXEoZGF0ZTEsIGRhdGUyLCAnZGF5Jyk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0QW5kRW5kQXJlRGF0ZU9ubHkoc3RhcnQsIGVuZCkge1xuICByZXR1cm4gaXNKdXN0RGF0ZShzdGFydCkgJiYgaXNKdXN0RGF0ZShlbmQpO1xufVxuXG52YXIgRGF0ZUxvY2FsaXplciA9IGZ1bmN0aW9uIERhdGVMb2NhbGl6ZXIoc3BlYykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICEodHlwZW9mIHNwZWMuZm9ybWF0ID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2RhdGUgbG9jYWxpemVyIGBmb3JtYXQoLi4pYCBtdXN0IGJlIGEgZnVuY3Rpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICEodHlwZW9mIHNwZWMuZmlyc3RPZldlZWsgPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnZGF0ZSBsb2NhbGl6ZXIgYGZpcnN0T2ZXZWVrKC4uKWAgbXVzdCBiZSBhIGZ1bmN0aW9uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB0aGlzLnByb3BUeXBlID0gc3BlYy5wcm9wVHlwZSB8fCBsb2NhbGVQcm9wVHlwZTtcbiAgdGhpcy5mb3JtYXRzID0gc3BlYy5mb3JtYXRzO1xuXG4gIHRoaXMuZm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2Zvcm1hdC5hcHBseSh2b2lkIDAsIFtfdGhpcywgc3BlYy5mb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gIH07IC8vIFRoZXNlIGRhdGUgYXJpdGhtZXRpYyBtZXRob2RzIGNhbiBiZSBvdmVycmlkZW4gYnkgdGhlIGxvY2FsaXplclxuXG5cbiAgdGhpcy5zdGFydE9mV2VlayA9IHNwZWMuZmlyc3RPZldlZWs7XG4gIHRoaXMubWVyZ2UgPSBzcGVjLm1lcmdlIHx8IG1lcmdlO1xuICB0aGlzLmluUmFuZ2UgPSBzcGVjLmluUmFuZ2UgfHwgaW5SYW5nZSQxO1xuICB0aGlzLmx0ID0gc3BlYy5sdCB8fCBsdDtcbiAgdGhpcy5sdGUgPSBzcGVjLmx0ZSB8fCBsdGU7XG4gIHRoaXMuZ3QgPSBzcGVjLmd0IHx8IGd0O1xuICB0aGlzLmd0ZSA9IHNwZWMuZ3RlIHx8IGd0ZTtcbiAgdGhpcy5lcSA9IHNwZWMuZXEgfHwgZXE7XG4gIHRoaXMubmVxID0gc3BlYy5uZXEgfHwgbmVxO1xuICB0aGlzLnN0YXJ0T2YgPSBzcGVjLnN0YXJ0T2YgfHwgc3RhcnRPZjtcbiAgdGhpcy5lbmRPZiA9IHNwZWMuZW5kT2YgfHwgZW5kT2Y7XG4gIHRoaXMuYWRkID0gc3BlYy5hZGQgfHwgYWRkO1xuICB0aGlzLnJhbmdlID0gc3BlYy5yYW5nZSB8fCByYW5nZTtcbiAgdGhpcy5kaWZmID0gc3BlYy5kaWZmIHx8IGRpZmY7XG4gIHRoaXMuY2VpbCA9IHNwZWMuY2VpbCB8fCBjZWlsO1xuICB0aGlzLm1pbiA9IHNwZWMubWluIHx8IG1pbjtcbiAgdGhpcy5tYXggPSBzcGVjLm1heCB8fCBtYXg7XG4gIHRoaXMubWludXRlcyA9IHNwZWMubWludXRlcyB8fCBtaW51dGVzO1xuICB0aGlzLmZpcnN0VmlzaWJsZURheSA9IHNwZWMuZmlyc3RWaXNpYmxlRGF5IHx8IGZpcnN0VmlzaWJsZURheTtcbiAgdGhpcy5sYXN0VmlzaWJsZURheSA9IHNwZWMubGFzdFZpc2libGVEYXkgfHwgbGFzdFZpc2libGVEYXk7XG4gIHRoaXMudmlzaWJsZURheXMgPSBzcGVjLnZpc2libGVEYXlzIHx8IHZpc2libGVEYXlzO1xuICB0aGlzLmdldFNsb3REYXRlID0gc3BlYy5nZXRTbG90RGF0ZSB8fCBnZXRTbG90RGF0ZTtcbiAgdGhpcy5nZXRUb3RhbE1pbiA9IHNwZWMuZ2V0VG90YWxNaW4gfHwgZ2V0VG90YWxNaW47XG4gIHRoaXMuZ2V0TWludXRlc0Zyb21NaWRuaWdodCA9IHNwZWMuZ2V0TWludXRlc0Zyb21NaWRuaWdodCB8fCBnZXRNaW51dGVzRnJvbU1pZG5pZ2h0O1xuICB0aGlzLmNvbnRpbnVlc1ByaW9yID0gc3BlYy5jb250aW51ZXNQcmlvciB8fCBjb250aW51ZXNQcmlvcjtcbiAgdGhpcy5jb250aW51ZXNBZnRlciA9IHNwZWMuY29udGludWVzQWZ0ZXIgfHwgY29udGludWVzQWZ0ZXI7XG4gIHRoaXMuc29ydEV2ZW50cyA9IHNwZWMuc29ydEV2ZW50cyB8fCBzb3J0RXZlbnRzO1xuICB0aGlzLmluRXZlbnRSYW5nZSA9IHNwZWMuaW5FdmVudFJhbmdlIHx8IGluRXZlbnRSYW5nZTtcbiAgdGhpcy5pc1NhbWVEYXRlID0gc3BlYy5pc1NhbWVEYXRlIHx8IGlzU2FtZURhdGU7XG4gIHRoaXMuc3RhcnRBbmRFbmRBcmVEYXRlT25seSA9IHNwZWMuc3RhcnRBbmRFbmRBcmVEYXRlT25seSB8fCBzdGFydEFuZEVuZEFyZURhdGVPbmx5O1xuICB0aGlzLnNlZ21lbnRPZmZzZXQgPSBzcGVjLmJyb3dzZXJUWk9mZnNldCA/IHNwZWMuYnJvd3NlclRaT2Zmc2V0KCkgOiAwO1xufTtcbmZ1bmN0aW9uIG1lcmdlV2l0aERlZmF1bHRzKGxvY2FsaXplciwgY3VsdHVyZSwgZm9ybWF0T3ZlcnJpZGVzLCBtZXNzYWdlcykge1xuICB2YXIgZm9ybWF0cyA9IF9leHRlbmRzKHt9LCBsb2NhbGl6ZXIuZm9ybWF0cywgZm9ybWF0T3ZlcnJpZGVzKTtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2FsaXplciwge1xuICAgIG1lc3NhZ2VzOiBtZXNzYWdlcyxcbiAgICBzdGFydE9mV2VlazogZnVuY3Rpb24gc3RhcnRPZldlZWsoKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemVyLnN0YXJ0T2ZXZWVrKGN1bHR1cmUpO1xuICAgIH0sXG4gICAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIF9mb3JtYXQyKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemVyLmZvcm1hdCh2YWx1ZSwgZm9ybWF0c1tfZm9ybWF0Ml0gfHwgX2Zvcm1hdDIsIGN1bHR1cmUpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkZWZhdWx0TWVzc2FnZXMgPSB7XG4gIGRhdGU6ICdEYXRlJyxcbiAgdGltZTogJ1RpbWUnLFxuICBldmVudDogJ0V2ZW50JyxcbiAgYWxsRGF5OiAnQWxsIERheScsXG4gIHdlZWs6ICdXZWVrJyxcbiAgd29ya193ZWVrOiAnV29yayBXZWVrJyxcbiAgZGF5OiAnRGF5JyxcbiAgbW9udGg6ICdNb250aCcsXG4gIHByZXZpb3VzOiAnQmFjaycsXG4gIG5leHQ6ICdOZXh0JyxcbiAgeWVzdGVyZGF5OiAnWWVzdGVyZGF5JyxcbiAgdG9tb3Jyb3c6ICdUb21vcnJvdycsXG4gIHRvZGF5OiAnVG9kYXknLFxuICBhZ2VuZGE6ICdBZ2VuZGEnLFxuICBub0V2ZW50c0luUmFuZ2U6ICdUaGVyZSBhcmUgbm8gZXZlbnRzIGluIHRoaXMgcmFuZ2UuJyxcbiAgc2hvd01vcmU6IGZ1bmN0aW9uIHNob3dNb3JlKHRvdGFsKSB7XG4gICAgcmV0dXJuIFwiK1wiICsgdG90YWwgKyBcIiBtb3JlXCI7XG4gIH1cbn07XG5mdW5jdGlvbiBtZXNzYWdlcyhtc2dzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZGVmYXVsdE1lc3NhZ2VzLCBtc2dzKTtcbn1cblxudmFyIF9leGNsdWRlZCA9IFtcInN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXZlbnRcIiwgXCJzZWxlY3RlZFwiLCBcImlzQWxsRGF5XCIsIFwib25TZWxlY3RcIiwgXCJvbkRvdWJsZUNsaWNrXCIsIFwib25LZXlQcmVzc1wiLCBcImxvY2FsaXplclwiLCBcImNvbnRpbnVlc1ByaW9yXCIsIFwiY29udGludWVzQWZ0ZXJcIiwgXCJhY2Nlc3NvcnNcIiwgXCJnZXR0ZXJzXCIsIFwiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRzXCIsIFwic2xvdFN0YXJ0XCIsIFwic2xvdEVuZFwiXTtcblxudmFyIEV2ZW50Q2VsbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShFdmVudENlbGwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEV2ZW50Q2VsbCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRXZlbnRDZWxsLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgZXZlbnQgPSBfdGhpcyRwcm9wcy5ldmVudCxcbiAgICAgICAgc2VsZWN0ZWQgPSBfdGhpcyRwcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgaXNBbGxEYXkgPSBfdGhpcyRwcm9wcy5pc0FsbERheSxcbiAgICAgICAgb25TZWxlY3QgPSBfdGhpcyRwcm9wcy5vblNlbGVjdCxcbiAgICAgICAgX29uRG91YmxlQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkRvdWJsZUNsaWNrLFxuICAgICAgICBfb25LZXlQcmVzcyA9IF90aGlzJHByb3BzLm9uS2V5UHJlc3MsXG4gICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzLmxvY2FsaXplcixcbiAgICAgICAgY29udGludWVzUHJpb3IgPSBfdGhpcyRwcm9wcy5jb250aW51ZXNQcmlvcixcbiAgICAgICAgY29udGludWVzQWZ0ZXIgPSBfdGhpcyRwcm9wcy5jb250aW51ZXNBZnRlcixcbiAgICAgICAgYWNjZXNzb3JzID0gX3RoaXMkcHJvcHMuYWNjZXNzb3JzLFxuICAgICAgICBnZXR0ZXJzID0gX3RoaXMkcHJvcHMuZ2V0dGVycyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgX3RoaXMkcHJvcHMkY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50cyxcbiAgICAgICAgRXZlbnQgPSBfdGhpcyRwcm9wcyRjb21wb25lbnQuZXZlbnQsXG4gICAgICAgIEV2ZW50V3JhcHBlciA9IF90aGlzJHByb3BzJGNvbXBvbmVudC5ldmVudFdyYXBwZXIsXG4gICAgICAgIHNsb3RTdGFydCA9IF90aGlzJHByb3BzLnNsb3RTdGFydCxcbiAgICAgICAgc2xvdEVuZCA9IF90aGlzJHByb3BzLnNsb3RFbmQsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgICBkZWxldGUgcHJvcHMucmVzaXphYmxlO1xuICAgIHZhciB0aXRsZSA9IGFjY2Vzc29ycy50aXRsZShldmVudCk7XG4gICAgdmFyIHRvb2x0aXAgPSBhY2Nlc3NvcnMudG9vbHRpcChldmVudCk7XG4gICAgdmFyIGVuZCA9IGFjY2Vzc29ycy5lbmQoZXZlbnQpO1xuICAgIHZhciBzdGFydCA9IGFjY2Vzc29ycy5zdGFydChldmVudCk7XG4gICAgdmFyIGFsbERheSA9IGFjY2Vzc29ycy5hbGxEYXkoZXZlbnQpO1xuICAgIHZhciBzaG93QXNBbGxEYXkgPSBpc0FsbERheSB8fCBhbGxEYXkgfHwgbG9jYWxpemVyLmRpZmYoc3RhcnQsIGxvY2FsaXplci5jZWlsKGVuZCwgJ2RheScpLCAnZGF5JykgPiAxO1xuICAgIHZhciB1c2VyUHJvcHMgPSBnZXR0ZXJzLmV2ZW50UHJvcChldmVudCwgc3RhcnQsIGVuZCwgc2VsZWN0ZWQpO1xuICAgIHZhciBjb250ZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInJiYy1ldmVudC1jb250ZW50XCIsXG4gICAgICB0aXRsZTogdG9vbHRpcCB8fCB1bmRlZmluZWRcbiAgICB9LCBFdmVudCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEV2ZW50LCB7XG4gICAgICBldmVudDogZXZlbnQsXG4gICAgICBjb250aW51ZXNQcmlvcjogY29udGludWVzUHJpb3IsXG4gICAgICBjb250aW51ZXNBZnRlcjogY29udGludWVzQWZ0ZXIsXG4gICAgICB0aXRsZTogdGl0bGUsXG4gICAgICBpc0FsbERheTogYWxsRGF5LFxuICAgICAgbG9jYWxpemVyOiBsb2NhbGl6ZXIsXG4gICAgICBzbG90U3RhcnQ6IHNsb3RTdGFydCxcbiAgICAgIHNsb3RFbmQ6IHNsb3RFbmRcbiAgICB9KSA6IHRpdGxlKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRXZlbnRXcmFwcGVyLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgdHlwZTogXCJkYXRlXCJcbiAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICB0YWJJbmRleDogMCxcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgdXNlclByb3BzLnN0eWxlLCBzdHlsZSksXG4gICAgICBjbGFzc05hbWU6IGNsc3goJ3JiYy1ldmVudCcsIGNsYXNzTmFtZSwgdXNlclByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAncmJjLXNlbGVjdGVkJzogc2VsZWN0ZWQsXG4gICAgICAgICdyYmMtZXZlbnQtYWxsZGF5Jzogc2hvd0FzQWxsRGF5LFxuICAgICAgICAncmJjLWV2ZW50LWNvbnRpbnVlcy1wcmlvcic6IGNvbnRpbnVlc1ByaW9yLFxuICAgICAgICAncmJjLWV2ZW50LWNvbnRpbnVlcy1hZnRlcic6IGNvbnRpbnVlc0FmdGVyXG4gICAgICB9KSxcbiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICByZXR1cm4gb25TZWxlY3QgJiYgb25TZWxlY3QoZXZlbnQsIGUpO1xuICAgICAgfSxcbiAgICAgIG9uRG91YmxlQ2xpY2s6IGZ1bmN0aW9uIG9uRG91YmxlQ2xpY2soZSkge1xuICAgICAgICByZXR1cm4gX29uRG91YmxlQ2xpY2sgJiYgX29uRG91YmxlQ2xpY2soZXZlbnQsIGUpO1xuICAgICAgfSxcbiAgICAgIG9uS2V5UHJlc3M6IGZ1bmN0aW9uIG9uS2V5UHJlc3MoZSkge1xuICAgICAgICByZXR1cm4gX29uS2V5UHJlc3MgJiYgX29uS2V5UHJlc3MoZXZlbnQsIGUpO1xuICAgICAgfVxuICAgIH0pLCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihjb250ZW50KSA6IGNvbnRlbnQpKTtcbiAgfTtcblxuICByZXR1cm4gRXZlbnRDZWxsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5FdmVudENlbGwucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBldmVudDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBzbG90U3RhcnQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBzbG90RW5kOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgcmVzaXphYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuICBpc0FsbERheTogUHJvcFR5cGVzLmJvb2wsXG4gIGNvbnRpbnVlc1ByaW9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29udGludWVzQWZ0ZXI6IFByb3BUeXBlcy5ib29sLFxuICBhY2Nlc3NvcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY29tcG9uZW50czogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBnZXR0ZXJzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2FsaXplcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvbkRvdWJsZUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25LZXlQcmVzczogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblxuZnVuY3Rpb24gaXNTZWxlY3RlZChldmVudCwgc2VsZWN0ZWQpIHtcbiAgaWYgKCFldmVudCB8fCBzZWxlY3RlZCA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBpc0VxdWFsJDEoZXZlbnQsIHNlbGVjdGVkKTtcbn1cbmZ1bmN0aW9uIHNsb3RXaWR0aChyb3dCb3gsIHNsb3RzKSB7XG4gIHZhciByb3dXaWR0aCA9IHJvd0JveC5yaWdodCAtIHJvd0JveC5sZWZ0O1xuICB2YXIgY2VsbFdpZHRoID0gcm93V2lkdGggLyBzbG90cztcbiAgcmV0dXJuIGNlbGxXaWR0aDtcbn1cbmZ1bmN0aW9uIGdldFNsb3RBdFgocm93Qm94LCB4LCBydGwsIHNsb3RzKSB7XG4gIHZhciBjZWxsV2lkdGggPSBzbG90V2lkdGgocm93Qm94LCBzbG90cyk7XG4gIHJldHVybiBydGwgPyBzbG90cyAtIDEgLSBNYXRoLmZsb29yKCh4IC0gcm93Qm94LmxlZnQpIC8gY2VsbFdpZHRoKSA6IE1hdGguZmxvb3IoKHggLSByb3dCb3gubGVmdCkgLyBjZWxsV2lkdGgpO1xufVxuZnVuY3Rpb24gcG9pbnRJbkJveChib3gsIF9yZWYpIHtcbiAgdmFyIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55O1xuICByZXR1cm4geSA+PSBib3gudG9wICYmIHkgPD0gYm94LmJvdHRvbSAmJiB4ID49IGJveC5sZWZ0ICYmIHggPD0gYm94LnJpZ2h0O1xufVxuZnVuY3Rpb24gZGF0ZUNlbGxTZWxlY3Rpb24oc3RhcnQsIHJvd0JveCwgYm94LCBzbG90cywgcnRsKSB7XG4gIHZhciBzdGFydElkeCA9IC0xO1xuICB2YXIgZW5kSWR4ID0gLTE7XG4gIHZhciBsYXN0U2xvdElkeCA9IHNsb3RzIC0gMTtcbiAgdmFyIGNlbGxXaWR0aCA9IHNsb3RXaWR0aChyb3dCb3gsIHNsb3RzKTsgLy8gY2VsbCB1bmRlciB0aGUgbW91c2VcblxuICB2YXIgY3VycmVudFNsb3QgPSBnZXRTbG90QXRYKHJvd0JveCwgYm94LngsIHJ0bCwgc2xvdHMpOyAvLyBJZGVudGlmeSByb3cgYXMgZWl0aGVyIHRoZSBpbml0aWFsIHJvd1xuICAvLyBvciB0aGUgcm93IHVuZGVyIHRoZSBjdXJyZW50IG1vdXNlIHBvaW50XG5cbiAgdmFyIGlzQ3VycmVudFJvdyA9IHJvd0JveC50b3AgPCBib3gueSAmJiByb3dCb3guYm90dG9tID4gYm94Lnk7XG4gIHZhciBpc1N0YXJ0Um93ID0gcm93Qm94LnRvcCA8IHN0YXJ0LnkgJiYgcm93Qm94LmJvdHRvbSA+IHN0YXJ0Lnk7IC8vIHRoaXMgcm93J3MgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IHBvaW50XG5cbiAgdmFyIGlzQWJvdmVTdGFydCA9IHN0YXJ0LnkgPiByb3dCb3guYm90dG9tO1xuICB2YXIgaXNCZWxvd1N0YXJ0ID0gcm93Qm94LnRvcCA+IHN0YXJ0Lnk7XG4gIHZhciBpc0JldHdlZW4gPSBib3gudG9wIDwgcm93Qm94LnRvcCAmJiBib3guYm90dG9tID4gcm93Qm94LmJvdHRvbTsgLy8gdGhpcyByb3cgaXMgYmV0d2VlbiB0aGUgY3VycmVudCBhbmQgc3RhcnQgcm93cywgc28gZW50aXJlbHkgc2VsZWN0ZWRcblxuICBpZiAoaXNCZXR3ZWVuKSB7XG4gICAgc3RhcnRJZHggPSAwO1xuICAgIGVuZElkeCA9IGxhc3RTbG90SWR4O1xuICB9XG5cbiAgaWYgKGlzQ3VycmVudFJvdykge1xuICAgIGlmIChpc0JlbG93U3RhcnQpIHtcbiAgICAgIHN0YXJ0SWR4ID0gMDtcbiAgICAgIGVuZElkeCA9IGN1cnJlbnRTbG90O1xuICAgIH0gZWxzZSBpZiAoaXNBYm92ZVN0YXJ0KSB7XG4gICAgICBzdGFydElkeCA9IGN1cnJlbnRTbG90O1xuICAgICAgZW5kSWR4ID0gbGFzdFNsb3RJZHg7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzU3RhcnRSb3cpIHtcbiAgICAvLyBzZWxlY3QgdGhlIGNlbGwgdW5kZXIgdGhlIGluaXRpYWwgcG9pbnRcbiAgICBzdGFydElkeCA9IGVuZElkeCA9IHJ0bCA/IGxhc3RTbG90SWR4IC0gTWF0aC5mbG9vcigoc3RhcnQueCAtIHJvd0JveC5sZWZ0KSAvIGNlbGxXaWR0aCkgOiBNYXRoLmZsb29yKChzdGFydC54IC0gcm93Qm94LmxlZnQpIC8gY2VsbFdpZHRoKTtcblxuICAgIGlmIChpc0N1cnJlbnRSb3cpIHtcbiAgICAgIGlmIChjdXJyZW50U2xvdCA8IHN0YXJ0SWR4KSBzdGFydElkeCA9IGN1cnJlbnRTbG90O2Vsc2UgZW5kSWR4ID0gY3VycmVudFNsb3Q7IC8vc2VsZWN0IGN1cnJlbnQgcmFuZ2VcbiAgICB9IGVsc2UgaWYgKHN0YXJ0LnkgPCBib3gueSkge1xuICAgICAgLy8gdGhlIGN1cnJlbnQgcm93IGlzIGJlbG93IHN0YXJ0IHJvd1xuICAgICAgLy8gc2VsZWN0IGNlbGxzIHRvIHRoZSByaWdodCBvZiB0aGUgc3RhcnQgY2VsbFxuICAgICAgZW5kSWR4ID0gbGFzdFNsb3RJZHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHNlbGVjdCBjZWxscyB0byB0aGUgbGVmdCBvZiB0aGUgc3RhcnQgY2VsbFxuICAgICAgc3RhcnRJZHggPSAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhcnRJZHg6IHN0YXJ0SWR4LFxuICAgIGVuZElkeDogZW5kSWR4XG4gIH07XG59XG5cbnZhciBQb3B1cCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQb3B1cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9wdXAoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBvcHVwLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRwb3B1cE9mZnMgPSBfdGhpcyRwcm9wcy5wb3B1cE9mZnNldCxcbiAgICAgICAgcG9wdXBPZmZzZXQgPSBfdGhpcyRwcm9wcyRwb3B1cE9mZnMgPT09IHZvaWQgMCA/IDUgOiBfdGhpcyRwcm9wcyRwb3B1cE9mZnMsXG4gICAgICAgIHBvcHBlclJlZiA9IF90aGlzJHByb3BzLnBvcHBlclJlZixcbiAgICAgICAgX2dldE9mZnNldCA9IGdldE9mZnNldChwb3BwZXJSZWYuY3VycmVudCksXG4gICAgICAgIHRvcCA9IF9nZXRPZmZzZXQudG9wLFxuICAgICAgICBsZWZ0ID0gX2dldE9mZnNldC5sZWZ0LFxuICAgICAgICB3aWR0aCA9IF9nZXRPZmZzZXQud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF9nZXRPZmZzZXQuaGVpZ2h0LFxuICAgICAgICB2aWV3Qm90dG9tID0gd2luZG93LmlubmVySGVpZ2h0ICsgZ2V0U2Nyb2xsVG9wKHdpbmRvdyksXG4gICAgICAgIHZpZXdSaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoICsgZ2V0U2Nyb2xsTGVmdCh3aW5kb3cpLFxuICAgICAgICBib3R0b20gPSB0b3AgKyBoZWlnaHQsXG4gICAgICAgIHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuXG4gICAgaWYgKGJvdHRvbSA+IHZpZXdCb3R0b20gfHwgcmlnaHQgPiB2aWV3UmlnaHQpIHtcbiAgICAgIHZhciB0b3BPZmZzZXQsIGxlZnRPZmZzZXQ7XG4gICAgICBpZiAoYm90dG9tID4gdmlld0JvdHRvbSkgdG9wT2Zmc2V0ID0gYm90dG9tIC0gdmlld0JvdHRvbSArIChwb3B1cE9mZnNldC55IHx8ICtwb3B1cE9mZnNldCB8fCAwKTtcbiAgICAgIGlmIChyaWdodCA+IHZpZXdSaWdodCkgbGVmdE9mZnNldCA9IHJpZ2h0IC0gdmlld1JpZ2h0ICsgKHBvcHVwT2Zmc2V0LnggfHwgK3BvcHVwT2Zmc2V0IHx8IDApO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHRvcE9mZnNldDogdG9wT2Zmc2V0LFxuICAgICAgICBsZWZ0T2Zmc2V0OiBsZWZ0T2Zmc2V0XG4gICAgICB9KTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBldmVudHMgPSBfdGhpcyRwcm9wczIuZXZlbnRzLFxuICAgICAgICBzZWxlY3RlZCA9IF90aGlzJHByb3BzMi5zZWxlY3RlZCxcbiAgICAgICAgZ2V0dGVycyA9IF90aGlzJHByb3BzMi5nZXR0ZXJzLFxuICAgICAgICBhY2Nlc3NvcnMgPSBfdGhpcyRwcm9wczIuYWNjZXNzb3JzLFxuICAgICAgICBjb21wb25lbnRzID0gX3RoaXMkcHJvcHMyLmNvbXBvbmVudHMsXG4gICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHMyLm9uU2VsZWN0LFxuICAgICAgICBvbkRvdWJsZUNsaWNrID0gX3RoaXMkcHJvcHMyLm9uRG91YmxlQ2xpY2ssXG4gICAgICAgIG9uS2V5UHJlc3MgPSBfdGhpcyRwcm9wczIub25LZXlQcmVzcyxcbiAgICAgICAgc2xvdFN0YXJ0ID0gX3RoaXMkcHJvcHMyLnNsb3RTdGFydCxcbiAgICAgICAgc2xvdEVuZCA9IF90aGlzJHByb3BzMi5zbG90RW5kLFxuICAgICAgICBsb2NhbGl6ZXIgPSBfdGhpcyRwcm9wczIubG9jYWxpemVyLFxuICAgICAgICBwb3BwZXJSZWYgPSBfdGhpcyRwcm9wczIucG9wcGVyUmVmO1xuICAgIHZhciB3aWR0aCA9IHRoaXMucHJvcHMucG9zaXRpb24ud2lkdGgsXG4gICAgICAgIHRvcE9mZnNldCA9ICh0aGlzLnN0YXRlIHx8IHt9KS50b3BPZmZzZXQgfHwgMCxcbiAgICAgICAgbGVmdE9mZnNldCA9ICh0aGlzLnN0YXRlIHx8IHt9KS5sZWZ0T2Zmc2V0IHx8IDA7XG4gICAgdmFyIHN0eWxlID0ge1xuICAgICAgdG9wOiAtdG9wT2Zmc2V0LFxuICAgICAgbGVmdDogLWxlZnRPZmZzZXQsXG4gICAgICBtaW5XaWR0aDogd2lkdGggKyB3aWR0aCAvIDJcbiAgICB9O1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuc3R5bGUsIHN0eWxlKSxcbiAgICAgIGNsYXNzTmFtZTogXCJyYmMtb3ZlcmxheVwiLFxuICAgICAgcmVmOiBwb3BwZXJSZWZcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwicmJjLW92ZXJsYXktaGVhZGVyXCJcbiAgICB9LCBsb2NhbGl6ZXIuZm9ybWF0KHNsb3RTdGFydCwgJ2RheUhlYWRlckZvcm1hdCcpKSwgZXZlbnRzLm1hcChmdW5jdGlvbiAoZXZlbnQsIGlkeCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEV2ZW50Q2VsbCwge1xuICAgICAgICBrZXk6IGlkeCxcbiAgICAgICAgdHlwZTogXCJwb3B1cFwiLFxuICAgICAgICBsb2NhbGl6ZXI6IGxvY2FsaXplcixcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICBnZXR0ZXJzOiBnZXR0ZXJzLFxuICAgICAgICBvblNlbGVjdDogb25TZWxlY3QsXG4gICAgICAgIGFjY2Vzc29yczogYWNjZXNzb3JzLFxuICAgICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLFxuICAgICAgICBvbkRvdWJsZUNsaWNrOiBvbkRvdWJsZUNsaWNrLFxuICAgICAgICBvbktleVByZXNzOiBvbktleVByZXNzLFxuICAgICAgICBjb250aW51ZXNQcmlvcjogbG9jYWxpemVyLmx0KGFjY2Vzc29ycy5lbmQoZXZlbnQpLCBzbG90U3RhcnQsICdkYXknKSxcbiAgICAgICAgY29udGludWVzQWZ0ZXI6IGxvY2FsaXplci5ndGUoYWNjZXNzb3JzLnN0YXJ0KGV2ZW50KSwgc2xvdEVuZCwgJ2RheScpLFxuICAgICAgICBzbG90U3RhcnQ6IHNsb3RTdGFydCxcbiAgICAgICAgc2xvdEVuZDogc2xvdEVuZCxcbiAgICAgICAgc2VsZWN0ZWQ6IGlzU2VsZWN0ZWQoZXZlbnQsIHNlbGVjdGVkKSxcbiAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICBvbkRyYWdTdGFydDogZnVuY3Rpb24gb25EcmFnU3RhcnQoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmhhbmRsZURyYWdTdGFydChldmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRHJhZ0VuZDogZnVuY3Rpb24gb25EcmFnRW5kKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUG9wdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblBvcHVwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgcG9zaXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gIHBvcHVwT2Zmc2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgeTogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuICBldmVudHM6IFByb3BUeXBlcy5hcnJheSxcbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIGFjY2Vzc29yczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjb21wb25lbnRzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGdldHRlcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgbG9jYWxpemVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Eb3VibGVDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uS2V5UHJlc3M6IFByb3BUeXBlcy5mdW5jLFxuICBoYW5kbGVEcmFnU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuICBzaG93OiBQcm9wVHlwZXMuZnVuYyxcbiAgc2xvdFN0YXJ0OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgc2xvdEVuZDogUHJvcFR5cGVzLm51bWJlcixcbiAgcG9wcGVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuRWxlbWVudFxuICB9KV0pXG59IDoge307XG4vKipcbiAqIFRoZSBPdmVybGF5IGNvbXBvbmVudCwgb2YgcmVhY3Qtb3ZlcmxheXMsIGNyZWF0ZXMgYSByZWYgdGhhdCBpcyBwYXNzZWQgdG8gdGhlIFBvcHVwLCBhbmRcbiAqIHJlcXVpcmVzIHByb3BlciByZWYgZm9yd2FyZGluZyB0byBiZSB1c2VkIHdpdGhvdXQgZXJyb3JcbiAqL1xuXG52YXIgUG9wdXAkMSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQb3B1cCwgX2V4dGVuZHMoe1xuICAgIHBvcHBlclJlZjogcmVmXG4gIH0sIHByb3BzKSk7XG59KTtcblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCB0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgdGFyZ2V0ID0gZG9jdW1lbnQ7XG4gIH1cblxuICByZXR1cm4gbGlzdGVuKHRhcmdldCwgdHlwZSwgaGFuZGxlciwge1xuICAgIHBhc3NpdmU6IGZhbHNlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc092ZXJDb250YWluZXIoY29udGFpbmVyLCB4LCB5KSB7XG4gIHJldHVybiAhY29udGFpbmVyIHx8IGNvbnRhaW5zKGNvbnRhaW5lciwgZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh4LCB5KSk7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50Tm9kZUZyb21Qb2ludChub2RlLCBfcmVmKSB7XG4gIHZhciBjbGllbnRYID0gX3JlZi5jbGllbnRYLFxuICAgICAgY2xpZW50WSA9IF9yZWYuY2xpZW50WTtcbiAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoY2xpZW50WCwgY2xpZW50WSk7XG4gIHJldHVybiBjbG9zZXN0KHRhcmdldCwgJy5yYmMtZXZlbnQnLCBub2RlKTtcbn1cbmZ1bmN0aW9uIGlzRXZlbnQobm9kZSwgYm91bmRzKSB7XG4gIHJldHVybiAhIWdldEV2ZW50Tm9kZUZyb21Qb2ludChub2RlLCBib3VuZHMpO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudENvb3JkaW5hdGVzKGUpIHtcbiAgdmFyIHRhcmdldCA9IGU7XG5cbiAgaWYgKGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoKSB7XG4gICAgdGFyZ2V0ID0gZS50b3VjaGVzWzBdO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjbGllbnRYOiB0YXJnZXQuY2xpZW50WCxcbiAgICBjbGllbnRZOiB0YXJnZXQuY2xpZW50WSxcbiAgICBwYWdlWDogdGFyZ2V0LnBhZ2VYLFxuICAgIHBhZ2VZOiB0YXJnZXQucGFnZVlcbiAgfTtcbn1cblxudmFyIGNsaWNrVG9sZXJhbmNlID0gNTtcbnZhciBjbGlja0ludGVydmFsID0gMjUwO1xuXG52YXIgU2VsZWN0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VsZWN0aW9uKG5vZGUsIF90ZW1wKSB7XG4gICAgdmFyIF9yZWYyID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIF9yZWYyJGdsb2JhbCA9IF9yZWYyLmdsb2JhbCxcbiAgICAgICAgZ2xvYmFsID0gX3JlZjIkZ2xvYmFsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGdsb2JhbCxcbiAgICAgICAgX3JlZjIkbG9uZ1ByZXNzVGhyZXNoID0gX3JlZjIubG9uZ1ByZXNzVGhyZXNob2xkLFxuICAgICAgICBsb25nUHJlc3NUaHJlc2hvbGQgPSBfcmVmMiRsb25nUHJlc3NUaHJlc2ggPT09IHZvaWQgMCA/IDI1MCA6IF9yZWYyJGxvbmdQcmVzc1RocmVzaDtcblxuICAgIHRoaXMuaXNEZXRhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuY29udGFpbmVyID0gbm9kZTtcbiAgICB0aGlzLmdsb2JhbE1vdXNlID0gIW5vZGUgfHwgZ2xvYmFsO1xuICAgIHRoaXMubG9uZ1ByZXNzVGhyZXNob2xkID0gbG9uZ1ByZXNzVGhyZXNob2xkO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5faGFuZGxlSW5pdGlhbEV2ZW50ID0gdGhpcy5faGFuZGxlSW5pdGlhbEV2ZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlTW92ZUV2ZW50ID0gdGhpcy5faGFuZGxlTW92ZUV2ZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlVGVybWluYXRpbmdFdmVudCA9IHRoaXMuX2hhbmRsZVRlcm1pbmF0aW5nRXZlbnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9rZXlMaXN0ZW5lciA9IHRoaXMuX2tleUxpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fZHJvcEZyb21PdXRzaWRlTGlzdGVuZXIgPSB0aGlzLl9kcm9wRnJvbU91dHNpZGVMaXN0ZW5lci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2RyYWdPdmVyRnJvbU91dHNpZGVMaXN0ZW5lciA9IHRoaXMuX2RyYWdPdmVyRnJvbU91dHNpZGVMaXN0ZW5lci5iaW5kKHRoaXMpOyAvLyBGaXhlcyBhbiBpT1MgMTAgYnVnIHdoZXJlIHNjcm9sbGluZyBjb3VsZCBub3QgYmUgcHJldmVudGVkIG9uIHRoZSB3aW5kb3cuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21ldGFmaXp6eS9mbGlja2l0eS9pc3N1ZXMvNDU3I2lzc3VlY29tbWVudC0yNTQ1MDEzNTZcblxuICAgIHRoaXMuX3JlbW92ZVRvdWNoTW92ZVdpbmRvd0xpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZnVuY3Rpb24gKCkge30sIHdpbmRvdyk7XG4gICAgdGhpcy5fcmVtb3ZlS2V5RG93bkxpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2tleUxpc3RlbmVyKTtcbiAgICB0aGlzLl9yZW1vdmVLZXlVcExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9rZXlMaXN0ZW5lcik7XG4gICAgdGhpcy5fcmVtb3ZlRHJvcEZyb21PdXRzaWRlTGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5fZHJvcEZyb21PdXRzaWRlTGlzdGVuZXIpO1xuICAgIHRoaXMuX3JlbW92ZURyYWdPdmVyRnJvbU91dHNpZGVMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgdGhpcy5fZHJhZ092ZXJGcm9tT3V0c2lkZUxpc3RlbmVyKTtcblxuICAgIHRoaXMuX2FkZEluaXRpYWxFdmVudExpc3RlbmVyKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2VsZWN0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ub24gPSBmdW5jdGlvbiBvbih0eXBlLCBoYW5kbGVyKSB7XG4gICAgdmFyIGhhbmRsZXJzID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdIHx8ICh0aGlzLl9saXN0ZW5lcnNbdHlwZV0gPSBbXSk7XG4gICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIHZhciBpZHggPSBoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgICAgICBpZiAoaWR4ICE9PSAtMSkgaGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQ7XG4gICAgdmFyIGhhbmRsZXJzID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdIHx8IFtdO1xuICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHJlc3VsdCA9IGZuLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8udGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93bigpIHtcbiAgICB0aGlzLmlzRGV0YWNoZWQgPSB0cnVlO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fcmVtb3ZlVG91Y2hNb3ZlV2luZG93TGlzdGVuZXIgJiYgdGhpcy5fcmVtb3ZlVG91Y2hNb3ZlV2luZG93TGlzdGVuZXIoKTtcbiAgICB0aGlzLl9yZW1vdmVJbml0aWFsRXZlbnRMaXN0ZW5lciAmJiB0aGlzLl9yZW1vdmVJbml0aWFsRXZlbnRMaXN0ZW5lcigpO1xuICAgIHRoaXMuX3JlbW92ZUVuZExpc3RlbmVyICYmIHRoaXMuX3JlbW92ZUVuZExpc3RlbmVyKCk7XG4gICAgdGhpcy5fb25Fc2NMaXN0ZW5lciAmJiB0aGlzLl9vbkVzY0xpc3RlbmVyKCk7XG4gICAgdGhpcy5fcmVtb3ZlTW92ZUxpc3RlbmVyICYmIHRoaXMuX3JlbW92ZU1vdmVMaXN0ZW5lcigpO1xuICAgIHRoaXMuX3JlbW92ZUtleVVwTGlzdGVuZXIgJiYgdGhpcy5fcmVtb3ZlS2V5VXBMaXN0ZW5lcigpO1xuICAgIHRoaXMuX3JlbW92ZUtleURvd25MaXN0ZW5lciAmJiB0aGlzLl9yZW1vdmVLZXlEb3duTGlzdGVuZXIoKTtcbiAgICB0aGlzLl9yZW1vdmVEcm9wRnJvbU91dHNpZGVMaXN0ZW5lciAmJiB0aGlzLl9yZW1vdmVEcm9wRnJvbU91dHNpZGVMaXN0ZW5lcigpO1xuICAgIHRoaXMuX3JlbW92ZURyYWdPdmVyRnJvbU91dHNpZGVMaXN0ZW5lciAmJiB0aGlzLl9yZW1vdmVEcmFnT3ZlckZyb21PdXRzaWRlTGlzdGVuZXIoKTtcbiAgfTtcblxuICBfcHJvdG8uaXNTZWxlY3RlZCA9IGZ1bmN0aW9uIGlzU2VsZWN0ZWQobm9kZSkge1xuICAgIHZhciBib3ggPSB0aGlzLl9zZWxlY3RSZWN0O1xuICAgIGlmICghYm94IHx8ICF0aGlzLnNlbGVjdGluZykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBvYmplY3RzQ29sbGlkZShib3gsIGdldEJvdW5kc0Zvck5vZGUobm9kZSkpO1xuICB9O1xuXG4gIF9wcm90by5maWx0ZXIgPSBmdW5jdGlvbiBmaWx0ZXIoaXRlbXMpIHtcbiAgICB2YXIgYm94ID0gdGhpcy5fc2VsZWN0UmVjdDsgLy9ub3Qgc2VsZWN0aW5nXG5cbiAgICBpZiAoIWJveCB8fCAhdGhpcy5zZWxlY3RpbmcpIHJldHVybiBbXTtcbiAgICByZXR1cm4gaXRlbXMuZmlsdGVyKHRoaXMuaXNTZWxlY3RlZCwgdGhpcyk7XG4gIH0gLy8gQWRkcyBhIGxpc3RlbmVyIHRoYXQgd2lsbCBjYWxsIHRoZSBoYW5kbGVyIG9ubHkgYWZ0ZXIgdGhlIHVzZXIgaGFzIHByZXNzZWQgb24gdGhlIHNjcmVlblxuICAvLyB3aXRob3V0IG1vdmluZyB0aGVpciBmaW5nZXIgZm9yIDI1MG1zLlxuICA7XG5cbiAgX3Byb3RvLl9hZGRMb25nUHJlc3NMaXN0ZW5lciA9IGZ1bmN0aW9uIF9hZGRMb25nUHJlc3NMaXN0ZW5lcihoYW5kbGVyLCBpbml0aWFsRXZlbnQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHRpbWVyID0gbnVsbDtcbiAgICB2YXIgcmVtb3ZlVG91Y2hNb3ZlTGlzdGVuZXIgPSBudWxsO1xuICAgIHZhciByZW1vdmVUb3VjaEVuZExpc3RlbmVyID0gbnVsbDtcblxuICAgIHZhciBoYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydChpbml0aWFsRXZlbnQpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgaGFuZGxlcihpbml0aWFsRXZlbnQpO1xuICAgICAgfSwgX3RoaXMubG9uZ1ByZXNzVGhyZXNob2xkKTtcbiAgICAgIHJlbW92ZVRvdWNoTW92ZUxpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2xlYW51cCgpO1xuICAgICAgfSk7XG4gICAgICByZW1vdmVUb3VjaEVuZExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjbGVhbnVwKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIHJlbW92ZVRvdWNoU3RhcnRMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVUb3VjaFN0YXJ0KTtcblxuICAgIHZhciBjbGVhbnVwID0gZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgIGlmICh0aW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVtb3ZlVG91Y2hNb3ZlTGlzdGVuZXIpIHtcbiAgICAgICAgcmVtb3ZlVG91Y2hNb3ZlTGlzdGVuZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbW92ZVRvdWNoRW5kTGlzdGVuZXIpIHtcbiAgICAgICAgcmVtb3ZlVG91Y2hFbmRMaXN0ZW5lcigpO1xuICAgICAgfVxuXG4gICAgICB0aW1lciA9IG51bGw7XG4gICAgICByZW1vdmVUb3VjaE1vdmVMaXN0ZW5lciA9IG51bGw7XG4gICAgICByZW1vdmVUb3VjaEVuZExpc3RlbmVyID0gbnVsbDtcbiAgICB9O1xuXG4gICAgaWYgKGluaXRpYWxFdmVudCkge1xuICAgICAgaGFuZGxlVG91Y2hTdGFydChpbml0aWFsRXZlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgICByZW1vdmVUb3VjaFN0YXJ0TGlzdGVuZXIoKTtcbiAgICB9O1xuICB9IC8vIExpc3RlbiBmb3IgbW91c2Vkb3duIGFuZCB0b3VjaHN0YXJ0IGV2ZW50cy4gV2hlbiBvbmUgaXMgcmVjZWl2ZWQsIGRpc2FibGUgdGhlIG90aGVyIGFuZCBzZXR1cFxuICAvLyBmdXR1cmUgZXZlbnQgaGFuZGxpbmcgYmFzZWQgb24gdGhlIHR5cGUgb2YgZXZlbnQuXG4gIDtcblxuICBfcHJvdG8uX2FkZEluaXRpYWxFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gX2FkZEluaXRpYWxFdmVudExpc3RlbmVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHJlbW92ZU1vdXNlRG93bkxpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzMi5fcmVtb3ZlSW5pdGlhbEV2ZW50TGlzdGVuZXIoKTtcblxuICAgICAgX3RoaXMyLl9oYW5kbGVJbml0aWFsRXZlbnQoZSk7XG5cbiAgICAgIF90aGlzMi5fcmVtb3ZlSW5pdGlhbEV2ZW50TGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBfdGhpczIuX2hhbmRsZUluaXRpYWxFdmVudCk7XG4gICAgfSk7XG4gICAgdmFyIHJlbW92ZVRvdWNoU3RhcnRMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMyLl9yZW1vdmVJbml0aWFsRXZlbnRMaXN0ZW5lcigpO1xuXG4gICAgICBfdGhpczIuX3JlbW92ZUluaXRpYWxFdmVudExpc3RlbmVyID0gX3RoaXMyLl9hZGRMb25nUHJlc3NMaXN0ZW5lcihfdGhpczIuX2hhbmRsZUluaXRpYWxFdmVudCwgZSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9yZW1vdmVJbml0aWFsRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZU1vdXNlRG93bkxpc3RlbmVyKCk7XG4gICAgICByZW1vdmVUb3VjaFN0YXJ0TGlzdGVuZXIoKTtcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5fZHJvcEZyb21PdXRzaWRlTGlzdGVuZXIgPSBmdW5jdGlvbiBfZHJvcEZyb21PdXRzaWRlTGlzdGVuZXIoZSkge1xuICAgIHZhciBfZ2V0RXZlbnRDb29yZGluYXRlcyA9IGdldEV2ZW50Q29vcmRpbmF0ZXMoZSksXG4gICAgICAgIHBhZ2VYID0gX2dldEV2ZW50Q29vcmRpbmF0ZXMucGFnZVgsXG4gICAgICAgIHBhZ2VZID0gX2dldEV2ZW50Q29vcmRpbmF0ZXMucGFnZVksXG4gICAgICAgIGNsaWVudFggPSBfZ2V0RXZlbnRDb29yZGluYXRlcy5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gX2dldEV2ZW50Q29vcmRpbmF0ZXMuY2xpZW50WTtcblxuICAgIHRoaXMuZW1pdCgnZHJvcEZyb21PdXRzaWRlJywge1xuICAgICAgeDogcGFnZVgsXG4gICAgICB5OiBwYWdlWSxcbiAgICAgIGNsaWVudFg6IGNsaWVudFgsXG4gICAgICBjbGllbnRZOiBjbGllbnRZXG4gICAgfSk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9O1xuXG4gIF9wcm90by5fZHJhZ092ZXJGcm9tT3V0c2lkZUxpc3RlbmVyID0gZnVuY3Rpb24gX2RyYWdPdmVyRnJvbU91dHNpZGVMaXN0ZW5lcihlKSB7XG4gICAgdmFyIF9nZXRFdmVudENvb3JkaW5hdGVzMiA9IGdldEV2ZW50Q29vcmRpbmF0ZXMoZSksXG4gICAgICAgIHBhZ2VYID0gX2dldEV2ZW50Q29vcmRpbmF0ZXMyLnBhZ2VYLFxuICAgICAgICBwYWdlWSA9IF9nZXRFdmVudENvb3JkaW5hdGVzMi5wYWdlWSxcbiAgICAgICAgY2xpZW50WCA9IF9nZXRFdmVudENvb3JkaW5hdGVzMi5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gX2dldEV2ZW50Q29vcmRpbmF0ZXMyLmNsaWVudFk7XG5cbiAgICB0aGlzLmVtaXQoJ2RyYWdPdmVyRnJvbU91dHNpZGUnLCB7XG4gICAgICB4OiBwYWdlWCxcbiAgICAgIHk6IHBhZ2VZLFxuICAgICAgY2xpZW50WDogY2xpZW50WCxcbiAgICAgIGNsaWVudFk6IGNsaWVudFlcbiAgICB9KTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVJbml0aWFsRXZlbnQgPSBmdW5jdGlvbiBfaGFuZGxlSW5pdGlhbEV2ZW50KGUpIHtcbiAgICBpZiAodGhpcy5pc0RldGFjaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIF9nZXRFdmVudENvb3JkaW5hdGVzMyA9IGdldEV2ZW50Q29vcmRpbmF0ZXMoZSksXG4gICAgICAgIGNsaWVudFggPSBfZ2V0RXZlbnRDb29yZGluYXRlczMuY2xpZW50WCxcbiAgICAgICAgY2xpZW50WSA9IF9nZXRFdmVudENvb3JkaW5hdGVzMy5jbGllbnRZLFxuICAgICAgICBwYWdlWCA9IF9nZXRFdmVudENvb3JkaW5hdGVzMy5wYWdlWCxcbiAgICAgICAgcGFnZVkgPSBfZ2V0RXZlbnRDb29yZGluYXRlczMucGFnZVk7XG5cbiAgICB2YXIgbm9kZSA9IHRoaXMuY29udGFpbmVyKCksXG4gICAgICAgIGNvbGxpZGVzLFxuICAgICAgICBvZmZzZXREYXRhOyAvLyBSaWdodCBjbGlja3NcblxuICAgIGlmIChlLndoaWNoID09PSAzIHx8IGUuYnV0dG9uID09PSAyIHx8ICFpc092ZXJDb250YWluZXIobm9kZSwgY2xpZW50WCwgY2xpZW50WSkpIHJldHVybjtcblxuICAgIGlmICghdGhpcy5nbG9iYWxNb3VzZSAmJiBub2RlICYmICFjb250YWlucyhub2RlLCBlLnRhcmdldCkpIHtcbiAgICAgIHZhciBfbm9ybWFsaXplRGlzdGFuY2UgPSBub3JtYWxpemVEaXN0YW5jZSgwKSxcbiAgICAgICAgICB0b3AgPSBfbm9ybWFsaXplRGlzdGFuY2UudG9wLFxuICAgICAgICAgIGxlZnQgPSBfbm9ybWFsaXplRGlzdGFuY2UubGVmdCxcbiAgICAgICAgICBib3R0b20gPSBfbm9ybWFsaXplRGlzdGFuY2UuYm90dG9tLFxuICAgICAgICAgIHJpZ2h0ID0gX25vcm1hbGl6ZURpc3RhbmNlLnJpZ2h0O1xuXG4gICAgICBvZmZzZXREYXRhID0gZ2V0Qm91bmRzRm9yTm9kZShub2RlKTtcbiAgICAgIGNvbGxpZGVzID0gb2JqZWN0c0NvbGxpZGUoe1xuICAgICAgICB0b3A6IG9mZnNldERhdGEudG9wIC0gdG9wLFxuICAgICAgICBsZWZ0OiBvZmZzZXREYXRhLmxlZnQgLSBsZWZ0LFxuICAgICAgICBib3R0b206IG9mZnNldERhdGEuYm90dG9tICsgYm90dG9tLFxuICAgICAgICByaWdodDogb2Zmc2V0RGF0YS5yaWdodCArIHJpZ2h0XG4gICAgICB9LCB7XG4gICAgICAgIHRvcDogcGFnZVksXG4gICAgICAgIGxlZnQ6IHBhZ2VYXG4gICAgICB9KTtcbiAgICAgIGlmICghY29sbGlkZXMpIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5lbWl0KCdiZWZvcmVTZWxlY3QnLCB0aGlzLl9pbml0aWFsRXZlbnREYXRhID0ge1xuICAgICAgaXNUb3VjaDogL150b3VjaC8udGVzdChlLnR5cGUpLFxuICAgICAgeDogcGFnZVgsXG4gICAgICB5OiBwYWdlWSxcbiAgICAgIGNsaWVudFg6IGNsaWVudFgsXG4gICAgICBjbGllbnRZOiBjbGllbnRZXG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICBjYXNlICdtb3VzZWRvd24nOlxuICAgICAgICB0aGlzLl9yZW1vdmVFbmRMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9oYW5kbGVUZXJtaW5hdGluZ0V2ZW50KTtcbiAgICAgICAgdGhpcy5fb25Fc2NMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVUZXJtaW5hdGluZ0V2ZW50KTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlTW92ZUxpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlTW92ZUV2ZW50KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3RvdWNoc3RhcnQnOlxuICAgICAgICB0aGlzLl9oYW5kbGVNb3ZlRXZlbnQoZSk7XG5cbiAgICAgICAgdGhpcy5fcmVtb3ZlRW5kTGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuX2hhbmRsZVRlcm1pbmF0aW5nRXZlbnQpO1xuICAgICAgICB0aGlzLl9yZW1vdmVNb3ZlTGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVNb3ZlRXZlbnQpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVUZXJtaW5hdGluZ0V2ZW50ID0gZnVuY3Rpb24gX2hhbmRsZVRlcm1pbmF0aW5nRXZlbnQoZSkge1xuICAgIHZhciBfZ2V0RXZlbnRDb29yZGluYXRlczQgPSBnZXRFdmVudENvb3JkaW5hdGVzKGUpLFxuICAgICAgICBwYWdlWCA9IF9nZXRFdmVudENvb3JkaW5hdGVzNC5wYWdlWCxcbiAgICAgICAgcGFnZVkgPSBfZ2V0RXZlbnRDb29yZGluYXRlczQucGFnZVk7XG5cbiAgICB0aGlzLnNlbGVjdGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlbW92ZUVuZExpc3RlbmVyICYmIHRoaXMuX3JlbW92ZUVuZExpc3RlbmVyKCk7XG4gICAgdGhpcy5fcmVtb3ZlTW92ZUxpc3RlbmVyICYmIHRoaXMuX3JlbW92ZU1vdmVMaXN0ZW5lcigpO1xuICAgIGlmICghdGhpcy5faW5pdGlhbEV2ZW50RGF0YSkgcmV0dXJuO1xuICAgIHZhciBpblJvb3QgPSAhdGhpcy5jb250YWluZXIgfHwgY29udGFpbnModGhpcy5jb250YWluZXIoKSwgZS50YXJnZXQpO1xuICAgIHZhciBib3VuZHMgPSB0aGlzLl9zZWxlY3RSZWN0O1xuICAgIHZhciBjbGljayA9IHRoaXMuaXNDbGljayhwYWdlWCwgcGFnZVkpO1xuICAgIHRoaXMuX2luaXRpYWxFdmVudERhdGEgPSBudWxsO1xuXG4gICAgaWYgKGUua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdCgncmVzZXQnKTtcbiAgICB9XG5cbiAgICBpZiAoIWluUm9vdCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdCgncmVzZXQnKTtcbiAgICB9XG5cbiAgICBpZiAoY2xpY2sgJiYgaW5Sb290KSB7XG4gICAgICByZXR1cm4gdGhpcy5faGFuZGxlQ2xpY2tFdmVudChlKTtcbiAgICB9IC8vIFVzZXIgZHJhZy1jbGlja2VkIGluIHRoZSBTZWxlY3RhYmxlIGFyZWFcblxuXG4gICAgaWYgKCFjbGljaykgcmV0dXJuIHRoaXMuZW1pdCgnc2VsZWN0JywgYm91bmRzKTtcbiAgfTtcblxuICBfcHJvdG8uX2hhbmRsZUNsaWNrRXZlbnQgPSBmdW5jdGlvbiBfaGFuZGxlQ2xpY2tFdmVudChlKSB7XG4gICAgdmFyIF9nZXRFdmVudENvb3JkaW5hdGVzNSA9IGdldEV2ZW50Q29vcmRpbmF0ZXMoZSksXG4gICAgICAgIHBhZ2VYID0gX2dldEV2ZW50Q29vcmRpbmF0ZXM1LnBhZ2VYLFxuICAgICAgICBwYWdlWSA9IF9nZXRFdmVudENvb3JkaW5hdGVzNS5wYWdlWSxcbiAgICAgICAgY2xpZW50WCA9IF9nZXRFdmVudENvb3JkaW5hdGVzNS5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gX2dldEV2ZW50Q29vcmRpbmF0ZXM1LmNsaWVudFk7XG5cbiAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICBpZiAodGhpcy5fbGFzdENsaWNrRGF0YSAmJiBub3cgLSB0aGlzLl9sYXN0Q2xpY2tEYXRhLnRpbWVzdGFtcCA8IGNsaWNrSW50ZXJ2YWwpIHtcbiAgICAgIC8vIERvdWJsZSBjbGljayBldmVudFxuICAgICAgdGhpcy5fbGFzdENsaWNrRGF0YSA9IG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5lbWl0KCdkb3VibGVDbGljaycsIHtcbiAgICAgICAgeDogcGFnZVgsXG4gICAgICAgIHk6IHBhZ2VZLFxuICAgICAgICBjbGllbnRYOiBjbGllbnRYLFxuICAgICAgICBjbGllbnRZOiBjbGllbnRZXG4gICAgICB9KTtcbiAgICB9IC8vIENsaWNrIGV2ZW50XG5cblxuICAgIHRoaXMuX2xhc3RDbGlja0RhdGEgPSB7XG4gICAgICB0aW1lc3RhbXA6IG5vd1xuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnY2xpY2snLCB7XG4gICAgICB4OiBwYWdlWCxcbiAgICAgIHk6IHBhZ2VZLFxuICAgICAgY2xpZW50WDogY2xpZW50WCxcbiAgICAgIGNsaWVudFk6IGNsaWVudFlcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX2hhbmRsZU1vdmVFdmVudCA9IGZ1bmN0aW9uIF9oYW5kbGVNb3ZlRXZlbnQoZSkge1xuICAgIGlmICh0aGlzLl9pbml0aWFsRXZlbnREYXRhID09PSBudWxsIHx8IHRoaXMuaXNEZXRhY2hlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRfaW5pdGlhbEV2ZW50RGEgPSB0aGlzLl9pbml0aWFsRXZlbnREYXRhLFxuICAgICAgICB4ID0gX3RoaXMkX2luaXRpYWxFdmVudERhLngsXG4gICAgICAgIHkgPSBfdGhpcyRfaW5pdGlhbEV2ZW50RGEueTtcblxuICAgIHZhciBfZ2V0RXZlbnRDb29yZGluYXRlczYgPSBnZXRFdmVudENvb3JkaW5hdGVzKGUpLFxuICAgICAgICBwYWdlWCA9IF9nZXRFdmVudENvb3JkaW5hdGVzNi5wYWdlWCxcbiAgICAgICAgcGFnZVkgPSBfZ2V0RXZlbnRDb29yZGluYXRlczYucGFnZVk7XG5cbiAgICB2YXIgdyA9IE1hdGguYWJzKHggLSBwYWdlWCk7XG4gICAgdmFyIGggPSBNYXRoLmFicyh5IC0gcGFnZVkpO1xuICAgIHZhciBsZWZ0ID0gTWF0aC5taW4ocGFnZVgsIHgpLFxuICAgICAgICB0b3AgPSBNYXRoLm1pbihwYWdlWSwgeSksXG4gICAgICAgIG9sZCA9IHRoaXMuc2VsZWN0aW5nOyAvLyBQcmV2ZW50IGVtaXR0aW5nIHNlbGVjdFN0YXJ0IGV2ZW50IHVudGlsIG1vdXNlIGlzIG1vdmVkLlxuICAgIC8vIGluIENocm9tZSBvbiBXaW5kb3dzLCBtb3VzZU1vdmUgZXZlbnQgbWF5IGJlIGZpcmVkIGp1c3QgYWZ0ZXIgbW91c2VEb3duIGV2ZW50LlxuXG4gICAgaWYgKHRoaXMuaXNDbGljayhwYWdlWCwgcGFnZVkpICYmICFvbGQgJiYgISh3IHx8IGgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZWxlY3RpbmcgPSB0cnVlO1xuICAgIHRoaXMuX3NlbGVjdFJlY3QgPSB7XG4gICAgICB0b3A6IHRvcCxcbiAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICB4OiBwYWdlWCxcbiAgICAgIHk6IHBhZ2VZLFxuICAgICAgcmlnaHQ6IGxlZnQgKyB3LFxuICAgICAgYm90dG9tOiB0b3AgKyBoXG4gICAgfTtcblxuICAgIGlmICghb2xkKSB7XG4gICAgICB0aGlzLmVtaXQoJ3NlbGVjdFN0YXJ0JywgdGhpcy5faW5pdGlhbEV2ZW50RGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzQ2xpY2socGFnZVgsIHBhZ2VZKSkgdGhpcy5lbWl0KCdzZWxlY3RpbmcnLCB0aGlzLl9zZWxlY3RSZWN0KTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG5cbiAgX3Byb3RvLl9rZXlMaXN0ZW5lciA9IGZ1bmN0aW9uIF9rZXlMaXN0ZW5lcihlKSB7XG4gICAgdGhpcy5jdHJsID0gZS5tZXRhS2V5IHx8IGUuY3RybEtleTtcbiAgfTtcblxuICBfcHJvdG8uaXNDbGljayA9IGZ1bmN0aW9uIGlzQ2xpY2socGFnZVgsIHBhZ2VZKSB7XG4gICAgdmFyIF90aGlzJF9pbml0aWFsRXZlbnREYTIgPSB0aGlzLl9pbml0aWFsRXZlbnREYXRhLFxuICAgICAgICB4ID0gX3RoaXMkX2luaXRpYWxFdmVudERhMi54LFxuICAgICAgICB5ID0gX3RoaXMkX2luaXRpYWxFdmVudERhMi55LFxuICAgICAgICBpc1RvdWNoID0gX3RoaXMkX2luaXRpYWxFdmVudERhMi5pc1RvdWNoO1xuICAgIHJldHVybiAhaXNUb3VjaCAmJiBNYXRoLmFicyhwYWdlWCAtIHgpIDw9IGNsaWNrVG9sZXJhbmNlICYmIE1hdGguYWJzKHBhZ2VZIC0geSkgPD0gY2xpY2tUb2xlcmFuY2U7XG4gIH07XG5cbiAgcmV0dXJuIFNlbGVjdGlvbjtcbn0oKTtcbi8qKlxuICogUmVzb2x2ZSB0aGUgZGlzYW5jZSBwcm9wIGZyb20gZWl0aGVyIGFuIEludCBvciBhbiBPYmplY3RcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpc3RhbmNlKGRpc3RhbmNlKSB7XG4gIGlmIChkaXN0YW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgZGlzdGFuY2UgPSAwO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBkaXN0YW5jZSAhPT0gJ29iamVjdCcpIGRpc3RhbmNlID0ge1xuICAgIHRvcDogZGlzdGFuY2UsXG4gICAgbGVmdDogZGlzdGFuY2UsXG4gICAgcmlnaHQ6IGRpc3RhbmNlLFxuICAgIGJvdHRvbTogZGlzdGFuY2VcbiAgfTtcbiAgcmV0dXJuIGRpc3RhbmNlO1xufVxuLyoqXG4gKiBHaXZlbiB0d28gb2JqZWN0cyBjb250YWluaW5nIFwidG9wXCIsIFwibGVmdFwiLCBcIm9mZnNldFdpZHRoXCIgYW5kIFwib2Zmc2V0SGVpZ2h0XCJcbiAqIHByb3BlcnRpZXMsIGRldGVybWluZSBpZiB0aGV5IGNvbGxpZGUuXG4gKiBAcGFyYW0gIHtPYmplY3R8SFRNTEVsZW1lbnR9IGFcbiAqIEBwYXJhbSAge09iamVjdHxIVE1MRWxlbWVudH0gYlxuICogQHJldHVybiB7Ym9vbH1cbiAqL1xuXG5cbmZ1bmN0aW9uIG9iamVjdHNDb2xsaWRlKG5vZGVBLCBub2RlQiwgdG9sZXJhbmNlKSB7XG4gIGlmICh0b2xlcmFuY2UgPT09IHZvaWQgMCkge1xuICAgIHRvbGVyYW5jZSA9IDA7XG4gIH1cblxuICB2YXIgX2dldEJvdW5kc0Zvck5vZGUgPSBnZXRCb3VuZHNGb3JOb2RlKG5vZGVBKSxcbiAgICAgIGFUb3AgPSBfZ2V0Qm91bmRzRm9yTm9kZS50b3AsXG4gICAgICBhTGVmdCA9IF9nZXRCb3VuZHNGb3JOb2RlLmxlZnQsXG4gICAgICBfZ2V0Qm91bmRzRm9yTm9kZSRyaWcgPSBfZ2V0Qm91bmRzRm9yTm9kZS5yaWdodCxcbiAgICAgIGFSaWdodCA9IF9nZXRCb3VuZHNGb3JOb2RlJHJpZyA9PT0gdm9pZCAwID8gYUxlZnQgOiBfZ2V0Qm91bmRzRm9yTm9kZSRyaWcsXG4gICAgICBfZ2V0Qm91bmRzRm9yTm9kZSRib3QgPSBfZ2V0Qm91bmRzRm9yTm9kZS5ib3R0b20sXG4gICAgICBhQm90dG9tID0gX2dldEJvdW5kc0Zvck5vZGUkYm90ID09PSB2b2lkIDAgPyBhVG9wIDogX2dldEJvdW5kc0Zvck5vZGUkYm90O1xuXG4gIHZhciBfZ2V0Qm91bmRzRm9yTm9kZTIgPSBnZXRCb3VuZHNGb3JOb2RlKG5vZGVCKSxcbiAgICAgIGJUb3AgPSBfZ2V0Qm91bmRzRm9yTm9kZTIudG9wLFxuICAgICAgYkxlZnQgPSBfZ2V0Qm91bmRzRm9yTm9kZTIubGVmdCxcbiAgICAgIF9nZXRCb3VuZHNGb3JOb2RlMiRyaSA9IF9nZXRCb3VuZHNGb3JOb2RlMi5yaWdodCxcbiAgICAgIGJSaWdodCA9IF9nZXRCb3VuZHNGb3JOb2RlMiRyaSA9PT0gdm9pZCAwID8gYkxlZnQgOiBfZ2V0Qm91bmRzRm9yTm9kZTIkcmksXG4gICAgICBfZ2V0Qm91bmRzRm9yTm9kZTIkYm8gPSBfZ2V0Qm91bmRzRm9yTm9kZTIuYm90dG9tLFxuICAgICAgYkJvdHRvbSA9IF9nZXRCb3VuZHNGb3JOb2RlMiRibyA9PT0gdm9pZCAwID8gYlRvcCA6IF9nZXRCb3VuZHNGb3JOb2RlMiRibztcblxuICByZXR1cm4gIShhQm90dG9tIC0gdG9sZXJhbmNlIDwgYlRvcCB8fCAvLyAnYScgdG9wIGRvZXNuJ3QgdG91Y2ggJ2InIGJvdHRvbVxuICBhVG9wICsgdG9sZXJhbmNlID4gYkJvdHRvbSB8fCAvLyAnYScgcmlnaHQgZG9lc24ndCB0b3VjaCAnYicgbGVmdFxuICBhUmlnaHQgLSB0b2xlcmFuY2UgPCBiTGVmdCB8fCAvLyAnYScgbGVmdCBkb2Vzbid0IHRvdWNoICdiJyByaWdodFxuICBhTGVmdCArIHRvbGVyYW5jZSA+IGJSaWdodCk7XG59XG4vKipcbiAqIEdpdmVuIGEgbm9kZSwgZ2V0IGV2ZXJ5dGhpbmcgbmVlZGVkIHRvIGNhbGN1bGF0ZSBpdHMgYm91bmRhcmllc1xuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3VuZHNGb3JOb2RlKG5vZGUpIHtcbiAgaWYgKCFub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkgcmV0dXJuIG5vZGU7XG4gIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIGxlZnQgPSByZWN0LmxlZnQgKyBwYWdlT2Zmc2V0KCdsZWZ0JyksXG4gICAgICB0b3AgPSByZWN0LnRvcCArIHBhZ2VPZmZzZXQoJ3RvcCcpO1xuICByZXR1cm4ge1xuICAgIHRvcDogdG9wLFxuICAgIGxlZnQ6IGxlZnQsXG4gICAgcmlnaHQ6IChub2RlLm9mZnNldFdpZHRoIHx8IDApICsgbGVmdCxcbiAgICBib3R0b206IChub2RlLm9mZnNldEhlaWdodCB8fCAwKSArIHRvcFxuICB9O1xufVxuXG5mdW5jdGlvbiBwYWdlT2Zmc2V0KGRpcikge1xuICBpZiAoZGlyID09PSAnbGVmdCcpIHJldHVybiB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0IHx8IDA7XG4gIGlmIChkaXIgPT09ICd0b3AnKSByZXR1cm4gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIHx8IDA7XG59XG5cbnZhciBCYWNrZ3JvdW5kQ2VsbHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQmFja2dyb3VuZENlbGxzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCYWNrZ3JvdW5kQ2VsbHMocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNlbGVjdGluZzogZmFsc2VcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCYWNrZ3JvdW5kQ2VsbHMucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuc2VsZWN0YWJsZSAmJiB0aGlzLl9zZWxlY3RhYmxlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5fdGVhcmRvd25TZWxlY3RhYmxlKCk7XG4gIH07XG5cbiAgX3Byb3RvLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5zZWxlY3RhYmxlICYmICF0aGlzLnByb3BzLnNlbGVjdGFibGUpIHRoaXMuX3NlbGVjdGFibGUoKTtcbiAgICBpZiAoIW5leHRQcm9wcy5zZWxlY3RhYmxlICYmIHRoaXMucHJvcHMuc2VsZWN0YWJsZSkgdGhpcy5fdGVhcmRvd25TZWxlY3RhYmxlKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICByYW5nZSA9IF90aGlzJHByb3BzLnJhbmdlLFxuICAgICAgICBnZXROb3cgPSBfdGhpcyRwcm9wcy5nZXROb3csXG4gICAgICAgIGdldHRlcnMgPSBfdGhpcyRwcm9wcy5nZXR0ZXJzLFxuICAgICAgICBjdXJyZW50RGF0ZSA9IF90aGlzJHByb3BzLmRhdGUsXG4gICAgICAgIFdyYXBwZXIgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRzLmRhdGVDZWxsV3JhcHBlcixcbiAgICAgICAgbG9jYWxpemVyID0gX3RoaXMkcHJvcHMubG9jYWxpemVyO1xuICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIHNlbGVjdGluZyA9IF90aGlzJHN0YXRlLnNlbGVjdGluZyxcbiAgICAgICAgc3RhcnRJZHggPSBfdGhpcyRzdGF0ZS5zdGFydElkeCxcbiAgICAgICAgZW5kSWR4ID0gX3RoaXMkc3RhdGUuZW5kSWR4O1xuICAgIHZhciBjdXJyZW50ID0gZ2V0Tm93KCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJyYmMtcm93LWJnXCJcbiAgICB9LCByYW5nZS5tYXAoZnVuY3Rpb24gKGRhdGUsIGluZGV4KSB7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBzZWxlY3RpbmcgJiYgaW5kZXggPj0gc3RhcnRJZHggJiYgaW5kZXggPD0gZW5kSWR4O1xuXG4gICAgICB2YXIgX2dldHRlcnMkZGF5UHJvcCA9IGdldHRlcnMuZGF5UHJvcChkYXRlKSxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfZ2V0dGVycyRkYXlQcm9wLmNsYXNzTmFtZSxcbiAgICAgICAgICBzdHlsZSA9IF9nZXR0ZXJzJGRheVByb3Auc3R5bGU7XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVyLCB7XG4gICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgIHZhbHVlOiBkYXRlLFxuICAgICAgICByYW5nZTogcmFuZ2VcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBjbGFzc05hbWU6IGNsc3goJ3JiYy1kYXktYmcnLCBjbGFzc05hbWUsIHNlbGVjdGVkICYmICdyYmMtc2VsZWN0ZWQtY2VsbCcsIGxvY2FsaXplci5pc1NhbWVEYXRlKGRhdGUsIGN1cnJlbnQpICYmICdyYmMtdG9kYXknLCBjdXJyZW50RGF0ZSAmJiBsb2NhbGl6ZXIubmVxKGN1cnJlbnREYXRlLCBkYXRlLCAnbW9udGgnKSAmJiAncmJjLW9mZi1yYW5nZS1iZycpXG4gICAgICB9KSk7XG4gICAgfSkpO1xuICB9O1xuXG4gIF9wcm90by5fc2VsZWN0YWJsZSA9IGZ1bmN0aW9uIF9zZWxlY3RhYmxlKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIG5vZGUgPSBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLl9zZWxlY3RvciA9IG5ldyBTZWxlY3Rpb24odGhpcy5wcm9wcy5jb250YWluZXIsIHtcbiAgICAgIGxvbmdQcmVzc1RocmVzaG9sZDogdGhpcy5wcm9wcy5sb25nUHJlc3NUaHJlc2hvbGRcbiAgICB9KTtcblxuICAgIHZhciBzZWxlY3RvckNsaWNrc0hhbmRsZXIgPSBmdW5jdGlvbiBzZWxlY3RvckNsaWNrc0hhbmRsZXIocG9pbnQsIGFjdGlvblR5cGUpIHtcbiAgICAgIGlmICghaXNFdmVudChmaW5kRE9NTm9kZShfdGhpczIpLCBwb2ludCkpIHtcbiAgICAgICAgdmFyIHJvd0JveCA9IGdldEJvdW5kc0Zvck5vZGUobm9kZSk7XG4gICAgICAgIHZhciBfdGhpczIkcHJvcHMgPSBfdGhpczIucHJvcHMsXG4gICAgICAgICAgICByYW5nZSA9IF90aGlzMiRwcm9wcy5yYW5nZSxcbiAgICAgICAgICAgIHJ0bCA9IF90aGlzMiRwcm9wcy5ydGw7XG5cbiAgICAgICAgaWYgKHBvaW50SW5Cb3gocm93Qm94LCBwb2ludCkpIHtcbiAgICAgICAgICB2YXIgY3VycmVudENlbGwgPSBnZXRTbG90QXRYKHJvd0JveCwgcG9pbnQueCwgcnRsLCByYW5nZS5sZW5ndGgpO1xuXG4gICAgICAgICAgX3RoaXMyLl9zZWxlY3RTbG90KHtcbiAgICAgICAgICAgIHN0YXJ0SWR4OiBjdXJyZW50Q2VsbCxcbiAgICAgICAgICAgIGVuZElkeDogY3VycmVudENlbGwsXG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvblR5cGUsXG4gICAgICAgICAgICBib3g6IHBvaW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX3RoaXMyLl9pbml0aWFsID0ge307XG5cbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGluZzogZmFsc2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBzZWxlY3Rvci5vbignc2VsZWN0aW5nJywgZnVuY3Rpb24gKGJveCkge1xuICAgICAgdmFyIF90aGlzMiRwcm9wczIgPSBfdGhpczIucHJvcHMsXG4gICAgICAgICAgcmFuZ2UgPSBfdGhpczIkcHJvcHMyLnJhbmdlLFxuICAgICAgICAgIHJ0bCA9IF90aGlzMiRwcm9wczIucnRsO1xuICAgICAgdmFyIHN0YXJ0SWR4ID0gLTE7XG4gICAgICB2YXIgZW5kSWR4ID0gLTE7XG5cbiAgICAgIGlmICghX3RoaXMyLnN0YXRlLnNlbGVjdGluZykge1xuICAgICAgICBub3RpZnkoX3RoaXMyLnByb3BzLm9uU2VsZWN0U3RhcnQsIFtib3hdKTtcbiAgICAgICAgX3RoaXMyLl9pbml0aWFsID0ge1xuICAgICAgICAgIHg6IGJveC54LFxuICAgICAgICAgIHk6IGJveC55XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3Rvci5pc1NlbGVjdGVkKG5vZGUpKSB7XG4gICAgICAgIHZhciBub2RlQm94ID0gZ2V0Qm91bmRzRm9yTm9kZShub2RlKTtcblxuICAgICAgICB2YXIgX2RhdGVDZWxsU2VsZWN0aW9uID0gZGF0ZUNlbGxTZWxlY3Rpb24oX3RoaXMyLl9pbml0aWFsLCBub2RlQm94LCBib3gsIHJhbmdlLmxlbmd0aCwgcnRsKTtcblxuICAgICAgICBzdGFydElkeCA9IF9kYXRlQ2VsbFNlbGVjdGlvbi5zdGFydElkeDtcbiAgICAgICAgZW5kSWR4ID0gX2RhdGVDZWxsU2VsZWN0aW9uLmVuZElkeDtcbiAgICAgIH1cblxuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgc2VsZWN0aW5nOiB0cnVlLFxuICAgICAgICBzdGFydElkeDogc3RhcnRJZHgsXG4gICAgICAgIGVuZElkeDogZW5kSWR4XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBzZWxlY3Rvci5vbignYmVmb3JlU2VsZWN0JywgZnVuY3Rpb24gKGJveCkge1xuICAgICAgaWYgKF90aGlzMi5wcm9wcy5zZWxlY3RhYmxlICE9PSAnaWdub3JlRXZlbnRzJykgcmV0dXJuO1xuICAgICAgcmV0dXJuICFpc0V2ZW50KGZpbmRET01Ob2RlKF90aGlzMiksIGJveCk7XG4gICAgfSk7XG4gICAgc2VsZWN0b3Iub24oJ2NsaWNrJywgZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3JDbGlja3NIYW5kbGVyKHBvaW50LCAnY2xpY2snKTtcbiAgICB9KTtcbiAgICBzZWxlY3Rvci5vbignZG91YmxlQ2xpY2snLCBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvckNsaWNrc0hhbmRsZXIocG9pbnQsICdkb3VibGVDbGljaycpO1xuICAgIH0pO1xuICAgIHNlbGVjdG9yLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoYm91bmRzKSB7XG4gICAgICBfdGhpczIuX3NlbGVjdFNsb3QoX2V4dGVuZHMoe30sIF90aGlzMi5zdGF0ZSwge1xuICAgICAgICBhY3Rpb246ICdzZWxlY3QnLFxuICAgICAgICBib3VuZHM6IGJvdW5kc1xuICAgICAgfSkpO1xuXG4gICAgICBfdGhpczIuX2luaXRpYWwgPSB7fTtcblxuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgc2VsZWN0aW5nOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIG5vdGlmeShfdGhpczIucHJvcHMub25TZWxlY3RFbmQsIFtfdGhpczIuc3RhdGVdKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX3RlYXJkb3duU2VsZWN0YWJsZSA9IGZ1bmN0aW9uIF90ZWFyZG93blNlbGVjdGFibGUoKSB7XG4gICAgaWYgKCF0aGlzLl9zZWxlY3RvcikgcmV0dXJuO1xuXG4gICAgdGhpcy5fc2VsZWN0b3IudGVhcmRvd24oKTtcblxuICAgIHRoaXMuX3NlbGVjdG9yID0gbnVsbDtcbiAgfTtcblxuICBfcHJvdG8uX3NlbGVjdFNsb3QgPSBmdW5jdGlvbiBfc2VsZWN0U2xvdChfcmVmKSB7XG4gICAgdmFyIGVuZElkeCA9IF9yZWYuZW5kSWR4LFxuICAgICAgICBzdGFydElkeCA9IF9yZWYuc3RhcnRJZHgsXG4gICAgICAgIGFjdGlvbiA9IF9yZWYuYWN0aW9uLFxuICAgICAgICBib3VuZHMgPSBfcmVmLmJvdW5kcyxcbiAgICAgICAgYm94ID0gX3JlZi5ib3g7XG4gICAgaWYgKGVuZElkeCAhPT0gLTEgJiYgc3RhcnRJZHggIT09IC0xKSB0aGlzLnByb3BzLm9uU2VsZWN0U2xvdCAmJiB0aGlzLnByb3BzLm9uU2VsZWN0U2xvdCh7XG4gICAgICBzdGFydDogc3RhcnRJZHgsXG4gICAgICBlbmQ6IGVuZElkeCxcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgYm91bmRzOiBib3VuZHMsXG4gICAgICBib3g6IGJveCxcbiAgICAgIHJlc291cmNlSWQ6IHRoaXMucHJvcHMucmVzb3VyY2VJZFxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCYWNrZ3JvdW5kQ2VsbHM7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJhY2tncm91bmRDZWxscy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBnZXROb3c6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldHRlcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY29tcG9uZW50czogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjb250YWluZXI6IFByb3BUeXBlcy5mdW5jLFxuICBkYXlQcm9wR2V0dGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgc2VsZWN0YWJsZTogUHJvcFR5cGVzLm9uZU9mKFt0cnVlLCBmYWxzZSwgJ2lnbm9yZUV2ZW50cyddKSxcbiAgbG9uZ1ByZXNzVGhyZXNob2xkOiBQcm9wVHlwZXMubnVtYmVyLFxuICBvblNlbGVjdFNsb3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uU2VsZWN0RW5kOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3RTdGFydDogUHJvcFR5cGVzLmZ1bmMsXG4gIHJhbmdlOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSksXG4gIHJ0bDogUHJvcFR5cGVzLmJvb2wsXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlc291cmNlSWQ6IFByb3BUeXBlcy5hbnksXG4gIGxvY2FsaXplcjogUHJvcFR5cGVzLmFueVxufSA6IHt9O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG5cbnZhciBFdmVudFJvd01peGluID0ge1xuICBwcm9wVHlwZXM6IHtcbiAgICBzbG90TWV0cmljczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHNlbGVjdGVkOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGlzQWxsRGF5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBhY2Nlc3NvcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBsb2NhbGl6ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBjb21wb25lbnRzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgZ2V0dGVyczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkRvdWJsZUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbktleVByZXNzOiBQcm9wVHlwZXMuZnVuY1xuICB9LFxuICBkZWZhdWx0UHJvcHM6IHtcbiAgICBzZWdtZW50czogW10sXG4gICAgc2VsZWN0ZWQ6IHt9XG4gIH0sXG4gIHJlbmRlckV2ZW50OiBmdW5jdGlvbiByZW5kZXJFdmVudChwcm9wcywgZXZlbnQpIHtcbiAgICB2YXIgc2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgXyA9IHByb3BzLmlzQWxsRGF5LFxuICAgICAgICBhY2Nlc3NvcnMgPSBwcm9wcy5hY2Nlc3NvcnMsXG4gICAgICAgIGdldHRlcnMgPSBwcm9wcy5nZXR0ZXJzLFxuICAgICAgICBvblNlbGVjdCA9IHByb3BzLm9uU2VsZWN0LFxuICAgICAgICBvbkRvdWJsZUNsaWNrID0gcHJvcHMub25Eb3VibGVDbGljayxcbiAgICAgICAgb25LZXlQcmVzcyA9IHByb3BzLm9uS2V5UHJlc3MsXG4gICAgICAgIGxvY2FsaXplciA9IHByb3BzLmxvY2FsaXplcixcbiAgICAgICAgc2xvdE1ldHJpY3MgPSBwcm9wcy5zbG90TWV0cmljcyxcbiAgICAgICAgY29tcG9uZW50cyA9IHByb3BzLmNvbXBvbmVudHMsXG4gICAgICAgIHJlc2l6YWJsZSA9IHByb3BzLnJlc2l6YWJsZTtcbiAgICB2YXIgY29udGludWVzUHJpb3IgPSBzbG90TWV0cmljcy5jb250aW51ZXNQcmlvcihldmVudCk7XG4gICAgdmFyIGNvbnRpbnVlc0FmdGVyID0gc2xvdE1ldHJpY3MuY29udGludWVzQWZ0ZXIoZXZlbnQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChFdmVudENlbGwsIHtcbiAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgIGdldHRlcnM6IGdldHRlcnMsXG4gICAgICBsb2NhbGl6ZXI6IGxvY2FsaXplcixcbiAgICAgIGFjY2Vzc29yczogYWNjZXNzb3JzLFxuICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgIG9uU2VsZWN0OiBvblNlbGVjdCxcbiAgICAgIG9uRG91YmxlQ2xpY2s6IG9uRG91YmxlQ2xpY2ssXG4gICAgICBvbktleVByZXNzOiBvbktleVByZXNzLFxuICAgICAgY29udGludWVzUHJpb3I6IGNvbnRpbnVlc1ByaW9yLFxuICAgICAgY29udGludWVzQWZ0ZXI6IGNvbnRpbnVlc0FmdGVyLFxuICAgICAgc2xvdFN0YXJ0OiBzbG90TWV0cmljcy5maXJzdCxcbiAgICAgIHNsb3RFbmQ6IHNsb3RNZXRyaWNzLmxhc3QsXG4gICAgICBzZWxlY3RlZDogaXNTZWxlY3RlZChldmVudCwgc2VsZWN0ZWQpLFxuICAgICAgcmVzaXphYmxlOiByZXNpemFibGVcbiAgICB9KTtcbiAgfSxcbiAgcmVuZGVyU3BhbjogZnVuY3Rpb24gcmVuZGVyU3BhbihzbG90cywgbGVuLCBrZXksIGNvbnRlbnQpIHtcbiAgICBpZiAoY29udGVudCA9PT0gdm9pZCAwKSB7XG4gICAgICBjb250ZW50ID0gJyAnO1xuICAgIH1cblxuICAgIHZhciBwZXIgPSBNYXRoLmFicyhsZW4pIC8gc2xvdHMgKiAxMDAgKyAnJSc7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGtleToga2V5LFxuICAgICAgY2xhc3NOYW1lOiBcInJiYy1yb3ctc2VnbWVudFwiIC8vIElFMTAvMTEgbmVlZCBtYXgtd2lkdGguIGZsZXgtYmFzaXMgZG9lc24ndCByZXNwZWN0IGJveC1zaXppbmdcbiAgICAgICxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIFdlYmtpdEZsZXhCYXNpczogcGVyLFxuICAgICAgICBmbGV4QmFzaXM6IHBlcixcbiAgICAgICAgbWF4V2lkdGg6IHBlclxuICAgICAgfVxuICAgIH0sIGNvbnRlbnQpO1xuICB9XG59O1xuXG52YXIgRXZlbnRSb3cgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRXZlbnRSb3csIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEV2ZW50Um93KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBFdmVudFJvdy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc2VnbWVudHMgPSBfdGhpcyRwcm9wcy5zZWdtZW50cyxcbiAgICAgICAgc2xvdHMgPSBfdGhpcyRwcm9wcy5zbG90TWV0cmljcy5zbG90cyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lO1xuICAgIHZhciBsYXN0RW5kID0gMTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzTmFtZSwgJ3JiYy1yb3cnKVxuICAgIH0sIHNlZ21lbnRzLnJlZHVjZShmdW5jdGlvbiAocm93LCBfcmVmLCBsaSkge1xuICAgICAgdmFyIGV2ZW50ID0gX3JlZi5ldmVudCxcbiAgICAgICAgICBsZWZ0ID0gX3JlZi5sZWZ0LFxuICAgICAgICAgIHJpZ2h0ID0gX3JlZi5yaWdodCxcbiAgICAgICAgICBzcGFuID0gX3JlZi5zcGFuO1xuICAgICAgdmFyIGtleSA9ICdfbHZsXycgKyBsaTtcbiAgICAgIHZhciBnYXAgPSBsZWZ0IC0gbGFzdEVuZDtcbiAgICAgIHZhciBjb250ZW50ID0gRXZlbnRSb3dNaXhpbi5yZW5kZXJFdmVudChfdGhpcy5wcm9wcywgZXZlbnQpO1xuICAgICAgaWYgKGdhcCkgcm93LnB1c2goRXZlbnRSb3dNaXhpbi5yZW5kZXJTcGFuKHNsb3RzLCBnYXAsIGtleSArIFwiX2dhcFwiKSk7XG4gICAgICByb3cucHVzaChFdmVudFJvd01peGluLnJlbmRlclNwYW4oc2xvdHMsIHNwYW4sIGtleSwgY29udGVudCkpO1xuICAgICAgbGFzdEVuZCA9IHJpZ2h0ICsgMTtcbiAgICAgIHJldHVybiByb3c7XG4gICAgfSwgW10pKTtcbiAgfTtcblxuICByZXR1cm4gRXZlbnRSb3c7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkV2ZW50Um93LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IF9leHRlbmRzKHtcbiAgc2VnbWVudHM6IFByb3BUeXBlcy5hcnJheVxufSwgRXZlbnRSb3dNaXhpbi5wcm9wVHlwZXMpIDoge307XG5FdmVudFJvdy5kZWZhdWx0UHJvcHMgPSBfZXh0ZW5kcyh7fSwgRXZlbnRSb3dNaXhpbi5kZWZhdWx0UHJvcHMpO1xuXG5mdW5jdGlvbiBlbmRPZlJhbmdlKF9yZWYpIHtcbiAgdmFyIGRhdGVSYW5nZSA9IF9yZWYuZGF0ZVJhbmdlLFxuICAgICAgX3JlZiR1bml0ID0gX3JlZi51bml0LFxuICAgICAgdW5pdCA9IF9yZWYkdW5pdCA9PT0gdm9pZCAwID8gJ2RheScgOiBfcmVmJHVuaXQsXG4gICAgICBsb2NhbGl6ZXIgPSBfcmVmLmxvY2FsaXplcjtcbiAgcmV0dXJuIHtcbiAgICBmaXJzdDogZGF0ZVJhbmdlWzBdLFxuICAgIGxhc3Q6IGxvY2FsaXplci5hZGQoZGF0ZVJhbmdlW2RhdGVSYW5nZS5sZW5ndGggLSAxXSwgMSwgdW5pdClcbiAgfTtcbn0gLy8gcHJvcGVybHkgY2FsY3VsYXRpbmcgc2VnbWVudHMgcmVxdWlyZXMgd29ya2luZyB3aXRoIGRhdGVzIGluXG4vLyB0aGUgdGltZXpvbmUgd2UncmUgd29ya2luZyB3aXRoLCBzbyB3ZSB1c2UgdGhlIGxvY2FsaXplclxuXG5mdW5jdGlvbiBldmVudFNlZ21lbnRzKGV2ZW50LCByYW5nZSwgYWNjZXNzb3JzLCBsb2NhbGl6ZXIpIHtcbiAgdmFyIF9lbmRPZlJhbmdlID0gZW5kT2ZSYW5nZSh7XG4gICAgZGF0ZVJhbmdlOiByYW5nZSxcbiAgICBsb2NhbGl6ZXI6IGxvY2FsaXplclxuICB9KSxcbiAgICAgIGZpcnN0ID0gX2VuZE9mUmFuZ2UuZmlyc3QsXG4gICAgICBsYXN0ID0gX2VuZE9mUmFuZ2UubGFzdDtcblxuICB2YXIgc2xvdHMgPSBsb2NhbGl6ZXIuZGlmZihmaXJzdCwgbGFzdCwgJ2RheScpO1xuICB2YXIgc3RhcnQgPSBsb2NhbGl6ZXIubWF4KGxvY2FsaXplci5zdGFydE9mKGFjY2Vzc29ycy5zdGFydChldmVudCksICdkYXknKSwgZmlyc3QpO1xuICB2YXIgZW5kID0gbG9jYWxpemVyLm1pbihsb2NhbGl6ZXIuY2VpbChhY2Nlc3NvcnMuZW5kKGV2ZW50KSwgJ2RheScpLCBsYXN0KTtcbiAgdmFyIHBhZGRpbmcgPSBmaW5kSW5kZXgocmFuZ2UsIGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGxvY2FsaXplci5pc1NhbWVEYXRlKHgsIHN0YXJ0KTtcbiAgfSk7XG4gIHZhciBzcGFuID0gbG9jYWxpemVyLmRpZmYoc3RhcnQsIGVuZCwgJ2RheScpO1xuICBzcGFuID0gTWF0aC5taW4oc3Bhbiwgc2xvdHMpOyAvLyBUaGUgc2VnbWVudE9mZnNldCBpcyBuZWNlc3Nhcnkgd2hlbiBhZGp1c3RpbmcgZm9yIHRpbWV6b25lc1xuICAvLyBhaGVhZCBvZiB0aGUgYnJvd3NlciB0aW1lem9uZVxuXG4gIHNwYW4gPSBNYXRoLm1heChzcGFuIC0gbG9jYWxpemVyLnNlZ21lbnRPZmZzZXQsIDEpO1xuICByZXR1cm4ge1xuICAgIGV2ZW50OiBldmVudCxcbiAgICBzcGFuOiBzcGFuLFxuICAgIGxlZnQ6IHBhZGRpbmcgKyAxLFxuICAgIHJpZ2h0OiBNYXRoLm1heChwYWRkaW5nICsgc3BhbiwgMSlcbiAgfTtcbn1cbmZ1bmN0aW9uIGV2ZW50TGV2ZWxzKHJvd1NlZ21lbnRzLCBsaW1pdCkge1xuICBpZiAobGltaXQgPT09IHZvaWQgMCkge1xuICAgIGxpbWl0ID0gSW5maW5pdHk7XG4gIH1cblxuICB2YXIgaSxcbiAgICAgIGosXG4gICAgICBzZWcsXG4gICAgICBsZXZlbHMgPSBbXSxcbiAgICAgIGV4dHJhID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IHJvd1NlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2VnID0gcm93U2VnbWVudHNbaV07XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgbGV2ZWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAoIXNlZ3NPdmVybGFwKHNlZywgbGV2ZWxzW2pdKSkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGogPj0gbGltaXQpIHtcbiAgICAgIGV4dHJhLnB1c2goc2VnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgKGxldmVsc1tqXSB8fCAobGV2ZWxzW2pdID0gW10pKS5wdXNoKHNlZyk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGxldmVscy5sZW5ndGg7IGkrKykge1xuICAgIGxldmVsc1tpXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5sZWZ0IC0gYi5sZWZ0O1xuICAgIH0pOyAvL2VzbGludC1kaXNhYmxlLWxpbmVcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGV2ZWxzOiBsZXZlbHMsXG4gICAgZXh0cmE6IGV4dHJhXG4gIH07XG59XG5mdW5jdGlvbiBpblJhbmdlKGUsIHN0YXJ0LCBlbmQsIGFjY2Vzc29ycywgbG9jYWxpemVyKSB7XG4gIHZhciBldmVudCA9IHtcbiAgICBzdGFydDogYWNjZXNzb3JzLnN0YXJ0KGUpLFxuICAgIGVuZDogYWNjZXNzb3JzLmVuZChlKVxuICB9O1xuICB2YXIgcmFuZ2UgPSB7XG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIGVuZDogZW5kXG4gIH07XG4gIHJldHVybiBsb2NhbGl6ZXIuaW5FdmVudFJhbmdlKHtcbiAgICBldmVudDogZXZlbnQsXG4gICAgcmFuZ2U6IHJhbmdlXG4gIH0pO1xufVxuZnVuY3Rpb24gc2Vnc092ZXJsYXAoc2VnLCBvdGhlclNlZ3MpIHtcbiAgcmV0dXJuIG90aGVyU2Vncy5zb21lKGZ1bmN0aW9uIChvdGhlclNlZykge1xuICAgIHJldHVybiBvdGhlclNlZy5sZWZ0IDw9IHNlZy5yaWdodCAmJiBvdGhlclNlZy5yaWdodCA+PSBzZWcubGVmdDtcbiAgfSk7XG59XG5mdW5jdGlvbiBzb3J0RXZlbnRzJDEoZXZlbnRBLCBldmVudEIsIGFjY2Vzc29ycywgbG9jYWxpemVyKSB7XG4gIHZhciBldnRBID0ge1xuICAgIHN0YXJ0OiBhY2Nlc3NvcnMuc3RhcnQoZXZlbnRBKSxcbiAgICBlbmQ6IGFjY2Vzc29ycy5lbmQoZXZlbnRBKSxcbiAgICBhbGxEYXk6IGFjY2Vzc29ycy5hbGxEYXkoZXZlbnRBKVxuICB9O1xuICB2YXIgZXZ0QiA9IHtcbiAgICBzdGFydDogYWNjZXNzb3JzLnN0YXJ0KGV2ZW50QiksXG4gICAgZW5kOiBhY2Nlc3NvcnMuZW5kKGV2ZW50QiksXG4gICAgYWxsRGF5OiBhY2Nlc3NvcnMuYWxsRGF5KGV2ZW50QilcbiAgfTtcbiAgcmV0dXJuIGxvY2FsaXplci5zb3J0RXZlbnRzKHtcbiAgICBldnRBOiBldnRBLFxuICAgIGV2dEI6IGV2dEJcbiAgfSk7XG59XG5cbnZhciBpc1NlZ21lbnRJblNsb3QgPSBmdW5jdGlvbiBpc1NlZ21lbnRJblNsb3Qoc2VnLCBzbG90KSB7XG4gIHJldHVybiBzZWcubGVmdCA8PSBzbG90ICYmIHNlZy5yaWdodCA+PSBzbG90O1xufTtcblxudmFyIGV2ZW50c0luU2xvdCA9IGZ1bmN0aW9uIGV2ZW50c0luU2xvdChzZWdtZW50cywgc2xvdCkge1xuICByZXR1cm4gc2VnbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChzZWcpIHtcbiAgICByZXR1cm4gaXNTZWdtZW50SW5TbG90KHNlZywgc2xvdCk7XG4gIH0pLmxlbmd0aDtcbn07XG5cbnZhciBFdmVudEVuZGluZ1JvdyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShFdmVudEVuZGluZ1JvdywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRXZlbnRFbmRpbmdSb3coKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEV2ZW50RW5kaW5nUm93LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHNlZ21lbnRzID0gX3RoaXMkcHJvcHMuc2VnbWVudHMsXG4gICAgICAgIHNsb3RzID0gX3RoaXMkcHJvcHMuc2xvdE1ldHJpY3Muc2xvdHM7XG4gICAgdmFyIHJvd1NlZ21lbnRzID0gZXZlbnRMZXZlbHMoc2VnbWVudHMpLmxldmVsc1swXTtcbiAgICB2YXIgY3VycmVudCA9IDEsXG4gICAgICAgIGxhc3RFbmQgPSAxLFxuICAgICAgICByb3cgPSBbXTtcblxuICAgIHdoaWxlIChjdXJyZW50IDw9IHNsb3RzKSB7XG4gICAgICB2YXIga2V5ID0gJ19sdmxfJyArIGN1cnJlbnQ7XG5cbiAgICAgIHZhciBfcmVmID0gcm93U2VnbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChzZWcpIHtcbiAgICAgICAgcmV0dXJuIGlzU2VnbWVudEluU2xvdChzZWcsIGN1cnJlbnQpO1xuICAgICAgfSlbMF0gfHwge30sXG4gICAgICAgICAgZXZlbnQgPSBfcmVmLmV2ZW50LFxuICAgICAgICAgIGxlZnQgPSBfcmVmLmxlZnQsXG4gICAgICAgICAgcmlnaHQgPSBfcmVmLnJpZ2h0LFxuICAgICAgICAgIHNwYW4gPSBfcmVmLnNwYW47IC8vZXNsaW50LWRpc2FibGUtbGluZVxuXG5cbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgY3VycmVudCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGdhcCA9IE1hdGgubWF4KDAsIGxlZnQgLSBsYXN0RW5kKTtcblxuICAgICAgaWYgKHRoaXMuY2FuUmVuZGVyU2xvdEV2ZW50KGxlZnQsIHNwYW4pKSB7XG4gICAgICAgIHZhciBjb250ZW50ID0gRXZlbnRSb3dNaXhpbi5yZW5kZXJFdmVudCh0aGlzLnByb3BzLCBldmVudCk7XG5cbiAgICAgICAgaWYgKGdhcCkge1xuICAgICAgICAgIHJvdy5wdXNoKEV2ZW50Um93TWl4aW4ucmVuZGVyU3BhbihzbG90cywgZ2FwLCBrZXkgKyAnX2dhcCcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJvdy5wdXNoKEV2ZW50Um93TWl4aW4ucmVuZGVyU3BhbihzbG90cywgc3Bhbiwga2V5LCBjb250ZW50KSk7XG4gICAgICAgIGxhc3RFbmQgPSBjdXJyZW50ID0gcmlnaHQgKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGdhcCkge1xuICAgICAgICAgIHJvdy5wdXNoKEV2ZW50Um93TWl4aW4ucmVuZGVyU3BhbihzbG90cywgZ2FwLCBrZXkgKyAnX2dhcCcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJvdy5wdXNoKEV2ZW50Um93TWl4aW4ucmVuZGVyU3BhbihzbG90cywgMSwga2V5LCB0aGlzLnJlbmRlclNob3dNb3JlKHNlZ21lbnRzLCBjdXJyZW50KSkpO1xuICAgICAgICBsYXN0RW5kID0gY3VycmVudCA9IGN1cnJlbnQgKyAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwicmJjLXJvd1wiXG4gICAgfSwgcm93KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuUmVuZGVyU2xvdEV2ZW50ID0gZnVuY3Rpb24gY2FuUmVuZGVyU2xvdEV2ZW50KHNsb3QsIHNwYW4pIHtcbiAgICB2YXIgc2VnbWVudHMgPSB0aGlzLnByb3BzLnNlZ21lbnRzO1xuICAgIHJldHVybiByYW5nZSQxKHNsb3QsIHNsb3QgKyBzcGFuKS5ldmVyeShmdW5jdGlvbiAocykge1xuICAgICAgdmFyIGNvdW50ID0gZXZlbnRzSW5TbG90KHNlZ21lbnRzLCBzKTtcbiAgICAgIHJldHVybiBjb3VudCA9PT0gMTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyU2hvd01vcmUgPSBmdW5jdGlvbiByZW5kZXJTaG93TW9yZShzZWdtZW50cywgc2xvdCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgbG9jYWxpemVyID0gdGhpcy5wcm9wcy5sb2NhbGl6ZXI7XG4gICAgdmFyIGNvdW50ID0gZXZlbnRzSW5TbG90KHNlZ21lbnRzLCBzbG90KTtcbiAgICByZXR1cm4gY291bnQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAga2V5OiAnc21fJyArIHNsb3QsXG4gICAgICBocmVmOiBcIiNcIixcbiAgICAgIGNsYXNzTmFtZTogJ3JiYy1zaG93LW1vcmUnLFxuICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zaG93TW9yZShzbG90LCBlKTtcbiAgICAgIH1cbiAgICB9LCBsb2NhbGl6ZXIubWVzc2FnZXMuc2hvd01vcmUoY291bnQpKSA6IGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5zaG93TW9yZSA9IGZ1bmN0aW9uIHNob3dNb3JlKHNsb3QsIGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLnByb3BzLm9uU2hvd01vcmUoc2xvdCwgZS50YXJnZXQpO1xuICB9O1xuXG4gIHJldHVybiBFdmVudEVuZGluZ1Jvdztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRXZlbnRFbmRpbmdSb3cucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gX2V4dGVuZHMoe1xuICBzZWdtZW50czogUHJvcFR5cGVzLmFycmF5LFxuICBzbG90czogUHJvcFR5cGVzLm51bWJlcixcbiAgb25TaG93TW9yZTogUHJvcFR5cGVzLmZ1bmNcbn0sIEV2ZW50Um93TWl4aW4ucHJvcFR5cGVzKSA6IHt9O1xuRXZlbnRFbmRpbmdSb3cuZGVmYXVsdFByb3BzID0gX2V4dGVuZHMoe30sIEV2ZW50Um93TWl4aW4uZGVmYXVsdFByb3BzKTtcblxudmFyIFNjcm9sbGFibGVXZWVrV3JhcHBlciA9IGZ1bmN0aW9uIFNjcm9sbGFibGVXZWVrV3JhcHBlcihfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcInJiYy1yb3ctY29udGVudC1zY3JvbGwtY29udGFpbmVyXCJcbiAgfSwgY2hpbGRyZW4pO1xufTtcblxudmFyIGlzU2VnbWVudEluU2xvdCQxID0gZnVuY3Rpb24gaXNTZWdtZW50SW5TbG90KHNlZywgc2xvdCkge1xuICByZXR1cm4gc2VnLmxlZnQgPD0gc2xvdCAmJiBzZWcucmlnaHQgPj0gc2xvdDtcbn07XG5cbnZhciBpc0VxdWFsID0gZnVuY3Rpb24gaXNFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhWzBdLnJhbmdlID09PSBiWzBdLnJhbmdlICYmIGFbMF0uZXZlbnRzID09PSBiWzBdLmV2ZW50cztcbn07XG5cbmZ1bmN0aW9uIGdldFNsb3RNZXRyaWNzKCkge1xuICByZXR1cm4gbWVtb2l6ZShmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciByYW5nZSA9IG9wdGlvbnMucmFuZ2UsXG4gICAgICAgIGV2ZW50cyA9IG9wdGlvbnMuZXZlbnRzLFxuICAgICAgICBtYXhSb3dzID0gb3B0aW9ucy5tYXhSb3dzLFxuICAgICAgICBtaW5Sb3dzID0gb3B0aW9ucy5taW5Sb3dzLFxuICAgICAgICBhY2Nlc3NvcnMgPSBvcHRpb25zLmFjY2Vzc29ycyxcbiAgICAgICAgbG9jYWxpemVyID0gb3B0aW9ucy5sb2NhbGl6ZXI7XG5cbiAgICB2YXIgX2VuZE9mUmFuZ2UgPSBlbmRPZlJhbmdlKHtcbiAgICAgIGRhdGVSYW5nZTogcmFuZ2UsXG4gICAgICBsb2NhbGl6ZXI6IGxvY2FsaXplclxuICAgIH0pLFxuICAgICAgICBmaXJzdCA9IF9lbmRPZlJhbmdlLmZpcnN0LFxuICAgICAgICBsYXN0ID0gX2VuZE9mUmFuZ2UubGFzdDtcblxuICAgIHZhciBzZWdtZW50cyA9IGV2ZW50cy5tYXAoZnVuY3Rpb24gKGV2dCkge1xuICAgICAgcmV0dXJuIGV2ZW50U2VnbWVudHMoZXZ0LCByYW5nZSwgYWNjZXNzb3JzLCBsb2NhbGl6ZXIpO1xuICAgIH0pO1xuXG4gICAgdmFyIF9ldmVudExldmVscyA9IGV2ZW50TGV2ZWxzKHNlZ21lbnRzLCBNYXRoLm1heChtYXhSb3dzIC0gMSwgMSkpLFxuICAgICAgICBsZXZlbHMgPSBfZXZlbnRMZXZlbHMubGV2ZWxzLFxuICAgICAgICBleHRyYSA9IF9ldmVudExldmVscy5leHRyYTtcblxuICAgIHdoaWxlIChsZXZlbHMubGVuZ3RoIDwgbWluUm93cykge1xuICAgICAgbGV2ZWxzLnB1c2goW10pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBmaXJzdDogZmlyc3QsXG4gICAgICBsYXN0OiBsYXN0LFxuICAgICAgbGV2ZWxzOiBsZXZlbHMsXG4gICAgICBleHRyYTogZXh0cmEsXG4gICAgICByYW5nZTogcmFuZ2UsXG4gICAgICBzbG90czogcmFuZ2UubGVuZ3RoLFxuICAgICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKGFyZ3MpIHtcbiAgICAgICAgdmFyIG1ldHJpY3MgPSBnZXRTbG90TWV0cmljcygpO1xuICAgICAgICByZXR1cm4gbWV0cmljcyhfZXh0ZW5kcyh7fSwgb3B0aW9ucywgYXJncykpO1xuICAgICAgfSxcbiAgICAgIGdldERhdGVGb3JTbG90OiBmdW5jdGlvbiBnZXREYXRlRm9yU2xvdChzbG90TnVtYmVyKSB7XG4gICAgICAgIHJldHVybiByYW5nZVtzbG90TnVtYmVyXTtcbiAgICAgIH0sXG4gICAgICBnZXRTbG90Rm9yRGF0ZTogZnVuY3Rpb24gZ2V0U2xvdEZvckRhdGUoZGF0ZSkge1xuICAgICAgICByZXR1cm4gcmFuZ2UuZmluZChmdW5jdGlvbiAocikge1xuICAgICAgICAgIHJldHVybiBsb2NhbGl6ZXIuaXNTYW1lRGF0ZShyLCBkYXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZ2V0RXZlbnRzRm9yU2xvdDogZnVuY3Rpb24gZ2V0RXZlbnRzRm9yU2xvdChzbG90KSB7XG4gICAgICAgIHJldHVybiBzZWdtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHNlZykge1xuICAgICAgICAgIHJldHVybiBpc1NlZ21lbnRJblNsb3QkMShzZWcsIHNsb3QpO1xuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKHNlZykge1xuICAgICAgICAgIHJldHVybiBzZWcuZXZlbnQ7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGNvbnRpbnVlc1ByaW9yOiBmdW5jdGlvbiBjb250aW51ZXNQcmlvcihldmVudCkge1xuICAgICAgICByZXR1cm4gbG9jYWxpemVyLmNvbnRpbnVlc1ByaW9yKGFjY2Vzc29ycy5zdGFydChldmVudCksIGZpcnN0KTtcbiAgICAgIH0sXG4gICAgICBjb250aW51ZXNBZnRlcjogZnVuY3Rpb24gY29udGludWVzQWZ0ZXIoZXZlbnQpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gYWNjZXNzb3JzLnN0YXJ0KGV2ZW50KTtcbiAgICAgICAgdmFyIGVuZCA9IGFjY2Vzc29ycy5lbmQoZXZlbnQpO1xuICAgICAgICByZXR1cm4gbG9jYWxpemVyLmNvbnRpbnVlc0FmdGVyKHN0YXJ0LCBlbmQsIGxhc3QpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIGlzRXF1YWwpO1xufVxuXG52YXIgRGF0ZUNvbnRlbnRSb3cgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRGF0ZUNvbnRlbnRSb3csIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERhdGVDb250ZW50Um93KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlU2VsZWN0U2xvdCA9IGZ1bmN0aW9uIChzbG90KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICByYW5nZSA9IF90aGlzJHByb3BzLnJhbmdlLFxuICAgICAgICAgIG9uU2VsZWN0U2xvdCA9IF90aGlzJHByb3BzLm9uU2VsZWN0U2xvdDtcbiAgICAgIG9uU2VsZWN0U2xvdChyYW5nZS5zbGljZShzbG90LnN0YXJ0LCBzbG90LmVuZCArIDEpLCBzbG90KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU2hvd01vcmUgPSBmdW5jdGlvbiAoc2xvdCwgdGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgcmFuZ2UgPSBfdGhpcyRwcm9wczIucmFuZ2UsXG4gICAgICAgICAgb25TaG93TW9yZSA9IF90aGlzJHByb3BzMi5vblNob3dNb3JlO1xuXG4gICAgICB2YXIgbWV0cmljcyA9IF90aGlzLnNsb3RNZXRyaWNzKF90aGlzLnByb3BzKTtcblxuICAgICAgdmFyIHJvdyA9IHFzYShmaW5kRE9NTm9kZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksICcucmJjLXJvdy1iZycpWzBdO1xuICAgICAgdmFyIGNlbGw7XG4gICAgICBpZiAocm93KSBjZWxsID0gcm93LmNoaWxkcmVuW3Nsb3QgLSAxXTtcbiAgICAgIHZhciBldmVudHMgPSBtZXRyaWNzLmdldEV2ZW50c0ZvclNsb3Qoc2xvdCk7XG4gICAgICBvblNob3dNb3JlKGV2ZW50cywgcmFuZ2Vbc2xvdCAtIDFdLCBjZWxsLCBzbG90LCB0YXJnZXQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5jcmVhdGVIZWFkaW5nUmVmID0gZnVuY3Rpb24gKHIpIHtcbiAgICAgIF90aGlzLmhlYWRpbmdSb3cgPSByO1xuICAgIH07XG5cbiAgICBfdGhpcy5jcmVhdGVFdmVudFJlZiA9IGZ1bmN0aW9uIChyKSB7XG4gICAgICBfdGhpcy5ldmVudFJvdyA9IHI7XG4gICAgfTtcblxuICAgIF90aGlzLmdldENvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSBfdGhpcy5wcm9wcy5jb250YWluZXI7XG4gICAgICByZXR1cm4gY29udGFpbmVyID8gY29udGFpbmVyKCkgOiBmaW5kRE9NTm9kZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlckhlYWRpbmdDZWxsID0gZnVuY3Rpb24gKGRhdGUsIGluZGV4KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgcmVuZGVySGVhZGVyID0gX3RoaXMkcHJvcHMzLnJlbmRlckhlYWRlcixcbiAgICAgICAgICBnZXROb3cgPSBfdGhpcyRwcm9wczMuZ2V0Tm93LFxuICAgICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzMy5sb2NhbGl6ZXI7XG4gICAgICByZXR1cm4gcmVuZGVySGVhZGVyKHtcbiAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAga2V5OiBcImhlYWRlcl9cIiArIGluZGV4LFxuICAgICAgICBjbGFzc05hbWU6IGNsc3goJ3JiYy1kYXRlLWNlbGwnLCBsb2NhbGl6ZXIuaXNTYW1lRGF0ZShkYXRlLCBnZXROb3coKSkgJiYgJ3JiYy1ub3cnKVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlckR1bW15ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzNC5jbGFzc05hbWUsXG4gICAgICAgICAgcmFuZ2UgPSBfdGhpcyRwcm9wczQucmFuZ2UsXG4gICAgICAgICAgcmVuZGVySGVhZGVyID0gX3RoaXMkcHJvcHM0LnJlbmRlckhlYWRlcixcbiAgICAgICAgICBzaG93QWxsRXZlbnRzID0gX3RoaXMkcHJvcHM0LnNob3dBbGxFdmVudHM7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsc3goJ3JiYy1yb3ctY29udGVudCcsIHNob3dBbGxFdmVudHMgJiYgJ3JiYy1yb3ctY29udGVudC1zY3JvbGxhYmxlJylcbiAgICAgIH0sIHJlbmRlckhlYWRlciAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyYmMtcm93XCIsXG4gICAgICAgIHJlZjogX3RoaXMuY3JlYXRlSGVhZGluZ1JlZlxuICAgICAgfSwgcmFuZ2UubWFwKF90aGlzLnJlbmRlckhlYWRpbmdDZWxsKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJiYy1yb3dcIixcbiAgICAgICAgcmVmOiBfdGhpcy5jcmVhdGVFdmVudFJlZlxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmJjLXJvdy1zZWdtZW50XCJcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJiYy1ldmVudFwiXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyYmMtZXZlbnQtY29udGVudFwiXG4gICAgICB9LCBcIlxceEEwXCIpKSkpKSk7XG4gICAgfTtcblxuICAgIF90aGlzLnNsb3RNZXRyaWNzID0gZ2V0U2xvdE1ldHJpY3MoKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRGF0ZUNvbnRlbnRSb3cucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSb3dMaW1pdCA9IGZ1bmN0aW9uIGdldFJvd0xpbWl0KCkge1xuICAgIHZhciBldmVudEhlaWdodCA9IGdldEhlaWdodCh0aGlzLmV2ZW50Um93KTtcbiAgICB2YXIgaGVhZGluZ0hlaWdodCA9IHRoaXMuaGVhZGluZ1JvdyA/IGdldEhlaWdodCh0aGlzLmhlYWRpbmdSb3cpIDogMDtcbiAgICB2YXIgZXZlbnRTcGFjZSA9IGdldEhlaWdodChmaW5kRE9NTm9kZSh0aGlzKSkgLSBoZWFkaW5nSGVpZ2h0O1xuICAgIHJldHVybiBNYXRoLm1heChNYXRoLmZsb29yKGV2ZW50U3BhY2UgLyBldmVudEhlaWdodCksIDEpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRhdGUgPSBfdGhpcyRwcm9wczUuZGF0ZSxcbiAgICAgICAgcnRsID0gX3RoaXMkcHJvcHM1LnJ0bCxcbiAgICAgICAgcmFuZ2UgPSBfdGhpcyRwcm9wczUucmFuZ2UsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzNS5jbGFzc05hbWUsXG4gICAgICAgIHNlbGVjdGVkID0gX3RoaXMkcHJvcHM1LnNlbGVjdGVkLFxuICAgICAgICBzZWxlY3RhYmxlID0gX3RoaXMkcHJvcHM1LnNlbGVjdGFibGUsXG4gICAgICAgIHJlbmRlckZvck1lYXN1cmUgPSBfdGhpcyRwcm9wczUucmVuZGVyRm9yTWVhc3VyZSxcbiAgICAgICAgYWNjZXNzb3JzID0gX3RoaXMkcHJvcHM1LmFjY2Vzc29ycyxcbiAgICAgICAgZ2V0dGVycyA9IF90aGlzJHByb3BzNS5nZXR0ZXJzLFxuICAgICAgICBjb21wb25lbnRzID0gX3RoaXMkcHJvcHM1LmNvbXBvbmVudHMsXG4gICAgICAgIGdldE5vdyA9IF90aGlzJHByb3BzNS5nZXROb3csXG4gICAgICAgIHJlbmRlckhlYWRlciA9IF90aGlzJHByb3BzNS5yZW5kZXJIZWFkZXIsXG4gICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHM1Lm9uU2VsZWN0LFxuICAgICAgICBsb2NhbGl6ZXIgPSBfdGhpcyRwcm9wczUubG9jYWxpemVyLFxuICAgICAgICBvblNlbGVjdFN0YXJ0ID0gX3RoaXMkcHJvcHM1Lm9uU2VsZWN0U3RhcnQsXG4gICAgICAgIG9uU2VsZWN0RW5kID0gX3RoaXMkcHJvcHM1Lm9uU2VsZWN0RW5kLFxuICAgICAgICBvbkRvdWJsZUNsaWNrID0gX3RoaXMkcHJvcHM1Lm9uRG91YmxlQ2xpY2ssXG4gICAgICAgIG9uS2V5UHJlc3MgPSBfdGhpcyRwcm9wczUub25LZXlQcmVzcyxcbiAgICAgICAgcmVzb3VyY2VJZCA9IF90aGlzJHByb3BzNS5yZXNvdXJjZUlkLFxuICAgICAgICBsb25nUHJlc3NUaHJlc2hvbGQgPSBfdGhpcyRwcm9wczUubG9uZ1ByZXNzVGhyZXNob2xkLFxuICAgICAgICBpc0FsbERheSA9IF90aGlzJHByb3BzNS5pc0FsbERheSxcbiAgICAgICAgcmVzaXphYmxlID0gX3RoaXMkcHJvcHM1LnJlc2l6YWJsZSxcbiAgICAgICAgc2hvd0FsbEV2ZW50cyA9IF90aGlzJHByb3BzNS5zaG93QWxsRXZlbnRzO1xuICAgIGlmIChyZW5kZXJGb3JNZWFzdXJlKSByZXR1cm4gdGhpcy5yZW5kZXJEdW1teSgpO1xuICAgIHZhciBtZXRyaWNzID0gdGhpcy5zbG90TWV0cmljcyh0aGlzLnByb3BzKTtcbiAgICB2YXIgbGV2ZWxzID0gbWV0cmljcy5sZXZlbHMsXG4gICAgICAgIGV4dHJhID0gbWV0cmljcy5leHRyYTtcbiAgICB2YXIgU2Nyb2xsYWJsZVdlZWtDb21wb25lbnQgPSBzaG93QWxsRXZlbnRzID8gU2Nyb2xsYWJsZVdlZWtXcmFwcGVyIDogTm9vcFdyYXBwZXI7XG4gICAgdmFyIFdlZWtXcmFwcGVyID0gY29tcG9uZW50cy53ZWVrV3JhcHBlcjtcbiAgICB2YXIgZXZlbnRSb3dQcm9wcyA9IHtcbiAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZCxcbiAgICAgIGFjY2Vzc29yczogYWNjZXNzb3JzLFxuICAgICAgZ2V0dGVyczogZ2V0dGVycyxcbiAgICAgIGxvY2FsaXplcjogbG9jYWxpemVyLFxuICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgIG9uU2VsZWN0OiBvblNlbGVjdCxcbiAgICAgIG9uRG91YmxlQ2xpY2s6IG9uRG91YmxlQ2xpY2ssXG4gICAgICBvbktleVByZXNzOiBvbktleVByZXNzLFxuICAgICAgcmVzb3VyY2VJZDogcmVzb3VyY2VJZCxcbiAgICAgIHNsb3RNZXRyaWNzOiBtZXRyaWNzLFxuICAgICAgcmVzaXphYmxlOiByZXNpemFibGVcbiAgICB9O1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHJvbGU6IFwicm93Z3JvdXBcIlxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEJhY2tncm91bmRDZWxscywge1xuICAgICAgbG9jYWxpemVyOiBsb2NhbGl6ZXIsXG4gICAgICBkYXRlOiBkYXRlLFxuICAgICAgZ2V0Tm93OiBnZXROb3csXG4gICAgICBydGw6IHJ0bCxcbiAgICAgIHJhbmdlOiByYW5nZSxcbiAgICAgIHNlbGVjdGFibGU6IHNlbGVjdGFibGUsXG4gICAgICBjb250YWluZXI6IHRoaXMuZ2V0Q29udGFpbmVyLFxuICAgICAgZ2V0dGVyczogZ2V0dGVycyxcbiAgICAgIG9uU2VsZWN0U3RhcnQ6IG9uU2VsZWN0U3RhcnQsXG4gICAgICBvblNlbGVjdEVuZDogb25TZWxlY3RFbmQsXG4gICAgICBvblNlbGVjdFNsb3Q6IHRoaXMuaGFuZGxlU2VsZWN0U2xvdCxcbiAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsXG4gICAgICBsb25nUHJlc3NUaHJlc2hvbGQ6IGxvbmdQcmVzc1RocmVzaG9sZCxcbiAgICAgIHJlc291cmNlSWQ6IHJlc291cmNlSWRcbiAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KCdyYmMtcm93LWNvbnRlbnQnLCBzaG93QWxsRXZlbnRzICYmICdyYmMtcm93LWNvbnRlbnQtc2Nyb2xsYWJsZScpLFxuICAgICAgcm9sZTogXCJyb3dcIlxuICAgIH0sIHJlbmRlckhlYWRlciAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwicmJjLXJvdyBcIixcbiAgICAgIHJlZjogdGhpcy5jcmVhdGVIZWFkaW5nUmVmXG4gICAgfSwgcmFuZ2UubWFwKHRoaXMucmVuZGVySGVhZGluZ0NlbGwpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU2Nyb2xsYWJsZVdlZWtDb21wb25lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFdlZWtXcmFwcGVyLCBfZXh0ZW5kcyh7XG4gICAgICBpc0FsbERheTogaXNBbGxEYXlcbiAgICB9LCBldmVudFJvd1Byb3BzKSwgbGV2ZWxzLm1hcChmdW5jdGlvbiAoc2VncywgaWR4KSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRXZlbnRSb3csIF9leHRlbmRzKHtcbiAgICAgICAga2V5OiBpZHgsXG4gICAgICAgIHNlZ21lbnRzOiBzZWdzXG4gICAgICB9LCBldmVudFJvd1Byb3BzKSk7XG4gICAgfSksICEhZXh0cmEubGVuZ3RoICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEV2ZW50RW5kaW5nUm93LCBfZXh0ZW5kcyh7XG4gICAgICBzZWdtZW50czogZXh0cmEsXG4gICAgICBvblNob3dNb3JlOiB0aGlzLmhhbmRsZVNob3dNb3JlXG4gICAgfSwgZXZlbnRSb3dQcm9wcykpKSkpKTtcbiAgfTtcblxuICByZXR1cm4gRGF0ZUNvbnRlbnRSb3c7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRhdGVDb250ZW50Um93LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgZGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gIGV2ZW50czogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIHJhbmdlOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgcnRsOiBQcm9wVHlwZXMuYm9vbCxcbiAgcmVzaXphYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgcmVzb3VyY2VJZDogUHJvcFR5cGVzLmFueSxcbiAgcmVuZGVyRm9yTWVhc3VyZTogUHJvcFR5cGVzLmJvb2wsXG4gIHJlbmRlckhlYWRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzLmZ1bmMsXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzZWxlY3RhYmxlOiBQcm9wVHlwZXMub25lT2YoW3RydWUsIGZhbHNlLCAnaWdub3JlRXZlbnRzJ10pLFxuICBsb25nUHJlc3NUaHJlc2hvbGQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIG9uU2hvd01vcmU6IFByb3BUeXBlcy5mdW5jLFxuICBzaG93QWxsRXZlbnRzOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25TZWxlY3RTbG90OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvblNlbGVjdEVuZDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2VsZWN0U3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuICBvbkRvdWJsZUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25LZXlQcmVzczogUHJvcFR5cGVzLmZ1bmMsXG4gIGRheVByb3BHZXR0ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBnZXROb3c6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzQWxsRGF5OiBQcm9wVHlwZXMuYm9vbCxcbiAgYWNjZXNzb3JzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgZ2V0dGVyczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBsb2NhbGl6ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgbWluUm93czogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBtYXhSb3dzOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn0gOiB7fTtcbkRhdGVDb250ZW50Um93LmRlZmF1bHRQcm9wcyA9IHtcbiAgbWluUm93czogMCxcbiAgbWF4Um93czogSW5maW5pdHlcbn07XG5cbnZhciBIZWFkZXIgPSBmdW5jdGlvbiBIZWFkZXIoX3JlZikge1xuICB2YXIgbGFiZWwgPSBfcmVmLmxhYmVsO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICByb2xlOiBcImNvbHVtbmhlYWRlclwiLFxuICAgIFwiYXJpYS1zb3J0XCI6IFwibm9uZVwiXG4gIH0sIGxhYmVsKTtcbn07XG5cbkhlYWRlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZVxufSA6IHt9O1xuXG52YXIgRGF0ZUhlYWRlciA9IGZ1bmN0aW9uIERhdGVIZWFkZXIoX3JlZikge1xuICB2YXIgbGFiZWwgPSBfcmVmLmxhYmVsLFxuICAgICAgZHJpbGxkb3duVmlldyA9IF9yZWYuZHJpbGxkb3duVmlldyxcbiAgICAgIG9uRHJpbGxEb3duID0gX3JlZi5vbkRyaWxsRG93bjtcblxuICBpZiAoIWRyaWxsZG93blZpZXcpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGxhYmVsKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIGhyZWY6IFwiI1wiLFxuICAgIG9uQ2xpY2s6IG9uRHJpbGxEb3duLFxuICAgIHJvbGU6IFwiY2VsbFwiXG4gIH0sIGxhYmVsKTtcbn07XG5cbkRhdGVIZWFkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIGRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBkcmlsbGRvd25WaWV3OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkRyaWxsRG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIGlzT2ZmUmFuZ2U6IFByb3BUeXBlcy5ib29sXG59IDoge307XG5cbnZhciBfZXhjbHVkZWQkMSA9IFtcImRhdGVcIiwgXCJjbGFzc05hbWVcIl07XG5cbnZhciBldmVudHNGb3JXZWVrID0gZnVuY3Rpb24gZXZlbnRzRm9yV2VlayhldnRzLCBzdGFydCwgZW5kLCBhY2Nlc3NvcnMsIGxvY2FsaXplcikge1xuICByZXR1cm4gZXZ0cy5maWx0ZXIoZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gaW5SYW5nZShlLCBzdGFydCwgZW5kLCBhY2Nlc3NvcnMsIGxvY2FsaXplcik7XG4gIH0pO1xufTtcblxudmFyIE1vbnRoVmlldyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNb250aFZpZXcsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vbnRoVmlldygpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgX2FyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBfYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KF9hcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmdldENvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmaW5kRE9NTm9kZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlcldlZWsgPSBmdW5jdGlvbiAod2Vlaywgd2Vla0lkeCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZXZlbnRzID0gX3RoaXMkcHJvcHMuZXZlbnRzLFxuICAgICAgICAgIGNvbXBvbmVudHMgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRzLFxuICAgICAgICAgIHNlbGVjdGFibGUgPSBfdGhpcyRwcm9wcy5zZWxlY3RhYmxlLFxuICAgICAgICAgIGdldE5vdyA9IF90aGlzJHByb3BzLmdldE5vdyxcbiAgICAgICAgICBzZWxlY3RlZCA9IF90aGlzJHByb3BzLnNlbGVjdGVkLFxuICAgICAgICAgIGRhdGUgPSBfdGhpcyRwcm9wcy5kYXRlLFxuICAgICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzLmxvY2FsaXplcixcbiAgICAgICAgICBsb25nUHJlc3NUaHJlc2hvbGQgPSBfdGhpcyRwcm9wcy5sb25nUHJlc3NUaHJlc2hvbGQsXG4gICAgICAgICAgYWNjZXNzb3JzID0gX3RoaXMkcHJvcHMuYWNjZXNzb3JzLFxuICAgICAgICAgIGdldHRlcnMgPSBfdGhpcyRwcm9wcy5nZXR0ZXJzLFxuICAgICAgICAgIHNob3dBbGxFdmVudHMgPSBfdGhpcyRwcm9wcy5zaG93QWxsRXZlbnRzO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gX3RoaXMuc3RhdGUsXG4gICAgICAgICAgbmVlZExpbWl0TWVhc3VyZSA9IF90aGlzJHN0YXRlLm5lZWRMaW1pdE1lYXN1cmUsXG4gICAgICAgICAgcm93TGltaXQgPSBfdGhpcyRzdGF0ZS5yb3dMaW1pdDsgLy8gbGV0J3Mgbm90IG11dGF0ZSBwcm9wc1xuXG4gICAgICB2YXIgd2Vla3NFdmVudHMgPSBldmVudHNGb3JXZWVrKFtdLmNvbmNhdChldmVudHMpLCB3ZWVrWzBdLCB3ZWVrW3dlZWsubGVuZ3RoIC0gMV0sIGFjY2Vzc29ycywgbG9jYWxpemVyKTtcbiAgICAgIHdlZWtzRXZlbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRFdmVudHMkMShhLCBiLCBhY2Nlc3NvcnMsIGxvY2FsaXplcik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRlQ29udGVudFJvdywge1xuICAgICAgICBrZXk6IHdlZWtJZHgsXG4gICAgICAgIHJlZjogd2Vla0lkeCA9PT0gMCA/IF90aGlzLnNsb3RSb3dSZWYgOiB1bmRlZmluZWQsXG4gICAgICAgIGNvbnRhaW5lcjogX3RoaXMuZ2V0Q29udGFpbmVyLFxuICAgICAgICBjbGFzc05hbWU6IFwicmJjLW1vbnRoLXJvd1wiLFxuICAgICAgICBnZXROb3c6IGdldE5vdyxcbiAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgcmFuZ2U6IHdlZWssXG4gICAgICAgIGV2ZW50czogd2Vla3NFdmVudHMsXG4gICAgICAgIG1heFJvd3M6IHNob3dBbGxFdmVudHMgPyBJbmZpbml0eSA6IHJvd0xpbWl0LFxuICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWQsXG4gICAgICAgIHNlbGVjdGFibGU6IHNlbGVjdGFibGUsXG4gICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsXG4gICAgICAgIGFjY2Vzc29yczogYWNjZXNzb3JzLFxuICAgICAgICBnZXR0ZXJzOiBnZXR0ZXJzLFxuICAgICAgICBsb2NhbGl6ZXI6IGxvY2FsaXplcixcbiAgICAgICAgcmVuZGVySGVhZGVyOiBfdGhpcy5yZWFkZXJEYXRlSGVhZGluZyxcbiAgICAgICAgcmVuZGVyRm9yTWVhc3VyZTogbmVlZExpbWl0TWVhc3VyZSxcbiAgICAgICAgb25TaG93TW9yZTogX3RoaXMuaGFuZGxlU2hvd01vcmUsXG4gICAgICAgIG9uU2VsZWN0OiBfdGhpcy5oYW5kbGVTZWxlY3RFdmVudCxcbiAgICAgICAgb25Eb3VibGVDbGljazogX3RoaXMuaGFuZGxlRG91YmxlQ2xpY2tFdmVudCxcbiAgICAgICAgb25LZXlQcmVzczogX3RoaXMuaGFuZGxlS2V5UHJlc3NFdmVudCxcbiAgICAgICAgb25TZWxlY3RTbG90OiBfdGhpcy5oYW5kbGVTZWxlY3RTbG90LFxuICAgICAgICBsb25nUHJlc3NUaHJlc2hvbGQ6IGxvbmdQcmVzc1RocmVzaG9sZCxcbiAgICAgICAgcnRsOiBfdGhpcy5wcm9wcy5ydGwsXG4gICAgICAgIHJlc2l6YWJsZTogX3RoaXMucHJvcHMucmVzaXphYmxlLFxuICAgICAgICBzaG93QWxsRXZlbnRzOiBzaG93QWxsRXZlbnRzXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVhZGVyRGF0ZUhlYWRpbmcgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGRhdGUgPSBfcmVmLmRhdGUsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQkMSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjdXJyZW50RGF0ZSA9IF90aGlzJHByb3BzMi5kYXRlLFxuICAgICAgICAgIGdldERyaWxsZG93blZpZXcgPSBfdGhpcyRwcm9wczIuZ2V0RHJpbGxkb3duVmlldyxcbiAgICAgICAgICBsb2NhbGl6ZXIgPSBfdGhpcyRwcm9wczIubG9jYWxpemVyO1xuICAgICAgdmFyIGlzT2ZmUmFuZ2UgPSBsb2NhbGl6ZXIubmVxKGRhdGUsIGN1cnJlbnREYXRlLCAnbW9udGgnKTtcbiAgICAgIHZhciBpc0N1cnJlbnQgPSBsb2NhbGl6ZXIuaXNTYW1lRGF0ZShkYXRlLCBjdXJyZW50RGF0ZSk7XG4gICAgICB2YXIgZHJpbGxkb3duVmlldyA9IGdldERyaWxsZG93blZpZXcoZGF0ZSk7XG4gICAgICB2YXIgbGFiZWwgPSBsb2NhbGl6ZXIuZm9ybWF0KGRhdGUsICdkYXRlRm9ybWF0Jyk7XG4gICAgICB2YXIgRGF0ZUhlYWRlckNvbXBvbmVudCA9IF90aGlzLnByb3BzLmNvbXBvbmVudHMuZGF0ZUhlYWRlciB8fCBEYXRlSGVhZGVyO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3NOYW1lLCBpc09mZlJhbmdlICYmICdyYmMtb2ZmLXJhbmdlJywgaXNDdXJyZW50ICYmICdyYmMtY3VycmVudCcpLFxuICAgICAgICByb2xlOiBcImNlbGxcIlxuICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGVIZWFkZXJDb21wb25lbnQsIHtcbiAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICBkYXRlOiBkYXRlLFxuICAgICAgICBkcmlsbGRvd25WaWV3OiBkcmlsbGRvd25WaWV3LFxuICAgICAgICBpc09mZlJhbmdlOiBpc09mZlJhbmdlLFxuICAgICAgICBvbkRyaWxsRG93bjogZnVuY3Rpb24gb25EcmlsbERvd24oZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVIZWFkaW5nQ2xpY2soZGF0ZSwgZHJpbGxkb3duVmlldywgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU2VsZWN0U2xvdCA9IGZ1bmN0aW9uIChyYW5nZSwgc2xvdEluZm8pIHtcbiAgICAgIF90aGlzLl9wZW5kaW5nU2VsZWN0aW9uID0gX3RoaXMuX3BlbmRpbmdTZWxlY3Rpb24uY29uY2F0KHJhbmdlKTtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5fc2VsZWN0VGltZXIpO1xuICAgICAgX3RoaXMuX3NlbGVjdFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZWxlY3REYXRlcyhzbG90SW5mbyk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlSGVhZGluZ0NsaWNrID0gZnVuY3Rpb24gKGRhdGUsIHZpZXcsIGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgX3RoaXMuY2xlYXJTZWxlY3Rpb24oKTtcblxuICAgICAgbm90aWZ5KF90aGlzLnByb3BzLm9uRHJpbGxEb3duLCBbZGF0ZSwgdmlld10pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVTZWxlY3RFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIG5vdGlmeShfdGhpcy5wcm9wcy5vblNlbGVjdEV2ZW50LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRG91YmxlQ2xpY2tFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG5cbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIG5vdGlmeShfdGhpcy5wcm9wcy5vbkRvdWJsZUNsaWNrRXZlbnQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVLZXlQcmVzc0V2ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2xlYXJTZWxlY3Rpb24oKTtcblxuICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgIH1cblxuICAgICAgbm90aWZ5KF90aGlzLnByb3BzLm9uS2V5UHJlc3NFdmVudCwgYXJncyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVNob3dNb3JlID0gZnVuY3Rpb24gKGV2ZW50cywgZGF0ZSwgY2VsbCwgc2xvdCwgdGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgcG9wdXAgPSBfdGhpcyRwcm9wczMucG9wdXAsXG4gICAgICAgICAgb25EcmlsbERvd24gPSBfdGhpcyRwcm9wczMub25EcmlsbERvd24sXG4gICAgICAgICAgb25TaG93TW9yZSA9IF90aGlzJHByb3BzMy5vblNob3dNb3JlLFxuICAgICAgICAgIGdldERyaWxsZG93blZpZXcgPSBfdGhpcyRwcm9wczMuZ2V0RHJpbGxkb3duVmlldyxcbiAgICAgICAgICBkb1Nob3dNb3JlRHJpbGxEb3duID0gX3RoaXMkcHJvcHMzLmRvU2hvd01vcmVEcmlsbERvd247IC8vY2FuY2VsIGFueSBwZW5kaW5nIHNlbGVjdGlvbnMgc28gb25seSB0aGUgZXZlbnQgY2xpY2sgZ29lcyB0aHJvdWdoLlxuXG4gICAgICBfdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuXG4gICAgICBpZiAocG9wdXApIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gZ2V0UG9zaXRpb24oY2VsbCwgZmluZERPTU5vZGUoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgb3ZlcmxheToge1xuICAgICAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgICAgIGV2ZW50czogZXZlbnRzLFxuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChkb1Nob3dNb3JlRHJpbGxEb3duKSB7XG4gICAgICAgIG5vdGlmeShvbkRyaWxsRG93biwgW2RhdGUsIGdldERyaWxsZG93blZpZXcoZGF0ZSkgfHwgdmlld3MuREFZXSk7XG4gICAgICB9XG5cbiAgICAgIG5vdGlmeShvblNob3dNb3JlLCBbZXZlbnRzLCBkYXRlLCBzbG90XSk7XG4gICAgfTtcblxuICAgIF90aGlzLm92ZXJsYXlEaXNwbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvdmVybGF5OiBudWxsXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX2JnUm93cyA9IFtdO1xuICAgIF90aGlzLl9wZW5kaW5nU2VsZWN0aW9uID0gW107XG4gICAgX3RoaXMuc2xvdFJvd1JlZiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHJvd0xpbWl0OiA1LFxuICAgICAgbmVlZExpbWl0TWVhc3VyZTogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1vbnRoVmlldy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoX3JlZjIpIHtcbiAgICB2YXIgZGF0ZSA9IF9yZWYyLmRhdGU7XG4gICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIHByb3BzRGF0ZSA9IF90aGlzJHByb3BzNC5kYXRlLFxuICAgICAgICBsb2NhbGl6ZXIgPSBfdGhpcyRwcm9wczQubG9jYWxpemVyO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbmVlZExpbWl0TWVhc3VyZTogbG9jYWxpemVyLm5lcShkYXRlLCBwcm9wc0RhdGUsICdtb250aCcpXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgcnVubmluZztcbiAgICBpZiAodGhpcy5zdGF0ZS5uZWVkTGltaXRNZWFzdXJlKSB0aGlzLm1lYXN1cmVSb3dMaW1pdCh0aGlzLnByb3BzKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fcmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXJ1bm5pbmcpIHtcbiAgICAgICAgcmVxdWVzdChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG5lZWRMaW1pdE1lYXN1cmU6IHRydWVcbiAgICAgICAgICB9KTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUubmVlZExpbWl0TWVhc3VyZSkgdGhpcy5tZWFzdXJlUm93TGltaXQodGhpcy5wcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX3Jlc2l6ZUxpc3RlbmVyLCBmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGF0ZSA9IF90aGlzJHByb3BzNS5kYXRlLFxuICAgICAgICBsb2NhbGl6ZXIgPSBfdGhpcyRwcm9wczUubG9jYWxpemVyLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczUuY2xhc3NOYW1lLFxuICAgICAgICBtb250aCA9IGxvY2FsaXplci52aXNpYmxlRGF5cyhkYXRlLCBsb2NhbGl6ZXIpLFxuICAgICAgICB3ZWVrcyA9IGNodW5rKG1vbnRoLCA3KTtcbiAgICB0aGlzLl93ZWVrQ291bnQgPSB3ZWVrcy5sZW5ndGg7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeCgncmJjLW1vbnRoLXZpZXcnLCBjbGFzc05hbWUpLFxuICAgICAgcm9sZTogXCJ0YWJsZVwiLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IFwiTW9udGggVmlld1wiXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInJiYy1yb3cgcmJjLW1vbnRoLWhlYWRlclwiLFxuICAgICAgcm9sZTogXCJyb3dcIlxuICAgIH0sIHRoaXMucmVuZGVySGVhZGVycyh3ZWVrc1swXSkpLCB3ZWVrcy5tYXAodGhpcy5yZW5kZXJXZWVrKSwgdGhpcy5wcm9wcy5wb3B1cCAmJiB0aGlzLnJlbmRlck92ZXJsYXkoKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlckhlYWRlcnMgPSBmdW5jdGlvbiByZW5kZXJIZWFkZXJzKHJvdykge1xuICAgIHZhciBfdGhpcyRwcm9wczYgPSB0aGlzLnByb3BzLFxuICAgICAgICBsb2NhbGl6ZXIgPSBfdGhpcyRwcm9wczYubG9jYWxpemVyLFxuICAgICAgICBjb21wb25lbnRzID0gX3RoaXMkcHJvcHM2LmNvbXBvbmVudHM7XG4gICAgdmFyIGZpcnN0ID0gcm93WzBdO1xuICAgIHZhciBsYXN0ID0gcm93W3Jvdy5sZW5ndGggLSAxXTtcbiAgICB2YXIgSGVhZGVyQ29tcG9uZW50ID0gY29tcG9uZW50cy5oZWFkZXIgfHwgSGVhZGVyO1xuICAgIHJldHVybiBsb2NhbGl6ZXIucmFuZ2UoZmlyc3QsIGxhc3QsICdkYXknKS5tYXAoZnVuY3Rpb24gKGRheSwgaWR4KSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBrZXk6ICdoZWFkZXJfJyArIGlkeCxcbiAgICAgICAgY2xhc3NOYW1lOiBcInJiYy1oZWFkZXJcIlxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSGVhZGVyQ29tcG9uZW50LCB7XG4gICAgICAgIGRhdGU6IGRheSxcbiAgICAgICAgbG9jYWxpemVyOiBsb2NhbGl6ZXIsXG4gICAgICAgIGxhYmVsOiBsb2NhbGl6ZXIuZm9ybWF0KGRheSwgJ3dlZWtkYXlGb3JtYXQnKVxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXJPdmVybGF5ID0gZnVuY3Rpb24gcmVuZGVyT3ZlcmxheSgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBvdmVybGF5ID0gdGhpcy5zdGF0ZSAmJiB0aGlzLnN0YXRlLm92ZXJsYXkgfHwge307XG4gICAgdmFyIF90aGlzJHByb3BzNyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjY2Vzc29ycyA9IF90aGlzJHByb3BzNy5hY2Nlc3NvcnMsXG4gICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzNy5sb2NhbGl6ZXIsXG4gICAgICAgIGNvbXBvbmVudHMgPSBfdGhpcyRwcm9wczcuY29tcG9uZW50cyxcbiAgICAgICAgZ2V0dGVycyA9IF90aGlzJHByb3BzNy5nZXR0ZXJzLFxuICAgICAgICBzZWxlY3RlZCA9IF90aGlzJHByb3BzNy5zZWxlY3RlZCxcbiAgICAgICAgcG9wdXBPZmZzZXQgPSBfdGhpcyRwcm9wczcucG9wdXBPZmZzZXQ7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE92ZXJsYXksIHtcbiAgICAgIHJvb3RDbG9zZTogdHJ1ZSxcbiAgICAgIHBsYWNlbWVudDogXCJib3R0b21cIixcbiAgICAgIHNob3c6ICEhb3ZlcmxheS5wb3NpdGlvbixcbiAgICAgIG9uSGlkZTogZnVuY3Rpb24gb25IaWRlKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMzLnNldFN0YXRlKHtcbiAgICAgICAgICBvdmVybGF5OiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHRhcmdldDogZnVuY3Rpb24gdGFyZ2V0KCkge1xuICAgICAgICByZXR1cm4gb3ZlcmxheS50YXJnZXQ7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgcHJvcHMgPSBfcmVmMy5wcm9wcztcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQb3B1cCQxLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgcG9wdXBPZmZzZXQ6IHBvcHVwT2Zmc2V0LFxuICAgICAgICBhY2Nlc3NvcnM6IGFjY2Vzc29ycyxcbiAgICAgICAgZ2V0dGVyczogZ2V0dGVycyxcbiAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLFxuICAgICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLFxuICAgICAgICBsb2NhbGl6ZXI6IGxvY2FsaXplcixcbiAgICAgICAgcG9zaXRpb246IG92ZXJsYXkucG9zaXRpb24sXG4gICAgICAgIHNob3c6IF90aGlzMy5vdmVybGF5RGlzcGxheSxcbiAgICAgICAgZXZlbnRzOiBvdmVybGF5LmV2ZW50cyxcbiAgICAgICAgc2xvdFN0YXJ0OiBvdmVybGF5LmRhdGUsXG4gICAgICAgIHNsb3RFbmQ6IG92ZXJsYXkuZW5kLFxuICAgICAgICBvblNlbGVjdDogX3RoaXMzLmhhbmRsZVNlbGVjdEV2ZW50LFxuICAgICAgICBvbkRvdWJsZUNsaWNrOiBfdGhpczMuaGFuZGxlRG91YmxlQ2xpY2tFdmVudCxcbiAgICAgICAgb25LZXlQcmVzczogX3RoaXMzLmhhbmRsZUtleVByZXNzRXZlbnQsXG4gICAgICAgIGhhbmRsZURyYWdTdGFydDogX3RoaXMzLnByb3BzLmhhbmRsZURyYWdTdGFydFxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tZWFzdXJlUm93TGltaXQgPSBmdW5jdGlvbiBtZWFzdXJlUm93TGltaXQoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBuZWVkTGltaXRNZWFzdXJlOiBmYWxzZSxcbiAgICAgIHJvd0xpbWl0OiB0aGlzLnNsb3RSb3dSZWYuY3VycmVudC5nZXRSb3dMaW1pdCgpXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnNlbGVjdERhdGVzID0gZnVuY3Rpb24gc2VsZWN0RGF0ZXMoc2xvdEluZm8pIHtcbiAgICB2YXIgc2xvdHMgPSB0aGlzLl9wZW5kaW5nU2VsZWN0aW9uLnNsaWNlKCk7XG5cbiAgICB0aGlzLl9wZW5kaW5nU2VsZWN0aW9uID0gW107XG4gICAgc2xvdHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuICthIC0gK2I7XG4gICAgfSk7XG4gICAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoc2xvdHNbMF0pO1xuICAgIHZhciBlbmQgPSBuZXcgRGF0ZShzbG90c1tzbG90cy5sZW5ndGggLSAxXSk7XG4gICAgZW5kLnNldERhdGUoc2xvdHNbc2xvdHMubGVuZ3RoIC0gMV0uZ2V0RGF0ZSgpICsgMSk7XG4gICAgbm90aWZ5KHRoaXMucHJvcHMub25TZWxlY3RTbG90LCB7XG4gICAgICBzbG90czogc2xvdHMsXG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IGVuZCxcbiAgICAgIGFjdGlvbjogc2xvdEluZm8uYWN0aW9uLFxuICAgICAgYm91bmRzOiBzbG90SW5mby5ib3VuZHMsXG4gICAgICBib3g6IHNsb3RJbmZvLmJveFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jbGVhclNlbGVjdGlvbiA9IGZ1bmN0aW9uIGNsZWFyU2VsZWN0aW9uKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9zZWxlY3RUaW1lcik7XG4gICAgdGhpcy5fcGVuZGluZ1NlbGVjdGlvbiA9IFtdO1xuICB9O1xuXG4gIHJldHVybiBNb250aFZpZXc7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1vbnRoVmlldy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGV2ZW50czogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIGRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBtaW46IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBtYXg6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBzdGVwOiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXROb3c6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNjcm9sbFRvVGltZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gIHJ0bDogUHJvcFR5cGVzLmJvb2wsXG4gIHJlc2l6YWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBhY2Nlc3NvcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY29tcG9uZW50czogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBnZXR0ZXJzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2FsaXplcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBzZWxlY3RlZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgc2VsZWN0YWJsZTogUHJvcFR5cGVzLm9uZU9mKFt0cnVlLCBmYWxzZSwgJ2lnbm9yZUV2ZW50cyddKSxcbiAgbG9uZ1ByZXNzVGhyZXNob2xkOiBQcm9wVHlwZXMubnVtYmVyLFxuICBvbk5hdmlnYXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3RTbG90OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3RFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRG91YmxlQ2xpY2tFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uS2V5UHJlc3NFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2hvd01vcmU6IFByb3BUeXBlcy5mdW5jLFxuICBzaG93QWxsRXZlbnRzOiBQcm9wVHlwZXMuYm9vbCxcbiAgZG9TaG93TW9yZURyaWxsRG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIG9uRHJpbGxEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgZ2V0RHJpbGxkb3duVmlldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgcG9wdXA6IFByb3BUeXBlcy5ib29sLFxuICBoYW5kbGVEcmFnU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuICBwb3B1cE9mZnNldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICB4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHk6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHt9O1xuXG5Nb250aFZpZXcucmFuZ2UgPSBmdW5jdGlvbiAoZGF0ZSwgX3JlZjQpIHtcbiAgdmFyIGxvY2FsaXplciA9IF9yZWY0LmxvY2FsaXplcjtcbiAgdmFyIHN0YXJ0ID0gbG9jYWxpemVyLmZpcnN0VmlzaWJsZURheShkYXRlLCBsb2NhbGl6ZXIpO1xuICB2YXIgZW5kID0gbG9jYWxpemVyLmxhc3RWaXNpYmxlRGF5KGRhdGUsIGxvY2FsaXplcik7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIGVuZDogZW5kXG4gIH07XG59O1xuXG5Nb250aFZpZXcubmF2aWdhdGUgPSBmdW5jdGlvbiAoZGF0ZSwgYWN0aW9uLCBfcmVmNSkge1xuICB2YXIgbG9jYWxpemVyID0gX3JlZjUubG9jYWxpemVyO1xuXG4gIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgY2FzZSBuYXZpZ2F0ZS5QUkVWSU9VUzpcbiAgICAgIHJldHVybiBsb2NhbGl6ZXIuYWRkKGRhdGUsIC0xLCAnbW9udGgnKTtcblxuICAgIGNhc2UgbmF2aWdhdGUuTkVYVDpcbiAgICAgIHJldHVybiBsb2NhbGl6ZXIuYWRkKGRhdGUsIDEsICdtb250aCcpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBkYXRlO1xuICB9XG59O1xuXG5Nb250aFZpZXcudGl0bGUgPSBmdW5jdGlvbiAoZGF0ZSwgX3JlZjYpIHtcbiAgdmFyIGxvY2FsaXplciA9IF9yZWY2LmxvY2FsaXplcjtcbiAgcmV0dXJuIGxvY2FsaXplci5mb3JtYXQoZGF0ZSwgJ21vbnRoSGVhZGVyRm9ybWF0Jyk7XG59O1xuXG52YXIgZ2V0S2V5ID0gZnVuY3Rpb24gZ2V0S2V5KF9yZWYpIHtcbiAgdmFyIG1pbiA9IF9yZWYubWluLFxuICAgICAgbWF4ID0gX3JlZi5tYXgsXG4gICAgICBzdGVwID0gX3JlZi5zdGVwLFxuICAgICAgc2xvdHMgPSBfcmVmLnNsb3RzLFxuICAgICAgbG9jYWxpemVyID0gX3JlZi5sb2NhbGl6ZXI7XG4gIHJldHVybiBcIlwiICsgK2xvY2FsaXplci5zdGFydE9mKG1pbiwgJ21pbnV0ZXMnKSArIChcIlwiICsgK2xvY2FsaXplci5zdGFydE9mKG1heCwgJ21pbnV0ZXMnKSkgKyAoc3RlcCArIFwiLVwiICsgc2xvdHMpO1xufTtcblxuZnVuY3Rpb24gZ2V0U2xvdE1ldHJpY3MkMShfcmVmMikge1xuICB2YXIgc3RhcnQgPSBfcmVmMi5taW4sXG4gICAgICBlbmQgPSBfcmVmMi5tYXgsXG4gICAgICBzdGVwID0gX3JlZjIuc3RlcCxcbiAgICAgIHRpbWVzbG90cyA9IF9yZWYyLnRpbWVzbG90cyxcbiAgICAgIGxvY2FsaXplciA9IF9yZWYyLmxvY2FsaXplcjtcbiAgdmFyIGtleSA9IGdldEtleSh7XG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIGVuZDogZW5kLFxuICAgIHN0ZXA6IHN0ZXAsXG4gICAgdGltZXNsb3RzOiB0aW1lc2xvdHMsXG4gICAgbG9jYWxpemVyOiBsb2NhbGl6ZXJcbiAgfSk7IC8vIERTVCBkaWZmZXJlbmNlcyBhcmUgaGFuZGxlZCBpbnNpZGUgdGhlIGxvY2FsaXplclxuXG4gIHZhciB0b3RhbE1pbiA9IDEgKyBsb2NhbGl6ZXIuZ2V0VG90YWxNaW4oc3RhcnQsIGVuZCk7XG4gIHZhciBtaW51dGVzRnJvbU1pZG5pZ2h0ID0gbG9jYWxpemVyLmdldE1pbnV0ZXNGcm9tTWlkbmlnaHQoc3RhcnQpO1xuICB2YXIgbnVtR3JvdXBzID0gTWF0aC5jZWlsKCh0b3RhbE1pbiAtIDEpIC8gKHN0ZXAgKiB0aW1lc2xvdHMpKTtcbiAgdmFyIG51bVNsb3RzID0gbnVtR3JvdXBzICogdGltZXNsb3RzO1xuICB2YXIgZ3JvdXBzID0gbmV3IEFycmF5KG51bUdyb3Vwcyk7XG4gIHZhciBzbG90cyA9IG5ldyBBcnJheShudW1TbG90cyk7IC8vIEVhY2ggc2xvdCBkYXRlIGlzIGNyZWF0ZWQgZnJvbSBcInplcm9cIiwgaW5zdGVhZCBvZiBhZGRpbmcgYHN0ZXBgIHRvXG4gIC8vIHRoZSBwcmV2aW91cyBvbmUsIGluIG9yZGVyIHRvIGF2b2lkIERTVCBvZGRpdGllc1xuXG4gIGZvciAodmFyIGdycCA9IDA7IGdycCA8IG51bUdyb3VwczsgZ3JwKyspIHtcbiAgICBncm91cHNbZ3JwXSA9IG5ldyBBcnJheSh0aW1lc2xvdHMpO1xuXG4gICAgZm9yICh2YXIgc2xvdCA9IDA7IHNsb3QgPCB0aW1lc2xvdHM7IHNsb3QrKykge1xuICAgICAgdmFyIHNsb3RJZHggPSBncnAgKiB0aW1lc2xvdHMgKyBzbG90O1xuICAgICAgdmFyIG1pbkZyb21TdGFydCA9IHNsb3RJZHggKiBzdGVwOyAvLyBBIGRhdGUgd2l0aCB0b3RhbCBtaW51dGVzIGNhbGN1bGF0ZWQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIGRheVxuXG4gICAgICBzbG90c1tzbG90SWR4XSA9IGdyb3Vwc1tncnBdW3Nsb3RdID0gbG9jYWxpemVyLmdldFNsb3REYXRlKHN0YXJ0LCBtaW51dGVzRnJvbU1pZG5pZ2h0LCBtaW5Gcm9tU3RhcnQpO1xuICAgIH1cbiAgfSAvLyBOZWNlc3NhcnkgdG8gYmUgYWJsZSB0byBzZWxlY3QgdXAgdW50aWwgdGhlIGxhc3QgdGltZXNsb3QgaW4gYSBkYXlcblxuXG4gIHZhciBsYXN0U2xvdE1pbkZyb21TdGFydCA9IHNsb3RzLmxlbmd0aCAqIHN0ZXA7XG4gIHNsb3RzLnB1c2gobG9jYWxpemVyLmdldFNsb3REYXRlKHN0YXJ0LCBtaW51dGVzRnJvbU1pZG5pZ2h0LCBsYXN0U2xvdE1pbkZyb21TdGFydCkpO1xuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uRnJvbURhdGUoZGF0ZSkge1xuICAgIHZhciBkaWZmID0gbG9jYWxpemVyLmdldFRvdGFsTWluKHN0YXJ0LCBkYXRlKTtcbiAgICByZXR1cm4gTWF0aC5taW4oZGlmZiwgdG90YWxNaW4pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBncm91cHM6IGdyb3VwcyxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShhcmdzKSB7XG4gICAgICBpZiAoZ2V0S2V5KGFyZ3MpICE9PSBrZXkpIHJldHVybiBnZXRTbG90TWV0cmljcyQxKGFyZ3MpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBkYXRlSXNJbkdyb3VwOiBmdW5jdGlvbiBkYXRlSXNJbkdyb3VwKGRhdGUsIGdyb3VwSW5kZXgpIHtcbiAgICAgIHZhciBuZXh0R3JvdXAgPSBncm91cHNbZ3JvdXBJbmRleCArIDFdO1xuICAgICAgcmV0dXJuIGxvY2FsaXplci5pblJhbmdlKGRhdGUsIGdyb3Vwc1tncm91cEluZGV4XVswXSwgbmV4dEdyb3VwID8gbmV4dEdyb3VwWzBdIDogZW5kLCAnbWludXRlcycpO1xuICAgIH0sXG4gICAgbmV4dFNsb3Q6IGZ1bmN0aW9uIG5leHRTbG90KHNsb3QpIHtcbiAgICAgIHZhciBuZXh0ID0gc2xvdHNbTWF0aC5taW4oc2xvdHMuaW5kZXhPZihzbG90KSArIDEsIHNsb3RzLmxlbmd0aCAtIDEpXTsgLy8gaW4gdGhlIGNhc2Ugb2YgdGhlIGxhc3Qgc2xvdCB3ZSB3b24ndCBhIGxvbmcgZW5vdWdoIHJhbmdlIHNvIG1hbnVhbGx5IGdldCBpdFxuXG4gICAgICBpZiAobmV4dCA9PT0gc2xvdCkgbmV4dCA9IGxvY2FsaXplci5hZGQoc2xvdCwgc3RlcCwgJ21pbnV0ZXMnKTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0sXG4gICAgY2xvc2VzdFNsb3RUb1Bvc2l0aW9uOiBmdW5jdGlvbiBjbG9zZXN0U2xvdFRvUG9zaXRpb24ocGVyY2VudCkge1xuICAgICAgdmFyIHNsb3QgPSBNYXRoLm1pbihzbG90cy5sZW5ndGggLSAxLCBNYXRoLm1heCgwLCBNYXRoLmZsb29yKHBlcmNlbnQgKiBudW1TbG90cykpKTtcbiAgICAgIHJldHVybiBzbG90c1tzbG90XTtcbiAgICB9LFxuICAgIGNsb3Nlc3RTbG90RnJvbVBvaW50OiBmdW5jdGlvbiBjbG9zZXN0U2xvdEZyb21Qb2ludChwb2ludCwgYm91bmRhcnlSZWN0KSB7XG4gICAgICB2YXIgcmFuZ2UgPSBNYXRoLmFicyhib3VuZGFyeVJlY3QudG9wIC0gYm91bmRhcnlSZWN0LmJvdHRvbSk7XG4gICAgICByZXR1cm4gdGhpcy5jbG9zZXN0U2xvdFRvUG9zaXRpb24oKHBvaW50LnkgLSBib3VuZGFyeVJlY3QudG9wKSAvIHJhbmdlKTtcbiAgICB9LFxuICAgIGNsb3Nlc3RTbG90RnJvbURhdGU6IGZ1bmN0aW9uIGNsb3Nlc3RTbG90RnJvbURhdGUoZGF0ZSwgb2Zmc2V0KSB7XG4gICAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGxvY2FsaXplci5sdChkYXRlLCBzdGFydCwgJ21pbnV0ZXMnKSkgcmV0dXJuIHNsb3RzWzBdO1xuICAgICAgdmFyIGRpZmZNaW5zID0gbG9jYWxpemVyLmRpZmYoc3RhcnQsIGRhdGUsICdtaW51dGVzJyk7XG4gICAgICByZXR1cm4gc2xvdHNbKGRpZmZNaW5zIC0gZGlmZk1pbnMgJSBzdGVwKSAvIHN0ZXAgKyBvZmZzZXRdO1xuICAgIH0sXG4gICAgc3RhcnRzQmVmb3JlRGF5OiBmdW5jdGlvbiBzdGFydHNCZWZvcmVEYXkoZGF0ZSkge1xuICAgICAgcmV0dXJuIGxvY2FsaXplci5sdChkYXRlLCBzdGFydCwgJ2RheScpO1xuICAgIH0sXG4gICAgc3RhcnRzQWZ0ZXJEYXk6IGZ1bmN0aW9uIHN0YXJ0c0FmdGVyRGF5KGRhdGUpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZXIuZ3QoZGF0ZSwgZW5kLCAnZGF5Jyk7XG4gICAgfSxcbiAgICBzdGFydHNCZWZvcmU6IGZ1bmN0aW9uIHN0YXJ0c0JlZm9yZShkYXRlKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemVyLmx0KGxvY2FsaXplci5tZXJnZShzdGFydCwgZGF0ZSksIHN0YXJ0LCAnbWludXRlcycpO1xuICAgIH0sXG4gICAgc3RhcnRzQWZ0ZXI6IGZ1bmN0aW9uIHN0YXJ0c0FmdGVyKGRhdGUpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZXIuZ3QobG9jYWxpemVyLm1lcmdlKGVuZCwgZGF0ZSksIGVuZCwgJ21pbnV0ZXMnKTtcbiAgICB9LFxuICAgIGdldFJhbmdlOiBmdW5jdGlvbiBnZXRSYW5nZShyYW5nZVN0YXJ0LCByYW5nZUVuZCwgaWdub3JlTWluLCBpZ25vcmVNYXgpIHtcbiAgICAgIGlmICghaWdub3JlTWluKSByYW5nZVN0YXJ0ID0gbG9jYWxpemVyLm1pbihlbmQsIGxvY2FsaXplci5tYXgoc3RhcnQsIHJhbmdlU3RhcnQpKTtcbiAgICAgIGlmICghaWdub3JlTWF4KSByYW5nZUVuZCA9IGxvY2FsaXplci5taW4oZW5kLCBsb2NhbGl6ZXIubWF4KHN0YXJ0LCByYW5nZUVuZCkpO1xuICAgICAgdmFyIHJhbmdlU3RhcnRNaW4gPSBwb3NpdGlvbkZyb21EYXRlKHJhbmdlU3RhcnQpO1xuICAgICAgdmFyIHJhbmdlRW5kTWluID0gcG9zaXRpb25Gcm9tRGF0ZShyYW5nZUVuZCk7XG4gICAgICB2YXIgdG9wID0gcmFuZ2VFbmRNaW4gPiBzdGVwICogbnVtU2xvdHMgJiYgIWxvY2FsaXplci5lcShlbmQsIHJhbmdlRW5kKSA/IChyYW5nZVN0YXJ0TWluIC0gc3RlcCkgLyAoc3RlcCAqIG51bVNsb3RzKSAqIDEwMCA6IHJhbmdlU3RhcnRNaW4gLyAoc3RlcCAqIG51bVNsb3RzKSAqIDEwMDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICBoZWlnaHQ6IHJhbmdlRW5kTWluIC8gKHN0ZXAgKiBudW1TbG90cykgKiAxMDAgLSB0b3AsXG4gICAgICAgIHN0YXJ0OiBwb3NpdGlvbkZyb21EYXRlKHJhbmdlU3RhcnQpLFxuICAgICAgICBzdGFydERhdGU6IHJhbmdlU3RhcnQsXG4gICAgICAgIGVuZDogcG9zaXRpb25Gcm9tRGF0ZShyYW5nZUVuZCksXG4gICAgICAgIGVuZERhdGU6IHJhbmdlRW5kXG4gICAgICB9O1xuICAgIH0sXG4gICAgZ2V0Q3VycmVudFRpbWVQb3NpdGlvbjogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWVQb3NpdGlvbihyYW5nZVN0YXJ0KSB7XG4gICAgICB2YXIgcmFuZ2VTdGFydE1pbiA9IHBvc2l0aW9uRnJvbURhdGUocmFuZ2VTdGFydCk7XG4gICAgICB2YXIgdG9wID0gcmFuZ2VTdGFydE1pbiAvIChzdGVwICogbnVtU2xvdHMpICogMTAwO1xuICAgICAgcmV0dXJuIHRvcDtcbiAgICB9XG4gIH07XG59XG5cbnZhciBFdmVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEV2ZW50KGRhdGEsIF9yZWYpIHtcbiAgICB2YXIgYWNjZXNzb3JzID0gX3JlZi5hY2Nlc3NvcnMsXG4gICAgICAgIHNsb3RNZXRyaWNzID0gX3JlZi5zbG90TWV0cmljcztcblxuICAgIHZhciBfc2xvdE1ldHJpY3MkZ2V0UmFuZ2UgPSBzbG90TWV0cmljcy5nZXRSYW5nZShhY2Nlc3NvcnMuc3RhcnQoZGF0YSksIGFjY2Vzc29ycy5lbmQoZGF0YSkpLFxuICAgICAgICBzdGFydCA9IF9zbG90TWV0cmljcyRnZXRSYW5nZS5zdGFydCxcbiAgICAgICAgc3RhcnREYXRlID0gX3Nsb3RNZXRyaWNzJGdldFJhbmdlLnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kID0gX3Nsb3RNZXRyaWNzJGdldFJhbmdlLmVuZCxcbiAgICAgICAgZW5kRGF0ZSA9IF9zbG90TWV0cmljcyRnZXRSYW5nZS5lbmREYXRlLFxuICAgICAgICB0b3AgPSBfc2xvdE1ldHJpY3MkZ2V0UmFuZ2UudG9wLFxuICAgICAgICBoZWlnaHQgPSBfc2xvdE1ldHJpY3MkZ2V0UmFuZ2UuaGVpZ2h0O1xuXG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIHRoaXMuc3RhcnRNcyA9ICtzdGFydERhdGU7XG4gICAgdGhpcy5lbmRNcyA9ICtlbmREYXRlO1xuICAgIHRoaXMudG9wID0gdG9wO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBldmVudCdzIHdpZHRoIHdpdGhvdXQgYW55IG92ZXJsYXAuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEV2ZW50LCBbe1xuICAgIGtleTogXCJfd2lkdGhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIC8vIFRoZSBjb250YWluZXIgZXZlbnQncyB3aWR0aCBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBtYXhpbXVtIG51bWJlciBvZlxuICAgICAgLy8gZXZlbnRzIGluIGFueSBvZiBpdHMgcm93cy5cbiAgICAgIGlmICh0aGlzLnJvd3MpIHtcbiAgICAgICAgdmFyIGNvbHVtbnMgPSB0aGlzLnJvd3MucmVkdWNlKGZ1bmN0aW9uIChtYXgsIHJvdykge1xuICAgICAgICAgIHJldHVybiBNYXRoLm1heChtYXgsIHJvdy5sZWF2ZXMubGVuZ3RoICsgMSk7XG4gICAgICAgIH0sIC8vIGFkZCBpdHNlbGZcbiAgICAgICAgMCkgKyAxOyAvLyBhZGQgdGhlIGNvbnRhaW5lclxuXG4gICAgICAgIHJldHVybiAxMDAgLyBjb2x1bW5zO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXZhaWxhYmxlV2lkdGggPSAxMDAgLSB0aGlzLmNvbnRhaW5lci5fd2lkdGg7IC8vIFRoZSByb3cgZXZlbnQncyB3aWR0aCBpcyB0aGUgc3BhY2UgbGVmdCBieSB0aGUgY29udGFpbmVyLCBkaXZpZGVkXG4gICAgICAvLyBhbW9uZyBpdHNlbGYgYW5kIGl0cyBsZWF2ZXMuXG5cbiAgICAgIGlmICh0aGlzLmxlYXZlcykge1xuICAgICAgICByZXR1cm4gYXZhaWxhYmxlV2lkdGggLyAodGhpcy5sZWF2ZXMubGVuZ3RoICsgMSk7XG4gICAgICB9IC8vIFRoZSBsZWFmIGV2ZW50J3Mgd2lkdGggaXMgZGV0ZXJtaW5lZCBieSBpdHMgcm93J3Mgd2lkdGhcblxuXG4gICAgICByZXR1cm4gdGhpcy5yb3cuX3dpZHRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZXZlbnQncyBjYWxjdWxhdGVkIHdpZHRoLCBwb3NzaWJseSB3aXRoIGV4dHJhIHdpZHRoIGFkZGVkIGZvclxuICAgICAqIG92ZXJsYXBwaW5nIGVmZmVjdC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIndpZHRoXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbm9PdmVybGFwID0gdGhpcy5fd2lkdGg7XG4gICAgICB2YXIgb3ZlcmxhcCA9IE1hdGgubWluKDEwMCwgdGhpcy5fd2lkdGggKiAxLjcpOyAvLyBDb250YWluZXJzIGNhbiBhbHdheXMgZ3Jvdy5cblxuICAgICAgaWYgKHRoaXMucm93cykge1xuICAgICAgICByZXR1cm4gb3ZlcmxhcDtcbiAgICAgIH0gLy8gUm93cyBjYW4gZ3JvdyBpZiB0aGV5IGhhdmUgbGVhdmVzLlxuXG5cbiAgICAgIGlmICh0aGlzLmxlYXZlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5sZWF2ZXMubGVuZ3RoID4gMCA/IG92ZXJsYXAgOiBub092ZXJsYXA7XG4gICAgICB9IC8vIExlYXZlcyBjYW4gZ3JvdyB1bmxlc3MgdGhleSdyZSB0aGUgbGFzdCBpdGVtIGluIGEgcm93LlxuXG5cbiAgICAgIHZhciBsZWF2ZXMgPSB0aGlzLnJvdy5sZWF2ZXM7XG4gICAgICB2YXIgaW5kZXggPSBsZWF2ZXMuaW5kZXhPZih0aGlzKTtcbiAgICAgIHJldHVybiBpbmRleCA9PT0gbGVhdmVzLmxlbmd0aCAtIDEgPyBub092ZXJsYXAgOiBvdmVybGFwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ4T2Zmc2V0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAvLyBDb250YWluZXJzIGhhdmUgbm8gb2Zmc2V0LlxuICAgICAgaWYgKHRoaXMucm93cykgcmV0dXJuIDA7IC8vIFJvd3MgYWx3YXlzIHN0YXJ0IHdoZXJlIHRoZWlyIGNvbnRhaW5lciBlbmRzLlxuXG4gICAgICBpZiAodGhpcy5sZWF2ZXMpIHJldHVybiB0aGlzLmNvbnRhaW5lci5fd2lkdGg7IC8vIExlYXZlcyBhcmUgc3ByZWFkIG91dCBldmVubHkgb24gdGhlIHNwYWNlIGxlZnQgYnkgaXRzIHJvdy5cblxuICAgICAgdmFyIF90aGlzJHJvdyA9IHRoaXMucm93LFxuICAgICAgICAgIGxlYXZlcyA9IF90aGlzJHJvdy5sZWF2ZXMsXG4gICAgICAgICAgeE9mZnNldCA9IF90aGlzJHJvdy54T2Zmc2V0LFxuICAgICAgICAgIF93aWR0aCA9IF90aGlzJHJvdy5fd2lkdGg7XG4gICAgICB2YXIgaW5kZXggPSBsZWF2ZXMuaW5kZXhPZih0aGlzKSArIDE7XG4gICAgICByZXR1cm4geE9mZnNldCArIGluZGV4ICogX3dpZHRoO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFdmVudDtcbn0oKTtcbi8qKlxuICogUmV0dXJuIHRydWUgaWYgZXZlbnQgYSBhbmQgYiBpcyBjb25zaWRlcmVkIHRvIGJlIG9uIHRoZSBzYW1lIHJvdy5cbiAqL1xuXG5cbmZ1bmN0aW9uIG9uU2FtZVJvdyhhLCBiLCBtaW5pbXVtU3RhcnREaWZmZXJlbmNlKSB7XG4gIHJldHVybiAoLy8gT2NjdXBpZXMgdGhlIHNhbWUgc3RhcnQgc2xvdC5cbiAgICBNYXRoLmFicyhiLnN0YXJ0IC0gYS5zdGFydCkgPCBtaW5pbXVtU3RhcnREaWZmZXJlbmNlIHx8IGIuc3RhcnQgPiBhLnN0YXJ0ICYmIGIuc3RhcnQgPCBhLmVuZFxuICApO1xufVxuXG5mdW5jdGlvbiBzb3J0QnlSZW5kZXIoZXZlbnRzKSB7XG4gIHZhciBzb3J0ZWRCeVRpbWUgPSBzb3J0QnkoZXZlbnRzLCBbJ3N0YXJ0TXMnLCBmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiAtZS5lbmRNcztcbiAgfV0pO1xuICB2YXIgc29ydGVkID0gW107XG5cbiAgd2hpbGUgKHNvcnRlZEJ5VGltZS5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGV2ZW50ID0gc29ydGVkQnlUaW1lLnNoaWZ0KCk7XG4gICAgc29ydGVkLnB1c2goZXZlbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3J0ZWRCeVRpbWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0ZXN0ID0gc29ydGVkQnlUaW1lW2ldOyAvLyBTdGlsbCBpbnNpZGUgdGhpcyBldmVudCwgbG9vayBmb3IgbmV4dC5cblxuICAgICAgaWYgKGV2ZW50LmVuZE1zID4gdGVzdC5zdGFydE1zKSBjb250aW51ZTsgLy8gV2UndmUgZm91bmQgdGhlIGZpcnN0IGV2ZW50IG9mIHRoZSBuZXh0IGV2ZW50IGdyb3VwLlxuICAgICAgLy8gSWYgdGhhdCBldmVudCBpcyBub3QgcmlnaHQgbmV4dCB0byBvdXIgY3VycmVudCBldmVudCwgd2UgaGF2ZSB0b1xuICAgICAgLy8gbW92ZSBpdCBoZXJlLlxuXG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgdmFyIF9ldmVudCA9IHNvcnRlZEJ5VGltZS5zcGxpY2UoaSwgMSlbMF07XG4gICAgICAgIHNvcnRlZC5wdXNoKF9ldmVudCk7XG4gICAgICB9IC8vIFdlJ3ZlIGFscmVhZHkgZm91bmQgdGhlIG5leHQgZXZlbnQgZ3JvdXAsIHNvIHN0b3AgbG9va2luZy5cblxuXG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ydGVkO1xufVxuXG5mdW5jdGlvbiBnZXRTdHlsZWRFdmVudHMoX3JlZjIpIHtcbiAgdmFyIGV2ZW50cyA9IF9yZWYyLmV2ZW50cyxcbiAgICAgIG1pbmltdW1TdGFydERpZmZlcmVuY2UgPSBfcmVmMi5taW5pbXVtU3RhcnREaWZmZXJlbmNlLFxuICAgICAgc2xvdE1ldHJpY3MgPSBfcmVmMi5zbG90TWV0cmljcyxcbiAgICAgIGFjY2Vzc29ycyA9IF9yZWYyLmFjY2Vzc29ycztcbiAgLy8gQ3JlYXRlIHByb3h5IGV2ZW50cyBhbmQgb3JkZXIgdGhlbSBzbyB0aGF0IHdlIGRvbid0IGhhdmVcbiAgLy8gdG8gZmlkZGxlIHdpdGggei1pbmRleGVzLlxuICB2YXIgcHJveGllcyA9IGV2ZW50cy5tYXAoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIG5ldyBFdmVudChldmVudCwge1xuICAgICAgc2xvdE1ldHJpY3M6IHNsb3RNZXRyaWNzLFxuICAgICAgYWNjZXNzb3JzOiBhY2Nlc3NvcnNcbiAgICB9KTtcbiAgfSk7XG4gIHZhciBldmVudHNJblJlbmRlck9yZGVyID0gc29ydEJ5UmVuZGVyKHByb3hpZXMpOyAvLyBHcm91cCBvdmVybGFwcGluZyBldmVudHMsIHdoaWxlIGtlZXBpbmcgb3JkZXIuXG4gIC8vIEV2ZXJ5IGV2ZW50IGlzIGFsd2F5cyBvbmUgb2Y6IGNvbnRhaW5lciwgcm93IG9yIGxlYWYuXG4gIC8vIENvbnRhaW5lcnMgY2FuIGNvbnRhaW4gcm93cywgYW5kIHJvd3MgY2FuIGNvbnRhaW4gbGVhdmVzLlxuXG4gIHZhciBjb250YWluZXJFdmVudHMgPSBbXTtcblxuICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XG4gICAgdmFyIGV2ZW50ID0gZXZlbnRzSW5SZW5kZXJPcmRlcltpXTsgLy8gQ2hlY2sgaWYgdGhpcyBldmVudCBjYW4gZ28gaW50byBhIGNvbnRhaW5lciBldmVudC5cblxuICAgIHZhciBjb250YWluZXIgPSBjb250YWluZXJFdmVudHMuZmluZChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMuZW5kID4gZXZlbnQuc3RhcnQgfHwgTWF0aC5hYnMoZXZlbnQuc3RhcnQgLSBjLnN0YXJ0KSA8IG1pbmltdW1TdGFydERpZmZlcmVuY2U7XG4gICAgfSk7IC8vIENvdWxkbid0IGZpbmQgYSBjb250YWluZXIg4oCUIHRoYXQgbWVhbnMgdGhpcyBldmVudCBpcyBhIGNvbnRhaW5lci5cblxuICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICBldmVudC5yb3dzID0gW107XG4gICAgICBjb250YWluZXJFdmVudHMucHVzaChldmVudCk7XG4gICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgIH0gLy8gRm91bmQgYSBjb250YWluZXIgZm9yIHRoZSBldmVudC5cblxuXG4gICAgZXZlbnQuY29udGFpbmVyID0gY29udGFpbmVyOyAvLyBDaGVjayBpZiB0aGUgZXZlbnQgY2FuIGJlIHBsYWNlZCBpbiBhbiBleGlzdGluZyByb3cuXG4gICAgLy8gU3RhcnQgbG9va2luZyBmcm9tIGJlaGluZC5cblxuICAgIHZhciByb3cgPSBudWxsO1xuXG4gICAgZm9yICh2YXIgaiA9IGNvbnRhaW5lci5yb3dzLmxlbmd0aCAtIDE7ICFyb3cgJiYgaiA+PSAwOyBqLS0pIHtcbiAgICAgIGlmIChvblNhbWVSb3coY29udGFpbmVyLnJvd3Nbal0sIGV2ZW50LCBtaW5pbXVtU3RhcnREaWZmZXJlbmNlKSkge1xuICAgICAgICByb3cgPSBjb250YWluZXIucm93c1tqXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocm93KSB7XG4gICAgICAvLyBGb3VuZCBhIHJvdywgc28gYWRkIGl0LlxuICAgICAgcm93LmxlYXZlcy5wdXNoKGV2ZW50KTtcbiAgICAgIGV2ZW50LnJvdyA9IHJvdztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ291bGRuJ3QgZmluZCBhIHJvdyDigJMgdGhhdCBtZWFucyB0aGlzIGV2ZW50IGlzIGEgcm93LlxuICAgICAgZXZlbnQubGVhdmVzID0gW107XG4gICAgICBjb250YWluZXIucm93cy5wdXNoKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHNJblJlbmRlck9yZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9yZXQgPSBfbG9vcChpKTtcblxuICAgIGlmIChfcmV0ID09PSBcImNvbnRpbnVlXCIpIGNvbnRpbnVlO1xuICB9IC8vIFJldHVybiB0aGUgb3JpZ2luYWwgZXZlbnRzLCBhbG9uZyB3aXRoIHRoZWlyIHN0eWxlcy5cblxuXG4gIHJldHVybiBldmVudHNJblJlbmRlck9yZGVyLm1hcChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXZlbnQ6IGV2ZW50LmRhdGEsXG4gICAgICBzdHlsZToge1xuICAgICAgICB0b3A6IGV2ZW50LnRvcCxcbiAgICAgICAgaGVpZ2h0OiBldmVudC5oZWlnaHQsXG4gICAgICAgIHdpZHRoOiBldmVudC53aWR0aCxcbiAgICAgICAgeE9mZnNldDogTWF0aC5tYXgoMCwgZXZlbnQueE9mZnNldClcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TWF4SWR4REZTKG5vZGUsIG1heElkeCwgdmlzaXRlZCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuZnJpZW5kcy5sZW5ndGg7ICsraSkge1xuICAgIGlmICh2aXNpdGVkLmluZGV4T2Yobm9kZS5mcmllbmRzW2ldKSA+IC0xKSBjb250aW51ZTtcbiAgICBtYXhJZHggPSBtYXhJZHggPiBub2RlLmZyaWVuZHNbaV0uaWR4ID8gbWF4SWR4IDogbm9kZS5mcmllbmRzW2ldLmlkeDsgLy8gVE9ETyA6IHRyYWNlIGl0IGJ5IG5vdCBvYmplY3QgYnV0IGtpbmRhIGluZGV4IG9yIHNvbWV0aGluZyBmb3IgcGVyZm9ybWFuY2VcblxuICAgIHZpc2l0ZWQucHVzaChub2RlLmZyaWVuZHNbaV0pO1xuICAgIHZhciBuZXdJZHggPSBnZXRNYXhJZHhERlMobm9kZS5mcmllbmRzW2ldLCBtYXhJZHgsIHZpc2l0ZWQpO1xuICAgIG1heElkeCA9IG1heElkeCA+IG5ld0lkeCA/IG1heElkeCA6IG5ld0lkeDtcbiAgfVxuXG4gIHJldHVybiBtYXhJZHg7XG59XG5cbmZ1bmN0aW9uIG5vT3ZlcmxhcCAoX3JlZikge1xuICB2YXIgZXZlbnRzID0gX3JlZi5ldmVudHMsXG4gICAgICBtaW5pbXVtU3RhcnREaWZmZXJlbmNlID0gX3JlZi5taW5pbXVtU3RhcnREaWZmZXJlbmNlLFxuICAgICAgc2xvdE1ldHJpY3MgPSBfcmVmLnNsb3RNZXRyaWNzLFxuICAgICAgYWNjZXNzb3JzID0gX3JlZi5hY2Nlc3NvcnM7XG4gIHZhciBzdHlsZWRFdmVudHMgPSBnZXRTdHlsZWRFdmVudHMoe1xuICAgIGV2ZW50czogZXZlbnRzLFxuICAgIG1pbmltdW1TdGFydERpZmZlcmVuY2U6IG1pbmltdW1TdGFydERpZmZlcmVuY2UsXG4gICAgc2xvdE1ldHJpY3M6IHNsb3RNZXRyaWNzLFxuICAgIGFjY2Vzc29yczogYWNjZXNzb3JzXG4gIH0pO1xuICBzdHlsZWRFdmVudHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIGEgPSBhLnN0eWxlO1xuICAgIGIgPSBiLnN0eWxlO1xuICAgIGlmIChhLnRvcCAhPT0gYi50b3ApIHJldHVybiBhLnRvcCA+IGIudG9wID8gMSA6IC0xO2Vsc2UgcmV0dXJuIGEudG9wICsgYS5oZWlnaHQgPCBiLnRvcCArIGIuaGVpZ2h0ID8gMSA6IC0xO1xuICB9KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlZEV2ZW50cy5sZW5ndGg7ICsraSkge1xuICAgIHN0eWxlZEV2ZW50c1tpXS5mcmllbmRzID0gW107XG4gICAgZGVsZXRlIHN0eWxlZEV2ZW50c1tpXS5zdHlsZS5sZWZ0O1xuICAgIGRlbGV0ZSBzdHlsZWRFdmVudHNbaV0uc3R5bGUubGVmdDtcbiAgICBkZWxldGUgc3R5bGVkRXZlbnRzW2ldLmlkeDtcbiAgICBkZWxldGUgc3R5bGVkRXZlbnRzW2ldLnNpemU7XG4gIH1cblxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgc3R5bGVkRXZlbnRzLmxlbmd0aCAtIDE7ICsrX2kpIHtcbiAgICB2YXIgc2UxID0gc3R5bGVkRXZlbnRzW19pXTtcbiAgICB2YXIgeTEgPSBzZTEuc3R5bGUudG9wO1xuICAgIHZhciB5MiA9IHNlMS5zdHlsZS50b3AgKyBzZTEuc3R5bGUuaGVpZ2h0O1xuXG4gICAgZm9yICh2YXIgaiA9IF9pICsgMTsgaiA8IHN0eWxlZEV2ZW50cy5sZW5ndGg7ICsraikge1xuICAgICAgdmFyIHNlMiA9IHN0eWxlZEV2ZW50c1tqXTtcbiAgICAgIHZhciB5MyA9IHNlMi5zdHlsZS50b3A7XG4gICAgICB2YXIgeTQgPSBzZTIuc3R5bGUudG9wICsgc2UyLnN0eWxlLmhlaWdodDsgLy8gYmUgZnJpZW5kcyB3aGVuIG92ZXJsYXBwZWRcblxuICAgICAgaWYgKHkzIDw9IHkxICYmIHkxIDwgeTQgfHwgeTEgPD0geTMgJiYgeTMgPCB5Mikge1xuICAgICAgICAvLyBUT0RPIDogaGFzaG1hcCB3b3VsZCBiZSBlZmZlY3RpdmUgZm9yIHBlcmZvcm1hbmNlXG4gICAgICAgIHNlMS5mcmllbmRzLnB1c2goc2UyKTtcbiAgICAgICAgc2UyLmZyaWVuZHMucHVzaChzZTEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHN0eWxlZEV2ZW50cy5sZW5ndGg7ICsrX2kyKSB7XG4gICAgdmFyIHNlID0gc3R5bGVkRXZlbnRzW19pMl07XG4gICAgdmFyIGJpdG1hcCA9IFtdO1xuXG4gICAgZm9yICh2YXIgX2ogPSAwOyBfaiA8IDEwMDsgKytfaikge1xuICAgICAgYml0bWFwLnB1c2goMSk7XG4gICAgfSAvLyAxIG1lYW5zIGF2YWlsYWJsZVxuXG5cbiAgICBmb3IgKHZhciBfajIgPSAwOyBfajIgPCBzZS5mcmllbmRzLmxlbmd0aDsgKytfajIpIHtcbiAgICAgIGlmIChzZS5mcmllbmRzW19qMl0uaWR4ICE9PSB1bmRlZmluZWQpIGJpdG1hcFtzZS5mcmllbmRzW19qMl0uaWR4XSA9IDA7XG4gICAgfSAvLyAwIG1lYW5zIHJlc2VydmVkXG5cblxuICAgIHNlLmlkeCA9IGJpdG1hcC5pbmRleE9mKDEpO1xuICB9XG5cbiAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgc3R5bGVkRXZlbnRzLmxlbmd0aDsgKytfaTMpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgaWYgKHN0eWxlZEV2ZW50c1tfaTNdLnNpemUpIGNvbnRpbnVlO1xuICAgIHZhciBhbGxGcmllbmRzID0gW107XG4gICAgdmFyIG1heElkeCA9IGdldE1heElkeERGUyhzdHlsZWRFdmVudHNbX2kzXSwgMCwgYWxsRnJpZW5kcyk7XG4gICAgc2l6ZSA9IDEwMCAvIChtYXhJZHggKyAxKTtcbiAgICBzdHlsZWRFdmVudHNbX2kzXS5zaXplID0gc2l6ZTtcblxuICAgIGZvciAodmFyIF9qMyA9IDA7IF9qMyA8IGFsbEZyaWVuZHMubGVuZ3RoOyArK19qMykge1xuICAgICAgYWxsRnJpZW5kc1tfajNdLnNpemUgPSBzaXplO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IHN0eWxlZEV2ZW50cy5sZW5ndGg7ICsrX2k0KSB7XG4gICAgdmFyIGUgPSBzdHlsZWRFdmVudHNbX2k0XTtcbiAgICBlLnN0eWxlLmxlZnQgPSBlLmlkeCAqIGUuc2l6ZTsgLy8gc3RyZXRjaCB0byBtYXhpbXVtXG5cbiAgICB2YXIgX21heElkeCA9IDA7XG5cbiAgICBmb3IgKHZhciBfajQgPSAwOyBfajQgPCBlLmZyaWVuZHMubGVuZ3RoOyArK19qNCkge1xuICAgICAgdmFyIGlkeCA9IGUuZnJpZW5kc1tfajRdO1xuICAgICAgX21heElkeCA9IF9tYXhJZHggPiBpZHggPyBfbWF4SWR4IDogaWR4O1xuICAgIH1cblxuICAgIGlmIChfbWF4SWR4IDw9IGUuaWR4KSBlLnNpemUgPSAxMDAgLSBlLmlkeCAqIGUuc2l6ZTsgLy8gcGFkZGluZyBiZXR3ZWVuIGV2ZW50c1xuICAgIC8vIGZvciB0aGlzIGZlYXR1cmUsIGB3aWR0aGAgaXMgbm90IHBlcmNlbnRhZ2UgYmFzZWQgdW5pdCBhbnltb3JlXG4gICAgLy8gaXQgd2lsbCBiZSB1c2VkIHdpdGggY2FsYygpXG5cbiAgICB2YXIgcGFkZGluZyA9IGUuaWR4ID09PSAwID8gMCA6IDM7XG4gICAgZS5zdHlsZS53aWR0aCA9IFwiY2FsYyhcIiArIGUuc2l6ZSArIFwiJSAtIFwiICsgcGFkZGluZyArIFwicHgpXCI7XG4gICAgZS5zdHlsZS5oZWlnaHQgPSBcImNhbGMoXCIgKyBlLnN0eWxlLmhlaWdodCArIFwiJSAtIDJweClcIjtcbiAgICBlLnN0eWxlLnhPZmZzZXQgPSBcImNhbGMoXCIgKyBlLnN0eWxlLmxlZnQgKyBcIiUgKyBcIiArIHBhZGRpbmcgKyBcInB4KVwiO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlZEV2ZW50cztcbn1cblxuLyplc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIqL1xudmFyIERlZmF1bHRBbGdvcml0aG1zID0ge1xuICBvdmVybGFwOiBnZXRTdHlsZWRFdmVudHMsXG4gICduby1vdmVybGFwJzogbm9PdmVybGFwXG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGEpIHtcbiAgcmV0dXJuICEhKGEgJiYgYS5jb25zdHJ1Y3RvciAmJiBhLmNhbGwgJiYgYS5hcHBseSk7XG59IC8vXG5cblxuZnVuY3Rpb24gZ2V0U3R5bGVkRXZlbnRzJDEoX3JlZikge1xuICB2YXIgZXZlbnRzID0gX3JlZi5ldmVudHMsXG4gICAgICBtaW5pbXVtU3RhcnREaWZmZXJlbmNlID0gX3JlZi5taW5pbXVtU3RhcnREaWZmZXJlbmNlLFxuICAgICAgc2xvdE1ldHJpY3MgPSBfcmVmLnNsb3RNZXRyaWNzLFxuICAgICAgYWNjZXNzb3JzID0gX3JlZi5hY2Nlc3NvcnMsXG4gICAgICBkYXlMYXlvdXRBbGdvcml0aG0gPSBfcmVmLmRheUxheW91dEFsZ29yaXRobTtcbiAgdmFyIGFsZ29yaXRobSA9IGRheUxheW91dEFsZ29yaXRobTtcbiAgaWYgKGRheUxheW91dEFsZ29yaXRobSBpbiBEZWZhdWx0QWxnb3JpdGhtcykgYWxnb3JpdGhtID0gRGVmYXVsdEFsZ29yaXRobXNbZGF5TGF5b3V0QWxnb3JpdGhtXTtcblxuICBpZiAoIWlzRnVuY3Rpb24oYWxnb3JpdGhtKSkge1xuICAgIC8vIGludmFsaWQgYWxnb3JpdGhtXG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIGFsZ29yaXRobS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgVGltZVNsb3RHcm91cCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUaW1lU2xvdEdyb3VwLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUaW1lU2xvdEdyb3VwKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUaW1lU2xvdEdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlbmRlclNsb3QgPSBfdGhpcyRwcm9wcy5yZW5kZXJTbG90LFxuICAgICAgICByZXNvdXJjZSA9IF90aGlzJHByb3BzLnJlc291cmNlLFxuICAgICAgICBncm91cCA9IF90aGlzJHByb3BzLmdyb3VwLFxuICAgICAgICBnZXR0ZXJzID0gX3RoaXMkcHJvcHMuZ2V0dGVycyxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50cztcbiAgICBfdGhpcyRwcm9wcyRjb21wb25lbnQgPSBfdGhpcyRwcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29tcG9uZW50O1xuICAgIHZhciBfdGhpcyRwcm9wcyRjb21wb25lbnQyID0gX3RoaXMkcHJvcHMkY29tcG9uZW50LnRpbWVTbG90V3JhcHBlcixcbiAgICAgICAgV3JhcHBlciA9IF90aGlzJHByb3BzJGNvbXBvbmVudDIgPT09IHZvaWQgMCA/IE5vb3BXcmFwcGVyIDogX3RoaXMkcHJvcHMkY29tcG9uZW50MjtcbiAgICB2YXIgZ3JvdXBQcm9wcyA9IGdldHRlcnMgPyBnZXR0ZXJzLnNsb3RHcm91cFByb3AoKSA6IHt9O1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IFwicmJjLXRpbWVzbG90LWdyb3VwXCJcbiAgICB9LCBncm91cFByb3BzKSwgZ3JvdXAubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaWR4KSB7XG4gICAgICB2YXIgc2xvdFByb3BzID0gZ2V0dGVycyA/IGdldHRlcnMuc2xvdFByb3AodmFsdWUsIHJlc291cmNlKSA6IHt9O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZXIsIHtcbiAgICAgICAga2V5OiBpZHgsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgc2xvdFByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xzeCgncmJjLXRpbWUtc2xvdCcsIHNsb3RQcm9wcy5jbGFzc05hbWUpXG4gICAgICB9KSwgcmVuZGVyU2xvdCAmJiByZW5kZXJTbG90KHZhbHVlLCBpZHgpKSk7XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBUaW1lU2xvdEdyb3VwO1xufShDb21wb25lbnQpO1xuVGltZVNsb3RHcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIHJlbmRlclNsb3Q6IFByb3BUeXBlcy5mdW5jLFxuICBncm91cDogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIHJlc291cmNlOiBQcm9wVHlwZXMuYW55LFxuICBjb21wb25lbnRzOiBQcm9wVHlwZXMub2JqZWN0LFxuICBnZXR0ZXJzOiBQcm9wVHlwZXMub2JqZWN0XG59IDoge307XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVBlcmNlbnQodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnID8gdiA6IHYgKyAnJSc7XG59XG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG5cblxuZnVuY3Rpb24gVGltZUdyaWRFdmVudChwcm9wcykge1xuICB2YXIgX2V4dGVuZHMyLCBfZXh0ZW5kczM7XG5cbiAgdmFyIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBldmVudCA9IHByb3BzLmV2ZW50LFxuICAgICAgYWNjZXNzb3JzID0gcHJvcHMuYWNjZXNzb3JzLFxuICAgICAgcnRsID0gcHJvcHMucnRsLFxuICAgICAgc2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZCxcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBjb250aW51ZXNFYXJsaWVyID0gcHJvcHMuY29udGludWVzRWFybGllcixcbiAgICAgIGNvbnRpbnVlc0xhdGVyID0gcHJvcHMuY29udGludWVzTGF0ZXIsXG4gICAgICBnZXR0ZXJzID0gcHJvcHMuZ2V0dGVycyxcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgb25Eb3VibGVDbGljayA9IHByb3BzLm9uRG91YmxlQ2xpY2ssXG4gICAgICBpc0JhY2tncm91bmRFdmVudCA9IHByb3BzLmlzQmFja2dyb3VuZEV2ZW50LFxuICAgICAgb25LZXlQcmVzcyA9IHByb3BzLm9uS2V5UHJlc3MsXG4gICAgICBfcHJvcHMkY29tcG9uZW50cyA9IHByb3BzLmNvbXBvbmVudHMsXG4gICAgICBFdmVudCA9IF9wcm9wcyRjb21wb25lbnRzLmV2ZW50LFxuICAgICAgRXZlbnRXcmFwcGVyID0gX3Byb3BzJGNvbXBvbmVudHMuZXZlbnRXcmFwcGVyO1xuICB2YXIgdGl0bGUgPSBhY2Nlc3NvcnMudGl0bGUoZXZlbnQpO1xuICB2YXIgdG9vbHRpcCA9IGFjY2Vzc29ycy50b29sdGlwKGV2ZW50KTtcbiAgdmFyIGVuZCA9IGFjY2Vzc29ycy5lbmQoZXZlbnQpO1xuICB2YXIgc3RhcnQgPSBhY2Nlc3NvcnMuc3RhcnQoZXZlbnQpO1xuICB2YXIgdXNlclByb3BzID0gZ2V0dGVycy5ldmVudFByb3AoZXZlbnQsIHN0YXJ0LCBlbmQsIHNlbGVjdGVkKTtcbiAgdmFyIGhlaWdodCA9IHN0eWxlLmhlaWdodCxcbiAgICAgIHRvcCA9IHN0eWxlLnRvcCxcbiAgICAgIHdpZHRoID0gc3R5bGUud2lkdGgsXG4gICAgICB4T2Zmc2V0ID0gc3R5bGUueE9mZnNldDtcbiAgdmFyIGlubmVyID0gWy8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBrZXk6IFwiMVwiLFxuICAgIGNsYXNzTmFtZTogXCJyYmMtZXZlbnQtbGFiZWxcIlxuICB9LCBsYWJlbCksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBrZXk6IFwiMlwiLFxuICAgIGNsYXNzTmFtZTogXCJyYmMtZXZlbnQtY29udGVudFwiXG4gIH0sIEV2ZW50ID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRXZlbnQsIHtcbiAgICBldmVudDogZXZlbnQsXG4gICAgdGl0bGU6IHRpdGxlXG4gIH0pIDogdGl0bGUpXTtcbiAgdmFyIGV2ZW50U3R5bGUgPSBpc0JhY2tncm91bmRFdmVudCA/IF9leHRlbmRzKHt9LCB1c2VyUHJvcHMuc3R5bGUsIChfZXh0ZW5kczIgPSB7XG4gICAgdG9wOiBzdHJpbmdpZnlQZXJjZW50KHRvcCksXG4gICAgaGVpZ2h0OiBzdHJpbmdpZnlQZXJjZW50KGhlaWdodCksXG4gICAgLy8gQWRkaW5nIDEwcHggdG8gdGFrZSBldmVudHMgY29udGFpbmVyIHJpZ2h0IG1hcmdpbiBpbnRvIGFjY291bnRcbiAgICB3aWR0aDogXCJjYWxjKFwiICsgd2lkdGggKyBcIiArIDEwcHgpXCJcbiAgfSwgX2V4dGVuZHMyW3J0bCA/ICdyaWdodCcgOiAnbGVmdCddID0gc3RyaW5naWZ5UGVyY2VudChNYXRoLm1heCgwLCB4T2Zmc2V0KSksIF9leHRlbmRzMikpIDogX2V4dGVuZHMoe30sIHVzZXJQcm9wcy5zdHlsZSwgKF9leHRlbmRzMyA9IHtcbiAgICB0b3A6IHN0cmluZ2lmeVBlcmNlbnQodG9wKSxcbiAgICB3aWR0aDogc3RyaW5naWZ5UGVyY2VudCh3aWR0aCksXG4gICAgaGVpZ2h0OiBzdHJpbmdpZnlQZXJjZW50KGhlaWdodClcbiAgfSwgX2V4dGVuZHMzW3J0bCA/ICdyaWdodCcgOiAnbGVmdCddID0gc3RyaW5naWZ5UGVyY2VudCh4T2Zmc2V0KSwgX2V4dGVuZHMzKSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChFdmVudFdyYXBwZXIsIF9leHRlbmRzKHtcbiAgICB0eXBlOiBcInRpbWVcIlxuICB9LCBwcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIG9uRG91YmxlQ2xpY2s6IG9uRG91YmxlQ2xpY2ssXG4gICAgc3R5bGU6IGV2ZW50U3R5bGUsXG4gICAgb25LZXlQcmVzczogb25LZXlQcmVzcyxcbiAgICB0aXRsZTogdG9vbHRpcCA/ICh0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnID8gbGFiZWwgKyAnOiAnIDogJycpICsgdG9vbHRpcCA6IHVuZGVmaW5lZCxcbiAgICBjbGFzc05hbWU6IGNsc3goaXNCYWNrZ3JvdW5kRXZlbnQgPyAncmJjLWJhY2tncm91bmQtZXZlbnQnIDogJ3JiYy1ldmVudCcsIGNsYXNzTmFtZSwgdXNlclByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgJ3JiYy1zZWxlY3RlZCc6IHNlbGVjdGVkLFxuICAgICAgJ3JiYy1ldmVudC1jb250aW51ZXMtZWFybGllcic6IGNvbnRpbnVlc0VhcmxpZXIsXG4gICAgICAncmJjLWV2ZW50LWNvbnRpbnVlcy1sYXRlcic6IGNvbnRpbnVlc0xhdGVyXG4gICAgfSlcbiAgfSwgaW5uZXIpKTtcbn1cblxudmFyIERheUNvbHVtbldyYXBwZXIgPSBmdW5jdGlvbiBEYXlDb2x1bW5XcmFwcGVyKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHN0eWxlOiBzdHlsZVxuICB9LCBjaGlsZHJlbik7XG59O1xuXG52YXIgX2V4Y2x1ZGVkJDIgPSBbXCJkYXlQcm9wXCJdLFxuICAgIF9leGNsdWRlZDIgPSBbXCJldmVudENvbnRhaW5lcldyYXBwZXJcIl07XG5cbnZhciBEYXlDb2x1bW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRGF5Q29sdW1uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEYXlDb2x1bW4oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9hcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgX2FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChfYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzZWxlY3Rpbmc6IGZhbHNlLFxuICAgICAgdGltZUluZGljYXRvclBvc2l0aW9uOiBudWxsXG4gICAgfTtcbiAgICBfdGhpcy5pbnRlcnZhbFRyaWdnZXJlZCA9IGZhbHNlO1xuXG4gICAgX3RoaXMucmVuZGVyRXZlbnRzID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBldmVudHMgPSBfcmVmLmV2ZW50cyxcbiAgICAgICAgICBpc0JhY2tncm91bmRFdmVudCA9IF9yZWYuaXNCYWNrZ3JvdW5kRXZlbnQ7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBydGwgPSBfdGhpcyRwcm9wcy5ydGwsXG4gICAgICAgICAgc2VsZWN0ZWQgPSBfdGhpcyRwcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgICBhY2Nlc3NvcnMgPSBfdGhpcyRwcm9wcy5hY2Nlc3NvcnMsXG4gICAgICAgICAgbG9jYWxpemVyID0gX3RoaXMkcHJvcHMubG9jYWxpemVyLFxuICAgICAgICAgIGdldHRlcnMgPSBfdGhpcyRwcm9wcy5nZXR0ZXJzLFxuICAgICAgICAgIGNvbXBvbmVudHMgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRzLFxuICAgICAgICAgIHN0ZXAgPSBfdGhpcyRwcm9wcy5zdGVwLFxuICAgICAgICAgIHRpbWVzbG90cyA9IF90aGlzJHByb3BzLnRpbWVzbG90cyxcbiAgICAgICAgICBkYXlMYXlvdXRBbGdvcml0aG0gPSBfdGhpcyRwcm9wcy5kYXlMYXlvdXRBbGdvcml0aG0sXG4gICAgICAgICAgcmVzaXphYmxlID0gX3RoaXMkcHJvcHMucmVzaXphYmxlO1xuXG4gICAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksXG4gICAgICAgICAgc2xvdE1ldHJpY3MgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUuc2xvdE1ldHJpY3M7XG5cbiAgICAgIHZhciBtZXNzYWdlcyA9IGxvY2FsaXplci5tZXNzYWdlcztcbiAgICAgIHZhciBzdHlsZWRFdmVudHMgPSBnZXRTdHlsZWRFdmVudHMkMSh7XG4gICAgICAgIGV2ZW50czogZXZlbnRzLFxuICAgICAgICBhY2Nlc3NvcnM6IGFjY2Vzc29ycyxcbiAgICAgICAgc2xvdE1ldHJpY3M6IHNsb3RNZXRyaWNzLFxuICAgICAgICBtaW5pbXVtU3RhcnREaWZmZXJlbmNlOiBNYXRoLmNlaWwoc3RlcCAqIHRpbWVzbG90cyAvIDIpLFxuICAgICAgICBkYXlMYXlvdXRBbGdvcml0aG06IGRheUxheW91dEFsZ29yaXRobVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3R5bGVkRXZlbnRzLm1hcChmdW5jdGlvbiAoX3JlZjIsIGlkeCkge1xuICAgICAgICB2YXIgZXZlbnQgPSBfcmVmMi5ldmVudCxcbiAgICAgICAgICAgIHN0eWxlID0gX3JlZjIuc3R5bGU7XG4gICAgICAgIHZhciBlbmQgPSBhY2Nlc3NvcnMuZW5kKGV2ZW50KTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gYWNjZXNzb3JzLnN0YXJ0KGV2ZW50KTtcbiAgICAgICAgdmFyIGZvcm1hdCA9ICdldmVudFRpbWVSYW5nZUZvcm1hdCc7XG4gICAgICAgIHZhciBsYWJlbDtcbiAgICAgICAgdmFyIHN0YXJ0c0JlZm9yZURheSA9IHNsb3RNZXRyaWNzLnN0YXJ0c0JlZm9yZURheShzdGFydCk7XG4gICAgICAgIHZhciBzdGFydHNBZnRlckRheSA9IHNsb3RNZXRyaWNzLnN0YXJ0c0FmdGVyRGF5KGVuZCk7XG4gICAgICAgIGlmIChzdGFydHNCZWZvcmVEYXkpIGZvcm1hdCA9ICdldmVudFRpbWVSYW5nZUVuZEZvcm1hdCc7ZWxzZSBpZiAoc3RhcnRzQWZ0ZXJEYXkpIGZvcm1hdCA9ICdldmVudFRpbWVSYW5nZVN0YXJ0Rm9ybWF0JztcbiAgICAgICAgaWYgKHN0YXJ0c0JlZm9yZURheSAmJiBzdGFydHNBZnRlckRheSkgbGFiZWwgPSBtZXNzYWdlcy5hbGxEYXk7ZWxzZSBsYWJlbCA9IGxvY2FsaXplci5mb3JtYXQoe1xuICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICB9LCBmb3JtYXQpO1xuICAgICAgICB2YXIgY29udGludWVzRWFybGllciA9IHN0YXJ0c0JlZm9yZURheSB8fCBzbG90TWV0cmljcy5zdGFydHNCZWZvcmUoc3RhcnQpO1xuICAgICAgICB2YXIgY29udGludWVzTGF0ZXIgPSBzdGFydHNBZnRlckRheSB8fCBzbG90TWV0cmljcy5zdGFydHNBZnRlcihlbmQpO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGltZUdyaWRFdmVudCwge1xuICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgIGtleTogJ2V2dF8nICsgaWR4LFxuICAgICAgICAgIGdldHRlcnM6IGdldHRlcnMsXG4gICAgICAgICAgcnRsOiBydGwsXG4gICAgICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgICAgICBjb250aW51ZXNFYXJsaWVyOiBjb250aW51ZXNFYXJsaWVyLFxuICAgICAgICAgIGNvbnRpbnVlc0xhdGVyOiBjb250aW51ZXNMYXRlcixcbiAgICAgICAgICBhY2Nlc3NvcnM6IGFjY2Vzc29ycyxcbiAgICAgICAgICBzZWxlY3RlZDogaXNTZWxlY3RlZChldmVudCwgc2VsZWN0ZWQpLFxuICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9zZWxlY3QoZXZlbnQsIGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25Eb3VibGVDbGljazogZnVuY3Rpb24gb25Eb3VibGVDbGljayhlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX2RvdWJsZUNsaWNrKGV2ZW50LCBlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlzQmFja2dyb3VuZEV2ZW50OiBpc0JhY2tncm91bmRFdmVudCxcbiAgICAgICAgICBvbktleVByZXNzOiBmdW5jdGlvbiBvbktleVByZXNzKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fa2V5UHJlc3MoZXZlbnQsIGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzaXphYmxlOiByZXNpemFibGVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX3NlbGVjdGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbm9kZSA9IGZpbmRET01Ob2RlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBsb25nUHJlc3NUaHJlc2hvbGQgPSBfdGhpcyRwcm9wczIubG9uZ1ByZXNzVGhyZXNob2xkLFxuICAgICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzMi5sb2NhbGl6ZXI7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBfdGhpcy5fc2VsZWN0b3IgPSBuZXcgU2VsZWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRET01Ob2RlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIH0sIHtcbiAgICAgICAgbG9uZ1ByZXNzVGhyZXNob2xkOiBsb25nUHJlc3NUaHJlc2hvbGRcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbWF5YmVTZWxlY3QgPSBmdW5jdGlvbiBtYXliZVNlbGVjdChib3gpIHtcbiAgICAgICAgdmFyIG9uU2VsZWN0aW5nID0gX3RoaXMucHJvcHMub25TZWxlY3Rpbmc7XG4gICAgICAgIHZhciBjdXJyZW50ID0gX3RoaXMuc3RhdGUgfHwge307XG4gICAgICAgIHZhciBzdGF0ZSA9IHNlbGVjdGlvblN0YXRlKGJveCk7XG4gICAgICAgIHZhciBzdGFydCA9IHN0YXRlLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIGVuZCA9IHN0YXRlLmVuZERhdGU7XG5cbiAgICAgICAgaWYgKG9uU2VsZWN0aW5nKSB7XG4gICAgICAgICAgaWYgKGxvY2FsaXplci5lcShjdXJyZW50LnN0YXJ0RGF0ZSwgc3RhcnQsICdtaW51dGVzJykgJiYgbG9jYWxpemVyLmVxKGN1cnJlbnQuZW5kRGF0ZSwgZW5kLCAnbWludXRlcycpIHx8IG9uU2VsZWN0aW5nKHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgIGVuZDogZW5kLFxuICAgICAgICAgICAgcmVzb3VyY2VJZDogX3RoaXMucHJvcHMucmVzb3VyY2VcbiAgICAgICAgICB9KSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfdGhpcy5zdGF0ZS5zdGFydCAhPT0gc3RhdGUuc3RhcnQgfHwgX3RoaXMuc3RhdGUuZW5kICE9PSBzdGF0ZS5lbmQgfHwgX3RoaXMuc3RhdGUuc2VsZWN0aW5nICE9PSBzdGF0ZS5zZWxlY3RpbmcpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBzZWxlY3Rpb25TdGF0ZSA9IGZ1bmN0aW9uIHNlbGVjdGlvblN0YXRlKHBvaW50KSB7XG4gICAgICAgIHZhciBjdXJyZW50U2xvdCA9IF90aGlzLnNsb3RNZXRyaWNzLmNsb3Nlc3RTbG90RnJvbVBvaW50KHBvaW50LCBnZXRCb3VuZHNGb3JOb2RlKG5vZGUpKTtcblxuICAgICAgICBpZiAoIV90aGlzLnN0YXRlLnNlbGVjdGluZykge1xuICAgICAgICAgIF90aGlzLl9pbml0aWFsU2xvdCA9IGN1cnJlbnRTbG90O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGluaXRpYWxTbG90ID0gX3RoaXMuX2luaXRpYWxTbG90O1xuXG4gICAgICAgIGlmIChsb2NhbGl6ZXIubHRlKGluaXRpYWxTbG90LCBjdXJyZW50U2xvdCkpIHtcbiAgICAgICAgICBjdXJyZW50U2xvdCA9IF90aGlzLnNsb3RNZXRyaWNzLm5leHRTbG90KGN1cnJlbnRTbG90KTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbGl6ZXIuZ3QoaW5pdGlhbFNsb3QsIGN1cnJlbnRTbG90KSkge1xuICAgICAgICAgIGluaXRpYWxTbG90ID0gX3RoaXMuc2xvdE1ldHJpY3MubmV4dFNsb3QoaW5pdGlhbFNsb3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlbGVjdFJhbmdlID0gX3RoaXMuc2xvdE1ldHJpY3MuZ2V0UmFuZ2UobG9jYWxpemVyLm1pbihpbml0aWFsU2xvdCwgY3VycmVudFNsb3QpLCBsb2NhbGl6ZXIubWF4KGluaXRpYWxTbG90LCBjdXJyZW50U2xvdCkpO1xuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc2VsZWN0UmFuZ2UsIHtcbiAgICAgICAgICBzZWxlY3Rpbmc6IHRydWUsXG4gICAgICAgICAgdG9wOiBzZWxlY3RSYW5nZS50b3AgKyBcIiVcIixcbiAgICAgICAgICBoZWlnaHQ6IHNlbGVjdFJhbmdlLmhlaWdodCArIFwiJVwiXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdmFyIHNlbGVjdG9yQ2xpY2tzSGFuZGxlciA9IGZ1bmN0aW9uIHNlbGVjdG9yQ2xpY2tzSGFuZGxlcihib3gsIGFjdGlvblR5cGUpIHtcbiAgICAgICAgaWYgKCFpc0V2ZW50KGZpbmRET01Ob2RlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgYm94KSkge1xuICAgICAgICAgIHZhciBfc2VsZWN0aW9uU3RhdGUgPSBzZWxlY3Rpb25TdGF0ZShib3gpLFxuICAgICAgICAgICAgICBzdGFydERhdGUgPSBfc2VsZWN0aW9uU3RhdGUuc3RhcnREYXRlLFxuICAgICAgICAgICAgICBlbmREYXRlID0gX3NlbGVjdGlvblN0YXRlLmVuZERhdGU7XG5cbiAgICAgICAgICBfdGhpcy5fc2VsZWN0U2xvdCh7XG4gICAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIGVuZERhdGU6IGVuZERhdGUsXG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvblR5cGUsXG4gICAgICAgICAgICBib3g6IGJveFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHNlbGVjdGluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBzZWxlY3Rvci5vbignc2VsZWN0aW5nJywgbWF5YmVTZWxlY3QpO1xuICAgICAgc2VsZWN0b3Iub24oJ3NlbGVjdFN0YXJ0JywgbWF5YmVTZWxlY3QpO1xuICAgICAgc2VsZWN0b3Iub24oJ2JlZm9yZVNlbGVjdCcsIGZ1bmN0aW9uIChib3gpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLnNlbGVjdGFibGUgIT09ICdpZ25vcmVFdmVudHMnKSByZXR1cm47XG4gICAgICAgIHJldHVybiAhaXNFdmVudChmaW5kRE9NTm9kZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIGJveCk7XG4gICAgICB9KTtcbiAgICAgIHNlbGVjdG9yLm9uKCdjbGljaycsIGZ1bmN0aW9uIChib3gpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yQ2xpY2tzSGFuZGxlcihib3gsICdjbGljaycpO1xuICAgICAgfSk7XG4gICAgICBzZWxlY3Rvci5vbignZG91YmxlQ2xpY2snLCBmdW5jdGlvbiAoYm94KSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RvckNsaWNrc0hhbmRsZXIoYm94LCAnZG91YmxlQ2xpY2snKTtcbiAgICAgIH0pO1xuICAgICAgc2VsZWN0b3Iub24oJ3NlbGVjdCcsIGZ1bmN0aW9uIChib3VuZHMpIHtcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLnNlbGVjdGluZykge1xuICAgICAgICAgIF90aGlzLl9zZWxlY3RTbG90KF9leHRlbmRzKHt9LCBfdGhpcy5zdGF0ZSwge1xuICAgICAgICAgICAgYWN0aW9uOiAnc2VsZWN0JyxcbiAgICAgICAgICAgIGJvdW5kczogYm91bmRzXG4gICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2VsZWN0aW5nOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHNlbGVjdG9yLm9uKCdyZXNldCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLnNlbGVjdGluZykge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNlbGVjdGluZzogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLl90ZWFyZG93blNlbGVjdGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLl9zZWxlY3RvcikgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5fc2VsZWN0b3IudGVhcmRvd24oKTtcblxuICAgICAgX3RoaXMuX3NlbGVjdG9yID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuX3NlbGVjdFNsb3QgPSBmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgIHZhciBzdGFydERhdGUgPSBfcmVmMy5zdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZSA9IF9yZWYzLmVuZERhdGUsXG4gICAgICAgICAgYWN0aW9uID0gX3JlZjMuYWN0aW9uLFxuICAgICAgICAgIGJvdW5kcyA9IF9yZWYzLmJvdW5kcyxcbiAgICAgICAgICBib3ggPSBfcmVmMy5ib3g7XG4gICAgICB2YXIgY3VycmVudCA9IHN0YXJ0RGF0ZSxcbiAgICAgICAgICBzbG90cyA9IFtdO1xuXG4gICAgICB3aGlsZSAoX3RoaXMucHJvcHMubG9jYWxpemVyLmx0ZShjdXJyZW50LCBlbmREYXRlKSkge1xuICAgICAgICBzbG90cy5wdXNoKGN1cnJlbnQpO1xuICAgICAgICBjdXJyZW50ID0gbmV3IERhdGUoK2N1cnJlbnQgKyBfdGhpcy5wcm9wcy5zdGVwICogNjAgKiAxMDAwKTsgLy8gdXNpbmcgRGF0ZSBlbnN1cmVzIG5vdCB0byBjcmVhdGUgYW4gZW5kbGVzcyBsb29wIHRoZSBkYXkgRFNUIGJlZ2luc1xuICAgICAgfVxuXG4gICAgICBub3RpZnkoX3RoaXMucHJvcHMub25TZWxlY3RTbG90LCB7XG4gICAgICAgIHNsb3RzOiBzbG90cyxcbiAgICAgICAgc3RhcnQ6IHN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kOiBlbmREYXRlLFxuICAgICAgICByZXNvdXJjZUlkOiBfdGhpcy5wcm9wcy5yZXNvdXJjZSxcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGJvdW5kczogYm91bmRzLFxuICAgICAgICBib3g6IGJveFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLl9zZWxlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBub3RpZnkoX3RoaXMucHJvcHMub25TZWxlY3RFdmVudCwgYXJncyk7XG4gICAgfTtcblxuICAgIF90aGlzLl9kb3VibGVDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIG5vdGlmeShfdGhpcy5wcm9wcy5vbkRvdWJsZUNsaWNrRXZlbnQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBfdGhpcy5fa2V5UHJlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgfVxuXG4gICAgICBub3RpZnkoX3RoaXMucHJvcHMub25LZXlQcmVzc0V2ZW50LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2xvdE1ldHJpY3MgPSBnZXRTbG90TWV0cmljcyQxKF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRGF5Q29sdW1uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLnNlbGVjdGFibGUgJiYgdGhpcy5fc2VsZWN0YWJsZSgpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuaXNOb3cpIHtcbiAgICAgIHRoaXMuc2V0VGltZUluZGljYXRvclBvc2l0aW9uVXBkYXRlSW50ZXJ2YWwoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5fdGVhcmRvd25TZWxlY3RhYmxlKCk7XG5cbiAgICB0aGlzLmNsZWFyVGltZUluZGljYXRvckludGVydmFsKCk7XG4gIH07XG5cbiAgX3Byb3RvLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5zZWxlY3RhYmxlICYmICF0aGlzLnByb3BzLnNlbGVjdGFibGUpIHRoaXMuX3NlbGVjdGFibGUoKTtcbiAgICBpZiAoIW5leHRQcm9wcy5zZWxlY3RhYmxlICYmIHRoaXMucHJvcHMuc2VsZWN0YWJsZSkgdGhpcy5fdGVhcmRvd25TZWxlY3RhYmxlKCk7XG4gICAgdGhpcy5zbG90TWV0cmljcyA9IHRoaXMuc2xvdE1ldHJpY3MudXBkYXRlKG5leHRQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBnZXROb3cgPSBfdGhpcyRwcm9wczMuZ2V0Tm93LFxuICAgICAgICBpc05vdyA9IF90aGlzJHByb3BzMy5pc05vdyxcbiAgICAgICAgbG9jYWxpemVyID0gX3RoaXMkcHJvcHMzLmxvY2FsaXplcixcbiAgICAgICAgZGF0ZSA9IF90aGlzJHByb3BzMy5kYXRlLFxuICAgICAgICBtaW4gPSBfdGhpcyRwcm9wczMubWluLFxuICAgICAgICBtYXggPSBfdGhpcyRwcm9wczMubWF4O1xuICAgIHZhciBnZXROb3dDaGFuZ2VkID0gbG9jYWxpemVyLm5lcShwcmV2UHJvcHMuZ2V0Tm93KCksIGdldE5vdygpLCAnbWludXRlcycpO1xuXG4gICAgaWYgKHByZXZQcm9wcy5pc05vdyAhPT0gaXNOb3cgfHwgZ2V0Tm93Q2hhbmdlZCkge1xuICAgICAgdGhpcy5jbGVhclRpbWVJbmRpY2F0b3JJbnRlcnZhbCgpO1xuXG4gICAgICBpZiAoaXNOb3cpIHtcbiAgICAgICAgdmFyIHRhaWwgPSAhZ2V0Tm93Q2hhbmdlZCAmJiBsb2NhbGl6ZXIuZXEocHJldlByb3BzLmRhdGUsIGRhdGUsICdtaW51dGVzJykgJiYgcHJldlN0YXRlLnRpbWVJbmRpY2F0b3JQb3NpdGlvbiA9PT0gdGhpcy5zdGF0ZS50aW1lSW5kaWNhdG9yUG9zaXRpb247XG4gICAgICAgIHRoaXMuc2V0VGltZUluZGljYXRvclBvc2l0aW9uVXBkYXRlSW50ZXJ2YWwodGFpbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc05vdyAmJiAobG9jYWxpemVyLm5lcShwcmV2UHJvcHMubWluLCBtaW4sICdtaW51dGVzJykgfHwgbG9jYWxpemVyLm5lcShwcmV2UHJvcHMubWF4LCBtYXgsICdtaW51dGVzJykpKSB7XG4gICAgICB0aGlzLnBvc2l0aW9uVGltZUluZGljYXRvcigpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHRhaWwge0Jvb2xlYW59IC0gd2hldGhlciBgcG9zaXRpb25UaW1lSW5kaWNhdG9yYCBjYWxsIHNob3VsZCBiZVxuICAgKiAgIGRlZmVycmVkIG9yIGNhbGxlZCB1cG9uIHNldHRpbmcgaW50ZXJ2YWwgKGB0cnVlYCAtIGlmIGRlZmVycmVkKTtcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0VGltZUluZGljYXRvclBvc2l0aW9uVXBkYXRlSW50ZXJ2YWwgPSBmdW5jdGlvbiBzZXRUaW1lSW5kaWNhdG9yUG9zaXRpb25VcGRhdGVJbnRlcnZhbCh0YWlsKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAodGFpbCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YWlsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmludGVydmFsVHJpZ2dlcmVkICYmICF0YWlsKSB7XG4gICAgICB0aGlzLnBvc2l0aW9uVGltZUluZGljYXRvcigpO1xuICAgIH1cblxuICAgIHRoaXMuX3RpbWVJbmRpY2F0b3JUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLmludGVydmFsVHJpZ2dlcmVkID0gdHJ1ZTtcblxuICAgICAgX3RoaXMyLnBvc2l0aW9uVGltZUluZGljYXRvcigpO1xuXG4gICAgICBfdGhpczIuc2V0VGltZUluZGljYXRvclBvc2l0aW9uVXBkYXRlSW50ZXJ2YWwoKTtcbiAgICB9LCA2MDAwMCk7XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyVGltZUluZGljYXRvckludGVydmFsID0gZnVuY3Rpb24gY2xlYXJUaW1lSW5kaWNhdG9ySW50ZXJ2YWwoKSB7XG4gICAgdGhpcy5pbnRlcnZhbFRyaWdnZXJlZCA9IGZhbHNlO1xuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fdGltZUluZGljYXRvclRpbWVvdXQpO1xuICB9O1xuXG4gIF9wcm90by5wb3NpdGlvblRpbWVJbmRpY2F0b3IgPSBmdW5jdGlvbiBwb3NpdGlvblRpbWVJbmRpY2F0b3IoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIG1pbiA9IF90aGlzJHByb3BzNC5taW4sXG4gICAgICAgIG1heCA9IF90aGlzJHByb3BzNC5tYXgsXG4gICAgICAgIGdldE5vdyA9IF90aGlzJHByb3BzNC5nZXROb3c7XG4gICAgdmFyIGN1cnJlbnQgPSBnZXROb3coKTtcblxuICAgIGlmIChjdXJyZW50ID49IG1pbiAmJiBjdXJyZW50IDw9IG1heCkge1xuICAgICAgdmFyIHRvcCA9IHRoaXMuc2xvdE1ldHJpY3MuZ2V0Q3VycmVudFRpbWVQb3NpdGlvbihjdXJyZW50KTtcbiAgICAgIHRoaXMuaW50ZXJ2YWxUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHRpbWVJbmRpY2F0b3JQb3NpdGlvbjogdG9wXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbGVhclRpbWVJbmRpY2F0b3JJbnRlcnZhbCgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICBkYXRlID0gX3RoaXMkcHJvcHM1LmRhdGUsXG4gICAgICAgIG1heCA9IF90aGlzJHByb3BzNS5tYXgsXG4gICAgICAgIHJ0bCA9IF90aGlzJHByb3BzNS5ydGwsXG4gICAgICAgIGlzTm93ID0gX3RoaXMkcHJvcHM1LmlzTm93LFxuICAgICAgICByZXNvdXJjZSA9IF90aGlzJHByb3BzNS5yZXNvdXJjZSxcbiAgICAgICAgYWNjZXNzb3JzID0gX3RoaXMkcHJvcHM1LmFjY2Vzc29ycyxcbiAgICAgICAgbG9jYWxpemVyID0gX3RoaXMkcHJvcHM1LmxvY2FsaXplcixcbiAgICAgICAgX3RoaXMkcHJvcHM1JGdldHRlcnMgPSBfdGhpcyRwcm9wczUuZ2V0dGVycyxcbiAgICAgICAgZGF5UHJvcCA9IF90aGlzJHByb3BzNSRnZXR0ZXJzLmRheVByb3AsXG4gICAgICAgIGdldHRlcnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczUkZ2V0dGVycywgX2V4Y2x1ZGVkJDIpLFxuICAgICAgICBfdGhpcyRwcm9wczUkY29tcG9uZW4gPSBfdGhpcyRwcm9wczUuY29tcG9uZW50cyxcbiAgICAgICAgRXZlbnRDb250YWluZXIgPSBfdGhpcyRwcm9wczUkY29tcG9uZW4uZXZlbnRDb250YWluZXJXcmFwcGVyLFxuICAgICAgICBjb21wb25lbnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHM1JGNvbXBvbmVuLCBfZXhjbHVkZWQyKTtcblxuICAgIHZhciBzbG90TWV0cmljcyA9IHRoaXMuc2xvdE1ldHJpY3M7XG4gICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgc2VsZWN0aW5nID0gX3RoaXMkc3RhdGUuc2VsZWN0aW5nLFxuICAgICAgICB0b3AgPSBfdGhpcyRzdGF0ZS50b3AsXG4gICAgICAgIGhlaWdodCA9IF90aGlzJHN0YXRlLmhlaWdodCxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkc3RhdGUuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkc3RhdGUuZW5kRGF0ZTtcbiAgICB2YXIgc2VsZWN0RGF0ZXMgPSB7XG4gICAgICBzdGFydDogc3RhcnREYXRlLFxuICAgICAgZW5kOiBlbmREYXRlXG4gICAgfTtcblxuICAgIHZhciBfZGF5UHJvcCA9IGRheVByb3AobWF4KSxcbiAgICAgICAgY2xhc3NOYW1lID0gX2RheVByb3AuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF9kYXlQcm9wLnN0eWxlO1xuXG4gICAgdmFyIERheUNvbHVtbldyYXBwZXJDb21wb25lbnQgPSBjb21wb25lbnRzLmRheUNvbHVtbldyYXBwZXIgfHwgRGF5Q29sdW1uV3JhcHBlcjtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF5Q29sdW1uV3JhcHBlckNvbXBvbmVudCwge1xuICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc05hbWUsICdyYmMtZGF5LXNsb3QnLCAncmJjLXRpbWUtY29sdW1uJywgaXNOb3cgJiYgJ3JiYy1ub3cnLCBpc05vdyAmJiAncmJjLXRvZGF5JywgLy8gV0hZXG4gICAgICBzZWxlY3RpbmcgJiYgJ3JiYy1zbG90LXNlbGVjdGluZycpXG4gICAgfSwgc2xvdE1ldHJpY3MuZ3JvdXBzLm1hcChmdW5jdGlvbiAoZ3JwLCBpZHgpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaW1lU2xvdEdyb3VwLCB7XG4gICAgICAgIGtleTogaWR4LFxuICAgICAgICBncm91cDogZ3JwLFxuICAgICAgICByZXNvdXJjZTogcmVzb3VyY2UsXG4gICAgICAgIGdldHRlcnM6IGdldHRlcnMsXG4gICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHNcbiAgICAgIH0pO1xuICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChFdmVudENvbnRhaW5lciwge1xuICAgICAgbG9jYWxpemVyOiBsb2NhbGl6ZXIsXG4gICAgICByZXNvdXJjZTogcmVzb3VyY2UsXG4gICAgICBhY2Nlc3NvcnM6IGFjY2Vzc29ycyxcbiAgICAgIGdldHRlcnM6IGdldHRlcnMsXG4gICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLFxuICAgICAgc2xvdE1ldHJpY3M6IHNsb3RNZXRyaWNzXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KCdyYmMtZXZlbnRzLWNvbnRhaW5lcicsIHJ0bCAmJiAncnRsJylcbiAgICB9LCB0aGlzLnJlbmRlckV2ZW50cyh7XG4gICAgICBldmVudHM6IHRoaXMucHJvcHMuYmFja2dyb3VuZEV2ZW50cyxcbiAgICAgIGlzQmFja2dyb3VuZEV2ZW50OiB0cnVlXG4gICAgfSksIHRoaXMucmVuZGVyRXZlbnRzKHtcbiAgICAgIGV2ZW50czogdGhpcy5wcm9wcy5ldmVudHNcbiAgICB9KSkpLCBzZWxlY3RpbmcgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInJiYy1zbG90LXNlbGVjdGlvblwiLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICB9XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGxvY2FsaXplci5mb3JtYXQoc2VsZWN0RGF0ZXMsICdzZWxlY3RSYW5nZUZvcm1hdCcpKSksIGlzTm93ICYmIHRoaXMuaW50ZXJ2YWxUcmlnZ2VyZWQgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInJiYy1jdXJyZW50LXRpbWUtaW5kaWNhdG9yXCIsXG4gICAgICBzdHlsZToge1xuICAgICAgICB0b3A6IHRoaXMuc3RhdGUudGltZUluZGljYXRvclBvc2l0aW9uICsgXCIlXCJcbiAgICAgIH1cbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIERheUNvbHVtbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRGF5Q29sdW1uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgZXZlbnRzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgYmFja2dyb3VuZEV2ZW50czogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIHN0ZXA6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgZGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgbWluOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKS5pc1JlcXVpcmVkLFxuICBtYXg6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLmlzUmVxdWlyZWQsXG4gIGdldE5vdzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNOb3c6IFByb3BUeXBlcy5ib29sLFxuICBydGw6IFByb3BUeXBlcy5ib29sLFxuICByZXNpemFibGU6IFByb3BUeXBlcy5ib29sLFxuICBhY2Nlc3NvcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY29tcG9uZW50czogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBnZXR0ZXJzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2FsaXplcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBzaG93TXVsdGlEYXlUaW1lczogUHJvcFR5cGVzLmJvb2wsXG4gIGN1bHR1cmU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRpbWVzbG90czogUHJvcFR5cGVzLm51bWJlcixcbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIHNlbGVjdGFibGU6IFByb3BUeXBlcy5vbmVPZihbdHJ1ZSwgZmFsc2UsICdpZ25vcmVFdmVudHMnXSksXG4gIGV2ZW50T2Zmc2V0OiBQcm9wVHlwZXMubnVtYmVyLFxuICBsb25nUHJlc3NUaHJlc2hvbGQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIG9uU2VsZWN0aW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3RTbG90OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblNlbGVjdEV2ZW50OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkRvdWJsZUNsaWNrRXZlbnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uS2V5UHJlc3NFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZHJhZ1Rocm91Z2hFdmVudHM6IFByb3BUeXBlcy5ib29sLFxuICByZXNvdXJjZTogUHJvcFR5cGVzLmFueSxcbiAgZGF5TGF5b3V0QWxnb3JpdGhtOiBEYXlMYXlvdXRBbGdvcml0aG1Qcm9wVHlwZVxufSA6IHt9O1xuRGF5Q29sdW1uLmRlZmF1bHRQcm9wcyA9IHtcbiAgZHJhZ1Rocm91Z2hFdmVudHM6IHRydWUsXG4gIHRpbWVzbG90czogMlxufTtcblxudmFyIFRpbWVHdXR0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGltZUd1dHRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGltZUd1dHRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLnJlbmRlclNsb3QgPSBmdW5jdGlvbiAodmFsdWUsIGlkeCkge1xuICAgICAgaWYgKGlkeCAhPT0gMCkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBsb2NhbGl6ZXIgPSBfdGhpcyRwcm9wcy5sb2NhbGl6ZXIsXG4gICAgICAgICAgZ2V0Tm93ID0gX3RoaXMkcHJvcHMuZ2V0Tm93O1xuXG4gICAgICB2YXIgaXNOb3cgPSBfdGhpcy5zbG90TWV0cmljcy5kYXRlSXNJbkdyb3VwKGdldE5vdygpLCBpZHgpO1xuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KCdyYmMtbGFiZWwnLCBpc05vdyAmJiAncmJjLW5vdycpXG4gICAgICB9LCBsb2NhbGl6ZXIuZm9ybWF0KHZhbHVlLCAndGltZUd1dHRlckZvcm1hdCcpKTtcbiAgICB9O1xuXG4gICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICBtaW4gPSBfdGhpcyRwcm9wczIubWluLFxuICAgICAgICBtYXggPSBfdGhpcyRwcm9wczIubWF4LFxuICAgICAgICB0aW1lc2xvdHMgPSBfdGhpcyRwcm9wczIudGltZXNsb3RzLFxuICAgICAgICBzdGVwID0gX3RoaXMkcHJvcHMyLnN0ZXAsXG4gICAgICAgIF9sb2NhbGl6ZXIgPSBfdGhpcyRwcm9wczIubG9jYWxpemVyO1xuICAgIF90aGlzLnNsb3RNZXRyaWNzID0gZ2V0U2xvdE1ldHJpY3MkMSh7XG4gICAgICBtaW46IG1pbixcbiAgICAgIG1heDogbWF4LFxuICAgICAgdGltZXNsb3RzOiB0aW1lc2xvdHMsXG4gICAgICBzdGVwOiBzdGVwLFxuICAgICAgbG9jYWxpemVyOiBfbG9jYWxpemVyXG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRpbWVHdXR0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHRoaXMuc2xvdE1ldHJpY3MgPSB0aGlzLnNsb3RNZXRyaWNzLnVwZGF0ZShuZXh0UHJvcHMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVzb3VyY2UgPSBfdGhpcyRwcm9wczMucmVzb3VyY2UsXG4gICAgICAgIGNvbXBvbmVudHMgPSBfdGhpcyRwcm9wczMuY29tcG9uZW50cyxcbiAgICAgICAgZ2V0dGVycyA9IF90aGlzJHByb3BzMy5nZXR0ZXJzO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwicmJjLXRpbWUtZ3V0dGVyIHJiYy10aW1lLWNvbHVtblwiXG4gICAgfSwgdGhpcy5zbG90TWV0cmljcy5ncm91cHMubWFwKGZ1bmN0aW9uIChncnAsIGlkeCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRpbWVTbG90R3JvdXAsIHtcbiAgICAgICAga2V5OiBpZHgsXG4gICAgICAgIGdyb3VwOiBncnAsXG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZSxcbiAgICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgICAgcmVuZGVyU2xvdDogX3RoaXMyLnJlbmRlclNsb3QsXG4gICAgICAgIGdldHRlcnM6IGdldHRlcnNcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gVGltZUd1dHRlcjtcbn0oQ29tcG9uZW50KTtcblRpbWVHdXR0ZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBtaW46IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLmlzUmVxdWlyZWQsXG4gIG1heDogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgdGltZXNsb3RzOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIHN0ZXA6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgZ2V0Tm93OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBjb21wb25lbnRzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGdldHRlcnM6IFByb3BUeXBlcy5vYmplY3QsXG4gIGxvY2FsaXplcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICByZXNvdXJjZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHt9O1xuXG52YXIgUmVzb3VyY2VIZWFkZXIgPSBmdW5jdGlvbiBSZXNvdXJjZUhlYWRlcihfcmVmKSB7XG4gIHZhciBsYWJlbCA9IF9yZWYubGFiZWw7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgbGFiZWwpO1xufTtcblxuUmVzb3VyY2VIZWFkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICByZXNvdXJjZTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHt9O1xuXG52YXIgVGltZUdyaWRIZWFkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGltZUdyaWRIZWFkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRpbWVHcmlkSGVhZGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlSGVhZGVyQ2xpY2sgPSBmdW5jdGlvbiAoZGF0ZSwgdmlldywgZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbm90aWZ5KF90aGlzLnByb3BzLm9uRHJpbGxEb3duLCBbZGF0ZSwgdmlld10pO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJSb3cgPSBmdW5jdGlvbiAocmVzb3VyY2UpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGV2ZW50cyA9IF90aGlzJHByb3BzLmV2ZW50cyxcbiAgICAgICAgICBydGwgPSBfdGhpcyRwcm9wcy5ydGwsXG4gICAgICAgICAgc2VsZWN0YWJsZSA9IF90aGlzJHByb3BzLnNlbGVjdGFibGUsXG4gICAgICAgICAgZ2V0Tm93ID0gX3RoaXMkcHJvcHMuZ2V0Tm93LFxuICAgICAgICAgIHJhbmdlID0gX3RoaXMkcHJvcHMucmFuZ2UsXG4gICAgICAgICAgZ2V0dGVycyA9IF90aGlzJHByb3BzLmdldHRlcnMsXG4gICAgICAgICAgbG9jYWxpemVyID0gX3RoaXMkcHJvcHMubG9jYWxpemVyLFxuICAgICAgICAgIGFjY2Vzc29ycyA9IF90aGlzJHByb3BzLmFjY2Vzc29ycyxcbiAgICAgICAgICBjb21wb25lbnRzID0gX3RoaXMkcHJvcHMuY29tcG9uZW50cyxcbiAgICAgICAgICByZXNpemFibGUgPSBfdGhpcyRwcm9wcy5yZXNpemFibGU7XG4gICAgICB2YXIgcmVzb3VyY2VJZCA9IGFjY2Vzc29ycy5yZXNvdXJjZUlkKHJlc291cmNlKTtcbiAgICAgIHZhciBldmVudHNUb0Rpc3BsYXkgPSByZXNvdXJjZSA/IGV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBhY2Nlc3NvcnMucmVzb3VyY2UoZXZlbnQpID09PSByZXNvdXJjZUlkO1xuICAgICAgfSkgOiBldmVudHM7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0ZUNvbnRlbnRSb3csIHtcbiAgICAgICAgaXNBbGxEYXk6IHRydWUsXG4gICAgICAgIHJ0bDogcnRsLFxuICAgICAgICBnZXROb3c6IGdldE5vdyxcbiAgICAgICAgbWluUm93czogMixcbiAgICAgICAgcmFuZ2U6IHJhbmdlLFxuICAgICAgICBldmVudHM6IGV2ZW50c1RvRGlzcGxheSxcbiAgICAgICAgcmVzb3VyY2VJZDogcmVzb3VyY2VJZCxcbiAgICAgICAgY2xhc3NOYW1lOiBcInJiYy1hbGxkYXktY2VsbFwiLFxuICAgICAgICBzZWxlY3RhYmxlOiBzZWxlY3RhYmxlLFxuICAgICAgICBzZWxlY3RlZDogX3RoaXMucHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsXG4gICAgICAgIGFjY2Vzc29yczogYWNjZXNzb3JzLFxuICAgICAgICBnZXR0ZXJzOiBnZXR0ZXJzLFxuICAgICAgICBsb2NhbGl6ZXI6IGxvY2FsaXplcixcbiAgICAgICAgb25TZWxlY3Q6IF90aGlzLnByb3BzLm9uU2VsZWN0RXZlbnQsXG4gICAgICAgIG9uRG91YmxlQ2xpY2s6IF90aGlzLnByb3BzLm9uRG91YmxlQ2xpY2tFdmVudCxcbiAgICAgICAgb25LZXlQcmVzczogX3RoaXMucHJvcHMub25LZXlQcmVzc0V2ZW50LFxuICAgICAgICBvblNlbGVjdFNsb3Q6IF90aGlzLnByb3BzLm9uU2VsZWN0U2xvdCxcbiAgICAgICAgbG9uZ1ByZXNzVGhyZXNob2xkOiBfdGhpcy5wcm9wcy5sb25nUHJlc3NUaHJlc2hvbGQsXG4gICAgICAgIHJlc2l6YWJsZTogcmVzaXphYmxlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRpbWVHcmlkSGVhZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVySGVhZGVyQ2VsbHMgPSBmdW5jdGlvbiByZW5kZXJIZWFkZXJDZWxscyhyYW5nZSkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzMi5sb2NhbGl6ZXIsXG4gICAgICAgIGdldERyaWxsZG93blZpZXcgPSBfdGhpcyRwcm9wczIuZ2V0RHJpbGxkb3duVmlldyxcbiAgICAgICAgZ2V0Tm93ID0gX3RoaXMkcHJvcHMyLmdldE5vdyxcbiAgICAgICAgZGF5UHJvcCA9IF90aGlzJHByb3BzMi5nZXR0ZXJzLmRheVByb3AsXG4gICAgICAgIF90aGlzJHByb3BzMiRjb21wb25lbiA9IF90aGlzJHByb3BzMi5jb21wb25lbnRzLmhlYWRlcixcbiAgICAgICAgSGVhZGVyQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMyJGNvbXBvbmVuID09PSB2b2lkIDAgPyBIZWFkZXIgOiBfdGhpcyRwcm9wczIkY29tcG9uZW47XG4gICAgdmFyIHRvZGF5ID0gZ2V0Tm93KCk7XG4gICAgcmV0dXJuIHJhbmdlLm1hcChmdW5jdGlvbiAoZGF0ZSwgaSkge1xuICAgICAgdmFyIGRyaWxsZG93blZpZXcgPSBnZXREcmlsbGRvd25WaWV3KGRhdGUpO1xuICAgICAgdmFyIGxhYmVsID0gbG9jYWxpemVyLmZvcm1hdChkYXRlLCAnZGF5Rm9ybWF0Jyk7XG5cbiAgICAgIHZhciBfZGF5UHJvcCA9IGRheVByb3AoZGF0ZSksXG4gICAgICAgICAgY2xhc3NOYW1lID0gX2RheVByb3AuY2xhc3NOYW1lLFxuICAgICAgICAgIHN0eWxlID0gX2RheVByb3Auc3R5bGU7XG5cbiAgICAgIHZhciBoZWFkZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChIZWFkZXJDb21wb25lbnQsIHtcbiAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICBsb2NhbGl6ZXI6IGxvY2FsaXplclxuICAgICAgfSk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBrZXk6IGksXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KCdyYmMtaGVhZGVyJywgY2xhc3NOYW1lLCBsb2NhbGl6ZXIuaXNTYW1lRGF0ZShkYXRlLCB0b2RheSkgJiYgJ3JiYy10b2RheScpXG4gICAgICB9LCBkcmlsbGRvd25WaWV3ID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICAgICAgaHJlZjogXCIjXCIsXG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuaGFuZGxlSGVhZGVyQ2xpY2soZGF0ZSwgZHJpbGxkb3duVmlldywgZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGhlYWRlcikgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgaGVhZGVyKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzMy53aWR0aCxcbiAgICAgICAgcnRsID0gX3RoaXMkcHJvcHMzLnJ0bCxcbiAgICAgICAgcmVzb3VyY2VzID0gX3RoaXMkcHJvcHMzLnJlc291cmNlcyxcbiAgICAgICAgcmFuZ2UgPSBfdGhpcyRwcm9wczMucmFuZ2UsXG4gICAgICAgIGV2ZW50cyA9IF90aGlzJHByb3BzMy5ldmVudHMsXG4gICAgICAgIGdldE5vdyA9IF90aGlzJHByb3BzMy5nZXROb3csXG4gICAgICAgIGFjY2Vzc29ycyA9IF90aGlzJHByb3BzMy5hY2Nlc3NvcnMsXG4gICAgICAgIHNlbGVjdGFibGUgPSBfdGhpcyRwcm9wczMuc2VsZWN0YWJsZSxcbiAgICAgICAgY29tcG9uZW50cyA9IF90aGlzJHByb3BzMy5jb21wb25lbnRzLFxuICAgICAgICBnZXR0ZXJzID0gX3RoaXMkcHJvcHMzLmdldHRlcnMsXG4gICAgICAgIHNjcm9sbFJlZiA9IF90aGlzJHByb3BzMy5zY3JvbGxSZWYsXG4gICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzMy5sb2NhbGl6ZXIsXG4gICAgICAgIGlzT3ZlcmZsb3dpbmcgPSBfdGhpcyRwcm9wczMuaXNPdmVyZmxvd2luZyxcbiAgICAgICAgX3RoaXMkcHJvcHMzJGNvbXBvbmVuID0gX3RoaXMkcHJvcHMzLmNvbXBvbmVudHMsXG4gICAgICAgIFRpbWVHdXR0ZXJIZWFkZXIgPSBfdGhpcyRwcm9wczMkY29tcG9uZW4udGltZUd1dHRlckhlYWRlcixcbiAgICAgICAgX3RoaXMkcHJvcHMzJGNvbXBvbmVuMiA9IF90aGlzJHByb3BzMyRjb21wb25lbi5yZXNvdXJjZUhlYWRlcixcbiAgICAgICAgUmVzb3VyY2VIZWFkZXJDb21wb25lbnQgPSBfdGhpcyRwcm9wczMkY29tcG9uZW4yID09PSB2b2lkIDAgPyBSZXNvdXJjZUhlYWRlciA6IF90aGlzJHByb3BzMyRjb21wb25lbjIsXG4gICAgICAgIHJlc2l6YWJsZSA9IF90aGlzJHByb3BzMy5yZXNpemFibGU7XG4gICAgdmFyIHN0eWxlID0ge307XG5cbiAgICBpZiAoaXNPdmVyZmxvd2luZykge1xuICAgICAgc3R5bGVbcnRsID8gJ21hcmdpbkxlZnQnIDogJ21hcmdpblJpZ2h0J10gPSBzY3JvbGxiYXJTaXplKCkgKyBcInB4XCI7XG4gICAgfVxuXG4gICAgdmFyIGdyb3VwZWRFdmVudHMgPSByZXNvdXJjZXMuZ3JvdXBFdmVudHMoZXZlbnRzKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgcmVmOiBzY3JvbGxSZWYsXG4gICAgICBjbGFzc05hbWU6IGNsc3goJ3JiYy10aW1lLWhlYWRlcicsIGlzT3ZlcmZsb3dpbmcgJiYgJ3JiYy1vdmVyZmxvd2luZycpXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInJiYy1sYWJlbCByYmMtdGltZS1oZWFkZXItZ3V0dGVyXCIsXG4gICAgICBzdHlsZToge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIG1pbldpZHRoOiB3aWR0aCxcbiAgICAgICAgbWF4V2lkdGg6IHdpZHRoXG4gICAgICB9XG4gICAgfSwgVGltZUd1dHRlckhlYWRlciAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaW1lR3V0dGVySGVhZGVyLCBudWxsKSksIHJlc291cmNlcy5tYXAoZnVuY3Rpb24gKF9yZWYsIGlkeCkge1xuICAgICAgdmFyIGlkID0gX3JlZlswXSxcbiAgICAgICAgICByZXNvdXJjZSA9IF9yZWZbMV07XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicmJjLXRpbWUtaGVhZGVyLWNvbnRlbnRcIixcbiAgICAgICAga2V5OiBpZCB8fCBpZHhcbiAgICAgIH0sIHJlc291cmNlICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJiYy1yb3cgcmJjLXJvdy1yZXNvdXJjZVwiLFxuICAgICAgICBrZXk6IFwicmVzb3VyY2VfXCIgKyBpZHhcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJiYy1oZWFkZXJcIlxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzb3VyY2VIZWFkZXJDb21wb25lbnQsIHtcbiAgICAgICAgaW5kZXg6IGlkeCxcbiAgICAgICAgbGFiZWw6IGFjY2Vzc29ycy5yZXNvdXJjZVRpdGxlKHJlc291cmNlKSxcbiAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlXG4gICAgICB9KSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyYmMtcm93IHJiYy10aW1lLWhlYWRlci1jZWxsXCIgKyAocmFuZ2UubGVuZ3RoIDw9IDEgPyAnIHJiYy10aW1lLWhlYWRlci1jZWxsLXNpbmdsZS1kYXknIDogJycpXG4gICAgICB9LCBfdGhpczMucmVuZGVySGVhZGVyQ2VsbHMocmFuZ2UpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0ZUNvbnRlbnRSb3csIHtcbiAgICAgICAgaXNBbGxEYXk6IHRydWUsXG4gICAgICAgIHJ0bDogcnRsLFxuICAgICAgICBnZXROb3c6IGdldE5vdyxcbiAgICAgICAgbWluUm93czogMixcbiAgICAgICAgcmFuZ2U6IHJhbmdlLFxuICAgICAgICBldmVudHM6IGdyb3VwZWRFdmVudHMuZ2V0KGlkKSB8fCBbXSxcbiAgICAgICAgcmVzb3VyY2VJZDogcmVzb3VyY2UgJiYgaWQsXG4gICAgICAgIGNsYXNzTmFtZTogXCJyYmMtYWxsZGF5LWNlbGxcIixcbiAgICAgICAgc2VsZWN0YWJsZTogc2VsZWN0YWJsZSxcbiAgICAgICAgc2VsZWN0ZWQ6IF90aGlzMy5wcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgICAgYWNjZXNzb3JzOiBhY2Nlc3NvcnMsXG4gICAgICAgIGdldHRlcnM6IGdldHRlcnMsXG4gICAgICAgIGxvY2FsaXplcjogbG9jYWxpemVyLFxuICAgICAgICBvblNlbGVjdDogX3RoaXMzLnByb3BzLm9uU2VsZWN0RXZlbnQsXG4gICAgICAgIG9uRG91YmxlQ2xpY2s6IF90aGlzMy5wcm9wcy5vbkRvdWJsZUNsaWNrRXZlbnQsXG4gICAgICAgIG9uS2V5UHJlc3M6IF90aGlzMy5wcm9wcy5vbktleVByZXNzRXZlbnQsXG4gICAgICAgIG9uU2VsZWN0U2xvdDogX3RoaXMzLnByb3BzLm9uU2VsZWN0U2xvdCxcbiAgICAgICAgbG9uZ1ByZXNzVGhyZXNob2xkOiBfdGhpczMucHJvcHMubG9uZ1ByZXNzVGhyZXNob2xkLFxuICAgICAgICByZXNpemFibGU6IHJlc2l6YWJsZVxuICAgICAgfSkpO1xuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gVGltZUdyaWRIZWFkZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRpbWVHcmlkSGVhZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgcmFuZ2U6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICBldmVudHM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICByZXNvdXJjZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIGdldE5vdzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNPdmVyZmxvd2luZzogUHJvcFR5cGVzLmJvb2wsXG4gIHJ0bDogUHJvcFR5cGVzLmJvb2wsXG4gIHJlc2l6YWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBsb2NhbGl6ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgYWNjZXNzb3JzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgZ2V0dGVyczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBzZWxlY3RlZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgc2VsZWN0YWJsZTogUHJvcFR5cGVzLm9uZU9mKFt0cnVlLCBmYWxzZSwgJ2lnbm9yZUV2ZW50cyddKSxcbiAgbG9uZ1ByZXNzVGhyZXNob2xkOiBQcm9wVHlwZXMubnVtYmVyLFxuICBvblNlbGVjdFNsb3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvblNlbGVjdEV2ZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Eb3VibGVDbGlja0V2ZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25LZXlQcmVzc0V2ZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25EcmlsbERvd246IFByb3BUeXBlcy5mdW5jLFxuICBnZXREcmlsbGRvd25WaWV3OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzY3JvbGxSZWY6IFByb3BUeXBlcy5hbnlcbn0gOiB7fTtcblxudmFyIE5PTkUgPSB7fTtcbmZ1bmN0aW9uIFJlc291cmNlcyhyZXNvdXJjZXMsIGFjY2Vzc29ycykge1xuICByZXR1cm4ge1xuICAgIG1hcDogZnVuY3Rpb24gbWFwKGZuKSB7XG4gICAgICBpZiAoIXJlc291cmNlcykgcmV0dXJuIFtmbihbTk9ORSwgbnVsbF0sIDApXTtcbiAgICAgIHJldHVybiByZXNvdXJjZXMubWFwKGZ1bmN0aW9uIChyZXNvdXJjZSwgaWR4KSB7XG4gICAgICAgIHJldHVybiBmbihbYWNjZXNzb3JzLnJlc291cmNlSWQocmVzb3VyY2UpLCByZXNvdXJjZV0sIGlkeCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdyb3VwRXZlbnRzOiBmdW5jdGlvbiBncm91cEV2ZW50cyhldmVudHMpIHtcbiAgICAgIHZhciBldmVudHNCeVJlc291cmNlID0gbmV3IE1hcCgpO1xuXG4gICAgICBpZiAoIXJlc291cmNlcykge1xuICAgICAgICAvLyBSZXR1cm4gYWxsIGV2ZW50cyBpZiByZXNvdXJjZXMgYXJlIG5vdCBwcm92aWRlZFxuICAgICAgICBldmVudHNCeVJlc291cmNlLnNldChOT05FLCBldmVudHMpO1xuICAgICAgICByZXR1cm4gZXZlbnRzQnlSZXNvdXJjZTtcbiAgICAgIH1cblxuICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBpZCA9IGFjY2Vzc29ycy5yZXNvdXJjZShldmVudCkgfHwgTk9ORTtcbiAgICAgICAgdmFyIHJlc291cmNlRXZlbnRzID0gZXZlbnRzQnlSZXNvdXJjZS5nZXQoaWQpIHx8IFtdO1xuICAgICAgICByZXNvdXJjZUV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICAgICAgZXZlbnRzQnlSZXNvdXJjZS5zZXQoaWQsIHJlc291cmNlRXZlbnRzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGV2ZW50c0J5UmVzb3VyY2U7XG4gICAgfVxuICB9O1xufVxuXG52YXIgVGltZUdyaWQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGltZUdyaWQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRpbWVHcmlkKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVTY3JvbGwgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLnNjcm9sbFJlZi5jdXJyZW50KSB7XG4gICAgICAgIF90aGlzLnNjcm9sbFJlZi5jdXJyZW50LnNjcm9sbExlZnQgPSBlLnRhcmdldC5zY3JvbGxMZWZ0O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW5jZWwoX3RoaXMucmFmSGFuZGxlKTtcbiAgICAgIF90aGlzLnJhZkhhbmRsZSA9IHJlcXVlc3QoX3RoaXMuY2hlY2tPdmVyZmxvdyk7XG4gICAgfTtcblxuICAgIF90aGlzLmd1dHRlclJlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLmd1dHRlciA9IHJlZiAmJiBmaW5kRE9NTm9kZShyZWYpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVTZWxlY3RBbGxkYXlFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vY2FuY2VsIGFueSBwZW5kaW5nIHNlbGVjdGlvbnMgc28gb25seSB0aGUgZXZlbnQgY2xpY2sgZ29lcyB0aHJvdWdoLlxuICAgICAgX3RoaXMuY2xlYXJTZWxlY3Rpb24oKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIG5vdGlmeShfdGhpcy5wcm9wcy5vblNlbGVjdEV2ZW50LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU2VsZWN0QWxsRGF5U2xvdCA9IGZ1bmN0aW9uIChzbG90cywgc2xvdEluZm8pIHtcbiAgICAgIHZhciBvblNlbGVjdFNsb3QgPSBfdGhpcy5wcm9wcy5vblNlbGVjdFNsb3Q7XG4gICAgICB2YXIgc3RhcnQgPSBuZXcgRGF0ZShzbG90c1swXSk7XG4gICAgICB2YXIgZW5kID0gbmV3IERhdGUoc2xvdHNbc2xvdHMubGVuZ3RoIC0gMV0pO1xuICAgICAgZW5kLnNldERhdGUoc2xvdHNbc2xvdHMubGVuZ3RoIC0gMV0uZ2V0RGF0ZSgpICsgMSk7XG4gICAgICBub3RpZnkob25TZWxlY3RTbG90LCB7XG4gICAgICAgIHNsb3RzOiBzbG90cyxcbiAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICBlbmQ6IGVuZCxcbiAgICAgICAgYWN0aW9uOiBzbG90SW5mby5hY3Rpb24sXG4gICAgICAgIHJlc291cmNlSWQ6IHNsb3RJbmZvLnJlc291cmNlSWRcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5jaGVja092ZXJmbG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLl91cGRhdGluZ092ZXJmbG93KSByZXR1cm47XG4gICAgICB2YXIgY29udGVudCA9IF90aGlzLmNvbnRlbnRSZWYuY3VycmVudDtcbiAgICAgIHZhciBpc092ZXJmbG93aW5nID0gY29udGVudC5zY3JvbGxIZWlnaHQgPiBjb250ZW50LmNsaWVudEhlaWdodDtcblxuICAgICAgaWYgKF90aGlzLnN0YXRlLmlzT3ZlcmZsb3dpbmcgIT09IGlzT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0aW5nT3ZlcmZsb3cgPSB0cnVlO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc092ZXJmbG93aW5nOiBpc092ZXJmbG93aW5nXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5fdXBkYXRpbmdPdmVyZmxvdyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMubWVtb2l6ZWRSZXNvdXJjZXMgPSBtZW1vaXplKGZ1bmN0aW9uIChyZXNvdXJjZXMsIGFjY2Vzc29ycykge1xuICAgICAgcmV0dXJuIFJlc291cmNlcyhyZXNvdXJjZXMsIGFjY2Vzc29ycyk7XG4gICAgfSk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBndXR0ZXJXaWR0aDogdW5kZWZpbmVkLFxuICAgICAgaXNPdmVyZmxvd2luZzogbnVsbFxuICAgIH07XG4gICAgX3RoaXMuc2Nyb2xsUmVmID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZVJlZigpO1xuICAgIF90aGlzLmNvbnRlbnRSZWYgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgX3RoaXMuX3Njcm9sbFJhdGlvID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVGltZUdyaWQucHJvdG90eXBlO1xuXG4gIF9wcm90by5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmNhbGN1bGF0ZVNjcm9sbCgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuY2hlY2tPdmVyZmxvdygpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2lkdGggPT0gbnVsbCkge1xuICAgICAgdGhpcy5tZWFzdXJlR3V0dGVyKCk7XG4gICAgfVxuXG4gICAgdGhpcy5hcHBseVNjcm9sbCgpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgICBjYW5jZWwodGhpcy5yYWZIYW5kbGUpO1xuXG4gICAgaWYgKHRoaXMubWVhc3VyZUd1dHRlckFuaW1hdGlvbkZyYW1lUmVxdWVzdCkge1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMubWVhc3VyZUd1dHRlckFuaW1hdGlvbkZyYW1lUmVxdWVzdCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMud2lkdGggPT0gbnVsbCkge1xuICAgICAgdGhpcy5tZWFzdXJlR3V0dGVyKCk7XG4gICAgfVxuXG4gICAgdGhpcy5hcHBseVNjcm9sbCgpOyAvL3RoaXMuY2hlY2tPdmVyZmxvdygpXG4gIH07XG5cbiAgX3Byb3RvLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmFuZ2UgPSBfdGhpcyRwcm9wcy5yYW5nZSxcbiAgICAgICAgc2Nyb2xsVG9UaW1lID0gX3RoaXMkcHJvcHMuc2Nyb2xsVG9UaW1lLFxuICAgICAgICBsb2NhbGl6ZXIgPSBfdGhpcyRwcm9wcy5sb2NhbGl6ZXI7IC8vIFdoZW4gcGFnaW5hdGluZywgcmVzZXQgc2Nyb2xsXG5cbiAgICBpZiAobG9jYWxpemVyLm5lcShuZXh0UHJvcHMucmFuZ2VbMF0sIHJhbmdlWzBdLCAnbWludXRlcycpIHx8IGxvY2FsaXplci5uZXEobmV4dFByb3BzLnNjcm9sbFRvVGltZSwgc2Nyb2xsVG9UaW1lLCAnbWludXRlcycpKSB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZVNjcm9sbChuZXh0UHJvcHMpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyRXZlbnRzID0gZnVuY3Rpb24gcmVuZGVyRXZlbnRzKHJhbmdlLCBldmVudHMsIGJhY2tncm91bmRFdmVudHMsIG5vdykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIG1pbiA9IF90aGlzJHByb3BzMi5taW4sXG4gICAgICAgIG1heCA9IF90aGlzJHByb3BzMi5tYXgsXG4gICAgICAgIGNvbXBvbmVudHMgPSBfdGhpcyRwcm9wczIuY29tcG9uZW50cyxcbiAgICAgICAgYWNjZXNzb3JzID0gX3RoaXMkcHJvcHMyLmFjY2Vzc29ycyxcbiAgICAgICAgbG9jYWxpemVyID0gX3RoaXMkcHJvcHMyLmxvY2FsaXplcixcbiAgICAgICAgZGF5TGF5b3V0QWxnb3JpdGhtID0gX3RoaXMkcHJvcHMyLmRheUxheW91dEFsZ29yaXRobTtcbiAgICB2YXIgcmVzb3VyY2VzID0gdGhpcy5tZW1vaXplZFJlc291cmNlcyh0aGlzLnByb3BzLnJlc291cmNlcywgYWNjZXNzb3JzKTtcbiAgICB2YXIgZ3JvdXBlZEV2ZW50cyA9IHJlc291cmNlcy5ncm91cEV2ZW50cyhldmVudHMpO1xuICAgIHZhciBncm91cGVkQmFja2dyb3VuZEV2ZW50cyA9IHJlc291cmNlcy5ncm91cEV2ZW50cyhiYWNrZ3JvdW5kRXZlbnRzKTtcbiAgICByZXR1cm4gcmVzb3VyY2VzLm1hcChmdW5jdGlvbiAoX3JlZiwgaSkge1xuICAgICAgdmFyIGlkID0gX3JlZlswXSxcbiAgICAgICAgICByZXNvdXJjZSA9IF9yZWZbMV07XG4gICAgICByZXR1cm4gcmFuZ2UubWFwKGZ1bmN0aW9uIChkYXRlLCBqaikge1xuICAgICAgICB2YXIgZGF5c0V2ZW50cyA9IChncm91cGVkRXZlbnRzLmdldChpZCkgfHwgW10pLmZpbHRlcihmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gbG9jYWxpemVyLmluUmFuZ2UoZGF0ZSwgYWNjZXNzb3JzLnN0YXJ0KGV2ZW50KSwgYWNjZXNzb3JzLmVuZChldmVudCksICdkYXknKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBkYXlzQmFja2dyb3VuZEV2ZW50cyA9IChncm91cGVkQmFja2dyb3VuZEV2ZW50cy5nZXQoaWQpIHx8IFtdKS5maWx0ZXIoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGxvY2FsaXplci5pblJhbmdlKGRhdGUsIGFjY2Vzc29ycy5zdGFydChldmVudCksIGFjY2Vzc29ycy5lbmQoZXZlbnQpLCAnZGF5Jyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF5Q29sdW1uLCBfZXh0ZW5kcyh7fSwgX3RoaXMyLnByb3BzLCB7XG4gICAgICAgICAgbG9jYWxpemVyOiBsb2NhbGl6ZXIsXG4gICAgICAgICAgbWluOiBsb2NhbGl6ZXIubWVyZ2UoZGF0ZSwgbWluKSxcbiAgICAgICAgICBtYXg6IGxvY2FsaXplci5tZXJnZShkYXRlLCBtYXgpLFxuICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZSAmJiBpZCxcbiAgICAgICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLFxuICAgICAgICAgIGlzTm93OiBsb2NhbGl6ZXIuaXNTYW1lRGF0ZShkYXRlLCBub3cpLFxuICAgICAgICAgIGtleTogaSArICctJyArIGpqLFxuICAgICAgICAgIGRhdGU6IGRhdGUsXG4gICAgICAgICAgZXZlbnRzOiBkYXlzRXZlbnRzLFxuICAgICAgICAgIGJhY2tncm91bmRFdmVudHM6IGRheXNCYWNrZ3JvdW5kRXZlbnRzLFxuICAgICAgICAgIGRheUxheW91dEFsZ29yaXRobTogZGF5TGF5b3V0QWxnb3JpdGhtXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGV2ZW50cyA9IF90aGlzJHByb3BzMy5ldmVudHMsXG4gICAgICAgIGJhY2tncm91bmRFdmVudHMgPSBfdGhpcyRwcm9wczMuYmFja2dyb3VuZEV2ZW50cyxcbiAgICAgICAgcmFuZ2UgPSBfdGhpcyRwcm9wczMucmFuZ2UsXG4gICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMzLndpZHRoLFxuICAgICAgICBydGwgPSBfdGhpcyRwcm9wczMucnRsLFxuICAgICAgICBzZWxlY3RlZCA9IF90aGlzJHByb3BzMy5zZWxlY3RlZCxcbiAgICAgICAgZ2V0Tm93ID0gX3RoaXMkcHJvcHMzLmdldE5vdyxcbiAgICAgICAgcmVzb3VyY2VzID0gX3RoaXMkcHJvcHMzLnJlc291cmNlcyxcbiAgICAgICAgY29tcG9uZW50cyA9IF90aGlzJHByb3BzMy5jb21wb25lbnRzLFxuICAgICAgICBhY2Nlc3NvcnMgPSBfdGhpcyRwcm9wczMuYWNjZXNzb3JzLFxuICAgICAgICBnZXR0ZXJzID0gX3RoaXMkcHJvcHMzLmdldHRlcnMsXG4gICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzMy5sb2NhbGl6ZXIsXG4gICAgICAgIG1pbiA9IF90aGlzJHByb3BzMy5taW4sXG4gICAgICAgIG1heCA9IF90aGlzJHByb3BzMy5tYXgsXG4gICAgICAgIHNob3dNdWx0aURheVRpbWVzID0gX3RoaXMkcHJvcHMzLnNob3dNdWx0aURheVRpbWVzLFxuICAgICAgICBsb25nUHJlc3NUaHJlc2hvbGQgPSBfdGhpcyRwcm9wczMubG9uZ1ByZXNzVGhyZXNob2xkLFxuICAgICAgICByZXNpemFibGUgPSBfdGhpcyRwcm9wczMucmVzaXphYmxlO1xuICAgIHdpZHRoID0gd2lkdGggfHwgdGhpcy5zdGF0ZS5ndXR0ZXJXaWR0aDtcbiAgICB2YXIgc3RhcnQgPSByYW5nZVswXSxcbiAgICAgICAgZW5kID0gcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV07XG4gICAgdGhpcy5zbG90cyA9IHJhbmdlLmxlbmd0aDtcbiAgICB2YXIgYWxsRGF5RXZlbnRzID0gW10sXG4gICAgICAgIHJhbmdlRXZlbnRzID0gW10sXG4gICAgICAgIHJhbmdlQmFja2dyb3VuZEV2ZW50cyA9IFtdO1xuICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGluUmFuZ2UoZXZlbnQsIHN0YXJ0LCBlbmQsIGFjY2Vzc29ycywgbG9jYWxpemVyKSkge1xuICAgICAgICB2YXIgZVN0YXJ0ID0gYWNjZXNzb3JzLnN0YXJ0KGV2ZW50KSxcbiAgICAgICAgICAgIGVFbmQgPSBhY2Nlc3NvcnMuZW5kKGV2ZW50KTtcblxuICAgICAgICBpZiAoYWNjZXNzb3JzLmFsbERheShldmVudCkgfHwgbG9jYWxpemVyLnN0YXJ0QW5kRW5kQXJlRGF0ZU9ubHkoZVN0YXJ0LCBlRW5kKSB8fCAhc2hvd011bHRpRGF5VGltZXMgJiYgIWxvY2FsaXplci5pc1NhbWVEYXRlKGVTdGFydCwgZUVuZCkpIHtcbiAgICAgICAgICBhbGxEYXlFdmVudHMucHVzaChldmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmFuZ2VFdmVudHMucHVzaChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBiYWNrZ3JvdW5kRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoaW5SYW5nZShldmVudCwgc3RhcnQsIGVuZCwgYWNjZXNzb3JzLCBsb2NhbGl6ZXIpKSB7XG4gICAgICAgIHJhbmdlQmFja2dyb3VuZEV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhbGxEYXlFdmVudHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIHNvcnRFdmVudHMkMShhLCBiLCBhY2Nlc3NvcnMsIGxvY2FsaXplcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeCgncmJjLXRpbWUtdmlldycsIHJlc291cmNlcyAmJiAncmJjLXRpbWUtdmlldy1yZXNvdXJjZXMnKVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRpbWVHcmlkSGVhZGVyLCB7XG4gICAgICByYW5nZTogcmFuZ2UsXG4gICAgICBldmVudHM6IGFsbERheUV2ZW50cyxcbiAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgIHJ0bDogcnRsLFxuICAgICAgZ2V0Tm93OiBnZXROb3csXG4gICAgICBsb2NhbGl6ZXI6IGxvY2FsaXplcixcbiAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZCxcbiAgICAgIHJlc291cmNlczogdGhpcy5tZW1vaXplZFJlc291cmNlcyhyZXNvdXJjZXMsIGFjY2Vzc29ycyksXG4gICAgICBzZWxlY3RhYmxlOiB0aGlzLnByb3BzLnNlbGVjdGFibGUsXG4gICAgICBhY2Nlc3NvcnM6IGFjY2Vzc29ycyxcbiAgICAgIGdldHRlcnM6IGdldHRlcnMsXG4gICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLFxuICAgICAgc2Nyb2xsUmVmOiB0aGlzLnNjcm9sbFJlZixcbiAgICAgIGlzT3ZlcmZsb3dpbmc6IHRoaXMuc3RhdGUuaXNPdmVyZmxvd2luZyxcbiAgICAgIGxvbmdQcmVzc1RocmVzaG9sZDogbG9uZ1ByZXNzVGhyZXNob2xkLFxuICAgICAgb25TZWxlY3RTbG90OiB0aGlzLmhhbmRsZVNlbGVjdEFsbERheVNsb3QsXG4gICAgICBvblNlbGVjdEV2ZW50OiB0aGlzLmhhbmRsZVNlbGVjdEFsbGRheUV2ZW50LFxuICAgICAgb25Eb3VibGVDbGlja0V2ZW50OiB0aGlzLnByb3BzLm9uRG91YmxlQ2xpY2tFdmVudCxcbiAgICAgIG9uS2V5UHJlc3NFdmVudDogdGhpcy5wcm9wcy5vbktleVByZXNzRXZlbnQsXG4gICAgICBvbkRyaWxsRG93bjogdGhpcy5wcm9wcy5vbkRyaWxsRG93bixcbiAgICAgIGdldERyaWxsZG93blZpZXc6IHRoaXMucHJvcHMuZ2V0RHJpbGxkb3duVmlldyxcbiAgICAgIHJlc2l6YWJsZTogcmVzaXphYmxlXG4gICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIHJlZjogdGhpcy5jb250ZW50UmVmLFxuICAgICAgY2xhc3NOYW1lOiBcInJiYy10aW1lLWNvbnRlbnRcIixcbiAgICAgIG9uU2Nyb2xsOiB0aGlzLmhhbmRsZVNjcm9sbFxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRpbWVHdXR0ZXIsIHtcbiAgICAgIGRhdGU6IHN0YXJ0LFxuICAgICAgcmVmOiB0aGlzLmd1dHRlclJlZixcbiAgICAgIGxvY2FsaXplcjogbG9jYWxpemVyLFxuICAgICAgbWluOiBsb2NhbGl6ZXIubWVyZ2Uoc3RhcnQsIG1pbiksXG4gICAgICBtYXg6IGxvY2FsaXplci5tZXJnZShzdGFydCwgbWF4KSxcbiAgICAgIHN0ZXA6IHRoaXMucHJvcHMuc3RlcCxcbiAgICAgIGdldE5vdzogdGhpcy5wcm9wcy5nZXROb3csXG4gICAgICB0aW1lc2xvdHM6IHRoaXMucHJvcHMudGltZXNsb3RzLFxuICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgIGNsYXNzTmFtZTogXCJyYmMtdGltZS1ndXR0ZXJcIixcbiAgICAgIGdldHRlcnM6IGdldHRlcnNcbiAgICB9KSwgdGhpcy5yZW5kZXJFdmVudHMocmFuZ2UsIHJhbmdlRXZlbnRzLCByYW5nZUJhY2tncm91bmRFdmVudHMsIGdldE5vdygpKSkpO1xuICB9O1xuXG4gIF9wcm90by5jbGVhclNlbGVjdGlvbiA9IGZ1bmN0aW9uIGNsZWFyU2VsZWN0aW9uKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9zZWxlY3RUaW1lcik7XG4gICAgdGhpcy5fcGVuZGluZ1NlbGVjdGlvbiA9IFtdO1xuICB9O1xuXG4gIF9wcm90by5tZWFzdXJlR3V0dGVyID0gZnVuY3Rpb24gbWVhc3VyZUd1dHRlcigpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGlmICh0aGlzLm1lYXN1cmVHdXR0ZXJBbmltYXRpb25GcmFtZVJlcXVlc3QpIHtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLm1lYXN1cmVHdXR0ZXJBbmltYXRpb25GcmFtZVJlcXVlc3QpO1xuICAgIH1cblxuICAgIHRoaXMubWVhc3VyZUd1dHRlckFuaW1hdGlvbkZyYW1lUmVxdWVzdCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHdpZHRoID0gZ2V0V2lkdGgoX3RoaXMzLmd1dHRlcik7XG5cbiAgICAgIGlmICh3aWR0aCAmJiBfdGhpczMuc3RhdGUuZ3V0dGVyV2lkdGggIT09IHdpZHRoKSB7XG4gICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZ3V0dGVyV2lkdGg6IHdpZHRoXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5hcHBseVNjcm9sbCA9IGZ1bmN0aW9uIGFwcGx5U2Nyb2xsKCkge1xuICAgIGlmICh0aGlzLl9zY3JvbGxSYXRpbyAhPSBudWxsKSB7XG4gICAgICB2YXIgY29udGVudCA9IHRoaXMuY29udGVudFJlZi5jdXJyZW50O1xuICAgICAgY29udGVudC5zY3JvbGxUb3AgPSBjb250ZW50LnNjcm9sbEhlaWdodCAqIHRoaXMuX3Njcm9sbFJhdGlvOyAvLyBPbmx5IGRvIHRoaXMgb25jZVxuXG4gICAgICB0aGlzLl9zY3JvbGxSYXRpbyA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jYWxjdWxhdGVTY3JvbGwgPSBmdW5jdGlvbiBjYWxjdWxhdGVTY3JvbGwocHJvcHMpIHtcbiAgICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgICAgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIH1cblxuICAgIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgICAgbWluID0gX3Byb3BzLm1pbixcbiAgICAgICAgbWF4ID0gX3Byb3BzLm1heCxcbiAgICAgICAgc2Nyb2xsVG9UaW1lID0gX3Byb3BzLnNjcm9sbFRvVGltZSxcbiAgICAgICAgbG9jYWxpemVyID0gX3Byb3BzLmxvY2FsaXplcjtcbiAgICB2YXIgZGlmZk1pbGxpcyA9IHNjcm9sbFRvVGltZSAtIGxvY2FsaXplci5zdGFydE9mKHNjcm9sbFRvVGltZSwgJ2RheScpO1xuICAgIHZhciB0b3RhbE1pbGxpcyA9IGxvY2FsaXplci5kaWZmKG1pbiwgbWF4LCAnbWlsbGlzZWNvbmRzJyk7XG4gICAgdGhpcy5fc2Nyb2xsUmF0aW8gPSBkaWZmTWlsbGlzIC8gdG90YWxNaWxsaXM7XG4gIH07XG5cbiAgcmV0dXJuIFRpbWVHcmlkO1xufShDb21wb25lbnQpO1xuVGltZUdyaWQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBldmVudHM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICBiYWNrZ3JvdW5kRXZlbnRzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgcmVzb3VyY2VzOiBQcm9wVHlwZXMuYXJyYXksXG4gIHN0ZXA6IFByb3BUeXBlcy5udW1iZXIsXG4gIHRpbWVzbG90czogUHJvcFR5cGVzLm51bWJlcixcbiAgcmFuZ2U6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpKSxcbiAgbWluOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKS5pc1JlcXVpcmVkLFxuICBtYXg6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLmlzUmVxdWlyZWQsXG4gIGdldE5vdzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2Nyb2xsVG9UaW1lOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKS5pc1JlcXVpcmVkLFxuICBzaG93TXVsdGlEYXlUaW1lczogUHJvcFR5cGVzLmJvb2wsXG4gIHJ0bDogUHJvcFR5cGVzLmJvb2wsXG4gIHJlc2l6YWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBhY2Nlc3NvcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY29tcG9uZW50czogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBnZXR0ZXJzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2FsaXplcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBzZWxlY3RlZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgc2VsZWN0YWJsZTogUHJvcFR5cGVzLm9uZU9mKFt0cnVlLCBmYWxzZSwgJ2lnbm9yZUV2ZW50cyddKSxcbiAgbG9uZ1ByZXNzVGhyZXNob2xkOiBQcm9wVHlwZXMubnVtYmVyLFxuICBvbk5hdmlnYXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3RTbG90OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3RFbmQ6IFByb3BUeXBlcy5mdW5jLFxuICBvblNlbGVjdFN0YXJ0OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3RFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRG91YmxlQ2xpY2tFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uS2V5UHJlc3NFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRHJpbGxEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgZ2V0RHJpbGxkb3duVmlldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGF5TGF5b3V0QWxnb3JpdGhtOiBEYXlMYXlvdXRBbGdvcml0aG1Qcm9wVHlwZVxufSA6IHt9O1xuVGltZUdyaWQuZGVmYXVsdFByb3BzID0ge1xuICBzdGVwOiAzMCxcbiAgdGltZXNsb3RzOiAyXG59O1xuXG52YXIgX2V4Y2x1ZGVkJDMgPSBbXCJkYXRlXCIsIFwibG9jYWxpemVyXCIsIFwibWluXCIsIFwibWF4XCIsIFwic2Nyb2xsVG9UaW1lXCJdO1xuXG52YXIgRGF5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKERheSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRGF5KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEYXkucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBhbGxvd3MgdXMgdG8gZGVmYXVsdCBtaW4sIG1heCwgYW5kIHNjcm9sbFRvVGltZVxuICAgICAqIHVzaW5nIG91ciBsb2NhbGl6ZXIuIFRoaXMgaXMgbmVjZXNzYXJ5IHVudGlsIHN1Y2ggdGltZVxuICAgICAqIGFzIFRpbWVHcmlkIGlzIGNvbnZlcnRlZCB0byBhIGZ1bmN0aW9uYWwgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRhdGUgPSBfdGhpcyRwcm9wcy5kYXRlLFxuICAgICAgICBsb2NhbGl6ZXIgPSBfdGhpcyRwcm9wcy5sb2NhbGl6ZXIsXG4gICAgICAgIF90aGlzJHByb3BzJG1pbiA9IF90aGlzJHByb3BzLm1pbixcbiAgICAgICAgbWluID0gX3RoaXMkcHJvcHMkbWluID09PSB2b2lkIDAgPyBsb2NhbGl6ZXIuc3RhcnRPZihuZXcgRGF0ZSgpLCAnZGF5JykgOiBfdGhpcyRwcm9wcyRtaW4sXG4gICAgICAgIF90aGlzJHByb3BzJG1heCA9IF90aGlzJHByb3BzLm1heCxcbiAgICAgICAgbWF4ID0gX3RoaXMkcHJvcHMkbWF4ID09PSB2b2lkIDAgPyBsb2NhbGl6ZXIuZW5kT2YobmV3IERhdGUoKSwgJ2RheScpIDogX3RoaXMkcHJvcHMkbWF4LFxuICAgICAgICBfdGhpcyRwcm9wcyRzY3JvbGxUb1QgPSBfdGhpcyRwcm9wcy5zY3JvbGxUb1RpbWUsXG4gICAgICAgIHNjcm9sbFRvVGltZSA9IF90aGlzJHByb3BzJHNjcm9sbFRvVCA9PT0gdm9pZCAwID8gbG9jYWxpemVyLnN0YXJ0T2YobmV3IERhdGUoKSwgJ2RheScpIDogX3RoaXMkcHJvcHMkc2Nyb2xsVG9ULFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBfZXhjbHVkZWQkMyk7XG5cbiAgICB2YXIgcmFuZ2UgPSBEYXkucmFuZ2UoZGF0ZSwge1xuICAgICAgbG9jYWxpemVyOiBsb2NhbGl6ZXJcbiAgICB9KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGltZUdyaWQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcmFuZ2U6IHJhbmdlLFxuICAgICAgZXZlbnRPZmZzZXQ6IDEwLFxuICAgICAgbG9jYWxpemVyOiBsb2NhbGl6ZXIsXG4gICAgICBtaW46IG1pbixcbiAgICAgIG1heDogbWF4LFxuICAgICAgc2Nyb2xsVG9UaW1lOiBzY3JvbGxUb1RpbWVcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIERheTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRGF5LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgZGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgbG9jYWxpemVyOiBQcm9wVHlwZXMuYW55LFxuICBtaW46IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBtYXg6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBzY3JvbGxUb1RpbWU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpXG59IDoge307XG5cbkRheS5yYW5nZSA9IGZ1bmN0aW9uIChkYXRlLCBfcmVmKSB7XG4gIHZhciBsb2NhbGl6ZXIgPSBfcmVmLmxvY2FsaXplcjtcbiAgcmV0dXJuIFtsb2NhbGl6ZXIuc3RhcnRPZihkYXRlLCAnZGF5JyldO1xufTtcblxuRGF5Lm5hdmlnYXRlID0gZnVuY3Rpb24gKGRhdGUsIGFjdGlvbiwgX3JlZjIpIHtcbiAgdmFyIGxvY2FsaXplciA9IF9yZWYyLmxvY2FsaXplcjtcblxuICBzd2l0Y2ggKGFjdGlvbikge1xuICAgIGNhc2UgbmF2aWdhdGUuUFJFVklPVVM6XG4gICAgICByZXR1cm4gbG9jYWxpemVyLmFkZChkYXRlLCAtMSwgJ2RheScpO1xuXG4gICAgY2FzZSBuYXZpZ2F0ZS5ORVhUOlxuICAgICAgcmV0dXJuIGxvY2FsaXplci5hZGQoZGF0ZSwgMSwgJ2RheScpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBkYXRlO1xuICB9XG59O1xuXG5EYXkudGl0bGUgPSBmdW5jdGlvbiAoZGF0ZSwgX3JlZjMpIHtcbiAgdmFyIGxvY2FsaXplciA9IF9yZWYzLmxvY2FsaXplcjtcbiAgcmV0dXJuIGxvY2FsaXplci5mb3JtYXQoZGF0ZSwgJ2RheUhlYWRlckZvcm1hdCcpO1xufTtcblxudmFyIF9leGNsdWRlZCQ0ID0gW1wiZGF0ZVwiLCBcImxvY2FsaXplclwiLCBcIm1pblwiLCBcIm1heFwiLCBcInNjcm9sbFRvVGltZVwiXTtcblxudmFyIFdlZWsgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoV2VlaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gV2VlaygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gV2Vlay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGFsbG93cyB1cyB0byBkZWZhdWx0IG1pbiwgbWF4LCBhbmQgc2Nyb2xsVG9UaW1lXG4gICAgICogdXNpbmcgb3VyIGxvY2FsaXplci4gVGhpcyBpcyBuZWNlc3NhcnkgdW50aWwgc3VjaCB0aW1lXG4gICAgICogYXMgVGltZUdyaWQgaXMgY29udmVydGVkIHRvIGEgZnVuY3Rpb25hbCBjb21wb25lbnQuXG4gICAgICovXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGF0ZSA9IF90aGlzJHByb3BzLmRhdGUsXG4gICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzLmxvY2FsaXplcixcbiAgICAgICAgX3RoaXMkcHJvcHMkbWluID0gX3RoaXMkcHJvcHMubWluLFxuICAgICAgICBtaW4gPSBfdGhpcyRwcm9wcyRtaW4gPT09IHZvaWQgMCA/IGxvY2FsaXplci5zdGFydE9mKG5ldyBEYXRlKCksICdkYXknKSA6IF90aGlzJHByb3BzJG1pbixcbiAgICAgICAgX3RoaXMkcHJvcHMkbWF4ID0gX3RoaXMkcHJvcHMubWF4LFxuICAgICAgICBtYXggPSBfdGhpcyRwcm9wcyRtYXggPT09IHZvaWQgMCA/IGxvY2FsaXplci5lbmRPZihuZXcgRGF0ZSgpLCAnZGF5JykgOiBfdGhpcyRwcm9wcyRtYXgsXG4gICAgICAgIF90aGlzJHByb3BzJHNjcm9sbFRvVCA9IF90aGlzJHByb3BzLnNjcm9sbFRvVGltZSxcbiAgICAgICAgc2Nyb2xsVG9UaW1lID0gX3RoaXMkcHJvcHMkc2Nyb2xsVG9UID09PSB2b2lkIDAgPyBsb2NhbGl6ZXIuc3RhcnRPZihuZXcgRGF0ZSgpLCAnZGF5JykgOiBfdGhpcyRwcm9wcyRzY3JvbGxUb1QsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIF9leGNsdWRlZCQ0KTtcblxuICAgIHZhciByYW5nZSA9IFdlZWsucmFuZ2UoZGF0ZSwgdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRpbWVHcmlkLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHJhbmdlOiByYW5nZSxcbiAgICAgIGV2ZW50T2Zmc2V0OiAxNSxcbiAgICAgIGxvY2FsaXplcjogbG9jYWxpemVyLFxuICAgICAgbWluOiBtaW4sXG4gICAgICBtYXg6IG1heCxcbiAgICAgIHNjcm9sbFRvVGltZTogc2Nyb2xsVG9UaW1lXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBXZWVrO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5XZWVrLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgZGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgbG9jYWxpemVyOiBQcm9wVHlwZXMuYW55LFxuICBtaW46IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBtYXg6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICBzY3JvbGxUb1RpbWU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpXG59IDoge307XG5XZWVrLmRlZmF1bHRQcm9wcyA9IFRpbWVHcmlkLmRlZmF1bHRQcm9wcztcblxuV2Vlay5uYXZpZ2F0ZSA9IGZ1bmN0aW9uIChkYXRlLCBhY3Rpb24sIF9yZWYpIHtcbiAgdmFyIGxvY2FsaXplciA9IF9yZWYubG9jYWxpemVyO1xuXG4gIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgY2FzZSBuYXZpZ2F0ZS5QUkVWSU9VUzpcbiAgICAgIHJldHVybiBsb2NhbGl6ZXIuYWRkKGRhdGUsIC0xLCAnd2VlaycpO1xuXG4gICAgY2FzZSBuYXZpZ2F0ZS5ORVhUOlxuICAgICAgcmV0dXJuIGxvY2FsaXplci5hZGQoZGF0ZSwgMSwgJ3dlZWsnKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgfVxufTtcblxuV2Vlay5yYW5nZSA9IGZ1bmN0aW9uIChkYXRlLCBfcmVmMikge1xuICB2YXIgbG9jYWxpemVyID0gX3JlZjIubG9jYWxpemVyO1xuICB2YXIgZmlyc3RPZldlZWsgPSBsb2NhbGl6ZXIuc3RhcnRPZldlZWsoKTtcbiAgdmFyIHN0YXJ0ID0gbG9jYWxpemVyLnN0YXJ0T2YoZGF0ZSwgJ3dlZWsnLCBmaXJzdE9mV2Vlayk7XG4gIHZhciBlbmQgPSBsb2NhbGl6ZXIuZW5kT2YoZGF0ZSwgJ3dlZWsnLCBmaXJzdE9mV2Vlayk7XG4gIHJldHVybiBsb2NhbGl6ZXIucmFuZ2Uoc3RhcnQsIGVuZCk7XG59O1xuXG5XZWVrLnRpdGxlID0gZnVuY3Rpb24gKGRhdGUsIF9yZWYzKSB7XG4gIHZhciBsb2NhbGl6ZXIgPSBfcmVmMy5sb2NhbGl6ZXI7XG5cbiAgdmFyIF9XZWVrJHJhbmdlID0gV2Vlay5yYW5nZShkYXRlLCB7XG4gICAgbG9jYWxpemVyOiBsb2NhbGl6ZXJcbiAgfSksXG4gICAgICBzdGFydCA9IF9XZWVrJHJhbmdlWzBdLFxuICAgICAgcmVzdCA9IF9XZWVrJHJhbmdlLnNsaWNlKDEpO1xuXG4gIHJldHVybiBsb2NhbGl6ZXIuZm9ybWF0KHtcbiAgICBzdGFydDogc3RhcnQsXG4gICAgZW5kOiByZXN0LnBvcCgpXG4gIH0sICdkYXlSYW5nZUhlYWRlckZvcm1hdCcpO1xufTtcblxudmFyIF9leGNsdWRlZCQ1ID0gW1wiZGF0ZVwiLCBcImxvY2FsaXplclwiLCBcIm1pblwiLCBcIm1heFwiLCBcInNjcm9sbFRvVGltZVwiXTtcblxuZnVuY3Rpb24gd29ya1dlZWtSYW5nZShkYXRlLCBvcHRpb25zKSB7XG4gIHJldHVybiBXZWVrLnJhbmdlKGRhdGUsIG9wdGlvbnMpLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuICAgIHJldHVybiBbNiwgMF0uaW5kZXhPZihkLmdldERheSgpKSA9PT0gLTE7XG4gIH0pO1xufVxuXG52YXIgV29ya1dlZWsgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoV29ya1dlZWssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFdvcmtXZWVrKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBXb3JrV2Vlay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGFsbG93cyB1cyB0byBkZWZhdWx0IG1pbiwgbWF4LCBhbmQgc2Nyb2xsVG9UaW1lXG4gICAgICogdXNpbmcgb3VyIGxvY2FsaXplci4gVGhpcyBpcyBuZWNlc3NhcnkgdW50aWwgc3VjaCB0aW1lXG4gICAgICogYXMgVGltZUdyaWQgaXMgY29udmVydGVkIHRvIGEgZnVuY3Rpb25hbCBjb21wb25lbnQuXG4gICAgICovXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGF0ZSA9IF90aGlzJHByb3BzLmRhdGUsXG4gICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzLmxvY2FsaXplcixcbiAgICAgICAgX3RoaXMkcHJvcHMkbWluID0gX3RoaXMkcHJvcHMubWluLFxuICAgICAgICBtaW4gPSBfdGhpcyRwcm9wcyRtaW4gPT09IHZvaWQgMCA/IGxvY2FsaXplci5zdGFydE9mKG5ldyBEYXRlKCksICdkYXknKSA6IF90aGlzJHByb3BzJG1pbixcbiAgICAgICAgX3RoaXMkcHJvcHMkbWF4ID0gX3RoaXMkcHJvcHMubWF4LFxuICAgICAgICBtYXggPSBfdGhpcyRwcm9wcyRtYXggPT09IHZvaWQgMCA/IGxvY2FsaXplci5lbmRPZihuZXcgRGF0ZSgpLCAnZGF5JykgOiBfdGhpcyRwcm9wcyRtYXgsXG4gICAgICAgIF90aGlzJHByb3BzJHNjcm9sbFRvVCA9IF90aGlzJHByb3BzLnNjcm9sbFRvVGltZSxcbiAgICAgICAgc2Nyb2xsVG9UaW1lID0gX3RoaXMkcHJvcHMkc2Nyb2xsVG9UID09PSB2b2lkIDAgPyBsb2NhbGl6ZXIuc3RhcnRPZihuZXcgRGF0ZSgpLCAnZGF5JykgOiBfdGhpcyRwcm9wcyRzY3JvbGxUb1QsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIF9leGNsdWRlZCQ1KTtcblxuICAgIHZhciByYW5nZSA9IHdvcmtXZWVrUmFuZ2UoZGF0ZSwgdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRpbWVHcmlkLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHJhbmdlOiByYW5nZSxcbiAgICAgIGV2ZW50T2Zmc2V0OiAxNSxcbiAgICAgIGxvY2FsaXplcjogbG9jYWxpemVyLFxuICAgICAgbWluOiBtaW4sXG4gICAgICBtYXg6IG1heCxcbiAgICAgIHNjcm9sbFRvVGltZTogc2Nyb2xsVG9UaW1lXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBXb3JrV2Vlaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuV29ya1dlZWsucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBkYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKS5pc1JlcXVpcmVkLFxuICBsb2NhbGl6ZXI6IFByb3BUeXBlcy5hbnksXG4gIG1pbjogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gIG1heDogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gIHNjcm9sbFRvVGltZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSlcbn0gOiB7fTtcbldvcmtXZWVrLmRlZmF1bHRQcm9wcyA9IFRpbWVHcmlkLmRlZmF1bHRQcm9wcztcbldvcmtXZWVrLnJhbmdlID0gd29ya1dlZWtSYW5nZTtcbldvcmtXZWVrLm5hdmlnYXRlID0gV2Vlay5uYXZpZ2F0ZTtcblxuV29ya1dlZWsudGl0bGUgPSBmdW5jdGlvbiAoZGF0ZSwgX3JlZikge1xuICB2YXIgbG9jYWxpemVyID0gX3JlZi5sb2NhbGl6ZXI7XG5cbiAgdmFyIF93b3JrV2Vla1JhbmdlID0gd29ya1dlZWtSYW5nZShkYXRlLCB7XG4gICAgbG9jYWxpemVyOiBsb2NhbGl6ZXJcbiAgfSksXG4gICAgICBzdGFydCA9IF93b3JrV2Vla1JhbmdlWzBdLFxuICAgICAgcmVzdCA9IF93b3JrV2Vla1JhbmdlLnNsaWNlKDEpO1xuXG4gIHJldHVybiBsb2NhbGl6ZXIuZm9ybWF0KHtcbiAgICBzdGFydDogc3RhcnQsXG4gICAgZW5kOiByZXN0LnBvcCgpXG4gIH0sICdkYXlSYW5nZUhlYWRlckZvcm1hdCcpO1xufTtcblxuZnVuY3Rpb24gQWdlbmRhKF9yZWYpIHtcbiAgdmFyIGFjY2Vzc29ycyA9IF9yZWYuYWNjZXNzb3JzLFxuICAgICAgY29tcG9uZW50cyA9IF9yZWYuY29tcG9uZW50cyxcbiAgICAgIGRhdGUgPSBfcmVmLmRhdGUsXG4gICAgICBldmVudHMgPSBfcmVmLmV2ZW50cyxcbiAgICAgIGdldHRlcnMgPSBfcmVmLmdldHRlcnMsXG4gICAgICBsZW5ndGggPSBfcmVmLmxlbmd0aCxcbiAgICAgIGxvY2FsaXplciA9IF9yZWYubG9jYWxpemVyLFxuICAgICAgb25Eb3VibGVDbGlja0V2ZW50ID0gX3JlZi5vbkRvdWJsZUNsaWNrRXZlbnQsXG4gICAgICBvblNlbGVjdEV2ZW50ID0gX3JlZi5vblNlbGVjdEV2ZW50LFxuICAgICAgc2VsZWN0ZWQgPSBfcmVmLnNlbGVjdGVkO1xuICB2YXIgaGVhZGVyUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgZGF0ZUNvbFJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIHRpbWVDb2xSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciBjb250ZW50UmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgdGJvZHlSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgX2FkanVzdEhlYWRlcigpO1xuICB9KTtcblxuICB2YXIgcmVuZGVyRGF5ID0gZnVuY3Rpb24gcmVuZGVyRGF5KGRheSwgZXZlbnRzLCBkYXlLZXkpIHtcbiAgICB2YXIgRXZlbnQgPSBjb21wb25lbnRzLmV2ZW50LFxuICAgICAgICBBZ2VuZGFEYXRlID0gY29tcG9uZW50cy5kYXRlO1xuICAgIGV2ZW50cyA9IGV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBpblJhbmdlKGUsIGxvY2FsaXplci5zdGFydE9mKGRheSwgJ2RheScpLCBsb2NhbGl6ZXIuZW5kT2YoZGF5LCAnZGF5JyksIGFjY2Vzc29ycywgbG9jYWxpemVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZXZlbnRzLm1hcChmdW5jdGlvbiAoZXZlbnQsIGlkeCkge1xuICAgICAgdmFyIHRpdGxlID0gYWNjZXNzb3JzLnRpdGxlKGV2ZW50KTtcbiAgICAgIHZhciBlbmQgPSBhY2Nlc3NvcnMuZW5kKGV2ZW50KTtcbiAgICAgIHZhciBzdGFydCA9IGFjY2Vzc29ycy5zdGFydChldmVudCk7XG4gICAgICB2YXIgdXNlclByb3BzID0gZ2V0dGVycy5ldmVudFByb3AoZXZlbnQsIHN0YXJ0LCBlbmQsIGlzU2VsZWN0ZWQoZXZlbnQsIHNlbGVjdGVkKSk7XG4gICAgICB2YXIgZGF0ZUxhYmVsID0gaWR4ID09PSAwICYmIGxvY2FsaXplci5mb3JtYXQoZGF5LCAnYWdlbmRhRGF0ZUZvcm1hdCcpO1xuICAgICAgdmFyIGZpcnN0ID0gaWR4ID09PSAwID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCB7XG4gICAgICAgIHJvd1NwYW46IGV2ZW50cy5sZW5ndGgsXG4gICAgICAgIGNsYXNzTmFtZTogXCJyYmMtYWdlbmRhLWRhdGUtY2VsbFwiXG4gICAgICB9LCBBZ2VuZGFEYXRlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQWdlbmRhRGF0ZSwge1xuICAgICAgICBkYXk6IGRheSxcbiAgICAgICAgbGFiZWw6IGRhdGVMYWJlbFxuICAgICAgfSkgOiBkYXRlTGFiZWwpIDogZmFsc2U7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0clwiLCB7XG4gICAgICAgIGtleTogZGF5S2V5ICsgJ18nICsgaWR4LFxuICAgICAgICBjbGFzc05hbWU6IHVzZXJQcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiB1c2VyUHJvcHMuc3R5bGVcbiAgICAgIH0sIGZpcnN0LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInRkXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJiYy1hZ2VuZGEtdGltZS1jZWxsXCJcbiAgICAgIH0sIHRpbWVSYW5nZUxhYmVsKGRheSwgZXZlbnQpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyYmMtYWdlbmRhLWV2ZW50LWNlbGxcIixcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgcmV0dXJuIG9uU2VsZWN0RXZlbnQgJiYgb25TZWxlY3RFdmVudChldmVudCwgZSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRG91YmxlQ2xpY2s6IGZ1bmN0aW9uIG9uRG91YmxlQ2xpY2soZSkge1xuICAgICAgICAgIHJldHVybiBvbkRvdWJsZUNsaWNrRXZlbnQgJiYgb25Eb3VibGVDbGlja0V2ZW50KGV2ZW50LCBlKTtcbiAgICAgICAgfVxuICAgICAgfSwgRXZlbnQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChFdmVudCwge1xuICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgIHRpdGxlOiB0aXRsZVxuICAgICAgfSkgOiB0aXRsZSkpO1xuICAgIH0sIFtdKTtcbiAgfTtcblxuICB2YXIgdGltZVJhbmdlTGFiZWwgPSBmdW5jdGlvbiB0aW1lUmFuZ2VMYWJlbChkYXksIGV2ZW50KSB7XG4gICAgdmFyIGxhYmVsQ2xhc3MgPSAnJyxcbiAgICAgICAgVGltZUNvbXBvbmVudCA9IGNvbXBvbmVudHMudGltZSxcbiAgICAgICAgbGFiZWwgPSBsb2NhbGl6ZXIubWVzc2FnZXMuYWxsRGF5O1xuICAgIHZhciBlbmQgPSBhY2Nlc3NvcnMuZW5kKGV2ZW50KTtcbiAgICB2YXIgc3RhcnQgPSBhY2Nlc3NvcnMuc3RhcnQoZXZlbnQpO1xuXG4gICAgaWYgKCFhY2Nlc3NvcnMuYWxsRGF5KGV2ZW50KSkge1xuICAgICAgaWYgKGxvY2FsaXplci5lcShzdGFydCwgZW5kKSkge1xuICAgICAgICBsYWJlbCA9IGxvY2FsaXplci5mb3JtYXQoc3RhcnQsICdhZ2VuZGFUaW1lRm9ybWF0Jyk7XG4gICAgICB9IGVsc2UgaWYgKGxvY2FsaXplci5pc1NhbWVEYXRlKHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIGxhYmVsID0gbG9jYWxpemVyLmZvcm1hdCh7XG4gICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgIGVuZDogZW5kXG4gICAgICAgIH0sICdhZ2VuZGFUaW1lUmFuZ2VGb3JtYXQnKTtcbiAgICAgIH0gZWxzZSBpZiAobG9jYWxpemVyLmlzU2FtZURhdGUoZGF5LCBzdGFydCkpIHtcbiAgICAgICAgbGFiZWwgPSBsb2NhbGl6ZXIuZm9ybWF0KHN0YXJ0LCAnYWdlbmRhVGltZUZvcm1hdCcpO1xuICAgICAgfSBlbHNlIGlmIChsb2NhbGl6ZXIuaXNTYW1lRGF0ZShkYXksIGVuZCkpIHtcbiAgICAgICAgbGFiZWwgPSBsb2NhbGl6ZXIuZm9ybWF0KGVuZCwgJ2FnZW5kYVRpbWVGb3JtYXQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobG9jYWxpemVyLmd0KGRheSwgc3RhcnQsICdkYXknKSkgbGFiZWxDbGFzcyA9ICdyYmMtY29udGludWVzLXByaW9yJztcbiAgICBpZiAobG9jYWxpemVyLmx0KGRheSwgZW5kLCAnZGF5JykpIGxhYmVsQ2xhc3MgKz0gJyByYmMtY29udGludWVzLWFmdGVyJztcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogbGFiZWxDbGFzcy50cmltKClcbiAgICB9LCBUaW1lQ29tcG9uZW50ID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGltZUNvbXBvbmVudCwge1xuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgZGF5OiBkYXksXG4gICAgICBsYWJlbDogbGFiZWxcbiAgICB9KSA6IGxhYmVsKTtcbiAgfTtcblxuICB2YXIgX2FkanVzdEhlYWRlciA9IGZ1bmN0aW9uIF9hZGp1c3RIZWFkZXIoKSB7XG4gICAgaWYgKCF0Ym9keVJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgdmFyIGhlYWRlciA9IGhlYWRlclJlZi5jdXJyZW50O1xuICAgIHZhciBmaXJzdFJvdyA9IHRib2R5UmVmLmN1cnJlbnQuZmlyc3RDaGlsZDtcbiAgICBpZiAoIWZpcnN0Um93KSByZXR1cm47XG4gICAgdmFyIGlzT3ZlcmZsb3dpbmcgPSBjb250ZW50UmVmLmN1cnJlbnQuc2Nyb2xsSGVpZ2h0ID4gY29udGVudFJlZi5jdXJyZW50LmNsaWVudEhlaWdodDtcbiAgICB2YXIgX3dpZHRocyA9IFtdO1xuICAgIHZhciB3aWR0aHMgPSBfd2lkdGhzO1xuICAgIF93aWR0aHMgPSBbZ2V0V2lkdGgoZmlyc3RSb3cuY2hpbGRyZW5bMF0pLCBnZXRXaWR0aChmaXJzdFJvdy5jaGlsZHJlblsxXSldO1xuXG4gICAgaWYgKHdpZHRoc1swXSAhPT0gX3dpZHRoc1swXSB8fCB3aWR0aHNbMV0gIT09IF93aWR0aHNbMV0pIHtcbiAgICAgIGRhdGVDb2xSZWYuY3VycmVudC5zdHlsZS53aWR0aCA9IF93aWR0aHNbMF0gKyAncHgnO1xuICAgICAgdGltZUNvbFJlZi5jdXJyZW50LnN0eWxlLndpZHRoID0gX3dpZHRoc1sxXSArICdweCc7XG4gICAgfVxuXG4gICAgaWYgKGlzT3ZlcmZsb3dpbmcpIHtcbiAgICAgIGFkZENsYXNzKGhlYWRlciwgJ3JiYy1oZWFkZXItb3ZlcmZsb3dpbmcnKTtcbiAgICAgIGhlYWRlci5zdHlsZS5tYXJnaW5SaWdodCA9IHNjcm9sbGJhclNpemUoKSArICdweCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZUNsYXNzKGhlYWRlciwgJ3JiYy1oZWFkZXItb3ZlcmZsb3dpbmcnKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG1lc3NhZ2VzID0gbG9jYWxpemVyLm1lc3NhZ2VzO1xuICB2YXIgZW5kID0gbG9jYWxpemVyLmFkZChkYXRlLCBsZW5ndGgsICdkYXknKTtcbiAgdmFyIHJhbmdlID0gbG9jYWxpemVyLnJhbmdlKGRhdGUsIGVuZCwgJ2RheScpO1xuICBldmVudHMgPSBldmVudHMuZmlsdGVyKGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBpblJhbmdlKGV2ZW50LCBsb2NhbGl6ZXIuc3RhcnRPZihkYXRlLCAnZGF5JyksIGxvY2FsaXplci5lbmRPZihlbmQsICdkYXknKSwgYWNjZXNzb3JzLCBsb2NhbGl6ZXIpO1xuICB9KTtcbiAgZXZlbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gK2FjY2Vzc29ycy5zdGFydChhKSAtICthY2Nlc3NvcnMuc3RhcnQoYik7XG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJyYmMtYWdlbmRhLXZpZXdcIlxuICB9LCBldmVudHMubGVuZ3RoICE9PSAwID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwidGFibGVcIiwge1xuICAgIHJlZjogaGVhZGVyUmVmLFxuICAgIGNsYXNzTmFtZTogXCJyYmMtYWdlbmRhLXRhYmxlXCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0aGVhZFwiLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInRyXCIsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwidGhcIiwge1xuICAgIGNsYXNzTmFtZTogXCJyYmMtaGVhZGVyXCIsXG4gICAgcmVmOiBkYXRlQ29sUmVmXG4gIH0sIG1lc3NhZ2VzLmRhdGUpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInRoXCIsIHtcbiAgICBjbGFzc05hbWU6IFwicmJjLWhlYWRlclwiLFxuICAgIHJlZjogdGltZUNvbFJlZlxuICB9LCBtZXNzYWdlcy50aW1lKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiLCB7XG4gICAgY2xhc3NOYW1lOiBcInJiYy1oZWFkZXJcIlxuICB9LCBtZXNzYWdlcy5ldmVudCkpKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwicmJjLWFnZW5kYS1jb250ZW50XCIsXG4gICAgcmVmOiBjb250ZW50UmVmXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwidGFibGVcIiwge1xuICAgIGNsYXNzTmFtZTogXCJyYmMtYWdlbmRhLXRhYmxlXCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiLCB7XG4gICAgcmVmOiB0Ym9keVJlZlxuICB9LCByYW5nZS5tYXAoZnVuY3Rpb24gKGRheSwgaWR4KSB7XG4gICAgcmV0dXJuIHJlbmRlckRheShkYXksIGV2ZW50cywgaWR4KTtcbiAgfSkpKSkpIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IFwicmJjLWFnZW5kYS1lbXB0eVwiXG4gIH0sIG1lc3NhZ2VzLm5vRXZlbnRzSW5SYW5nZSkpO1xufVxuXG5BZ2VuZGEucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBhY2Nlc3NvcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY29tcG9uZW50czogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBkYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgZXZlbnRzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGdldHRlcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgbGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGxvY2FsaXplcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBvblNlbGVjdEV2ZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Eb3VibGVDbGlja0V2ZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB7fTtcbkFnZW5kYS5kZWZhdWx0UHJvcHMgPSB7XG4gIGxlbmd0aDogMzBcbn07XG5cbkFnZW5kYS5yYW5nZSA9IGZ1bmN0aW9uIChzdGFydCwgX3JlZjIpIHtcbiAgdmFyIF9yZWYyJGxlbmd0aCA9IF9yZWYyLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IF9yZWYyJGxlbmd0aCA9PT0gdm9pZCAwID8gQWdlbmRhLmRlZmF1bHRQcm9wcy5sZW5ndGggOiBfcmVmMiRsZW5ndGgsXG4gICAgICBsb2NhbGl6ZXIgPSBfcmVmMi5sb2NhbGl6ZXI7XG4gIHZhciBlbmQgPSBsb2NhbGl6ZXIuYWRkKHN0YXJ0LCBsZW5ndGgsICdkYXknKTtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnQsXG4gICAgZW5kOiBlbmRcbiAgfTtcbn07XG5cbkFnZW5kYS5uYXZpZ2F0ZSA9IGZ1bmN0aW9uIChkYXRlLCBhY3Rpb24sIF9yZWYzKSB7XG4gIHZhciBfcmVmMyRsZW5ndGggPSBfcmVmMy5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBfcmVmMyRsZW5ndGggPT09IHZvaWQgMCA/IEFnZW5kYS5kZWZhdWx0UHJvcHMubGVuZ3RoIDogX3JlZjMkbGVuZ3RoLFxuICAgICAgbG9jYWxpemVyID0gX3JlZjMubG9jYWxpemVyO1xuXG4gIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgY2FzZSBuYXZpZ2F0ZS5QUkVWSU9VUzpcbiAgICAgIHJldHVybiBsb2NhbGl6ZXIuYWRkKGRhdGUsIC1sZW5ndGgsICdkYXknKTtcblxuICAgIGNhc2UgbmF2aWdhdGUuTkVYVDpcbiAgICAgIHJldHVybiBsb2NhbGl6ZXIuYWRkKGRhdGUsIGxlbmd0aCwgJ2RheScpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBkYXRlO1xuICB9XG59O1xuXG5BZ2VuZGEudGl0bGUgPSBmdW5jdGlvbiAoc3RhcnQsIF9yZWY0KSB7XG4gIHZhciBfcmVmNCRsZW5ndGggPSBfcmVmNC5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBfcmVmNCRsZW5ndGggPT09IHZvaWQgMCA/IEFnZW5kYS5kZWZhdWx0UHJvcHMubGVuZ3RoIDogX3JlZjQkbGVuZ3RoLFxuICAgICAgbG9jYWxpemVyID0gX3JlZjQubG9jYWxpemVyO1xuICB2YXIgZW5kID0gbG9jYWxpemVyLmFkZChzdGFydCwgbGVuZ3RoLCAnZGF5Jyk7XG4gIHJldHVybiBsb2NhbGl6ZXIuZm9ybWF0KHtcbiAgICBzdGFydDogc3RhcnQsXG4gICAgZW5kOiBlbmRcbiAgfSwgJ2FnZW5kYUhlYWRlckZvcm1hdCcpO1xufTtcblxudmFyIF9WSUVXUztcbnZhciBWSUVXUyA9IChfVklFV1MgPSB7fSwgX1ZJRVdTW3ZpZXdzLk1PTlRIXSA9IE1vbnRoVmlldywgX1ZJRVdTW3ZpZXdzLldFRUtdID0gV2VlaywgX1ZJRVdTW3ZpZXdzLldPUktfV0VFS10gPSBXb3JrV2VlaywgX1ZJRVdTW3ZpZXdzLkRBWV0gPSBEYXksIF9WSUVXU1t2aWV3cy5BR0VOREFdID0gQWdlbmRhLCBfVklFV1MpO1xuXG52YXIgX2V4Y2x1ZGVkJDYgPSBbXCJhY3Rpb25cIiwgXCJkYXRlXCIsIFwidG9kYXlcIl07XG5mdW5jdGlvbiBtb3ZlRGF0ZShWaWV3LCBfcmVmKSB7XG4gIHZhciBhY3Rpb24gPSBfcmVmLmFjdGlvbixcbiAgICAgIGRhdGUgPSBfcmVmLmRhdGUsXG4gICAgICB0b2RheSA9IF9yZWYudG9kYXksXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCQ2KTtcblxuICBWaWV3ID0gdHlwZW9mIFZpZXcgPT09ICdzdHJpbmcnID8gVklFV1NbVmlld10gOiBWaWV3O1xuXG4gIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgY2FzZSBuYXZpZ2F0ZS5UT0RBWTpcbiAgICAgIGRhdGUgPSB0b2RheSB8fCBuZXcgRGF0ZSgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIG5hdmlnYXRlLkRBVEU6XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICAhKFZpZXcgJiYgdHlwZW9mIFZpZXcubmF2aWdhdGUgPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2FsZW5kYXIgVmlldyBjb21wb25lbnRzIG11c3QgaW1wbGVtZW50IGEgc3RhdGljIGAubmF2aWdhdGUoZGF0ZSwgYWN0aW9uKWAgbWV0aG9kLnMnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBkYXRlID0gVmlldy5uYXZpZ2F0ZShkYXRlLCBhY3Rpb24sIHByb3BzKTtcbiAgfVxuXG4gIHJldHVybiBkYXRlO1xufVxuXG52YXIgVG9vbGJhciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUb29sYmFyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb29sYmFyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMubmF2aWdhdGUgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vbk5hdmlnYXRlKGFjdGlvbik7XG4gICAgfTtcblxuICAgIF90aGlzLnZpZXcgPSBmdW5jdGlvbiAodmlldykge1xuICAgICAgX3RoaXMucHJvcHMub25WaWV3KHZpZXcpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVG9vbGJhci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBtZXNzYWdlcyA9IF90aGlzJHByb3BzLmxvY2FsaXplci5tZXNzYWdlcyxcbiAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wcy5sYWJlbDtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInJiYy10b29sYmFyXCJcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInJiYy1idG4tZ3JvdXBcIlxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBvbkNsaWNrOiB0aGlzLm5hdmlnYXRlLmJpbmQobnVsbCwgbmF2aWdhdGUuVE9EQVkpXG4gICAgfSwgbWVzc2FnZXMudG9kYXkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgb25DbGljazogdGhpcy5uYXZpZ2F0ZS5iaW5kKG51bGwsIG5hdmlnYXRlLlBSRVZJT1VTKVxuICAgIH0sIG1lc3NhZ2VzLnByZXZpb3VzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgIG9uQ2xpY2s6IHRoaXMubmF2aWdhdGUuYmluZChudWxsLCBuYXZpZ2F0ZS5ORVhUKVxuICAgIH0sIG1lc3NhZ2VzLm5leHQpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJyYmMtdG9vbGJhci1sYWJlbFwiXG4gICAgfSwgbGFiZWwpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInJiYy1idG4tZ3JvdXBcIlxuICAgIH0sIHRoaXMudmlld05hbWVzR3JvdXAobWVzc2FnZXMpKSk7XG4gIH07XG5cbiAgX3Byb3RvLnZpZXdOYW1lc0dyb3VwID0gZnVuY3Rpb24gdmlld05hbWVzR3JvdXAobWVzc2FnZXMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciB2aWV3TmFtZXMgPSB0aGlzLnByb3BzLnZpZXdzO1xuICAgIHZhciB2aWV3ID0gdGhpcy5wcm9wcy52aWV3O1xuXG4gICAgaWYgKHZpZXdOYW1lcy5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gdmlld05hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAga2V5OiBuYW1lLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xzeCh7XG4gICAgICAgICAgICAncmJjLWFjdGl2ZSc6IHZpZXcgPT09IG5hbWVcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBvbkNsaWNrOiBfdGhpczIudmlldy5iaW5kKG51bGwsIG5hbWUpXG4gICAgICAgIH0sIG1lc3NhZ2VzW25hbWVdKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVG9vbGJhcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVG9vbGJhci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIHZpZXc6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgdmlld3M6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLmlzUmVxdWlyZWQsXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBsb2NhbGl6ZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gIG9uTmF2aWdhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uVmlldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSA6IHt9O1xuXG4vKipcbiAqIFJldHJpZXZlIHZpYSBhbiBhY2Nlc3Nvci1saWtlIHByb3BlcnR5XG4gKlxuICogICAgYWNjZXNzb3Iob2JqLCAnbmFtZScpICAgLy8gPT4gcmV0cmlldmVzIG9ialsnbmFtZSddXG4gKiAgICBhY2Nlc3NvcihkYXRhLCBmdW5jKSAgICAvLyA9PiByZXRyaWV2ZXMgZnVuYyhkYXRhKVxuICogICAgLi4uIG90aGVyd2lzZSBudWxsXG4gKi9cbmZ1bmN0aW9uIGFjY2Vzc29yJDEoZGF0YSwgZmllbGQpIHtcbiAgdmFyIHZhbHVlID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBmaWVsZCA9PT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSBmaWVsZChkYXRhKTtlbHNlIGlmICh0eXBlb2YgZmllbGQgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiBkYXRhICE9IG51bGwgJiYgZmllbGQgaW4gZGF0YSkgdmFsdWUgPSBkYXRhW2ZpZWxkXTtcbiAgcmV0dXJuIHZhbHVlO1xufVxudmFyIHdyYXBBY2Nlc3NvciA9IGZ1bmN0aW9uIHdyYXBBY2Nlc3NvcihhY2MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIGFjY2Vzc29yJDEoZGF0YSwgYWNjKTtcbiAgfTtcbn07XG5cbnZhciBfZXhjbHVkZWQkNyA9IFtcInZpZXdcIiwgXCJkYXRlXCIsIFwiZ2V0Tm93XCIsIFwib25OYXZpZ2F0ZVwiXSxcbiAgICBfZXhjbHVkZWQyJDEgPSBbXCJ2aWV3XCIsIFwidG9vbGJhclwiLCBcImV2ZW50c1wiLCBcImJhY2tncm91bmRFdmVudHNcIiwgXCJzdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImVsZW1lbnRQcm9wc1wiLCBcImRhdGVcIiwgXCJnZXROb3dcIiwgXCJsZW5ndGhcIiwgXCJzaG93TXVsdGlEYXlUaW1lc1wiLCBcIm9uU2hvd01vcmVcIiwgXCJkb1Nob3dNb3JlRHJpbGxEb3duXCIsIFwiY29tcG9uZW50c1wiLCBcImZvcm1hdHNcIiwgXCJtZXNzYWdlc1wiLCBcImN1bHR1cmVcIl07XG5cbmZ1bmN0aW9uIHZpZXdOYW1lcyQxKF92aWV3cykge1xuICByZXR1cm4gIUFycmF5LmlzQXJyYXkoX3ZpZXdzKSA/IE9iamVjdC5rZXlzKF92aWV3cykgOiBfdmlld3M7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRWaWV3KHZpZXcsIF9yZWYpIHtcbiAgdmFyIF92aWV3cyA9IF9yZWYudmlld3M7XG4gIHZhciBuYW1lcyA9IHZpZXdOYW1lcyQxKF92aWV3cyk7XG4gIHJldHVybiBuYW1lcy5pbmRleE9mKHZpZXcpICE9PSAtMTtcbn1cblxudmFyIENhbGVuZGFyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENhbGVuZGFyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDYWxlbmRhcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgX2FyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBfYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KF9hcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmdldFZpZXdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZpZXdzID0gX3RoaXMucHJvcHMudmlld3M7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZpZXdzKSkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtKHZpZXdzLCBmdW5jdGlvbiAob2JqLCBuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG9ialtuYW1lXSA9IFZJRVdTW25hbWVdO1xuICAgICAgICB9LCB7fSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygdmlld3MgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBtYXBWYWx1ZXModmlld3MsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gVklFV1Nba2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gVklFV1M7XG4gICAgfTtcblxuICAgIF90aGlzLmdldFZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmlld3MgPSBfdGhpcy5nZXRWaWV3cygpO1xuXG4gICAgICByZXR1cm4gdmlld3NbX3RoaXMucHJvcHMudmlld107XG4gICAgfTtcblxuICAgIF90aGlzLmdldERyaWxsZG93blZpZXcgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdmlldyA9IF90aGlzJHByb3BzLnZpZXcsXG4gICAgICAgICAgZHJpbGxkb3duVmlldyA9IF90aGlzJHByb3BzLmRyaWxsZG93blZpZXcsXG4gICAgICAgICAgZ2V0RHJpbGxkb3duVmlldyA9IF90aGlzJHByb3BzLmdldERyaWxsZG93blZpZXc7XG4gICAgICBpZiAoIWdldERyaWxsZG93blZpZXcpIHJldHVybiBkcmlsbGRvd25WaWV3O1xuICAgICAgcmV0dXJuIGdldERyaWxsZG93blZpZXcoZGF0ZSwgdmlldywgT2JqZWN0LmtleXMoX3RoaXMuZ2V0Vmlld3MoKSkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSYW5nZUNoYW5nZSA9IGZ1bmN0aW9uIChkYXRlLCB2aWV3Q29tcG9uZW50LCB2aWV3KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25SYW5nZUNoYW5nZSA9IF90aGlzJHByb3BzMi5vblJhbmdlQ2hhbmdlLFxuICAgICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzMi5sb2NhbGl6ZXI7XG5cbiAgICAgIGlmIChvblJhbmdlQ2hhbmdlKSB7XG4gICAgICAgIGlmICh2aWV3Q29tcG9uZW50LnJhbmdlKSB7XG4gICAgICAgICAgb25SYW5nZUNoYW5nZSh2aWV3Q29tcG9uZW50LnJhbmdlKGRhdGUsIHtcbiAgICAgICAgICAgIGxvY2FsaXplcjogbG9jYWxpemVyXG4gICAgICAgICAgfSksIHZpZXcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdvblJhbmdlQ2hhbmdlIHByb3Agbm90IHN1cHBvcnRlZCBmb3IgdGhpcyB2aWV3Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU5hdmlnYXRlID0gZnVuY3Rpb24gKGFjdGlvbiwgbmV3RGF0ZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHZpZXcgPSBfdGhpcyRwcm9wczMudmlldyxcbiAgICAgICAgICBkYXRlID0gX3RoaXMkcHJvcHMzLmRhdGUsXG4gICAgICAgICAgZ2V0Tm93ID0gX3RoaXMkcHJvcHMzLmdldE5vdyxcbiAgICAgICAgICBvbk5hdmlnYXRlID0gX3RoaXMkcHJvcHMzLm9uTmF2aWdhdGUsXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczMsIF9leGNsdWRlZCQ3KTtcblxuICAgICAgdmFyIFZpZXdDb21wb25lbnQgPSBfdGhpcy5nZXRWaWV3KCk7XG5cbiAgICAgIHZhciB0b2RheSA9IGdldE5vdygpO1xuICAgICAgZGF0ZSA9IG1vdmVEYXRlKFZpZXdDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgZGF0ZTogbmV3RGF0ZSB8fCBkYXRlIHx8IHRvZGF5LFxuICAgICAgICB0b2RheTogdG9kYXlcbiAgICAgIH0pKTtcbiAgICAgIG9uTmF2aWdhdGUoZGF0ZSwgdmlldywgYWN0aW9uKTtcblxuICAgICAgX3RoaXMuaGFuZGxlUmFuZ2VDaGFuZ2UoZGF0ZSwgVmlld0NvbXBvbmVudCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVZpZXdDaGFuZ2UgPSBmdW5jdGlvbiAodmlldykge1xuICAgICAgaWYgKHZpZXcgIT09IF90aGlzLnByb3BzLnZpZXcgJiYgaXNWYWxpZFZpZXcodmlldywgX3RoaXMucHJvcHMpKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uVmlldyh2aWV3KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHZpZXdzID0gX3RoaXMuZ2V0Vmlld3MoKTtcblxuICAgICAgX3RoaXMuaGFuZGxlUmFuZ2VDaGFuZ2UoX3RoaXMucHJvcHMuZGF0ZSB8fCBfdGhpcy5wcm9wcy5nZXROb3coKSwgdmlld3Nbdmlld10sIHZpZXcpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVTZWxlY3RFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIG5vdGlmeShfdGhpcy5wcm9wcy5vblNlbGVjdEV2ZW50LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRG91YmxlQ2xpY2tFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIG5vdGlmeShfdGhpcy5wcm9wcy5vbkRvdWJsZUNsaWNrRXZlbnQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVLZXlQcmVzc0V2ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgIH1cblxuICAgICAgbm90aWZ5KF90aGlzLnByb3BzLm9uS2V5UHJlc3NFdmVudCwgYXJncyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVNlbGVjdFNsb3QgPSBmdW5jdGlvbiAoc2xvdEluZm8pIHtcbiAgICAgIG5vdGlmeShfdGhpcy5wcm9wcy5vblNlbGVjdFNsb3QsIHNsb3RJbmZvKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRHJpbGxEb3duID0gZnVuY3Rpb24gKGRhdGUsIHZpZXcpIHtcbiAgICAgIHZhciBvbkRyaWxsRG93biA9IF90aGlzLnByb3BzLm9uRHJpbGxEb3duO1xuXG4gICAgICBpZiAob25EcmlsbERvd24pIHtcbiAgICAgICAgb25EcmlsbERvd24oZGF0ZSwgdmlldywgX3RoaXMuZHJpbGxkb3duVmlldyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHZpZXcpIF90aGlzLmhhbmRsZVZpZXdDaGFuZ2Uodmlldyk7XG5cbiAgICAgIF90aGlzLmhhbmRsZU5hdmlnYXRlKG5hdmlnYXRlLkRBVEUsIGRhdGUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHQ6IF90aGlzLmdldENvbnRleHQoX3RoaXMucHJvcHMpXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ2FsZW5kYXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY29udGV4dDogdGhpcy5nZXRDb250ZXh0KG5leHRQcm9wcylcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0Q29udGV4dCA9IGZ1bmN0aW9uIGdldENvbnRleHQoX3JlZjIpIHtcbiAgICB2YXIgc3RhcnRBY2Nlc3NvciA9IF9yZWYyLnN0YXJ0QWNjZXNzb3IsXG4gICAgICAgIGVuZEFjY2Vzc29yID0gX3JlZjIuZW5kQWNjZXNzb3IsXG4gICAgICAgIGFsbERheUFjY2Vzc29yID0gX3JlZjIuYWxsRGF5QWNjZXNzb3IsXG4gICAgICAgIHRvb2x0aXBBY2Nlc3NvciA9IF9yZWYyLnRvb2x0aXBBY2Nlc3NvcixcbiAgICAgICAgdGl0bGVBY2Nlc3NvciA9IF9yZWYyLnRpdGxlQWNjZXNzb3IsXG4gICAgICAgIHJlc291cmNlQWNjZXNzb3IgPSBfcmVmMi5yZXNvdXJjZUFjY2Vzc29yLFxuICAgICAgICByZXNvdXJjZUlkQWNjZXNzb3IgPSBfcmVmMi5yZXNvdXJjZUlkQWNjZXNzb3IsXG4gICAgICAgIHJlc291cmNlVGl0bGVBY2Nlc3NvciA9IF9yZWYyLnJlc291cmNlVGl0bGVBY2Nlc3NvcixcbiAgICAgICAgZXZlbnRQcm9wR2V0dGVyID0gX3JlZjIuZXZlbnRQcm9wR2V0dGVyLFxuICAgICAgICBiYWNrZ3JvdW5kRXZlbnRQcm9wR2V0dGVyID0gX3JlZjIuYmFja2dyb3VuZEV2ZW50UHJvcEdldHRlcixcbiAgICAgICAgc2xvdFByb3BHZXR0ZXIgPSBfcmVmMi5zbG90UHJvcEdldHRlcixcbiAgICAgICAgc2xvdEdyb3VwUHJvcEdldHRlciA9IF9yZWYyLnNsb3RHcm91cFByb3BHZXR0ZXIsXG4gICAgICAgIGRheVByb3BHZXR0ZXIgPSBfcmVmMi5kYXlQcm9wR2V0dGVyLFxuICAgICAgICB2aWV3ID0gX3JlZjIudmlldyxcbiAgICAgICAgdmlld3MgPSBfcmVmMi52aWV3cyxcbiAgICAgICAgbG9jYWxpemVyID0gX3JlZjIubG9jYWxpemVyLFxuICAgICAgICBjdWx0dXJlID0gX3JlZjIuY3VsdHVyZSxcbiAgICAgICAgX3JlZjIkbWVzc2FnZXMgPSBfcmVmMi5tZXNzYWdlcyxcbiAgICAgICAgbWVzc2FnZXMkMSA9IF9yZWYyJG1lc3NhZ2VzID09PSB2b2lkIDAgPyB7fSA6IF9yZWYyJG1lc3NhZ2VzLFxuICAgICAgICBfcmVmMiRjb21wb25lbnRzID0gX3JlZjIuY29tcG9uZW50cyxcbiAgICAgICAgY29tcG9uZW50cyA9IF9yZWYyJGNvbXBvbmVudHMgPT09IHZvaWQgMCA/IHt9IDogX3JlZjIkY29tcG9uZW50cyxcbiAgICAgICAgX3JlZjIkZm9ybWF0cyA9IF9yZWYyLmZvcm1hdHMsXG4gICAgICAgIGZvcm1hdHMgPSBfcmVmMiRmb3JtYXRzID09PSB2b2lkIDAgPyB7fSA6IF9yZWYyJGZvcm1hdHM7XG4gICAgdmFyIG5hbWVzID0gdmlld05hbWVzJDEodmlld3MpO1xuICAgIHZhciBtc2dzID0gbWVzc2FnZXMobWVzc2FnZXMkMSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZpZXdOYW1lczogbmFtZXMsXG4gICAgICBsb2NhbGl6ZXI6IG1lcmdlV2l0aERlZmF1bHRzKGxvY2FsaXplciwgY3VsdHVyZSwgZm9ybWF0cywgbXNncyksXG4gICAgICBnZXR0ZXJzOiB7XG4gICAgICAgIGV2ZW50UHJvcDogZnVuY3Rpb24gZXZlbnRQcm9wKCkge1xuICAgICAgICAgIHJldHVybiBldmVudFByb3BHZXR0ZXIgJiYgZXZlbnRQcm9wR2V0dGVyLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSB8fCB7fTtcbiAgICAgICAgfSxcbiAgICAgICAgYmFja2dyb3VuZEV2ZW50UHJvcDogZnVuY3Rpb24gYmFja2dyb3VuZEV2ZW50UHJvcCgpIHtcbiAgICAgICAgICByZXR1cm4gYmFja2dyb3VuZEV2ZW50UHJvcEdldHRlciAmJiBiYWNrZ3JvdW5kRXZlbnRQcm9wR2V0dGVyLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSB8fCB7fTtcbiAgICAgICAgfSxcbiAgICAgICAgc2xvdFByb3A6IGZ1bmN0aW9uIHNsb3RQcm9wKCkge1xuICAgICAgICAgIHJldHVybiBzbG90UHJvcEdldHRlciAmJiBzbG90UHJvcEdldHRlci5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykgfHwge307XG4gICAgICAgIH0sXG4gICAgICAgIHNsb3RHcm91cFByb3A6IGZ1bmN0aW9uIHNsb3RHcm91cFByb3AoKSB7XG4gICAgICAgICAgcmV0dXJuIHNsb3RHcm91cFByb3BHZXR0ZXIgJiYgc2xvdEdyb3VwUHJvcEdldHRlci5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykgfHwge307XG4gICAgICAgIH0sXG4gICAgICAgIGRheVByb3A6IGZ1bmN0aW9uIGRheVByb3AoKSB7XG4gICAgICAgICAgcmV0dXJuIGRheVByb3BHZXR0ZXIgJiYgZGF5UHJvcEdldHRlci5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykgfHwge307XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjb21wb25lbnRzOiBkZWZhdWx0cyhjb21wb25lbnRzW3ZpZXddIHx8IHt9LCBvbWl0KGNvbXBvbmVudHMsIG5hbWVzKSwge1xuICAgICAgICBldmVudFdyYXBwZXI6IE5vb3BXcmFwcGVyLFxuICAgICAgICBiYWNrZ3JvdW5kRXZlbnRXcmFwcGVyOiBOb29wV3JhcHBlcixcbiAgICAgICAgZXZlbnRDb250YWluZXJXcmFwcGVyOiBOb29wV3JhcHBlcixcbiAgICAgICAgZGF0ZUNlbGxXcmFwcGVyOiBOb29wV3JhcHBlcixcbiAgICAgICAgd2Vla1dyYXBwZXI6IE5vb3BXcmFwcGVyLFxuICAgICAgICB0aW1lU2xvdFdyYXBwZXI6IE5vb3BXcmFwcGVyXG4gICAgICB9KSxcbiAgICAgIGFjY2Vzc29yczoge1xuICAgICAgICBzdGFydDogd3JhcEFjY2Vzc29yKHN0YXJ0QWNjZXNzb3IpLFxuICAgICAgICBlbmQ6IHdyYXBBY2Nlc3NvcihlbmRBY2Nlc3NvciksXG4gICAgICAgIGFsbERheTogd3JhcEFjY2Vzc29yKGFsbERheUFjY2Vzc29yKSxcbiAgICAgICAgdG9vbHRpcDogd3JhcEFjY2Vzc29yKHRvb2x0aXBBY2Nlc3NvciksXG4gICAgICAgIHRpdGxlOiB3cmFwQWNjZXNzb3IodGl0bGVBY2Nlc3NvciksXG4gICAgICAgIHJlc291cmNlOiB3cmFwQWNjZXNzb3IocmVzb3VyY2VBY2Nlc3NvciksXG4gICAgICAgIHJlc291cmNlSWQ6IHdyYXBBY2Nlc3NvcihyZXNvdXJjZUlkQWNjZXNzb3IpLFxuICAgICAgICByZXNvdXJjZVRpdGxlOiB3cmFwQWNjZXNzb3IocmVzb3VyY2VUaXRsZUFjY2Vzc29yKVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdmlldyA9IF90aGlzJHByb3BzNC52aWV3LFxuICAgICAgICB0b29sYmFyID0gX3RoaXMkcHJvcHM0LnRvb2xiYXIsXG4gICAgICAgIGV2ZW50cyA9IF90aGlzJHByb3BzNC5ldmVudHMsXG4gICAgICAgIF90aGlzJHByb3BzNCRiYWNrZ3JvdSA9IF90aGlzJHByb3BzNC5iYWNrZ3JvdW5kRXZlbnRzLFxuICAgICAgICBiYWNrZ3JvdW5kRXZlbnRzID0gX3RoaXMkcHJvcHM0JGJhY2tncm91ID09PSB2b2lkIDAgPyBbXSA6IF90aGlzJHByb3BzNCRiYWNrZ3JvdSxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wczQuc3R5bGUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzNC5jbGFzc05hbWUsXG4gICAgICAgIGVsZW1lbnRQcm9wcyA9IF90aGlzJHByb3BzNC5lbGVtZW50UHJvcHMsXG4gICAgICAgIGN1cnJlbnQgPSBfdGhpcyRwcm9wczQuZGF0ZSxcbiAgICAgICAgZ2V0Tm93ID0gX3RoaXMkcHJvcHM0LmdldE5vdyxcbiAgICAgICAgbGVuZ3RoID0gX3RoaXMkcHJvcHM0Lmxlbmd0aCxcbiAgICAgICAgc2hvd011bHRpRGF5VGltZXMgPSBfdGhpcyRwcm9wczQuc2hvd011bHRpRGF5VGltZXMsXG4gICAgICAgIG9uU2hvd01vcmUgPSBfdGhpcyRwcm9wczQub25TaG93TW9yZSxcbiAgICAgICAgZG9TaG93TW9yZURyaWxsRG93biA9IF90aGlzJHByb3BzNC5kb1Nob3dNb3JlRHJpbGxEb3duLFxuICAgICAgICBfMCA9IF90aGlzJHByb3BzNC5jb21wb25lbnRzLFxuICAgICAgICBfMSA9IF90aGlzJHByb3BzNC5mb3JtYXRzLFxuICAgICAgICBfMiA9IF90aGlzJHByb3BzNC5tZXNzYWdlcyxcbiAgICAgICAgXzMgPSBfdGhpcyRwcm9wczQuY3VsdHVyZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczQsIF9leGNsdWRlZDIkMSk7XG5cbiAgICBjdXJyZW50ID0gY3VycmVudCB8fCBnZXROb3coKTtcbiAgICB2YXIgVmlldyA9IHRoaXMuZ2V0VmlldygpO1xuICAgIHZhciBfdGhpcyRzdGF0ZSRjb250ZXh0ID0gdGhpcy5zdGF0ZS5jb250ZXh0LFxuICAgICAgICBhY2Nlc3NvcnMgPSBfdGhpcyRzdGF0ZSRjb250ZXh0LmFjY2Vzc29ycyxcbiAgICAgICAgY29tcG9uZW50cyA9IF90aGlzJHN0YXRlJGNvbnRleHQuY29tcG9uZW50cyxcbiAgICAgICAgZ2V0dGVycyA9IF90aGlzJHN0YXRlJGNvbnRleHQuZ2V0dGVycyxcbiAgICAgICAgbG9jYWxpemVyID0gX3RoaXMkc3RhdGUkY29udGV4dC5sb2NhbGl6ZXIsXG4gICAgICAgIHZpZXdOYW1lcyA9IF90aGlzJHN0YXRlJGNvbnRleHQudmlld05hbWVzO1xuICAgIHZhciBDYWxUb29sYmFyID0gY29tcG9uZW50cy50b29sYmFyIHx8IFRvb2xiYXI7XG4gICAgdmFyIGxhYmVsID0gVmlldy50aXRsZShjdXJyZW50LCB7XG4gICAgICBsb2NhbGl6ZXI6IGxvY2FsaXplcixcbiAgICAgIGxlbmd0aDogbGVuZ3RoXG4gICAgfSk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBlbGVtZW50UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc05hbWUsICdyYmMtY2FsZW5kYXInLCBwcm9wcy5ydGwgJiYgJ3JiYy1ydGwnKSxcbiAgICAgIHN0eWxlOiBzdHlsZVxuICAgIH0pLCB0b29sYmFyICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENhbFRvb2xiYXIsIHtcbiAgICAgIGRhdGU6IGN1cnJlbnQsXG4gICAgICB2aWV3OiB2aWV3LFxuICAgICAgdmlld3M6IHZpZXdOYW1lcyxcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIG9uVmlldzogdGhpcy5oYW5kbGVWaWV3Q2hhbmdlLFxuICAgICAgb25OYXZpZ2F0ZTogdGhpcy5oYW5kbGVOYXZpZ2F0ZSxcbiAgICAgIGxvY2FsaXplcjogbG9jYWxpemVyXG4gICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFZpZXcsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgZXZlbnRzOiBldmVudHMsXG4gICAgICBiYWNrZ3JvdW5kRXZlbnRzOiBiYWNrZ3JvdW5kRXZlbnRzLFxuICAgICAgZGF0ZTogY3VycmVudCxcbiAgICAgIGdldE5vdzogZ2V0Tm93LFxuICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICBsb2NhbGl6ZXI6IGxvY2FsaXplcixcbiAgICAgIGdldHRlcnM6IGdldHRlcnMsXG4gICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLFxuICAgICAgYWNjZXNzb3JzOiBhY2Nlc3NvcnMsXG4gICAgICBzaG93TXVsdGlEYXlUaW1lczogc2hvd011bHRpRGF5VGltZXMsXG4gICAgICBnZXREcmlsbGRvd25WaWV3OiB0aGlzLmdldERyaWxsZG93blZpZXcsXG4gICAgICBvbk5hdmlnYXRlOiB0aGlzLmhhbmRsZU5hdmlnYXRlLFxuICAgICAgb25EcmlsbERvd246IHRoaXMuaGFuZGxlRHJpbGxEb3duLFxuICAgICAgb25TZWxlY3RFdmVudDogdGhpcy5oYW5kbGVTZWxlY3RFdmVudCxcbiAgICAgIG9uRG91YmxlQ2xpY2tFdmVudDogdGhpcy5oYW5kbGVEb3VibGVDbGlja0V2ZW50LFxuICAgICAgb25LZXlQcmVzc0V2ZW50OiB0aGlzLmhhbmRsZUtleVByZXNzRXZlbnQsXG4gICAgICBvblNlbGVjdFNsb3Q6IHRoaXMuaGFuZGxlU2VsZWN0U2xvdCxcbiAgICAgIG9uU2hvd01vcmU6IG9uU2hvd01vcmUsXG4gICAgICBkb1Nob3dNb3JlRHJpbGxEb3duOiBkb1Nob3dNb3JlRHJpbGxEb3duXG4gICAgfSkpKTtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGRhdGVcbiAgICogQHBhcmFtIHZpZXdDb21wb25lbnRcbiAgICogQHBhcmFtIHsnbW9udGgnfCd3ZWVrJ3wnd29ya193ZWVrJ3wnZGF5J3wnYWdlbmRhJ30gW3ZpZXddIC0gb3B0aW9uYWxcbiAgICogcGFyYW1ldGVyLiBJdCBhcHBlYXJzIHdoZW4gcmFuZ2UgY2hhbmdlIG9uIHZpZXcgY2hhbmdpbmcuIEl0IGNvdWxkIGJlIGhhbmR5XG4gICAqIHdoZW4geW91IG5lZWQgdG8gaGF2ZSBib3RoOiByYW5nZSBhbmQgdmlldyB0eXBlIGF0IG9uY2UsIGkuZS4gZm9yIG1hbmFnZSByYmNcbiAgICogc3RhdGUgdmlhIHVybFxuICAgKi9cbiAgO1xuXG4gIHJldHVybiBDYWxlbmRhcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ2FsZW5kYXIuZGVmYXVsdFByb3BzID0ge1xuICBlbGVtZW50UHJvcHM6IHt9LFxuICBwb3B1cDogZmFsc2UsXG4gIHRvb2xiYXI6IHRydWUsXG4gIHZpZXc6IHZpZXdzLk1PTlRILFxuICB2aWV3czogW3ZpZXdzLk1PTlRILCB2aWV3cy5XRUVLLCB2aWV3cy5EQVksIHZpZXdzLkFHRU5EQV0sXG4gIHN0ZXA6IDMwLFxuICBsZW5ndGg6IDMwLFxuICBkb1Nob3dNb3JlRHJpbGxEb3duOiB0cnVlLFxuICBkcmlsbGRvd25WaWV3OiB2aWV3cy5EQVksXG4gIHRpdGxlQWNjZXNzb3I6ICd0aXRsZScsXG4gIHRvb2x0aXBBY2Nlc3NvcjogJ3RpdGxlJyxcbiAgYWxsRGF5QWNjZXNzb3I6ICdhbGxEYXknLFxuICBzdGFydEFjY2Vzc29yOiAnc3RhcnQnLFxuICBlbmRBY2Nlc3NvcjogJ2VuZCcsXG4gIHJlc291cmNlQWNjZXNzb3I6ICdyZXNvdXJjZUlkJyxcbiAgcmVzb3VyY2VJZEFjY2Vzc29yOiAnaWQnLFxuICByZXNvdXJjZVRpdGxlQWNjZXNzb3I6ICd0aXRsZScsXG4gIGxvbmdQcmVzc1RocmVzaG9sZDogMjUwLFxuICBnZXROb3c6IGZ1bmN0aW9uIGdldE5vdygpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKTtcbiAgfSxcbiAgZGF5TGF5b3V0QWxnb3JpdGhtOiAnb3ZlcmxhcCdcbn07XG5DYWxlbmRhci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgbG9jYWxpemVyIHVzZWQgZm9yIGZvcm1hdHRpbmcgZGF0ZXMgYW5kIHRpbWVzIGFjY29yZGluZyB0byB0aGUgYGZvcm1hdGAgYW5kIGBjdWx0dXJlYFxuICAgKlxuICAgKiBnbG9iYWxpemVcbiAgICogYGBganNcbiAgICogaW1wb3J0IHtnbG9iYWxpemVMb2NhbGl6ZXJ9IGZyb20gJ3JlYWN0LWJpZy1jYWxlbmRhcidcbiAgICogaW1wb3J0IGdsb2JhbGl6ZSBmcm9tICdnbG9iYWxpemUnXG4gICAqXG4gICAqIGNvbnN0IGxvY2FsaXplciA9IGdsb2JhbGl6ZUxvY2FsaXplcihnbG9iYWxpemUpXG4gICAqIGBgYFxuICAgKiBtb21lbnRcbiAgICogYGBganNcbiAgICogaW1wb3J0IHttb21lbnRMb2NhbGl6ZXJ9IGZyb20gJ3JlYWN0LWJpZy1jYWxlbmRhcidcbiAgICogaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXG4gICAqIC8vIGFuZCwgZm9yIG9wdGlvbmFsIHRpbWUgem9uZSBzdXBwb3J0XG4gICAqIGltcG9ydCAnbW9tZW50LXRpbWV6b25lJ1xuICAgKlxuICAgKiBtb21lbnQudHouc2V0RGVmYXVsdCgnQW1lcmljYS9Mb3NfQW5nZWxlcycpXG4gICAqIC8vIGVuZCBvcHRpb25hbCB0aW1lIHpvbmUgc3VwcG9ydFxuICAgKlxuICAgKiBjb25zdCBsb2NhbGl6ZXIgPSBtb21lbnRMb2NhbGl6ZXIobW9tZW50KVxuICAgKiBgYGBcbiAgICpcbiAgICogTHV4b25cbiAgICogYGBganNcbiAgICogaW1wb3J0IHtsdXhvbkxvY2FsaXplcn0gZnJvbSAncmVhY3QtYmlnLWNhbGVuZGFyJ1xuICAgKiBpbXBvcnQge0RhdGVUaW1lLCBTZXR0aW5nc30gZnJvbSAnbHV4b24nXG4gICAqIC8vIG9ubHkgdXNlIGBTZXR0aW5nc2AgaWYgeW91IHJlcXVpcmUgb3B0aW9uYWwgdGltZSB6b25lIHN1cHBvcnRcbiAgICogU2V0dGluZ3MuZGVmYXVsdFpvbmUgPSAnQW1lcmljYS9Mb3NfQW5nZWxlcydcbiAgICogLy8gZW5kIG9wdGlvbmFsIHRpbWUgem9uZSBzdXBwb3J0XG4gICAqXG4gICAqIC8vIEx1eG9uIHVzZXMgdGhlIEludGwgQVBJLCB3aGljaCBjdXJyZW50bHkgZG9lcyBub3QgY29udGFpbiBgd2Vla0luZm9gXG4gICAqIC8vIHRvIGRldGVybWluZSB3aGljaCB3ZWVrZGF5IGlzIHRoZSBzdGFydCBvZiB0aGUgd2VlayBieSBgY3VsdHVyZWAuXG4gICAqIC8vIFRoZSBgbHV4b25Mb2NhbGl6ZXJgIGRlZmF1bHRzIHRoaXMgdG8gU3VuZGF5LCB3aGljaCBkaWZmZXJzIGZyb21cbiAgICogLy8gdGhlIEx1eG9uIGRlZmF1bHQgb2YgTW9uZGF5LiBUaGUgbG9jYWxpemVyIHJlcXVpcmVzIHRoaXMgb3B0aW9uXG4gICAqIC8vIHRvIGNoYW5nZSB0aGUgZGlzcGxheSwgYW5kIHRoZSBkYXRlIG1hdGggZm9yIGRldGVybWluaW5nIHRoZVxuICAgKiAvLyBzdGFydCBvZiBhIHdlZWsuIEx1eG9uIHVzZXMgbm9uLXplcm8gYmFzZWQgdmFsdWVzIGZvciBgd2Vla2RheWAuXG4gICAqIGNvbnN0IGxvY2FsaXplciA9IGx1eG9uTG9jYWxpemVyKERhdGVUaW1lLCB7Zmlyc3REYXlPZldlZWs6IDd9KVxuICAgKiBgYGBcbiAgICovXG4gIGxvY2FsaXplcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBwYXNzZWQgdG8gbWFpbiBjYWxlbmRhciBgPGRpdj5gLlxuICAgKlxuICAgKi9cbiAgZWxlbWVudFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBkYXRlIHZhbHVlIG9mIHRoZSBjYWxlbmRhci4gRGV0ZXJtaW5lcyB0aGUgdmlzaWJsZSB2aWV3IHJhbmdlLlxuICAgKiBJZiBgZGF0ZWAgaXMgb21pdHRlZCB0aGVuIHRoZSByZXN1bHQgb2YgYGdldE5vd2AgaXMgdXNlZDsgb3RoZXJ3aXNlIHRoZVxuICAgKiBjdXJyZW50IGRhdGUgaXMgdXNlZC5cbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSBvbk5hdmlnYXRlXG4gICAqL1xuICBkYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgdmlldyBvZiB0aGUgY2FsZW5kYXIuXG4gICAqXG4gICAqIEBkZWZhdWx0ICdtb250aCdcbiAgICogQGNvbnRyb2xsYWJsZSBvblZpZXdcbiAgICovXG4gIHZpZXc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBpbml0aWFsIHZpZXcgc2V0IGZvciB0aGUgQ2FsZW5kYXIuXG4gICAqIEB0eXBlIENhbGVuZGFyLlZpZXdzICgnbW9udGgnfCd3ZWVrJ3wnd29ya193ZWVrJ3wnZGF5J3wnYWdlbmRhJylcbiAgICogQGRlZmF1bHQgJ21vbnRoJ1xuICAgKi9cbiAgZGVmYXVsdFZpZXc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGV2ZW50IG9iamVjdHMgdG8gZGlzcGxheSBvbiB0aGUgY2FsZW5kYXIuIEV2ZW50cyBvYmplY3RzXG4gICAqIGNhbiBiZSBhbnkgc2hhcGUsIGFzIGxvbmcgYXMgdGhlIENhbGVuZGFyIGtub3dzIGhvdyB0byByZXRyaWV2ZSB0aGVcbiAgICogZm9sbG93aW5nIGRldGFpbHMgb2YgdGhlIGV2ZW50OlxuICAgKlxuICAgKiAgLSBzdGFydCB0aW1lXG4gICAqICAtIGVuZCB0aW1lXG4gICAqICAtIHRpdGxlXG4gICAqICAtIHdoZXRoZXIgaXRzIGFuIFwiYWxsIGRheVwiIGV2ZW50IG9yIG5vdFxuICAgKiAgLSBhbnkgcmVzb3VyY2UgdGhlIGV2ZW50IG1heSBiZSByZWxhdGVkIHRvXG4gICAqXG4gICAqIEVhY2ggb2YgdGhlc2UgcHJvcGVydGllcyBjYW4gYmUgY3VzdG9taXplZCBvciBnZW5lcmF0ZWQgZHluYW1pY2FsbHkgYnlcbiAgICogc2V0dGluZyB0aGUgdmFyaW91cyBcImFjY2Vzc29yXCIgcHJvcHMuIFdpdGhvdXQgYW55IGNvbmZpZ3VyYXRpb24gdGhlIGRlZmF1bHRcbiAgICogZXZlbnQgc2hvdWxkIGxvb2sgbGlrZTpcbiAgICpcbiAgICogYGBganNcbiAgICogRXZlbnQge1xuICAgKiAgIHRpdGxlOiBzdHJpbmcsXG4gICAqICAgc3RhcnQ6IERhdGUsXG4gICAqICAgZW5kOiBEYXRlLFxuICAgKiAgIGFsbERheT86IGJvb2xlYW5cbiAgICogICByZXNvdXJjZT86IGFueSxcbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIGV2ZW50czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9iamVjdCksXG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGJhY2tncm91bmQgZXZlbnQgb2JqZWN0cyB0byBkaXNwbGF5IG9uIHRoZSBjYWxlbmRhci4gQmFja2dyb3VuZFxuICAgKiBFdmVudHMgYmVoYXZlIHNpbWlsYXJseSB0byBFdmVudHMgYnV0IGFyZSBub3QgZmFjdG9yZWQgaW50byBFdmVudCBvdmVybGFwIGxvZ2ljLFxuICAgKiBhbGxvd2luZyB0aGVtIHRvIHNpdCBiZWhpbmQgYW55IEV2ZW50cyB0aGF0IG1heSBvY2N1ciBkdXJpbmcgdGhlIHNhbWUgcGVyaW9kLlxuICAgKiBCYWNrZ3JvdW5kIEV2ZW50cyBvYmplY3RzIGNhbiBiZSBhbnkgc2hhcGUsIGFzIGxvbmcgYXMgdGhlIENhbGVuZGFyIGtub3dzIGhvdyB0b1xuICAgKiByZXRyaWV2ZSB0aGUgZm9sbG93aW5nIGRldGFpbHMgb2YgdGhlIGV2ZW50OlxuICAgKlxuICAgKiAgLSBzdGFydCB0aW1lXG4gICAqICAtIGVuZCB0aW1lXG4gICAqXG4gICAqIEVhY2ggb2YgdGhlc2UgcHJvcGVydGllcyBjYW4gYmUgY3VzdG9taXplZCBvciBnZW5lcmF0ZWQgZHluYW1pY2FsbHkgYnlcbiAgICogc2V0dGluZyB0aGUgdmFyaW91cyBcImFjY2Vzc29yXCIgcHJvcHMuIFdpdGhvdXQgYW55IGNvbmZpZ3VyYXRpb24gdGhlIGRlZmF1bHRcbiAgICogZXZlbnQgc2hvdWxkIGxvb2sgbGlrZTpcbiAgICpcbiAgICogYGBganNcbiAgICogQmFja2dyb3VuZEV2ZW50IHtcbiAgICogICBzdGFydDogRGF0ZSxcbiAgICogICBlbmQ6IERhdGUsXG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBiYWNrZ3JvdW5kRXZlbnRzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcblxuICAvKipcbiAgICogQWNjZXNzb3IgZm9yIHRoZSBldmVudCB0aXRsZSwgdXNlZCB0byBkaXNwbGF5IGV2ZW50IGluZm9ybWF0aW9uLiBTaG91bGRcbiAgICogcmVzb2x2ZSB0byBhIGByZW5kZXJhYmxlYCB2YWx1ZS5cbiAgICpcbiAgICogYGBganNcbiAgICogc3RyaW5nIHwgKGV2ZW50OiBPYmplY3QpID0+IHN0cmluZ1xuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUgeyhmdW5jfHN0cmluZyl9XG4gICAqL1xuICB0aXRsZUFjY2Vzc29yOiBhY2Nlc3NvcixcblxuICAvKipcbiAgICogQWNjZXNzb3IgZm9yIHRoZSBldmVudCB0b29sdGlwLiBTaG91bGRcbiAgICogcmVzb2x2ZSB0byBhIGByZW5kZXJhYmxlYCB2YWx1ZS4gUmVtb3ZlcyB0aGUgdG9vbHRpcCBpZiBudWxsLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBzdHJpbmcgfCAoZXZlbnQ6IE9iamVjdCkgPT4gc3RyaW5nXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7KGZ1bmN8c3RyaW5nKX1cbiAgICovXG4gIHRvb2x0aXBBY2Nlc3NvcjogYWNjZXNzb3IsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgZXZlbnQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYW4gXCJhbGwgZGF5XCIgZXZlbnQgYW5kIGlnbm9yZSB0aW1lLlxuICAgKiBNdXN0IHJlc29sdmUgdG8gYSBgYm9vbGVhbmAgdmFsdWUuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIHN0cmluZyB8IChldmVudDogT2JqZWN0KSA9PiBib29sZWFuXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7KGZ1bmN8c3RyaW5nKX1cbiAgICovXG4gIGFsbERheUFjY2Vzc29yOiBhY2Nlc3NvcixcblxuICAvKipcbiAgICogVGhlIHN0YXJ0IGRhdGUvdGltZSBvZiB0aGUgZXZlbnQuIE11c3QgcmVzb2x2ZSB0byBhIEphdmFTY3JpcHQgYERhdGVgIG9iamVjdC5cbiAgICpcbiAgICogYGBganNcbiAgICogc3RyaW5nIHwgKGV2ZW50OiBPYmplY3QpID0+IERhdGVcbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHsoZnVuY3xzdHJpbmcpfVxuICAgKi9cbiAgc3RhcnRBY2Nlc3NvcjogYWNjZXNzb3IsXG5cbiAgLyoqXG4gICAqIFRoZSBlbmQgZGF0ZS90aW1lIG9mIHRoZSBldmVudC4gTXVzdCByZXNvbHZlIHRvIGEgSmF2YVNjcmlwdCBgRGF0ZWAgb2JqZWN0LlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBzdHJpbmcgfCAoZXZlbnQ6IE9iamVjdCkgPT4gRGF0ZVxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUgeyhmdW5jfHN0cmluZyl9XG4gICAqL1xuICBlbmRBY2Nlc3NvcjogYWNjZXNzb3IsXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGlkIG9mIHRoZSBgcmVzb3VyY2VgIHRoYXQgdGhlIGV2ZW50IGlzIGEgbWVtYmVyIG9mLiBUaGlzXG4gICAqIGlkIHNob3VsZCBtYXRjaCBhdCBsZWFzdCBvbmUgcmVzb3VyY2UgaW4gdGhlIGByZXNvdXJjZXNgIGFycmF5LlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBzdHJpbmcgfCAoZXZlbnQ6IE9iamVjdCkgPT4gRGF0ZVxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUgeyhmdW5jfHN0cmluZyl9XG4gICAqL1xuICByZXNvdXJjZUFjY2Vzc29yOiBhY2Nlc3NvcixcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgcmVzb3VyY2Ugb2JqZWN0cyB0aGF0IG1hcCBldmVudHMgdG8gYSBzcGVjaWZpYyByZXNvdXJjZS5cbiAgICogUmVzb3VyY2Ugb2JqZWN0cywgbGlrZSBldmVudHMsIGNhbiBiZSBhbnkgc2hhcGUgb3IgaGF2ZSBhbnkgcHJvcGVydGllcyxcbiAgICogYnV0IHNob3VsZCBiZSB1bmlxdWx5IGlkZW50aWZpYWJsZSB2aWEgdGhlIGByZXNvdXJjZUlkQWNjZXNzb3JgLCBhc1xuICAgKiB3ZWxsIGFzIGEgXCJ0aXRsZVwiIG9yIG5hbWUgYXMgcHJvdmlkZWQgYnkgdGhlIGByZXNvdXJjZVRpdGxlQWNjZXNzb3JgIHByb3AuXG4gICAqL1xuICByZXNvdXJjZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIHVuaXF1ZSBpZGVudGlmaWVyIGZvciBlYWNoIHJlc291cmNlIGluIHRoZSBgcmVzb3VyY2VzYCBhcnJheVxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBzdHJpbmcgfCAocmVzb3VyY2U6IE9iamVjdCkgPT4gYW55XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7KGZ1bmN8c3RyaW5nKX1cbiAgICovXG4gIHJlc291cmNlSWRBY2Nlc3NvcjogYWNjZXNzb3IsXG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaHVtYW4gcmVhZGFibGUgbmFtZSBmb3IgdGhlIHJlc291cmNlIG9iamVjdCwgdXNlZCBpbiBoZWFkZXJzLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBzdHJpbmcgfCAocmVzb3VyY2U6IE9iamVjdCkgPT4gYW55XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7KGZ1bmN8c3RyaW5nKX1cbiAgICovXG4gIHJlc291cmNlVGl0bGVBY2Nlc3NvcjogYWNjZXNzb3IsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGN1cnJlbnQgZGF0ZS90aW1lIHdoaWNoIGlzIGhpZ2hsaWdodGVkIGluIHRoZSB2aWV3cy5cbiAgICpcbiAgICogVGhlIHZhbHVlIGFmZmVjdHMgd2hpY2ggZGF5IGlzIHNoYWRlZCBhbmQgd2hpY2ggdGltZSBpcyBzaG93biBhc1xuICAgKiB0aGUgY3VycmVudCB0aW1lLiBJdCBhbHNvIGFmZmVjdHMgdGhlIGRhdGUgdXNlZCBieSB0aGUgVG9kYXkgYnV0dG9uIGluXG4gICAqIHRoZSB0b29sYmFyLlxuICAgKlxuICAgKiBQcm92aWRpbmcgYSB2YWx1ZSBoZXJlIGNhbiBiZSB1c2VmdWwgd2hlbiB5b3UgYXJlIGltcGxlbWVudGluZyB0aW1lIHpvbmVzXG4gICAqIHVzaW5nIHRoZSBgc3RhcnRBY2Nlc3NvcmAgYW5kIGBlbmRBY2Nlc3NvcmAgcHJvcGVydGllcy5cbiAgICpcbiAgICogQHR5cGUge2Z1bmN9XG4gICAqIEBkZWZhdWx0ICgpID0+IG5ldyBEYXRlKClcbiAgICovXG4gIGdldE5vdzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGBkYXRlYCB2YWx1ZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIGRhdGVcbiAgICovXG4gIG9uTmF2aWdhdGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBgdmlld2AgdmFsdWUgY2hhbmdlcy5cbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSB2aWV3XG4gICAqL1xuICBvblZpZXc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGRhdGUgaGVhZGVyLCBvciB0aGUgdHJ1bmNhdGVkIGV2ZW50cyBsaW5rcyBhcmUgY2xpY2tlZFxuICAgKlxuICAgKi9cbiAgb25EcmlsbERvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAoZGF0ZXM6IERhdGVbXSB8IHsgc3RhcnQ6IERhdGU7IGVuZDogRGF0ZSB9LCB2aWV3OiAnbW9udGgnfCd3ZWVrJ3wnd29ya193ZWVrJ3wnZGF5J3wnYWdlbmRhJ3x1bmRlZmluZWQpID0+IHZvaWRcbiAgICogYGBgXG4gICAqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZpc2libGUgZGF0ZSByYW5nZSBjaGFuZ2VzLiBSZXR1cm5zIGFuIEFycmF5IG9mIGRhdGVzXG4gICAqIG9yIGFuIG9iamVjdCB3aXRoIHN0YXJ0IGFuZCBlbmQgZGF0ZXMgZm9yIEJVSUxUSU4gdmlld3MuIE9wdGlvbmFsbHkgbmV3IGB2aWV3YFxuICAgKiB3aWxsIGJlIHJldHVybmVkIHdoZW4gY2FsbGJhY2sgY2FsbGVkIGFmdGVyIHZpZXcgY2hhbmdlLlxuICAgKlxuICAgKiBDdXN0b20gdmlld3MgbWF5IHJldHVybiBzb21ldGhpbmcgZGlmZmVyZW50LlxuICAgKi9cbiAgb25SYW5nZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiBhIGRhdGUgc2VsZWN0aW9uIGlzIG1hZGUuIE9ubHkgZmlyZXMgd2hlbiBgc2VsZWN0YWJsZWAgaXMgYHRydWVgLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAoXG4gICAqICAgc2xvdEluZm86IHtcbiAgICogICAgIHN0YXJ0OiBEYXRlLFxuICAgKiAgICAgZW5kOiBEYXRlLFxuICAgKiAgICAgcmVzb3VyY2VJZDogIChudW1iZXJ8c3RyaW5nKSxcbiAgICogICAgIHNsb3RzOiBBcnJheTxEYXRlPixcbiAgICogICAgIGFjdGlvbjogXCJzZWxlY3RcIiB8IFwiY2xpY2tcIiB8IFwiZG91YmxlQ2xpY2tcIixcbiAgICogICAgIGJvdW5kczogP3sgLy8gRm9yIFwic2VsZWN0XCIgYWN0aW9uXG4gICAqICAgICAgIHg6IG51bWJlcixcbiAgICogICAgICAgeTogbnVtYmVyLFxuICAgKiAgICAgICB0b3A6IG51bWJlcixcbiAgICogICAgICAgcmlnaHQ6IG51bWJlcixcbiAgICogICAgICAgbGVmdDogbnVtYmVyLFxuICAgKiAgICAgICBib3R0b206IG51bWJlcixcbiAgICogICAgIH0sXG4gICAqICAgICBib3g6ID97IC8vIEZvciBcImNsaWNrXCIgb3IgXCJkb3VibGVDbGlja1wiIGFjdGlvbnNcbiAgICogICAgICAgY2xpZW50WDogbnVtYmVyLFxuICAgKiAgICAgICBjbGllbnRZOiBudW1iZXIsXG4gICAqICAgICAgIHg6IG51bWJlcixcbiAgICogICAgICAgeTogbnVtYmVyLFxuICAgKiAgICAgfSxcbiAgICogICB9XG4gICAqICkgPT4gYW55XG4gICAqIGBgYFxuICAgKi9cbiAgb25TZWxlY3RTbG90OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBhIGNhbGVuZGFyIGV2ZW50IGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAoZXZlbnQ6IE9iamVjdCwgZTogU3ludGhldGljRXZlbnQpID0+IGFueVxuICAgKiBgYGBcbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSBzZWxlY3RlZFxuICAgKi9cbiAgb25TZWxlY3RFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBjYWxlbmRhciBldmVudCBpcyBjbGlja2VkIHR3aWNlLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAoZXZlbnQ6IE9iamVjdCwgZTogU3ludGhldGljRXZlbnQpID0+IHZvaWRcbiAgICogYGBgXG4gICAqL1xuICBvbkRvdWJsZUNsaWNrRXZlbnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgZm9jdXNlZCBjYWxlbmRhciBldmVudCByZWNlaXZlcyBhIGtleSBwcmVzcy5cbiAgICpcbiAgICogYGBganNcbiAgICogKGV2ZW50OiBPYmplY3QsIGU6IFN5bnRoZXRpY0V2ZW50KSA9PiB2b2lkXG4gICAqIGBgYFxuICAgKi9cbiAgb25LZXlQcmVzc0V2ZW50OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBkcmFnZ2luZyBhIHNlbGVjdGlvbiBpbiB0aGUgVGltZSB2aWV3cy5cbiAgICpcbiAgICogUmV0dXJuaW5nIGBmYWxzZWAgZnJvbSB0aGUgaGFuZGxlciB3aWxsIHByZXZlbnQgYSBzZWxlY3Rpb24uXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIChyYW5nZTogeyBzdGFydDogRGF0ZSwgZW5kOiBEYXRlLCByZXNvdXJjZUlkOiAobnVtYmVyfHN0cmluZykgfSkgPT4gP2Jvb2xlYW5cbiAgICogYGBgXG4gICAqL1xuICBvblNlbGVjdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSAre2NvdW50fSBtb3JlIGlzIGNsaWNrZWRcbiAgICpcbiAgICogYGBganNcbiAgICogKGV2ZW50czogT2JqZWN0LCBkYXRlOiBEYXRlKSA9PiBhbnlcbiAgICogYGBgXG4gICAqL1xuICBvblNob3dNb3JlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogRGlzcGxheXMgYWxsIGV2ZW50cyBvbiB0aGUgbW9udGggdmlldyBpbnN0ZWFkIG9mXG4gICAqIGhhdmluZyBzb21lIGhpZGRlbiBiZWhpbmQgK3tjb3VudH0gbW9yZS4gVGhpcyB3aWxsXG4gICAqIGNhdXNlIHRoZSByb3dzIGluIHRoZSBtb250aCB2aWV3IHRvIGJlIHNjcm9sbGFibGUgaWZcbiAgICogdGhlIG51bWJlciBvZiBldmVudHMgZXhjZWVkIHRoZSBoZWlnaHQgb2YgdGhlIHJvdy5cbiAgICovXG4gIHNob3dBbGxFdmVudHM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc2VsZWN0ZWQgZXZlbnQsIGlmIGFueS5cbiAgICovXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBidWlsdC1pbiB2aWV3IG5hbWVzIHRvIGFsbG93IHRoZSBjYWxlbmRhciB0byBkaXNwbGF5LlxuICAgKiBhY2NlcHRzIGVpdGhlciBhbiBhcnJheSBvZiBidWlsdGluIHZpZXcgbmFtZXMsXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB2aWV3cz17Wydtb250aCcsICdkYXknLCAnYWdlbmRhJ119XG4gICAqIGBgYFxuICAgKiBvciBhbiBvYmplY3QgaGFzaCBvZiB0aGUgdmlldyBuYW1lIGFuZCB0aGUgY29tcG9uZW50IChvciBib29sZWFuIGZvciBidWlsdGluKS5cbiAgICpcbiAgICogYGBganN4XG4gICAqIHZpZXdzPXt7XG4gICAqICAgbW9udGg6IHRydWUsXG4gICAqICAgd2VlazogZmFsc2UsXG4gICAqICAgbXl3ZWVrOiBXb3JrV2Vla1ZpZXdDb21wb25lbnQsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBDdXN0b20gdmlld3MgY2FuIGJlIGFueSBSZWFjdCBjb21wb25lbnQsIHRoYXQgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nXG4gICAqIGludGVyZmFjZTpcbiAgICpcbiAgICogYGBganNcbiAgICogaW50ZXJmYWNlIFZpZXcge1xuICAgKiAgIHN0YXRpYyB0aXRsZShkYXRlOiBEYXRlLCB7IGZvcm1hdHM6IERhdGVGb3JtYXRbXSwgY3VsdHVyZTogc3RyaW5nPywgLi4ucHJvcHMgfSk6IHN0cmluZ1xuICAgKiAgIHN0YXRpYyBuYXZpZ2F0ZShkYXRlOiBEYXRlLCBhY3Rpb246ICdQUkVWJyB8ICdORVhUJyB8ICdEQVRFJyk6IERhdGVcbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUgVmlld3MgKCdtb250aCd8J3dlZWsnfCd3b3JrX3dlZWsnfCdkYXknfCdhZ2VuZGEnKVxuICAgKiBAVmlld1xuICAgWydtb250aCcsICd3ZWVrJywgJ2RheScsICdhZ2VuZGEnXVxuICAgKi9cbiAgdmlld3M6IHZpZXdzJDEsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgZHJpbGwgZG93biBzaG91bGQgb2NjdXIgd2hlbiBjbGlja2luZyBvbiB0aGUgXCIrX3hfIG1vcmVcIiBsaW5rLlxuICAgKiBJZiBgcG9wdXBgIGlzIGZhbHNlLCBhbmQgYGRvU2hvd01vcmVEcmlsbERvd25gIGlzIHRydWUsIHRoZSBkcmlsbCBkb3duIHdpbGwgb2NjdXIgYXMgdXN1YWwuXG4gICAqIElmIGBwb3B1cGAgaXMgZmFsc2UsIGFuZCBgZG9TaG93TW9yZURyaWxsRG93bmAgaXMgZmFsc2UsIHRoZSBkcmlsbCBkb3duIHdpbGwgbm90IG9jY3VyIGFuZCB0aGUgYG9uU2hvd01vcmVgIGZ1bmN0aW9uIHdpbGwgdHJpZ2dlci5cbiAgICovXG4gIGRvU2hvd01vcmVEcmlsbERvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc3RyaW5nIG5hbWUgb2YgdGhlIGRlc3RpbmF0aW9uIHZpZXcgZm9yIGRyaWxsLWRvd24gYWN0aW9ucywgc3VjaFxuICAgKiBhcyBjbGlja2luZyBhIGRhdGUgaGVhZGVyLCBvciB0aGUgdHJ1bmNhdGVkIGV2ZW50cyBsaW5rcy4gSWZcbiAgICogYGdldERyaWxsZG93blZpZXdgIGlzIGFsc28gc3BlY2lmaWVkIGl0IHdpbGwgYmUgdXNlZCBpbnN0ZWFkLlxuICAgKlxuICAgKiBTZXQgdG8gYG51bGxgIHRvIGRpc2FibGUgZHJpbGwtZG93biBhY3Rpb25zLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiA8Q2FsZW5kYXJcbiAgICogICBkcmlsbGRvd25WaWV3PVwiYWdlbmRhXCJcbiAgICogLz5cbiAgICogYGBgXG4gICAqL1xuICBkcmlsbGRvd25WaWV3OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBgZHJpbGxkb3duVmlld2AsIGJ1dCBhY2NlcHRzIGEgZnVuY3Rpb25cbiAgICogdGhhdCBjYW4gcmV0dXJuIGEgdmlldyBuYW1lLiBJdCdzIHVzZWZ1bCBmb3IgY3VzdG9taXppbmcgdGhlIGRyaWxsLWRvd25cbiAgICogYWN0aW9ucyBkZXBlbmRpbmcgb24gdGhlIHRhcmdldCBkYXRlIGFuZCB0cmlnZ2VyaW5nIHZpZXcuXG4gICAqXG4gICAqIFJldHVybiBgbnVsbGAgdG8gZGlzYWJsZSBkcmlsbC1kb3duIGFjdGlvbnMuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIDxDYWxlbmRhclxuICAgKiAgIGdldERyaWxsZG93blZpZXc9eyh0YXJnZXREYXRlLCBjdXJyZW50Vmlld05hbWUsIGNvbmZpZ3VyZWRWaWV3TmFtZXMpID0+XG4gICAqICAgICBpZiAoY3VycmVudFZpZXdOYW1lID09PSAnbW9udGgnICYmIGNvbmZpZ3VyZWRWaWV3TmFtZXMuaW5jbHVkZXMoJ3dlZWsnKSlcbiAgICogICAgICAgcmV0dXJuICd3ZWVrJ1xuICAgKlxuICAgKiAgICAgcmV0dXJuIG51bGw7XG4gICAqICAgfX1cbiAgICogLz5cbiAgICogYGBgXG4gICAqL1xuICBnZXREcmlsbGRvd25WaWV3OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgZW5kIGRhdGUgZnJvbSBkYXRlIHByb3AgaW4gdGhlIGFnZW5kYSB2aWV3XG4gICAqIGRhdGUgcHJvcCArIGxlbmd0aCAoaW4gbnVtYmVyIG9mIGRheXMpID0gZW5kIGRhdGVcbiAgICovXG4gIGxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSB0b29sYmFyIGlzIGRpc3BsYXllZFxuICAgKi9cbiAgdG9vbGJhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFNob3cgdHJ1bmNhdGVkIGV2ZW50cyBpbiBhbiBvdmVybGF5IHdoZW4geW91IGNsaWNrIHRoZSBcIitfeF8gbW9yZVwiIGxpbmsuXG4gICAqL1xuICBwb3B1cDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERpc3RhbmNlIGluIHBpeGVscywgZnJvbSB0aGUgZWRnZXMgb2YgdGhlIHZpZXdwb3J0LCB0aGUgXCJzaG93IG1vcmVcIiBvdmVybGF5IHNob3VsZCBiZSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogPENhbGVuZGFyIHBvcHVwT2Zmc2V0PXszMH0vPlxuICAgKiA8Q2FsZW5kYXIgcG9wdXBPZmZzZXQ9e3t4OiAzMCwgeTogMjB9fS8+XG4gICAqIGBgYFxuICAgKi9cbiAgcG9wdXBPZmZzZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgeDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB5OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIEFsbG93cyBtb3VzZSBzZWxlY3Rpb24gb2YgcmFuZ2VzIG9mIGRhdGVzL3RpbWVzLlxuICAgKlxuICAgKiBUaGUgJ2lnbm9yZUV2ZW50cycgb3B0aW9uIHByZXZlbnRzIHNlbGVjdGlvbiBjb2RlIGZyb20gcnVubmluZyB3aGVuIGFcbiAgICogZHJhZyBiZWdpbnMgb3ZlciBhbiBldmVudC4gVXNlZnVsIHdoZW4geW91IHdhbnQgY3VzdG9tIGV2ZW50IGNsaWNrIG9yIGRyYWdcbiAgICogbG9naWNcbiAgICovXG4gIHNlbGVjdGFibGU6IFByb3BUeXBlcy5vbmVPZihbdHJ1ZSwgZmFsc2UsICdpZ25vcmVFdmVudHMnXSksXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGUgdXNlciBtdXN0IHByZXNzIGFuZCBob2xkIG9uIHRoZSBzY3JlZW4gZm9yIGEgdG91Y2hcbiAgICogdG8gYmUgY29uc2lkZXJlZCBhIFwibG9uZyBwcmVzcy5cIiBMb25nIHByZXNzZXMgYXJlIHVzZWQgZm9yIHRpbWUgc2xvdCBzZWxlY3Rpb24gb24gdG91Y2hcbiAgICogZGV2aWNlcy5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMjUwXG4gICAqL1xuICBsb25nUHJlc3NUaHJlc2hvbGQ6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHNlbGVjdGFibGUgdGltZSBpbmNyZW1lbnRzIGluIHdlZWsgYW5kIGRheSB2aWV3cywgaW4gbWludXRlcy5cbiAgICovXG4gIHN0ZXA6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2Ygc2xvdHMgcGVyIFwic2VjdGlvblwiIGluIHRoZSB0aW1lIGdyaWQgdmlld3MuIEFkanVzdCB3aXRoIGBzdGVwYFxuICAgKiB0byBjaGFuZ2UgdGhlIGRlZmF1bHQgb2YgMSBob3VyIGxvbmcgZ3JvdXBzLCB3aXRoIDMwIG1pbnV0ZSBzbG90cy5cbiAgICovXG4gIHRpbWVzbG90czogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICpTd2l0Y2ggdGhlIGNhbGVuZGFyIHRvIGEgYHJpZ2h0LXRvLWxlZnRgIHJlYWQgZGlyZWN0aW9uLlxuICAgKi9cbiAgcnRsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBwcm92aWRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIG9iamVjdCBvZiBjbGFzc05hbWUgb3Igc3R5bGUgcHJvcHNcbiAgICogdG8gYmUgYXBwbGllZCB0byB0aGUgdGhlIGV2ZW50IG5vZGUuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIChcbiAgICogXHRldmVudDogT2JqZWN0LFxuICAgKiBcdHN0YXJ0OiBEYXRlLFxuICAgKiBcdGVuZDogRGF0ZSxcbiAgICogXHRpc1NlbGVjdGVkOiBib29sZWFuXG4gICAqICkgPT4geyBjbGFzc05hbWU/OiBzdHJpbmcsIHN0eWxlPzogT2JqZWN0IH1cbiAgICogYGBgXG4gICAqL1xuICBldmVudFByb3BHZXR0ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBPcHRpb25hbGx5IHByb3ZpZGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JqZWN0IG9mIGNsYXNzTmFtZSBvciBzdHlsZSBwcm9wc1xuICAgKiB0byBiZSBhcHBsaWVkIHRvIHRoZSB0aW1lLXNsb3Qgbm9kZS4gQ2F1dGlvbiEgU3R5bGVzIHRoYXQgY2hhbmdlIGxheW91dCBvclxuICAgKiBwb3NpdGlvbiBtYXkgYnJlYWsgdGhlIGNhbGVuZGFyIGluIHVuZXhwZWN0ZWQgd2F5cy5cbiAgICpcbiAgICogYGBganNcbiAgICogKGRhdGU6IERhdGUsIHJlc291cmNlSWQ6IChudW1iZXJ8c3RyaW5nKSkgPT4geyBjbGFzc05hbWU/OiBzdHJpbmcsIHN0eWxlPzogT2JqZWN0IH1cbiAgICogYGBgXG4gICAqL1xuICBzbG90UHJvcEdldHRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgcHJvdmlkZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBvYmplY3Qgb2YgcHJvcHMgdG8gYmUgYXBwbGllZFxuICAgKiB0byB0aGUgdGltZS1zbG90IGdyb3VwIG5vZGUuIFVzZWZ1bCB0byBkeW5hbWljYWxseSBjaGFuZ2UgdGhlIHNpemluZyBvZiB0aW1lIG5vZGVzLlxuICAgKiBgYGBqc1xuICAgKiAoKSA9PiB7IHN0eWxlPzogT2JqZWN0IH1cbiAgICogYGBgXG4gICAqL1xuICBzbG90R3JvdXBQcm9wR2V0dGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBwcm92aWRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIG9iamVjdCBvZiBjbGFzc05hbWUgb3Igc3R5bGUgcHJvcHNcbiAgICogdG8gYmUgYXBwbGllZCB0byB0aGUgdGhlIGRheSBiYWNrZ3JvdW5kLiBDYXV0aW9uISBTdHlsZXMgdGhhdCBjaGFuZ2UgbGF5b3V0IG9yXG4gICAqIHBvc2l0aW9uIG1heSBicmVhayB0aGUgY2FsZW5kYXIgaW4gdW5leHBlY3RlZCB3YXlzLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAoZGF0ZTogRGF0ZSkgPT4geyBjbGFzc05hbWU/OiBzdHJpbmcsIHN0eWxlPzogT2JqZWN0IH1cbiAgICogYGBgXG4gICAqL1xuICBkYXlQcm9wR2V0dGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogU3VwcG9ydCB0byBzaG93IG11bHRpLWRheSBldmVudHMgd2l0aCBzcGVjaWZpYyBzdGFydCBhbmQgZW5kIHRpbWVzIGluIHRoZVxuICAgKiBtYWluIHRpbWUgZ3JpZCAocmF0aGVyIHRoYW4gaW4gdGhlIGFsbCBkYXkgaGVhZGVyKS5cbiAgICpcbiAgICogKipOb3RlOiBUaGlzIG1heSBjYXVzZSBjYWxlbmRhcnMgd2l0aCBzZXZlcmFsIGV2ZW50cyB0byBsb29rIHZlcnkgYnVzeSBpblxuICAgKiB0aGUgd2VlayBhbmQgZGF5IHZpZXdzLioqXG4gICAqL1xuICBzaG93TXVsdGlEYXlUaW1lczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENvbnN0cmFpbnMgdGhlIG1pbmltdW0gX3RpbWVfIG9mIHRoZSBEYXkgYW5kIFdlZWsgdmlld3MuXG4gICAqL1xuICBtaW46IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuXG4gIC8qKlxuICAgKiBDb25zdHJhaW5zIHRoZSBtYXhpbXVtIF90aW1lXyBvZiB0aGUgRGF5IGFuZCBXZWVrIHZpZXdzLlxuICAgKi9cbiAgbWF4OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBob3cgZmFyIGRvd24gdGhlIHNjcm9sbCBwYW5lIGlzIGluaXRpYWxseSBzY3JvbGxlZCBkb3duLlxuICAgKi9cbiAgc2Nyb2xsVG9UaW1lOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcblxuICAvKipcbiAgICogU3BlY2lmeSBhIHNwZWNpZmljIGN1bHR1cmUgY29kZSBmb3IgdGhlIENhbGVuZGFyLlxuICAgKlxuICAgKiAqKk5vdGU6IGl0J3MgZ2VuZXJhbGx5IGJldHRlciB0byBoYW5kbGUgdGhpcyBnbG9iYWxseSB2aWEgeW91ciBpMThuIGxpYnJhcnkuKipcbiAgICovXG4gIGN1bHR1cmU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIExvY2FsaXplciBzcGVjaWZpYyBmb3JtYXRzLCB0ZWxsIHRoZSBDYWxlbmRhciBob3cgdG8gZm9ybWF0IGFuZCBkaXNwbGF5IGRhdGVzLlxuICAgKlxuICAgKiBgZm9ybWF0YCB0eXBlcyBhcmUgZGVwZW5kZW50IG9uIHRoZSBjb25maWd1cmVkIGxvY2FsaXplcjsgTW9tZW50LCBMdXhvbiBhbmQgR2xvYmFsaXplXG4gICAqIGFjY2VwdCBzdHJpbmdzIG9mIHRva2VucyBhY2NvcmRpbmcgdG8gdGhlaXIgb3duIHNwZWNpZmljYXRpb24sIHN1Y2ggYXM6IGAnREQgbW0geXl5eSdgLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogbGV0IGZvcm1hdHMgPSB7XG4gICAqICAgZGF0ZUZvcm1hdDogJ2RkJyxcbiAgICpcbiAgICogICBkYXlGb3JtYXQ6IChkYXRlLCAsIGxvY2FsaXplcikgPT5cbiAgICogICAgIGxvY2FsaXplci5mb3JtYXQoZGF0ZSwgJ0RERCcsIGN1bHR1cmUpLFxuICAgKlxuICAgKiAgIGRheVJhbmdlSGVhZGVyRm9ybWF0OiAoeyBzdGFydCwgZW5kIH0sIGN1bHR1cmUsIGxvY2FsaXplcikgPT5cbiAgICogICAgIGxvY2FsaXplci5mb3JtYXQoc3RhcnQsIHsgZGF0ZTogJ3Nob3J0JyB9LCBjdWx0dXJlKSArICcg4oCTICcgK1xuICAgKiAgICAgbG9jYWxpemVyLmZvcm1hdChlbmQsIHsgZGF0ZTogJ3Nob3J0JyB9LCBjdWx0dXJlKVxuICAgKiB9XG4gICAqXG4gICAqIDxDYWxlbmRhciBmb3JtYXRzPXtmb3JtYXRzfSAvPlxuICAgKiBgYGBcbiAgICpcbiAgICogQWxsIGxvY2FsaXplcnMgYWNjZXB0IGEgZnVuY3Rpb24gb2ZcbiAgICogdGhlIGZvcm0gYChkYXRlOiBEYXRlLCBjdWx0dXJlOiA/c3RyaW5nLCBsb2NhbGl6ZXI6IExvY2FsaXplcikgLT4gc3RyaW5nYFxuICAgKi9cbiAgZm9ybWF0czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAvKipcbiAgICAgKiBGb3JtYXQgZm9yIHRoZSBkYXkgb2YgdGhlIG1vbnRoIGhlYWRpbmcgaW4gdGhlIE1vbnRoIHZpZXcuXG4gICAgICogZS5nLiBcIjAxXCIsIFwiMDJcIiwgXCIwM1wiLCBldGNcbiAgICAgKi9cbiAgICBkYXRlRm9ybWF0OiBkYXRlRm9ybWF0LFxuXG4gICAgLyoqXG4gICAgICogQSBkYXkgb2YgdGhlIHdlZWsgZm9ybWF0IGZvciBXZWVrIGFuZCBEYXkgaGVhZGluZ3MsXG4gICAgICogZS5nLiBcIldlZCAwMS8wNFwiXG4gICAgICpcbiAgICAgKi9cbiAgICBkYXlGb3JtYXQ6IGRhdGVGb3JtYXQsXG5cbiAgICAvKipcbiAgICAgKiBXZWVrIGRheSBuYW1lIGZvcm1hdCBmb3IgdGhlIE1vbnRoIHdlZWsgZGF5IGhlYWRpbmdzLFxuICAgICAqIGUuZzogXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgZXRjXG4gICAgICpcbiAgICAgKi9cbiAgICB3ZWVrZGF5Rm9ybWF0OiBkYXRlRm9ybWF0LFxuXG4gICAgLyoqXG4gICAgICogVGhlIHRpbWVzdGFtcCBjZWxsIGZvcm1hdHMgaW4gV2VlayBhbmQgVGltZSB2aWV3cywgZS5nLiBcIjQ6MDAgQU1cIlxuICAgICAqL1xuICAgIHRpbWVHdXR0ZXJGb3JtYXQ6IGRhdGVGb3JtYXQsXG5cbiAgICAvKipcbiAgICAgKiBUb29sYmFyIGhlYWRlciBmb3JtYXQgZm9yIHRoZSBNb250aCB2aWV3LCBlLmcgXCIyMDE1IEFwcmlsXCJcbiAgICAgKlxuICAgICAqL1xuICAgIG1vbnRoSGVhZGVyRm9ybWF0OiBkYXRlRm9ybWF0LFxuXG4gICAgLyoqXG4gICAgICogVG9vbGJhciBoZWFkZXIgZm9ybWF0IGZvciB0aGUgV2VlayB2aWV3cywgZS5nLiBcIk1hciAyOSAtIEFwciAwNFwiXG4gICAgICovXG4gICAgZGF5UmFuZ2VIZWFkZXJGb3JtYXQ6IGRhdGVSYW5nZUZvcm1hdCxcblxuICAgIC8qKlxuICAgICAqIFRvb2xiYXIgaGVhZGVyIGZvcm1hdCBmb3IgdGhlIERheSB2aWV3LCBlLmcuIFwiV2VkbmVzZGF5IEFwciAwMVwiXG4gICAgICovXG4gICAgZGF5SGVhZGVyRm9ybWF0OiBkYXRlRm9ybWF0LFxuXG4gICAgLyoqXG4gICAgICogVG9vbGJhciBoZWFkZXIgZm9ybWF0IGZvciB0aGUgQWdlbmRhIHZpZXcsIGUuZy4gXCI0LzEvMjAxNSDigJMgNS8xLzIwMTVcIlxuICAgICAqL1xuICAgIGFnZW5kYUhlYWRlckZvcm1hdDogZGF0ZVJhbmdlRm9ybWF0LFxuXG4gICAgLyoqXG4gICAgICogQSB0aW1lIHJhbmdlIGZvcm1hdCBmb3Igc2VsZWN0aW5nIHRpbWUgc2xvdHMsIGUuZyBcIjg6MDBhbSDigJMgMjowMHBtXCJcbiAgICAgKi9cbiAgICBzZWxlY3RSYW5nZUZvcm1hdDogZGF0ZVJhbmdlRm9ybWF0LFxuICAgIGFnZW5kYURhdGVGb3JtYXQ6IGRhdGVGb3JtYXQsXG4gICAgYWdlbmRhVGltZUZvcm1hdDogZGF0ZUZvcm1hdCxcbiAgICBhZ2VuZGFUaW1lUmFuZ2VGb3JtYXQ6IGRhdGVSYW5nZUZvcm1hdCxcblxuICAgIC8qKlxuICAgICAqIFRpbWUgcmFuZ2UgZGlzcGxheWVkIG9uIGV2ZW50cy5cbiAgICAgKi9cbiAgICBldmVudFRpbWVSYW5nZUZvcm1hdDogZGF0ZVJhbmdlRm9ybWF0LFxuXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgZXZlbnQgdGltZSByYW5nZSBmb3IgZXZlbnRzIHRoYXQgY29udGludWUgb250byBhbm90aGVyIGRheVxuICAgICAqL1xuICAgIGV2ZW50VGltZVJhbmdlU3RhcnRGb3JtYXQ6IGRhdGVGb3JtYXQsXG5cbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBldmVudCB0aW1lIHJhbmdlIGZvciBldmVudHMgdGhhdCBjb250aW51ZSBmcm9tIGFub3RoZXIgZGF5XG4gICAgICovXG4gICAgZXZlbnRUaW1lUmFuZ2VFbmRGb3JtYXQ6IGRhdGVGb3JtYXRcbiAgfSksXG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSBob3cgZGlmZmVyZW50IHNlY3Rpb25zIG9mIHRoZSBjYWxlbmRhciByZW5kZXIgYnkgcHJvdmlkaW5nIGN1c3RvbSBDb21wb25lbnRzLlxuICAgKiBJbiBwYXJ0aWN1bGFyIHRoZSBgRXZlbnRgIGNvbXBvbmVudCBjYW4gYmUgc3BlY2lmaWVkIGZvciB0aGUgZW50aXJlIGNhbGVuZGFyLCBvciB5b3UgY2FuXG4gICAqIHByb3ZpZGUgYW4gaW5kaXZpZHVhbCBjb21wb25lbnQgZm9yIGVhY2ggdmlldyB0eXBlLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogbGV0IGNvbXBvbmVudHMgPSB7XG4gICAqICAgZXZlbnQ6IE15RXZlbnQsIC8vIHVzZWQgYnkgZWFjaCB2aWV3IChNb250aCwgRGF5LCBXZWVrKVxuICAgKiAgIGV2ZW50V3JhcHBlcjogTXlFdmVudFdyYXBwZXIsXG4gICAqICAgZXZlbnRDb250YWluZXJXcmFwcGVyOiBNeUV2ZW50Q29udGFpbmVyV3JhcHBlcixcbiAgICogICBkYXRlQ2VsbFdyYXBwZXI6IE15RGF0ZUNlbGxXcmFwcGVyLFxuICAgKiAgIHRpbWVTbG90V3JhcHBlcjogTXlUaW1lU2xvdFdyYXBwZXIsXG4gICAqICAgdGltZUd1dHRlckhlYWRlcjogTXlUaW1lR3V0dGVyV3JhcHBlcixcbiAgICogICByZXNvdXJjZUhlYWRlcjogTXlSZXNvdXJjZUhlYWRlcixcbiAgICogICB0b29sYmFyOiBNeVRvb2xiYXIsXG4gICAqICAgYWdlbmRhOiB7XG4gICAqICAgXHQgZXZlbnQ6IE15QWdlbmRhRXZlbnQsIC8vIHdpdGggdGhlIGFnZW5kYSB2aWV3IHVzZSBhIGRpZmZlcmVudCBjb21wb25lbnQgdG8gcmVuZGVyIGV2ZW50c1xuICAgKiAgICAgdGltZTogTXlBZ2VuZGFUaW1lLFxuICAgKiAgICAgZGF0ZTogTXlBZ2VuZGFEYXRlLFxuICAgKiAgIH0sXG4gICAqICAgZGF5OiB7XG4gICAqICAgICBoZWFkZXI6IE15RGF5SGVhZGVyLFxuICAgKiAgICAgZXZlbnQ6IE15RGF5RXZlbnQsXG4gICAqICAgfSxcbiAgICogICB3ZWVrOiB7XG4gICAqICAgICBoZWFkZXI6IE15V2Vla0hlYWRlcixcbiAgICogICAgIGV2ZW50OiBNeVdlZWtFdmVudCxcbiAgICogICB9LFxuICAgKiAgIG1vbnRoOiB7XG4gICAqICAgICBoZWFkZXI6IE15TW9udGhIZWFkZXIsXG4gICAqICAgICBkYXRlSGVhZGVyOiBNeU1vbnRoRGF0ZUhlYWRlcixcbiAgICogICAgIGV2ZW50OiBNeU1vbnRoRXZlbnQsXG4gICAqICAgfVxuICAgKiB9XG4gICAqIDxDYWxlbmRhciBjb21wb25lbnRzPXtjb21wb25lbnRzfSAvPlxuICAgKiBgYGBcbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZXZlbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBldmVudFdyYXBwZXI6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBldmVudENvbnRhaW5lcldyYXBwZXI6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBkYXRlQ2VsbFdyYXBwZXI6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBkYXlDb2x1bW5XcmFwcGVyOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgdGltZVNsb3RXcmFwcGVyOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgdGltZUd1dHRlckhlYWRlcjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJlc291cmNlSGVhZGVyOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgdG9vbGJhcjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIGFnZW5kYTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGRhdGU6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIHRpbWU6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIGV2ZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgICB9KSxcbiAgICBkYXk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBoZWFkZXI6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIGV2ZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgICB9KSxcbiAgICB3ZWVrOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgaGVhZGVyOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgICBldmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gICAgfSksXG4gICAgbW9udGg6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBoZWFkZXI6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIGRhdGVIZWFkZXI6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIGV2ZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgICB9KVxuICB9KSxcblxuICAvKipcbiAgICogU3RyaW5nIG1lc3NhZ2VzIHVzZWQgdGhyb3VnaG91dCB0aGUgY29tcG9uZW50LCBvdmVycmlkZSB0byBwcm92aWRlIGxvY2FsaXphdGlvbnNcbiAgICpcbiAgICogYGBganN4XG4gICAqIGNvbnN0IG1lc3NhZ2VzID0ge1xuICAgKiAgIGRhdGU6ICdEYXRlJyxcbiAgICogICB0aW1lOiAnVGltZScsXG4gICAqICAgZXZlbnQ6ICdFdmVudCcsXG4gICAqICAgYWxsRGF5OiAnQWxsIERheScsXG4gICAqICAgd2VlazogJ1dlZWsnLFxuICAgKiAgIHdvcmtfd2VlazogJ1dvcmsgV2VlaycsXG4gICAqICAgZGF5OiAnRGF5JyxcbiAgICogICBtb250aDogJ01vbnRoJyxcbiAgICogICBwcmV2aW91czogJ0JhY2snLFxuICAgKiAgIG5leHQ6ICdOZXh0JyxcbiAgICogICB5ZXN0ZXJkYXk6ICdZZXN0ZXJkYXknLFxuICAgKiAgIHRvbW9ycm93OiAnVG9tb3Jyb3cnLFxuICAgKiAgIHRvZGF5OiAnVG9kYXknLFxuICAgKiAgIGFnZW5kYTogJ0FnZW5kYScsXG4gICAqXG4gICAqICAgbm9FdmVudHNJblJhbmdlOiAnVGhlcmUgYXJlIG5vIGV2ZW50cyBpbiB0aGlzIHJhbmdlLicsXG4gICAqXG4gICAqICAgc2hvd01vcmU6IHRvdGFsID0+IGArJHt0b3RhbH0gbW9yZWAsXG4gICAqIH1cbiAgICpcbiAgICogPENhbGVuZGFyIG1lc3NhZ2VzPXttZXNzYWdlc30gLz5cbiAgICogYGBgXG4gICAqL1xuICBtZXNzYWdlczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhbGxEYXk6IFByb3BUeXBlcy5ub2RlLFxuICAgIHByZXZpb3VzOiBQcm9wVHlwZXMubm9kZSxcbiAgICBuZXh0OiBQcm9wVHlwZXMubm9kZSxcbiAgICB0b2RheTogUHJvcFR5cGVzLm5vZGUsXG4gICAgbW9udGg6IFByb3BUeXBlcy5ub2RlLFxuICAgIHdlZWs6IFByb3BUeXBlcy5ub2RlLFxuICAgIGRheTogUHJvcFR5cGVzLm5vZGUsXG4gICAgYWdlbmRhOiBQcm9wVHlwZXMubm9kZSxcbiAgICBkYXRlOiBQcm9wVHlwZXMubm9kZSxcbiAgICB0aW1lOiBQcm9wVHlwZXMubm9kZSxcbiAgICBldmVudDogUHJvcFR5cGVzLm5vZGUsXG4gICAgbm9FdmVudHNJblJhbmdlOiBQcm9wVHlwZXMubm9kZSxcbiAgICBzaG93TW9yZTogUHJvcFR5cGVzLmZ1bmNcbiAgfSksXG5cbiAgLyoqXG4gICAqIEEgZGF5IGV2ZW50IGxheW91dChhcnJhbmdlbWVudCkgYWxnb3JpdGhtLlxuICAgKlxuICAgKiBgb3ZlcmxhcGAgYWxsb3dzIGV2ZW50cyB0byBiZSBvdmVybGFwcGVkLlxuICAgKlxuICAgKiBgbm8tb3ZlcmxhcGAgcmVzaXplcyBldmVudHMgdG8gYXZvaWQgb3ZlcmxhcC5cbiAgICpcbiAgICogb3IgY3VzdG9tIGBGdW5jdGlvbihldmVudHMsIG1pbmltdW1TdGFydERpZmZlcmVuY2UsIHNsb3RNZXRyaWNzLCBhY2Nlc3NvcnMpYFxuICAgKi9cbiAgZGF5TGF5b3V0QWxnb3JpdGhtOiBEYXlMYXlvdXRBbGdvcml0aG1Qcm9wVHlwZVxufSA6IHt9O1xudmFyIENhbGVuZGFyJDEgPSB1bmNvbnRyb2xsYWJsZShDYWxlbmRhciwge1xuICB2aWV3OiAnb25WaWV3JyxcbiAgZGF0ZTogJ29uTmF2aWdhdGUnLFxuICBzZWxlY3RlZDogJ29uU2VsZWN0RXZlbnQnXG59KTtcblxudmFyIHdlZWtSYW5nZUZvcm1hdCA9IGZ1bmN0aW9uIHdlZWtSYW5nZUZvcm1hdChfcmVmLCBjdWx0dXJlLCBsb2NhbCkge1xuICB2YXIgc3RhcnQgPSBfcmVmLnN0YXJ0LFxuICAgICAgZW5kID0gX3JlZi5lbmQ7XG4gIHJldHVybiBsb2NhbC5mb3JtYXQoc3RhcnQsICdNTU1NIEREJywgY3VsdHVyZSkgKyAnIOKAkyAnICsgLy8gdXBkYXRlZCB0byB1c2UgdGhpcyBsb2NhbGl6ZXIgJ2VxKCknIG1ldGhvZFxuICBsb2NhbC5mb3JtYXQoZW5kLCBsb2NhbC5lcShzdGFydCwgZW5kLCAnbW9udGgnKSA/ICdERCcgOiAnTU1NTSBERCcsIGN1bHR1cmUpO1xufTtcblxudmFyIGRhdGVSYW5nZUZvcm1hdCQxID0gZnVuY3Rpb24gZGF0ZVJhbmdlRm9ybWF0KF9yZWYyLCBjdWx0dXJlLCBsb2NhbCkge1xuICB2YXIgc3RhcnQgPSBfcmVmMi5zdGFydCxcbiAgICAgIGVuZCA9IF9yZWYyLmVuZDtcbiAgcmV0dXJuIGxvY2FsLmZvcm1hdChzdGFydCwgJ0wnLCBjdWx0dXJlKSArICcg4oCTICcgKyBsb2NhbC5mb3JtYXQoZW5kLCAnTCcsIGN1bHR1cmUpO1xufTtcblxudmFyIHRpbWVSYW5nZUZvcm1hdCA9IGZ1bmN0aW9uIHRpbWVSYW5nZUZvcm1hdChfcmVmMywgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIHN0YXJ0ID0gX3JlZjMuc3RhcnQsXG4gICAgICBlbmQgPSBfcmVmMy5lbmQ7XG4gIHJldHVybiBsb2NhbC5mb3JtYXQoc3RhcnQsICdMVCcsIGN1bHR1cmUpICsgJyDigJMgJyArIGxvY2FsLmZvcm1hdChlbmQsICdMVCcsIGN1bHR1cmUpO1xufTtcblxudmFyIHRpbWVSYW5nZVN0YXJ0Rm9ybWF0ID0gZnVuY3Rpb24gdGltZVJhbmdlU3RhcnRGb3JtYXQoX3JlZjQsIGN1bHR1cmUsIGxvY2FsKSB7XG4gIHZhciBzdGFydCA9IF9yZWY0LnN0YXJ0O1xuICByZXR1cm4gbG9jYWwuZm9ybWF0KHN0YXJ0LCAnTFQnLCBjdWx0dXJlKSArICcg4oCTICc7XG59O1xuXG52YXIgdGltZVJhbmdlRW5kRm9ybWF0ID0gZnVuY3Rpb24gdGltZVJhbmdlRW5kRm9ybWF0KF9yZWY1LCBjdWx0dXJlLCBsb2NhbCkge1xuICB2YXIgZW5kID0gX3JlZjUuZW5kO1xuICByZXR1cm4gJyDigJMgJyArIGxvY2FsLmZvcm1hdChlbmQsICdMVCcsIGN1bHR1cmUpO1xufTtcblxudmFyIGZvcm1hdHMgPSB7XG4gIGRhdGVGb3JtYXQ6ICdERCcsXG4gIGRheUZvcm1hdDogJ0REIGRkZCcsXG4gIHdlZWtkYXlGb3JtYXQ6ICdkZGQnLFxuICBzZWxlY3RSYW5nZUZvcm1hdDogdGltZVJhbmdlRm9ybWF0LFxuICBldmVudFRpbWVSYW5nZUZvcm1hdDogdGltZVJhbmdlRm9ybWF0LFxuICBldmVudFRpbWVSYW5nZVN0YXJ0Rm9ybWF0OiB0aW1lUmFuZ2VTdGFydEZvcm1hdCxcbiAgZXZlbnRUaW1lUmFuZ2VFbmRGb3JtYXQ6IHRpbWVSYW5nZUVuZEZvcm1hdCxcbiAgdGltZUd1dHRlckZvcm1hdDogJ0xUJyxcbiAgbW9udGhIZWFkZXJGb3JtYXQ6ICdNTU1NIFlZWVknLFxuICBkYXlIZWFkZXJGb3JtYXQ6ICdkZGRkIE1NTSBERCcsXG4gIGRheVJhbmdlSGVhZGVyRm9ybWF0OiB3ZWVrUmFuZ2VGb3JtYXQsXG4gIGFnZW5kYUhlYWRlckZvcm1hdDogZGF0ZVJhbmdlRm9ybWF0JDEsXG4gIGFnZW5kYURhdGVGb3JtYXQ6ICdkZGQgTU1NIEREJyxcbiAgYWdlbmRhVGltZUZvcm1hdDogJ0xUJyxcbiAgYWdlbmRhVGltZVJhbmdlRm9ybWF0OiB0aW1lUmFuZ2VGb3JtYXRcbn07XG5cbmZ1bmN0aW9uIGZpeFVuaXQodW5pdCkge1xuICB2YXIgZGF0ZVBhcnQgPSB1bml0ID8gdW5pdC50b0xvd2VyQ2FzZSgpIDogdW5pdDtcblxuICBpZiAoZGF0ZVBhcnQgPT09ICdGdWxsWWVhcicpIHtcbiAgICBkYXRlUGFydCA9ICd5ZWFyJztcbiAgfSBlbHNlIGlmICghZGF0ZVBhcnQpIHtcbiAgICBkYXRlUGFydCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBkYXRlUGFydDtcbn1cblxuZnVuY3Rpb24gbW9tZW50IChtb21lbnQpIHtcbiAgdmFyIGxvY2FsZSA9IGZ1bmN0aW9uIGxvY2FsZShtLCBjKSB7XG4gICAgcmV0dXJuIGMgPyBtLmxvY2FsZShjKSA6IG07XG4gIH07XG4gIC8qKiogQkVHSU4gbG9jYWxpemVkIGRhdGUgYXJpdGhtZXRpYyBtZXRob2RzIHdpdGggbW9tZW50ICoqKi9cblxuXG4gIGZ1bmN0aW9uIGRlZmluZUNvbXBhcmF0b3JzKGEsIGIsIHVuaXQpIHtcbiAgICB2YXIgZGF0ZVBhcnQgPSBmaXhVbml0KHVuaXQpO1xuICAgIHZhciBkdEEgPSBkYXRlUGFydCA/IG1vbWVudChhKS5zdGFydE9mKGRhdGVQYXJ0KSA6IG1vbWVudChhKTtcbiAgICB2YXIgZHRCID0gZGF0ZVBhcnQgPyBtb21lbnQoYikuc3RhcnRPZihkYXRlUGFydCkgOiBtb21lbnQoYik7XG4gICAgcmV0dXJuIFtkdEEsIGR0QiwgZGF0ZVBhcnRdO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnRPZihkYXRlLCB1bml0KSB7XG4gICAgaWYgKGRhdGUgPT09IHZvaWQgMCkge1xuICAgICAgZGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGRhdGVQYXJ0ID0gZml4VW5pdCh1bml0KTtcblxuICAgIGlmIChkYXRlUGFydCkge1xuICAgICAgcmV0dXJuIG1vbWVudChkYXRlKS5zdGFydE9mKGRhdGVQYXJ0KS50b0RhdGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9tZW50KGRhdGUpLnRvRGF0ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5kT2YoZGF0ZSwgdW5pdCkge1xuICAgIGlmIChkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIGRhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBkYXRlUGFydCA9IGZpeFVuaXQodW5pdCk7XG5cbiAgICBpZiAoZGF0ZVBhcnQpIHtcbiAgICAgIHJldHVybiBtb21lbnQoZGF0ZSkuZW5kT2YoZGF0ZVBhcnQpLnRvRGF0ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBtb21lbnQoZGF0ZSkudG9EYXRlKCk7XG4gIH0gLy8gbW9tZW50IGNvbXBhcmlzb24gb3BlcmF0aW9ucyAqYWx3YXlzKiBjb252ZXJ0IGJvdGggc2lkZXMgdG8gbW9tZW50IG9iamVjdHNcbiAgLy8gcHJpb3IgdG8gcnVubmluZyB0aGUgY29tcGFyaXNvbnNcblxuXG4gIGZ1bmN0aW9uIGVxKGEsIGIsIHVuaXQpIHtcbiAgICB2YXIgX2RlZmluZUNvbXBhcmF0b3JzID0gZGVmaW5lQ29tcGFyYXRvcnMoYSwgYiwgdW5pdCksXG4gICAgICAgIGR0QSA9IF9kZWZpbmVDb21wYXJhdG9yc1swXSxcbiAgICAgICAgZHRCID0gX2RlZmluZUNvbXBhcmF0b3JzWzFdLFxuICAgICAgICBkYXRlUGFydCA9IF9kZWZpbmVDb21wYXJhdG9yc1syXTtcblxuICAgIHJldHVybiBkdEEuaXNTYW1lKGR0QiwgZGF0ZVBhcnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmVxKGEsIGIsIHVuaXQpIHtcbiAgICByZXR1cm4gIWVxKGEsIGIsIHVuaXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ3QoYSwgYiwgdW5pdCkge1xuICAgIHZhciBfZGVmaW5lQ29tcGFyYXRvcnMyID0gZGVmaW5lQ29tcGFyYXRvcnMoYSwgYiwgdW5pdCksXG4gICAgICAgIGR0QSA9IF9kZWZpbmVDb21wYXJhdG9yczJbMF0sXG4gICAgICAgIGR0QiA9IF9kZWZpbmVDb21wYXJhdG9yczJbMV0sXG4gICAgICAgIGRhdGVQYXJ0ID0gX2RlZmluZUNvbXBhcmF0b3JzMlsyXTtcblxuICAgIHJldHVybiBkdEEuaXNBZnRlcihkdEIsIGRhdGVQYXJ0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGx0KGEsIGIsIHVuaXQpIHtcbiAgICB2YXIgX2RlZmluZUNvbXBhcmF0b3JzMyA9IGRlZmluZUNvbXBhcmF0b3JzKGEsIGIsIHVuaXQpLFxuICAgICAgICBkdEEgPSBfZGVmaW5lQ29tcGFyYXRvcnMzWzBdLFxuICAgICAgICBkdEIgPSBfZGVmaW5lQ29tcGFyYXRvcnMzWzFdLFxuICAgICAgICBkYXRlUGFydCA9IF9kZWZpbmVDb21wYXJhdG9yczNbMl07XG5cbiAgICByZXR1cm4gZHRBLmlzQmVmb3JlKGR0QiwgZGF0ZVBhcnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ3RlKGEsIGIsIHVuaXQpIHtcbiAgICB2YXIgX2RlZmluZUNvbXBhcmF0b3JzNCA9IGRlZmluZUNvbXBhcmF0b3JzKGEsIGIsIHVuaXQpLFxuICAgICAgICBkdEEgPSBfZGVmaW5lQ29tcGFyYXRvcnM0WzBdLFxuICAgICAgICBkdEIgPSBfZGVmaW5lQ29tcGFyYXRvcnM0WzFdLFxuICAgICAgICBkYXRlUGFydCA9IF9kZWZpbmVDb21wYXJhdG9yczRbMl07XG5cbiAgICByZXR1cm4gZHRBLmlzU2FtZU9yQmVmb3JlKGR0QiwgZGF0ZVBhcnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbHRlKGEsIGIsIHVuaXQpIHtcbiAgICB2YXIgX2RlZmluZUNvbXBhcmF0b3JzNSA9IGRlZmluZUNvbXBhcmF0b3JzKGEsIGIsIHVuaXQpLFxuICAgICAgICBkdEEgPSBfZGVmaW5lQ29tcGFyYXRvcnM1WzBdLFxuICAgICAgICBkdEIgPSBfZGVmaW5lQ29tcGFyYXRvcnM1WzFdLFxuICAgICAgICBkYXRlUGFydCA9IF9kZWZpbmVDb21wYXJhdG9yczVbMl07XG5cbiAgICByZXR1cm4gZHRBLmlzU2FtZU9yQmVmb3JlKGR0QiwgZGF0ZVBhcnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5SYW5nZShkYXksIG1pbiwgbWF4LCB1bml0KSB7XG4gICAgaWYgKHVuaXQgPT09IHZvaWQgMCkge1xuICAgICAgdW5pdCA9ICdkYXknO1xuICAgIH1cblxuICAgIHZhciBkYXRlUGFydCA9IGZpeFVuaXQodW5pdCk7XG4gICAgdmFyIG1EYXkgPSBtb21lbnQoZGF5KTtcbiAgICB2YXIgbU1pbiA9IG1vbWVudChtaW4pO1xuICAgIHZhciBtTWF4ID0gbW9tZW50KG1heCk7XG4gICAgcmV0dXJuIG1EYXkuaXNCZXR3ZWVuKG1NaW4sIG1NYXgsIGRhdGVQYXJ0LCAnW10nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1pbihkYXRlQSwgZGF0ZUIpIHtcbiAgICB2YXIgZHRBID0gbW9tZW50KGRhdGVBKTtcbiAgICB2YXIgZHRCID0gbW9tZW50KGRhdGVCKTtcbiAgICB2YXIgbWluRHQgPSBtb21lbnQubWluKGR0QSwgZHRCKTtcbiAgICByZXR1cm4gbWluRHQudG9EYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXgoZGF0ZUEsIGRhdGVCKSB7XG4gICAgdmFyIGR0QSA9IG1vbWVudChkYXRlQSk7XG4gICAgdmFyIGR0QiA9IG1vbWVudChkYXRlQik7XG4gICAgdmFyIG1heER0ID0gbW9tZW50Lm1heChkdEEsIGR0Qik7XG4gICAgcmV0dXJuIG1heER0LnRvRGF0ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2UoZGF0ZSwgdGltZSkge1xuICAgIGlmICghZGF0ZSAmJiAhdGltZSkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHRtID0gbW9tZW50KHRpbWUpLmZvcm1hdCgnSEg6bW06c3MnKTtcbiAgICB2YXIgZHQgPSBtb21lbnQoZGF0ZSkuc3RhcnRPZignZGF5JykuZm9ybWF0KCdNTS9ERC9ZWVlZJyk7IC8vIFdlIGRvIGl0IHRoaXMgd2F5IHRvIGF2b2lkIGlzc3VlcyB3aGVuIHRpbWV6b25lIHN3aXRjaGluZ1xuXG4gICAgcmV0dXJuIG1vbWVudChkdCArIFwiIFwiICsgdG0sICdNTS9ERC9ZWVlZIEhIOm1tOnNzJykudG9EYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGQoZGF0ZSwgYWRkZXIsIHVuaXQpIHtcbiAgICB2YXIgZGF0ZVBhcnQgPSBmaXhVbml0KHVuaXQpO1xuICAgIHJldHVybiBtb21lbnQoZGF0ZSkuYWRkKGFkZGVyLCBkYXRlUGFydCkudG9EYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiByYW5nZShzdGFydCwgZW5kLCB1bml0KSB7XG4gICAgaWYgKHVuaXQgPT09IHZvaWQgMCkge1xuICAgICAgdW5pdCA9ICdkYXknO1xuICAgIH1cblxuICAgIHZhciBkYXRlUGFydCA9IGZpeFVuaXQodW5pdCk7IC8vIGJlY2F1c2UgdGhlIGFkZCBtZXRob2Qgd2lsbCBwdXQgdGhlc2UgaW4gdHosIHdlIGhhdmUgdG8gc3RhcnQgdGhhdCB3YXlcblxuICAgIHZhciBjdXJyZW50ID0gbW9tZW50KHN0YXJ0KS50b0RhdGUoKTtcbiAgICB2YXIgZGF5cyA9IFtdO1xuXG4gICAgd2hpbGUgKGx0ZShjdXJyZW50LCBlbmQpKSB7XG4gICAgICBkYXlzLnB1c2goY3VycmVudCk7XG4gICAgICBjdXJyZW50ID0gYWRkKGN1cnJlbnQsIDEsIGRhdGVQYXJ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlaWwoZGF0ZSwgdW5pdCkge1xuICAgIHZhciBkYXRlUGFydCA9IGZpeFVuaXQodW5pdCk7XG4gICAgdmFyIGZsb29yID0gc3RhcnRPZihkYXRlLCBkYXRlUGFydCk7XG4gICAgcmV0dXJuIGVxKGZsb29yLCBkYXRlKSA/IGZsb29yIDogYWRkKGZsb29yLCAxLCBkYXRlUGFydCk7XG4gIH1cblxuICBmdW5jdGlvbiBkaWZmKGEsIGIsIHVuaXQpIHtcbiAgICBpZiAodW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgICB1bml0ID0gJ2RheSc7XG4gICAgfVxuXG4gICAgdmFyIGRhdGVQYXJ0ID0gZml4VW5pdCh1bml0KTsgLy8gZG9uJ3QgdXNlICdkZWZpbmVDb21wYXJhdG9ycycgaGVyZSwgYXMgd2UgZG9uJ3Qgd2FudCB0byBtdXRhdGUgdGhlIHZhbHVlc1xuXG4gICAgdmFyIGR0QSA9IG1vbWVudChhKTtcbiAgICB2YXIgZHRCID0gbW9tZW50KGIpO1xuICAgIHJldHVybiBkdEIuZGlmZihkdEEsIGRhdGVQYXJ0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1pbnV0ZXMoZGF0ZSkge1xuICAgIHZhciBkdCA9IG1vbWVudChkYXRlKTtcbiAgICByZXR1cm4gZHQubWludXRlcygpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlyc3RPZldlZWsoY3VsdHVyZSkge1xuICAgIHZhciBkYXRhID0gY3VsdHVyZSA/IG1vbWVudC5sb2NhbGVEYXRhKGN1bHR1cmUpIDogbW9tZW50LmxvY2FsZURhdGEoKTtcbiAgICByZXR1cm4gZGF0YSA/IGRhdGEuZmlyc3REYXlPZldlZWsoKSA6IDA7XG4gIH1cblxuICBmdW5jdGlvbiBmaXJzdFZpc2libGVEYXkoZGF0ZSkge1xuICAgIHJldHVybiBtb21lbnQoZGF0ZSkuc3RhcnRPZignbW9udGgnKS5zdGFydE9mKCd3ZWVrJykudG9EYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBsYXN0VmlzaWJsZURheShkYXRlKSB7XG4gICAgcmV0dXJuIG1vbWVudChkYXRlKS5lbmRPZignbW9udGgnKS5lbmRPZignd2VlaycpLnRvRGF0ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdmlzaWJsZURheXMoZGF0ZSkge1xuICAgIHZhciBjdXJyZW50ID0gZmlyc3RWaXNpYmxlRGF5KGRhdGUpO1xuICAgIHZhciBsYXN0ID0gbGFzdFZpc2libGVEYXkoZGF0ZSk7XG4gICAgdmFyIGRheXMgPSBbXTtcblxuICAgIHdoaWxlIChsdGUoY3VycmVudCwgbGFzdCkpIHtcbiAgICAgIGRheXMucHVzaChjdXJyZW50KTtcbiAgICAgIGN1cnJlbnQgPSBhZGQoY3VycmVudCwgMSwgJ2QnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF5cztcbiAgfVxuICAvKioqIEVORCBsb2NhbGl6ZWQgZGF0ZSBhcml0aG1ldGljIG1ldGhvZHMgd2l0aCBtb21lbnQgKioqL1xuXG4gIC8qKlxuICAgKiBNb3ZlZCBmcm9tIFRpbWVTbG90cy5qcywgdGhpcyBtZXRob2Qgb3ZlcnJpZGVzIHRoZSBtZXRob2Qgb2YgdGhlIHNhbWUgbmFtZVxuICAgKiBpbiB0aGUgbG9jYWxpemVyLmpzLCB1c2luZyBtb21lbnQgdG8gY29uc3RydWN0IHRoZSBqcyBEYXRlXG4gICAqIEBwYXJhbSB7RGF0ZX0gZHQgLSBkYXRlIHRvIHN0YXJ0IHdpdGhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG1pbnV0ZXNGcm9tTWlkbmlnaHRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJucyB7RGF0ZX1cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTbG90RGF0ZShkdCwgbWludXRlc0Zyb21NaWRuaWdodCwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIG1vbWVudChkdCkuc3RhcnRPZignZGF5JykubWludXRlKG1pbnV0ZXNGcm9tTWlkbmlnaHQgKyBvZmZzZXQpLnRvRGF0ZSgpO1xuICB9IC8vIG1vbWVudCB3aWxsIGF1dG9tYXRpY2FsbHkgaGFuZGxlIERTVCBkaWZmZXJlbmNlcyBpbiBpdCdzIGNhbGN1bGF0aW9uc1xuXG5cbiAgZnVuY3Rpb24gZ2V0VG90YWxNaW4oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBkaWZmKHN0YXJ0LCBlbmQsICdtaW51dGVzJyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNaW51dGVzRnJvbU1pZG5pZ2h0KHN0YXJ0KSB7XG4gICAgdmFyIGRheVN0YXJ0ID0gbW9tZW50KHN0YXJ0KS5zdGFydE9mKCdkYXknKTtcbiAgICB2YXIgZGF5ID0gbW9tZW50KHN0YXJ0KTtcbiAgICByZXR1cm4gZGF5LmRpZmYoZGF5U3RhcnQsICdtaW51dGVzJyk7XG4gIH0gLy8gVGhlc2UgdHdvIGFyZSB1c2VkIGJ5IERhdGVTbG90TWV0cmljc1xuXG5cbiAgZnVuY3Rpb24gY29udGludWVzUHJpb3Ioc3RhcnQsIGZpcnN0KSB7XG4gICAgdmFyIG1TdGFydCA9IG1vbWVudChzdGFydCk7XG4gICAgdmFyIG1GaXJzdCA9IG1vbWVudChmaXJzdCk7XG4gICAgcmV0dXJuIG1TdGFydC5pc0JlZm9yZShtRmlyc3QsICdkYXknKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnRpbnVlc0FmdGVyKHN0YXJ0LCBlbmQsIGxhc3QpIHtcbiAgICB2YXIgbUVuZCA9IG1vbWVudChlbmQpO1xuICAgIHZhciBtTGFzdCA9IG1vbWVudChsYXN0KTtcbiAgICByZXR1cm4gbUVuZC5pc1NhbWVPckFmdGVyKG1MYXN0LCAnbWludXRlcycpO1xuICB9IC8vIFRoZXNlIHR3byBhcmUgdXNlZCBieSBldmVudExldmVsc1xuXG5cbiAgZnVuY3Rpb24gc29ydEV2ZW50cyhfcmVmNikge1xuICAgIHZhciBfcmVmNiRldnRBID0gX3JlZjYuZXZ0QSxcbiAgICAgICAgYVN0YXJ0ID0gX3JlZjYkZXZ0QS5zdGFydCxcbiAgICAgICAgYUVuZCA9IF9yZWY2JGV2dEEuZW5kLFxuICAgICAgICBhQWxsRGF5ID0gX3JlZjYkZXZ0QS5hbGxEYXksXG4gICAgICAgIF9yZWY2JGV2dEIgPSBfcmVmNi5ldnRCLFxuICAgICAgICBiU3RhcnQgPSBfcmVmNiRldnRCLnN0YXJ0LFxuICAgICAgICBiRW5kID0gX3JlZjYkZXZ0Qi5lbmQsXG4gICAgICAgIGJBbGxEYXkgPSBfcmVmNiRldnRCLmFsbERheTtcbiAgICB2YXIgc3RhcnRTb3J0ID0gK3N0YXJ0T2YoYVN0YXJ0LCAnZGF5JykgLSArc3RhcnRPZihiU3RhcnQsICdkYXknKTtcbiAgICB2YXIgZHVyQSA9IGRpZmYoYVN0YXJ0LCBjZWlsKGFFbmQsICdkYXknKSwgJ2RheScpO1xuICAgIHZhciBkdXJCID0gZGlmZihiU3RhcnQsIGNlaWwoYkVuZCwgJ2RheScpLCAnZGF5Jyk7XG4gICAgcmV0dXJuIHN0YXJ0U29ydCB8fCAvLyBzb3J0IGJ5IHN0YXJ0IERheSBmaXJzdFxuICAgIE1hdGgubWF4KGR1ckIsIDEpIC0gTWF0aC5tYXgoZHVyQSwgMSkgfHwgLy8gZXZlbnRzIHNwYW5uaW5nIG11bHRpcGxlIGRheXMgZ28gZmlyc3RcbiAgICAhIWJBbGxEYXkgLSAhIWFBbGxEYXkgfHwgLy8gdGhlbiBhbGxEYXkgc2luZ2xlIGRheSBldmVudHNcbiAgICArYVN0YXJ0IC0gK2JTdGFydCB8fCAvLyB0aGVuIHNvcnQgYnkgc3RhcnQgdGltZSAqZG9uJ3QgbmVlZCBtb21lbnQgY29udmVyc2lvbiBoZXJlXG4gICAgK2FFbmQgLSArYkVuZCAvLyB0aGVuIHNvcnQgYnkgZW5kIHRpbWUgKmRvbid0IG5lZWQgbW9tZW50IGNvbnZlcnNpb24gaGVyZSBlaXRoZXJcbiAgICA7XG4gIH1cblxuICBmdW5jdGlvbiBpbkV2ZW50UmFuZ2UoX3JlZjcpIHtcbiAgICB2YXIgX3JlZjckZXZlbnQgPSBfcmVmNy5ldmVudCxcbiAgICAgICAgc3RhcnQgPSBfcmVmNyRldmVudC5zdGFydCxcbiAgICAgICAgZW5kID0gX3JlZjckZXZlbnQuZW5kLFxuICAgICAgICBfcmVmNyRyYW5nZSA9IF9yZWY3LnJhbmdlLFxuICAgICAgICByYW5nZVN0YXJ0ID0gX3JlZjckcmFuZ2Uuc3RhcnQsXG4gICAgICAgIHJhbmdlRW5kID0gX3JlZjckcmFuZ2UuZW5kO1xuICAgIHZhciBzdGFydE9mRGF5ID0gbW9tZW50KHN0YXJ0KS5zdGFydE9mKCdkYXknKTtcbiAgICB2YXIgZUVuZCA9IG1vbWVudChlbmQpO1xuICAgIHZhciByU3RhcnQgPSBtb21lbnQocmFuZ2VTdGFydCk7XG4gICAgdmFyIHJFbmQgPSBtb21lbnQocmFuZ2VFbmQpO1xuICAgIHZhciBzdGFydHNCZWZvcmVFbmQgPSBzdGFydE9mRGF5LmlzU2FtZU9yQmVmb3JlKHJFbmQsICdkYXknKTsgLy8gd2hlbiB0aGUgZXZlbnQgaXMgemVybyBkdXJhdGlvbiB3ZSBuZWVkIHRvIGhhbmRsZSBhIGJpdCBkaWZmZXJlbnRseVxuXG4gICAgdmFyIHNhbWVNaW4gPSAhc3RhcnRPZkRheS5pc1NhbWUoZUVuZCwgJ21pbnV0ZXMnKTtcbiAgICB2YXIgZW5kc0FmdGVyU3RhcnQgPSBzYW1lTWluID8gZUVuZC5pc0FmdGVyKHJTdGFydCwgJ21pbnV0ZXMnKSA6IGVFbmQuaXNTYW1lT3JBZnRlcihyU3RhcnQsICdtaW51dGVzJyk7XG4gICAgcmV0dXJuIHN0YXJ0c0JlZm9yZUVuZCAmJiBlbmRzQWZ0ZXJTdGFydDtcbiAgfSAvLyBtb21lbnQgdHJlYXRzICdkYXknIGFuZCAnZGF0ZScgZXF1YWxpdHkgdmVyeSBkaWZmZXJlbnRcbiAgLy8gbW9tZW50KGRhdGUxKS5pc1NhbWUoZGF0ZTIsICdkYXknKSB3b3VsZCB0ZXN0IHRoYXQgdGhleSB3ZXJlIGJvdGggdGhlIHNhbWUgZGF5IG9mIHRoZSB3ZWVrXG4gIC8vIG1vbWVudChkYXRlMSkuaXNTYW1lKGRhdGUyLCAnZGF0ZScpIHdvdWxkIHRlc3QgdGhhdCB0aGV5IHdlcmUgYm90aCB0aGUgc2FtZSBkYXRlIG9mIHRoZSBtb250aCBvZiB0aGUgeWVhclxuXG5cbiAgZnVuY3Rpb24gaXNTYW1lRGF0ZShkYXRlMSwgZGF0ZTIpIHtcbiAgICB2YXIgZHQgPSBtb21lbnQoZGF0ZTEpO1xuICAgIHZhciBkdDIgPSBtb21lbnQoZGF0ZTIpO1xuICAgIHJldHVybiBkdC5pc1NhbWUoZHQyLCAnZGF0ZScpO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCwgY2FsbGVkIG9uY2UgaW4gdGhlIGxvY2FsaXplciBjb25zdHJ1Y3RvciwgaXMgdXNlZCBieSBldmVudExldmVsc1xuICAgKiAnZXZlbnRTZWdtZW50cygpJyB0byBhc3Npc3QgaW4gZGV0ZXJtaW5pbmcgdGhlICdzcGFuJyBvZiB0aGUgZXZlbnQgaW4gdGhlIGRpc3BsYXksXG4gICAqIHNwZWNpZmljYWxseSB3aGVuIHVzaW5nIGEgdGltZXpvbmUgdGhhdCBpcyBncmVhdGVyIHRoYW4gdGhlIGJyb3dzZXIgbmF0aXZlIHRpbWV6b25lLlxuICAgKiBAcmV0dXJucyBudW1iZXJcbiAgICovXG5cblxuICBmdW5jdGlvbiBicm93c2VyVFpPZmZzZXQoKSB7XG4gICAgLyoqXG4gICAgICogRGF0ZS5wcm90b3R5cGUuZ2V0VGltZXpvbmVPZmZzZXQgaG9ycmlmaWNhbGx5IGZsaXBzIHRoZSBwb3NpdGl2ZS9uZWdhdGl2ZSBmcm9tXG4gICAgICogd2hhdCB5b3Ugc2VlIGluIGl0J3Mgc3RyaW5nLCBzbyB3ZSBoYXZlIHRvIGp1bXAgdGhyb3VnaCBzb21lIGhvb3BzIHRvIGdldCBhIHZhbHVlXG4gICAgICogd2UgY2FuIGFjdHVhbGx5IGNvbXBhcmUuXG4gICAgICovXG4gICAgdmFyIGR0ID0gbmV3IERhdGUoKTtcbiAgICB2YXIgbmVnID0gLy0vLnRlc3QoZHQudG9TdHJpbmcoKSkgPyAnLScgOiAnJztcbiAgICB2YXIgZHRPZmZzZXQgPSBkdC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHZhciBjb21wYXJhdG9yID0gTnVtYmVyKFwiXCIgKyBuZWcgKyBNYXRoLmFicyhkdE9mZnNldCkpOyAvLyBtb21lbnQgY29ycmVjdGx5IHByb3ZpZGVzIHBvc2l0aXZlL25lZ2F0aXZlIG9mZnNldCwgYXMgZXhwZWN0ZWRcblxuICAgIHZhciBtdE9mZnNldCA9IG1vbWVudCgpLnV0Y09mZnNldCgpO1xuICAgIHJldHVybiBtdE9mZnNldCA+IGNvbXBhcmF0b3IgPyAxIDogMDtcbiAgfVxuXG4gIHJldHVybiBuZXcgRGF0ZUxvY2FsaXplcih7XG4gICAgZm9ybWF0czogZm9ybWF0cyxcbiAgICBmaXJzdE9mV2VlazogZmlyc3RPZldlZWssXG4gICAgZmlyc3RWaXNpYmxlRGF5OiBmaXJzdFZpc2libGVEYXksXG4gICAgbGFzdFZpc2libGVEYXk6IGxhc3RWaXNpYmxlRGF5LFxuICAgIHZpc2libGVEYXlzOiB2aXNpYmxlRGF5cyxcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSwgX2Zvcm1hdCwgY3VsdHVyZSkge1xuICAgICAgcmV0dXJuIGxvY2FsZShtb21lbnQodmFsdWUpLCBjdWx0dXJlKS5mb3JtYXQoX2Zvcm1hdCk7XG4gICAgfSxcbiAgICBsdDogbHQsXG4gICAgbHRlOiBsdGUsXG4gICAgZ3Q6IGd0LFxuICAgIGd0ZTogZ3RlLFxuICAgIGVxOiBlcSxcbiAgICBuZXE6IG5lcSxcbiAgICBtZXJnZTogbWVyZ2UsXG4gICAgaW5SYW5nZTogaW5SYW5nZSxcbiAgICBzdGFydE9mOiBzdGFydE9mLFxuICAgIGVuZE9mOiBlbmRPZixcbiAgICByYW5nZTogcmFuZ2UsXG4gICAgYWRkOiBhZGQsXG4gICAgZGlmZjogZGlmZixcbiAgICBjZWlsOiBjZWlsLFxuICAgIG1pbjogbWluLFxuICAgIG1heDogbWF4LFxuICAgIG1pbnV0ZXM6IG1pbnV0ZXMsXG4gICAgZ2V0U2xvdERhdGU6IGdldFNsb3REYXRlLFxuICAgIGdldFRvdGFsTWluOiBnZXRUb3RhbE1pbixcbiAgICBnZXRNaW51dGVzRnJvbU1pZG5pZ2h0OiBnZXRNaW51dGVzRnJvbU1pZG5pZ2h0LFxuICAgIGNvbnRpbnVlc1ByaW9yOiBjb250aW51ZXNQcmlvcixcbiAgICBjb250aW51ZXNBZnRlcjogY29udGludWVzQWZ0ZXIsXG4gICAgc29ydEV2ZW50czogc29ydEV2ZW50cyxcbiAgICBpbkV2ZW50UmFuZ2U6IGluRXZlbnRSYW5nZSxcbiAgICBpc1NhbWVEYXRlOiBpc1NhbWVEYXRlLFxuICAgIGJyb3dzZXJUWk9mZnNldDogYnJvd3NlclRaT2Zmc2V0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwbHVyYWxpemVVbml0KHVuaXQpIHtcbiAgcmV0dXJuIC9zJC8udGVzdCh1bml0KSA/IHVuaXQgOiB1bml0ICsgJ3MnO1xufVxuXG52YXIgd2Vla1JhbmdlRm9ybWF0JDEgPSBmdW5jdGlvbiB3ZWVrUmFuZ2VGb3JtYXQoX3JlZiwgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIHN0YXJ0ID0gX3JlZi5zdGFydCxcbiAgICAgIGVuZCA9IF9yZWYuZW5kO1xuICByZXR1cm4gbG9jYWwuZm9ybWF0KHN0YXJ0LCAnTU1NTSBkZCcsIGN1bHR1cmUpICsgJyDigJMgJyArIC8vIHVwZGF0ZWQgdG8gdXNlIHRoaXMgbG9jYWxpemVyICdlcSgpJyBtZXRob2RcbiAgbG9jYWwuZm9ybWF0KGVuZCwgbG9jYWwuZXEoc3RhcnQsIGVuZCwgJ21vbnRoJykgPyAnZGQnIDogJ01NTU0gZGQnLCBjdWx0dXJlKTtcbn07XG5cbnZhciBkYXRlUmFuZ2VGb3JtYXQkMiA9IGZ1bmN0aW9uIGRhdGVSYW5nZUZvcm1hdChfcmVmMiwgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIHN0YXJ0ID0gX3JlZjIuc3RhcnQsXG4gICAgICBlbmQgPSBfcmVmMi5lbmQ7XG4gIHJldHVybiBsb2NhbC5mb3JtYXQoc3RhcnQsICdEJywgY3VsdHVyZSkgKyAnIOKAkyAnICsgbG9jYWwuZm9ybWF0KGVuZCwgJ0QnLCBjdWx0dXJlKTtcbn07XG5cbnZhciB0aW1lUmFuZ2VGb3JtYXQkMSA9IGZ1bmN0aW9uIHRpbWVSYW5nZUZvcm1hdChfcmVmMywgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIHN0YXJ0ID0gX3JlZjMuc3RhcnQsXG4gICAgICBlbmQgPSBfcmVmMy5lbmQ7XG4gIHJldHVybiBsb2NhbC5mb3JtYXQoc3RhcnQsICd0JywgY3VsdHVyZSkgKyAnIOKAkyAnICsgbG9jYWwuZm9ybWF0KGVuZCwgJ3QnLCBjdWx0dXJlKTtcbn07XG5cbnZhciB0aW1lUmFuZ2VTdGFydEZvcm1hdCQxID0gZnVuY3Rpb24gdGltZVJhbmdlU3RhcnRGb3JtYXQoX3JlZjQsIGN1bHR1cmUsIGxvY2FsKSB7XG4gIHZhciBzdGFydCA9IF9yZWY0LnN0YXJ0O1xuICByZXR1cm4gbG9jYWwuZm9ybWF0KHN0YXJ0LCAndCcsIGN1bHR1cmUpICsgJyDigJMgJztcbn07XG5cbnZhciB0aW1lUmFuZ2VFbmRGb3JtYXQkMSA9IGZ1bmN0aW9uIHRpbWVSYW5nZUVuZEZvcm1hdChfcmVmNSwgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIGVuZCA9IF9yZWY1LmVuZDtcbiAgcmV0dXJuICcg4oCTICcgKyBsb2NhbC5mb3JtYXQoZW5kLCAndCcsIGN1bHR1cmUpO1xufTtcblxudmFyIGZvcm1hdHMkMSA9IHtcbiAgZGF0ZUZvcm1hdDogJ2RkJyxcbiAgZGF5Rm9ybWF0OiAnZGQgRUVFJyxcbiAgd2Vla2RheUZvcm1hdDogJ0VFRScsXG4gIHNlbGVjdFJhbmdlRm9ybWF0OiB0aW1lUmFuZ2VGb3JtYXQkMSxcbiAgZXZlbnRUaW1lUmFuZ2VGb3JtYXQ6IHRpbWVSYW5nZUZvcm1hdCQxLFxuICBldmVudFRpbWVSYW5nZVN0YXJ0Rm9ybWF0OiB0aW1lUmFuZ2VTdGFydEZvcm1hdCQxLFxuICBldmVudFRpbWVSYW5nZUVuZEZvcm1hdDogdGltZVJhbmdlRW5kRm9ybWF0JDEsXG4gIHRpbWVHdXR0ZXJGb3JtYXQ6ICd0JyxcbiAgbW9udGhIZWFkZXJGb3JtYXQ6ICdNTU1NIHl5eXknLFxuICBkYXlIZWFkZXJGb3JtYXQ6ICdFRUVFIE1NTSBkZCcsXG4gIGRheVJhbmdlSGVhZGVyRm9ybWF0OiB3ZWVrUmFuZ2VGb3JtYXQkMSxcbiAgYWdlbmRhSGVhZGVyRm9ybWF0OiBkYXRlUmFuZ2VGb3JtYXQkMixcbiAgYWdlbmRhRGF0ZUZvcm1hdDogJ0VFRSBNTU0gZGQnLFxuICBhZ2VuZGFUaW1lRm9ybWF0OiAndCcsXG4gIGFnZW5kYVRpbWVSYW5nZUZvcm1hdDogdGltZVJhbmdlRm9ybWF0JDFcbn07XG5cbmZ1bmN0aW9uIGZpeFVuaXQkMSh1bml0KSB7XG4gIHZhciBkYXRlUGFydCA9IHVuaXQgPyBwbHVyYWxpemVVbml0KHVuaXQudG9Mb3dlckNhc2UoKSkgOiB1bml0O1xuXG4gIGlmIChkYXRlUGFydCA9PT0gJ0Z1bGxZZWFyJykge1xuICAgIGRhdGVQYXJ0ID0gJ3llYXInO1xuICB9IGVsc2UgaWYgKCFkYXRlUGFydCkge1xuICAgIGRhdGVQYXJ0ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVQYXJ0O1xufSAvLyBMdXhvbiBkb2VzIG5vdCBjdXJyZW50bHkgaGF2ZSB3ZWVrSW5mbyBieSBjdWx0dXJlXG4vLyBMdXhvbiB1c2VzIDEgYmFzZWQgdmFsdWVzIGZvciBtb250aCBhbmQgd2Vla2RheVxuLy8gU28gd2UgZGVmYXVsdCB0byBTdW5kYXkgKDcpXG5cblxuZnVuY3Rpb24gbHV4b24gKERhdGVUaW1lLCBfdGVtcCkge1xuICB2YXIgX3JlZjYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWY2JGZpcnN0RGF5T2ZXZWVrID0gX3JlZjYuZmlyc3REYXlPZldlZWssXG4gICAgICBmaXJzdERheU9mV2VlayA9IF9yZWY2JGZpcnN0RGF5T2ZXZWVrID09PSB2b2lkIDAgPyA3IDogX3JlZjYkZmlyc3REYXlPZldlZWs7XG5cbiAgZnVuY3Rpb24gZm9ybWF0RGF0ZSh2YWx1ZSwgZm9ybWF0KSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21KU0RhdGUodmFsdWUpLnRvRm9ybWF0KGZvcm1hdCk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXREYXRlV2l0aEN1bHR1cmUodmFsdWUsIGN1bHR1cmUsIGZvcm1hdCkge1xuICAgIHJldHVybiBEYXRlVGltZS5mcm9tSlNEYXRlKHZhbHVlKS5zZXRMb2NhbGUoY3VsdHVyZSkuZm9ybWF0KGZvcm1hdCk7XG4gIH1cbiAgLyoqKiBCRUdJTiBsb2NhbGl6ZWQgZGF0ZSBhcml0aG1ldGljIG1ldGhvZHMgd2l0aCBMdXhvbiAqKiovXG5cblxuICBmdW5jdGlvbiBkZWZpbmVDb21wYXJhdG9ycyhhLCBiLCB1bml0KSB7XG4gICAgdmFyIGRhdGVQYXJ0ID0gZml4VW5pdCQxKHVuaXQpO1xuICAgIHZhciBkdEEgPSBkYXRlUGFydCA/IERhdGVUaW1lLmZyb21KU0RhdGUoYSkuc3RhcnRPZihkYXRlUGFydCkgOiBEYXRlVGltZS5mcm9tSlNEYXRlKGEpO1xuICAgIHZhciBkdEIgPSBkYXRlUGFydCA/IERhdGVUaW1lLmZyb21KU0RhdGUoYikuc3RhcnRPZihkYXRlUGFydCkgOiBEYXRlVGltZS5mcm9tSlNEYXRlKGIpO1xuICAgIHJldHVybiBbZHRBLCBkdEIsIGRhdGVQYXJ0XTtcbiAgfSAvLyBTaW5jZSBMdXhvbiAoYW5kIGN1cnJlbnQgSW50bCBBUEkpIGhhcyBubyBzdXBwb3J0XG4gIC8vIGZvciBjdWx0dXJlIGJhc2VkIHdlZWtJbmZvLCB3ZSBuZWVkIHRvIGhhbmRsZVxuICAvLyB0aGUgc3RhcnQgb2YgdGhlIHdlZWsgZGlmZmVyZW50bHlcbiAgLy8gZGVwZW5kaW5nIG9uIGxvY2FsZSwgdGhlIGZpcnN0RGF5T2ZXZWVrIGNvdWxkIGFsc28gYmUgU2F0dXJkYXksIFN1bmRheSBvciBNb25kYXlcblxuXG4gIGZ1bmN0aW9uIHN0YXJ0T2ZEVFdlZWsoZHRPYmopIHtcbiAgICB2YXIgd2Vla2RheSA9IGR0T2JqLndlZWtkYXk7XG5cbiAgICBpZiAod2Vla2RheSA9PT0gZmlyc3REYXlPZldlZWspIHtcbiAgICAgIHJldHVybiBkdE9iai5zdGFydE9mKCdkYXknKTsgLy8gYWxyZWFkeSBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgIH0gZWxzZSBpZiAoZmlyc3REYXlPZldlZWsgPT09IDEpIHtcbiAgICAgIHJldHVybiBkdE9iai5zdGFydE9mKCd3ZWVrJyk7IC8vIGZvdyBpcyBNb25kYXksIHdoaWNoIGlzIEx1eG9uIGRlZmF1bHRcbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGZpcnN0RGF5T2ZXZWVrID09PSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgKyAoNyAtIGZpcnN0RGF5T2ZXZWVrKTtcbiAgICByZXR1cm4gZHRPYmoubWludXMoe1xuICAgICAgZGF5OiBkaWZmXG4gICAgfSkuc3RhcnRPZignZGF5Jyk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmRPZkRUV2VlayhkdE9iaikge1xuICAgIHZhciB3ZWVrZGF5ID0gZHRPYmoud2Vla2RheTtcbiAgICB2YXIgZW93ID0gZmlyc3REYXlPZldlZWsgPT09IDEgPyA3IDogZmlyc3REYXlPZldlZWsgLSAxO1xuXG4gICAgaWYgKHdlZWtkYXkgPT09IGVvdykge1xuICAgICAgcmV0dXJuIGR0T2JqLmVuZE9mKCdkYXknKTsgLy8gYWxyZWFkeSBsYXN0IGRheSBvZiB0aGUgd2Vla1xuICAgIH0gZWxzZSBpZiAoZmlyc3REYXlPZldlZWsgPT09IDEpIHtcbiAgICAgIHJldHVybiBkdE9iai5lbmRPZignd2VlaycpOyAvLyB1c2UgTHV4b24gZGVmYXVsdCAoU3VuZGF5KVxuICAgIH1cblxuICAgIHZhciBmcm9tRGF0ZSA9IGZpcnN0RGF5T2ZXZWVrID4gZW93ID8gZHRPYmoucGx1cyh7XG4gICAgICBkYXk6IGZpcnN0RGF5T2ZXZWVrIC0gZW93XG4gICAgfSkgOiBkdE9iajtcbiAgICByZXR1cm4gZnJvbURhdGUuc2V0KHtcbiAgICAgIHdlZWtkYXk6IGVvd1xuICAgIH0pLmVuZE9mKCdkYXknKTtcbiAgfSAvLyBUaGlzIHJldHVybnMgYSBEYXRlVGltZSBpbnN0YW5jZVxuXG5cbiAgZnVuY3Rpb24gc3RhcnRPZkRUKGRhdGUsIHVuaXQpIHtcbiAgICBpZiAoZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkYXRlID0gbmV3IERhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0ZVBhcnQgPSBmaXhVbml0JDEodW5pdCk7XG5cbiAgICBpZiAoZGF0ZVBhcnQpIHtcbiAgICAgIHZhciBkdCA9IERhdGVUaW1lLmZyb21KU0RhdGUoZGF0ZSk7XG4gICAgICByZXR1cm4gZGF0ZVBhcnQuaW5jbHVkZXMoJ3dlZWsnKSA/IHN0YXJ0T2ZEVFdlZWsoZHQpIDogZHQuc3RhcnRPZihkYXRlUGFydCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21KU0RhdGUoZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBmaXJzdE9mV2VlaygpIHtcbiAgICByZXR1cm4gZmlyc3REYXlPZldlZWs7XG4gIH0gLy8gVGhpcyByZXR1cm5zIGEgSlMgRGF0ZSBmcm9tIGEgRGF0ZVRpbWUgaW5zdGFuY2VcblxuXG4gIGZ1bmN0aW9uIHN0YXJ0T2YoZGF0ZSwgdW5pdCkge1xuICAgIGlmIChkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBzdGFydE9mRFQoZGF0ZSwgdW5pdCkudG9KU0RhdGUoKTtcbiAgfSAvLyBUaGlzIHJldHVybnMgYSBEYXRlVGltZSBpbnN0YW5jZVxuXG5cbiAgZnVuY3Rpb24gZW5kT2ZEVChkYXRlLCB1bml0KSB7XG4gICAgaWYgKGRhdGUgPT09IHZvaWQgMCkge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIGRhdGVQYXJ0ID0gZml4VW5pdCQxKHVuaXQpO1xuXG4gICAgaWYgKGRhdGVQYXJ0KSB7XG4gICAgICB2YXIgZHQgPSBEYXRlVGltZS5mcm9tSlNEYXRlKGRhdGUpO1xuICAgICAgcmV0dXJuIGRhdGVQYXJ0LmluY2x1ZGVzKCd3ZWVrJykgPyBlbmRPZkRUV2VlayhkdCkgOiBkdC5lbmRPZihkYXRlUGFydCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21KU0RhdGUoZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmRPZihkYXRlLCB1bml0KSB7XG4gICAgaWYgKGRhdGUgPT09IHZvaWQgMCkge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuZE9mRFQoZGF0ZSwgdW5pdCkudG9KU0RhdGUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVxKGEsIGIsIHVuaXQpIHtcbiAgICB2YXIgX2RlZmluZUNvbXBhcmF0b3JzID0gZGVmaW5lQ29tcGFyYXRvcnMoYSwgYiwgdW5pdCksXG4gICAgICAgIGR0QSA9IF9kZWZpbmVDb21wYXJhdG9yc1swXSxcbiAgICAgICAgZHRCID0gX2RlZmluZUNvbXBhcmF0b3JzWzFdO1xuXG4gICAgcmV0dXJuICtkdEEgPT0gK2R0QjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5lcShhLCBiLCB1bml0KSB7XG4gICAgcmV0dXJuICFlcShhLCBiLCB1bml0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGd0KGEsIGIsIHVuaXQpIHtcbiAgICB2YXIgX2RlZmluZUNvbXBhcmF0b3JzMiA9IGRlZmluZUNvbXBhcmF0b3JzKGEsIGIsIHVuaXQpLFxuICAgICAgICBkdEEgPSBfZGVmaW5lQ29tcGFyYXRvcnMyWzBdLFxuICAgICAgICBkdEIgPSBfZGVmaW5lQ29tcGFyYXRvcnMyWzFdO1xuXG4gICAgcmV0dXJuICtkdEEgPiArZHRCO1xuICB9XG5cbiAgZnVuY3Rpb24gbHQoYSwgYiwgdW5pdCkge1xuICAgIHZhciBfZGVmaW5lQ29tcGFyYXRvcnMzID0gZGVmaW5lQ29tcGFyYXRvcnMoYSwgYiwgdW5pdCksXG4gICAgICAgIGR0QSA9IF9kZWZpbmVDb21wYXJhdG9yczNbMF0sXG4gICAgICAgIGR0QiA9IF9kZWZpbmVDb21wYXJhdG9yczNbMV07XG5cbiAgICByZXR1cm4gK2R0QSA8ICtkdEI7XG4gIH1cblxuICBmdW5jdGlvbiBndGUoYSwgYiwgdW5pdCkge1xuICAgIHZhciBfZGVmaW5lQ29tcGFyYXRvcnM0ID0gZGVmaW5lQ29tcGFyYXRvcnMoYSwgYiwgdW5pdCksXG4gICAgICAgIGR0QSA9IF9kZWZpbmVDb21wYXJhdG9yczRbMF0sXG4gICAgICAgIGR0QiA9IF9kZWZpbmVDb21wYXJhdG9yczRbMV07XG5cbiAgICByZXR1cm4gK2R0QSA+PSArZHRCO1xuICB9XG5cbiAgZnVuY3Rpb24gbHRlKGEsIGIsIHVuaXQpIHtcbiAgICB2YXIgX2RlZmluZUNvbXBhcmF0b3JzNSA9IGRlZmluZUNvbXBhcmF0b3JzKGEsIGIsIHVuaXQpLFxuICAgICAgICBkdEEgPSBfZGVmaW5lQ29tcGFyYXRvcnM1WzBdLFxuICAgICAgICBkdEIgPSBfZGVmaW5lQ29tcGFyYXRvcnM1WzFdO1xuXG4gICAgcmV0dXJuICtkdEEgPD0gK2R0QjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluUmFuZ2UoZGF5LCBtaW4sIG1heCwgdW5pdCkge1xuICAgIGlmICh1bml0ID09PSB2b2lkIDApIHtcbiAgICAgIHVuaXQgPSAnZGF5JztcbiAgICB9XG5cbiAgICB2YXIgZGF0ZVBhcnQgPSBmaXhVbml0JDEodW5pdCk7XG4gICAgdmFyIG1EYXkgPSBzdGFydE9mRFQoZGF5LCBkYXRlUGFydCk7XG4gICAgdmFyIG1NaW4gPSBzdGFydE9mRFQobWluLCBkYXRlUGFydCk7XG4gICAgdmFyIG1NYXggPSBzdGFydE9mRFQobWF4LCBkYXRlUGFydCk7XG4gICAgcmV0dXJuICttRGF5ID49ICttTWluICYmICttRGF5IDw9ICttTWF4O1xuICB9XG5cbiAgZnVuY3Rpb24gbWluKGRhdGVBLCBkYXRlQikge1xuICAgIHZhciBkdEEgPSBEYXRlVGltZS5mcm9tSlNEYXRlKGRhdGVBKTtcbiAgICB2YXIgZHRCID0gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkYXRlQik7XG4gICAgdmFyIG1pbkR0ID0gRGF0ZVRpbWUubWluKGR0QSwgZHRCKTtcbiAgICByZXR1cm4gbWluRHQudG9KU0RhdGUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heChkYXRlQSwgZGF0ZUIpIHtcbiAgICB2YXIgZHRBID0gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkYXRlQSk7XG4gICAgdmFyIGR0QiA9IERhdGVUaW1lLmZyb21KU0RhdGUoZGF0ZUIpO1xuICAgIHZhciBtYXhEdCA9IERhdGVUaW1lLm1heChkdEEsIGR0Qik7XG4gICAgcmV0dXJuIG1heER0LnRvSlNEYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZShkYXRlLCB0aW1lKSB7XG4gICAgaWYgKCFkYXRlICYmICF0aW1lKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdG0gPSBEYXRlVGltZS5mcm9tSlNEYXRlKHRpbWUpO1xuICAgIHZhciBkdCA9IHN0YXJ0T2ZEVChkYXRlLCAnZGF5Jyk7XG4gICAgcmV0dXJuIGR0LnNldCh7XG4gICAgICBob3VyOiB0bS5ob3VyLFxuICAgICAgbWludXRlOiB0bS5taW51dGUsXG4gICAgICBzZWNvbmQ6IHRtLnNlY29uZCxcbiAgICAgIG1pbGxpc2Vjb25kOiB0bS5taWxsaXNlY29uZFxuICAgIH0pLnRvSlNEYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGQoZGF0ZSwgYWRkZXIsIHVuaXQpIHtcbiAgICB2YXIgX0RhdGVUaW1lJGZyb21KU0RhdGUkO1xuXG4gICAgdmFyIGRhdGVQYXJ0ID0gZml4VW5pdCQxKHVuaXQpO1xuICAgIHJldHVybiBEYXRlVGltZS5mcm9tSlNEYXRlKGRhdGUpLnBsdXMoKF9EYXRlVGltZSRmcm9tSlNEYXRlJCA9IHt9LCBfRGF0ZVRpbWUkZnJvbUpTRGF0ZSRbZGF0ZVBhcnRdID0gYWRkZXIsIF9EYXRlVGltZSRmcm9tSlNEYXRlJCkpLnRvSlNEYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiByYW5nZShzdGFydCwgZW5kLCB1bml0KSB7XG4gICAgaWYgKHVuaXQgPT09IHZvaWQgMCkge1xuICAgICAgdW5pdCA9ICdkYXknO1xuICAgIH1cblxuICAgIHZhciBkYXRlUGFydCA9IGZpeFVuaXQkMSh1bml0KTtcbiAgICB2YXIgY3VycmVudCA9IERhdGVUaW1lLmZyb21KU0RhdGUoc3RhcnQpLnRvSlNEYXRlKCk7IC8vIHRoaXMgaXMgdG8gZ2V0IGl0IHRvIHR6XG5cbiAgICB2YXIgZGF5cyA9IFtdO1xuXG4gICAgd2hpbGUgKGx0ZShjdXJyZW50LCBlbmQpKSB7XG4gICAgICBkYXlzLnB1c2goY3VycmVudCk7XG4gICAgICBjdXJyZW50ID0gYWRkKGN1cnJlbnQsIDEsIGRhdGVQYXJ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlaWwoZGF0ZSwgdW5pdCkge1xuICAgIHZhciBkYXRlUGFydCA9IGZpeFVuaXQkMSh1bml0KTtcbiAgICB2YXIgZmxvb3IgPSBzdGFydE9mKGRhdGUsIGRhdGVQYXJ0KTtcbiAgICByZXR1cm4gZXEoZmxvb3IsIGRhdGUpID8gZmxvb3IgOiBhZGQoZmxvb3IsIDEsIGRhdGVQYXJ0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpZmYoYSwgYiwgdW5pdCkge1xuICAgIGlmICh1bml0ID09PSB2b2lkIDApIHtcbiAgICAgIHVuaXQgPSAnZGF5JztcbiAgICB9XG5cbiAgICB2YXIgZGF0ZVBhcnQgPSBmaXhVbml0JDEodW5pdCk7IC8vIGRvbid0IHVzZSAnZGVmaW5lQ29tcGFyYXRvcnMnIGhlcmUsIGFzIHdlIGRvbid0IHdhbnQgdG8gbXV0YXRlIHRoZSB2YWx1ZXNcblxuICAgIHZhciBkdEEgPSBEYXRlVGltZS5mcm9tSlNEYXRlKGEpO1xuICAgIHZhciBkdEIgPSBEYXRlVGltZS5mcm9tSlNEYXRlKGIpO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGR0Qi5kaWZmKGR0QSwgZGF0ZVBhcnQsIHtcbiAgICAgIGNvbnZlcnNpb25BY2N1cmFjeTogJ2xvbmd0ZXJtJ1xuICAgIH0pLnRvT2JqZWN0KClbZGF0ZVBhcnRdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpcnN0VmlzaWJsZURheShkYXRlKSB7XG4gICAgdmFyIHN0YXJ0T2ZNb250aCA9IHN0YXJ0T2ZEVChkYXRlLCAnbW9udGgnKTtcbiAgICByZXR1cm4gc3RhcnRPZkRUV2VlayhzdGFydE9mTW9udGgpLnRvSlNEYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBsYXN0VmlzaWJsZURheShkYXRlKSB7XG4gICAgdmFyIGVuZE9mTW9udGggPSBlbmRPZkRUKGRhdGUsICdtb250aCcpO1xuICAgIHJldHVybiBlbmRPZkRUV2VlayhlbmRPZk1vbnRoKS50b0pTRGF0ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdmlzaWJsZURheXMoZGF0ZSkge1xuICAgIHZhciBjdXJyZW50ID0gZmlyc3RWaXNpYmxlRGF5KGRhdGUpO1xuICAgIHZhciBsYXN0ID0gbGFzdFZpc2libGVEYXkoZGF0ZSk7XG4gICAgdmFyIGRheXMgPSBbXTtcblxuICAgIHdoaWxlIChsdGUoY3VycmVudCwgbGFzdCkpIHtcbiAgICAgIGRheXMucHVzaChjdXJyZW50KTtcbiAgICAgIGN1cnJlbnQgPSBhZGQoY3VycmVudCwgMSwgJ2RheScpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXlzO1xuICB9XG4gIC8qKiogRU5EIGxvY2FsaXplZCBkYXRlIGFyaXRobWV0aWMgbWV0aG9kcyB3aXRoIG1vbWVudCAqKiovXG5cbiAgLyoqXG4gICAqIE1vdmVkIGZyb20gVGltZVNsb3RzLmpzLCB0aGlzIG1ldGhvZCBvdmVycmlkZXMgdGhlIG1ldGhvZCBvZiB0aGUgc2FtZSBuYW1lXG4gICAqIGluIHRoZSBsb2NhbGl6ZXIuanMsIHVzaW5nIG1vbWVudCB0byBjb25zdHJ1Y3QgdGhlIGpzIERhdGVcbiAgICogQHBhcmFtIHtEYXRlfSBkdCAtIGRhdGUgdG8gc3RhcnQgd2l0aFxuICAgKiBAcGFyYW0ge051bWJlcn0gbWludXRlc0Zyb21NaWRuaWdodFxuICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm5zIHtEYXRlfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFNsb3REYXRlKGR0LCBtaW51dGVzRnJvbU1pZG5pZ2h0LCBvZmZzZXQpIHtcbiAgICByZXR1cm4gc3RhcnRPZkRUKGR0LCAnZGF5Jykuc2V0KHtcbiAgICAgIG1pbnV0ZXM6IG1pbnV0ZXNGcm9tTWlkbmlnaHQgKyBvZmZzZXRcbiAgICB9KS50b0pTRGF0ZSgpO1xuICB9IC8vIEx1eG9uIHdpbGwgYXV0b21hdGljYWxseSBoYW5kbGUgRFNUIGRpZmZlcmVuY2VzIGluIGl0J3MgY2FsY3VsYXRpb25zXG5cblxuICBmdW5jdGlvbiBnZXRUb3RhbE1pbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGRpZmYoc3RhcnQsIGVuZCwgJ21pbnV0ZXMnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1pbnV0ZXNGcm9tTWlkbmlnaHQoc3RhcnQpIHtcbiAgICB2YXIgZGF5U3RhcnQgPSBzdGFydE9mRFQoc3RhcnQsICdkYXknKTtcbiAgICB2YXIgZGF5ID0gRGF0ZVRpbWUuZnJvbUpTRGF0ZShzdGFydCk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoZGF5LmRpZmYoZGF5U3RhcnQsICdtaW51dGVzJywge1xuICAgICAgY29udmVyc2lvbkFjY3VyYWN5OiAnbG9uZ3Rlcm0nXG4gICAgfSkudG9PYmplY3QoKS5taW51dGVzKTtcbiAgfSAvLyBUaGVzZSB0d28gYXJlIHVzZWQgYnkgRGF0ZVNsb3RNZXRyaWNzXG5cblxuICBmdW5jdGlvbiBjb250aW51ZXNQcmlvcihzdGFydCwgZmlyc3QpIHtcbiAgICByZXR1cm4gbHQoc3RhcnQsIGZpcnN0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnRpbnVlc0FmdGVyKHN0YXJ0LCBlbmQsIGxhc3QpIHtcbiAgICByZXR1cm4gZ3RlKGVuZCwgbGFzdCk7XG4gIH0gLy8gVGhlc2UgdHdvIGFyZSB1c2VkIGJ5IGV2ZW50TGV2ZWxzXG5cblxuICBmdW5jdGlvbiBzb3J0RXZlbnRzKF9yZWY3KSB7XG4gICAgdmFyIF9yZWY3JGV2dEEgPSBfcmVmNy5ldnRBLFxuICAgICAgICBhU3RhcnQgPSBfcmVmNyRldnRBLnN0YXJ0LFxuICAgICAgICBhRW5kID0gX3JlZjckZXZ0QS5lbmQsXG4gICAgICAgIGFBbGxEYXkgPSBfcmVmNyRldnRBLmFsbERheSxcbiAgICAgICAgX3JlZjckZXZ0QiA9IF9yZWY3LmV2dEIsXG4gICAgICAgIGJTdGFydCA9IF9yZWY3JGV2dEIuc3RhcnQsXG4gICAgICAgIGJFbmQgPSBfcmVmNyRldnRCLmVuZCxcbiAgICAgICAgYkFsbERheSA9IF9yZWY3JGV2dEIuYWxsRGF5O1xuICAgIHZhciBzdGFydFNvcnQgPSArc3RhcnRPZihhU3RhcnQsICdkYXknKSAtICtzdGFydE9mKGJTdGFydCwgJ2RheScpO1xuICAgIHZhciBkdXJBID0gZGlmZihhU3RhcnQsIGNlaWwoYUVuZCwgJ2RheScpLCAnZGF5Jyk7XG4gICAgdmFyIGR1ckIgPSBkaWZmKGJTdGFydCwgY2VpbChiRW5kLCAnZGF5JyksICdkYXknKTtcbiAgICByZXR1cm4gc3RhcnRTb3J0IHx8IC8vIHNvcnQgYnkgc3RhcnQgRGF5IGZpcnN0XG4gICAgTWF0aC5tYXgoZHVyQiwgMSkgLSBNYXRoLm1heChkdXJBLCAxKSB8fCAvLyBldmVudHMgc3Bhbm5pbmcgbXVsdGlwbGUgZGF5cyBnbyBmaXJzdFxuICAgICEhYkFsbERheSAtICEhYUFsbERheSB8fCAvLyB0aGVuIGFsbERheSBzaW5nbGUgZGF5IGV2ZW50c1xuICAgICthU3RhcnQgLSArYlN0YXJ0IHx8IC8vIHRoZW4gc29ydCBieSBzdGFydCB0aW1lICpkb24ndCBuZWVkIG1vbWVudCBjb252ZXJzaW9uIGhlcmVcbiAgICArYUVuZCAtICtiRW5kIC8vIHRoZW4gc29ydCBieSBlbmQgdGltZSAqZG9uJ3QgbmVlZCBtb21lbnQgY29udmVyc2lvbiBoZXJlIGVpdGhlclxuICAgIDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluRXZlbnRSYW5nZShfcmVmOCkge1xuICAgIHZhciBfcmVmOCRldmVudCA9IF9yZWY4LmV2ZW50LFxuICAgICAgICBzdGFydCA9IF9yZWY4JGV2ZW50LnN0YXJ0LFxuICAgICAgICBlbmQgPSBfcmVmOCRldmVudC5lbmQsXG4gICAgICAgIF9yZWY4JHJhbmdlID0gX3JlZjgucmFuZ2UsXG4gICAgICAgIHJhbmdlU3RhcnQgPSBfcmVmOCRyYW5nZS5zdGFydCxcbiAgICAgICAgcmFuZ2VFbmQgPSBfcmVmOCRyYW5nZS5lbmQ7XG4gICAgdmFyIGVTdGFydCA9IHN0YXJ0T2Yoc3RhcnQsICdkYXknKTtcbiAgICB2YXIgc3RhcnRzQmVmb3JlRW5kID0gbHRlKGVTdGFydCwgcmFuZ2VFbmQsICdkYXknKTsgLy8gd2hlbiB0aGUgZXZlbnQgaXMgemVybyBkdXJhdGlvbiB3ZSBuZWVkIHRvIGhhbmRsZSBhIGJpdCBkaWZmZXJlbnRseVxuXG4gICAgdmFyIHNhbWVNaW4gPSBuZXEoZVN0YXJ0LCBlbmQsICdtaW51dGVzJyk7XG4gICAgdmFyIGVuZHNBZnRlclN0YXJ0ID0gc2FtZU1pbiA/IGd0KGVuZCwgcmFuZ2VTdGFydCwgJ21pbnV0ZXMnKSA6IGd0ZShlbmQsIHJhbmdlU3RhcnQsICdtaW51dGVzJyk7XG4gICAgcmV0dXJuIHN0YXJ0c0JlZm9yZUVuZCAmJiBlbmRzQWZ0ZXJTdGFydDtcbiAgfSAvLyBtb21lbnQgdHJlYXRzICdkYXknIGFuZCAnZGF0ZScgZXF1YWxpdHkgdmVyeSBkaWZmZXJlbnRcbiAgLy8gbW9tZW50KGRhdGUxKS5pc1NhbWUoZGF0ZTIsICdkYXknKSB3b3VsZCB0ZXN0IHRoYXQgdGhleSB3ZXJlIGJvdGggdGhlIHNhbWUgZGF5IG9mIHRoZSB3ZWVrXG4gIC8vIG1vbWVudChkYXRlMSkuaXNTYW1lKGRhdGUyLCAnZGF0ZScpIHdvdWxkIHRlc3QgdGhhdCB0aGV5IHdlcmUgYm90aCB0aGUgc2FtZSBkYXRlIG9mIHRoZSBtb250aCBvZiB0aGUgeWVhclxuXG5cbiAgZnVuY3Rpb24gaXNTYW1lRGF0ZShkYXRlMSwgZGF0ZTIpIHtcbiAgICB2YXIgZHQgPSBEYXRlVGltZS5mcm9tSlNEYXRlKGRhdGUxKTtcbiAgICB2YXIgZHQyID0gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkYXRlMik7XG4gICAgcmV0dXJuIGR0Lmhhc1NhbWUoZHQyLCAnZGF5Jyk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kLCBjYWxsZWQgb25jZSBpbiB0aGUgbG9jYWxpemVyIGNvbnN0cnVjdG9yLCBpcyB1c2VkIGJ5IGV2ZW50TGV2ZWxzXG4gICAqICdldmVudFNlZ21lbnRzKCknIHRvIGFzc2lzdCBpbiBkZXRlcm1pbmluZyB0aGUgJ3NwYW4nIG9mIHRoZSBldmVudCBpbiB0aGUgZGlzcGxheSxcbiAgICogc3BlY2lmaWNhbGx5IHdoZW4gdXNpbmcgYSB0aW1lem9uZSB0aGF0IGlzIGdyZWF0ZXIgdGhhbiB0aGUgYnJvd3NlciBuYXRpdmUgdGltZXpvbmUuXG4gICAqIEByZXR1cm5zIG51bWJlclxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGJyb3dzZXJUWk9mZnNldCgpIHtcbiAgICAvKipcbiAgICAgKiBEYXRlLnByb3RvdHlwZS5nZXRUaW1lem9uZU9mZnNldCBob3JyaWZpY2FsbHkgZmxpcHMgdGhlIHBvc2l0aXZlL25lZ2F0aXZlIGZyb21cbiAgICAgKiB3aGF0IHlvdSBzZWUgaW4gaXQncyBzdHJpbmcsIHNvIHdlIGhhdmUgdG8ganVtcCB0aHJvdWdoIHNvbWUgaG9vcHMgdG8gZ2V0IGEgdmFsdWVcbiAgICAgKiB3ZSBjYW4gYWN0dWFsbHkgY29tcGFyZS5cbiAgICAgKi9cbiAgICB2YXIgZHQgPSBuZXcgRGF0ZSgpO1xuICAgIHZhciBuZWcgPSAvLS8udGVzdChkdC50b1N0cmluZygpKSA/ICctJyA6ICcnO1xuICAgIHZhciBkdE9mZnNldCA9IGR0LmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgdmFyIGNvbXBhcmF0b3IgPSBOdW1iZXIoXCJcIiArIG5lZyArIE1hdGguYWJzKGR0T2Zmc2V0KSk7IC8vIG1vbWVudCBjb3JyZWN0bHkgcHJvdmlkZXMgcG9zaXRpdmUvbmVnYXRpdmUgb2Zmc2V0LCBhcyBleHBlY3RlZFxuXG4gICAgdmFyIG10T2Zmc2V0ID0gRGF0ZVRpbWUubG9jYWwoKS5vZmZzZXQ7XG4gICAgcmV0dXJuIG10T2Zmc2V0ID4gY29tcGFyYXRvciA/IDEgOiAwO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlTG9jYWxpemVyKHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSwgX2Zvcm1hdCwgY3VsdHVyZSkge1xuICAgICAgaWYgKGN1bHR1cmUpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdERhdGVXaXRoQ3VsdHVyZSh2YWx1ZSwgY3VsdHVyZSwgX2Zvcm1hdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXREYXRlKHZhbHVlLCBfZm9ybWF0KTtcbiAgICB9LFxuICAgIGZvcm1hdHM6IGZvcm1hdHMkMSxcbiAgICBmaXJzdE9mV2VlazogZmlyc3RPZldlZWssXG4gICAgZmlyc3RWaXNpYmxlRGF5OiBmaXJzdFZpc2libGVEYXksXG4gICAgbGFzdFZpc2libGVEYXk6IGxhc3RWaXNpYmxlRGF5LFxuICAgIHZpc2libGVEYXlzOiB2aXNpYmxlRGF5cyxcbiAgICBsdDogbHQsXG4gICAgbHRlOiBsdGUsXG4gICAgZ3Q6IGd0LFxuICAgIGd0ZTogZ3RlLFxuICAgIGVxOiBlcSxcbiAgICBuZXE6IG5lcSxcbiAgICBtZXJnZTogbWVyZ2UsXG4gICAgaW5SYW5nZTogaW5SYW5nZSxcbiAgICBzdGFydE9mOiBzdGFydE9mLFxuICAgIGVuZE9mOiBlbmRPZixcbiAgICByYW5nZTogcmFuZ2UsXG4gICAgYWRkOiBhZGQsXG4gICAgZGlmZjogZGlmZixcbiAgICBjZWlsOiBjZWlsLFxuICAgIG1pbjogbWluLFxuICAgIG1heDogbWF4LFxuICAgIGdldFNsb3REYXRlOiBnZXRTbG90RGF0ZSxcbiAgICBnZXRUb3RhbE1pbjogZ2V0VG90YWxNaW4sXG4gICAgZ2V0TWludXRlc0Zyb21NaWRuaWdodDogZ2V0TWludXRlc0Zyb21NaWRuaWdodCxcbiAgICBjb250aW51ZXNQcmlvcjogY29udGludWVzUHJpb3IsXG4gICAgY29udGludWVzQWZ0ZXI6IGNvbnRpbnVlc0FmdGVyLFxuICAgIHNvcnRFdmVudHM6IHNvcnRFdmVudHMsXG4gICAgaW5FdmVudFJhbmdlOiBpbkV2ZW50UmFuZ2UsXG4gICAgaXNTYW1lRGF0ZTogaXNTYW1lRGF0ZSxcbiAgICBicm93c2VyVFpPZmZzZXQ6IGJyb3dzZXJUWk9mZnNldFxuICB9KTtcbn1cblxudmFyIGRhdGVSYW5nZUZvcm1hdCQzID0gZnVuY3Rpb24gZGF0ZVJhbmdlRm9ybWF0KF9yZWYsIGN1bHR1cmUsIGxvY2FsKSB7XG4gIHZhciBzdGFydCA9IF9yZWYuc3RhcnQsXG4gICAgICBlbmQgPSBfcmVmLmVuZDtcbiAgcmV0dXJuIGxvY2FsLmZvcm1hdChzdGFydCwgJ2QnLCBjdWx0dXJlKSArICcg4oCTICcgKyBsb2NhbC5mb3JtYXQoZW5kLCAnZCcsIGN1bHR1cmUpO1xufTtcblxudmFyIHRpbWVSYW5nZUZvcm1hdCQyID0gZnVuY3Rpb24gdGltZVJhbmdlRm9ybWF0KF9yZWYyLCBjdWx0dXJlLCBsb2NhbCkge1xuICB2YXIgc3RhcnQgPSBfcmVmMi5zdGFydCxcbiAgICAgIGVuZCA9IF9yZWYyLmVuZDtcbiAgcmV0dXJuIGxvY2FsLmZvcm1hdChzdGFydCwgJ3QnLCBjdWx0dXJlKSArICcg4oCTICcgKyBsb2NhbC5mb3JtYXQoZW5kLCAndCcsIGN1bHR1cmUpO1xufTtcblxudmFyIHRpbWVSYW5nZVN0YXJ0Rm9ybWF0JDIgPSBmdW5jdGlvbiB0aW1lUmFuZ2VTdGFydEZvcm1hdChfcmVmMywgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIHN0YXJ0ID0gX3JlZjMuc3RhcnQ7XG4gIHJldHVybiBsb2NhbC5mb3JtYXQoc3RhcnQsICd0JywgY3VsdHVyZSkgKyAnIOKAkyAnO1xufTtcblxudmFyIHRpbWVSYW5nZUVuZEZvcm1hdCQyID0gZnVuY3Rpb24gdGltZVJhbmdlRW5kRm9ybWF0KF9yZWY0LCBjdWx0dXJlLCBsb2NhbCkge1xuICB2YXIgZW5kID0gX3JlZjQuZW5kO1xuICByZXR1cm4gJyDigJMgJyArIGxvY2FsLmZvcm1hdChlbmQsICd0JywgY3VsdHVyZSk7XG59O1xuXG52YXIgd2Vla1JhbmdlRm9ybWF0JDIgPSBmdW5jdGlvbiB3ZWVrUmFuZ2VGb3JtYXQoX3JlZjUsIGN1bHR1cmUsIGxvY2FsKSB7XG4gIHZhciBzdGFydCA9IF9yZWY1LnN0YXJ0LFxuICAgICAgZW5kID0gX3JlZjUuZW5kO1xuICByZXR1cm4gbG9jYWwuZm9ybWF0KHN0YXJ0LCAnTU1NIGRkJywgY3VsdHVyZSkgKyAnIOKAkyAnICsgbG9jYWwuZm9ybWF0KGVuZCwgZXEoc3RhcnQsIGVuZCwgJ21vbnRoJykgPyAnZGQnIDogJ01NTSBkZCcsIGN1bHR1cmUpO1xufTtcblxudmFyIGZvcm1hdHMkMiA9IHtcbiAgZGF0ZUZvcm1hdDogJ2RkJyxcbiAgZGF5Rm9ybWF0OiAnZGRkIGRkL01NJyxcbiAgd2Vla2RheUZvcm1hdDogJ2RkZCcsXG4gIHNlbGVjdFJhbmdlRm9ybWF0OiB0aW1lUmFuZ2VGb3JtYXQkMixcbiAgZXZlbnRUaW1lUmFuZ2VGb3JtYXQ6IHRpbWVSYW5nZUZvcm1hdCQyLFxuICBldmVudFRpbWVSYW5nZVN0YXJ0Rm9ybWF0OiB0aW1lUmFuZ2VTdGFydEZvcm1hdCQyLFxuICBldmVudFRpbWVSYW5nZUVuZEZvcm1hdDogdGltZVJhbmdlRW5kRm9ybWF0JDIsXG4gIHRpbWVHdXR0ZXJGb3JtYXQ6ICd0JyxcbiAgbW9udGhIZWFkZXJGb3JtYXQ6ICdZJyxcbiAgZGF5SGVhZGVyRm9ybWF0OiAnZGRkZCBNTU0gZGQnLFxuICBkYXlSYW5nZUhlYWRlckZvcm1hdDogd2Vla1JhbmdlRm9ybWF0JDIsXG4gIGFnZW5kYUhlYWRlckZvcm1hdDogZGF0ZVJhbmdlRm9ybWF0JDMsXG4gIGFnZW5kYURhdGVGb3JtYXQ6ICdkZGQgTU1NIGRkJyxcbiAgYWdlbmRhVGltZUZvcm1hdDogJ3QnLFxuICBhZ2VuZGFUaW1lUmFuZ2VGb3JtYXQ6IHRpbWVSYW5nZUZvcm1hdCQyXG59O1xuZnVuY3Rpb24gb2xkR2xvYmFsaXplIChnbG9iYWxpemUpIHtcbiAgZnVuY3Rpb24gZ2V0Q3VsdHVyZShjdWx0dXJlKSB7XG4gICAgcmV0dXJuIGN1bHR1cmUgPyBnbG9iYWxpemUuZmluZENsb3Nlc3RDdWx0dXJlKGN1bHR1cmUpIDogZ2xvYmFsaXplLmN1bHR1cmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpcnN0T2ZXZWVrKGN1bHR1cmUpIHtcbiAgICBjdWx0dXJlID0gZ2V0Q3VsdHVyZShjdWx0dXJlKTtcbiAgICByZXR1cm4gY3VsdHVyZSAmJiBjdWx0dXJlLmNhbGVuZGFyLmZpcnN0RGF5IHx8IDA7XG4gIH1cblxuICByZXR1cm4gbmV3IERhdGVMb2NhbGl6ZXIoe1xuICAgIGZpcnN0T2ZXZWVrOiBmaXJzdE9mV2VlayxcbiAgICBmb3JtYXRzOiBmb3JtYXRzJDIsXG4gICAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIF9mb3JtYXQsIGN1bHR1cmUpIHtcbiAgICAgIHJldHVybiBnbG9iYWxpemUuZm9ybWF0KHZhbHVlLCBfZm9ybWF0LCBjdWx0dXJlKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZGF0ZVJhbmdlRm9ybWF0JDQgPSBmdW5jdGlvbiBkYXRlUmFuZ2VGb3JtYXQoX3JlZiwgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIHN0YXJ0ID0gX3JlZi5zdGFydCxcbiAgICAgIGVuZCA9IF9yZWYuZW5kO1xuICByZXR1cm4gbG9jYWwuZm9ybWF0KHN0YXJ0LCB7XG4gICAgZGF0ZTogJ3Nob3J0J1xuICB9LCBjdWx0dXJlKSArICcg4oCTICcgKyBsb2NhbC5mb3JtYXQoZW5kLCB7XG4gICAgZGF0ZTogJ3Nob3J0J1xuICB9LCBjdWx0dXJlKTtcbn07XG5cbnZhciB0aW1lUmFuZ2VGb3JtYXQkMyA9IGZ1bmN0aW9uIHRpbWVSYW5nZUZvcm1hdChfcmVmMiwgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIHN0YXJ0ID0gX3JlZjIuc3RhcnQsXG4gICAgICBlbmQgPSBfcmVmMi5lbmQ7XG4gIHJldHVybiBsb2NhbC5mb3JtYXQoc3RhcnQsIHtcbiAgICB0aW1lOiAnc2hvcnQnXG4gIH0sIGN1bHR1cmUpICsgJyDigJMgJyArIGxvY2FsLmZvcm1hdChlbmQsIHtcbiAgICB0aW1lOiAnc2hvcnQnXG4gIH0sIGN1bHR1cmUpO1xufTtcblxudmFyIHRpbWVSYW5nZVN0YXJ0Rm9ybWF0JDMgPSBmdW5jdGlvbiB0aW1lUmFuZ2VTdGFydEZvcm1hdChfcmVmMywgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIHN0YXJ0ID0gX3JlZjMuc3RhcnQ7XG4gIHJldHVybiBsb2NhbC5mb3JtYXQoc3RhcnQsIHtcbiAgICB0aW1lOiAnc2hvcnQnXG4gIH0sIGN1bHR1cmUpICsgJyDigJMgJztcbn07XG5cbnZhciB0aW1lUmFuZ2VFbmRGb3JtYXQkMyA9IGZ1bmN0aW9uIHRpbWVSYW5nZUVuZEZvcm1hdChfcmVmNCwgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIGVuZCA9IF9yZWY0LmVuZDtcbiAgcmV0dXJuICcg4oCTICcgKyBsb2NhbC5mb3JtYXQoZW5kLCB7XG4gICAgdGltZTogJ3Nob3J0J1xuICB9LCBjdWx0dXJlKTtcbn07XG5cbnZhciB3ZWVrUmFuZ2VGb3JtYXQkMyA9IGZ1bmN0aW9uIHdlZWtSYW5nZUZvcm1hdChfcmVmNSwgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIHN0YXJ0ID0gX3JlZjUuc3RhcnQsXG4gICAgICBlbmQgPSBfcmVmNS5lbmQ7XG4gIHJldHVybiBsb2NhbC5mb3JtYXQoc3RhcnQsICdNTU0gZGQnLCBjdWx0dXJlKSArICcg4oCTICcgKyBsb2NhbC5mb3JtYXQoZW5kLCBlcShzdGFydCwgZW5kLCAnbW9udGgnKSA/ICdkZCcgOiAnTU1NIGRkJywgY3VsdHVyZSk7XG59O1xuXG52YXIgZm9ybWF0cyQzID0ge1xuICBkYXRlRm9ybWF0OiAnZGQnLFxuICBkYXlGb3JtYXQ6ICdlZWUgZGQvTU0nLFxuICB3ZWVrZGF5Rm9ybWF0OiAnZWVlJyxcbiAgc2VsZWN0UmFuZ2VGb3JtYXQ6IHRpbWVSYW5nZUZvcm1hdCQzLFxuICBldmVudFRpbWVSYW5nZUZvcm1hdDogdGltZVJhbmdlRm9ybWF0JDMsXG4gIGV2ZW50VGltZVJhbmdlU3RhcnRGb3JtYXQ6IHRpbWVSYW5nZVN0YXJ0Rm9ybWF0JDMsXG4gIGV2ZW50VGltZVJhbmdlRW5kRm9ybWF0OiB0aW1lUmFuZ2VFbmRGb3JtYXQkMyxcbiAgdGltZUd1dHRlckZvcm1hdDoge1xuICAgIHRpbWU6ICdzaG9ydCdcbiAgfSxcbiAgbW9udGhIZWFkZXJGb3JtYXQ6ICdNTU1NIHl5eXknLFxuICBkYXlIZWFkZXJGb3JtYXQ6ICdlZWVlIE1NTSBkZCcsXG4gIGRheVJhbmdlSGVhZGVyRm9ybWF0OiB3ZWVrUmFuZ2VGb3JtYXQkMyxcbiAgYWdlbmRhSGVhZGVyRm9ybWF0OiBkYXRlUmFuZ2VGb3JtYXQkNCxcbiAgYWdlbmRhRGF0ZUZvcm1hdDogJ2VlZSBNTU0gZGQnLFxuICBhZ2VuZGFUaW1lRm9ybWF0OiB7XG4gICAgdGltZTogJ3Nob3J0J1xuICB9LFxuICBhZ2VuZGFUaW1lUmFuZ2VGb3JtYXQ6IHRpbWVSYW5nZUZvcm1hdCQzXG59O1xuZnVuY3Rpb24gZ2xvYmFsaXplIChnbG9iYWxpemUpIHtcbiAgdmFyIGxvY2FsZSA9IGZ1bmN0aW9uIGxvY2FsZShjdWx0dXJlKSB7XG4gICAgcmV0dXJuIGN1bHR1cmUgPyBnbG9iYWxpemUoY3VsdHVyZSkgOiBnbG9iYWxpemU7XG4gIH07IC8vIHJldHVybiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrIGZyb20gdGhlIGxvY2FsZSBkYXRhLiBEZWZhdWx0cyB0byAnd29ybGQnXG4gIC8vIHRlcnJpdG9yeSBpZiBubyB0ZXJyaXRvcnkgaXMgZGVyaXZhYmxlIGZyb20gQ0xEUi5cbiAgLy8gRmFpbGluZyB0byB1c2UgQ0xEUiBzdXBwbGVtZW50YWwgKG5vdCBsb2FkZWQ/KSwgcmV2ZXJ0IHRvIHRoZSBvcmlnaW5hbFxuICAvLyBtZXRob2Qgb2YgZ2V0dGluZyBmaXJzdCBkYXkgb2Ygd2Vlay5cblxuXG4gIGZ1bmN0aW9uIGZpcnN0T2ZXZWVrKGN1bHR1cmUpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGRheXMgPSBbJ3N1bicsICdtb24nLCAndHVlJywgJ3dlZCcsICd0aHUnLCAnZnJpJywgJ3NhdCddO1xuICAgICAgdmFyIGNsZHIgPSBsb2NhbGUoY3VsdHVyZSkuY2xkcjtcbiAgICAgIHZhciB0ZXJyaXRvcnkgPSBjbGRyLmF0dHJpYnV0ZXMudGVycml0b3J5O1xuICAgICAgdmFyIHdlZWtEYXRhID0gY2xkci5nZXQoJ3N1cHBsZW1lbnRhbCcpLndlZWtEYXRhO1xuICAgICAgdmFyIGZpcnN0RGF5ID0gd2Vla0RhdGEuZmlyc3REYXlbdGVycml0b3J5IHx8ICcwMDEnXTtcbiAgICAgIHJldHVybiBkYXlzLmluZGV4T2YoZmlyc3REYXkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBhY2N1cmF0ZWx5IGRldGVybWluZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuJyArICcgSXMgc3VwcGxlbWVudGFsIGRhdGEgbG9hZGVkIGludG8gQ0xEUj8nKTtcbiAgICAgIH0gLy8gbWF5YmUgY2xkciBzdXBwbGVtZW50YWwgaXMgbm90IGxvYWRlZD8gcmV2ZXJ0IHRvIG9yaWdpbmFsIG1ldGhvZFxuXG5cbiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTsgLy9jbGRyLWRhdGEgZG9lc24ndCBzZWVtIHRvIGJlIHplcm8gYmFzZWRcblxuICAgICAgdmFyIGxvY2FsZURheSA9IE1hdGgubWF4KHBhcnNlSW50KGxvY2FsZShjdWx0dXJlKS5mb3JtYXREYXRlKGRhdGUsIHtcbiAgICAgICAgcmF3OiAnZSdcbiAgICAgIH0pLCAxMCkgLSAxLCAwKTtcbiAgICAgIHJldHVybiBNYXRoLmFicyhkYXRlLmdldERheSgpIC0gbG9jYWxlRGF5KTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWdsb2JhbGl6ZS5sb2FkKSByZXR1cm4gb2xkR2xvYmFsaXplKGdsb2JhbGl6ZSk7XG4gIHJldHVybiBuZXcgRGF0ZUxvY2FsaXplcih7XG4gICAgZmlyc3RPZldlZWs6IGZpcnN0T2ZXZWVrLFxuICAgIGZvcm1hdHM6IGZvcm1hdHMkMyxcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSwgX2Zvcm1hdCwgY3VsdHVyZSkge1xuICAgICAgX2Zvcm1hdCA9IHR5cGVvZiBfZm9ybWF0ID09PSAnc3RyaW5nJyA/IHtcbiAgICAgICAgcmF3OiBfZm9ybWF0XG4gICAgICB9IDogX2Zvcm1hdDtcbiAgICAgIHJldHVybiBsb2NhbGUoY3VsdHVyZSkuZm9ybWF0RGF0ZSh2YWx1ZSwgX2Zvcm1hdCk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRhdGVSYW5nZUZvcm1hdCQ1ID0gZnVuY3Rpb24gZGF0ZVJhbmdlRm9ybWF0KF9yZWYsIGN1bHR1cmUsIGxvY2FsKSB7XG4gIHZhciBzdGFydCA9IF9yZWYuc3RhcnQsXG4gICAgICBlbmQgPSBfcmVmLmVuZDtcbiAgcmV0dXJuIGxvY2FsLmZvcm1hdChzdGFydCwgJ1AnLCBjdWx0dXJlKSArIFwiIFxcdTIwMTMgXCIgKyBsb2NhbC5mb3JtYXQoZW5kLCAnUCcsIGN1bHR1cmUpO1xufTtcblxudmFyIHRpbWVSYW5nZUZvcm1hdCQ0ID0gZnVuY3Rpb24gdGltZVJhbmdlRm9ybWF0KF9yZWYyLCBjdWx0dXJlLCBsb2NhbCkge1xuICB2YXIgc3RhcnQgPSBfcmVmMi5zdGFydCxcbiAgICAgIGVuZCA9IF9yZWYyLmVuZDtcbiAgcmV0dXJuIGxvY2FsLmZvcm1hdChzdGFydCwgJ3AnLCBjdWx0dXJlKSArIFwiIFxcdTIwMTMgXCIgKyBsb2NhbC5mb3JtYXQoZW5kLCAncCcsIGN1bHR1cmUpO1xufTtcblxudmFyIHRpbWVSYW5nZVN0YXJ0Rm9ybWF0JDQgPSBmdW5jdGlvbiB0aW1lUmFuZ2VTdGFydEZvcm1hdChfcmVmMywgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIHN0YXJ0ID0gX3JlZjMuc3RhcnQ7XG4gIHJldHVybiBsb2NhbC5mb3JtYXQoc3RhcnQsICdoOm1tYScsIGN1bHR1cmUpICsgXCIgXFx1MjAxMyBcIjtcbn07XG5cbnZhciB0aW1lUmFuZ2VFbmRGb3JtYXQkNCA9IGZ1bmN0aW9uIHRpbWVSYW5nZUVuZEZvcm1hdChfcmVmNCwgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIGVuZCA9IF9yZWY0LmVuZDtcbiAgcmV0dXJuIFwiIFxcdTIwMTMgXCIgKyBsb2NhbC5mb3JtYXQoZW5kLCAnaDptbWEnLCBjdWx0dXJlKTtcbn07XG5cbnZhciB3ZWVrUmFuZ2VGb3JtYXQkNCA9IGZ1bmN0aW9uIHdlZWtSYW5nZUZvcm1hdChfcmVmNSwgY3VsdHVyZSwgbG9jYWwpIHtcbiAgdmFyIHN0YXJ0ID0gX3JlZjUuc3RhcnQsXG4gICAgICBlbmQgPSBfcmVmNS5lbmQ7XG4gIHJldHVybiBsb2NhbC5mb3JtYXQoc3RhcnQsICdNTU1NIGRkJywgY3VsdHVyZSkgKyBcIiBcXHUyMDEzIFwiICsgbG9jYWwuZm9ybWF0KGVuZCwgZXEoc3RhcnQsIGVuZCwgJ21vbnRoJykgPyAnZGQnIDogJ01NTU0gZGQnLCBjdWx0dXJlKTtcbn07XG5cbnZhciBmb3JtYXRzJDQgPSB7XG4gIGRhdGVGb3JtYXQ6ICdkZCcsXG4gIGRheUZvcm1hdDogJ2RkIGVlZScsXG4gIHdlZWtkYXlGb3JtYXQ6ICdjY2NjJyxcbiAgc2VsZWN0UmFuZ2VGb3JtYXQ6IHRpbWVSYW5nZUZvcm1hdCQ0LFxuICBldmVudFRpbWVSYW5nZUZvcm1hdDogdGltZVJhbmdlRm9ybWF0JDQsXG4gIGV2ZW50VGltZVJhbmdlU3RhcnRGb3JtYXQ6IHRpbWVSYW5nZVN0YXJ0Rm9ybWF0JDQsXG4gIGV2ZW50VGltZVJhbmdlRW5kRm9ybWF0OiB0aW1lUmFuZ2VFbmRGb3JtYXQkNCxcbiAgdGltZUd1dHRlckZvcm1hdDogJ3AnLFxuICBtb250aEhlYWRlckZvcm1hdDogJ01NTU0geXl5eScsXG4gIGRheUhlYWRlckZvcm1hdDogJ2NjY2MgTU1NIGRkJyxcbiAgZGF5UmFuZ2VIZWFkZXJGb3JtYXQ6IHdlZWtSYW5nZUZvcm1hdCQ0LFxuICBhZ2VuZGFIZWFkZXJGb3JtYXQ6IGRhdGVSYW5nZUZvcm1hdCQ1LFxuICBhZ2VuZGFEYXRlRm9ybWF0OiAnY2NjIE1NTSBkZCcsXG4gIGFnZW5kYVRpbWVGb3JtYXQ6ICdwJyxcbiAgYWdlbmRhVGltZVJhbmdlRm9ybWF0OiB0aW1lUmFuZ2VGb3JtYXQkNFxufTtcblxudmFyIGRhdGVGbnNMb2NhbGl6ZXIgPSBmdW5jdGlvbiBkYXRlRm5zTG9jYWxpemVyKF9yZWY2KSB7XG4gIHZhciBzdGFydE9mV2VlayA9IF9yZWY2LnN0YXJ0T2ZXZWVrLFxuICAgICAgZ2V0RGF5ID0gX3JlZjYuZ2V0RGF5LFxuICAgICAgX2Zvcm1hdCA9IF9yZWY2LmZvcm1hdCxcbiAgICAgIGxvY2FsZXMgPSBfcmVmNi5sb2NhbGVzO1xuICByZXR1cm4gbmV3IERhdGVMb2NhbGl6ZXIoe1xuICAgIGZvcm1hdHM6IGZvcm1hdHMkNCxcbiAgICBmaXJzdE9mV2VlazogZnVuY3Rpb24gZmlyc3RPZldlZWsoY3VsdHVyZSkge1xuICAgICAgcmV0dXJuIGdldERheShzdGFydE9mV2VlayhuZXcgRGF0ZSgpLCB7XG4gICAgICAgIGxvY2FsZTogbG9jYWxlc1tjdWx0dXJlXVxuICAgICAgfSkpO1xuICAgIH0sXG4gICAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIGZvcm1hdFN0cmluZywgY3VsdHVyZSkge1xuICAgICAgcmV0dXJuIF9mb3JtYXQobmV3IERhdGUodmFsdWUpLCBmb3JtYXRTdHJpbmcsIHtcbiAgICAgICAgbG9jYWxlOiBsb2NhbGVzW2N1bHR1cmVdXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGNvbXBvbmVudHMgPSB7XG4gIGV2ZW50V3JhcHBlcjogTm9vcFdyYXBwZXIsXG4gIHRpbWVTbG90V3JhcHBlcjogTm9vcFdyYXBwZXIsXG4gIGRhdGVDZWxsV3JhcHBlcjogTm9vcFdyYXBwZXJcbn07XG5cbmV4cG9ydCB7IENhbGVuZGFyJDEgYXMgQ2FsZW5kYXIsIERhdGVMb2NhbGl6ZXIsIG5hdmlnYXRlIGFzIE5hdmlnYXRlLCB2aWV3cyBhcyBWaWV3cywgY29tcG9uZW50cywgZGF0ZUZuc0xvY2FsaXplciwgZ2xvYmFsaXplIGFzIGdsb2JhbGl6ZUxvY2FsaXplciwgbHV4b24gYXMgbHV4b25Mb2NhbGl6ZXIsIG1vbWVudCBhcyBtb21lbnRMb2NhbGl6ZXIsIG1vdmVEYXRlIGFzIG1vdmUgfTtcbiIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cztcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2YuanNcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnZpZXdzID0gZXhwb3J0cy5uYXZpZ2F0ZSA9IHZvaWQgMDtcbnZhciBuYXZpZ2F0ZSA9IHtcbiAgUFJFVklPVVM6ICdQUkVWJyxcbiAgTkVYVDogJ05FWFQnLFxuICBUT0RBWTogJ1RPREFZJyxcbiAgREFURTogJ0RBVEUnXG59O1xuZXhwb3J0cy5uYXZpZ2F0ZSA9IG5hdmlnYXRlO1xudmFyIHZpZXdzID0ge1xuICBNT05USDogJ21vbnRoJyxcbiAgV0VFSzogJ3dlZWsnLFxuICBXT1JLX1dFRUs6ICd3b3JrX3dlZWsnLFxuICBEQVk6ICdkYXknLFxuICBBR0VOREE6ICdhZ2VuZGEnXG59O1xuZXhwb3J0cy52aWV3cyA9IHZpZXdzOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuRGF5TGF5b3V0QWxnb3JpdGhtUHJvcFR5cGUgPSBleHBvcnRzLnZpZXdzID0gZXhwb3J0cy5kYXRlUmFuZ2VGb3JtYXQgPSBleHBvcnRzLmRhdGVGb3JtYXQgPSBleHBvcnRzLmFjY2Vzc29yID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcblxudmFyIHZpZXdOYW1lcyA9IE9iamVjdC5rZXlzKF9jb25zdGFudHMudmlld3MpLm1hcChmdW5jdGlvbiAoaykge1xuICByZXR1cm4gX2NvbnN0YW50cy52aWV3c1trXTtcbn0pO1xuXG52YXIgYWNjZXNzb3IgPSBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pO1xuXG5leHBvcnRzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG52YXIgZGF0ZUZvcm1hdCA9IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnk7XG5leHBvcnRzLmRhdGVGb3JtYXQgPSBkYXRlRm9ybWF0O1xudmFyIGRhdGVSYW5nZUZvcm1hdCA9IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jO1xuLyoqXG4gKiBhY2NlcHRzIGVpdGhlciBhbiBhcnJheSBvZiBidWlsdGluIHZpZXcgbmFtZXM6XG4gKlxuICogYGBgXG4gKiB2aWV3cz17Wydtb250aCcsICdkYXknLCAnYWdlbmRhJ119XG4gKiBgYGBcbiAqXG4gKiBvciBhbiBvYmplY3QgaGFzaCBvZiB0aGUgdmlldyBuYW1lIGFuZCB0aGUgY29tcG9uZW50IChvciBib29sZWFuIGZvciBidWlsdGluKVxuICpcbiAqIGBgYFxuICogdmlld3M9e3tcbiAqICAgbW9udGg6IHRydWUsXG4gKiAgIHdlZWs6IGZhbHNlLFxuICogICB3b3Jrd2VlazogV29ya1dlZWtWaWV3Q29tcG9uZW50LFxuICogfX1cbiAqIGBgYFxuICovXG5cbmV4cG9ydHMuZGF0ZVJhbmdlRm9ybWF0ID0gZGF0ZVJhbmdlRm9ybWF0O1xuXG52YXIgdmlld3MgPSBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2Yodmlld05hbWVzKSksIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RPZihmdW5jdGlvbiAocHJvcCwga2V5KSB7XG4gIHZhciBpc0J1aWx0aW5WaWV3ID0gdmlld05hbWVzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgdHlwZW9mIHByb3Bba2V5XSA9PT0gJ2Jvb2xlYW4nO1xuXG4gIGlmIChpc0J1aWx0aW5WaWV3KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50VHlwZS5hcHBseShfcHJvcFR5cGVzLmRlZmF1bHQsIFtwcm9wLCBrZXldLmNvbmNhdChhcmdzKSk7XG4gIH1cbn0pXSk7XG5cbmV4cG9ydHMudmlld3MgPSB2aWV3cztcblxudmFyIERheUxheW91dEFsZ29yaXRobVByb3BUeXBlID0gX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnb3ZlcmxhcCcsICduby1vdmVybGFwJ10pLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pO1xuXG5leHBvcnRzLkRheUxheW91dEFsZ29yaXRobVByb3BUeXBlID0gRGF5TGF5b3V0QWxnb3JpdGhtUHJvcFR5cGU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG5leHBvcnRzLndyYXBBY2Nlc3NvciA9IHZvaWQgMDtcblxuLyoqXG4gKiBSZXRyaWV2ZSB2aWEgYW4gYWNjZXNzb3ItbGlrZSBwcm9wZXJ0eVxuICpcbiAqICAgIGFjY2Vzc29yKG9iaiwgJ25hbWUnKSAgIC8vID0+IHJldHJpZXZlcyBvYmpbJ25hbWUnXVxuICogICAgYWNjZXNzb3IoZGF0YSwgZnVuYykgICAgLy8gPT4gcmV0cmlldmVzIGZ1bmMoZGF0YSlcbiAqICAgIC4uLiBvdGhlcndpc2UgbnVsbFxuICovXG5mdW5jdGlvbiBhY2Nlc3NvcihkYXRhLCBmaWVsZCkge1xuICB2YXIgdmFsdWUgPSBudWxsO1xuICBpZiAodHlwZW9mIGZpZWxkID09PSAnZnVuY3Rpb24nKSB2YWx1ZSA9IGZpZWxkKGRhdGEpO2Vsc2UgaWYgKHR5cGVvZiBmaWVsZCA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmIGRhdGEgIT0gbnVsbCAmJiBmaWVsZCBpbiBkYXRhKSB2YWx1ZSA9IGRhdGFbZmllbGRdO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciB3cmFwQWNjZXNzb3IgPSBmdW5jdGlvbiB3cmFwQWNjZXNzb3IoYWNjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBhY2Nlc3NvcihkYXRhLCBhY2MpO1xuICB9O1xufTtcblxuZXhwb3J0cy53cmFwQWNjZXNzb3IgPSB3cmFwQWNjZXNzb3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5EbkRDb250ZXh0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgRG5EQ29udGV4dCA9IC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KCk7XG5cbmV4cG9ydHMuRG5EQ29udGV4dCA9IERuRENvbnRleHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jbHN4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xzeFwiKSk7XG5cbnZhciBfYWNjZXNzb3JzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL2FjY2Vzc29yc1wiKTtcblxudmFyIF9EbkRDb250ZXh0ID0gcmVxdWlyZShcIi4vRG5EQ29udGV4dFwiKTtcblxudmFyIEV2ZW50V3JhcHBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEV2ZW50V3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRXZlbnRXcmFwcGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUmVzaXplVXAgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUuYnV0dG9uICE9PSAwKSByZXR1cm47XG5cbiAgICAgIF90aGlzLmNvbnRleHQuZHJhZ2dhYmxlLm9uQmVnaW5BY3Rpb24oX3RoaXMucHJvcHMuZXZlbnQsICdyZXNpemUnLCAnVVAnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVzaXplRG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS5idXR0b24gIT09IDApIHJldHVybjtcblxuICAgICAgX3RoaXMuY29udGV4dC5kcmFnZ2FibGUub25CZWdpbkFjdGlvbihfdGhpcy5wcm9wcy5ldmVudCwgJ3Jlc2l6ZScsICdET1dOJyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlc2l6ZUxlZnQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUuYnV0dG9uICE9PSAwKSByZXR1cm47XG5cbiAgICAgIF90aGlzLmNvbnRleHQuZHJhZ2dhYmxlLm9uQmVnaW5BY3Rpb24oX3RoaXMucHJvcHMuZXZlbnQsICdyZXNpemUnLCAnTEVGVCcpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXNpemVSaWdodCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS5idXR0b24gIT09IDApIHJldHVybjtcblxuICAgICAgX3RoaXMuY29udGV4dC5kcmFnZ2FibGUub25CZWdpbkFjdGlvbihfdGhpcy5wcm9wcy5ldmVudCwgJ3Jlc2l6ZScsICdSSUdIVCcpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVTdGFydERyYWdnaW5nID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLmJ1dHRvbiAhPT0gMCkgcmV0dXJuOyAvLyBoYWNrOiBiZWNhdXNlIG9mIHRoZSB3YXkgdGhlIGFuY2hvcnMgYXJlIGFycmFuZ2VkIGluIHRoZSBET00sIHJlc2l6ZVxuICAgICAgLy8gYW5jaG9yIGV2ZW50cyB3aWxsIGJ1YmJsZSB1cCB0byB0aGUgbW92ZSBhbmNob3IgbGlzdGVuZXIuIERvbid0IHN0YXJ0XG4gICAgICAvLyBtb3ZlIG9wZXJhdGlvbnMgd2hlbiB3ZSdyZSBvbiBhIHJlc2l6ZSBhbmNob3IuXG5cbiAgICAgIHZhciBpc1Jlc2l6ZUhhbmRsZSA9IGUudGFyZ2V0LmNsYXNzTmFtZS5pbmNsdWRlcygncmJjLWFkZG9ucy1kbmQtcmVzaXplJyk7XG4gICAgICBpZiAoIWlzUmVzaXplSGFuZGxlKSBfdGhpcy5jb250ZXh0LmRyYWdnYWJsZS5vbkJlZ2luQWN0aW9uKF90aGlzLnByb3BzLmV2ZW50LCAnbW92ZScpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRXZlbnRXcmFwcGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyQW5jaG9yID0gZnVuY3Rpb24gcmVuZGVyQW5jaG9yKGRpcmVjdGlvbikge1xuICAgIHZhciBjbHMgPSBkaXJlY3Rpb24gPT09ICdVcCcgfHwgZGlyZWN0aW9uID09PSAnRG93bicgPyAnbnMnIDogJ2V3JztcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInJiYy1hZGRvbnMtZG5kLXJlc2l6ZS1cIiArIGNscyArIFwiLWFuY2hvclwiLFxuICAgICAgb25Nb3VzZURvd246IHRoaXNbXCJoYW5kbGVSZXNpemVcIiArIGRpcmVjdGlvbl1cbiAgICB9LCAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwicmJjLWFkZG9ucy1kbmQtcmVzaXplLVwiICsgY2xzICsgXCItaWNvblwiXG4gICAgfSkpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZXZlbnQgPSBfdGhpcyRwcm9wcy5ldmVudCxcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzLnR5cGUsXG4gICAgICAgIGNvbnRpbnVlc1ByaW9yID0gX3RoaXMkcHJvcHMuY29udGludWVzUHJpb3IsXG4gICAgICAgIGNvbnRpbnVlc0FmdGVyID0gX3RoaXMkcHJvcHMuY29udGludWVzQWZ0ZXIsXG4gICAgICAgIHJlc2l6YWJsZSA9IF90aGlzJHByb3BzLnJlc2l6YWJsZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIGlmIChldmVudC5fX2lzUHJldmlldykgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbHN4LmRlZmF1bHQpKGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSwgJ3JiYy1hZGRvbnMtZG5kLWRyYWctcHJldmlldycpXG4gICAgfSk7XG4gICAgdmFyIGRyYWdnYWJsZSA9IHRoaXMuY29udGV4dC5kcmFnZ2FibGU7XG4gICAgdmFyIGRyYWdnYWJsZUFjY2Vzc29yID0gZHJhZ2dhYmxlLmRyYWdnYWJsZUFjY2Vzc29yLFxuICAgICAgICByZXNpemFibGVBY2Nlc3NvciA9IGRyYWdnYWJsZS5yZXNpemFibGVBY2Nlc3NvcjtcbiAgICB2YXIgaXNEcmFnZ2FibGUgPSBkcmFnZ2FibGVBY2Nlc3NvciA/ICEhKDAsIF9hY2Nlc3NvcnMuYWNjZXNzb3IpKGV2ZW50LCBkcmFnZ2FibGVBY2Nlc3NvcikgOiB0cnVlO1xuICAgIC8qIEV2ZW50IGlzIG5vdCBkcmFnZ2FibGUsIG5vIG5lZWQgdG8gd3JhcCBpdCAqL1xuXG4gICAgaWYgKCFpc0RyYWdnYWJsZSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cbiAgICAvKlxuICAgICAqIFRoZSByZXNpemFiaWxpdHkgb2YgZXZlbnRzIGRlcGVuZHMgb24gd2hldGhlciB0aGV5IGFyZVxuICAgICAqIGFsbERheSBldmVudHMgYW5kIGhvdyB0aGV5IGFyZSBkaXNwbGF5ZWQuXG4gICAgICpcbiAgICAgKiAxLiBJZiB0aGUgZXZlbnQgaXMgYmVpbmcgc2hvd24gaW4gYW4gZXZlbnQgcm93IChiZWNhdXNlXG4gICAgICogaXQgaXMgYW4gYWxsRGF5IGV2ZW50IHNob3duIGluIHRoZSBoZWFkZXIgcm93IG9yIGJlY2F1c2UgYXNcbiAgICAgKiBpbiBtb250aCB2aWV3IHRoZSB2aWV3IGlzIHNob3dpbmcgYWxsIGV2ZW50cyBhcyByb3dzKSB0aGVuIHdlXG4gICAgICogYWxsb3cgZWFzdC13ZXN0IHJlc2l6aW5nLlxuICAgICAqXG4gICAgICogMi4gT3RoZXJ3aXNlIHRoZSBldmVudCBpcyBiZWluZyBkaXNwbGF5ZWRcbiAgICAgKiBub3JtYWxseSwgd2UgY2FuIGRyYWcgaXQgbm9ydGgtc291dGggdG8gcmVzaXplIHRoZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIFNlZSBgRHJvcFdyYXBwZXJzYCBmb3IgaGFuZGxpbmcgb2YgdGhlIGRyb3Agb2Ygc3VjaCBldmVudHMuXG4gICAgICpcbiAgICAgKiBOb3R3aXRoc3RhbmRpbmcgdGhlIGFib3ZlLCB3ZSBuZXZlciBzaG93IGRyYWcgYW5jaG9ycyBmb3JcbiAgICAgKiBldmVudHMgd2hpY2ggY29udGludWUgYmV5b25kIGN1cnJlbnQgY29tcG9uZW50LiBUaGlzIGhhcHBlbnNcbiAgICAgKiBpbiB0aGUgbWlkZGxlIG9mIGV2ZW50cyB3aGVuIHNob3dNdWx0aURheSBpcyB0cnVlLCBhbmQgdG9cbiAgICAgKiBldmVudHMgYXQgdGhlIGVkZ2VzIG9mIHRoZSBjYWxlbmRhcidzIG1pbi9tYXggbG9jYXRpb24uXG4gICAgICovXG5cblxuICAgIHZhciBpc1Jlc2l6YWJsZSA9IHJlc2l6YWJsZSAmJiAocmVzaXphYmxlQWNjZXNzb3IgPyAhISgwLCBfYWNjZXNzb3JzLmFjY2Vzc29yKShldmVudCwgcmVzaXphYmxlQWNjZXNzb3IpIDogdHJ1ZSk7XG5cbiAgICBpZiAoaXNSZXNpemFibGUgfHwgaXNEcmFnZ2FibGUpIHtcbiAgICAgIC8qXG4gICAgICAgKiBwcm9wcy5jaGlsZHJlbiBpcyB0aGUgc2luZ3VsYXIgPEV2ZW50PiBjb21wb25lbnQuXG4gICAgICAgKiBCaWdDYWxlbmRhciBwb3NpdGlvbnMgdGhlIEV2ZW50IGFib2x1dGVseSBhbmQgd2VcbiAgICAgICAqIG5lZWQgdGhlIGFuY2hvcnMgdG8gYmUgcGFydCBvZiB0aGF0IHBvc2l0aW9uaW5nLlxuICAgICAgICogU28gd2UgaW5zZXJ0IHRoZSBhbmNob3JzIGluc2lkZSB0aGUgRXZlbnQncyBjaGlsZHJlblxuICAgICAgICogcmF0aGVyIHRoYW4gd3JhcCB0aGUgRXZlbnQgaGVyZSBhcyB0aGUgbGF0dGVyIGFwcHJvYWNoXG4gICAgICAgKiB3b3VsZCBsb3NlIHRoZSBwb3NpdGlvbmluZy5cbiAgICAgICAqL1xuICAgICAgdmFyIG5ld1Byb3BzID0ge1xuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVTdGFydERyYWdnaW5nLFxuICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlU3RhcnREcmFnZ2luZ1xuICAgICAgfTtcblxuICAgICAgaWYgKGlzUmVzaXphYmxlKSB7XG4gICAgICAgIC8vIHJlcGxhY2Ugb3JpZ2luYWwgZXZlbnQgY2hpbGQgd2l0aCBhbmNob3ItZW1iZWxsaXNoZWQgY2hpbGRcbiAgICAgICAgdmFyIFN0YXJ0QW5jaG9yID0gbnVsbDtcbiAgICAgICAgdmFyIEVuZEFuY2hvciA9IG51bGw7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkYXRlJykge1xuICAgICAgICAgIFN0YXJ0QW5jaG9yID0gIWNvbnRpbnVlc1ByaW9yICYmIHRoaXMucmVuZGVyQW5jaG9yKCdMZWZ0Jyk7XG4gICAgICAgICAgRW5kQW5jaG9yID0gIWNvbnRpbnVlc0FmdGVyICYmIHRoaXMucmVuZGVyQW5jaG9yKCdSaWdodCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFN0YXJ0QW5jaG9yID0gIWNvbnRpbnVlc1ByaW9yICYmIHRoaXMucmVuZGVyQW5jaG9yKCdVcCcpO1xuICAgICAgICAgIEVuZEFuY2hvciA9ICFjb250aW51ZXNBZnRlciAmJiB0aGlzLnJlbmRlckFuY2hvcignRG93bicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3UHJvcHMuY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJiYy1hZGRvbnMtZG5kLXJlc2l6YWJsZVwiXG4gICAgICAgIH0sIFN0YXJ0QW5jaG9yLCBjaGlsZHJlbi5wcm9wcy5jaGlsZHJlbiwgRW5kQW5jaG9yKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRyYWdnYWJsZS5kcmFnQW5kRHJvcEFjdGlvbi5pbnRlcmFjdGluZyAmJiAvLyBpZiBhbiBldmVudCBpcyBiZWluZyBkcmFnZ2VkIHJpZ2h0IG5vd1xuICAgICAgZHJhZ2dhYmxlLmRyYWdBbmREcm9wQWN0aW9uLmV2ZW50ID09PSBldmVudCAvLyBhbmQgaXQncyB0aGUgY3VycmVudCBldmVudFxuICAgICAgKSB7XG4gICAgICAgIC8vIGFkZCBhIG5ldyBjbGFzcyB0byBpdFxuICAgICAgICBuZXdQcm9wcy5jbGFzc05hbWUgPSAoMCwgX2Nsc3guZGVmYXVsdCkoY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lLCAncmJjLWFkZG9ucy1kbmQtZHJhZ2dlZC1ldmVudCcpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIG5ld1Byb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH07XG5cbiAgcmV0dXJuIEV2ZW50V3JhcHBlcjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuRXZlbnRXcmFwcGVyLmNvbnRleHRUeXBlID0gX0RuRENvbnRleHQuRG5EQ29udGV4dDtcbkV2ZW50V3JhcHBlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2RhdGUnLCAndGltZSddKSxcbiAgZXZlbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcbiAgZHJhZ2dhYmxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgYWxsRGF5OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgaXNSb3c6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBjb250aW51ZXNQcmlvcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGNvbnRpbnVlc0FmdGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgaXNEcmFnZ2luZzogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGlzUmVzaXppbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICByZXNpemFibGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59IDoge307XG52YXIgX2RlZmF1bHQgPSBFdmVudFdyYXBwZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZ2V0RXZlbnROb2RlRnJvbVBvaW50ID0gZ2V0RXZlbnROb2RlRnJvbVBvaW50O1xuZXhwb3J0cy5pc0V2ZW50ID0gaXNFdmVudDtcbmV4cG9ydHMub2JqZWN0c0NvbGxpZGUgPSBvYmplY3RzQ29sbGlkZTtcbmV4cG9ydHMuZ2V0Qm91bmRzRm9yTm9kZSA9IGdldEJvdW5kc0Zvck5vZGU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9jb250YWluc1wiKSk7XG5cbnZhciBfY2xvc2VzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL2Nsb3Nlc3RcIikpO1xuXG52YXIgX2xpc3RlbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL2xpc3RlblwiKSk7XG5cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgdGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgIHRhcmdldCA9IGRvY3VtZW50O1xuICB9XG5cbiAgcmV0dXJuICgwLCBfbGlzdGVuLmRlZmF1bHQpKHRhcmdldCwgdHlwZSwgaGFuZGxlciwge1xuICAgIHBhc3NpdmU6IGZhbHNlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc092ZXJDb250YWluZXIoY29udGFpbmVyLCB4LCB5KSB7XG4gIHJldHVybiAhY29udGFpbmVyIHx8ICgwLCBfY29udGFpbnMuZGVmYXVsdCkoY29udGFpbmVyLCBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHkpKTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnROb2RlRnJvbVBvaW50KG5vZGUsIF9yZWYpIHtcbiAgdmFyIGNsaWVudFggPSBfcmVmLmNsaWVudFgsXG4gICAgICBjbGllbnRZID0gX3JlZi5jbGllbnRZO1xuICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChjbGllbnRYLCBjbGllbnRZKTtcbiAgcmV0dXJuICgwLCBfY2xvc2VzdC5kZWZhdWx0KSh0YXJnZXQsICcucmJjLWV2ZW50Jywgbm9kZSk7XG59XG5cbmZ1bmN0aW9uIGlzRXZlbnQobm9kZSwgYm91bmRzKSB7XG4gIHJldHVybiAhIWdldEV2ZW50Tm9kZUZyb21Qb2ludChub2RlLCBib3VuZHMpO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudENvb3JkaW5hdGVzKGUpIHtcbiAgdmFyIHRhcmdldCA9IGU7XG5cbiAgaWYgKGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoKSB7XG4gICAgdGFyZ2V0ID0gZS50b3VjaGVzWzBdO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjbGllbnRYOiB0YXJnZXQuY2xpZW50WCxcbiAgICBjbGllbnRZOiB0YXJnZXQuY2xpZW50WSxcbiAgICBwYWdlWDogdGFyZ2V0LnBhZ2VYLFxuICAgIHBhZ2VZOiB0YXJnZXQucGFnZVlcbiAgfTtcbn1cblxudmFyIGNsaWNrVG9sZXJhbmNlID0gNTtcbnZhciBjbGlja0ludGVydmFsID0gMjUwO1xuXG52YXIgU2VsZWN0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VsZWN0aW9uKG5vZGUsIF90ZW1wKSB7XG4gICAgdmFyIF9yZWYyID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIF9yZWYyJGdsb2JhbCA9IF9yZWYyLmdsb2JhbCxcbiAgICAgICAgZ2xvYmFsID0gX3JlZjIkZ2xvYmFsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGdsb2JhbCxcbiAgICAgICAgX3JlZjIkbG9uZ1ByZXNzVGhyZXNoID0gX3JlZjIubG9uZ1ByZXNzVGhyZXNob2xkLFxuICAgICAgICBsb25nUHJlc3NUaHJlc2hvbGQgPSBfcmVmMiRsb25nUHJlc3NUaHJlc2ggPT09IHZvaWQgMCA/IDI1MCA6IF9yZWYyJGxvbmdQcmVzc1RocmVzaDtcblxuICAgIHRoaXMuaXNEZXRhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuY29udGFpbmVyID0gbm9kZTtcbiAgICB0aGlzLmdsb2JhbE1vdXNlID0gIW5vZGUgfHwgZ2xvYmFsO1xuICAgIHRoaXMubG9uZ1ByZXNzVGhyZXNob2xkID0gbG9uZ1ByZXNzVGhyZXNob2xkO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5faGFuZGxlSW5pdGlhbEV2ZW50ID0gdGhpcy5faGFuZGxlSW5pdGlhbEV2ZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlTW92ZUV2ZW50ID0gdGhpcy5faGFuZGxlTW92ZUV2ZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlVGVybWluYXRpbmdFdmVudCA9IHRoaXMuX2hhbmRsZVRlcm1pbmF0aW5nRXZlbnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9rZXlMaXN0ZW5lciA9IHRoaXMuX2tleUxpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fZHJvcEZyb21PdXRzaWRlTGlzdGVuZXIgPSB0aGlzLl9kcm9wRnJvbU91dHNpZGVMaXN0ZW5lci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2RyYWdPdmVyRnJvbU91dHNpZGVMaXN0ZW5lciA9IHRoaXMuX2RyYWdPdmVyRnJvbU91dHNpZGVMaXN0ZW5lci5iaW5kKHRoaXMpOyAvLyBGaXhlcyBhbiBpT1MgMTAgYnVnIHdoZXJlIHNjcm9sbGluZyBjb3VsZCBub3QgYmUgcHJldmVudGVkIG9uIHRoZSB3aW5kb3cuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21ldGFmaXp6eS9mbGlja2l0eS9pc3N1ZXMvNDU3I2lzc3VlY29tbWVudC0yNTQ1MDEzNTZcblxuICAgIHRoaXMuX3JlbW92ZVRvdWNoTW92ZVdpbmRvd0xpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZnVuY3Rpb24gKCkge30sIHdpbmRvdyk7XG4gICAgdGhpcy5fcmVtb3ZlS2V5RG93bkxpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2tleUxpc3RlbmVyKTtcbiAgICB0aGlzLl9yZW1vdmVLZXlVcExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9rZXlMaXN0ZW5lcik7XG4gICAgdGhpcy5fcmVtb3ZlRHJvcEZyb21PdXRzaWRlTGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5fZHJvcEZyb21PdXRzaWRlTGlzdGVuZXIpO1xuICAgIHRoaXMuX3JlbW92ZURyYWdPdmVyRnJvbU91dHNpZGVMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgdGhpcy5fZHJhZ092ZXJGcm9tT3V0c2lkZUxpc3RlbmVyKTtcblxuICAgIHRoaXMuX2FkZEluaXRpYWxFdmVudExpc3RlbmVyKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2VsZWN0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ub24gPSBmdW5jdGlvbiBvbih0eXBlLCBoYW5kbGVyKSB7XG4gICAgdmFyIGhhbmRsZXJzID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdIHx8ICh0aGlzLl9saXN0ZW5lcnNbdHlwZV0gPSBbXSk7XG4gICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIHZhciBpZHggPSBoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgICAgICBpZiAoaWR4ICE9PSAtMSkgaGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQ7XG4gICAgdmFyIGhhbmRsZXJzID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdIHx8IFtdO1xuICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHJlc3VsdCA9IGZuLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8udGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93bigpIHtcbiAgICB0aGlzLmlzRGV0YWNoZWQgPSB0cnVlO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fcmVtb3ZlVG91Y2hNb3ZlV2luZG93TGlzdGVuZXIgJiYgdGhpcy5fcmVtb3ZlVG91Y2hNb3ZlV2luZG93TGlzdGVuZXIoKTtcbiAgICB0aGlzLl9yZW1vdmVJbml0aWFsRXZlbnRMaXN0ZW5lciAmJiB0aGlzLl9yZW1vdmVJbml0aWFsRXZlbnRMaXN0ZW5lcigpO1xuICAgIHRoaXMuX3JlbW92ZUVuZExpc3RlbmVyICYmIHRoaXMuX3JlbW92ZUVuZExpc3RlbmVyKCk7XG4gICAgdGhpcy5fb25Fc2NMaXN0ZW5lciAmJiB0aGlzLl9vbkVzY0xpc3RlbmVyKCk7XG4gICAgdGhpcy5fcmVtb3ZlTW92ZUxpc3RlbmVyICYmIHRoaXMuX3JlbW92ZU1vdmVMaXN0ZW5lcigpO1xuICAgIHRoaXMuX3JlbW92ZUtleVVwTGlzdGVuZXIgJiYgdGhpcy5fcmVtb3ZlS2V5VXBMaXN0ZW5lcigpO1xuICAgIHRoaXMuX3JlbW92ZUtleURvd25MaXN0ZW5lciAmJiB0aGlzLl9yZW1vdmVLZXlEb3duTGlzdGVuZXIoKTtcbiAgICB0aGlzLl9yZW1vdmVEcm9wRnJvbU91dHNpZGVMaXN0ZW5lciAmJiB0aGlzLl9yZW1vdmVEcm9wRnJvbU91dHNpZGVMaXN0ZW5lcigpO1xuICAgIHRoaXMuX3JlbW92ZURyYWdPdmVyRnJvbU91dHNpZGVMaXN0ZW5lciAmJiB0aGlzLl9yZW1vdmVEcmFnT3ZlckZyb21PdXRzaWRlTGlzdGVuZXIoKTtcbiAgfTtcblxuICBfcHJvdG8uaXNTZWxlY3RlZCA9IGZ1bmN0aW9uIGlzU2VsZWN0ZWQobm9kZSkge1xuICAgIHZhciBib3ggPSB0aGlzLl9zZWxlY3RSZWN0O1xuICAgIGlmICghYm94IHx8ICF0aGlzLnNlbGVjdGluZykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBvYmplY3RzQ29sbGlkZShib3gsIGdldEJvdW5kc0Zvck5vZGUobm9kZSkpO1xuICB9O1xuXG4gIF9wcm90by5maWx0ZXIgPSBmdW5jdGlvbiBmaWx0ZXIoaXRlbXMpIHtcbiAgICB2YXIgYm94ID0gdGhpcy5fc2VsZWN0UmVjdDsgLy9ub3Qgc2VsZWN0aW5nXG5cbiAgICBpZiAoIWJveCB8fCAhdGhpcy5zZWxlY3RpbmcpIHJldHVybiBbXTtcbiAgICByZXR1cm4gaXRlbXMuZmlsdGVyKHRoaXMuaXNTZWxlY3RlZCwgdGhpcyk7XG4gIH0gLy8gQWRkcyBhIGxpc3RlbmVyIHRoYXQgd2lsbCBjYWxsIHRoZSBoYW5kbGVyIG9ubHkgYWZ0ZXIgdGhlIHVzZXIgaGFzIHByZXNzZWQgb24gdGhlIHNjcmVlblxuICAvLyB3aXRob3V0IG1vdmluZyB0aGVpciBmaW5nZXIgZm9yIDI1MG1zLlxuICA7XG5cbiAgX3Byb3RvLl9hZGRMb25nUHJlc3NMaXN0ZW5lciA9IGZ1bmN0aW9uIF9hZGRMb25nUHJlc3NMaXN0ZW5lcihoYW5kbGVyLCBpbml0aWFsRXZlbnQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHRpbWVyID0gbnVsbDtcbiAgICB2YXIgcmVtb3ZlVG91Y2hNb3ZlTGlzdGVuZXIgPSBudWxsO1xuICAgIHZhciByZW1vdmVUb3VjaEVuZExpc3RlbmVyID0gbnVsbDtcblxuICAgIHZhciBoYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydChpbml0aWFsRXZlbnQpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgaGFuZGxlcihpbml0aWFsRXZlbnQpO1xuICAgICAgfSwgX3RoaXMubG9uZ1ByZXNzVGhyZXNob2xkKTtcbiAgICAgIHJlbW92ZVRvdWNoTW92ZUxpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2xlYW51cCgpO1xuICAgICAgfSk7XG4gICAgICByZW1vdmVUb3VjaEVuZExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjbGVhbnVwKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIHJlbW92ZVRvdWNoU3RhcnRMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVUb3VjaFN0YXJ0KTtcblxuICAgIHZhciBjbGVhbnVwID0gZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgIGlmICh0aW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVtb3ZlVG91Y2hNb3ZlTGlzdGVuZXIpIHtcbiAgICAgICAgcmVtb3ZlVG91Y2hNb3ZlTGlzdGVuZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbW92ZVRvdWNoRW5kTGlzdGVuZXIpIHtcbiAgICAgICAgcmVtb3ZlVG91Y2hFbmRMaXN0ZW5lcigpO1xuICAgICAgfVxuXG4gICAgICB0aW1lciA9IG51bGw7XG4gICAgICByZW1vdmVUb3VjaE1vdmVMaXN0ZW5lciA9IG51bGw7XG4gICAgICByZW1vdmVUb3VjaEVuZExpc3RlbmVyID0gbnVsbDtcbiAgICB9O1xuXG4gICAgaWYgKGluaXRpYWxFdmVudCkge1xuICAgICAgaGFuZGxlVG91Y2hTdGFydChpbml0aWFsRXZlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgICByZW1vdmVUb3VjaFN0YXJ0TGlzdGVuZXIoKTtcbiAgICB9O1xuICB9IC8vIExpc3RlbiBmb3IgbW91c2Vkb3duIGFuZCB0b3VjaHN0YXJ0IGV2ZW50cy4gV2hlbiBvbmUgaXMgcmVjZWl2ZWQsIGRpc2FibGUgdGhlIG90aGVyIGFuZCBzZXR1cFxuICAvLyBmdXR1cmUgZXZlbnQgaGFuZGxpbmcgYmFzZWQgb24gdGhlIHR5cGUgb2YgZXZlbnQuXG4gIDtcblxuICBfcHJvdG8uX2FkZEluaXRpYWxFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gX2FkZEluaXRpYWxFdmVudExpc3RlbmVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHJlbW92ZU1vdXNlRG93bkxpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzMi5fcmVtb3ZlSW5pdGlhbEV2ZW50TGlzdGVuZXIoKTtcblxuICAgICAgX3RoaXMyLl9oYW5kbGVJbml0aWFsRXZlbnQoZSk7XG5cbiAgICAgIF90aGlzMi5fcmVtb3ZlSW5pdGlhbEV2ZW50TGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBfdGhpczIuX2hhbmRsZUluaXRpYWxFdmVudCk7XG4gICAgfSk7XG4gICAgdmFyIHJlbW92ZVRvdWNoU3RhcnRMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMyLl9yZW1vdmVJbml0aWFsRXZlbnRMaXN0ZW5lcigpO1xuXG4gICAgICBfdGhpczIuX3JlbW92ZUluaXRpYWxFdmVudExpc3RlbmVyID0gX3RoaXMyLl9hZGRMb25nUHJlc3NMaXN0ZW5lcihfdGhpczIuX2hhbmRsZUluaXRpYWxFdmVudCwgZSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9yZW1vdmVJbml0aWFsRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZU1vdXNlRG93bkxpc3RlbmVyKCk7XG4gICAgICByZW1vdmVUb3VjaFN0YXJ0TGlzdGVuZXIoKTtcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5fZHJvcEZyb21PdXRzaWRlTGlzdGVuZXIgPSBmdW5jdGlvbiBfZHJvcEZyb21PdXRzaWRlTGlzdGVuZXIoZSkge1xuICAgIHZhciBfZ2V0RXZlbnRDb29yZGluYXRlcyA9IGdldEV2ZW50Q29vcmRpbmF0ZXMoZSksXG4gICAgICAgIHBhZ2VYID0gX2dldEV2ZW50Q29vcmRpbmF0ZXMucGFnZVgsXG4gICAgICAgIHBhZ2VZID0gX2dldEV2ZW50Q29vcmRpbmF0ZXMucGFnZVksXG4gICAgICAgIGNsaWVudFggPSBfZ2V0RXZlbnRDb29yZGluYXRlcy5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gX2dldEV2ZW50Q29vcmRpbmF0ZXMuY2xpZW50WTtcblxuICAgIHRoaXMuZW1pdCgnZHJvcEZyb21PdXRzaWRlJywge1xuICAgICAgeDogcGFnZVgsXG4gICAgICB5OiBwYWdlWSxcbiAgICAgIGNsaWVudFg6IGNsaWVudFgsXG4gICAgICBjbGllbnRZOiBjbGllbnRZXG4gICAgfSk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9O1xuXG4gIF9wcm90by5fZHJhZ092ZXJGcm9tT3V0c2lkZUxpc3RlbmVyID0gZnVuY3Rpb24gX2RyYWdPdmVyRnJvbU91dHNpZGVMaXN0ZW5lcihlKSB7XG4gICAgdmFyIF9nZXRFdmVudENvb3JkaW5hdGVzMiA9IGdldEV2ZW50Q29vcmRpbmF0ZXMoZSksXG4gICAgICAgIHBhZ2VYID0gX2dldEV2ZW50Q29vcmRpbmF0ZXMyLnBhZ2VYLFxuICAgICAgICBwYWdlWSA9IF9nZXRFdmVudENvb3JkaW5hdGVzMi5wYWdlWSxcbiAgICAgICAgY2xpZW50WCA9IF9nZXRFdmVudENvb3JkaW5hdGVzMi5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gX2dldEV2ZW50Q29vcmRpbmF0ZXMyLmNsaWVudFk7XG5cbiAgICB0aGlzLmVtaXQoJ2RyYWdPdmVyRnJvbU91dHNpZGUnLCB7XG4gICAgICB4OiBwYWdlWCxcbiAgICAgIHk6IHBhZ2VZLFxuICAgICAgY2xpZW50WDogY2xpZW50WCxcbiAgICAgIGNsaWVudFk6IGNsaWVudFlcbiAgICB9KTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVJbml0aWFsRXZlbnQgPSBmdW5jdGlvbiBfaGFuZGxlSW5pdGlhbEV2ZW50KGUpIHtcbiAgICBpZiAodGhpcy5pc0RldGFjaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIF9nZXRFdmVudENvb3JkaW5hdGVzMyA9IGdldEV2ZW50Q29vcmRpbmF0ZXMoZSksXG4gICAgICAgIGNsaWVudFggPSBfZ2V0RXZlbnRDb29yZGluYXRlczMuY2xpZW50WCxcbiAgICAgICAgY2xpZW50WSA9IF9nZXRFdmVudENvb3JkaW5hdGVzMy5jbGllbnRZLFxuICAgICAgICBwYWdlWCA9IF9nZXRFdmVudENvb3JkaW5hdGVzMy5wYWdlWCxcbiAgICAgICAgcGFnZVkgPSBfZ2V0RXZlbnRDb29yZGluYXRlczMucGFnZVk7XG5cbiAgICB2YXIgbm9kZSA9IHRoaXMuY29udGFpbmVyKCksXG4gICAgICAgIGNvbGxpZGVzLFxuICAgICAgICBvZmZzZXREYXRhOyAvLyBSaWdodCBjbGlja3NcblxuICAgIGlmIChlLndoaWNoID09PSAzIHx8IGUuYnV0dG9uID09PSAyIHx8ICFpc092ZXJDb250YWluZXIobm9kZSwgY2xpZW50WCwgY2xpZW50WSkpIHJldHVybjtcblxuICAgIGlmICghdGhpcy5nbG9iYWxNb3VzZSAmJiBub2RlICYmICEoMCwgX2NvbnRhaW5zLmRlZmF1bHQpKG5vZGUsIGUudGFyZ2V0KSkge1xuICAgICAgdmFyIF9ub3JtYWxpemVEaXN0YW5jZSA9IG5vcm1hbGl6ZURpc3RhbmNlKDApLFxuICAgICAgICAgIHRvcCA9IF9ub3JtYWxpemVEaXN0YW5jZS50b3AsXG4gICAgICAgICAgbGVmdCA9IF9ub3JtYWxpemVEaXN0YW5jZS5sZWZ0LFxuICAgICAgICAgIGJvdHRvbSA9IF9ub3JtYWxpemVEaXN0YW5jZS5ib3R0b20sXG4gICAgICAgICAgcmlnaHQgPSBfbm9ybWFsaXplRGlzdGFuY2UucmlnaHQ7XG5cbiAgICAgIG9mZnNldERhdGEgPSBnZXRCb3VuZHNGb3JOb2RlKG5vZGUpO1xuICAgICAgY29sbGlkZXMgPSBvYmplY3RzQ29sbGlkZSh7XG4gICAgICAgIHRvcDogb2Zmc2V0RGF0YS50b3AgLSB0b3AsXG4gICAgICAgIGxlZnQ6IG9mZnNldERhdGEubGVmdCAtIGxlZnQsXG4gICAgICAgIGJvdHRvbTogb2Zmc2V0RGF0YS5ib3R0b20gKyBib3R0b20sXG4gICAgICAgIHJpZ2h0OiBvZmZzZXREYXRhLnJpZ2h0ICsgcmlnaHRcbiAgICAgIH0sIHtcbiAgICAgICAgdG9wOiBwYWdlWSxcbiAgICAgICAgbGVmdDogcGFnZVhcbiAgICAgIH0pO1xuICAgICAgaWYgKCFjb2xsaWRlcykgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSB0aGlzLmVtaXQoJ2JlZm9yZVNlbGVjdCcsIHRoaXMuX2luaXRpYWxFdmVudERhdGEgPSB7XG4gICAgICBpc1RvdWNoOiAvXnRvdWNoLy50ZXN0KGUudHlwZSksXG4gICAgICB4OiBwYWdlWCxcbiAgICAgIHk6IHBhZ2VZLFxuICAgICAgY2xpZW50WDogY2xpZW50WCxcbiAgICAgIGNsaWVudFk6IGNsaWVudFlcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgc3dpdGNoIChlLnR5cGUpIHtcbiAgICAgIGNhc2UgJ21vdXNlZG93bic6XG4gICAgICAgIHRoaXMuX3JlbW92ZUVuZExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX2hhbmRsZVRlcm1pbmF0aW5nRXZlbnQpO1xuICAgICAgICB0aGlzLl9vbkVzY0xpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZVRlcm1pbmF0aW5nRXZlbnQpO1xuICAgICAgICB0aGlzLl9yZW1vdmVNb3ZlTGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVNb3ZlRXZlbnQpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndG91Y2hzdGFydCc6XG4gICAgICAgIHRoaXMuX2hhbmRsZU1vdmVFdmVudChlKTtcblxuICAgICAgICB0aGlzLl9yZW1vdmVFbmRMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5faGFuZGxlVGVybWluYXRpbmdFdmVudCk7XG4gICAgICAgIHRoaXMuX3JlbW92ZU1vdmVMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZU1vdmVFdmVudCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVUZXJtaW5hdGluZ0V2ZW50ID0gZnVuY3Rpb24gX2hhbmRsZVRlcm1pbmF0aW5nRXZlbnQoZSkge1xuICAgIHZhciBfZ2V0RXZlbnRDb29yZGluYXRlczQgPSBnZXRFdmVudENvb3JkaW5hdGVzKGUpLFxuICAgICAgICBwYWdlWCA9IF9nZXRFdmVudENvb3JkaW5hdGVzNC5wYWdlWCxcbiAgICAgICAgcGFnZVkgPSBfZ2V0RXZlbnRDb29yZGluYXRlczQucGFnZVk7XG5cbiAgICB0aGlzLnNlbGVjdGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlbW92ZUVuZExpc3RlbmVyICYmIHRoaXMuX3JlbW92ZUVuZExpc3RlbmVyKCk7XG4gICAgdGhpcy5fcmVtb3ZlTW92ZUxpc3RlbmVyICYmIHRoaXMuX3JlbW92ZU1vdmVMaXN0ZW5lcigpO1xuICAgIGlmICghdGhpcy5faW5pdGlhbEV2ZW50RGF0YSkgcmV0dXJuO1xuICAgIHZhciBpblJvb3QgPSAhdGhpcy5jb250YWluZXIgfHwgKDAsIF9jb250YWlucy5kZWZhdWx0KSh0aGlzLmNvbnRhaW5lcigpLCBlLnRhcmdldCk7XG4gICAgdmFyIGJvdW5kcyA9IHRoaXMuX3NlbGVjdFJlY3Q7XG4gICAgdmFyIGNsaWNrID0gdGhpcy5pc0NsaWNrKHBhZ2VYLCBwYWdlWSk7XG4gICAgdGhpcy5faW5pdGlhbEV2ZW50RGF0YSA9IG51bGw7XG5cbiAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbWl0KCdyZXNldCcpO1xuICAgIH1cblxuICAgIGlmICghaW5Sb290KSB7XG4gICAgICByZXR1cm4gdGhpcy5lbWl0KCdyZXNldCcpO1xuICAgIH1cblxuICAgIGlmIChjbGljayAmJiBpblJvb3QpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVDbGlja0V2ZW50KGUpO1xuICAgIH0gLy8gVXNlciBkcmFnLWNsaWNrZWQgaW4gdGhlIFNlbGVjdGFibGUgYXJlYVxuXG5cbiAgICBpZiAoIWNsaWNrKSByZXR1cm4gdGhpcy5lbWl0KCdzZWxlY3QnLCBib3VuZHMpO1xuICB9O1xuXG4gIF9wcm90by5faGFuZGxlQ2xpY2tFdmVudCA9IGZ1bmN0aW9uIF9oYW5kbGVDbGlja0V2ZW50KGUpIHtcbiAgICB2YXIgX2dldEV2ZW50Q29vcmRpbmF0ZXM1ID0gZ2V0RXZlbnRDb29yZGluYXRlcyhlKSxcbiAgICAgICAgcGFnZVggPSBfZ2V0RXZlbnRDb29yZGluYXRlczUucGFnZVgsXG4gICAgICAgIHBhZ2VZID0gX2dldEV2ZW50Q29vcmRpbmF0ZXM1LnBhZ2VZLFxuICAgICAgICBjbGllbnRYID0gX2dldEV2ZW50Q29vcmRpbmF0ZXM1LmNsaWVudFgsXG4gICAgICAgIGNsaWVudFkgPSBfZ2V0RXZlbnRDb29yZGluYXRlczUuY2xpZW50WTtcblxuICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIGlmICh0aGlzLl9sYXN0Q2xpY2tEYXRhICYmIG5vdyAtIHRoaXMuX2xhc3RDbGlja0RhdGEudGltZXN0YW1wIDwgY2xpY2tJbnRlcnZhbCkge1xuICAgICAgLy8gRG91YmxlIGNsaWNrIGV2ZW50XG4gICAgICB0aGlzLl9sYXN0Q2xpY2tEYXRhID0gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLmVtaXQoJ2RvdWJsZUNsaWNrJywge1xuICAgICAgICB4OiBwYWdlWCxcbiAgICAgICAgeTogcGFnZVksXG4gICAgICAgIGNsaWVudFg6IGNsaWVudFgsXG4gICAgICAgIGNsaWVudFk6IGNsaWVudFlcbiAgICAgIH0pO1xuICAgIH0gLy8gQ2xpY2sgZXZlbnRcblxuXG4gICAgdGhpcy5fbGFzdENsaWNrRGF0YSA9IHtcbiAgICAgIHRpbWVzdGFtcDogbm93XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdjbGljaycsIHtcbiAgICAgIHg6IHBhZ2VYLFxuICAgICAgeTogcGFnZVksXG4gICAgICBjbGllbnRYOiBjbGllbnRYLFxuICAgICAgY2xpZW50WTogY2xpZW50WVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5faGFuZGxlTW92ZUV2ZW50ID0gZnVuY3Rpb24gX2hhbmRsZU1vdmVFdmVudChlKSB7XG4gICAgaWYgKHRoaXMuX2luaXRpYWxFdmVudERhdGEgPT09IG51bGwgfHwgdGhpcy5pc0RldGFjaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJF9pbml0aWFsRXZlbnREYSA9IHRoaXMuX2luaXRpYWxFdmVudERhdGEsXG4gICAgICAgIHggPSBfdGhpcyRfaW5pdGlhbEV2ZW50RGEueCxcbiAgICAgICAgeSA9IF90aGlzJF9pbml0aWFsRXZlbnREYS55O1xuXG4gICAgdmFyIF9nZXRFdmVudENvb3JkaW5hdGVzNiA9IGdldEV2ZW50Q29vcmRpbmF0ZXMoZSksXG4gICAgICAgIHBhZ2VYID0gX2dldEV2ZW50Q29vcmRpbmF0ZXM2LnBhZ2VYLFxuICAgICAgICBwYWdlWSA9IF9nZXRFdmVudENvb3JkaW5hdGVzNi5wYWdlWTtcblxuICAgIHZhciB3ID0gTWF0aC5hYnMoeCAtIHBhZ2VYKTtcbiAgICB2YXIgaCA9IE1hdGguYWJzKHkgLSBwYWdlWSk7XG4gICAgdmFyIGxlZnQgPSBNYXRoLm1pbihwYWdlWCwgeCksXG4gICAgICAgIHRvcCA9IE1hdGgubWluKHBhZ2VZLCB5KSxcbiAgICAgICAgb2xkID0gdGhpcy5zZWxlY3Rpbmc7IC8vIFByZXZlbnQgZW1pdHRpbmcgc2VsZWN0U3RhcnQgZXZlbnQgdW50aWwgbW91c2UgaXMgbW92ZWQuXG4gICAgLy8gaW4gQ2hyb21lIG9uIFdpbmRvd3MsIG1vdXNlTW92ZSBldmVudCBtYXkgYmUgZmlyZWQganVzdCBhZnRlciBtb3VzZURvd24gZXZlbnQuXG5cbiAgICBpZiAodGhpcy5pc0NsaWNrKHBhZ2VYLCBwYWdlWSkgJiYgIW9sZCAmJiAhKHcgfHwgaCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdGluZyA9IHRydWU7XG4gICAgdGhpcy5fc2VsZWN0UmVjdCA9IHtcbiAgICAgIHRvcDogdG9wLFxuICAgICAgbGVmdDogbGVmdCxcbiAgICAgIHg6IHBhZ2VYLFxuICAgICAgeTogcGFnZVksXG4gICAgICByaWdodDogbGVmdCArIHcsXG4gICAgICBib3R0b206IHRvcCArIGhcbiAgICB9O1xuXG4gICAgaWYgKCFvbGQpIHtcbiAgICAgIHRoaXMuZW1pdCgnc2VsZWN0U3RhcnQnLCB0aGlzLl9pbml0aWFsRXZlbnREYXRhKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNDbGljayhwYWdlWCwgcGFnZVkpKSB0aGlzLmVtaXQoJ3NlbGVjdGluZycsIHRoaXMuX3NlbGVjdFJlY3QpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfTtcblxuICBfcHJvdG8uX2tleUxpc3RlbmVyID0gZnVuY3Rpb24gX2tleUxpc3RlbmVyKGUpIHtcbiAgICB0aGlzLmN0cmwgPSBlLm1ldGFLZXkgfHwgZS5jdHJsS2V5O1xuICB9O1xuXG4gIF9wcm90by5pc0NsaWNrID0gZnVuY3Rpb24gaXNDbGljayhwYWdlWCwgcGFnZVkpIHtcbiAgICB2YXIgX3RoaXMkX2luaXRpYWxFdmVudERhMiA9IHRoaXMuX2luaXRpYWxFdmVudERhdGEsXG4gICAgICAgIHggPSBfdGhpcyRfaW5pdGlhbEV2ZW50RGEyLngsXG4gICAgICAgIHkgPSBfdGhpcyRfaW5pdGlhbEV2ZW50RGEyLnksXG4gICAgICAgIGlzVG91Y2ggPSBfdGhpcyRfaW5pdGlhbEV2ZW50RGEyLmlzVG91Y2g7XG4gICAgcmV0dXJuICFpc1RvdWNoICYmIE1hdGguYWJzKHBhZ2VYIC0geCkgPD0gY2xpY2tUb2xlcmFuY2UgJiYgTWF0aC5hYnMocGFnZVkgLSB5KSA8PSBjbGlja1RvbGVyYW5jZTtcbiAgfTtcblxuICByZXR1cm4gU2VsZWN0aW9uO1xufSgpO1xuLyoqXG4gKiBSZXNvbHZlIHRoZSBkaXNhbmNlIHByb3AgZnJvbSBlaXRoZXIgYW4gSW50IG9yIGFuIE9iamVjdFxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cblxuZnVuY3Rpb24gbm9ybWFsaXplRGlzdGFuY2UoZGlzdGFuY2UpIHtcbiAgaWYgKGRpc3RhbmNlID09PSB2b2lkIDApIHtcbiAgICBkaXN0YW5jZSA9IDA7XG4gIH1cblxuICBpZiAodHlwZW9mIGRpc3RhbmNlICE9PSAnb2JqZWN0JykgZGlzdGFuY2UgPSB7XG4gICAgdG9wOiBkaXN0YW5jZSxcbiAgICBsZWZ0OiBkaXN0YW5jZSxcbiAgICByaWdodDogZGlzdGFuY2UsXG4gICAgYm90dG9tOiBkaXN0YW5jZVxuICB9O1xuICByZXR1cm4gZGlzdGFuY2U7XG59XG4vKipcbiAqIEdpdmVuIHR3byBvYmplY3RzIGNvbnRhaW5pbmcgXCJ0b3BcIiwgXCJsZWZ0XCIsIFwib2Zmc2V0V2lkdGhcIiBhbmQgXCJvZmZzZXRIZWlnaHRcIlxuICogcHJvcGVydGllcywgZGV0ZXJtaW5lIGlmIHRoZXkgY29sbGlkZS5cbiAqIEBwYXJhbSAge09iamVjdHxIVE1MRWxlbWVudH0gYVxuICogQHBhcmFtICB7T2JqZWN0fEhUTUxFbGVtZW50fSBiXG4gKiBAcmV0dXJuIHtib29sfVxuICovXG5cblxuZnVuY3Rpb24gb2JqZWN0c0NvbGxpZGUobm9kZUEsIG5vZGVCLCB0b2xlcmFuY2UpIHtcbiAgaWYgKHRvbGVyYW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgdG9sZXJhbmNlID0gMDtcbiAgfVxuXG4gIHZhciBfZ2V0Qm91bmRzRm9yTm9kZSA9IGdldEJvdW5kc0Zvck5vZGUobm9kZUEpLFxuICAgICAgYVRvcCA9IF9nZXRCb3VuZHNGb3JOb2RlLnRvcCxcbiAgICAgIGFMZWZ0ID0gX2dldEJvdW5kc0Zvck5vZGUubGVmdCxcbiAgICAgIF9nZXRCb3VuZHNGb3JOb2RlJHJpZyA9IF9nZXRCb3VuZHNGb3JOb2RlLnJpZ2h0LFxuICAgICAgYVJpZ2h0ID0gX2dldEJvdW5kc0Zvck5vZGUkcmlnID09PSB2b2lkIDAgPyBhTGVmdCA6IF9nZXRCb3VuZHNGb3JOb2RlJHJpZyxcbiAgICAgIF9nZXRCb3VuZHNGb3JOb2RlJGJvdCA9IF9nZXRCb3VuZHNGb3JOb2RlLmJvdHRvbSxcbiAgICAgIGFCb3R0b20gPSBfZ2V0Qm91bmRzRm9yTm9kZSRib3QgPT09IHZvaWQgMCA/IGFUb3AgOiBfZ2V0Qm91bmRzRm9yTm9kZSRib3Q7XG5cbiAgdmFyIF9nZXRCb3VuZHNGb3JOb2RlMiA9IGdldEJvdW5kc0Zvck5vZGUobm9kZUIpLFxuICAgICAgYlRvcCA9IF9nZXRCb3VuZHNGb3JOb2RlMi50b3AsXG4gICAgICBiTGVmdCA9IF9nZXRCb3VuZHNGb3JOb2RlMi5sZWZ0LFxuICAgICAgX2dldEJvdW5kc0Zvck5vZGUyJHJpID0gX2dldEJvdW5kc0Zvck5vZGUyLnJpZ2h0LFxuICAgICAgYlJpZ2h0ID0gX2dldEJvdW5kc0Zvck5vZGUyJHJpID09PSB2b2lkIDAgPyBiTGVmdCA6IF9nZXRCb3VuZHNGb3JOb2RlMiRyaSxcbiAgICAgIF9nZXRCb3VuZHNGb3JOb2RlMiRibyA9IF9nZXRCb3VuZHNGb3JOb2RlMi5ib3R0b20sXG4gICAgICBiQm90dG9tID0gX2dldEJvdW5kc0Zvck5vZGUyJGJvID09PSB2b2lkIDAgPyBiVG9wIDogX2dldEJvdW5kc0Zvck5vZGUyJGJvO1xuXG4gIHJldHVybiAhKGFCb3R0b20gLSB0b2xlcmFuY2UgPCBiVG9wIHx8IC8vICdhJyB0b3AgZG9lc24ndCB0b3VjaCAnYicgYm90dG9tXG4gIGFUb3AgKyB0b2xlcmFuY2UgPiBiQm90dG9tIHx8IC8vICdhJyByaWdodCBkb2Vzbid0IHRvdWNoICdiJyBsZWZ0XG4gIGFSaWdodCAtIHRvbGVyYW5jZSA8IGJMZWZ0IHx8IC8vICdhJyBsZWZ0IGRvZXNuJ3QgdG91Y2ggJ2InIHJpZ2h0XG4gIGFMZWZ0ICsgdG9sZXJhbmNlID4gYlJpZ2h0KTtcbn1cbi8qKlxuICogR2l2ZW4gYSBub2RlLCBnZXQgZXZlcnl0aGluZyBuZWVkZWQgdG8gY2FsY3VsYXRlIGl0cyBib3VuZGFyaWVzXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cblxuZnVuY3Rpb24gZ2V0Qm91bmRzRm9yTm9kZShub2RlKSB7XG4gIGlmICghbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHJldHVybiBub2RlO1xuICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBsZWZ0ID0gcmVjdC5sZWZ0ICsgcGFnZU9mZnNldCgnbGVmdCcpLFxuICAgICAgdG9wID0gcmVjdC50b3AgKyBwYWdlT2Zmc2V0KCd0b3AnKTtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IHRvcCxcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIHJpZ2h0OiAobm9kZS5vZmZzZXRXaWR0aCB8fCAwKSArIGxlZnQsXG4gICAgYm90dG9tOiAobm9kZS5vZmZzZXRIZWlnaHQgfHwgMCkgKyB0b3BcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFnZU9mZnNldChkaXIpIHtcbiAgaWYgKGRpciA9PT0gJ2xlZnQnKSByZXR1cm4gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCB8fCAwO1xuICBpZiAoZGlyID09PSAndG9wJykgcmV0dXJuIHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwO1xufVxuXG52YXIgX2RlZmF1bHQgPSBTZWxlY3Rpb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2Nsc3ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbHN4XCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxuZnVuY3Rpb24gc3RyaW5naWZ5UGVyY2VudCh2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ3N0cmluZycgPyB2IDogdiArICclJztcbn1cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMgKi9cblxuXG5mdW5jdGlvbiBUaW1lR3JpZEV2ZW50KHByb3BzKSB7XG4gIHZhciBfZXh0ZW5kczIsIF9leHRlbmRzMztcblxuICB2YXIgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGV2ZW50ID0gcHJvcHMuZXZlbnQsXG4gICAgICBhY2Nlc3NvcnMgPSBwcm9wcy5hY2Nlc3NvcnMsXG4gICAgICBydGwgPSBwcm9wcy5ydGwsXG4gICAgICBzZWxlY3RlZCA9IHByb3BzLnNlbGVjdGVkLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIGNvbnRpbnVlc0VhcmxpZXIgPSBwcm9wcy5jb250aW51ZXNFYXJsaWVyLFxuICAgICAgY29udGludWVzTGF0ZXIgPSBwcm9wcy5jb250aW51ZXNMYXRlcixcbiAgICAgIGdldHRlcnMgPSBwcm9wcy5nZXR0ZXJzLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBvbkRvdWJsZUNsaWNrID0gcHJvcHMub25Eb3VibGVDbGljayxcbiAgICAgIGlzQmFja2dyb3VuZEV2ZW50ID0gcHJvcHMuaXNCYWNrZ3JvdW5kRXZlbnQsXG4gICAgICBvbktleVByZXNzID0gcHJvcHMub25LZXlQcmVzcyxcbiAgICAgIF9wcm9wcyRjb21wb25lbnRzID0gcHJvcHMuY29tcG9uZW50cyxcbiAgICAgIEV2ZW50ID0gX3Byb3BzJGNvbXBvbmVudHMuZXZlbnQsXG4gICAgICBFdmVudFdyYXBwZXIgPSBfcHJvcHMkY29tcG9uZW50cy5ldmVudFdyYXBwZXI7XG4gIHZhciB0aXRsZSA9IGFjY2Vzc29ycy50aXRsZShldmVudCk7XG4gIHZhciB0b29sdGlwID0gYWNjZXNzb3JzLnRvb2x0aXAoZXZlbnQpO1xuICB2YXIgZW5kID0gYWNjZXNzb3JzLmVuZChldmVudCk7XG4gIHZhciBzdGFydCA9IGFjY2Vzc29ycy5zdGFydChldmVudCk7XG4gIHZhciB1c2VyUHJvcHMgPSBnZXR0ZXJzLmV2ZW50UHJvcChldmVudCwgc3RhcnQsIGVuZCwgc2VsZWN0ZWQpO1xuICB2YXIgaGVpZ2h0ID0gc3R5bGUuaGVpZ2h0LFxuICAgICAgdG9wID0gc3R5bGUudG9wLFxuICAgICAgd2lkdGggPSBzdHlsZS53aWR0aCxcbiAgICAgIHhPZmZzZXQgPSBzdHlsZS54T2Zmc2V0O1xuICB2YXIgaW5uZXIgPSBbLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGtleTogXCIxXCIsXG4gICAgY2xhc3NOYW1lOiBcInJiYy1ldmVudC1sYWJlbFwiXG4gIH0sIGxhYmVsKSwgLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGtleTogXCIyXCIsXG4gICAgY2xhc3NOYW1lOiBcInJiYy1ldmVudC1jb250ZW50XCJcbiAgfSwgRXZlbnQgPyAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChFdmVudCwge1xuICAgIGV2ZW50OiBldmVudCxcbiAgICB0aXRsZTogdGl0bGVcbiAgfSkgOiB0aXRsZSldO1xuICB2YXIgZXZlbnRTdHlsZSA9IGlzQmFja2dyb3VuZEV2ZW50ID8gKDAsIF9leHRlbmRzNC5kZWZhdWx0KSh7fSwgdXNlclByb3BzLnN0eWxlLCAoX2V4dGVuZHMyID0ge1xuICAgIHRvcDogc3RyaW5naWZ5UGVyY2VudCh0b3ApLFxuICAgIGhlaWdodDogc3RyaW5naWZ5UGVyY2VudChoZWlnaHQpLFxuICAgIC8vIEFkZGluZyAxMHB4IHRvIHRha2UgZXZlbnRzIGNvbnRhaW5lciByaWdodCBtYXJnaW4gaW50byBhY2NvdW50XG4gICAgd2lkdGg6IFwiY2FsYyhcIiArIHdpZHRoICsgXCIgKyAxMHB4KVwiXG4gIH0sIF9leHRlbmRzMltydGwgPyAncmlnaHQnIDogJ2xlZnQnXSA9IHN0cmluZ2lmeVBlcmNlbnQoTWF0aC5tYXgoMCwgeE9mZnNldCkpLCBfZXh0ZW5kczIpKSA6ICgwLCBfZXh0ZW5kczQuZGVmYXVsdCkoe30sIHVzZXJQcm9wcy5zdHlsZSwgKF9leHRlbmRzMyA9IHtcbiAgICB0b3A6IHN0cmluZ2lmeVBlcmNlbnQodG9wKSxcbiAgICB3aWR0aDogc3RyaW5naWZ5UGVyY2VudCh3aWR0aCksXG4gICAgaGVpZ2h0OiBzdHJpbmdpZnlQZXJjZW50KGhlaWdodClcbiAgfSwgX2V4dGVuZHMzW3J0bCA/ICdyaWdodCcgOiAnbGVmdCddID0gc3RyaW5naWZ5UGVyY2VudCh4T2Zmc2V0KSwgX2V4dGVuZHMzKSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChFdmVudFdyYXBwZXIsICgwLCBfZXh0ZW5kczQuZGVmYXVsdCkoe1xuICAgIHR5cGU6IFwidGltZVwiXG4gIH0sIHByb3BzKSwgLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgb25Eb3VibGVDbGljazogb25Eb3VibGVDbGljayxcbiAgICBzdHlsZTogZXZlbnRTdHlsZSxcbiAgICBvbktleVByZXNzOiBvbktleVByZXNzLFxuICAgIHRpdGxlOiB0b29sdGlwID8gKHR5cGVvZiBsYWJlbCA9PT0gJ3N0cmluZycgPyBsYWJlbCArICc6ICcgOiAnJykgKyB0b29sdGlwIDogdW5kZWZpbmVkLFxuICAgIGNsYXNzTmFtZTogKDAsIF9jbHN4LmRlZmF1bHQpKGlzQmFja2dyb3VuZEV2ZW50ID8gJ3JiYy1iYWNrZ3JvdW5kLWV2ZW50JyA6ICdyYmMtZXZlbnQnLCBjbGFzc05hbWUsIHVzZXJQcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICdyYmMtc2VsZWN0ZWQnOiBzZWxlY3RlZCxcbiAgICAgICdyYmMtZXZlbnQtY29udGludWVzLWVhcmxpZXInOiBjb250aW51ZXNFYXJsaWVyLFxuICAgICAgJ3JiYy1ldmVudC1jb250aW51ZXMtbGF0ZXInOiBjb250aW51ZXNMYXRlclxuICAgIH0pXG4gIH0sIGlubmVyKSk7XG59XG5cbnZhciBfZGVmYXVsdCA9IFRpbWVHcmlkRXZlbnQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMubWVyZ2VDb21wb25lbnRzID0gbWVyZ2VDb21wb25lbnRzO1xuZXhwb3J0cy5wb2ludEluQ29sdW1uID0gcG9pbnRJbkNvbHVtbjtcbmV4cG9ydHMuZXZlbnRUaW1lcyA9IGV2ZW50VGltZXM7XG5leHBvcnRzLmRyYWdBY2Nlc3NvcnMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9hY2Nlc3NvcnMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvYWNjZXNzb3JzXCIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIl07XG52YXIgZHJhZ0FjY2Vzc29ycyA9IHtcbiAgc3RhcnQ6ICgwLCBfYWNjZXNzb3JzLndyYXBBY2Nlc3NvcikoZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gZS5zdGFydDtcbiAgfSksXG4gIGVuZDogKDAsIF9hY2Nlc3NvcnMud3JhcEFjY2Vzc29yKShmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBlLmVuZDtcbiAgfSlcbn07XG5leHBvcnRzLmRyYWdBY2Nlc3NvcnMgPSBkcmFnQWNjZXNzb3JzO1xuXG5mdW5jdGlvbiBuZXN0KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgQ29tcG9uZW50cyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBDb21wb25lbnRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGZhY3RvcmllcyA9IENvbXBvbmVudHMuZmlsdGVyKEJvb2xlYW4pLm1hcChfcmVhY3QuY3JlYXRlRmFjdG9yeSk7XG5cbiAgdmFyIE5lc3QgPSBmdW5jdGlvbiBOZXN0KF9yZWYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3JlZiwgX2V4Y2x1ZGVkKTtcbiAgICByZXR1cm4gZmFjdG9yaWVzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChjaGlsZCwgZmFjdG9yeSkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkocHJvcHMsIGNoaWxkKTtcbiAgICB9LCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIE5lc3Q7XG59XG5cbmZ1bmN0aW9uIG1lcmdlQ29tcG9uZW50cyhjb21wb25lbnRzLCBhZGRvbnMpIHtcbiAgaWYgKGNvbXBvbmVudHMgPT09IHZvaWQgMCkge1xuICAgIGNvbXBvbmVudHMgPSB7fTtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkb25zKTtcbiAgdmFyIHJlc3VsdCA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGNvbXBvbmVudHMpO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHJlc3VsdFtrZXldID0gY29tcG9uZW50c1trZXldID8gbmVzdChjb21wb25lbnRzW2tleV0sIGFkZG9uc1trZXldKSA6IGFkZG9uc1trZXldO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcG9pbnRJbkNvbHVtbihib3VuZHMsIHBvaW50KSB7XG4gIHZhciBsZWZ0ID0gYm91bmRzLmxlZnQsXG4gICAgICByaWdodCA9IGJvdW5kcy5yaWdodCxcbiAgICAgIHRvcCA9IGJvdW5kcy50b3A7XG4gIHZhciB4ID0gcG9pbnQueCxcbiAgICAgIHkgPSBwb2ludC55O1xuICByZXR1cm4geCA8IHJpZ2h0ICsgMTAgJiYgeCA+IGxlZnQgJiYgeSA+IHRvcDtcbn1cblxuZnVuY3Rpb24gZXZlbnRUaW1lcyhldmVudCwgYWNjZXNzb3JzLCBsb2NhbGl6ZXIpIHtcbiAgdmFyIHN0YXJ0ID0gYWNjZXNzb3JzLnN0YXJ0KGV2ZW50KTtcbiAgdmFyIGVuZCA9IGFjY2Vzc29ycy5lbmQoZXZlbnQpO1xuICB2YXIgaXNaZXJvRHVyYXRpb24gPSBsb2NhbGl6ZXIuZXEoc3RhcnQsIGVuZCwgJ21pbnV0ZXMnKSAmJiBsb2NhbGl6ZXIuZGlmZihzdGFydCwgZW5kLCAnbWludXRlcycpID09PSAwOyAvLyBtYWtlIHplcm8gZHVyYXRpb24gbWlkbmlnaHQgZXZlbnRzIGF0IGxlYXN0IG9uZSBkYXkgbG9uZ1xuXG4gIGlmIChpc1plcm9EdXJhdGlvbikgZW5kID0gbG9jYWxpemVyLmFkZChlbmQsIDEsICdkYXknKTtcbiAgdmFyIGR1cmF0aW9uID0gbG9jYWxpemVyLmRpZmYoc3RhcnQsIGVuZCwgJ21pbGxpc2Vjb25kcycpO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBlbmQ6IGVuZCxcbiAgICBkdXJhdGlvbjogZHVyYXRpb25cbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuZnVuY3Rpb24gTm9vcFdyYXBwZXIocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzLmNoaWxkcmVuO1xufVxuXG52YXIgX2RlZmF1bHQgPSBOb29wV3JhcHBlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfRG5EQ29udGV4dCA9IHJlcXVpcmUoXCIuL0RuRENvbnRleHRcIik7XG5cbnZhciBfU2VsZWN0aW9uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4uLy4uL1NlbGVjdGlvblwiKSk7XG5cbnZhciBfVGltZUdyaWRFdmVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL1RpbWVHcmlkRXZlbnRcIikpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcblxudmFyIF9Ob29wV3JhcHBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL05vb3BXcmFwcGVyXCIpKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxudmFyIEV2ZW50Q29udGFpbmVyV3JhcHBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEV2ZW50Q29udGFpbmVyV3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRXZlbnRDb250YWluZXJXcmFwcGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlTW92ZSA9IGZ1bmN0aW9uIChwb2ludCwgYm91bmRzKSB7XG4gICAgICBpZiAoISgwLCBfY29tbW9uLnBvaW50SW5Db2x1bW4pKGJvdW5kcywgcG9pbnQpKSByZXR1cm4gX3RoaXMucmVzZXQoKTtcbiAgICAgIHZhciBldmVudCA9IF90aGlzLmNvbnRleHQuZHJhZ2dhYmxlLmRyYWdBbmREcm9wQWN0aW9uLmV2ZW50O1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYWNjZXNzb3JzID0gX3RoaXMkcHJvcHMuYWNjZXNzb3JzLFxuICAgICAgICAgIHNsb3RNZXRyaWNzID0gX3RoaXMkcHJvcHMuc2xvdE1ldHJpY3M7XG4gICAgICB2YXIgbmV3U2xvdCA9IHNsb3RNZXRyaWNzLmNsb3Nlc3RTbG90RnJvbVBvaW50KHtcbiAgICAgICAgeTogcG9pbnQueSAtIF90aGlzLmV2ZW50T2Zmc2V0VG9wLFxuICAgICAgICB4OiBwb2ludC54XG4gICAgICB9LCBib3VuZHMpO1xuXG4gICAgICB2YXIgX2V2ZW50VGltZXMgPSAoMCwgX2NvbW1vbi5ldmVudFRpbWVzKShldmVudCwgYWNjZXNzb3JzLCBfdGhpcy5wcm9wcy5sb2NhbGl6ZXIpLFxuICAgICAgICAgIGR1cmF0aW9uID0gX2V2ZW50VGltZXMuZHVyYXRpb247XG5cbiAgICAgIHZhciBuZXdFbmQgPSBfdGhpcy5wcm9wcy5sb2NhbGl6ZXIuYWRkKG5ld1Nsb3QsIGR1cmF0aW9uLCAnbWlsbGlzZWNvbmRzJyk7XG5cbiAgICAgIF90aGlzLnVwZGF0ZShldmVudCwgc2xvdE1ldHJpY3MuZ2V0UmFuZ2UobmV3U2xvdCwgbmV3RW5kLCBmYWxzZSwgdHJ1ZSkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVEcm9wRnJvbU91dHNpZGUgPSBmdW5jdGlvbiAocG9pbnQsIGJvdW5kYXJ5Qm94KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgc2xvdE1ldHJpY3MgPSBfdGhpcyRwcm9wczIuc2xvdE1ldHJpY3MsXG4gICAgICAgICAgcmVzb3VyY2UgPSBfdGhpcyRwcm9wczIucmVzb3VyY2U7XG4gICAgICB2YXIgc3RhcnQgPSBzbG90TWV0cmljcy5jbG9zZXN0U2xvdEZyb21Qb2ludCh7XG4gICAgICAgIHk6IHBvaW50LnksXG4gICAgICAgIHg6IHBvaW50LnhcbiAgICAgIH0sIGJvdW5kYXJ5Qm94KTtcblxuICAgICAgX3RoaXMuY29udGV4dC5kcmFnZ2FibGUub25Ecm9wRnJvbU91dHNpZGUoe1xuICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgIGVuZDogc2xvdE1ldHJpY3MubmV4dFNsb3Qoc3RhcnQpLFxuICAgICAgICBhbGxEYXk6IGZhbHNlLFxuICAgICAgICByZXNvdXJjZTogcmVzb3VyY2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5fc2VsZWN0YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB3cmFwcGVyID0gX3RoaXMucmVmLmN1cnJlbnQ7XG4gICAgICB2YXIgbm9kZSA9IHdyYXBwZXIuY2hpbGRyZW5bMF07XG4gICAgICB2YXIgaXNCZWluZ0RyYWdnZWQgPSBmYWxzZTtcbiAgICAgIHZhciBzZWxlY3RvciA9IF90aGlzLl9zZWxlY3RvciA9IG5ldyBfU2VsZWN0aW9uLmRlZmF1bHQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9zZXN0KCcucmJjLXRpbWUtdmlldycpO1xuICAgICAgfSk7XG4gICAgICBzZWxlY3Rvci5vbignYmVmb3JlU2VsZWN0JywgZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICAgIHZhciBkcmFnQW5kRHJvcEFjdGlvbiA9IF90aGlzLmNvbnRleHQuZHJhZ2dhYmxlLmRyYWdBbmREcm9wQWN0aW9uO1xuICAgICAgICBpZiAoIWRyYWdBbmREcm9wQWN0aW9uLmFjdGlvbikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChkcmFnQW5kRHJvcEFjdGlvbi5hY3Rpb24gPT09ICdyZXNpemUnKSB7XG4gICAgICAgICAgcmV0dXJuICgwLCBfY29tbW9uLnBvaW50SW5Db2x1bW4pKCgwLCBfU2VsZWN0aW9uLmdldEJvdW5kc0Zvck5vZGUpKG5vZGUpLCBwb2ludCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXZlbnROb2RlID0gKDAsIF9TZWxlY3Rpb24uZ2V0RXZlbnROb2RlRnJvbVBvaW50KShub2RlLCBwb2ludCk7XG4gICAgICAgIGlmICghZXZlbnROb2RlKSByZXR1cm4gZmFsc2U7IC8vIGV2ZW50T2Zmc2V0VG9wIGlzIGRpc3RhbmNlIGZyb20gdGhlIHRvcCBvZiB0aGUgZXZlbnQgdG8gdGhlIGluaXRpYWxcbiAgICAgICAgLy8gbW91c2VEb3duIHBvc2l0aW9uLiBXZSBuZWVkIHRoaXMgbGF0ZXIgdG8gY29tcHV0ZSB0aGUgbmV3IHRvcCBvZiB0aGVcbiAgICAgICAgLy8gZXZlbnQgZHVyaW5nIG1vdmUgb3BlcmF0aW9ucywgc2luY2UgdGhlIGZpbmFsIGxvY2F0aW9uIGlzIHJlYWxseSBhXG4gICAgICAgIC8vIGRlbHRhIGZyb20gdGhpcyBwb2ludC4gbm90ZTogaWYgd2Ugd2FudCB0byBEUlkgdGhpcyB3aXRoIFdlZWtXcmFwcGVyLFxuICAgICAgICAvLyBwcm9iYWJseSBiZXR0ZXIganVzdCB0byBjYXB0dXJlIHRoZSBtb3VzZURvd24gcG9pbnQgaGVyZSBhbmQgZG8gdGhlXG4gICAgICAgIC8vIHBsYWNlbWVudCBjb21wdXRhdGlvbiBpbiBoYW5kbGVNb3ZlKCkuLi5cblxuICAgICAgICBfdGhpcy5ldmVudE9mZnNldFRvcCA9IHBvaW50LnkgLSAoMCwgX1NlbGVjdGlvbi5nZXRCb3VuZHNGb3JOb2RlKShldmVudE5vZGUpLnRvcDtcbiAgICAgIH0pO1xuICAgICAgc2VsZWN0b3Iub24oJ3NlbGVjdGluZycsIGZ1bmN0aW9uIChib3gpIHtcbiAgICAgICAgdmFyIGJvdW5kcyA9ICgwLCBfU2VsZWN0aW9uLmdldEJvdW5kc0Zvck5vZGUpKG5vZGUpO1xuICAgICAgICB2YXIgZHJhZ0FuZERyb3BBY3Rpb24gPSBfdGhpcy5jb250ZXh0LmRyYWdnYWJsZS5kcmFnQW5kRHJvcEFjdGlvbjtcbiAgICAgICAgaWYgKGRyYWdBbmREcm9wQWN0aW9uLmFjdGlvbiA9PT0gJ21vdmUnKSBfdGhpcy5oYW5kbGVNb3ZlKGJveCwgYm91bmRzKTtcbiAgICAgICAgaWYgKGRyYWdBbmREcm9wQWN0aW9uLmFjdGlvbiA9PT0gJ3Jlc2l6ZScpIF90aGlzLmhhbmRsZVJlc2l6ZShib3gsIGJvdW5kcyk7XG4gICAgICB9KTtcbiAgICAgIHNlbGVjdG9yLm9uKCdkcm9wRnJvbU91dHNpZGUnLCBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5jb250ZXh0LmRyYWdnYWJsZS5vbkRyb3BGcm9tT3V0c2lkZSkgcmV0dXJuO1xuICAgICAgICB2YXIgYm91bmRzID0gKDAsIF9TZWxlY3Rpb24uZ2V0Qm91bmRzRm9yTm9kZSkobm9kZSk7XG4gICAgICAgIGlmICghKDAsIF9jb21tb24ucG9pbnRJbkNvbHVtbikoYm91bmRzLCBwb2ludCkpIHJldHVybjtcblxuICAgICAgICBfdGhpcy5oYW5kbGVEcm9wRnJvbU91dHNpZGUocG9pbnQsIGJvdW5kcyk7XG4gICAgICB9KTtcbiAgICAgIHNlbGVjdG9yLm9uKCdkcmFnT3ZlcicsIGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICBpZiAoIV90aGlzLmNvbnRleHQuZHJhZ2dhYmxlLmRyYWdGcm9tT3V0c2lkZUl0ZW0pIHJldHVybjtcbiAgICAgICAgdmFyIGJvdW5kcyA9ICgwLCBfU2VsZWN0aW9uLmdldEJvdW5kc0Zvck5vZGUpKG5vZGUpO1xuXG4gICAgICAgIF90aGlzLmhhbmRsZURyb3BGcm9tT3V0c2lkZShwb2ludCwgYm91bmRzKTtcbiAgICAgIH0pO1xuICAgICAgc2VsZWN0b3Iub24oJ3NlbGVjdFN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpc0JlaW5nRHJhZ2dlZCA9IHRydWU7XG5cbiAgICAgICAgX3RoaXMuY29udGV4dC5kcmFnZ2FibGUub25TdGFydCgpO1xuICAgICAgfSk7XG4gICAgICBzZWxlY3Rvci5vbignc2VsZWN0JywgZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICAgIHZhciBib3VuZHMgPSAoMCwgX1NlbGVjdGlvbi5nZXRCb3VuZHNGb3JOb2RlKShub2RlKTtcbiAgICAgICAgaXNCZWluZ0RyYWdnZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5ldmVudCB8fCAhKDAsIF9jb21tb24ucG9pbnRJbkNvbHVtbikoYm91bmRzLCBwb2ludCkpIHJldHVybjtcblxuICAgICAgICBfdGhpcy5oYW5kbGVJbnRlcmFjdGlvbkVuZCgpO1xuICAgICAgfSk7XG4gICAgICBzZWxlY3Rvci5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc0JlaW5nRHJhZ2dlZCkgX3RoaXMucmVzZXQoKTtcblxuICAgICAgICBfdGhpcy5jb250ZXh0LmRyYWdnYWJsZS5vbkVuZChudWxsKTtcbiAgICAgIH0pO1xuICAgICAgc2VsZWN0b3Iub24oJ3Jlc2V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIF90aGlzLmNvbnRleHQuZHJhZ2dhYmxlLm9uRW5kKG51bGwpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUludGVyYWN0aW9uRW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlc291cmNlID0gX3RoaXMucHJvcHMucmVzb3VyY2U7XG4gICAgICB2YXIgZXZlbnQgPSBfdGhpcy5zdGF0ZS5ldmVudDtcblxuICAgICAgX3RoaXMucmVzZXQoKTtcblxuICAgICAgX3RoaXMuY29udGV4dC5kcmFnZ2FibGUub25FbmQoe1xuICAgICAgICBzdGFydDogZXZlbnQuc3RhcnQsXG4gICAgICAgIGVuZDogZXZlbnQuZW5kLFxuICAgICAgICByZXNvdXJjZUlkOiByZXNvdXJjZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLl90ZWFyZG93blNlbGVjdGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLl9zZWxlY3RvcikgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5fc2VsZWN0b3IudGVhcmRvd24oKTtcblxuICAgICAgX3RoaXMuX3NlbGVjdG9yID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICBfdGhpcy5yZWYgPSAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlUmVmKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEV2ZW50Q29udGFpbmVyV3JhcHBlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fc2VsZWN0YWJsZSgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX3RlYXJkb3duU2VsZWN0YWJsZSgpO1xuICB9O1xuXG4gIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmV2ZW50KSB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGV2ZW50OiBudWxsLFxuICAgICAgdG9wOiBudWxsLFxuICAgICAgaGVpZ2h0OiBudWxsXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShldmVudCwgX3JlZikge1xuICAgIHZhciBzdGFydERhdGUgPSBfcmVmLnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF9yZWYuZW5kRGF0ZSxcbiAgICAgICAgdG9wID0gX3JlZi50b3AsXG4gICAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuICAgIHZhciBsYXN0RXZlbnQgPSB0aGlzLnN0YXRlLmV2ZW50O1xuXG4gICAgaWYgKGxhc3RFdmVudCAmJiBzdGFydERhdGUgPT09IGxhc3RFdmVudC5zdGFydCAmJiBlbmREYXRlID09PSBsYXN0RXZlbnQuZW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB0b3A6IHRvcCxcbiAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgZXZlbnQ6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGV2ZW50LCB7XG4gICAgICAgIHN0YXJ0OiBzdGFydERhdGUsXG4gICAgICAgIGVuZDogZW5kRGF0ZVxuICAgICAgfSlcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlUmVzaXplID0gZnVuY3Rpb24gaGFuZGxlUmVzaXplKHBvaW50LCBib3VuZHMpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWNjZXNzb3JzID0gX3RoaXMkcHJvcHMzLmFjY2Vzc29ycyxcbiAgICAgICAgc2xvdE1ldHJpY3MgPSBfdGhpcyRwcm9wczMuc2xvdE1ldHJpY3MsXG4gICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzMy5sb2NhbGl6ZXI7XG4gICAgdmFyIF90aGlzJGNvbnRleHQkZHJhZ2dhYiA9IHRoaXMuY29udGV4dC5kcmFnZ2FibGUuZHJhZ0FuZERyb3BBY3Rpb24sXG4gICAgICAgIGV2ZW50ID0gX3RoaXMkY29udGV4dCRkcmFnZ2FiLmV2ZW50LFxuICAgICAgICBkaXJlY3Rpb24gPSBfdGhpcyRjb250ZXh0JGRyYWdnYWIuZGlyZWN0aW9uO1xuICAgIHZhciBuZXdUaW1lID0gc2xvdE1ldHJpY3MuY2xvc2VzdFNsb3RGcm9tUG9pbnQocG9pbnQsIGJvdW5kcyk7XG5cbiAgICB2YXIgX2V2ZW50VGltZXMyID0gKDAsIF9jb21tb24uZXZlbnRUaW1lcykoZXZlbnQsIGFjY2Vzc29ycywgbG9jYWxpemVyKSxcbiAgICAgICAgc3RhcnQgPSBfZXZlbnRUaW1lczIuc3RhcnQsXG4gICAgICAgIGVuZCA9IF9ldmVudFRpbWVzMi5lbmQ7XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSAnVVAnKSB7XG4gICAgICBzdGFydCA9IGxvY2FsaXplci5taW4obmV3VGltZSwgc2xvdE1ldHJpY3MuY2xvc2VzdFNsb3RGcm9tRGF0ZShlbmQsIC0xKSk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdET1dOJykge1xuICAgICAgZW5kID0gbG9jYWxpemVyLm1heChuZXdUaW1lLCBzbG90TWV0cmljcy5jbG9zZXN0U2xvdEZyb21EYXRlKHN0YXJ0KSk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGUoZXZlbnQsIHNsb3RNZXRyaWNzLmdldFJhbmdlKHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyQ29udGVudCA9IGZ1bmN0aW9uIHJlbmRlckNvbnRlbnQoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHM0LmNoaWxkcmVuLFxuICAgICAgICBhY2Nlc3NvcnMgPSBfdGhpcyRwcm9wczQuYWNjZXNzb3JzLFxuICAgICAgICBjb21wb25lbnRzID0gX3RoaXMkcHJvcHM0LmNvbXBvbmVudHMsXG4gICAgICAgIGdldHRlcnMgPSBfdGhpcyRwcm9wczQuZ2V0dGVycyxcbiAgICAgICAgc2xvdE1ldHJpY3MgPSBfdGhpcyRwcm9wczQuc2xvdE1ldHJpY3MsXG4gICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzNC5sb2NhbGl6ZXI7XG4gICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgZXZlbnQgPSBfdGhpcyRzdGF0ZS5ldmVudCxcbiAgICAgICAgdG9wID0gX3RoaXMkc3RhdGUudG9wLFxuICAgICAgICBoZWlnaHQgPSBfdGhpcyRzdGF0ZS5oZWlnaHQ7XG4gICAgaWYgKCFldmVudCkgcmV0dXJuIGNoaWxkcmVuO1xuICAgIHZhciBldmVudHMgPSBjaGlsZHJlbi5wcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgc3RhcnQgPSBldmVudC5zdGFydCxcbiAgICAgICAgZW5kID0gZXZlbnQuZW5kO1xuICAgIHZhciBsYWJlbDtcbiAgICB2YXIgZm9ybWF0ID0gJ2V2ZW50VGltZVJhbmdlRm9ybWF0JztcbiAgICB2YXIgc3RhcnRzQmVmb3JlRGF5ID0gc2xvdE1ldHJpY3Muc3RhcnRzQmVmb3JlRGF5KHN0YXJ0KTtcbiAgICB2YXIgc3RhcnRzQWZ0ZXJEYXkgPSBzbG90TWV0cmljcy5zdGFydHNBZnRlckRheShlbmQpO1xuICAgIGlmIChzdGFydHNCZWZvcmVEYXkpIGZvcm1hdCA9ICdldmVudFRpbWVSYW5nZUVuZEZvcm1hdCc7ZWxzZSBpZiAoc3RhcnRzQWZ0ZXJEYXkpIGZvcm1hdCA9ICdldmVudFRpbWVSYW5nZVN0YXJ0Rm9ybWF0JztcbiAgICBpZiAoc3RhcnRzQmVmb3JlRGF5ICYmIHN0YXJ0c0FmdGVyRGF5KSBsYWJlbCA9IGxvY2FsaXplci5tZXNzYWdlcy5hbGxEYXk7ZWxzZSBsYWJlbCA9IGxvY2FsaXplci5mb3JtYXQoe1xuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgZW5kOiBlbmRcbiAgICB9LCBmb3JtYXQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIGV2ZW50cywgZXZlbnQgJiYgLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RpbWVHcmlkRXZlbnQuZGVmYXVsdCwge1xuICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgY2xhc3NOYW1lOiBcInJiYy1hZGRvbnMtZG5kLWRyYWctcHJldmlld1wiLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoOiAxMDBcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0dGVyczogZ2V0dGVycyxcbiAgICAgICAgY29tcG9uZW50czogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgY29tcG9uZW50cywge1xuICAgICAgICAgIGV2ZW50V3JhcHBlcjogX05vb3BXcmFwcGVyLmRlZmF1bHRcbiAgICAgICAgfSksXG4gICAgICAgIGFjY2Vzc29yczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgYWNjZXNzb3JzLCBfY29tbW9uLmRyYWdBY2Nlc3NvcnMpLFxuICAgICAgICBjb250aW51ZXNFYXJsaWVyOiBzdGFydHNCZWZvcmVEYXksXG4gICAgICAgIGNvbnRpbnVlc0xhdGVyOiBzdGFydHNBZnRlckRheVxuICAgICAgfSkpXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgcmVmOiB0aGlzLnJlZlxuICAgIH0sIHRoaXMucmVuZGVyQ29udGVudCgpKTtcbiAgfTtcblxuICByZXR1cm4gRXZlbnRDb250YWluZXJXcmFwcGVyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5FdmVudENvbnRhaW5lcldyYXBwZXIuY29udGV4dFR5cGUgPSBfRG5EQ29udGV4dC5EbkRDb250ZXh0O1xuRXZlbnRDb250YWluZXJXcmFwcGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgYWNjZXNzb3JzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNvbXBvbmVudHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcbiAgZ2V0dGVyczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuICBsb2NhbGl6ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcbiAgc2xvdE1ldHJpY3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcbiAgcmVzb3VyY2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnlcbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IEV2ZW50Q29udGFpbmVyV3JhcHBlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2Nsc3ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbHN4XCIpKTtcblxudmFyIF9leGNsdWRlZCA9IFtcInN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXZlbnRcIiwgXCJzZWxlY3RlZFwiLCBcImlzQWxsRGF5XCIsIFwib25TZWxlY3RcIiwgXCJvbkRvdWJsZUNsaWNrXCIsIFwib25LZXlQcmVzc1wiLCBcImxvY2FsaXplclwiLCBcImNvbnRpbnVlc1ByaW9yXCIsIFwiY29udGludWVzQWZ0ZXJcIiwgXCJhY2Nlc3NvcnNcIiwgXCJnZXR0ZXJzXCIsIFwiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRzXCIsIFwic2xvdFN0YXJ0XCIsIFwic2xvdEVuZFwiXTtcblxudmFyIEV2ZW50Q2VsbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEV2ZW50Q2VsbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRXZlbnRDZWxsKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBFdmVudENlbGwucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBldmVudCA9IF90aGlzJHByb3BzLmV2ZW50LFxuICAgICAgICBzZWxlY3RlZCA9IF90aGlzJHByb3BzLnNlbGVjdGVkLFxuICAgICAgICBpc0FsbERheSA9IF90aGlzJHByb3BzLmlzQWxsRGF5LFxuICAgICAgICBvblNlbGVjdCA9IF90aGlzJHByb3BzLm9uU2VsZWN0LFxuICAgICAgICBfb25Eb3VibGVDbGljayA9IF90aGlzJHByb3BzLm9uRG91YmxlQ2xpY2ssXG4gICAgICAgIF9vbktleVByZXNzID0gX3RoaXMkcHJvcHMub25LZXlQcmVzcyxcbiAgICAgICAgbG9jYWxpemVyID0gX3RoaXMkcHJvcHMubG9jYWxpemVyLFxuICAgICAgICBjb250aW51ZXNQcmlvciA9IF90aGlzJHByb3BzLmNvbnRpbnVlc1ByaW9yLFxuICAgICAgICBjb250aW51ZXNBZnRlciA9IF90aGlzJHByb3BzLmNvbnRpbnVlc0FmdGVyLFxuICAgICAgICBhY2Nlc3NvcnMgPSBfdGhpcyRwcm9wcy5hY2Nlc3NvcnMsXG4gICAgICAgIGdldHRlcnMgPSBfdGhpcyRwcm9wcy5nZXR0ZXJzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRzLFxuICAgICAgICBFdmVudCA9IF90aGlzJHByb3BzJGNvbXBvbmVudC5ldmVudCxcbiAgICAgICAgRXZlbnRXcmFwcGVyID0gX3RoaXMkcHJvcHMkY29tcG9uZW50LmV2ZW50V3JhcHBlcixcbiAgICAgICAgc2xvdFN0YXJ0ID0gX3RoaXMkcHJvcHMuc2xvdFN0YXJ0LFxuICAgICAgICBzbG90RW5kID0gX3RoaXMkcHJvcHMuc2xvdEVuZCxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBfZXhjbHVkZWQpO1xuICAgIGRlbGV0ZSBwcm9wcy5yZXNpemFibGU7XG4gICAgdmFyIHRpdGxlID0gYWNjZXNzb3JzLnRpdGxlKGV2ZW50KTtcbiAgICB2YXIgdG9vbHRpcCA9IGFjY2Vzc29ycy50b29sdGlwKGV2ZW50KTtcbiAgICB2YXIgZW5kID0gYWNjZXNzb3JzLmVuZChldmVudCk7XG4gICAgdmFyIHN0YXJ0ID0gYWNjZXNzb3JzLnN0YXJ0KGV2ZW50KTtcbiAgICB2YXIgYWxsRGF5ID0gYWNjZXNzb3JzLmFsbERheShldmVudCk7XG4gICAgdmFyIHNob3dBc0FsbERheSA9IGlzQWxsRGF5IHx8IGFsbERheSB8fCBsb2NhbGl6ZXIuZGlmZihzdGFydCwgbG9jYWxpemVyLmNlaWwoZW5kLCAnZGF5JyksICdkYXknKSA+IDE7XG4gICAgdmFyIHVzZXJQcm9wcyA9IGdldHRlcnMuZXZlbnRQcm9wKGV2ZW50LCBzdGFydCwgZW5kLCBzZWxlY3RlZCk7XG5cbiAgICB2YXIgY29udGVudCA9IC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJyYmMtZXZlbnQtY29udGVudFwiLFxuICAgICAgdGl0bGU6IHRvb2x0aXAgfHwgdW5kZWZpbmVkXG4gICAgfSwgRXZlbnQgPyAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChFdmVudCwge1xuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgY29udGludWVzUHJpb3I6IGNvbnRpbnVlc1ByaW9yLFxuICAgICAgY29udGludWVzQWZ0ZXI6IGNvbnRpbnVlc0FmdGVyLFxuICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgaXNBbGxEYXk6IGFsbERheSxcbiAgICAgIGxvY2FsaXplcjogbG9jYWxpemVyLFxuICAgICAgc2xvdFN0YXJ0OiBzbG90U3RhcnQsXG4gICAgICBzbG90RW5kOiBzbG90RW5kXG4gICAgfSkgOiB0aXRsZSk7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRXZlbnRXcmFwcGVyLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCB0aGlzLnByb3BzLCB7XG4gICAgICB0eXBlOiBcImRhdGVcIlxuICAgIH0pLCAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICBzdHlsZTogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgdXNlclByb3BzLnN0eWxlLCBzdHlsZSksXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KSgncmJjLWV2ZW50JywgY2xhc3NOYW1lLCB1c2VyUHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICdyYmMtc2VsZWN0ZWQnOiBzZWxlY3RlZCxcbiAgICAgICAgJ3JiYy1ldmVudC1hbGxkYXknOiBzaG93QXNBbGxEYXksXG4gICAgICAgICdyYmMtZXZlbnQtY29udGludWVzLXByaW9yJzogY29udGludWVzUHJpb3IsXG4gICAgICAgICdyYmMtZXZlbnQtY29udGludWVzLWFmdGVyJzogY29udGludWVzQWZ0ZXJcbiAgICAgIH0pLFxuICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgIHJldHVybiBvblNlbGVjdCAmJiBvblNlbGVjdChldmVudCwgZSk7XG4gICAgICB9LFxuICAgICAgb25Eb3VibGVDbGljazogZnVuY3Rpb24gb25Eb3VibGVDbGljayhlKSB7XG4gICAgICAgIHJldHVybiBfb25Eb3VibGVDbGljayAmJiBfb25Eb3VibGVDbGljayhldmVudCwgZSk7XG4gICAgICB9LFxuICAgICAgb25LZXlQcmVzczogZnVuY3Rpb24gb25LZXlQcmVzcyhlKSB7XG4gICAgICAgIHJldHVybiBfb25LZXlQcmVzcyAmJiBfb25LZXlQcmVzcyhldmVudCwgZSk7XG4gICAgICB9XG4gICAgfSksIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKGNvbnRlbnQpIDogY29udGVudCkpO1xuICB9O1xuXG4gIHJldHVybiBFdmVudENlbGw7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkV2ZW50Q2VsbC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGV2ZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG4gIHNsb3RTdGFydDogX3Byb3BUeXBlcy5kZWZhdWx0Lmluc3RhbmNlT2YoRGF0ZSksXG4gIHNsb3RFbmQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5pbnN0YW5jZU9mKERhdGUpLFxuICByZXNpemFibGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBzZWxlY3RlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGlzQWxsRGF5OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgY29udGludWVzUHJpb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBjb250aW51ZXNBZnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGFjY2Vzc29yczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuICBjb21wb25lbnRzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGdldHRlcnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcbiAgbG9jYWxpemVyOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICBvblNlbGVjdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIG9uRG91YmxlQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICBvbktleVByZXNzOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufSA6IHt9O1xudmFyIF9kZWZhdWx0ID0gRXZlbnRDZWxsO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgbGlzdENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVDbGVhcicpLFxuICAgIGxpc3RDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZURlbGV0ZScpLFxuICAgIGxpc3RDYWNoZUdldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUdldCcpLFxuICAgIGxpc3RDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUhhcycpLFxuICAgIGxpc3RDYWNoZVNldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdENhY2hlO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgSGFzaCA9IHJlcXVpcmUoJy4vX0hhc2gnKSxcbiAgICBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlQ2xlYXI7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgc3RhY2tDbGVhciA9IHJlcXVpcmUoJy4vX3N0YWNrQ2xlYXInKSxcbiAgICBzdGFja0RlbGV0ZSA9IHJlcXVpcmUoJy4vX3N0YWNrRGVsZXRlJyksXG4gICAgc3RhY2tHZXQgPSByZXF1aXJlKCcuL19zdGFja0dldCcpLFxuICAgIHN0YWNrSGFzID0gcmVxdWlyZSgnLi9fc3RhY2tIYXMnKSxcbiAgICBzdGFja1NldCA9IHJlcXVpcmUoJy4vX3N0YWNrU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFjaztcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlQWRkO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlSGFzO1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5U29tZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFRvQXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgVWludDhBcnJheSA9IHJlcXVpcmUoJy4vX1VpbnQ4QXJyYXknKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgbWFwVG9BcnJheSA9IHJlcXVpcmUoJy4vX21hcFRvQXJyYXknKSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZSgnLi9fc2V0VG9BcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQnlUYWc7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0QWxsS2V5cztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9scztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsInZhciBiYXNlSXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fYmFzZUlzVHlwZWRBcnJheScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuIiwidmFyIGJhc2VUaW1lcyA9IHJlcXVpcmUoJy4vX2Jhc2VUaW1lcycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUxpa2VLZXlzO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXM7XG4iLCJ2YXIgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhVmlldztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIGVxdWFsQnlUYWcgPSByZXF1aXJlKCcuL19lcXVhbEJ5VGFnJyksXG4gICAgZXF1YWxPYmplY3RzID0gcmVxdWlyZSgnLi9fZXF1YWxPYmplY3RzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsRGVlcDtcbiIsInZhciBiYXNlSXNFcXVhbERlZXAgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbERlZXAnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbDtcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICogZXF1aXZhbGVudC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogb2JqZWN0ID09PSBvdGhlcjtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXF1YWw7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmlzU2VsZWN0ZWQgPSBpc1NlbGVjdGVkO1xuZXhwb3J0cy5zbG90V2lkdGggPSBzbG90V2lkdGg7XG5leHBvcnRzLmdldFNsb3RBdFggPSBnZXRTbG90QXRYO1xuZXhwb3J0cy5wb2ludEluQm94ID0gcG9pbnRJbkJveDtcbmV4cG9ydHMuZGF0ZUNlbGxTZWxlY3Rpb24gPSBkYXRlQ2VsbFNlbGVjdGlvbjtcblxudmFyIF9pc0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2lzRXF1YWxcIikpO1xuXG5mdW5jdGlvbiBpc1NlbGVjdGVkKGV2ZW50LCBzZWxlY3RlZCkge1xuICBpZiAoIWV2ZW50IHx8IHNlbGVjdGVkID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICgwLCBfaXNFcXVhbC5kZWZhdWx0KShldmVudCwgc2VsZWN0ZWQpO1xufVxuXG5mdW5jdGlvbiBzbG90V2lkdGgocm93Qm94LCBzbG90cykge1xuICB2YXIgcm93V2lkdGggPSByb3dCb3gucmlnaHQgLSByb3dCb3gubGVmdDtcbiAgdmFyIGNlbGxXaWR0aCA9IHJvd1dpZHRoIC8gc2xvdHM7XG4gIHJldHVybiBjZWxsV2lkdGg7XG59XG5cbmZ1bmN0aW9uIGdldFNsb3RBdFgocm93Qm94LCB4LCBydGwsIHNsb3RzKSB7XG4gIHZhciBjZWxsV2lkdGggPSBzbG90V2lkdGgocm93Qm94LCBzbG90cyk7XG4gIHJldHVybiBydGwgPyBzbG90cyAtIDEgLSBNYXRoLmZsb29yKCh4IC0gcm93Qm94LmxlZnQpIC8gY2VsbFdpZHRoKSA6IE1hdGguZmxvb3IoKHggLSByb3dCb3gubGVmdCkgLyBjZWxsV2lkdGgpO1xufVxuXG5mdW5jdGlvbiBwb2ludEluQm94KGJveCwgX3JlZikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnk7XG4gIHJldHVybiB5ID49IGJveC50b3AgJiYgeSA8PSBib3guYm90dG9tICYmIHggPj0gYm94LmxlZnQgJiYgeCA8PSBib3gucmlnaHQ7XG59XG5cbmZ1bmN0aW9uIGRhdGVDZWxsU2VsZWN0aW9uKHN0YXJ0LCByb3dCb3gsIGJveCwgc2xvdHMsIHJ0bCkge1xuICB2YXIgc3RhcnRJZHggPSAtMTtcbiAgdmFyIGVuZElkeCA9IC0xO1xuICB2YXIgbGFzdFNsb3RJZHggPSBzbG90cyAtIDE7XG4gIHZhciBjZWxsV2lkdGggPSBzbG90V2lkdGgocm93Qm94LCBzbG90cyk7IC8vIGNlbGwgdW5kZXIgdGhlIG1vdXNlXG5cbiAgdmFyIGN1cnJlbnRTbG90ID0gZ2V0U2xvdEF0WChyb3dCb3gsIGJveC54LCBydGwsIHNsb3RzKTsgLy8gSWRlbnRpZnkgcm93IGFzIGVpdGhlciB0aGUgaW5pdGlhbCByb3dcbiAgLy8gb3IgdGhlIHJvdyB1bmRlciB0aGUgY3VycmVudCBtb3VzZSBwb2ludFxuXG4gIHZhciBpc0N1cnJlbnRSb3cgPSByb3dCb3gudG9wIDwgYm94LnkgJiYgcm93Qm94LmJvdHRvbSA+IGJveC55O1xuICB2YXIgaXNTdGFydFJvdyA9IHJvd0JveC50b3AgPCBzdGFydC55ICYmIHJvd0JveC5ib3R0b20gPiBzdGFydC55OyAvLyB0aGlzIHJvdydzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBwb2ludFxuXG4gIHZhciBpc0Fib3ZlU3RhcnQgPSBzdGFydC55ID4gcm93Qm94LmJvdHRvbTtcbiAgdmFyIGlzQmVsb3dTdGFydCA9IHJvd0JveC50b3AgPiBzdGFydC55O1xuICB2YXIgaXNCZXR3ZWVuID0gYm94LnRvcCA8IHJvd0JveC50b3AgJiYgYm94LmJvdHRvbSA+IHJvd0JveC5ib3R0b207IC8vIHRoaXMgcm93IGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgYW5kIHN0YXJ0IHJvd3MsIHNvIGVudGlyZWx5IHNlbGVjdGVkXG5cbiAgaWYgKGlzQmV0d2Vlbikge1xuICAgIHN0YXJ0SWR4ID0gMDtcbiAgICBlbmRJZHggPSBsYXN0U2xvdElkeDtcbiAgfVxuXG4gIGlmIChpc0N1cnJlbnRSb3cpIHtcbiAgICBpZiAoaXNCZWxvd1N0YXJ0KSB7XG4gICAgICBzdGFydElkeCA9IDA7XG4gICAgICBlbmRJZHggPSBjdXJyZW50U2xvdDtcbiAgICB9IGVsc2UgaWYgKGlzQWJvdmVTdGFydCkge1xuICAgICAgc3RhcnRJZHggPSBjdXJyZW50U2xvdDtcbiAgICAgIGVuZElkeCA9IGxhc3RTbG90SWR4O1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc1N0YXJ0Um93KSB7XG4gICAgLy8gc2VsZWN0IHRoZSBjZWxsIHVuZGVyIHRoZSBpbml0aWFsIHBvaW50XG4gICAgc3RhcnRJZHggPSBlbmRJZHggPSBydGwgPyBsYXN0U2xvdElkeCAtIE1hdGguZmxvb3IoKHN0YXJ0LnggLSByb3dCb3gubGVmdCkgLyBjZWxsV2lkdGgpIDogTWF0aC5mbG9vcigoc3RhcnQueCAtIHJvd0JveC5sZWZ0KSAvIGNlbGxXaWR0aCk7XG5cbiAgICBpZiAoaXNDdXJyZW50Um93KSB7XG4gICAgICBpZiAoY3VycmVudFNsb3QgPCBzdGFydElkeCkgc3RhcnRJZHggPSBjdXJyZW50U2xvdDtlbHNlIGVuZElkeCA9IGN1cnJlbnRTbG90OyAvL3NlbGVjdCBjdXJyZW50IHJhbmdlXG4gICAgfSBlbHNlIGlmIChzdGFydC55IDwgYm94LnkpIHtcbiAgICAgIC8vIHRoZSBjdXJyZW50IHJvdyBpcyBiZWxvdyBzdGFydCByb3dcbiAgICAgIC8vIHNlbGVjdCBjZWxscyB0byB0aGUgcmlnaHQgb2YgdGhlIHN0YXJ0IGNlbGxcbiAgICAgIGVuZElkeCA9IGxhc3RTbG90SWR4O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzZWxlY3QgY2VsbHMgdG8gdGhlIGxlZnQgb2YgdGhlIHN0YXJ0IGNlbGxcbiAgICAgIHN0YXJ0SWR4ID0gMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0YXJ0SWR4OiBzdGFydElkeCxcbiAgICBlbmRJZHg6IGVuZElkeFxuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9FdmVudENlbGwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0V2ZW50Q2VsbFwiKSk7XG5cbnZhciBfc2VsZWN0aW9uID0gcmVxdWlyZShcIi4vdXRpbHMvc2VsZWN0aW9uXCIpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG52YXIgX2RlZmF1bHQgPSB7XG4gIHByb3BUeXBlczoge1xuICAgIHNsb3RNZXRyaWNzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc2VsZWN0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG4gICAgaXNBbGxEYXk6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAgIGFjY2Vzc29yczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGxvY2FsaXplcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbXBvbmVudHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBnZXR0ZXJzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgb25TZWxlY3Q6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAgIG9uRG91YmxlQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAgIG9uS2V5UHJlc3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG4gIH0sXG4gIGRlZmF1bHRQcm9wczoge1xuICAgIHNlZ21lbnRzOiBbXSxcbiAgICBzZWxlY3RlZDoge31cbiAgfSxcbiAgcmVuZGVyRXZlbnQ6IGZ1bmN0aW9uIHJlbmRlckV2ZW50KHByb3BzLCBldmVudCkge1xuICAgIHZhciBzZWxlY3RlZCA9IHByb3BzLnNlbGVjdGVkLFxuICAgICAgICBfID0gcHJvcHMuaXNBbGxEYXksXG4gICAgICAgIGFjY2Vzc29ycyA9IHByb3BzLmFjY2Vzc29ycyxcbiAgICAgICAgZ2V0dGVycyA9IHByb3BzLmdldHRlcnMsXG4gICAgICAgIG9uU2VsZWN0ID0gcHJvcHMub25TZWxlY3QsXG4gICAgICAgIG9uRG91YmxlQ2xpY2sgPSBwcm9wcy5vbkRvdWJsZUNsaWNrLFxuICAgICAgICBvbktleVByZXNzID0gcHJvcHMub25LZXlQcmVzcyxcbiAgICAgICAgbG9jYWxpemVyID0gcHJvcHMubG9jYWxpemVyLFxuICAgICAgICBzbG90TWV0cmljcyA9IHByb3BzLnNsb3RNZXRyaWNzLFxuICAgICAgICBjb21wb25lbnRzID0gcHJvcHMuY29tcG9uZW50cyxcbiAgICAgICAgcmVzaXphYmxlID0gcHJvcHMucmVzaXphYmxlO1xuICAgIHZhciBjb250aW51ZXNQcmlvciA9IHNsb3RNZXRyaWNzLmNvbnRpbnVlc1ByaW9yKGV2ZW50KTtcbiAgICB2YXIgY29udGludWVzQWZ0ZXIgPSBzbG90TWV0cmljcy5jb250aW51ZXNBZnRlcihldmVudCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9FdmVudENlbGwuZGVmYXVsdCwge1xuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgZ2V0dGVyczogZ2V0dGVycyxcbiAgICAgIGxvY2FsaXplcjogbG9jYWxpemVyLFxuICAgICAgYWNjZXNzb3JzOiBhY2Nlc3NvcnMsXG4gICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLFxuICAgICAgb25TZWxlY3Q6IG9uU2VsZWN0LFxuICAgICAgb25Eb3VibGVDbGljazogb25Eb3VibGVDbGljayxcbiAgICAgIG9uS2V5UHJlc3M6IG9uS2V5UHJlc3MsXG4gICAgICBjb250aW51ZXNQcmlvcjogY29udGludWVzUHJpb3IsXG4gICAgICBjb250aW51ZXNBZnRlcjogY29udGludWVzQWZ0ZXIsXG4gICAgICBzbG90U3RhcnQ6IHNsb3RNZXRyaWNzLmZpcnN0LFxuICAgICAgc2xvdEVuZDogc2xvdE1ldHJpY3MubGFzdCxcbiAgICAgIHNlbGVjdGVkOiAoMCwgX3NlbGVjdGlvbi5pc1NlbGVjdGVkKShldmVudCwgc2VsZWN0ZWQpLFxuICAgICAgcmVzaXphYmxlOiByZXNpemFibGVcbiAgICB9KTtcbiAgfSxcbiAgcmVuZGVyU3BhbjogZnVuY3Rpb24gcmVuZGVyU3BhbihzbG90cywgbGVuLCBrZXksIGNvbnRlbnQpIHtcbiAgICBpZiAoY29udGVudCA9PT0gdm9pZCAwKSB7XG4gICAgICBjb250ZW50ID0gJyAnO1xuICAgIH1cblxuICAgIHZhciBwZXIgPSBNYXRoLmFicyhsZW4pIC8gc2xvdHMgKiAxMDAgKyAnJSc7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGtleToga2V5LFxuICAgICAgY2xhc3NOYW1lOiBcInJiYy1yb3ctc2VnbWVudFwiIC8vIElFMTAvMTEgbmVlZCBtYXgtd2lkdGguIGZsZXgtYmFzaXMgZG9lc24ndCByZXNwZWN0IGJveC1zaXppbmdcbiAgICAgICxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIFdlYmtpdEZsZXhCYXNpczogcGVyLFxuICAgICAgICBmbGV4QmFzaXM6IHBlcixcbiAgICAgICAgbWF4V2lkdGg6IHBlclxuICAgICAgfVxuICAgIH0sIGNvbnRlbnQpO1xuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbHN4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xzeFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfRXZlbnRSb3dNaXhpbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRXZlbnRSb3dNaXhpblwiKSk7XG5cbnZhciBFdmVudFJvdyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEV2ZW50Um93LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBFdmVudFJvdygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRXZlbnRSb3cucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHNlZ21lbnRzID0gX3RoaXMkcHJvcHMuc2VnbWVudHMsXG4gICAgICAgIHNsb3RzID0gX3RoaXMkcHJvcHMuc2xvdE1ldHJpY3Muc2xvdHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZTtcbiAgICB2YXIgbGFzdEVuZCA9IDE7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbHN4LmRlZmF1bHQpKGNsYXNzTmFtZSwgJ3JiYy1yb3cnKVxuICAgIH0sIHNlZ21lbnRzLnJlZHVjZShmdW5jdGlvbiAocm93LCBfcmVmLCBsaSkge1xuICAgICAgdmFyIGV2ZW50ID0gX3JlZi5ldmVudCxcbiAgICAgICAgICBsZWZ0ID0gX3JlZi5sZWZ0LFxuICAgICAgICAgIHJpZ2h0ID0gX3JlZi5yaWdodCxcbiAgICAgICAgICBzcGFuID0gX3JlZi5zcGFuO1xuICAgICAgdmFyIGtleSA9ICdfbHZsXycgKyBsaTtcbiAgICAgIHZhciBnYXAgPSBsZWZ0IC0gbGFzdEVuZDtcblxuICAgICAgdmFyIGNvbnRlbnQgPSBfRXZlbnRSb3dNaXhpbi5kZWZhdWx0LnJlbmRlckV2ZW50KF90aGlzLnByb3BzLCBldmVudCk7XG5cbiAgICAgIGlmIChnYXApIHJvdy5wdXNoKF9FdmVudFJvd01peGluLmRlZmF1bHQucmVuZGVyU3BhbihzbG90cywgZ2FwLCBrZXkgKyBcIl9nYXBcIikpO1xuICAgICAgcm93LnB1c2goX0V2ZW50Um93TWl4aW4uZGVmYXVsdC5yZW5kZXJTcGFuKHNsb3RzLCBzcGFuLCBrZXksIGNvbnRlbnQpKTtcbiAgICAgIGxhc3RFbmQgPSByaWdodCArIDE7XG4gICAgICByZXR1cm4gcm93O1xuICAgIH0sIFtdKSk7XG4gIH07XG5cbiAgcmV0dXJuIEV2ZW50Um93O1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5FdmVudFJvdy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgc2VnbWVudHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheVxufSwgX0V2ZW50Um93TWl4aW4uZGVmYXVsdC5wcm9wVHlwZXMpIDoge307XG5FdmVudFJvdy5kZWZhdWx0UHJvcHMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBfRXZlbnRSb3dNaXhpbi5kZWZhdWx0LmRlZmF1bHRQcm9wcyk7XG52YXIgX2RlZmF1bHQgPSBFdmVudFJvdztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbmRJbmRleDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXRjaDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaWN0Q29tcGFyYWJsZTtcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZTtcbiIsInZhciBiYXNlSXNNYXRjaCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hdGNoJyksXG4gICAgZ2V0TWF0Y2hEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWF0Y2hEYXRhJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlcztcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG4iLCJ2YXIgbWVtb2l6ZUNhcHBlZCA9IHJlcXVpcmUoJy4vX21lbW9pemVDYXBwZWQnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvUGF0aDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHN0cmluZ1RvUGF0aCA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvUGF0aCcpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXQ7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VIYXNJbjtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG4gIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQYXRoO1xuIiwidmFyIGJhc2VIYXNJbiA9IHJlcXVpcmUoJy4vX2Jhc2VIYXNJbicpLFxuICAgIGhhc1BhdGggPSByZXF1aXJlKCcuL19oYXNQYXRoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNJbjtcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzUHJvcGVydHk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHk7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5RGVlcDtcbiIsInZhciBiYXNlUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHknKSxcbiAgICBiYXNlUHJvcGVydHlEZWVwID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5RGVlcCcpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9wZXJ0eTtcbiIsInZhciBiYXNlTWF0Y2hlcyA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzJyksXG4gICAgYmFzZU1hdGNoZXNQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgcHJvcGVydHkgPSByZXF1aXJlKCcuL3Byb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICB9XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUl0ZXJhdGVlO1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggYSBzaW5nbGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuICovXG52YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbi8qKlxuICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAqL1xuZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuXG4gIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyaW1tZWRFbmRJbmRleDtcbiIsInZhciB0cmltbWVkRW5kSW5kZXggPSByZXF1aXJlKCcuL190cmltbWVkRW5kSW5kZXgnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbVN0YXJ0ID0gL15cXHMrLztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50cmltYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRyaW0oc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdcbiAgICA/IHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKVxuICAgIDogc3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUcmltO1xuIiwidmFyIGJhc2VUcmltID0gcmVxdWlyZSgnLi9fYmFzZVRyaW0nKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG4iLCJ2YXIgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwODtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvRmluaXRlO1xuIiwidmFyIHRvRmluaXRlID0gcmVxdWlyZSgnLi90b0Zpbml0ZScpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvSW50ZWdlcjtcbiIsInZhciBiYXNlRmluZEluZGV4ID0gcmVxdWlyZSgnLi9fYmFzZUZpbmRJbmRleCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vdG9JbnRlZ2VyJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAxLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gKiBdO1xuICpcbiAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICogLy8gPT4gMFxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICogLy8gPT4gMVxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gKiAvLyA9PiAwXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICogLy8gPT4gMlxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gIH1cbiAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZEluZGV4O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5lbmRPZlJhbmdlID0gZW5kT2ZSYW5nZTtcbmV4cG9ydHMuZXZlbnRTZWdtZW50cyA9IGV2ZW50U2VnbWVudHM7XG5leHBvcnRzLmV2ZW50TGV2ZWxzID0gZXZlbnRMZXZlbHM7XG5leHBvcnRzLmluUmFuZ2UgPSBpblJhbmdlO1xuZXhwb3J0cy5zZWdzT3ZlcmxhcCA9IHNlZ3NPdmVybGFwO1xuZXhwb3J0cy5zb3J0RXZlbnRzID0gc29ydEV2ZW50cztcblxudmFyIF9maW5kSW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvZmluZEluZGV4XCIpKTtcblxuZnVuY3Rpb24gZW5kT2ZSYW5nZShfcmVmKSB7XG4gIHZhciBkYXRlUmFuZ2UgPSBfcmVmLmRhdGVSYW5nZSxcbiAgICAgIF9yZWYkdW5pdCA9IF9yZWYudW5pdCxcbiAgICAgIHVuaXQgPSBfcmVmJHVuaXQgPT09IHZvaWQgMCA/ICdkYXknIDogX3JlZiR1bml0LFxuICAgICAgbG9jYWxpemVyID0gX3JlZi5sb2NhbGl6ZXI7XG4gIHJldHVybiB7XG4gICAgZmlyc3Q6IGRhdGVSYW5nZVswXSxcbiAgICBsYXN0OiBsb2NhbGl6ZXIuYWRkKGRhdGVSYW5nZVtkYXRlUmFuZ2UubGVuZ3RoIC0gMV0sIDEsIHVuaXQpXG4gIH07XG59IC8vIHByb3Blcmx5IGNhbGN1bGF0aW5nIHNlZ21lbnRzIHJlcXVpcmVzIHdvcmtpbmcgd2l0aCBkYXRlcyBpblxuLy8gdGhlIHRpbWV6b25lIHdlJ3JlIHdvcmtpbmcgd2l0aCwgc28gd2UgdXNlIHRoZSBsb2NhbGl6ZXJcblxuXG5mdW5jdGlvbiBldmVudFNlZ21lbnRzKGV2ZW50LCByYW5nZSwgYWNjZXNzb3JzLCBsb2NhbGl6ZXIpIHtcbiAgdmFyIF9lbmRPZlJhbmdlID0gZW5kT2ZSYW5nZSh7XG4gICAgZGF0ZVJhbmdlOiByYW5nZSxcbiAgICBsb2NhbGl6ZXI6IGxvY2FsaXplclxuICB9KSxcbiAgICAgIGZpcnN0ID0gX2VuZE9mUmFuZ2UuZmlyc3QsXG4gICAgICBsYXN0ID0gX2VuZE9mUmFuZ2UubGFzdDtcblxuICB2YXIgc2xvdHMgPSBsb2NhbGl6ZXIuZGlmZihmaXJzdCwgbGFzdCwgJ2RheScpO1xuICB2YXIgc3RhcnQgPSBsb2NhbGl6ZXIubWF4KGxvY2FsaXplci5zdGFydE9mKGFjY2Vzc29ycy5zdGFydChldmVudCksICdkYXknKSwgZmlyc3QpO1xuICB2YXIgZW5kID0gbG9jYWxpemVyLm1pbihsb2NhbGl6ZXIuY2VpbChhY2Nlc3NvcnMuZW5kKGV2ZW50KSwgJ2RheScpLCBsYXN0KTtcbiAgdmFyIHBhZGRpbmcgPSAoMCwgX2ZpbmRJbmRleC5kZWZhdWx0KShyYW5nZSwgZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gbG9jYWxpemVyLmlzU2FtZURhdGUoeCwgc3RhcnQpO1xuICB9KTtcbiAgdmFyIHNwYW4gPSBsb2NhbGl6ZXIuZGlmZihzdGFydCwgZW5kLCAnZGF5Jyk7XG4gIHNwYW4gPSBNYXRoLm1pbihzcGFuLCBzbG90cyk7IC8vIFRoZSBzZWdtZW50T2Zmc2V0IGlzIG5lY2Vzc2FyeSB3aGVuIGFkanVzdGluZyBmb3IgdGltZXpvbmVzXG4gIC8vIGFoZWFkIG9mIHRoZSBicm93c2VyIHRpbWV6b25lXG5cbiAgc3BhbiA9IE1hdGgubWF4KHNwYW4gLSBsb2NhbGl6ZXIuc2VnbWVudE9mZnNldCwgMSk7XG4gIHJldHVybiB7XG4gICAgZXZlbnQ6IGV2ZW50LFxuICAgIHNwYW46IHNwYW4sXG4gICAgbGVmdDogcGFkZGluZyArIDEsXG4gICAgcmlnaHQ6IE1hdGgubWF4KHBhZGRpbmcgKyBzcGFuLCAxKVxuICB9O1xufVxuXG5mdW5jdGlvbiBldmVudExldmVscyhyb3dTZWdtZW50cywgbGltaXQpIHtcbiAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHtcbiAgICBsaW1pdCA9IEluZmluaXR5O1xuICB9XG5cbiAgdmFyIGksXG4gICAgICBqLFxuICAgICAgc2VnLFxuICAgICAgbGV2ZWxzID0gW10sXG4gICAgICBleHRyYSA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCByb3dTZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHNlZyA9IHJvd1NlZ21lbnRzW2ldO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IGxldmVscy5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKCFzZWdzT3ZlcmxhcChzZWcsIGxldmVsc1tqXSkpIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChqID49IGxpbWl0KSB7XG4gICAgICBleHRyYS5wdXNoKHNlZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIDtcbiAgICAgIChsZXZlbHNbal0gfHwgKGxldmVsc1tqXSA9IFtdKSkucHVzaChzZWcpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBsZXZlbHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXZlbHNbaV0uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEubGVmdCAtIGIubGVmdDtcbiAgICB9KTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxldmVsczogbGV2ZWxzLFxuICAgIGV4dHJhOiBleHRyYVxuICB9O1xufVxuXG5mdW5jdGlvbiBpblJhbmdlKGUsIHN0YXJ0LCBlbmQsIGFjY2Vzc29ycywgbG9jYWxpemVyKSB7XG4gIHZhciBldmVudCA9IHtcbiAgICBzdGFydDogYWNjZXNzb3JzLnN0YXJ0KGUpLFxuICAgIGVuZDogYWNjZXNzb3JzLmVuZChlKVxuICB9O1xuICB2YXIgcmFuZ2UgPSB7XG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIGVuZDogZW5kXG4gIH07XG4gIHJldHVybiBsb2NhbGl6ZXIuaW5FdmVudFJhbmdlKHtcbiAgICBldmVudDogZXZlbnQsXG4gICAgcmFuZ2U6IHJhbmdlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZWdzT3ZlcmxhcChzZWcsIG90aGVyU2Vncykge1xuICByZXR1cm4gb3RoZXJTZWdzLnNvbWUoZnVuY3Rpb24gKG90aGVyU2VnKSB7XG4gICAgcmV0dXJuIG90aGVyU2VnLmxlZnQgPD0gc2VnLnJpZ2h0ICYmIG90aGVyU2VnLnJpZ2h0ID49IHNlZy5sZWZ0O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc29ydEV2ZW50cyhldmVudEEsIGV2ZW50QiwgYWNjZXNzb3JzLCBsb2NhbGl6ZXIpIHtcbiAgdmFyIGV2dEEgPSB7XG4gICAgc3RhcnQ6IGFjY2Vzc29ycy5zdGFydChldmVudEEpLFxuICAgIGVuZDogYWNjZXNzb3JzLmVuZChldmVudEEpLFxuICAgIGFsbERheTogYWNjZXNzb3JzLmFsbERheShldmVudEEpXG4gIH07XG4gIHZhciBldnRCID0ge1xuICAgIHN0YXJ0OiBhY2Nlc3NvcnMuc3RhcnQoZXZlbnRCKSxcbiAgICBlbmQ6IGFjY2Vzc29ycy5lbmQoZXZlbnRCKSxcbiAgICBhbGxEYXk6IGFjY2Vzc29ycy5hbGxEYXkoZXZlbnRCKVxuICB9O1xuICByZXR1cm4gbG9jYWxpemVyLnNvcnRFdmVudHMoe1xuICAgIGV2dEE6IGV2dEEsXG4gICAgZXZ0QjogZXZ0QlxuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9FdmVudFJvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL0V2ZW50Um93XCIpKTtcblxudmFyIF9TZWxlY3Rpb24gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi4vLi4vU2VsZWN0aW9uXCIpKTtcblxudmFyIF9ldmVudExldmVscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy9ldmVudExldmVsc1wiKTtcblxudmFyIF9zZWxlY3Rpb24gPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvc2VsZWN0aW9uXCIpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcblxudmFyIF9EbkRDb250ZXh0ID0gcmVxdWlyZShcIi4vRG5EQ29udGV4dFwiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxudmFyIFdlZWtXcmFwcGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoV2Vla1dyYXBwZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFdlZWtXcmFwcGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlTW92ZSA9IGZ1bmN0aW9uIChwb2ludCwgYm91bmRzLCBkcmFnZ2VkRXZlbnQpIHtcbiAgICAgIGlmICghKDAsIF9zZWxlY3Rpb24ucG9pbnRJbkJveCkoYm91bmRzLCBwb2ludCkpIHJldHVybiBfdGhpcy5yZXNldCgpO1xuICAgICAgdmFyIGV2ZW50ID0gX3RoaXMuY29udGV4dC5kcmFnZ2FibGUuZHJhZ0FuZERyb3BBY3Rpb24uZXZlbnQgfHwgZHJhZ2dlZEV2ZW50O1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYWNjZXNzb3JzID0gX3RoaXMkcHJvcHMuYWNjZXNzb3JzLFxuICAgICAgICAgIHNsb3RNZXRyaWNzID0gX3RoaXMkcHJvcHMuc2xvdE1ldHJpY3MsXG4gICAgICAgICAgcnRsID0gX3RoaXMkcHJvcHMucnRsLFxuICAgICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzLmxvY2FsaXplcjtcbiAgICAgIHZhciBzbG90ID0gKDAsIF9zZWxlY3Rpb24uZ2V0U2xvdEF0WCkoYm91bmRzLCBwb2ludC54LCBydGwsIHNsb3RNZXRyaWNzLnNsb3RzKTtcbiAgICAgIHZhciBkYXRlID0gc2xvdE1ldHJpY3MuZ2V0RGF0ZUZvclNsb3Qoc2xvdCk7IC8vIEFkanVzdCB0aGUgZGF0ZXMsIGJ1dCBtYWludGFpbiB0aGUgdGltZXMgd2hlbiBtb3ZpbmdcblxuICAgICAgdmFyIF9ldmVudFRpbWVzID0gKDAsIF9jb21tb24uZXZlbnRUaW1lcykoZXZlbnQsIGFjY2Vzc29ycywgbG9jYWxpemVyKSxcbiAgICAgICAgICBzdGFydCA9IF9ldmVudFRpbWVzLnN0YXJ0LFxuICAgICAgICAgIGR1cmF0aW9uID0gX2V2ZW50VGltZXMuZHVyYXRpb247XG5cbiAgICAgIHN0YXJ0ID0gbG9jYWxpemVyLm1lcmdlKGRhdGUsIHN0YXJ0KTtcbiAgICAgIHZhciBlbmQgPSBsb2NhbGl6ZXIuYWRkKHN0YXJ0LCBkdXJhdGlvbiwgJ21pbGxpc2Vjb25kcycpOyAvLyBMQVRFUjogd2hlbiBkcmFnZ2luZyBhIG11bHRpLXJvdyBldmVudCwgb25seSB0aGUgZmlyc3Qgcm93IGlzIGFuaW1hdGluZ1xuXG4gICAgICBfdGhpcy51cGRhdGUoZXZlbnQsIHN0YXJ0LCBlbmQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVEcm9wRnJvbU91dHNpZGUgPSBmdW5jdGlvbiAocG9pbnQsIGJvdW5kcykge1xuICAgICAgaWYgKCFfdGhpcy5jb250ZXh0LmRyYWdnYWJsZS5vbkRyb3BGcm9tT3V0c2lkZSkgcmV0dXJuO1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHNsb3RNZXRyaWNzID0gX3RoaXMkcHJvcHMyLnNsb3RNZXRyaWNzLFxuICAgICAgICAgIHJ0bCA9IF90aGlzJHByb3BzMi5ydGwsXG4gICAgICAgICAgbG9jYWxpemVyID0gX3RoaXMkcHJvcHMyLmxvY2FsaXplcjtcbiAgICAgIHZhciBzbG90ID0gKDAsIF9zZWxlY3Rpb24uZ2V0U2xvdEF0WCkoYm91bmRzLCBwb2ludC54LCBydGwsIHNsb3RNZXRyaWNzLnNsb3RzKTtcbiAgICAgIHZhciBzdGFydCA9IHNsb3RNZXRyaWNzLmdldERhdGVGb3JTbG90KHNsb3QpO1xuXG4gICAgICBfdGhpcy5jb250ZXh0LmRyYWdnYWJsZS5vbkRyb3BGcm9tT3V0c2lkZSh7XG4gICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgZW5kOiBsb2NhbGl6ZXIuYWRkKHN0YXJ0LCAxLCAnZGF5JyksXG4gICAgICAgIGFsbERheTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVEcmFnT3ZlckZyb21PdXRzaWRlID0gZnVuY3Rpb24gKHBvaW50LCBub2RlKSB7XG4gICAgICBpZiAoIV90aGlzLmNvbnRleHQuZHJhZ2dhYmxlLmRyYWdGcm9tT3V0c2lkZUl0ZW0pIHJldHVybjtcblxuICAgICAgX3RoaXMuaGFuZGxlTW92ZShwb2ludCwgbm9kZSwgX3RoaXMuY29udGV4dC5kcmFnZ2FibGUuZHJhZ0Zyb21PdXRzaWRlSXRlbSgpKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX3NlbGVjdGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbm9kZSA9IF90aGlzLnJlZi5jdXJyZW50LmNsb3Nlc3QoJy5yYmMtbW9udGgtcm93LCAucmJjLWFsbGRheS1jZWxsJyk7XG5cbiAgICAgIHZhciBjb250YWluZXIgPSBub2RlLmNsb3Nlc3QoJy5yYmMtbW9udGgtdmlldywgLnJiYy10aW1lLXZpZXcnKTtcbiAgICAgIHZhciBzZWxlY3RvciA9IF90aGlzLl9zZWxlY3RvciA9IG5ldyBfU2VsZWN0aW9uLmRlZmF1bHQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgfSk7XG4gICAgICBzZWxlY3Rvci5vbignYmVmb3JlU2VsZWN0JywgZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICAgIHZhciBpc0FsbERheSA9IF90aGlzLnByb3BzLmlzQWxsRGF5O1xuICAgICAgICB2YXIgYWN0aW9uID0gX3RoaXMuY29udGV4dC5kcmFnZ2FibGUuZHJhZ0FuZERyb3BBY3Rpb24uYWN0aW9uO1xuICAgICAgICB2YXIgYm91bmRzID0gKDAsIF9TZWxlY3Rpb24uZ2V0Qm91bmRzRm9yTm9kZSkobm9kZSk7XG4gICAgICAgIHZhciBpc0luQm94ID0gKDAsIF9zZWxlY3Rpb24ucG9pbnRJbkJveCkoYm91bmRzLCBwb2ludCk7XG4gICAgICAgIHJldHVybiBhY3Rpb24gPT09ICdtb3ZlJyB8fCBhY3Rpb24gPT09ICdyZXNpemUnICYmICghaXNBbGxEYXkgfHwgaXNJbkJveCk7XG4gICAgICB9KTtcbiAgICAgIHNlbGVjdG9yLm9uKCdzZWxlY3RpbmcnLCBmdW5jdGlvbiAoYm94KSB7XG4gICAgICAgIHZhciBib3VuZHMgPSAoMCwgX1NlbGVjdGlvbi5nZXRCb3VuZHNGb3JOb2RlKShub2RlKTtcbiAgICAgICAgdmFyIGRyYWdBbmREcm9wQWN0aW9uID0gX3RoaXMuY29udGV4dC5kcmFnZ2FibGUuZHJhZ0FuZERyb3BBY3Rpb247XG4gICAgICAgIGlmIChkcmFnQW5kRHJvcEFjdGlvbi5hY3Rpb24gPT09ICdtb3ZlJykgX3RoaXMuaGFuZGxlTW92ZShib3gsIGJvdW5kcyk7XG4gICAgICAgIGlmIChkcmFnQW5kRHJvcEFjdGlvbi5hY3Rpb24gPT09ICdyZXNpemUnKSBfdGhpcy5oYW5kbGVSZXNpemUoYm94LCBib3VuZHMpO1xuICAgICAgfSk7XG4gICAgICBzZWxlY3Rvci5vbignc2VsZWN0U3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5jb250ZXh0LmRyYWdnYWJsZS5vblN0YXJ0KCk7XG4gICAgICB9KTtcbiAgICAgIHNlbGVjdG9yLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgdmFyIGJvdW5kcyA9ICgwLCBfU2VsZWN0aW9uLmdldEJvdW5kc0Zvck5vZGUpKG5vZGUpO1xuICAgICAgICBpZiAoIV90aGlzLnN0YXRlLnNlZ21lbnQpIHJldHVybjtcblxuICAgICAgICBpZiAoISgwLCBfc2VsZWN0aW9uLnBvaW50SW5Cb3gpKGJvdW5kcywgcG9pbnQpKSB7XG4gICAgICAgICAgX3RoaXMucmVzZXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5oYW5kbGVJbnRlcmFjdGlvbkVuZCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHNlbGVjdG9yLm9uKCdkcm9wRnJvbU91dHNpZGUnLCBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5jb250ZXh0LmRyYWdnYWJsZS5vbkRyb3BGcm9tT3V0c2lkZSkgcmV0dXJuO1xuICAgICAgICB2YXIgYm91bmRzID0gKDAsIF9TZWxlY3Rpb24uZ2V0Qm91bmRzRm9yTm9kZSkobm9kZSk7XG4gICAgICAgIGlmICghKDAsIF9zZWxlY3Rpb24ucG9pbnRJbkJveCkoYm91bmRzLCBwb2ludCkpIHJldHVybjtcblxuICAgICAgICBfdGhpcy5oYW5kbGVEcm9wRnJvbU91dHNpZGUocG9pbnQsIGJvdW5kcyk7XG4gICAgICB9KTtcbiAgICAgIHNlbGVjdG9yLm9uKCdkcmFnT3ZlckZyb21PdXRzaWRlJywgZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICAgIGlmICghX3RoaXMuY29udGV4dC5kcmFnZ2FibGUuZHJhZ0Zyb21PdXRzaWRlSXRlbSkgcmV0dXJuO1xuICAgICAgICB2YXIgYm91bmRzID0gKDAsIF9TZWxlY3Rpb24uZ2V0Qm91bmRzRm9yTm9kZSkobm9kZSk7XG5cbiAgICAgICAgX3RoaXMuaGFuZGxlRHJhZ092ZXJGcm9tT3V0c2lkZShwb2ludCwgYm91bmRzKTtcbiAgICAgIH0pO1xuICAgICAgc2VsZWN0b3Iub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuY29udGV4dC5kcmFnZ2FibGUub25FbmQobnVsbCk7XG4gICAgICB9KTtcbiAgICAgIHNlbGVjdG9yLm9uKCdyZXNldCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMucmVzZXQoKTtcblxuICAgICAgICBfdGhpcy5jb250ZXh0LmRyYWdnYWJsZS5vbkVuZChudWxsKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVJbnRlcmFjdGlvbkVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICByZXNvdXJjZUlkID0gX3RoaXMkcHJvcHMzLnJlc291cmNlSWQsXG4gICAgICAgICAgaXNBbGxEYXkgPSBfdGhpcyRwcm9wczMuaXNBbGxEYXk7XG4gICAgICB2YXIgZXZlbnQgPSBfdGhpcy5zdGF0ZS5zZWdtZW50LmV2ZW50O1xuXG4gICAgICBfdGhpcy5yZXNldCgpO1xuXG4gICAgICBfdGhpcy5jb250ZXh0LmRyYWdnYWJsZS5vbkVuZCh7XG4gICAgICAgIHN0YXJ0OiBldmVudC5zdGFydCxcbiAgICAgICAgZW5kOiBldmVudC5lbmQsXG4gICAgICAgIHJlc291cmNlSWQ6IHJlc291cmNlSWQsXG4gICAgICAgIGlzQWxsRGF5OiBpc0FsbERheVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLl90ZWFyZG93blNlbGVjdGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLl9zZWxlY3RvcikgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5fc2VsZWN0b3IudGVhcmRvd24oKTtcblxuICAgICAgX3RoaXMuX3NlbGVjdG9yID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICBfdGhpcy5yZWYgPSAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlUmVmKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFdlZWtXcmFwcGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9zZWxlY3RhYmxlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5fdGVhcmRvd25TZWxlY3RhYmxlKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuc2VnbWVudCkgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzZWdtZW50OiBudWxsXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShldmVudCwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBzZWdtZW50ID0gKDAsIF9ldmVudExldmVscy5ldmVudFNlZ21lbnRzKSgoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBldmVudCwge1xuICAgICAgZW5kOiBlbmQsXG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBfX2lzUHJldmlldzogdHJ1ZVxuICAgIH0pLCB0aGlzLnByb3BzLnNsb3RNZXRyaWNzLnJhbmdlLCBfY29tbW9uLmRyYWdBY2Nlc3NvcnMsIHRoaXMucHJvcHMubG9jYWxpemVyKTtcbiAgICB2YXIgbGFzdFNlZ21lbnQgPSB0aGlzLnN0YXRlLnNlZ21lbnQ7XG5cbiAgICBpZiAobGFzdFNlZ21lbnQgJiYgc2VnbWVudC5zcGFuID09PSBsYXN0U2VnbWVudC5zcGFuICYmIHNlZ21lbnQubGVmdCA9PT0gbGFzdFNlZ21lbnQubGVmdCAmJiBzZWdtZW50LnJpZ2h0ID09PSBsYXN0U2VnbWVudC5yaWdodCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2VnbWVudDogc2VnbWVudFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVSZXNpemUgPSBmdW5jdGlvbiBoYW5kbGVSZXNpemUocG9pbnQsIGJvdW5kcykge1xuICAgIHZhciBfdGhpcyRjb250ZXh0JGRyYWdnYWIgPSB0aGlzLmNvbnRleHQuZHJhZ2dhYmxlLmRyYWdBbmREcm9wQWN0aW9uLFxuICAgICAgICBldmVudCA9IF90aGlzJGNvbnRleHQkZHJhZ2dhYi5ldmVudCxcbiAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkY29udGV4dCRkcmFnZ2FiLmRpcmVjdGlvbjtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWNjZXNzb3JzID0gX3RoaXMkcHJvcHM0LmFjY2Vzc29ycyxcbiAgICAgICAgc2xvdE1ldHJpY3MgPSBfdGhpcyRwcm9wczQuc2xvdE1ldHJpY3MsXG4gICAgICAgIHJ0bCA9IF90aGlzJHByb3BzNC5ydGwsXG4gICAgICAgIGxvY2FsaXplciA9IF90aGlzJHByb3BzNC5sb2NhbGl6ZXI7XG5cbiAgICB2YXIgX2V2ZW50VGltZXMyID0gKDAsIF9jb21tb24uZXZlbnRUaW1lcykoZXZlbnQsIGFjY2Vzc29ycywgbG9jYWxpemVyKSxcbiAgICAgICAgc3RhcnQgPSBfZXZlbnRUaW1lczIuc3RhcnQsXG4gICAgICAgIGVuZCA9IF9ldmVudFRpbWVzMi5lbmQ7XG5cbiAgICB2YXIgc2xvdCA9ICgwLCBfc2VsZWN0aW9uLmdldFNsb3RBdFgpKGJvdW5kcywgcG9pbnQueCwgcnRsLCBzbG90TWV0cmljcy5zbG90cyk7XG4gICAgdmFyIGRhdGUgPSBzbG90TWV0cmljcy5nZXREYXRlRm9yU2xvdChzbG90KTtcbiAgICB2YXIgY3Vyc29ySW5Sb3cgPSAoMCwgX3NlbGVjdGlvbi5wb2ludEluQm94KShib3VuZHMsIHBvaW50KTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09ICdSSUdIVCcpIHtcbiAgICAgIGlmIChjdXJzb3JJblJvdykge1xuICAgICAgICBpZiAoc2xvdE1ldHJpY3MubGFzdCA8IHN0YXJ0KSByZXR1cm4gdGhpcy5yZXNldCgpO1xuICAgICAgICBlbmQgPSBsb2NhbGl6ZXIuYWRkKGRhdGUsIDEsICdkYXknKTtcbiAgICAgIH0gZWxzZSBpZiAobG9jYWxpemVyLmluUmFuZ2Uoc3RhcnQsIHNsb3RNZXRyaWNzLmZpcnN0LCBzbG90TWV0cmljcy5sYXN0KSB8fCBib3VuZHMuYm90dG9tIDwgcG9pbnQueSAmJiArc2xvdE1ldHJpY3MuZmlyc3QgPiArc3RhcnQpIHtcbiAgICAgICAgZW5kID0gbG9jYWxpemVyLmFkZChzbG90TWV0cmljcy5sYXN0LCAxLCAnbWlsbGlzZWNvbmRzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzZWdtZW50OiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvcmlnaW5hbEVuZCA9IGFjY2Vzc29ycy5lbmQoZXZlbnQpO1xuICAgICAgZW5kID0gbG9jYWxpemVyLm1lcmdlKGVuZCwgb3JpZ2luYWxFbmQpO1xuXG4gICAgICBpZiAobG9jYWxpemVyLmx0KGVuZCwgc3RhcnQpKSB7XG4gICAgICAgIGVuZCA9IG9yaWdpbmFsRW5kO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnTEVGVCcpIHtcbiAgICAgIGlmIChjdXJzb3JJblJvdykge1xuICAgICAgICBpZiAoc2xvdE1ldHJpY3MuZmlyc3QgPiBlbmQpIHJldHVybiB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHN0YXJ0ID0gZGF0ZTtcbiAgICAgIH0gZWxzZSBpZiAobG9jYWxpemVyLmluUmFuZ2UoZW5kLCBzbG90TWV0cmljcy5maXJzdCwgc2xvdE1ldHJpY3MubGFzdCkgfHwgYm91bmRzLnRvcCA+IHBvaW50LnkgJiYgbG9jYWxpemVyLmx0KHNsb3RNZXRyaWNzLmxhc3QsIGVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSBsb2NhbGl6ZXIuYWRkKHNsb3RNZXRyaWNzLmZpcnN0LCAtMSwgJ21pbGxpc2Vjb25kcycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvcmlnaW5hbFN0YXJ0ID0gYWNjZXNzb3JzLnN0YXJ0KGV2ZW50KTtcbiAgICAgIHN0YXJ0ID0gbG9jYWxpemVyLm1lcmdlKHN0YXJ0LCBvcmlnaW5hbFN0YXJ0KTtcblxuICAgICAgaWYgKGxvY2FsaXplci5ndChzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IG9yaWdpbmFsU3RhcnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGUoZXZlbnQsIHN0YXJ0LCBlbmQpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHM1LmNoaWxkcmVuLFxuICAgICAgICBhY2Nlc3NvcnMgPSBfdGhpcyRwcm9wczUuYWNjZXNzb3JzO1xuICAgIHZhciBzZWdtZW50ID0gdGhpcy5zdGF0ZS5zZWdtZW50O1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgY2xhc3NOYW1lOiBcInJiYy1hZGRvbnMtZG5kLXJvdy1ib2R5XCJcbiAgICB9LCBjaGlsZHJlbiwgc2VnbWVudCAmJiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRXZlbnRSb3cuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgc2VsZWN0ZWQ6IG51bGwsXG4gICAgICBjbGFzc05hbWU6IFwicmJjLWFkZG9ucy1kbmQtZHJhZy1yb3dcIixcbiAgICAgIHNlZ21lbnRzOiBbc2VnbWVudF0sXG4gICAgICBhY2Nlc3NvcnM6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGFjY2Vzc29ycywgX2NvbW1vbi5kcmFnQWNjZXNzb3JzKVxuICAgIH0pKSk7XG4gIH07XG5cbiAgcmV0dXJuIFdlZWtXcmFwcGVyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5XZWVrV3JhcHBlci5jb250ZXh0VHlwZSA9IF9EbkRDb250ZXh0LkRuRENvbnRleHQ7XG5XZWVrV3JhcHBlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGlzQWxsRGF5OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgc2xvdE1ldHJpY3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcbiAgYWNjZXNzb3JzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGdldHRlcnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY29tcG9uZW50czogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuICByZXNvdXJjZUlkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYW55LFxuICBydGw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBsb2NhbGl6ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnlcbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IFdlZWtXcmFwcGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB3aXRoRHJhZ0FuZERyb3A7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY2xzeCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsc3hcIikpO1xuXG52YXIgX3Byb3BUeXBlczIgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvcHJvcFR5cGVzXCIpO1xuXG52YXIgX0V2ZW50V3JhcHBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRXZlbnRXcmFwcGVyXCIpKTtcblxudmFyIF9FdmVudENvbnRhaW5lcldyYXBwZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0V2ZW50Q29udGFpbmVyV3JhcHBlclwiKSk7XG5cbnZhciBfV2Vla1dyYXBwZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1dlZWtXcmFwcGVyXCIpKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG5cbnZhciBfRG5EQ29udGV4dCA9IHJlcXVpcmUoXCIuL0RuRENvbnRleHRcIik7XG5cbnZhciBfZXhjbHVkZWQgPSBbXCJzZWxlY3RhYmxlXCIsIFwiZWxlbWVudFByb3BzXCJdO1xuXG5mdW5jdGlvbiB3aXRoRHJhZ0FuZERyb3AoQ2FsZW5kYXIpIHtcbiAgdmFyIERyYWdBbmREcm9wQ2FsZW5kYXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKERyYWdBbmREcm9wQ2FsZW5kYXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gRHJhZ0FuZERyb3BDYWxlbmRhcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICAgIF90aGlzLmRlZmF1bHRPbkRyYWdPdmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5oYW5kbGVCZWdpbkFjdGlvbiA9IGZ1bmN0aW9uIChldmVudCwgYWN0aW9uLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgb25EcmFnU3RhcnQgPSBfdGhpcy5wcm9wcy5vbkRyYWdTdGFydDtcbiAgICAgICAgaWYgKG9uRHJhZ1N0YXJ0KSBvbkRyYWdTdGFydCh7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX3RoaXMuaGFuZGxlSW50ZXJhY3Rpb25TdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLmludGVyYWN0aW5nID09PSBmYWxzZSkgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGludGVyYWN0aW5nOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX3RoaXMuaGFuZGxlSW50ZXJhY3Rpb25FbmQgPSBmdW5jdGlvbiAoaW50ZXJhY3Rpb25JbmZvKSB7XG4gICAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgICAgYWN0aW9uID0gX3RoaXMkc3RhdGUuYWN0aW9uLFxuICAgICAgICAgICAgZXZlbnQgPSBfdGhpcyRzdGF0ZS5ldmVudDtcbiAgICAgICAgaWYgKCFhY3Rpb24pIHJldHVybjtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBudWxsLFxuICAgICAgICAgIGV2ZW50OiBudWxsLFxuICAgICAgICAgIGludGVyYWN0aW5nOiBmYWxzZSxcbiAgICAgICAgICBkaXJlY3Rpb246IG51bGxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGludGVyYWN0aW9uSW5mbyA9PSBudWxsKSByZXR1cm47XG4gICAgICAgIGludGVyYWN0aW9uSW5mby5ldmVudCA9IGV2ZW50O1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG9uRXZlbnREcm9wID0gX3RoaXMkcHJvcHMub25FdmVudERyb3AsXG4gICAgICAgICAgICBvbkV2ZW50UmVzaXplID0gX3RoaXMkcHJvcHMub25FdmVudFJlc2l6ZTtcbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ21vdmUnICYmIG9uRXZlbnREcm9wKSBvbkV2ZW50RHJvcChpbnRlcmFjdGlvbkluZm8pO1xuICAgICAgICBpZiAoYWN0aW9uID09PSAncmVzaXplJyAmJiBvbkV2ZW50UmVzaXplKSBvbkV2ZW50UmVzaXplKGludGVyYWN0aW9uSW5mbyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgY29tcG9uZW50cyA9IF90aGlzLnByb3BzLmNvbXBvbmVudHM7XG4gICAgICBfdGhpcy5jb21wb25lbnRzID0gKDAsIF9jb21tb24ubWVyZ2VDb21wb25lbnRzKShjb21wb25lbnRzLCB7XG4gICAgICAgIGV2ZW50V3JhcHBlcjogX0V2ZW50V3JhcHBlci5kZWZhdWx0LFxuICAgICAgICBldmVudENvbnRhaW5lcldyYXBwZXI6IF9FdmVudENvbnRhaW5lcldyYXBwZXIuZGVmYXVsdCxcbiAgICAgICAgd2Vla1dyYXBwZXI6IF9XZWVrV3JhcHBlci5kZWZhdWx0XG4gICAgICB9KTtcbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICBpbnRlcmFjdGluZzogZmFsc2VcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IERyYWdBbmREcm9wQ2FsZW5kYXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldERuRENvbnRleHRWYWx1ZSA9IGZ1bmN0aW9uIGdldERuRENvbnRleHRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRyYWdnYWJsZToge1xuICAgICAgICAgIG9uU3RhcnQ6IHRoaXMuaGFuZGxlSW50ZXJhY3Rpb25TdGFydCxcbiAgICAgICAgICBvbkVuZDogdGhpcy5oYW5kbGVJbnRlcmFjdGlvbkVuZCxcbiAgICAgICAgICBvbkJlZ2luQWN0aW9uOiB0aGlzLmhhbmRsZUJlZ2luQWN0aW9uLFxuICAgICAgICAgIG9uRHJvcEZyb21PdXRzaWRlOiB0aGlzLnByb3BzLm9uRHJvcEZyb21PdXRzaWRlLFxuICAgICAgICAgIGRyYWdGcm9tT3V0c2lkZUl0ZW06IHRoaXMucHJvcHMuZHJhZ0Zyb21PdXRzaWRlSXRlbSxcbiAgICAgICAgICBkcmFnZ2FibGVBY2Nlc3NvcjogdGhpcy5wcm9wcy5kcmFnZ2FibGVBY2Nlc3NvcixcbiAgICAgICAgICByZXNpemFibGVBY2Nlc3NvcjogdGhpcy5wcm9wcy5yZXNpemFibGVBY2Nlc3NvcixcbiAgICAgICAgICBkcmFnQW5kRHJvcEFjdGlvbjogdGhpcy5zdGF0ZVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgc2VsZWN0YWJsZSA9IF90aGlzJHByb3BzMi5zZWxlY3RhYmxlLFxuICAgICAgICAgIGVsZW1lbnRQcm9wcyA9IF90aGlzJHByb3BzMi5lbGVtZW50UHJvcHMsXG4gICAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzMiwgX2V4Y2x1ZGVkKTtcbiAgICAgIHZhciBpbnRlcmFjdGluZyA9IHRoaXMuc3RhdGUuaW50ZXJhY3Rpbmc7XG4gICAgICBkZWxldGUgcHJvcHMub25FdmVudERyb3A7XG4gICAgICBkZWxldGUgcHJvcHMub25FdmVudFJlc2l6ZTtcbiAgICAgIHByb3BzLnNlbGVjdGFibGUgPSBzZWxlY3RhYmxlID8gJ2lnbm9yZUV2ZW50cycgOiBmYWxzZTtcbiAgICAgIHZhciBlbGVtZW50UHJvcHNXaXRoRHJvcEZyb21PdXRzaWRlID0gdGhpcy5wcm9wcy5vbkRyb3BGcm9tT3V0c2lkZSA/ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgICBvbkRyYWdPdmVyOiB0aGlzLnByb3BzLm9uRHJhZ092ZXIgfHwgdGhpcy5kZWZhdWx0T25EcmFnT3ZlclxuICAgICAgfSkgOiBlbGVtZW50UHJvcHM7XG4gICAgICBwcm9wcy5jbGFzc05hbWUgPSAoMCwgX2Nsc3guZGVmYXVsdCkocHJvcHMuY2xhc3NOYW1lLCAncmJjLWFkZG9ucy1kbmQnLCAhIWludGVyYWN0aW5nICYmICdyYmMtYWRkb25zLWRuZC1pcy1kcmFnZ2luZycpO1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmdldERuRENvbnRleHRWYWx1ZSgpO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9EbkRDb250ZXh0LkRuRENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENhbGVuZGFyLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgICBlbGVtZW50UHJvcHM6IGVsZW1lbnRQcm9wc1dpdGhEcm9wRnJvbU91dHNpZGUsXG4gICAgICAgIGNvbXBvbmVudHM6IHRoaXMuY29tcG9uZW50c1xuICAgICAgfSkpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIERyYWdBbmREcm9wQ2FsZW5kYXI7XG4gIH0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBEcmFnQW5kRHJvcENhbGVuZGFyLmRlZmF1bHRQcm9wcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIENhbGVuZGFyLmRlZmF1bHRQcm9wcywge1xuICAgIGRyYWdnYWJsZUFjY2Vzc29yOiBudWxsLFxuICAgIHJlc2l6YWJsZUFjY2Vzc29yOiBudWxsLFxuICAgIHJlc2l6YWJsZTogdHJ1ZVxuICB9KTtcbiAgRHJhZ0FuZERyb3BDYWxlbmRhci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBDYWxlbmRhci5wcm9wVHlwZXMsIHtcbiAgICBvbkV2ZW50RHJvcDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gICAgb25FdmVudFJlc2l6ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gICAgb25EcmFnU3RhcnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAgIG9uRHJhZ092ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAgIG9uRHJvcEZyb21PdXRzaWRlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgICBkcmFnRnJvbU91dHNpZGVJdGVtOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgICBkcmFnZ2FibGVBY2Nlc3NvcjogX3Byb3BUeXBlczIuYWNjZXNzb3IsXG4gICAgcmVzaXphYmxlQWNjZXNzb3I6IF9wcm9wVHlwZXMyLmFjY2Vzc29yLFxuICAgIHNlbGVjdGFibGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbdHJ1ZSwgZmFsc2UsICdpZ25vcmVFdmVudHMnXSksXG4gICAgcmVzaXphYmxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxuICB9KSA6IHt9O1xuICByZXR1cm4gRHJhZ0FuZERyb3BDYWxlbmRhcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3dpdGhEcmFnQW5kRHJvcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vd2l0aERyYWdBbmREcm9wXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gX3dpdGhEcmFnQW5kRHJvcC5kZWZhdWx0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCIvL2NyZWRpdCB0byBjaGhvdW1hbm4gYW5kIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2NoaG91bWFubi9xdWlja2FkZFxyXG5pbXBvcnQge0FwcCwgQnV0dG9uQ29tcG9uZW50LCBNb2RhbCwgVGV4dENvbXBvbmVudH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZW5lcmljSW5wdXRQcm9tcHQgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgICBwdWJsaWMgd2FpdEZvckNsb3NlOiBQcm9taXNlPHN0cmluZz47XHJcblxyXG4gICAgcHJpdmF0ZSByZXNvbHZlUHJvbWlzZTogKGlucHV0OiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIHJlamVjdFByb21pc2U6IChyZWFzb24/OiBhbnkpID0+IHZvaWQ7XHJcbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgcHJpdmF0ZSBkaWRTdWJtaXQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgaW5wdXRDb21wb25lbnQ6IFRleHRDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIGlucHV0OiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcblxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgUHJvbXB0KGFwcDogQXBwLCBoZWFkZXI6IHN0cmluZywgcGxhY2Vob2xkZXI/OiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCBuZXdQcm9tcHRNb2RhbCA9IG5ldyBHZW5lcmljSW5wdXRQcm9tcHQoYXBwLCBoZWFkZXIsIHBsYWNlaG9sZGVyLCB2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld1Byb21wdE1vZGFsLndhaXRGb3JDbG9zZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoYXBwOiBBcHAsIHByaXZhdGUgaGVhZGVyOiBzdHJpbmcsIHBsYWNlaG9sZGVyPzogc3RyaW5nLCB2YWx1ZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKGFwcCk7XHJcbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xyXG4gICAgICAgIHRoaXMuaW5wdXQgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy53YWl0Rm9yQ2xvc2UgPSBuZXcgUHJvbWlzZTxzdHJpbmc+KFxyXG4gICAgICAgICAgICAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVqZWN0UHJvbWlzZSA9IHJlamVjdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgIHRoaXMub3BlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGlzcGxheSgpIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMudGl0bGVFbC50ZXh0Q29udGVudCA9IHRoaXMuaGVhZGVyO1xyXG5cclxuICAgICAgICBjb25zdCBtYWluQ29udGVudENvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcclxuICAgICAgICB0aGlzLmlucHV0Q29tcG9uZW50ID0gdGhpcy5jcmVhdGVJbnB1dEZpZWxkKG1haW5Db250ZW50Q29udGFpbmVyLCB0aGlzLnBsYWNlaG9sZGVyLCB0aGlzLmlucHV0KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUJ1dHRvbkJhcihtYWluQ29udGVudENvbnRhaW5lcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUlucHV0RmllbGQoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcGxhY2Vob2xkZXI/OiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgdGV4dENvbXBvbmVudCA9IG5ldyBUZXh0Q29tcG9uZW50KGNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIHRleHRDb21wb25lbnQuaW5wdXRFbC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgIHRleHRDb21wb25lbnQuc2V0UGxhY2Vob2xkZXIocGxhY2Vob2xkZXIgPz8gXCJcIilcclxuICAgICAgICAgICAgLnNldFZhbHVlKHZhbHVlID8/IFwiXCIpXHJcbiAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB0aGlzLmlucHV0ID0gdmFsdWUpXHJcbiAgICAgICAgICAgIC5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLnN1Ym1pdEVudGVyQ2FsbGJhY2spO1xyXG5cclxuICAgICAgICByZXR1cm4gdGV4dENvbXBvbmVudDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZUJ1dHRvbihjb250YWluZXI6IEhUTUxFbGVtZW50LCB0ZXh0OiBzdHJpbmcsIGNhbGxiYWNrOiAoZXZ0OiBNb3VzZUV2ZW50KSA9PiBhbnkpIHtcclxuICAgICAgICBjb25zdCBidG4gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGNvbnRhaW5lcik7XHJcbiAgICAgICAgYnRuLnNldEJ1dHRvblRleHQodGV4dClcclxuICAgICAgICAgICAgLm9uQ2xpY2soY2FsbGJhY2spO1xyXG5cclxuICAgICAgICByZXR1cm4gYnRuO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlQnV0dG9uQmFyKG1haW5Db250ZW50Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkJhckNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQgPSBtYWluQ29udGVudENvbnRhaW5lci5jcmVhdGVEaXYoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUJ1dHRvbihidXR0b25CYXJDb250YWluZXIsIFwiT2tcIiwgdGhpcy5zdWJtaXRDbGlja0NhbGxiYWNrKVxyXG4gICAgICAgICAgICAuc2V0Q3RhKCkuYnV0dG9uRWwuc3R5bGUubWFyZ2luUmlnaHQgPSAnMCc7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVCdXR0b24oYnV0dG9uQmFyQ29udGFpbmVyLCBcIkNhbmNlbFwiLCB0aGlzLmNhbmNlbENsaWNrQ2FsbGJhY2spO1xyXG5cclxuICAgICAgICBidXR0b25CYXJDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICBidXR0b25CYXJDb250YWluZXIuc3R5bGUuZmxleERpcmVjdGlvbiA9ICdyb3ctcmV2ZXJzZSc7XHJcbiAgICAgICAgYnV0dG9uQmFyQ29udGFpbmVyLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gJ2ZsZXgtc3RhcnQnO1xyXG4gICAgICAgIGJ1dHRvbkJhckNvbnRhaW5lci5zdHlsZS5tYXJnaW5Ub3AgPSAnMXJlbSc7XHJcbiAgICB9XHJcblxyXG4gICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHByaXZhdGUgc3VibWl0Q2xpY2tDYWxsYmFjayA9IChldnQ6IE1vdXNlRXZlbnQpID0+IHRoaXMuc3VibWl0KCk7XHJcbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgcHJpdmF0ZSBjYW5jZWxDbGlja0NhbGxiYWNrID0gKGV2dDogTW91c2VFdmVudCkgPT4gdGhpcy5jYW5jZWwoKTtcclxuXHJcbiAgICBwcml2YXRlIHN1Ym1pdEVudGVyQ2FsbGJhY2sgPSAoZXZ0OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2dC5rZXkgPT09IFwiRW50ZXJcIikge1xyXG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdGhpcy5zdWJtaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdWJtaXQoKSB7XHJcbiAgICAgICAgdGhpcy5kaWRTdWJtaXQgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjYW5jZWwoKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVzb2x2ZUlucHV0KCkge1xyXG4gICAgICAgIGlmKCF0aGlzLmRpZFN1Ym1pdCkgdGhpcy5yZWplY3RQcm9taXNlKFwiTm8gaW5wdXQgZ2l2ZW4uXCIpO1xyXG4gICAgICAgIGVsc2UgdGhpcy5yZXNvbHZlUHJvbWlzZSh0aGlzLmlucHV0KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbW92ZUlucHV0TGlzdGVuZXIoKSB7XHJcbiAgICAgICAgdGhpcy5pbnB1dENvbXBvbmVudC5pbnB1dEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLnN1Ym1pdEVudGVyQ2FsbGJhY2spXHJcbiAgICB9XHJcblxyXG4gICAgb25PcGVuKCkge1xyXG4gICAgICAgIHN1cGVyLm9uT3BlbigpO1xyXG5cclxuICAgICAgICB0aGlzLmlucHV0Q29tcG9uZW50LmlucHV0RWwuZm9jdXMoKTtcclxuICAgICAgICB0aGlzLmlucHV0Q29tcG9uZW50LmlucHV0RWwuc2VsZWN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbG9zZSgpIHtcclxuICAgICAgICBzdXBlci5vbkNsb3NlKCk7XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlSW5wdXQoKTtcclxuICAgICAgICB0aGlzLnJlbW92ZUlucHV0TGlzdGVuZXIoKTtcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbnRlcmZhY2UgT25seVdoZW5Qcm9wcyB7XHJcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcclxuICB3aGVuOiBib29sZWFuO1xyXG59XHJcblxyXG5jb25zdCBPbmx5V2hlbjogUmVhY3QuRkM8T25seVdoZW5Qcm9wcz4gPSAocHJvcHM6IE9ubHlXaGVuUHJvcHMpID0+IHtcclxuICBjb25zdCB7IGNoaWxkcmVuLCB3aGVuIH0gPSBwcm9wcztcclxuICByZXR1cm4gd2hlbiA/IDw+e2NoaWxkcmVufTwvPiA6IG51bGw7XHJcbn07XHJcblxyXG5jb25zdCBPbmx5ID0gT25seVdoZW47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBPbmx5OyIsIlwidXNlIHN0cmljdFwiO1xudmFyIHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChzZXRTdGF0ZUFjdGlvbikge1xuICAgIHJldHVybiB0eXBlb2Ygc2V0U3RhdGVBY3Rpb24gPT09IFwiZnVuY3Rpb25cIjtcbn07XG52YXIgdXNlU3RhdGVSZWYgPSBmdW5jdGlvbiAoaW5pdGlhbFN0YXRlKSB7XG4gICAgdmFyIF9hID0gcmVhY3RfMS51c2VTdGF0ZShpbml0aWFsU3RhdGUpLCBzdGF0ZSA9IF9hWzBdLCBzZXRTdGF0ZSA9IF9hWzFdO1xuICAgIHZhciByZWYgPSByZWFjdF8xLnVzZVJlZihzdGF0ZSk7XG4gICAgdmFyIGRpc3BhdGNoID0gcmVhY3RfMS51c2VDYWxsYmFjayhmdW5jdGlvbiAoc2V0U3RhdGVBY3Rpb24pIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBpc0Z1bmN0aW9uKHNldFN0YXRlQWN0aW9uKSA/IHNldFN0YXRlQWN0aW9uKHJlZi5jdXJyZW50KSA6IHNldFN0YXRlQWN0aW9uO1xuICAgICAgICBzZXRTdGF0ZShyZWYuY3VycmVudCk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBbc3RhdGUsIGRpc3BhdGNoLCByZWZdO1xufTtcbm1vZHVsZS5leHBvcnRzID0gdXNlU3RhdGVSZWY7XG4iLCJpbXBvcnQge2ZvcndhcmRSZWYsIFJlYWN0Tm9kZSwgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlSW1wZXJhdGl2ZUhhbmRsZSwgdXNlUmVmfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7c3RvcmFnZSwgcmVtb3ZlfSBmcm9tICcuLi8uLi9oZWxwZXJzL3N0b3JhZ2UnO1xyXG5pbXBvcnQgdXNlUmVmcmVzaCBmcm9tICcuLi8uLi9ob29rcy91c2VSZWZyZXNoJztcclxuaW1wb3J0ICcuLi8uLi9sZXNzL0NhbGVuZGFyLmxlc3MnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge05vdGljZSwgVEZpbGV9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IGFwcFN0b3JlIGZyb20gJy4uLy4uL3N0b3Jlcy9hcHBTdG9yZSc7XHJcbmltcG9ydCB7dH0gZnJvbSAnLi4vLi4vdHJhbnNsYXRpb25zL2hlbHBlcic7XHJcbmltcG9ydCB7Q2FsZW5kYXIsIEV2ZW50LCBtb21lbnRMb2NhbGl6ZXIsIFNsb3RJbmZvLCBWaWV3fSBmcm9tICdyZWFjdC1iaWctY2FsZW5kYXInO1xyXG5pbXBvcnQge21vbWVudH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgd2l0aERyYWdBbmREcm9wLCB7d2l0aERyYWdBbmREcm9wUHJvcHN9IGZyb20gJ3JlYWN0LWJpZy1jYWxlbmRhci9saWIvYWRkb25zL2RyYWdBbmREcm9wJztcclxuaW1wb3J0IGRhaWx5Tm90ZXNTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2RhaWx5Tm90ZXNTZXJ2aWNlJztcclxuaW1wb3J0IEdlbmVyaWNJbnB1dFByb21wdCBmcm9tICcuLi8uLi9vYkNvbXBvbmVudHMvR2VuZXJpY0lucHV0UHJvbXB0JztcclxuaW1wb3J0IHtTdGFydERhdGV9IGZyb20gJy4uLy4uL2JpZ0NhbGVuZGFyJztcclxuaW1wb3J0IE9ubHkgZnJvbSAnLi4vY29tbW9uL09ubHlXaGVuJztcclxuaW1wb3J0IHVzZVN0YXRlIGZyb20gJ3JlYWN0LXVzZXN0YXRlcmVmJztcclxuaW1wb3J0IGFwcENvbnRleHQgZnJvbSAnLi4vLi4vc3RvcmVzL2FwcENvbnRleHQnO1xyXG5pbXBvcnQgdXNlVG9nZ2xlIGZyb20gJy4uLy4uL2hvb2tzL3VzZVRvZ2dsZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50UmVmQWN0aW9ucyB7XHJcbiAgc2V0RXZlbnRzOiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQ2FsZW5kYXJQcm9wcyB7XHJcbiAgc2VsZWN0YWJsZTogYm9vbGVhbjtcclxuICAvLyAgIGV2ZW50czogTW9kZWwuRXZlbnRbXTtcclxuICByZXNpemVhYmxlOiBib29sZWFuO1xyXG4gIGRlZmF1bHRWaWV3OiBWaWV3O1xyXG4gIHBvcHVwOiBib29sZWFuO1xyXG4gIG9uRXZlbnREb3VibGVDbGljazogKGV2ZW50OiBFdmVudCkgPT4gdm9pZDtcclxuICBvbkV2ZW50U2VsZWN0OiAoY29udGVudDogc3RyaW5nLCBzbG90SW5mbzogU2xvdEluZm8pID0+IHZvaWQ7XHJcbn1cclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9kaXNwbGF5LW5hbWVcclxuY29uc3QgQ2FsZW5kYXJDb21wb25lbnQgPSBmb3J3YXJkUmVmKChwcm9wczogQ2FsZW5kYXJQcm9wcywgcmVmOiBSZWFjdC5Gb3J3YXJkZWRSZWY8RXZlbnRSZWZBY3Rpb25zPikgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHNlbGVjdGFibGUsXHJcbiAgICByZXNpemVhYmxlLFxyXG4gICAgZGVmYXVsdFZpZXcsXHJcbiAgICBwb3B1cCxcclxuICAgIG9uRXZlbnREb3VibGVDbGljazogaGFuZGxlRG91YmxlQ2xpY2tFdmVudENhbGxiYWNrLFxyXG4gICAgb25FdmVudFNlbGVjdDogaGFuZGxlRXZlbnRTZWxlY3RDYWxsYmFjayxcclxuICAgIC8vIG9uQ29udGVudENoYW5nZTogaGFuZGxlQ29udGVudENoYW5nZUNhbGxiYWNrLFxyXG4gIH0gPSBwcm9wcztcclxuICBjb25zdCB7XHJcbiAgICBldmVudFN0YXRlOiB7ZXZlbnRzfSxcclxuICB9ID0gdXNlQ29udGV4dChhcHBDb250ZXh0KTtcclxuICBjb25zdCByZWZyZXNoID0gdXNlUmVmcmVzaCgpO1xyXG4gIGNvbnN0IFtuZXdFdmVudHMsIHNldE5ld0V2ZW50cywgZXZlbnRSZWZdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgY29uc3QgW2NhbGVuZGFyVmlldywgc2V0Q2FsZW5kYXJWaWV3LCBjYWxlbmRhclZpZXdSZWZdID0gdXNlU3RhdGUobnVsbCk7XHJcblxyXG4gIGNvbnN0IERyYWdBbmREcm9wQ2FsZW5kYXIgPSB3aXRoRHJhZ0FuZERyb3AoQ2FsZW5kYXIgYXMgYW55KTtcclxuICBjb25zdCBsb2NhbGl6ZXIgPSBtb21lbnRMb2NhbGl6ZXIobW9tZW50KTtcclxuICAvLyBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IHVzZVN0YXRlKFwiXCIpXHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBtb21lbnRDaGFuZ2UoKTtcclxuICAgIGNvbnN0IGdldFZpZXcgPSBnZXRFZGl0b3JDb250ZW50Q2FjaGUoKTtcclxuICAgIGlmIChnZXRWaWV3ICE9PSBudWxsICYmIGdldFZpZXcgIT09ICdtb250aCcpIHtcclxuICAgICAgaGFuZGxlVmlld0NoYW5nZShnZXRWaWV3KTtcclxuICAgIH1cclxuICAgIGlmIChldmVudFJlZi5jdXJyZW50ICE9PSBldmVudHMpIHtcclxuICAgICAgc2V0TmV3RXZlbnRzKGV2ZW50cyk7XHJcbiAgICAgIHJlZnJlc2goKTtcclxuICAgIH1cclxuICB9LCBbZXZlbnRzXSk7XHJcblxyXG4gIHVzZUltcGVyYXRpdmVIYW5kbGUoXHJcbiAgICByZWYsXHJcbiAgICAoKSA9PiAoe1xyXG4gICAgICBzZXRFdmVudHM6ICgpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnRSZWYuY3VycmVudCAhPT0gZXZlbnRzKSB7XHJcbiAgICAgICAgICBzZXROZXdFdmVudHMoZXZlbnRzKTtcclxuICAgICAgICAgIHJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICB9KSxcclxuICAgIFtdLFxyXG4gICk7XHJcblxyXG4gIGNvbnN0IG1vbWVudENoYW5nZSA9ICgpID0+IHtcclxuICAgIG1vbWVudC5sb2NhbGUoJ2VuJyk7XHJcbiAgICBpZiAoU3RhcnREYXRlID09ICdzdW5kYXknKSB7XHJcbiAgICAgIG1vbWVudC51cGRhdGVMb2NhbGUoJ2VuJywge1xyXG4gICAgICAgIHdlZWs6IHtcclxuICAgICAgICAgIGRvdzogMCxcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIG1vbWVudDtcclxuICAgIH1cclxuICAgIGlmIChTdGFydERhdGUgPT0gJ21vbmRheScpIHtcclxuICAgICAgbW9tZW50LnVwZGF0ZUxvY2FsZSgnZW4nLCB7XHJcbiAgICAgICAgd2Vlazoge1xyXG4gICAgICAgICAgZG93OiAxLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1vbWVudDtcclxuICB9O1xyXG5cclxuICBjb25zdCBzdHlsZUV2ZW50cyA9IChldmVudDogYW55KSA9PiB7XHJcbiAgICBjb25zdCBjbGFzc05hbWUgPSBldmVudC5ldmVudFR5cGU7XHJcbiAgICByZXR1cm4ge2NsYXNzTmFtZTogY2xhc3NOYW1lfTtcclxuICB9O1xyXG5cclxuICBjb25zdCBoYW5kbGVEb3VibGVDbGlja0V2ZW50ID0gdXNlQ2FsbGJhY2soKGV2ZW50OiBFdmVudCkgPT4ge1xyXG4gICAgaGFuZGxlRG91YmxlQ2xpY2tFdmVudENhbGxiYWNrKGV2ZW50KTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZUV2ZW50U2VsZWN0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKHNsb3RJbmZvOiBTbG90SW5mbykgPT4ge1xyXG4gICAgY29uc3Qge2FwcH0gPSBkYWlseU5vdGVzU2VydmljZS5nZXRTdGF0ZSgpO1xyXG4gICAgY29uc3QgYWRkRXZlbnQgPSBhd2FpdCBHZW5lcmljSW5wdXRQcm9tcHQuUHJvbXB0KGFwcCwgJ0lucHV0IEV2ZW50JywgJycsICcnKTtcclxuXHJcbiAgICBoYW5kbGVFdmVudFNlbGVjdENhbGxiYWNrKGFkZEV2ZW50LCBzbG90SW5mbyk7XHJcbiAgfSwgW10pO1xyXG5cclxuICBjb25zdCBoYW5kbGVWaWV3Q2hhbmdlID0gKHZpZXc6IFZpZXcpID0+IHtcclxuICAgIHNldENhbGVuZGFyVmlldyh2aWV3KTtcclxuICAgIHNldEVkaXRvckNvbnRlbnRDYWNoZSh2aWV3KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBvbkV2ZW50UmVzaXplOiB3aXRoRHJhZ0FuZERyb3BQcm9wc1snb25FdmVudFJlc2l6ZSddID0gKGRhdGEpID0+IHtcclxuICAgIGNvbnN0IHtzdGFydCwgZW5kfSA9IGRhdGE7XHJcblxyXG4gICAgY29uc29sZS5sb2coZGF0YSk7XHJcblxyXG4gICAgLy8gc2V0RXZlbnRzKGN1cnJlbnRFdmVudHMgPT4ge1xyXG4gICAgLy8gICBjb25zdCBmaXJzdEV2ZW50ID0ge1xyXG4gICAgLy8gICAgIHN0YXJ0OiBuZXcgRGF0ZShzdGFydCksXHJcbiAgICAvLyAgICAgZW5kOiBuZXcgRGF0ZShlbmQpLFxyXG4gICAgLy8gICB9XHJcbiAgICAvLyAgIHJldHVybiBbLi4uY3VycmVudEV2ZW50cywgZmlyc3RFdmVudF1cclxuICAgIC8vIH0pXHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgb25FdmVudERyb3A6IHdpdGhEcmFnQW5kRHJvcFByb3BzWydvbkV2ZW50RHJvcCddID0gKGRhdGEpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8T25seSB3aGVuPXtuZXdFdmVudHMgIT09IHVuZGVmaW5lZH0+XHJcbiAgICAgIDxEcmFnQW5kRHJvcENhbGVuZGFyXHJcbiAgICAgICAgc2VsZWN0YWJsZT17c2VsZWN0YWJsZX1cclxuICAgICAgICBsb2NhbGl6ZXI9e2xvY2FsaXplcn1cclxuICAgICAgICBldmVudHM9e2V2ZW50UmVmLmN1cnJlbnR9XHJcbiAgICAgICAgcmVzaXphYmxlPXtyZXNpemVhYmxlfVxyXG4gICAgICAgIGRlZmF1bHRWaWV3PXtjYWxlbmRhclZpZXdSZWYuY3VycmVudCB8fCBkZWZhdWx0Vmlld31cclxuICAgICAgICBzdHlsZT17e2hlaWdodDogJzkwdmgnfX1cclxuICAgICAgICBldmVudFByb3BHZXR0ZXI9e3N0eWxlRXZlbnRzfVxyXG4gICAgICAgIHBvcHVwPXtwb3B1cH1cclxuICAgICAgICBvbkV2ZW50RHJvcD17b25FdmVudERyb3B9XHJcbiAgICAgICAgb25FdmVudFJlc2l6ZT17b25FdmVudFJlc2l6ZX1cclxuICAgICAgICAvLyBzbG90UHJvcEdldHRlcj17Y3VzdG9tU2xvdFByb3BHZXR0ZXJ9XHJcbiAgICAgICAgLy8gb25EcmFnU3RhcnQ9e2NvbnNvbGUubG9nfVxyXG4gICAgICAgIC8vIGRyYWdGcm9tT3V0c2lkZUl0ZW09e1xyXG4gICAgICAgIC8vICAgdGhpcy5zdGF0ZS5kaXNwbGF5RHJhZ0l0ZW1JbkNlbGwgPyB0aGlzLmRyYWdGcm9tT3V0c2lkZUl0ZW0gOiBudWxsXHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIHRpdGxlQWNjZXNzb3I9eyhldmVudCkgPT4gZXZlbnQudGl0bGV9XHJcbiAgICAgICAgdG9vbHRpcEFjY2Vzc29yPXsoZXZlbnQpID0+IGV2ZW50LnRpdGxlfVxyXG4gICAgICAgIC8vIG9uRHJvcEZyb21PdXRzaWRlPXt0aGlzLm9uRHJvcEZyb21PdXRzaWRlfVxyXG4gICAgICAgIC8vIGhhbmRsZURyYWdTdGFydD17dGhpcy5oYW5kbGVEcmFnU3RhcnR9XHJcbiAgICAgICAgLy8gb25TZWxlY3RFdmVudD17ZXZlbnQgPT4gYWxlcnQoZXZlbnQudGl0bGUpfVxyXG4gICAgICAgIG9uVmlldz17aGFuZGxlVmlld0NoYW5nZX1cclxuICAgICAgICBvbkRvdWJsZUNsaWNrRXZlbnQ9e2hhbmRsZURvdWJsZUNsaWNrRXZlbnR9XHJcbiAgICAgICAgb25TZWxlY3RTbG90PXtoYW5kbGVFdmVudFNlbGVjdH1cclxuICAgICAgLz5cclxuICAgIDwvT25seT5cclxuICApO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGdldEVkaXRvckNvbnRlbnRDYWNoZSgpOiBWaWV3IHtcclxuICByZXR1cm4gc3RvcmFnZS5nZXQoWyd2aWV3Q2FjaGUnXSkudmlld0NhY2hlID8/ICdtb250aCc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldEVkaXRvckNvbnRlbnRDYWNoZSh2aWV3OiBWaWV3KSB7XHJcbiAgc3RvcmFnZS5zZXQoe1xyXG4gICAgdmlld0NhY2hlOiB2aWV3LFxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYWxlbmRhckNvbXBvbmVudDtcclxuIiwiaW1wb3J0IHttb21lbnR9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBkYWlseU5vdGVzU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9kYWlseU5vdGVzU2VydmljZSc7XG5pbXBvcnQge1BsYXRmb3JtfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBjb25zdCBzaG93RXZlbnRJbkRhaWx5Tm90ZXMgPSBhc3luYyAoZXZlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgY29uc3Qge2FwcH0gPSBkYWlseU5vdGVzU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gIGNvbnN0IGxpbmVOdW0gPSBwYXJzZUludChldmVudElkLnNsaWNlKDE0KSk7XG4gIGNvbnN0IGV2ZW50RGF0ZVN0cmluZyA9IGV2ZW50SWQuc2xpY2UoMCwgMTQpO1xuICBjb25zb2xlLmxvZyhldmVudERhdGVTdHJpbmcpO1xuICBjb25zdCBkYXRlID0gbW9tZW50KGV2ZW50RGF0ZVN0cmluZywgJ1lZWVlNTURESEhtbXNzJyk7XG4gIGNvbnNvbGUubG9nKGV2ZW50RGF0ZVN0cmluZyk7XG4gIC8vIGNvbnN0IGZpbGUgPSBnZXREYWlseU5vdGUoZGF0ZSwgZGFpbHlOb3Rlcyk7XG4gIGNvbnN0IGZpbGUgPSBhd2FpdCBkYWlseU5vdGVzU2VydmljZS5nZXREYWlseU5vdGVCeUV2ZW50KGRhdGUpO1xuICBpZiAoIVBsYXRmb3JtLmlzTW9iaWxlKSB7XG4gICAgY29uc3QgbGVhZiA9IGFwcC53b3Jrc3BhY2Uuc3BsaXRBY3RpdmVMZWFmKCk7XG4gICAgbGVhZi5vcGVuRmlsZShmaWxlLCB7ZVN0YXRlOiB7bGluZTogbGluZU51bX19KTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgbGVhZiA9IGFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcbiAgICBpZiAobGVhZiA9PT0gbnVsbCkge1xuICAgICAgbGVhZiA9IGFwcC53b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKTtcbiAgICB9XG4gICAgbGVhZi5vcGVuRmlsZShmaWxlLCB7ZVN0YXRlOiB7bGluZTogbGluZU51bX19KTtcbiAgfVxuICByZXR1cm47XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmLCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgYXBwQ29udGV4dCBmcm9tICcuLi9zdG9yZXMvYXBwQ29udGV4dCc7XHJcbmltcG9ydCB7ZGFpbHlOb3Rlc1NlcnZpY2UsIGV2ZW50U2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMnO1xyXG5pbXBvcnQge05vdGljZX0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgQ2FsZW5kYXJDb21wb25lbnQsIHtFdmVudFJlZkFjdGlvbnN9IGZyb20gJy4vQ2FsZW5kYXIvQ2FsZW5kYXInO1xyXG5pbXBvcnQge1ZpZXcsIFNsb3RJbmZvfSBmcm9tICdyZWFjdC1iaWctY2FsZW5kYXInO1xyXG5pbXBvcnQgT25seSBmcm9tICcuL2NvbW1vbi9Pbmx5V2hlbic7XHJcbmltcG9ydCB7c2hvd0V2ZW50SW5EYWlseU5vdGVzfSBmcm9tICcuLi9vYkNvbXBvbmVudHMvb2JTaG93RXZlbnQnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHt9XHJcblxyXG5sZXQgYWxsRXZlbnRzO1xyXG5cclxuY29uc3QgQmlnQ2FsZW5kYXI6IFJlYWN0LkZDPFByb3BzPiA9ICgpID0+IHtcclxuICBjb25zdCB7XHJcbiAgICBnbG9iYWxTdGF0ZSxcclxuICAgIGV2ZW50U3RhdGU6IHtldmVudHN9LFxyXG4gIH0gPSB1c2VDb250ZXh0KGFwcENvbnRleHQpO1xyXG4gIGNvbnN0IHByZXZHbG9iYWxTdGF0ZVJlZiA9IHVzZVJlZihnbG9iYWxTdGF0ZSk7XHJcbiAgY29uc3QgW2lzRmV0Y2hpbmcsIHNldEZldGNoU3RhdHVzXSA9IHVzZVN0YXRlKHRydWUpO1xyXG4gIGNvbnN0IGV2ZW50UmVmID0gdXNlUmVmPEV2ZW50UmVmQWN0aW9ucz4obnVsbCk7XHJcblxyXG4gIGFsbEV2ZW50cyA9IGV2ZW50cztcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGV2ZW50U2VydmljZVxyXG4gICAgICAuZmV0Y2hBbGxFdmVudHMoKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgc2V0RmV0Y2hTdGF0dXMoZmFsc2UpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgIG5ldyBOb3RpY2UoJ/CfmK0gRmV0Y2ggRXJyb3InKTtcclxuICAgICAgfSk7XHJcbiAgICBkYWlseU5vdGVzU2VydmljZVxyXG4gICAgICAuZ2V0TXlBbGxEYWlseU5vdGVzKClcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHNldEZldGNoU3RhdHVzKGZhbHNlKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKCgpID0+IHtcclxuICAgICAgICBuZXcgTm90aWNlKCfwn5itIEZldGNoIERhaWx5Tm90ZXMgRXJyb3InKTtcclxuICAgICAgfSk7XHJcbiAgICBkYWlseU5vdGVzU2VydmljZS5nZXRTdGF0ZSgpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlRXZlbnRTZWxlY3QgPSB1c2VDYWxsYmFjayhhc3luYyAoY29udGVudDogc3RyaW5nLCBzbG90SW5mbzogU2xvdEluZm8pID0+IHtcclxuICAgIGNvbnN0IG5ld0V2ZW50ID0gYXdhaXQgZXZlbnRTZXJ2aWNlLmNyZWF0ZUV2ZW50KGNvbnRlbnQsIHNsb3RJbmZvLnN0YXJ0KTtcclxuICAgIGV2ZW50U2VydmljZS5wdXNoRXZlbnQobmV3RXZlbnQpO1xyXG4gICAgLy8gY29uc3QgZXZlbnRzID0gYXBwU3RvcmUuZ2V0U3RhdGUoKS5ldmVudFN0YXRlLmV2ZW50cztcclxuICAgIC8vIGV2ZW50UmVmLmN1cnJlbnQ/LnNldEV2ZW50cyhldmVudHMpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlRXZlbnREb3VibGVDbGljayA9IHVzZUNhbGxiYWNrKGFzeW5jIChldmVudDogYW55KSA9PiB7XHJcbiAgICBpZiAoZXZlbnQucGF0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGV2ZW50LmlkKTtcclxuICAgICAgc2hvd0V2ZW50SW5EYWlseU5vdGVzKGV2ZW50LmlkKTtcclxuICAgIH1cclxuICAgIC8vIGNvbnN0IGxpbmVOdW0gPSBwYXJzZUludChldmVudC5pZC5zbGljZSgxNCkpO1xyXG4gICAgLy8gbGVhZi5vcGVuRmlsZShldmVudC5maWxlLCB7ZVN0YXRlOiB7bGluZTogbGluZU51bX19KTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGNhbGVuZGFyQ29uZmlnID0gdXNlTWVtbyhcclxuICAgICgpID0+ICh7XHJcbiAgICAgIHNlbGVjdGFibGU6IHRydWUsXHJcbiAgICAgIHJlc2l6ZWFibGU6IHRydWUsXHJcbiAgICAgIGRlZmF1bHRWaWV3OiAnbW9udGgnIGFzIFZpZXcsXHJcbiAgICAgIHBvcHVwOiB0cnVlLFxyXG4gICAgICBvbkV2ZW50RG91YmxlQ2xpY2s6IGhhbmRsZUV2ZW50RG91YmxlQ2xpY2ssXHJcbiAgICAgIG9uRXZlbnRTZWxlY3Q6IGhhbmRsZUV2ZW50U2VsZWN0LFxyXG4gICAgfSksXHJcbiAgICBbXSxcclxuICApO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2BiaWctY2FsZW5kYXItd3JhcHBlcmB9PlxyXG4gICAgICA8T25seSB3aGVuPXtldmVudHMubGVuZ3RoID4gMH0+XHJcbiAgICAgICAgPENhbGVuZGFyQ29tcG9uZW50IHJlZj17ZXZlbnRSZWZ9IHsuLi5jYWxlbmRhckNvbmZpZ30gLz5cclxuICAgICAgPC9Pbmx5PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJpZ0NhbGVuZGFyO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEJpZ0NhbGVuZGFyIGZyb20gJy4uL2NvbXBvbmVudC9iaWdDYWxlbmRhcic7XG4vLyBpbXBvcnQgRG5kIGZyb20gJy4uL2NvbXBvbmVudC9DYWxlbmRhci9DYWxlbmRhcic7XG5cbmNvbnN0IGhvbWVSb3V0ZXIgPSB7XG4gICcqJzogPEJpZ0NhbGVuZGFyIC8+LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgaG9tZVJvdXRlcjtcbiIsIi8vIGltcG9ydCBhcHBSb3V0ZXIgZnJvbSBcIi4vYXBwUm91dGVyXCI7XG5pbXBvcnQgaG9tZVJvdXRlciBmcm9tICcuL2hvbWVSb3V0ZXInO1xuXG4vLyBqdXN0IGxpa2UgUmVhY3QtUm91dGVyXG5pbnRlcmZhY2UgUm91dGVyIHtcbiAgW2tleTogc3RyaW5nXTogSlNYLkVsZW1lbnQgfCBudWxsO1xuICAnKic6IEpTWC5FbGVtZW50IHwgbnVsbDtcbn1cblxuY29uc3Qgcm91dGVyU3dpdGNoID0gKHJvdXRlcjogUm91dGVyKSA9PiB7XG4gIHJldHVybiAocGF0aG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJvdXRlcikpIHtcbiAgICAgIGlmIChrZXkgPT09IHBhdGhuYW1lKSB7XG4gICAgICAgIHJldHVybiByb3V0ZXJba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlclsnKiddO1xuICB9O1xufTtcblxuLy8gZXhwb3J0IGNvbnN0IGFwcFJvdXRlclN3aXRjaCA9IHJvdXRlclN3aXRjaChhcHBSb3V0ZXIpO1xuZXhwb3J0IGNvbnN0IGhvbWVSb3V0ZXJTd2l0Y2ggPSByb3V0ZXJTd2l0Y2goaG9tZVJvdXRlcik7XG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZnVuY3Rpb24gdXNlTG9hZGluZyhpbml0aWFsU3RhdGUgPSB0cnVlKSB7XHJcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSh7IGlzTG9hZGluZzogaW5pdGlhbFN0YXRlLCBpc0ZhaWxlZDogZmFsc2UsIGlzU3VjY2VlZDogZmFsc2UgfSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5zdGF0ZSxcclxuICAgIHNldExvYWRpbmc6ICgpID0+IHtcclxuICAgICAgc2V0U3RhdGUoe1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGlzTG9hZGluZzogdHJ1ZSxcclxuICAgICAgICBpc0ZhaWxlZDogZmFsc2UsXHJcbiAgICAgICAgaXNTdWNjZWVkOiBmYWxzZSxcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgc2V0RmluaXNoOiAoKSA9PiB7XHJcbiAgICAgIHNldFN0YXRlKHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGlzRmFpbGVkOiBmYWxzZSxcclxuICAgICAgICBpc1N1Y2NlZWQ6IHRydWUsXHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHNldEVycm9yOiAoKSA9PiB7XHJcbiAgICAgIHNldFN0YXRlKHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGlzRmFpbGVkOiB0cnVlLFxyXG4gICAgICAgIGlzU3VjY2VlZDogZmFsc2UsXHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1c2VMb2FkaW5nO1xyXG4iLCJpbXBvcnQge3VzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VFZmZlY3R9IGZyb20gJ3JlYWN0JztcclxuLy8gaW1wb3J0IHsgbG9jYXRpb25TZXJ2aWNlLCB1c2VyU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlc1wiO1xyXG5pbXBvcnQge2hvbWVSb3V0ZXJTd2l0Y2h9IGZyb20gJy4uL3JvdXRlcnMnO1xyXG5pbXBvcnQgYXBwQ29udGV4dCBmcm9tICcuLi9zdG9yZXMvYXBwQ29udGV4dCc7XHJcbmltcG9ydCB1c2VMb2FkaW5nIGZyb20gJy4uL2hvb2tzL3VzZUxvYWRpbmcnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZnVuY3Rpb24gSG9tZSgpIHtcclxuICBjb25zdCB7XHJcbiAgICBsb2NhdGlvblN0YXRlOiB7cGF0aG5hbWV9LFxyXG4gIH0gPSB1c2VDb250ZXh0KGFwcENvbnRleHQpO1xyXG4gIC8vIGNvbnN0IHsgYXBwIH0gPSBkYWlseU5vdGVzU2VydmljZS5nZXRTdGF0ZSgpO1xyXG4gIGNvbnN0IGxvYWRpbmdTdGF0ZSA9IHVzZUxvYWRpbmcoKTtcclxuICAvLyBjb25zdCByZWZyZXNoID0gdXNlUmVmcmVzaCgpO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgbG9hZGluZ1N0YXRlLnNldEZpbmlzaCgpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIHsvKiB7bG9hZGluZ1N0YXRlLmlzTG9hZGluZyA/IG51bGwgOiAoICovfVxyXG4gICAgICA8c2VjdGlvbiBpZD1cInBhZ2Utd3JhcHBlclwiPlxyXG4gICAgICAgIDxtYWluIGNsYXNzTmFtZT1cImNvbnRlbnQtd3JhcHBlclwiPntob21lUm91dGVyU3dpdGNoKHBhdGhuYW1lKX08L21haW4+XHJcbiAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgey8qICl9ICovfVxyXG4gICAgPC8+XHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSG9tZTtcclxuIiwiaW1wb3J0IHt1c2VFZmZlY3QsIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7U3RvcmV9IGZyb20gJy4vY3JlYXRlU3RvcmUnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBjaGlsZHJlbjogUmVhY3QuUmVhY3RFbGVtZW50O1xyXG4gIHN0b3JlOiBTdG9yZTxhbnksIGFueT47XHJcbiAgY29udGV4dDogUmVhY3QuQ29udGV4dDxhbnk+O1xyXG59XHJcblxyXG4vKipcclxuICogVG95LVJlZHV4IFByb3ZpZGVyXHJcbiAqIEp1c3QgZm9yIGRlYnVnIHdpdGggdGhlIGFwcCBzdG9yZVxyXG4gKi9cclxuY29uc3QgUHJvdmlkZXI6IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wczogUHJvcHMpID0+IHtcclxuICBjb25zdCB7Y2hpbGRyZW4sIHN0b3JlLCBjb250ZXh0OiBDb250ZXh0fSA9IHByb3BzO1xyXG4gIGNvbnN0IFthcHBTdGF0ZSwgc2V0QXBwU3RhdGVdID0gdXNlU3RhdGUoc3RvcmUuZ2V0U3RhdGUoKSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IHN0b3JlLnN1YnNjcmliZSgobnMpID0+IHtcclxuICAgICAgc2V0QXBwU3RhdGUobnMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgdW5zdWJzY3JpYmUoKTtcclxuICAgIH07XHJcbiAgfSwgW10pO1xyXG5cclxuICByZXR1cm4gPENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2FwcFN0YXRlfT57Y2hpbGRyZW59PC9Db250ZXh0LlByb3ZpZGVyPjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyO1xyXG4iLCIoKCkgPT4ge1xuICBpZiAoIVN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCkge1xuICAgIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCA9IGZ1bmN0aW9uIChzdHI6IGFueSwgbmV3U3RyOiBhbnkpIHtcbiAgICAgIC8vIElmIGEgcmVnZXggcGF0dGVyblxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzdHIpLnRvTG93ZXJDYXNlKCkgPT09ICdbb2JqZWN0IHJlZ2V4cF0nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2Uoc3RyLCBuZXdTdHIpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIHN0cmluZ1xuICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZShuZXcgUmVnRXhwKHN0ciwgJ2cnKSwgbmV3U3RyKTtcbiAgICB9O1xuICB9XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBudWxsO1xuIiwiaW1wb3J0IHt1c2VDb250ZXh0LCB1c2VFZmZlY3R9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IEhvbWUgZnJvbSAnLi9wYWdlcy9Ib21lJztcclxuaW1wb3J0IHtnbG9iYWxTdGF0ZVNlcnZpY2V9IGZyb20gJy4vc2VydmljZXMnO1xyXG5pbXBvcnQgJy4vbGVzcy9DYWxlbmRhci5sZXNzJztcclxuaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4vbGFicy9Qcm92aWRlcic7XHJcbmltcG9ydCBhcHBDb250ZXh0IGZyb20gJy4vc3RvcmVzL2FwcENvbnRleHQnO1xyXG5pbXBvcnQgYXBwU3RvcmUgZnJvbSAnLi9zdG9yZXMvYXBwU3RvcmUnO1xyXG5pbXBvcnQgJy4vaGVscGVycy9wb2x5ZmlsbCc7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5mdW5jdGlvbiBTdHJpY3RBcHAoKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxQcm92aWRlciBzdG9yZT17YXBwU3RvcmV9IGNvbnRleHQ9e2FwcENvbnRleHR9PlxyXG4gICAgICA8QXBwIC8+XHJcbiAgICA8L1Byb3ZpZGVyPlxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEFwcCgpIHtcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgaGFuZGxlV2luZG93UmVzaXplID0gKCkgPT4ge1xyXG4gICAgICBnbG9iYWxTdGF0ZVNlcnZpY2Uuc2V0SXNNb2JpbGVWaWV3KGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPD0gODc1KTtcclxuICAgIH07XHJcblxyXG4gICAgaGFuZGxlV2luZG93UmVzaXplKCk7XHJcblxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVdpbmRvd1Jlc2l6ZSk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVdpbmRvd1Jlc2l6ZSk7XHJcbiAgICB9O1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxIb21lIC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTdHJpY3RBcHA7XHJcbiIsImltcG9ydCB7V29ya3NwYWNlTGVhZiwgSXRlbVZpZXcsIFRGaWxlfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQge0NBTEVOREFSX1ZJRVdfVFlQRX0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcbi8vIGltcG9ydCB0eXBlIEJDYWxlbmRhciBmcm9tICcuL2luZGV4JztcbmltcG9ydCB0eXBlIEJpZ0NhbGVuZGFyUGx1Z2luIGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHtkYWlseU5vdGVzU2VydmljZSwgZXZlbnRTZXJ2aWNlfSBmcm9tICcuL3NlcnZpY2VzJztcbmltcG9ydCB7Z2V0RGF0ZUZyb21GaWxlfSBmcm9tICdvYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2UnO1xuXG5leHBvcnQgY2xhc3MgQmlnQ2FsZW5kYXIgZXh0ZW5kcyBJdGVtVmlldyB7XG4gIHBsdWdpbjogQmlnQ2FsZW5kYXJQbHVnaW47XG4gIHByaXZhdGUgYmlnQ2FsZW5kYXJDb21wb25lbnQ6IFJlYWN0LlJlYWN0RWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwbHVnaW46IEJpZ0NhbGVuZGFyUGx1Z2luKSB7XG4gICAgc3VwZXIobGVhZik7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gIH1cblxuICBnZXREaXNwbGF5VGV4dCgpOiBzdHJpbmcge1xuICAgIC8vIFRPRE86IE1ha2UgdGhpcyBpbnRlcmFjdGl2ZTogRWl0aGVyIHRoZSBhY3RpdmUgd29ya3NwYWNlIG9yIHRoZSBsb2NhbCBncmFwaFxuICAgIHJldHVybiAnQmlnIENhbGVuZGFyJztcbiAgfVxuXG4gIGdldEljb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ2NhbGVuZGFyLXdpdGgtY2hlY2ttYXJrJztcbiAgfVxuXG4gIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIENBTEVOREFSX1ZJRVdfVFlQRTtcbiAgfVxuXG4gIHByaXZhdGUgb25FdmVudHNTZXR0aW5nc1VwZGF0ZSgpOiB2b2lkIHtcbiAgICBldmVudFNlcnZpY2UuY2xlYXJFdmVudHMoKTtcbiAgICBldmVudFNlcnZpY2UuZmV0Y2hBbGxFdmVudHMoKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgb25GaWxlRGVsZXRlZChmaWxlOiBURmlsZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChnZXREYXRlRnJvbUZpbGUoZmlsZSwgJ2RheScpKSB7XG4gICAgICBhd2FpdCBkYWlseU5vdGVzU2VydmljZS5nZXRNeUFsbERhaWx5Tm90ZXMoKTtcbiAgICAgIGV2ZW50U2VydmljZS5jbGVhckV2ZW50cygpO1xuICAgICAgZXZlbnRTZXJ2aWNlLmZldGNoQWxsRXZlbnRzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBvbkZpbGVNb2RpZmllZChmaWxlOiBURmlsZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGRhdGUgPSBnZXREYXRlRnJvbUZpbGUoZmlsZSwgJ2RheScpO1xuXG4gICAgaWYgKGRhdGUgJiYgdGhpcy5iaWdDYWxlbmRhckNvbXBvbmVudCkge1xuICAgICAgLy8gZXZlbnRTZXJ2aWNlLmNsZWFyRXZlbnRzKCk7XG4gICAgICBldmVudFNlcnZpY2UuZmV0Y2hBbGxFdmVudHMoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9uRmlsZUNyZWF0ZWQoZmlsZTogVEZpbGUpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5hcHAud29ya3NwYWNlLmxheW91dFJlYWR5ICYmIHRoaXMuYmlnQ2FsZW5kYXJDb21wb25lbnQpIHtcbiAgICAgIGlmIChnZXREYXRlRnJvbUZpbGUoZmlsZSwgJ2RheScpKSB7XG4gICAgICAgIGRhaWx5Tm90ZXNTZXJ2aWNlLmdldE15QWxsRGFpbHlOb3RlcygpO1xuICAgICAgICAvLyBldmVudFNlcnZpY2UuY2xlYXJFdmVudHMoKTtcbiAgICAgICAgZXZlbnRTZXJ2aWNlLmZldGNoQWxsRXZlbnRzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgb25PcGVuKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMub25FdmVudHNTZXR0aW5nc1VwZGF0ZSA9IHRoaXMub25FdmVudHNTZXR0aW5nc1VwZGF0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25GaWxlQ3JlYXRlZCA9IHRoaXMub25GaWxlQ3JlYXRlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25GaWxlRGVsZXRlZCA9IHRoaXMub25GaWxlRGVsZXRlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25GaWxlTW9kaWZpZWQgPSB0aGlzLm9uRmlsZU1vZGlmaWVkLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgKDxhbnk+dGhpcy5hcHAud29ya3NwYWNlKS5vbignb2JzaWRpYW4tZXZlbnRzOnNldHRpbmdzLXVwZGF0ZWQnLCB0aGlzLm9uRXZlbnRzU2V0dGluZ3NVcGRhdGUpLFxuICAgICk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAudmF1bHQub24oJ2NyZWF0ZScsIHRoaXMub25GaWxlQ3JlYXRlZCkpO1xuICAgIHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC52YXVsdC5vbignZGVsZXRlJywgdGhpcy5vbkZpbGVEZWxldGVkKSk7XG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLnZhdWx0Lm9uKCdtb2RpZnknLCB0aGlzLm9uRmlsZU1vZGlmaWVkKSk7XG5cbiAgICBkYWlseU5vdGVzU2VydmljZS5nZXRBcHAodGhpcy5hcHApO1xuXG4gICAgSW5zZXJ0QWZ0ZXIgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5JbnNlcnRBZnRlcjtcbiAgICBTdGFydERhdGUgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5TdGFydERhdGU7XG4gICAgRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24gPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5EZWZhdWx0RXZlbnRDb21wb3NpdGlvbjtcbiAgICBQcm9jZXNzRW50cmllc0JlbG93ID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuUHJvY2Vzc0VudHJpZXNCZWxvdztcblxuICAgIHRoaXMuYmlnQ2FsZW5kYXJDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEFwcCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBSZWFjdERPTS5yZW5kZXIodGhpcy5iaWdDYWxlbmRhckNvbXBvbmVudCwgKHRoaXMgYXMgYW55KS5jb250ZW50RWwpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgYXN5bmMgb25DbG9zZSgpIHtcbiAgICAvLyBOb3RoaW5nIHRvIGNsZWFuIHVwLlxuICB9XG59XG5cbmV4cG9ydCBsZXQgSW5zZXJ0QWZ0ZXI6IHN0cmluZztcbmV4cG9ydCBsZXQgU3RhcnREYXRlOiBzdHJpbmc7XG5leHBvcnQgbGV0IERlZmF1bHRFdmVudENvbXBvc2l0aW9uOiBzdHJpbmc7XG5leHBvcnQgbGV0IFByb2Nlc3NFbnRyaWVzQmVsb3c6IHN0cmluZztcbiIsImltcG9ydCB7IGFkZEljb24gfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmNvbnN0IGljb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xyXG4gIGNoYW5nZVRhc2tTdGF0dXM6IGA8c3ZnIHQ9XCIxNjM3MDcyMjU1MzQ5XCIgY2xhc3M9XCJpY29uXCIgdmlld0JveD1cIjAgMCAxMDI0IDEwMjRcIiB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHAtaWQ9XCI0MjUwXCIgd2lkdGg9XCIxMDBcIiBoZWlnaHQ9XCIxMDBcIj48cGF0aCBkPVwiTTY2Mi43NSA0NDAuNjEyYzE1Ljg2My0xNy40MjYgNDIuODQ4LTE4LjY5MyA2MC4yNzQtMi44MyAxNy40MjYgMTUuODYxIDE4LjY5MyA0Mi44NDcgMi44MzEgNjAuMjczTDUyNy42MTcgNzE1LjgzMmMtMTYuNTUgMTguMTgtNDUgMTguNjUtNjIuMTQgMS4wMjZsLTExMi4wNjQtMTE1LjIzYy0xNi40MjktMTYuODk0LTE2LjA1My00My45MDYgMC44NC02MC4zMzUgMTYuODkzLTE2LjQyOCA0My45MDUtMTYuMDUyIDYwLjMzNCAwLjg0bDgwLjQ1IDgyLjcyNCAxNjcuNzE0LTE4NC4yNDV6TTY5Ny42NTMgMjU2Yy0yMy41NjUgMC00Mi42NjctMTkuMTAzLTQyLjY2Ny00Mi42NjdzMTkuMTAyLTQyLjY2NiA0Mi42NjctNDIuNjY2aDEyNC42NTFjNDAuMjg4IDAgNzMuNjk3IDMxLjk1NiA3My42OTcgNzIuMzQ3djg1Ljc4M2MwIDIzLjU2NC0xOS4xMDMgNDIuNjY3LTQyLjY2NyA0Mi42NjdzLTQyLjY2Ni0xOS4xMDMtNDIuNjY2LTQyLjY2N1YyNTZINjk3LjY1MnogbTExMy4wMTUgNTk3LjMzM1Y0NDkuMTY3YzAtMjMuNTY0IDE5LjEwMi00Mi42NjcgNDIuNjY2LTQyLjY2NyAyMy41NjQgMCA0Mi42NjcgMTkuMTAzIDQyLjY2NyA0Mi42Njd2NDE3LjE1MmMwIDQwLjM5MS0zMy40MSA3Mi4zNDgtNzMuNjk3IDcyLjM0OEgyMDEuNjk3Yy00MC4yODggMC03My42OTctMzEuOTU3LTczLjY5Ny03Mi4zNDhWMjQzLjAxNGMwLTQwLjM5IDMzLjQxLTcyLjM0NyA3My42OTctNzIuMzQ3aDEyNC43MjdjMjMuNTY0IDAgNDIuNjY3IDE5LjEwMiA0Mi42NjcgNDIuNjY2IDAgMjMuNTY0LTE5LjEwMyA0Mi42NjctNDIuNjY3IDQyLjY2N2gtMTEzLjA5djU5Ny4zMzNoNTk3LjMzM3ogbS0zODQtNjgyLjY2NmMtMjMuNTY0IDAtNDIuNjY3IDE5LjEwMi00Mi42NjcgNDIuNjY2QzM4NCAyMzYuODk3IDQwMy4xMDMgMjU2IDQyNi42NjcgMjU2aDE3MC42NjZDNjIwLjg5NyAyNTYgNjQwIDIzNi44OTcgNjQwIDIxMy4zMzNzLTE5LjEwMy00Mi42NjYtNDIuNjY3LTQyLjY2Nkg0MjYuNjY3eiBtMC04NS4zMzRoMTcwLjY2NmM3MC42OTMgMCAxMjggNTcuMzA4IDEyOCAxMjggMCA3MC42OTMtNTcuMzA3IDEyOC0xMjggMTI4SDQyNi42NjdjLTcwLjY5MyAwLTEyOC01Ny4zMDctMTI4LTEyOCAwLTcwLjY5MiA1Ny4zMDctMTI4IDEyOC0xMjh6XCIgcC1pZD1cIjQyNTFcIiBmaWxsPVwiY3VycmVudENvbG9yXCI+PC9wYXRoPjwvc3ZnPmAsXHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZEljb25zKCkge1xyXG4gIE9iamVjdC5rZXlzKGljb25zKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgIGFkZEljb24oa2V5LCBpY29uc1trZXldKTtcclxuICB9KTtcclxufVxyXG4iLCIvLyDYp9mE2LnYsdio2YrYqVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge307XHJcbiIsIi8vIMSNZcWhdGluYVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge307XHJcbiIsIi8vIERhbnNrXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7fTtcclxuIiwiLy8gRGV1dHNjaFxyXG5cclxuZXhwb3J0IGRlZmF1bHQge307XHJcbiIsIi8vIEVuZ2xpc2hcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAvLyBzZXR0aW5nLnRzXHJcbiAgd2VsY29tZTogJ1dlbGNvbWUgdG8gdGhlIEJpZyBDYWxlbmRhcicsXHJcbiAgJ09wZW4gQmlnIENhbGVuZGFyIFN1Y2Nlc3NmdWxseSc6ICdPcGVuIEJpZyBDYWxlbmRhciBTdWNjZXNzZnVsbHknLFxyXG4gICdPcGVuIEJpZyBDYWxlbmRhcic6ICdPcGVuIEJpZyBDYWxlbmRhcicsXHJcbiAgU3VuZGF5OiAnU3VuZGF5JyxcclxuICBNb25kYXk6ICdNb25kYXknLFxyXG4gICdSZWd1bGFyIE9wdGlvbnMnOiAnUmVndWxhciBPcHRpb25zJyxcclxuICAnRmlyc3QgRGF5IG9mIFdlZWsnOiAnRmlyc3QgRGF5IG9mIFdlZWsnLFxyXG4gICdJbnNlcnQgYWZ0ZXIgaGVhZGluZyc6ICdJbnNlcnQgYWZ0ZXIgaGVhZGluZycsXHJcbiAgJ0Nob29zZSB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLiBTdW5kYXkgaXMgdGhlIGRlZmF1bHQuJzpcclxuICAgICdDaG9vc2UgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay4gU3VuZGF5IGlzIHRoZSBkZWZhdWx0LicsXHJcbiAgJ1lvdSBzaG91bGQgc2V0IHRoZSBzYW1lIGhlYWRpbmcgYmVsb3cgaWYgeW91IHdhbnQgdG8gaW5zZXJ0IGFuZCBwcm9jZXNzIGV2ZW50cyBiZWxvdyB0aGUgc2FtZSBoZWFkaW5nLic6XHJcbiAgICAnWW91IHNob3VsZCBzZXQgdGhlIHNhbWUgaGVhZGluZyBiZWxvdyBpZiB5b3Ugd2FudCB0byBpbnNlcnQgYW5kIHByb2Nlc3MgZXZlbnRzIGJlbG93IHRoZSBzYW1lIGhlYWRpbmcuJyxcclxuICAnUHJvY2VzcyBFdmVudHMgYmVsb3cnOiAnUHJvY2VzcyBldmVudHMgYmVsb3cnLFxyXG4gICdPbmx5IGVudHJpZXMgYmVsb3cgdGhpcyBzdHJpbmcvc2VjdGlvbiBpbiB5b3VyIG5vdGVzIHdpbGwgYmUgcHJvY2Vzc2VkLiBJZiBpdCBkb2VzIG5vdCBleGlzdCBubyBub3RlcyB3aWxsIGJlIHByb2Nlc3NlZCBmb3IgdGhhdCBmaWxlLic6XHJcbiAgICAnT25seSBlbnRyaWVzIGJlbG93IHRoaXMgc3RyaW5nL3NlY3Rpb24gaW4geW91ciBub3RlcyB3aWxsIGJlIHByb2Nlc3NlZC4gSWYgaXQgZG9lcyBub3QgZXhpc3Qgbm8gbm90ZXMgd2lsbCBiZSBwcm9jZXNzZWQgZm9yIHRoYXQgZmlsZS4nLFxyXG4gICdFeHBlcmltZW50YWwgT3B0aW9ucyc6ICdFeHBlcmltZW50YWwgT3B0aW9ucycsXHJcbiAgJ1NldCBkZWZhdWx0IGV2ZW50IGNvbXBvc2l0aW9uLCB5b3Ugc2hvdWxkIHVzZSB7VElNRX0gYXMgXCJISDptbVwiIGFuZCB7Q09OVEVOVH0gYXMgY29udGVudC4gXCJ7VElNRX0ge0NPTlRFTlR9XCIgYnkgZGVmYXVsdCc6XHJcbiAgICAnU2V0IGRlZmF1bHQgZXZlbnQgY29tcG9zaXRpb24sIHlvdSBzaG91bGQgdXNlIHtUSU1FfSBhcyBcIkhIOm1tXCIgYW5kIHtDT05URU5UfSBhcyBjb250ZW50LiBcIntUSU1FfSB7Q09OVEVOVH1cIiBieSBkZWZhdWx0JyxcclxuICAnRGVmYXVsdCBFdmVudCBDb21wb3NpdGlvbic6ICdEZWZhdWx0IEV2ZW50IENvbXBvc2l0aW9uJyxcclxuICAnU2F5IFRoYW5rIFlvdSc6ICdTYXkgVGhhbmsgWW91JyxcclxuICBEb25hdGU6ICdEb25hdGUnLFxyXG4gICdJZiB5b3UgbGlrZSB0aGlzIHBsdWdpbiwgY29uc2lkZXIgZG9uYXRpbmcgdG8gc3VwcG9ydCBjb250aW51ZWQgZGV2ZWxvcG1lbnQ6JzpcclxuICAgICdJZiB5b3UgbGlrZSB0aGlzIHBsdWdpbiwgY29uc2lkZXIgZG9uYXRpbmcgdG8gc3VwcG9ydCBjb250aW51ZWQgZGV2ZWxvcG1lbnQ6JyxcclxufTtcclxuIiwiLy8gQnJpdGlzaCBFbmdsaXNoXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7fTtcclxuIiwiLy8gRXNwYcOxb2xcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHt9O1xyXG4iLCIvLyBmcmFuw6dhaXNcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAvLyBzZXR0aW5nLnRzXHJcbn07XHJcbiIsIi8vIOCkueCkv+CkqOCljeCkpuClgFxyXG5cclxuZXhwb3J0IGRlZmF1bHQge307XHJcbiIsIi8vIEJhaGFzYSBJbmRvbmVzaWFcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHt9O1xyXG4iLCIvLyBJdGFsaWFub1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge307XHJcbiIsIi8vIOaXpeacrOiqnlxyXG5cclxuZXhwb3J0IGRlZmF1bHQge307XHJcbiIsIi8vIO2VnOq1reyWtFxyXG5cclxuZXhwb3J0IGRlZmF1bHQge307XHJcbiIsIi8vIE5lZGVybGFuZHNcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHt9O1xyXG4iLCIvLyBOb3Jza1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge307XHJcbiIsIi8vIGrEmXp5ayBwb2xza2lcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHt9O1xyXG4iLCIvLyBQb3J0dWd1w6pzXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgLy8gc2V0dGluZy50c1xyXG59O1xyXG4iLCIvLyBQb3J0dWd1w6pzIGRvIEJyYXNpbFxyXG4vLyBCcmF6aWxpYW4gUG9ydHVndWVzZVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge307XHJcbiIsIi8vIFJvbcOibsSDXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7fTtcclxuIiwiLy8g0YDRg9GB0YHQutC40LlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHt9O1xyXG4iLCIvLyBUw7xya8OnZVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge307XHJcbiIsImV4cG9ydCBkZWZhdWx0IHtcclxuICAvLyBzZXR0aW5nLnRzXHJcbiAgd2VsY29tZTogJ+asoui/juS9v+eUqOWkp+aXpeWOhicsXHJcbiAgJ09wZW4gQmlnIENhbGVuZGFyIFN1Y2Nlc3NmdWxseSc6ICfmiJDlip/miZPlvIDlpKfml6XljoYnLFxyXG4gICdPcGVuIEJpZyBDYWxlbmRhcic6ICfmiZPlvIDlpKfml6XljoYnLFxyXG4gIFN1bmRheTogJ+aYn+acn+aXpScsXHJcbiAgTW9uZGF5OiAn5pif5pyf5LiAJyxcclxuICAnUmVndWxhciBPcHRpb25zJzogJ+W4uOinhOmAiemhuScsXHJcbiAgJ0ZpcnN0IERheSBvZiBXZWVrJzogJ+S4gOWRqOW8gOWniycsXHJcbiAgJ0Nob29zZSB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLiBTdW5kYXkgaXMgdGhlIGRlZmF1bHQuJzpcclxuICAgICfpgInmi6nkuIDlkajnmoTlvIDlp4vml6XmnJ/jgILpu5jorqTkuLrmmJ/mnJ/ml6XjgIInLFxyXG4gICdJbnNlcnQgYWZ0ZXIgaGVhZGluZyc6ICflnKjmjIflrprmoIfpopjlkI7mj5LlhaXkuovku7YnLFxyXG4gICdZb3Ugc2hvdWxkIHNldCB0aGUgc2FtZSBoZWFkaW5nIGJlbG93IGlmIHlvdSB3YW50IHRvIGluc2VydCBhbmQgcHJvY2VzcyBldmVudHMgYmVsb3cgdGhlIHNhbWUgaGVhZGluZy4nOlxyXG4gICAgJ+S9oOWmguaenOaDs+imgeaPkuWFpeagh+mimOeahOWQjOaXtuaYvuekuuWvueW6lOagh+mimOS4i+eahOS6i+S7tu+8jOS9oOW/hemhu+S/neivgeW9k+WJjeiuvue9ruS4juS4i+aWueeahOino+aekOiuvue9ruaYr+S4gOiHtOeahOOAguW9k+S4uuepuuaXtuaPkuWFpeWIsOaWh+acqycsXHJcbiAgJ1Byb2Nlc3MgRXZlbnRzIGJlbG93JzogJ+ino+aekOaMh+Wumuagh+mimOWQjueahOS6i+S7ticsXHJcbiAgJ09ubHkgZW50cmllcyBiZWxvdyB0aGlzIHN0cmluZy9zZWN0aW9uIGluIHlvdXIgbm90ZXMgd2lsbCBiZSBwcm9jZXNzZWQuIElmIGl0IGRvZXMgbm90IGV4aXN0IG5vIG5vdGVzIHdpbGwgYmUgcHJvY2Vzc2VkIGZvciB0aGF0IGZpbGUuJzpcclxuICAgICflj6rmnInlnKjorr7nva7nmoTmoIfpopjlkI7nmoTkuovku7Yg5omN5Lya6KKr6Kej5p6Q44CC5b2T5Li656m65pe26Kej5p6Q5YWo5paH55qE5LqL5Lu2JyxcclxuICAnRXhwZXJpbWVudGFsIE9wdGlvbnMnOiAn5a6e6aqM5oCn6YCJ6aG5JyxcclxuICAnU2V0IGRlZmF1bHQgZXZlbnQgY29tcG9zaXRpb24sIHlvdSBzaG91bGQgdXNlIHtUSU1FfSBhcyBcIkhIOm1tXCIgYW5kIHtDT05URU5UfSBhcyBjb250ZW50LiBcIntUSU1FfSB7Q09OVEVOVH1cIiBieSBkZWZhdWx0JzpcclxuICAgICforr7nva7pu5jorqTkuovku7bnu4TmiJDvvIzkvaDlj6/ku6Xkvb/nlKgge1RJTUV9IOS9nOS4uiBcIkhIOm1tXCIg5ZKMIHtDT05URU5UfSDkvZzkuLrlhoXlrrnjgILpu5jorqTkuLogXCJ7VElNRX0ge0NPTlRFTlR9XCInLFxyXG4gICdEZWZhdWx0IEV2ZW50IENvbXBvc2l0aW9uJzogJ+m7mOiupOS6i+S7tue7hOaIkCcsXHJcbiAgJ1NheSBUaGFuayBZb3UnOiAnU2F5IFRoYW5rIFlvdScsXHJcbiAgRG9uYXRlOiAn5o2Q6LWgJyxcclxuICAnSWYgeW91IGxpa2UgdGhpcyBwbHVnaW4sIGNvbnNpZGVyIGRvbmF0aW5nIHRvIHN1cHBvcnQgY29udGludWVkIGRldmVsb3BtZW50Oic6XHJcbiAgICAn5aaC5p6c5L2g5Zac5qyi6L+Z5Liq5o+S5Lu277yM6ICM5LiU5Lmf5biM5pyb57uZ5oiR5Lmw6bih6IW/77yM6YKj5LmI5Y+v5Lul6ICD6JmRIEdpdGh1YiDpobXpnaLlj7PovrnnmoQgU3BvbnNvcn4nLFxyXG59O1xyXG4iLCIvLyDnuYHpq5TkuK3mlodcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHt9O1xyXG4iLCIvLyBDb2RlIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3ZhbGVudGluZTE5NS9vYnNpZGlhbi1hZG1vbml0aW9uL2Jsb2IvbWFzdGVyL3NyYy9sYW5nL2hlbHBlcnMudHNcclxuXHJcbmltcG9ydCB7bW9tZW50fSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbXBvcnQgYXIgZnJvbSAnLi9sb2NhbGUvYXInO1xyXG5pbXBvcnQgY3ogZnJvbSAnLi9sb2NhbGUvY3onO1xyXG5pbXBvcnQgZGEgZnJvbSAnLi9sb2NhbGUvZGEnO1xyXG5pbXBvcnQgZGUgZnJvbSAnLi9sb2NhbGUvZGUnO1xyXG5pbXBvcnQgZW4gZnJvbSAnLi9sb2NhbGUvZW4nO1xyXG5pbXBvcnQgZW5HQiBmcm9tICcuL2xvY2FsZS9lbi1nYic7XHJcbmltcG9ydCBlcyBmcm9tICcuL2xvY2FsZS9lcyc7XHJcbmltcG9ydCBmciBmcm9tICcuL2xvY2FsZS9mcic7XHJcbmltcG9ydCBoaSBmcm9tICcuL2xvY2FsZS9oaSc7XHJcbmltcG9ydCBpZCBmcm9tICcuL2xvY2FsZS9pZCc7XHJcbmltcG9ydCBpdCBmcm9tICcuL2xvY2FsZS9pdCc7XHJcbmltcG9ydCBqYSBmcm9tICcuL2xvY2FsZS9qYSc7XHJcbmltcG9ydCBrbyBmcm9tICcuL2xvY2FsZS9rbyc7XHJcbmltcG9ydCBubCBmcm9tICcuL2xvY2FsZS9ubCc7XHJcbmltcG9ydCBubyBmcm9tICcuL2xvY2FsZS9ubyc7XHJcbmltcG9ydCBwbCBmcm9tICcuL2xvY2FsZS9wbCc7XHJcbmltcG9ydCBwdCBmcm9tICcuL2xvY2FsZS9wdCc7XHJcbmltcG9ydCBwdEJSIGZyb20gJy4vbG9jYWxlL3B0LWJyJztcclxuaW1wb3J0IHJvIGZyb20gJy4vbG9jYWxlL3JvJztcclxuaW1wb3J0IHJ1IGZyb20gJy4vbG9jYWxlL3J1JztcclxuaW1wb3J0IHRyIGZyb20gJy4vbG9jYWxlL3RyJztcclxuaW1wb3J0IHpoQ04gZnJvbSAnLi9sb2NhbGUvemgtY24nO1xyXG5pbXBvcnQgemhUVyBmcm9tICcuL2xvY2FsZS96aC10dyc7XHJcblxyXG5jb25zdCBsb2NhbGVNYXA6IHtbazogc3RyaW5nXTogUGFydGlhbDx0eXBlb2YgZW4+fSA9IHtcclxuICBhcixcclxuICBjczogY3osXHJcbiAgZGEsXHJcbiAgZGUsXHJcbiAgZW4sXHJcbiAgJ2VuLWdiJzogZW5HQixcclxuICBlcyxcclxuICBmcixcclxuICBoaSxcclxuICBpZCxcclxuICBpdCxcclxuICBqYSxcclxuICBrbyxcclxuICBubCxcclxuICBubjogbm8sXHJcbiAgcGwsXHJcbiAgcHQsXHJcbiAgJ3B0LWJyJzogcHRCUixcclxuICBybyxcclxuICBydSxcclxuICB0cixcclxuICAnemgtY24nOiB6aENOLFxyXG4gICd6aC10dyc6IHpoVFcsXHJcbn07XHJcblxyXG5jb25zdCBsb2NhbGUgPSBsb2NhbGVNYXBbbW9tZW50LmxvY2FsZSgpXTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0KHN0cjoga2V5b2YgdHlwZW9mIGVuKTogc3RyaW5nIHtcclxuICByZXR1cm4gKGxvY2FsZSAmJiBsb2NhbGVbc3RyXSkgfHwgZW5bc3RyXTtcclxufVxyXG4iLCJpbXBvcnQge0FwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZ30gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgdHlwZSBCaWdDYWxlbmRhciBmcm9tICcuL2luZGV4JztcclxuaW1wb3J0IHt0fSBmcm9tICcuL3RyYW5zbGF0aW9ucy9oZWxwZXInO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCaWdDYWxlbmRhclNldHRpbmdzIHtcclxuICBTdGFydERhdGU6IHN0cmluZztcclxuICBJbnNlcnRBZnRlcjogc3RyaW5nO1xyXG4gIERlZmF1bHRFdmVudENvbXBvc2l0aW9uOiBzdHJpbmc7XHJcbiAgUHJvY2Vzc0VudHJpZXNCZWxvdzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogQmlnQ2FsZW5kYXJTZXR0aW5ncyA9IHtcclxuICBTdGFydERhdGU6ICdTdW5kYXknLFxyXG4gIEluc2VydEFmdGVyOiAnIyBKb3VybmFsJyxcclxuICBQcm9jZXNzRW50cmllc0JlbG93OiAnJyxcclxuICBEZWZhdWx0RXZlbnRDb21wb3NpdGlvbjogJ3tUSU1FfSB7Q09OVEVOVH0nLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIEJpZ0NhbGVuZGFyU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG4gIHBsdWdpbjogQmlnQ2FsZW5kYXI7XHJcbiAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICBwcml2YXRlIGFwcGx5RGVib3VuY2VUaW1lcjogbnVtYmVyID0gMDtcclxuXHJcbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogQmlnQ2FsZW5kYXIpIHtcclxuICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gIH1cclxuXHJcbiAgYXBwbHlTZXR0aW5nc1VwZGF0ZSgpIHtcclxuICAgIGNsZWFyVGltZW91dCh0aGlzLmFwcGx5RGVib3VuY2VUaW1lcik7XHJcbiAgICBjb25zdCBwbHVnaW4gPSB0aGlzLnBsdWdpbjtcclxuICAgIHRoaXMuYXBwbHlEZWJvdW5jZVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBwbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICB9LCAxMDApO1xyXG4gIH1cclxuXHJcbiAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICBhc3luYyBoaWRlKCkge31cclxuXHJcbiAgYXN5bmMgZGlzcGxheSgpIHtcclxuICAgIGF3YWl0IHRoaXMucGx1Z2luLmxvYWRTZXR0aW5ncygpO1xyXG5cclxuICAgIGNvbnN0IHtjb250YWluZXJFbH0gPSB0aGlzO1xyXG4gICAgdGhpcy5jb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gxJywge3RleHQ6IHQoJ1JlZ3VsYXIgT3B0aW9ucycpfSk7XHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKHQoJ0ZpcnN0IERheSBvZiBXZWVrJykpXHJcbiAgICAgIC5zZXREZXNjKHQoJ0Nob29zZSB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLiBTdW5kYXkgaXMgdGhlIGRlZmF1bHQuJykpXHJcbiAgICAgIC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+XHJcbiAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgIC5hZGRPcHRpb24oJ3N1bmRheScsIHQoJ1N1bmRheScpKVxyXG4gICAgICAgICAgLmFkZE9wdGlvbignbW9uZGF5JywgdCgnTW9uZGF5JykpXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuU3RhcnREYXRlKVxyXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5TdGFydERhdGUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5hcHBseVNldHRpbmdzVXBkYXRlKCk7XHJcbiAgICAgICAgICB9KSxcclxuICAgICAgKTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUodCgnSW5zZXJ0IGFmdGVyIGhlYWRpbmcnKSlcclxuICAgICAgLnNldERlc2MoXHJcbiAgICAgICAgdCgnWW91IHNob3VsZCBzZXQgdGhlIHNhbWUgaGVhZGluZyBiZWxvdyBpZiB5b3Ugd2FudCB0byBpbnNlcnQgYW5kIHByb2Nlc3MgZXZlbnRzIGJlbG93IHRoZSBzYW1lIGhlYWRpbmcuJyksXHJcbiAgICAgIClcclxuICAgICAgLmFkZFRleHQoKHRleHQpID0+XHJcbiAgICAgICAgdGV4dFxyXG4gICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCcjIEpPVVJOQUwnKVxyXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLkluc2VydEFmdGVyKVxyXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5JbnNlcnRBZnRlciA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLmFwcGx5U2V0dGluZ3NVcGRhdGUoKTtcclxuICAgICAgICAgIH0pLFxyXG4gICAgICApO1xyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZSh0KCdQcm9jZXNzIEV2ZW50cyBiZWxvdycpKVxyXG4gICAgICAuc2V0RGVzYyhcclxuICAgICAgICB0KFxyXG4gICAgICAgICAgJ09ubHkgZW50cmllcyBiZWxvdyB0aGlzIHN0cmluZy9zZWN0aW9uIGluIHlvdXIgbm90ZXMgd2lsbCBiZSBwcm9jZXNzZWQuIElmIGl0IGRvZXMgbm90IGV4aXN0IG5vIG5vdGVzIHdpbGwgYmUgcHJvY2Vzc2VkIGZvciB0aGF0IGZpbGUuJyxcclxuICAgICAgICApLFxyXG4gICAgICApXHJcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG4gICAgICAgIHRleHRcclxuICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihERUZBVUxUX1NFVFRJTkdTLlByb2Nlc3NFbnRyaWVzQmVsb3cpXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuUHJvY2Vzc0VudHJpZXNCZWxvdylcclxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuUHJvY2Vzc0VudHJpZXNCZWxvdyA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLmFwcGx5U2V0dGluZ3NVcGRhdGUoKTtcclxuICAgICAgICAgIH0pLFxyXG4gICAgICApO1xyXG5cclxuICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gxJywge3RleHQ6IHQoJ0V4cGVyaW1lbnRhbCBPcHRpb25zJyl9KTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUodCgnRGVmYXVsdCBFdmVudCBDb21wb3NpdGlvbicpKVxyXG4gICAgICAuc2V0RGVzYyhcclxuICAgICAgICB0KFxyXG4gICAgICAgICAgJ1NldCBkZWZhdWx0IGV2ZW50IGNvbXBvc2l0aW9uLCB5b3Ugc2hvdWxkIHVzZSB7VElNRX0gYXMgXCJISDptbVwiIGFuZCB7Q09OVEVOVH0gYXMgY29udGVudC4gXCJ7VElNRX0ge0NPTlRFTlR9XCIgYnkgZGVmYXVsdCcsXHJcbiAgICAgICAgKSxcclxuICAgICAgKVxyXG4gICAgICAuYWRkVGV4dCgodGV4dCkgPT5cclxuICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoREVGQVVMVF9TRVRUSU5HUy5EZWZhdWx0RXZlbnRDb21wb3NpdGlvbilcclxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5EZWZhdWx0RXZlbnRDb21wb3NpdGlvbilcclxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuRGVmYXVsdEV2ZW50Q29tcG9zaXRpb24gPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5hcHBseVNldHRpbmdzVXBkYXRlKCk7XHJcbiAgICAgICAgICB9KSxcclxuICAgICAgKTtcclxuXHJcbiAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMScsIHt0ZXh0OiB0KCdTYXkgVGhhbmsgWW91Jyl9KTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUodCgnRG9uYXRlJykpXHJcbiAgICAgIC5zZXREZXNjKHQoJ0lmIHlvdSBsaWtlIHRoaXMgcGx1Z2luLCBjb25zaWRlciBkb25hdGluZyB0byBzdXBwb3J0IGNvbnRpbnVlZCBkZXZlbG9wbWVudDonKSlcclxuICAgICAgLy8gLnNldENsYXNzKFwiQVQtZXh0cmFcIilcclxuICAgICAgLmFkZEJ1dHRvbigoYnQpID0+IHtcclxuICAgICAgICBidC5idXR0b25FbC5vdXRlckhUTUwgPSBgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmJ1eW1lYWNvZmZlZS5jb20vYm9uaW5hbGxcIj48aW1nIHNyYz1cImh0dHBzOi8vaW1nLmJ1eW1lYWNvZmZlZS5jb20vYnV0dG9uLWFwaS8/dGV4dD1CdXkgbWUgYSBjb2ZmZWUmZW1vamk9JnNsdWc9Ym9uaW5hbGwmYnV0dG9uX2NvbG91cj02NDk1RUQmZm9udF9jb2xvdXI9ZmZmZmZmJmZvbnRfZmFtaWx5PUludGVyJm91dGxpbmVfY29sb3VyPTAwMDAwMCZjb2ZmZWVfY29sb3VyPUZGREQwMFwiPjwvYT5gO1xyXG4gICAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtQbHVnaW4sIE5vdGljZSwgUGxhdGZvcm0sIEZpbGVWaWV3fSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQge0JpZ0NhbGVuZGFyfSBmcm9tICcuL2JpZ0NhbGVuZGFyJztcbmltcG9ydCB7Q0FMRU5EQVJfVklFV19UWVBFfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgYWRkSWNvbnMgZnJvbSAnLi9vYkNvbXBvbmVudHMvY3VzdG9tSWNvbnMnO1xuLy8gaW1wb3J0IHsgb3V0cHV0UmVzdWx0cyB9IGZyb20gXCIuL2RhdGEvcGFyc2VGaWxlXCI7XG5pbXBvcnQge0JpZ0NhbGVuZGFyU2V0dGluZ1RhYiwgREVGQVVMVF9TRVRUSU5HUywgQmlnQ2FsZW5kYXJTZXR0aW5nc30gZnJvbSAnLi9zZXR0aW5nJztcbmltcG9ydCB7dH0gZnJvbSAnLi90cmFuc2xhdGlvbnMvaGVscGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmlnQ2FsZW5kYXJQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICBwdWJsaWMgc2V0dGluZ3M6IEJpZ0NhbGVuZGFyU2V0dGluZ3M7XG4gIC8vIHN0YXRpYyBzZXR0aW5nczogYW55O1xuICBhc3luYyBvbmxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IEJpZ0NhbGVuZGFyU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXG4gICAgdGhpcy5yZWdpc3RlclZpZXcoQ0FMRU5EQVJfVklFV19UWVBFLCAobGVhZikgPT4gbmV3IEJpZ0NhbGVuZGFyKGxlYWYsIHRoaXMpKTtcblxuICAgIGFkZEljb25zKCk7XG4gICAgdGhpcy5hZGRSaWJib25JY29uKCdjaGFuZ2VUYXNrU3RhdHVzJywgJ0JpZyBDYWxlbmRhcicsICgpID0+IHtcbiAgICAgIG5ldyBOb3RpY2UodCgnT3BlbiBCaWcgQ2FsZW5kYXIgU3VjY2Vzc2Z1bGx5JykpO1xuICAgICAgdGhpcy5vcGVuQ2FsZW5kYXIoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogJ29wZW4tYmlnLWNhbGVuZGFyJyxcbiAgICAgIG5hbWU6IHQoJ09wZW4gQmlnIENhbGVuZGFyJyksXG4gICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5vcGVuQ2FsZW5kYXIoKSxcbiAgICAgIGhvdGtleXM6IFtdLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuICAgIC8vIHRoaXMuYXBwLndvcmtzcGFjZS5vbkxheW91dFJlYWR5KHRoaXMub25MYXlvdXRSZWFkeS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIGlmICghdGhpcy5hcHAud29ya3NwYWNlLmxheW91dFJlYWR5KSB7XG4gICAgLy8gICB0aGlzLmFwcC53b3Jrc3BhY2Uub25MYXlvdXRSZWFkeShhc3luYyAoKSA9PiBvdXRwdXRUYXNrc1Jlc3VsdHMoKSk7XG4gICAgLy8gIH0gZWxzZSB7XG4gICAgLy8gICBvdXRwdXRUYXNrc1Jlc3VsdHMoKTtcbiAgICAvLyB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICB9XG5cbiAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gIH1cblxuICBvbnVubG9hZCgpIHtcbiAgICB0aGlzLmFwcC53b3Jrc3BhY2UuZGV0YWNoTGVhdmVzT2ZUeXBlKENBTEVOREFSX1ZJRVdfVFlQRSk7XG4gICAgbmV3IE5vdGljZSgnQ2xvc2UgQmlnIENhbGVuZGFyIFN1Y2Nlc3NmdWxseScpO1xuICB9XG5cbiAgLy8gb25MYXlvdXRSZWFkeSgpOiB2b2lkIHtcbiAgLy8gICBpZiAodGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEUpLmxlbmd0aCkge1xuICAvLyAgICAgcmV0dXJuO1xuICAvLyAgIH1cbiAgLy8gICB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0UmlnaHRMZWFmKGZhbHNlKS5zZXRWaWV3U3RhdGUoe1xuICAvLyAgICAgdHlwZTogVklFV19UWVBFLFxuICAvLyAgICAgYWN0aXZlOiB0cnVlLFxuICAvLyAgIH0pO1xuICAvLyB9XG5cbiAgYXN5bmMgb3BlbkNhbGVuZGFyKCkge1xuICAgIC8vIGNvbnN0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKTtcbiAgICAvLyBjb25zdCBuZW92aXNWaWV3ID0gbmV3IEJpZ0NhbGVuZGFyVmlldyhsZWFmLCB0aGlzKTtcbiAgICAvLyBhd2FpdCBsZWFmLm9wZW4obmVvdmlzVmlldyk7XG4gICAgY29uc3Qgd29ya3NwYWNlID0gdGhpcy5hcHAud29ya3NwYWNlO1xuICAgIHdvcmtzcGFjZS5kZXRhY2hMZWF2ZXNPZlR5cGUoQ0FMRU5EQVJfVklFV19UWVBFKTtcbiAgICBjb25zdCBsZWFmID0gd29ya3NwYWNlLmdldExlYWYoXG4gICAgICAhUGxhdGZvcm0uaXNNb2JpbGUgJiYgd29ya3NwYWNlLmFjdGl2ZUxlYWYgJiYgd29ya3NwYWNlLmFjdGl2ZUxlYWYudmlldyBpbnN0YW5jZW9mIEZpbGVWaWV3LFxuICAgICk7XG4gICAgYXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoe3R5cGU6IENBTEVOREFSX1ZJRVdfVFlQRX0pO1xuICAgIHdvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYpO1xuICB9XG59XG4iXSwibmFtZXMiOlsiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlJCQwIiwibiIsInAiLCJxIiwiciIsInQiLCJCIiwiRCIsIkYiLCJFIiwiRyIsIkgiLCJJIiwiTSIsIk4iLCJPIiwieSIsIlIiLCJUIiwiUCIsIlMiLCJfcmVhY3RfMTdfMF8yX3JlYWN0TW9kdWxlIiwiX3NjaGVkdWxlcl8wXzIwXzJfc2NoZWR1bGVyTW9kdWxlIiwibSIsInJlcXVpcmUkJDEiLCJyZXF1aXJlJCQyIiwiamEiLCJkYSIsImRlIiwiaWQiLCJoaSIsIl9yZWFjdERvbV8xN18wXzJfcmVhY3REb21Nb2R1bGUiLCJkZWZhdWx0U3RhdGUiLCJtb21lbnQiLCJ1dGlscyIsIm1haW4iLCJEYWlseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yIiwiZ2V0QWxsRGFpbHlOb3RlcyIsImdsb2JhbFN0b3JlLmRlZmF1bHRTdGF0ZSIsImxvY2F0aW9uU3RvcmUuZGVmYXVsdFN0YXRlIiwiZXZlbnRTdG9yZS5kZWZhdWx0U3RhdGUiLCJkYWlseU5vdGVzU3RvcmUuZGVmYXVsdFN0YXRlIiwiZ2xvYmFsU3RvcmUucmVkdWNlciIsImxvY2F0aW9uU3RvcmUucmVkdWNlciIsImV2ZW50U3RvcmUucmVkdWNlciIsImRhaWx5Tm90ZXNTdG9yZS5yZWR1Y2VyIiwiY3JlYXRlQ29udGV4dCIsImdldERhaWx5Tm90ZSIsImNyZWF0ZURhaWx5Tm90ZSIsImdldEFsbExpbmVzRnJvbUZpbGUiLCJnZXREYWlseU5vdGVTZXR0aW5ncyIsImdldERhdGVGcm9tRmlsZSIsIm5vcm1hbGl6ZVBhdGgiLCJURmlsZSIsIk5vdGljZSIsImFwaSIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJfZXh0ZW5kcyIsInNldFByb3RvdHlwZU9mIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJfcHJvcFR5cGVzXzE1XzdfMl9wcm9wVHlwZXNNb2R1bGUiLCJub29wIiwiY2FuQWNjZXB0UmVmIiwiVXRpbHMuY2FuQWNjZXB0UmVmIiwiVXRpbHMuZGVmYXVsdEtleSIsImludmFyaWFudCIsIlV0aWxzLmlzUHJvcCIsIlV0aWxzLnVuY29udHJvbGxlZFByb3BUeXBlcyIsImVxIiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwicm9vdCIsIlN5bWJvbCIsIm9iamVjdFByb3RvIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsIm51bGxUYWciLCJ1bmRlZmluZWRUYWciLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImFzeW5jVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsInByb3h5VGFnIiwiaXNPYmplY3QiLCJiYXNlR2V0VGFnIiwiTUFYX1NBRkVfSU5URUdFUiIsImlzTGVuZ3RoIiwiaXNGdW5jdGlvbiIsInJlSXNVaW50IiwiaXNBcnJheUxpa2UiLCJpc0luZGV4IiwicmVXaGl0ZXNwYWNlIiwicmVUcmltU3RhcnQiLCJ0cmltbWVkRW5kSW5kZXgiLCJzeW1ib2xUYWciLCJpc09iamVjdExpa2UiLCJOQU4iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsImlzU3ltYm9sIiwiYmFzZVRyaW0iLCJJTkZJTklUWSIsIk1BWF9JTlRFR0VSIiwidG9OdW1iZXIiLCJ0b0Zpbml0ZSIsIm5hdGl2ZUNlaWwiLCJuYXRpdmVNYXgiLCJ0b0ludGVnZXIiLCJvd25lckRvY3VtZW50IiwiaHlwaGVuYXRlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFNjcm9sbEFjY2Vzc29yIiwiY29udGFpbnMiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiaXNIVE1MRWxlbWVudCIsImNzcyIsIm9mZnNldFBhcmVudCIsImdldE9mZnNldFBhcmVudCIsImdldE9mZnNldCIsImdldEtleSIsImFycmF5UHJvdG8iLCJzcGxpY2UiLCJhc3NvY0luZGV4T2YiLCJMaXN0Q2FjaGUiLCJsaXN0Q2FjaGVDbGVhciIsImxpc3RDYWNoZURlbGV0ZSIsImxpc3RDYWNoZUdldCIsImxpc3RDYWNoZUhhcyIsImxpc3RDYWNoZVNldCIsImNvcmVKc0RhdGEiLCJtYXNrU3JjS2V5IiwiZnVuY1Byb3RvIiwiZnVuY1RvU3RyaW5nIiwicmVSZWdFeHBDaGFyIiwicmVJc0hvc3RDdG9yIiwicmVJc05hdGl2ZSIsImlzTWFza2VkIiwidG9Tb3VyY2UiLCJnZXRWYWx1ZSIsImJhc2VJc05hdGl2ZSIsIk1hcCIsImdldE5hdGl2ZSIsIm5hdGl2ZUNyZWF0ZSIsIkhBU0hfVU5ERUZJTkVEIiwiSGFzaCIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJpc0tleWFibGUiLCJnZXRNYXBEYXRhIiwiTWFwQ2FjaGUiLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJMQVJHRV9BUlJBWV9TSVpFIiwiU3RhY2siLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwic3RhY2tTZXQiLCJTZXRDYWNoZSIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsIkNPTVBBUkVfVU5PUkRFUkVEX0ZMQUciLCJhcnJheVNvbWUiLCJjYWNoZUhhcyIsIlVpbnQ4QXJyYXkiLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsIm1hcFRvQXJyYXkiLCJzZXRUb0FycmF5IiwiZXF1YWxBcnJheXMiLCJpc0FycmF5IiwiYXJyYXlQdXNoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0U3ltYm9scyIsInN0dWJBcnJheSIsImFycmF5RmlsdGVyIiwiYXJnc1RhZyIsImlzQXJndW1lbnRzIiwiYmFzZUlzQXJndW1lbnRzIiwiZnJlZUV4cG9ydHMiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsIkJ1ZmZlciIsImlzQnVmZmVyIiwic3R1YkZhbHNlIiwiYXJyYXlUYWciLCJvYmplY3RUYWciLCJ3ZWFrTWFwVGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwidHlwZWRBcnJheVRhZ3MiLCJub2RlVXRpbCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJiYXNlVW5hcnkiLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVRpbWVzIiwibmF0aXZlS2V5cyIsIm92ZXJBcmciLCJpc1Byb3RvdHlwZSIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsImJhc2VHZXRBbGxLZXlzIiwia2V5cyIsImdldEFsbEtleXMiLCJEYXRhVmlldyIsIlByb21pc2UiLCJTZXQiLCJXZWFrTWFwIiwicHJvbWlzZVRhZyIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsImdldFRhZyIsImVxdWFsQnlUYWciLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNFcXVhbCIsInVzZU1lbW8iLCJtaW4iLCJtYXgiLCJtYXRoTWF4IiwibWF0aE1pbiIsImVmZmVjdCIsImhhc2giLCJhbGxQbGFjZW1lbnRzIiwicGxhY2VtZW50cyIsImhpZGUiLCJwb3BwZXJPZmZzZXRzIiwiY29tcHV0ZVN0eWxlcyIsIm9mZnNldCIsImZsaXAiLCJwcmV2ZW50T3ZlcmZsb3ciLCJhcnJvdyIsInVzZVJlZiIsInVzZUVmZmVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJqc3hSdW50aW1lTW9kdWxlIiwianN4UnVudGltZS5qc3giLCJqc3hSdW50aW1lLmpzeHMiLCJqc3hSdW50aW1lLkZyYWdtZW50IiwiT3ZlcmxheSIsIlJlYWN0IiwiZm9yd2FyZFJlZiIsInByb3BzIiwib3V0ZXJSZWYiLCJwbGFjZW1lbnQiLCJfcHJvcHMkY29udGFpbmVyUGFkZGkiLCJjb250YWluZXJQYWRkaW5nIiwiX3Byb3BzJHBvcHBlckNvbmZpZyIsInBvcHBlckNvbmZpZyIsIlRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwiX3VzZUNhbGxiYWNrUmVmIiwidXNlQ2FsbGJhY2tSZWYiLCJyb290RWxlbWVudCIsImF0dGFjaFJlZiIsIl91c2VDYWxsYmFja1JlZjIiLCJhcnJvd0VsZW1lbnQiLCJhdHRhY2hBcnJvd1JlZiIsIm1lcmdlZFJlZiIsInVzZU1lcmdlZFJlZnMiLCJjb250YWluZXIiLCJ1c2VXYWl0Rm9yRE9NUmVmIiwidGFyZ2V0IiwiX3VzZVN0YXRlIiwic2hvdyIsImV4aXRlZCIsInNldEV4aXRlZCIsIl91c2VQb3BwZXIiLCJ1c2VQb3BwZXIiLCJtZXJnZU9wdGlvbnNXaXRoUG9wcGVyQ29uZmlnIiwiZW5hYmxlRXZlbnRzIiwic3R5bGVzIiwiYXR0cmlidXRlcyIsInBvcHBlciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiaGFuZGxlSGlkZGVuIiwib25FeGl0ZWQiLCJhcHBseSIsImFyZ3VtZW50cyIsIm1vdW50T3ZlcmxheSIsInVzZVJvb3RDbG9zZSIsIm9uSGlkZSIsImRpc2FibGVkIiwicm9vdENsb3NlIiwicm9vdENsb3NlRGlzYWJsZWQiLCJjbGlja1RyaWdnZXIiLCJyb290Q2xvc2VFdmVudCIsImNoaWxkIiwiY2hpbGRyZW4iLCJzdHlsZSIsInJlZiIsImFycm93UHJvcHMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJvbkVudGVyIiwib25FbnRlcmluZyIsIm9uRW50ZXJlZCIsIlJlYWN0RE9NIiwiY3JlYXRlUG9ydGFsIiwiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJib29sIiwib25lT2YiLCJhbnkiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIm51bWJlciIsIm9iamVjdCIsIl9sZW4iLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiX1Byb3BUeXBlcyRmdW5jIiwiY29uY2F0IiwiZWxlbWVudFR5cGUiLCJnZXRXaW5kb3ciLCJpc1N0cmljdENvbXBhcmFibGUiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImJhc2VJc01hdGNoIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsIkZVTkNfRVJST1JfVEVYVCIsIm1lbW9pemUiLCJNQVhfTUVNT0laRV9TSVpFIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZ1RvUGF0aCIsIm1lbW9pemVDYXBwZWQiLCJzeW1ib2xUb1N0cmluZyIsImFycmF5TWFwIiwiYmFzZVRvU3RyaW5nIiwiaXNLZXkiLCJ0b1N0cmluZyIsImNhc3RQYXRoIiwidG9LZXkiLCJiYXNlR2V0IiwiaGFzUGF0aCIsImJhc2VIYXNJbiIsImdldCIsImhhc0luIiwiYmFzZVByb3BlcnR5IiwiYmFzZVByb3BlcnR5RGVlcCIsImlkZW50aXR5IiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImJhc2VNYXRjaGVzIiwicHJvcGVydHkiLCJiYXNlRmluZEluZGV4IiwiYmFzZUl0ZXJhdGVlIiwicmFuZ2UiLCJpc0VxdWFsIiwiYmFzZUZvciIsImJhc2VFYWNoIiwiZGVmaW5lUHJvcGVydHkiLCJiYXNlU2V0VG9TdHJpbmciLCJzZXRUb1N0cmluZyIsImdldFByb3RvdHlwZSIsImdldFN5bWJvbHNJbiIsImJhc2VDcmVhdGUiLCJDTE9ORV9ERUVQX0ZMQUciLCJDTE9ORV9GTEFUX0ZMQUciLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJpc1NldCIsImlzTWFwIiwibmF2aWdhdGUiLCJQUkVWSU9VUyIsIk5FWFQiLCJUT0RBWSIsIkRBVEUiLCJ2aWV3cyIsIk1PTlRIIiwiV0VFSyIsIldPUktfV0VFSyIsIkRBWSIsIkFHRU5EQSIsInZpZXdOYW1lcyIsIk9iamVjdCIsIm1hcCIsImsiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJhcnJheU9mIiwib2JqZWN0T2YiLCJwcm9wIiwia2V5IiwiaXNCdWlsdGluVmlldyIsImluZGV4T2YiLCJoYW5kbGVyIiwiTUlMTEkiLCJzZWNvbmRzIiwibWludXRlcyIsImhvdXJzIiwiZGF5IiwiZGF0ZSIsImxvY2FsaXplciIsImZpcnN0T2ZNb250aCIsInN0YXJ0T2YiLCJzdGFydE9mV2VlayIsImVuZE9mTW9udGgiLCJlbmRPZiIsImN1cnJlbnQiLCJmaXJzdFZpc2libGVEYXkiLCJsYXN0IiwibGFzdFZpc2libGVEYXkiLCJkYXlzIiwibHRlIiwicHVzaCIsImFkZCIsInVuaXQiLCJmbG9vciIsInN0YXJ0IiwiZW5kIiwidGltZSIsIkRhdGUiLCJtaWxsaXNlY29uZHMiLCJkYXRlQSIsImRhdGVCIiwiTWF0aCIsImFicyIsInJvdW5kIiwibG9jYWxlUHJvcFR5cGUiLCJmb3JtYXR0ZXIiLCJ2YWx1ZSIsImZvcm1hdCIsImN1bHR1cmUiLCJyZXN1bHQiLCJjYWxsIiwiZHQiLCJtaW51dGVzRnJvbU1pZG5pZ2h0IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsImRpZmYiLCJnZXREc3RPZmZzZXQiLCJkYXlzdGFydCIsImZpcnN0IiwibHQiLCJzaW5nbGVEYXlEdXJhdGlvbiIsImd0ZSIsImd0IiwiX3JlZiIsIl9yZWYkZXZ0QSIsImV2dEEiLCJhU3RhcnQiLCJhRW5kIiwiYUFsbERheSIsImFsbERheSIsIl9yZWYkZXZ0QiIsImV2dEIiLCJiU3RhcnQiLCJiRW5kIiwiYkFsbERheSIsInN0YXJ0U29ydCIsImR1ckEiLCJjZWlsIiwiZHVyQiIsIl9yZWYyIiwiX3JlZjIkZXZlbnQiLCJldmVudCIsIl9yZWYyJHJhbmdlIiwicmFuZ2VTdGFydCIsInJhbmdlRW5kIiwiZVN0YXJ0Iiwic3RhcnRzQmVmb3JlRW5kIiwic2FtZU1pbiIsIm5lcSIsImVuZHNBZnRlclN0YXJ0IiwiZGF0ZTEiLCJkYXRlMiIsImlzSnVzdERhdGUiLCJEYXRlTG9jYWxpemVyIiwic3BlYyIsIl90aGlzIiwiZmlyc3RPZldlZWsiLCJwcm9wVHlwZSIsImZvcm1hdHMiLCJfZm9ybWF0IiwibWVyZ2UiLCJpblJhbmdlIiwiaW5SYW5nZSQxIiwidmlzaWJsZURheXMiLCJnZXRTbG90RGF0ZSIsImdldFRvdGFsTWluIiwiZ2V0TWludXRlc0Zyb21NaWRuaWdodCIsImNvbnRpbnVlc1ByaW9yIiwiY29udGludWVzQWZ0ZXIiLCJzb3J0RXZlbnRzIiwiaW5FdmVudFJhbmdlIiwiaXNTYW1lRGF0ZSIsInN0YXJ0QW5kRW5kQXJlRGF0ZU9ubHkiLCJzZWdtZW50T2Zmc2V0IiwiYnJvd3NlclRaT2Zmc2V0IiwiZm9ybWF0T3ZlcnJpZGVzIiwibWVzc2FnZXMiLCJfZm9ybWF0MiIsImRlZmF1bHRNZXNzYWdlcyIsIndlZWsiLCJ3b3JrX3dlZWsiLCJtb250aCIsInByZXZpb3VzIiwibmV4dCIsInllc3RlcmRheSIsInRvbW9ycm93IiwidG9kYXkiLCJhZ2VuZGEiLCJub0V2ZW50c0luUmFuZ2UiLCJzaG93TW9yZSIsInRvdGFsIiwibXNncyIsIl9leGNsdWRlZCIsIkV2ZW50Q2VsbCIsIl9SZWFjdCRDb21wb25lbnQiLCJfaW5oZXJpdHNMb29zZSIsIl9wcm90byIsInByb3RvdHlwZSIsInJlbmRlciIsIl90aGlzJHByb3BzIiwiY2xhc3NOYW1lIiwic2VsZWN0ZWQiLCJpc0FsbERheSIsIm9uU2VsZWN0IiwiX29uRG91YmxlQ2xpY2siLCJvbkRvdWJsZUNsaWNrIiwiX29uS2V5UHJlc3MiLCJvbktleVByZXNzIiwiYWNjZXNzb3JzIiwiZ2V0dGVycyIsIl90aGlzJHByb3BzJGNvbXBvbmVudCIsImNvbXBvbmVudHMiLCJFdmVudCIsIkV2ZW50V3JhcHBlciIsImV2ZW50V3JhcHBlciIsInNsb3RTdGFydCIsInNsb3RFbmQiLCJyZXNpemFibGUiLCJ0aXRsZSIsInRvb2x0aXAiLCJzaG93QXNBbGxEYXkiLCJ1c2VyUHJvcHMiLCJldmVudFByb3AiLCJjb250ZW50IiwidW5kZWZpbmVkIiwiY2xzeCIsImUiLCJDb21wb25lbnQiLCJpc0VxdWFsJDEiLCJyb3dCb3giLCJzbG90cyIsInJvd1dpZHRoIiwicmlnaHQiLCJsZWZ0IiwiY2VsbFdpZHRoIiwieCIsInJ0bCIsInNsb3RXaWR0aCIsImJveCIsInRvcCIsImJvdHRvbSIsInN0YXJ0SWR4IiwiZW5kSWR4IiwibGFzdFNsb3RJZHgiLCJjdXJyZW50U2xvdCIsImdldFNsb3RBdFgiLCJpc0N1cnJlbnRSb3ciLCJpc1N0YXJ0Um93IiwiaXNBYm92ZVN0YXJ0IiwiaXNCZWxvd1N0YXJ0IiwiaXNCZXR3ZWVuIiwiUG9wdXAiLCJjb21wb25lbnREaWRNb3VudCIsIl90aGlzJHByb3BzJHBvcHVwT2ZmcyIsInBvcHVwT2Zmc2V0IiwicG9wcGVyUmVmIiwiX2dldE9mZnNldCIsIndpZHRoIiwiaGVpZ2h0Iiwidmlld0JvdHRvbSIsIndpbmRvdyIsImlubmVySGVpZ2h0IiwiZ2V0U2Nyb2xsVG9wIiwidmlld1JpZ2h0IiwiaW5uZXJXaWR0aCIsImdldFNjcm9sbExlZnQiLCJ0b3BPZmZzZXQiLCJsZWZ0T2Zmc2V0Iiwic2V0U3RhdGUiLCJfdGhpcyRwcm9wczIiLCJldmVudHMiLCJwb3NpdGlvbiIsInN0YXRlIiwibWluV2lkdGgiLCJpZHgiLCJpc1NlbGVjdGVkIiwiaGFuZGxlRHJhZ1N0YXJ0IiwiUG9wdXAkMSIsInR5cGUiLCJkb2N1bWVudCIsImxpc3RlbiIsInBhc3NpdmUiLCJlbGVtZW50RnJvbVBvaW50Iiwibm9kZSIsImNsaWVudFgiLCJjbGllbnRZIiwiY2xvc2VzdCIsImJvdW5kcyIsImdldEV2ZW50Tm9kZUZyb21Qb2ludCIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwiY2xpY2tUb2xlcmFuY2UiLCJjbGlja0ludGVydmFsIiwiU2VsZWN0aW9uIiwiX3RlbXAiLCJfcmVmMiRnbG9iYWwiLCJnbG9iYWwiLCJfcmVmMiRsb25nUHJlc3NUaHJlc2giLCJsb25nUHJlc3NUaHJlc2hvbGQiLCJpc0RldGFjaGVkIiwiZ2xvYmFsTW91c2UiLCJfbGlzdGVuZXJzIiwiY3JlYXRlIiwiX2hhbmRsZUluaXRpYWxFdmVudCIsImJpbmQiLCJfaGFuZGxlTW92ZUV2ZW50IiwiX2hhbmRsZVRlcm1pbmF0aW5nRXZlbnQiLCJfa2V5TGlzdGVuZXIiLCJfZHJvcEZyb21PdXRzaWRlTGlzdGVuZXIiLCJfZHJhZ092ZXJGcm9tT3V0c2lkZUxpc3RlbmVyIiwiX3JlbW92ZVRvdWNoTW92ZVdpbmRvd0xpc3RlbmVyIiwiX3JlbW92ZUtleURvd25MaXN0ZW5lciIsIl9yZW1vdmVLZXlVcExpc3RlbmVyIiwiX3JlbW92ZURyb3BGcm9tT3V0c2lkZUxpc3RlbmVyIiwiX3JlbW92ZURyYWdPdmVyRnJvbU91dHNpZGVMaXN0ZW5lciIsIl9hZGRJbml0aWFsRXZlbnRMaXN0ZW5lciIsIm9uIiwiaGFuZGxlcnMiLCJyZW1vdmUiLCJlbWl0IiwiZm9yRWFjaCIsImZuIiwidGVhcmRvd24iLCJfcmVtb3ZlSW5pdGlhbEV2ZW50TGlzdGVuZXIiLCJfcmVtb3ZlRW5kTGlzdGVuZXIiLCJfb25Fc2NMaXN0ZW5lciIsIl9yZW1vdmVNb3ZlTGlzdGVuZXIiLCJfc2VsZWN0UmVjdCIsInNlbGVjdGluZyIsIm9iamVjdHNDb2xsaWRlIiwiZ2V0Qm91bmRzRm9yTm9kZSIsImZpbHRlciIsIml0ZW1zIiwiX2FkZExvbmdQcmVzc0xpc3RlbmVyIiwiaW5pdGlhbEV2ZW50IiwidGltZXIiLCJyZW1vdmVUb3VjaE1vdmVMaXN0ZW5lciIsInJlbW92ZVRvdWNoRW5kTGlzdGVuZXIiLCJoYW5kbGVUb3VjaFN0YXJ0Iiwic2V0VGltZW91dCIsImNsZWFudXAiLCJyZW1vdmVUb3VjaFN0YXJ0TGlzdGVuZXIiLCJjbGVhclRpbWVvdXQiLCJfdGhpczIiLCJyZW1vdmVNb3VzZURvd25MaXN0ZW5lciIsIl9nZXRFdmVudENvb3JkaW5hdGVzIiwiZ2V0RXZlbnRDb29yZGluYXRlcyIsInByZXZlbnREZWZhdWx0IiwiX2dldEV2ZW50Q29vcmRpbmF0ZXMyIiwiX2dldEV2ZW50Q29vcmRpbmF0ZXMzIiwiY29sbGlkZXMiLCJvZmZzZXREYXRhIiwid2hpY2giLCJidXR0b24iLCJpc092ZXJDb250YWluZXIiLCJfbm9ybWFsaXplRGlzdGFuY2UiLCJub3JtYWxpemVEaXN0YW5jZSIsIl9pbml0aWFsRXZlbnREYXRhIiwiaXNUb3VjaCIsInRlc3QiLCJfZ2V0RXZlbnRDb29yZGluYXRlczQiLCJpblJvb3QiLCJjbGljayIsImlzQ2xpY2siLCJfaGFuZGxlQ2xpY2tFdmVudCIsIl9nZXRFdmVudENvb3JkaW5hdGVzNSIsIm5vdyIsImdldFRpbWUiLCJfbGFzdENsaWNrRGF0YSIsInRpbWVzdGFtcCIsIl90aGlzJF9pbml0aWFsRXZlbnREYSIsIl9nZXRFdmVudENvb3JkaW5hdGVzNiIsInciLCJoIiwib2xkIiwiY3RybCIsIm1ldGFLZXkiLCJjdHJsS2V5IiwiX3RoaXMkX2luaXRpYWxFdmVudERhMiIsImRpc3RhbmNlIiwibm9kZUEiLCJub2RlQiIsInRvbGVyYW5jZSIsIl9nZXRCb3VuZHNGb3JOb2RlIiwiYVRvcCIsImFMZWZ0IiwiX2dldEJvdW5kc0Zvck5vZGUkcmlnIiwiYVJpZ2h0IiwiX2dldEJvdW5kc0Zvck5vZGUkYm90IiwiYUJvdHRvbSIsIl9nZXRCb3VuZHNGb3JOb2RlMiIsImJUb3AiLCJiTGVmdCIsIl9nZXRCb3VuZHNGb3JOb2RlMiRyaSIsImJSaWdodCIsIl9nZXRCb3VuZHNGb3JOb2RlMiRibyIsImJCb3R0b20iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZWN0IiwicGFnZU9mZnNldCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZGlyIiwicGFnZVhPZmZzZXQiLCJib2R5IiwicGFnZVlPZmZzZXQiLCJCYWNrZ3JvdW5kQ2VsbHMiLCJjb250ZXh0Iiwic2VsZWN0YWJsZSIsIl9zZWxlY3RhYmxlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJfdGVhcmRvd25TZWxlY3RhYmxlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJnZXROb3ciLCJjdXJyZW50RGF0ZSIsIldyYXBwZXIiLCJkYXRlQ2VsbFdyYXBwZXIiLCJfdGhpcyRzdGF0ZSIsImluZGV4IiwiX2dldHRlcnMkZGF5UHJvcCIsImRheVByb3AiLCJmaW5kRE9NTm9kZSIsInNlbGVjdG9yIiwiX3NlbGVjdG9yIiwic2VsZWN0b3JDbGlja3NIYW5kbGVyIiwicG9pbnQiLCJhY3Rpb25UeXBlIiwiaXNFdmVudCIsIl90aGlzMiRwcm9wcyIsInBvaW50SW5Cb3giLCJjdXJyZW50Q2VsbCIsIl9zZWxlY3RTbG90IiwiYWN0aW9uIiwiX2luaXRpYWwiLCJfdGhpczIkcHJvcHMyIiwibm90aWZ5Iiwib25TZWxlY3RTdGFydCIsIm5vZGVCb3giLCJfZGF0ZUNlbGxTZWxlY3Rpb24iLCJkYXRlQ2VsbFNlbGVjdGlvbiIsIm9uU2VsZWN0RW5kIiwib25TZWxlY3RTbG90IiwicmVzb3VyY2VJZCIsIkV2ZW50Um93TWl4aW4iLCJzbG90TWV0cmljcyIsImRlZmF1bHRQcm9wcyIsInNlZ21lbnRzIiwicmVuZGVyRXZlbnQiLCJyZW5kZXJTcGFuIiwibGVuIiwicGVyIiwiV2Via2l0RmxleEJhc2lzIiwiZmxleEJhc2lzIiwibWF4V2lkdGgiLCJFdmVudFJvdyIsImxhc3RFbmQiLCJyZWR1Y2UiLCJyb3ciLCJsaSIsInNwYW4iLCJnYXAiLCJkYXRlUmFuZ2UiLCJfcmVmJHVuaXQiLCJfZW5kT2ZSYW5nZSIsImVuZE9mUmFuZ2UiLCJwYWRkaW5nIiwiZmluZEluZGV4Iiwicm93U2VnbWVudHMiLCJsaW1pdCIsIkluZmluaXR5IiwiaSIsImoiLCJzZWciLCJsZXZlbHMiLCJleHRyYSIsInNlZ3NPdmVybGFwIiwic29ydCIsImEiLCJiIiwib3RoZXJTZWdzIiwic29tZSIsIm90aGVyU2VnIiwiZXZlbnRBIiwiZXZlbnRCIiwiaXNTZWdtZW50SW5TbG90Iiwic2xvdCIsImV2ZW50c0luU2xvdCIsIkV2ZW50RW5kaW5nUm93IiwiZXZlbnRMZXZlbHMiLCJjYW5SZW5kZXJTbG90RXZlbnQiLCJyZW5kZXJTaG93TW9yZSIsInJhbmdlJDEiLCJldmVyeSIsInMiLCJjb3VudCIsInN0b3BQcm9wYWdhdGlvbiIsIm9uU2hvd01vcmUiLCJTY3JvbGxhYmxlV2Vla1dyYXBwZXIiLCJpc1NlZ21lbnRJblNsb3QkMSIsIm9wdGlvbnMiLCJtYXhSb3dzIiwibWluUm93cyIsImV2dCIsImV2ZW50U2VnbWVudHMiLCJfZXZlbnRMZXZlbHMiLCJjbG9uZSIsIm1ldHJpY3MiLCJnZXRTbG90TWV0cmljcyIsImdldERhdGVGb3JTbG90Iiwic2xvdE51bWJlciIsImdldFNsb3RGb3JEYXRlIiwiZmluZCIsImdldEV2ZW50c0ZvclNsb3QiLCJEYXRlQ29udGVudFJvdyIsImhhbmRsZVNlbGVjdFNsb3QiLCJzbGljZSIsImhhbmRsZVNob3dNb3JlIiwicXNhIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImNlbGwiLCJjcmVhdGVIZWFkaW5nUmVmIiwiaGVhZGluZ1JvdyIsImNyZWF0ZUV2ZW50UmVmIiwiZXZlbnRSb3ciLCJnZXRDb250YWluZXIiLCJyZW5kZXJIZWFkaW5nQ2VsbCIsIl90aGlzJHByb3BzMyIsInJlbmRlckhlYWRlciIsInJlbmRlckR1bW15IiwiX3RoaXMkcHJvcHM0Iiwic2hvd0FsbEV2ZW50cyIsImdldFJvd0xpbWl0IiwiZXZlbnRIZWlnaHQiLCJnZXRIZWlnaHQiLCJoZWFkaW5nSGVpZ2h0IiwiZXZlbnRTcGFjZSIsIl90aGlzJHByb3BzNSIsInJlbmRlckZvck1lYXN1cmUiLCJTY3JvbGxhYmxlV2Vla0NvbXBvbmVudCIsIk5vb3BXcmFwcGVyIiwiV2Vla1dyYXBwZXIiLCJ3ZWVrV3JhcHBlciIsImV2ZW50Um93UHJvcHMiLCJzZWdzIiwiSGVhZGVyIiwibGFiZWwiLCJEYXRlSGVhZGVyIiwiZHJpbGxkb3duVmlldyIsIm9uRHJpbGxEb3duIiwiX2V4Y2x1ZGVkJDEiLCJldmVudHNGb3JXZWVrIiwiZXZ0cyIsIk1vbnRoVmlldyIsIl9hcmdzIiwicmVuZGVyV2VlayIsIndlZWtJZHgiLCJuZWVkTGltaXRNZWFzdXJlIiwicm93TGltaXQiLCJ3ZWVrc0V2ZW50cyIsInNvcnRFdmVudHMkMSIsInNsb3RSb3dSZWYiLCJyZWFkZXJEYXRlSGVhZGluZyIsImhhbmRsZVNlbGVjdEV2ZW50IiwiaGFuZGxlRG91YmxlQ2xpY2tFdmVudCIsImhhbmRsZUtleVByZXNzRXZlbnQiLCJnZXREcmlsbGRvd25WaWV3IiwiaXNPZmZSYW5nZSIsImlzQ3VycmVudCIsIkRhdGVIZWFkZXJDb21wb25lbnQiLCJkYXRlSGVhZGVyIiwiaGFuZGxlSGVhZGluZ0NsaWNrIiwic2xvdEluZm8iLCJfcGVuZGluZ1NlbGVjdGlvbiIsIl9zZWxlY3RUaW1lciIsInNlbGVjdERhdGVzIiwidmlldyIsImNsZWFyU2VsZWN0aW9uIiwiX2xlbjIiLCJfa2V5MiIsIm9uU2VsZWN0RXZlbnQiLCJfbGVuMyIsIl9rZXkzIiwib25Eb3VibGVDbGlja0V2ZW50IiwiX2xlbjQiLCJfa2V5NCIsIm9uS2V5UHJlc3NFdmVudCIsInBvcHVwIiwiZG9TaG93TW9yZURyaWxsRG93biIsImdldFBvc2l0aW9uIiwib3ZlcmxheSIsIm92ZXJsYXlEaXNwbGF5IiwiX2JnUm93cyIsImNyZWF0ZVJlZiIsInByb3BzRGF0ZSIsInJ1bm5pbmciLCJtZWFzdXJlUm93TGltaXQiLCJfcmVzaXplTGlzdGVuZXIiLCJyZXF1ZXN0IiwiY29tcG9uZW50RGlkVXBkYXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIndlZWtzIiwiY2h1bmsiLCJfd2Vla0NvdW50IiwicmVuZGVySGVhZGVycyIsInJlbmRlck92ZXJsYXkiLCJfdGhpcyRwcm9wczYiLCJIZWFkZXJDb21wb25lbnQiLCJoZWFkZXIiLCJfdGhpczMiLCJfdGhpcyRwcm9wczciLCJfcmVmMyIsInNldERhdGUiLCJfcmVmNCIsIl9yZWY1IiwiX3JlZjYiLCJzdGVwIiwidGltZXNsb3RzIiwidG90YWxNaW4iLCJudW1Hcm91cHMiLCJudW1TbG90cyIsImdyb3VwcyIsImdycCIsInNsb3RJZHgiLCJtaW5Gcm9tU3RhcnQiLCJsYXN0U2xvdE1pbkZyb21TdGFydCIsInVwZGF0ZSIsImdldFNsb3RNZXRyaWNzJDEiLCJkYXRlSXNJbkdyb3VwIiwiZ3JvdXBJbmRleCIsIm5leHRHcm91cCIsIm5leHRTbG90IiwiY2xvc2VzdFNsb3RUb1Bvc2l0aW9uIiwicGVyY2VudCIsImNsb3Nlc3RTbG90RnJvbVBvaW50IiwiYm91bmRhcnlSZWN0IiwiY2xvc2VzdFNsb3RGcm9tRGF0ZSIsImRpZmZNaW5zIiwic3RhcnRzQmVmb3JlRGF5Iiwic3RhcnRzQWZ0ZXJEYXkiLCJzdGFydHNCZWZvcmUiLCJzdGFydHNBZnRlciIsImdldFJhbmdlIiwiaWdub3JlTWluIiwiaWdub3JlTWF4IiwicmFuZ2VTdGFydE1pbiIsInBvc2l0aW9uRnJvbURhdGUiLCJyYW5nZUVuZE1pbiIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJnZXRDdXJyZW50VGltZVBvc2l0aW9uIiwiZGF0YSIsIl9zbG90TWV0cmljcyRnZXRSYW5nZSIsInN0YXJ0TXMiLCJlbmRNcyIsIl9jcmVhdGVDbGFzcyIsInJvd3MiLCJjb2x1bW5zIiwibGVhdmVzIiwiYXZhaWxhYmxlV2lkdGgiLCJfd2lkdGgiLCJub092ZXJsYXAiLCJvdmVybGFwIiwiX3RoaXMkcm93IiwieE9mZnNldCIsIm1pbmltdW1TdGFydERpZmZlcmVuY2UiLCJzb3J0ZWRCeVRpbWUiLCJzb3J0QnkiLCJzb3J0ZWQiLCJzaGlmdCIsIl9ldmVudCIsInByb3hpZXMiLCJldmVudHNJblJlbmRlck9yZGVyIiwic29ydEJ5UmVuZGVyIiwiY29udGFpbmVyRXZlbnRzIiwiX2xvb3AiLCJjIiwib25TYW1lUm93IiwiX3JldCIsIm1heElkeCIsInZpc2l0ZWQiLCJmcmllbmRzIiwibmV3SWR4IiwiZ2V0TWF4SWR4REZTIiwic3R5bGVkRXZlbnRzIiwiZ2V0U3R5bGVkRXZlbnRzIiwic2l6ZSIsIl9pIiwic2UxIiwieTEiLCJ5MiIsInNlMiIsInkzIiwieTQiLCJfaTIiLCJzZSIsImJpdG1hcCIsIl9qIiwiX2oyIiwiX2kzIiwiYWxsRnJpZW5kcyIsIl9qMyIsIl9pNCIsIl9tYXhJZHgiLCJfajQiLCJEZWZhdWx0QWxnb3JpdGhtcyIsImNvbnN0cnVjdG9yIiwiZGF5TGF5b3V0QWxnb3JpdGhtIiwiYWxnb3JpdGhtIiwiVGltZVNsb3RHcm91cCIsIl9Db21wb25lbnQiLCJyZW5kZXJTbG90IiwicmVzb3VyY2UiLCJncm91cCIsIl90aGlzJHByb3BzJGNvbXBvbmVudDIiLCJ0aW1lU2xvdFdyYXBwZXIiLCJncm91cFByb3BzIiwic2xvdEdyb3VwUHJvcCIsInNsb3RQcm9wcyIsInNsb3RQcm9wIiwidiIsIl9leHRlbmRzMiIsIl9leHRlbmRzMyIsImNvbnRpbnVlc0VhcmxpZXIiLCJjb250aW51ZXNMYXRlciIsIm9uQ2xpY2siLCJpc0JhY2tncm91bmRFdmVudCIsIl9wcm9wcyRjb21wb25lbnRzIiwiaW5uZXIiLCJldmVudFN0eWxlIiwic3RyaW5naWZ5UGVyY2VudCIsIkRheUNvbHVtbldyYXBwZXIiLCJfZXhjbHVkZWQkMiIsIl9leGNsdWRlZDIiLCJEYXlDb2x1bW4iLCJ0aW1lSW5kaWNhdG9yUG9zaXRpb24iLCJpbnRlcnZhbFRyaWdnZXJlZCIsInJlbmRlckV2ZW50cyIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZSIsImdldFN0eWxlZEV2ZW50cyQxIiwiX3NlbGVjdCIsIl9kb3VibGVDbGljayIsIl9rZXlQcmVzcyIsIm1heWJlU2VsZWN0Iiwib25TZWxlY3RpbmciLCJzZWxlY3Rpb25TdGF0ZSIsIl9pbml0aWFsU2xvdCIsImluaXRpYWxTbG90Iiwic2VsZWN0UmFuZ2UiLCJfc2VsZWN0aW9uU3RhdGUiLCJpc05vdyIsInNldFRpbWVJbmRpY2F0b3JQb3NpdGlvblVwZGF0ZUludGVydmFsIiwiY2xlYXJUaW1lSW5kaWNhdG9ySW50ZXJ2YWwiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJnZXROb3dDaGFuZ2VkIiwidGFpbCIsInBvc2l0aW9uVGltZUluZGljYXRvciIsIl90aW1lSW5kaWNhdG9yVGltZW91dCIsIl90aGlzJHByb3BzNSRnZXR0ZXJzIiwiX3RoaXMkcHJvcHM1JGNvbXBvbmVuIiwiRXZlbnRDb250YWluZXIiLCJldmVudENvbnRhaW5lcldyYXBwZXIiLCJfZGF5UHJvcCIsIkRheUNvbHVtbldyYXBwZXJDb21wb25lbnQiLCJkYXlDb2x1bW5XcmFwcGVyIiwiYmFja2dyb3VuZEV2ZW50cyIsImRyYWdUaHJvdWdoRXZlbnRzIiwiVGltZUd1dHRlciIsIl9sb2NhbGl6ZXIiLCJSZXNvdXJjZUhlYWRlciIsIlRpbWVHcmlkSGVhZGVyIiwiaGFuZGxlSGVhZGVyQ2xpY2siLCJyZW5kZXJSb3ciLCJldmVudHNUb0Rpc3BsYXkiLCJyZW5kZXJIZWFkZXJDZWxscyIsIl90aGlzJHByb3BzMiRjb21wb25lbiIsInJlc291cmNlcyIsInNjcm9sbFJlZiIsImlzT3ZlcmZsb3dpbmciLCJfdGhpcyRwcm9wczMkY29tcG9uZW4iLCJUaW1lR3V0dGVySGVhZGVyIiwidGltZUd1dHRlckhlYWRlciIsIl90aGlzJHByb3BzMyRjb21wb25lbjIiLCJyZXNvdXJjZUhlYWRlciIsIlJlc291cmNlSGVhZGVyQ29tcG9uZW50Iiwic2Nyb2xsYmFyU2l6ZSIsImdyb3VwZWRFdmVudHMiLCJncm91cEV2ZW50cyIsInJlc291cmNlVGl0bGUiLCJOT05FIiwiZXZlbnRzQnlSZXNvdXJjZSIsInNldCIsInJlc291cmNlRXZlbnRzIiwiVGltZUdyaWQiLCJoYW5kbGVTY3JvbGwiLCJoYW5kbGVSZXNpemUiLCJjYW5jZWwiLCJyYWZIYW5kbGUiLCJjaGVja092ZXJmbG93IiwiZ3V0dGVyUmVmIiwiZ3V0dGVyIiwiaGFuZGxlU2VsZWN0QWxsZGF5RXZlbnQiLCJoYW5kbGVTZWxlY3RBbGxEYXlTbG90IiwiX3VwZGF0aW5nT3ZlcmZsb3ciLCJjb250ZW50UmVmIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwibWVtb2l6ZWRSZXNvdXJjZXMiLCJSZXNvdXJjZXMiLCJndXR0ZXJXaWR0aCIsIl9zY3JvbGxSYXRpbyIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjYWxjdWxhdGVTY3JvbGwiLCJtZWFzdXJlR3V0dGVyIiwiYXBwbHlTY3JvbGwiLCJtZWFzdXJlR3V0dGVyQW5pbWF0aW9uRnJhbWVSZXF1ZXN0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzY3JvbGxUb1RpbWUiLCJncm91cGVkQmFja2dyb3VuZEV2ZW50cyIsImpqIiwiZGF5c0V2ZW50cyIsImRheXNCYWNrZ3JvdW5kRXZlbnRzIiwic2hvd011bHRpRGF5VGltZXMiLCJhbGxEYXlFdmVudHMiLCJyYW5nZUV2ZW50cyIsInJhbmdlQmFja2dyb3VuZEV2ZW50cyIsImVFbmQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJnZXRXaWR0aCIsIl9wcm9wcyIsImRpZmZNaWxsaXMiLCJ0b3RhbE1pbGxpcyIsIl9leGNsdWRlZCQzIiwiRGF5IiwiX3RoaXMkcHJvcHMkbWluIiwiX3RoaXMkcHJvcHMkbWF4IiwiX3RoaXMkcHJvcHMkc2Nyb2xsVG9UIiwiX2V4Y2x1ZGVkJDQiLCJXZWVrIiwiX1dlZWskcmFuZ2UiLCJyZXN0IiwicG9wIiwiX2V4Y2x1ZGVkJDUiLCJkIiwiZ2V0RGF5IiwiV29ya1dlZWsiLCJ3b3JrV2Vla1JhbmdlIiwiX3dvcmtXZWVrUmFuZ2UiLCJoZWFkZXJSZWYiLCJkYXRlQ29sUmVmIiwidGltZUNvbFJlZiIsInRib2R5UmVmIiwiX2FkanVzdEhlYWRlciIsInJlbmRlckRheSIsImRheUtleSIsIkFnZW5kYURhdGUiLCJkYXRlTGFiZWwiLCJ0aW1lUmFuZ2VMYWJlbCIsImxhYmVsQ2xhc3MiLCJUaW1lQ29tcG9uZW50IiwidHJpbSIsImZpcnN0Um93IiwiZmlyc3RDaGlsZCIsIl93aWR0aHMiLCJ3aWR0aHMiLCJhZGRDbGFzcyIsIm1hcmdpblJpZ2h0IiwicmVtb3ZlQ2xhc3MiLCJBZ2VuZGEiLCJfcmVmMiRsZW5ndGgiLCJfcmVmMyRsZW5ndGgiLCJfcmVmNCRsZW5ndGgiLCJfVklFV1MiLCJWSUVXUyIsIl9leGNsdWRlZCQ2IiwiVmlldyIsIlRvb2xiYXIiLCJvbk5hdmlnYXRlIiwib25WaWV3Iiwidmlld05hbWVzR3JvdXAiLCJuYW1lIiwiZmllbGQiLCJ3cmFwQWNjZXNzb3IiLCJhY2MiLCJhY2Nlc3NvciQxIiwiX2V4Y2x1ZGVkJDciLCJfZXhjbHVkZWQyJDEiLCJfdmlld3MiLCJuYW1lcyIsInZpZXdOYW1lcyQxIiwiQ2FsZW5kYXIiLCJnZXRWaWV3cyIsInRyYW5zZm9ybSIsIm9iaiIsIm1hcFZhbHVlcyIsImdldFZpZXciLCJoYW5kbGVSYW5nZUNoYW5nZSIsInZpZXdDb21wb25lbnQiLCJvblJhbmdlQ2hhbmdlIiwiaGFuZGxlTmF2aWdhdGUiLCJuZXdEYXRlIiwiVmlld0NvbXBvbmVudCIsIm1vdmVEYXRlIiwiaGFuZGxlVmlld0NoYW5nZSIsImlzVmFsaWRWaWV3IiwiaGFuZGxlRHJpbGxEb3duIiwiZ2V0Q29udGV4dCIsInN0YXJ0QWNjZXNzb3IiLCJlbmRBY2Nlc3NvciIsImFsbERheUFjY2Vzc29yIiwidG9vbHRpcEFjY2Vzc29yIiwidGl0bGVBY2Nlc3NvciIsInJlc291cmNlQWNjZXNzb3IiLCJyZXNvdXJjZUlkQWNjZXNzb3IiLCJyZXNvdXJjZVRpdGxlQWNjZXNzb3IiLCJldmVudFByb3BHZXR0ZXIiLCJiYWNrZ3JvdW5kRXZlbnRQcm9wR2V0dGVyIiwic2xvdFByb3BHZXR0ZXIiLCJzbG90R3JvdXBQcm9wR2V0dGVyIiwiZGF5UHJvcEdldHRlciIsIl9yZWYyJG1lc3NhZ2VzIiwibWVzc2FnZXMkMSIsIl9yZWYyJGNvbXBvbmVudHMiLCJfcmVmMiRmb3JtYXRzIiwibWVyZ2VXaXRoRGVmYXVsdHMiLCJiYWNrZ3JvdW5kRXZlbnRQcm9wIiwiZGVmYXVsdHMiLCJvbWl0IiwiYmFja2dyb3VuZEV2ZW50V3JhcHBlciIsInRvb2xiYXIiLCJfdGhpcyRwcm9wczQkYmFja2dyb3UiLCJlbGVtZW50UHJvcHMiLCJfdGhpcyRzdGF0ZSRjb250ZXh0IiwiQ2FsVG9vbGJhciIsIkNhbGVuZGFyJDEiLCJ1bmNvbnRyb2xsYWJsZSIsIndlZWtSYW5nZUZvcm1hdCIsImxvY2FsIiwiZGF0ZVJhbmdlRm9ybWF0JDEiLCJ0aW1lUmFuZ2VGb3JtYXQiLCJ0aW1lUmFuZ2VTdGFydEZvcm1hdCIsInRpbWVSYW5nZUVuZEZvcm1hdCIsImRhdGVGb3JtYXQiLCJkYXlGb3JtYXQiLCJ3ZWVrZGF5Rm9ybWF0Iiwic2VsZWN0UmFuZ2VGb3JtYXQiLCJldmVudFRpbWVSYW5nZUZvcm1hdCIsImV2ZW50VGltZVJhbmdlU3RhcnRGb3JtYXQiLCJldmVudFRpbWVSYW5nZUVuZEZvcm1hdCIsInRpbWVHdXR0ZXJGb3JtYXQiLCJtb250aEhlYWRlckZvcm1hdCIsImRheUhlYWRlckZvcm1hdCIsImRheVJhbmdlSGVhZGVyRm9ybWF0IiwiYWdlbmRhSGVhZGVyRm9ybWF0IiwiYWdlbmRhRGF0ZUZvcm1hdCIsImFnZW5kYVRpbWVGb3JtYXQiLCJhZ2VuZGFUaW1lUmFuZ2VGb3JtYXQiLCJkYXRlUGFydCIsInRvTG93ZXJDYXNlIiwibG9jYWxlIiwiZml4VW5pdCIsImR0QSIsImR0QiIsInRvRGF0ZSIsIl9kZWZpbmVDb21wYXJhdG9ycyIsImRlZmluZUNvbXBhcmF0b3JzIiwiaXNTYW1lIiwiX2RlZmluZUNvbXBhcmF0b3JzMiIsImlzQWZ0ZXIiLCJfZGVmaW5lQ29tcGFyYXRvcnMzIiwiaXNCZWZvcmUiLCJfZGVmaW5lQ29tcGFyYXRvcnM0IiwiaXNTYW1lT3JCZWZvcmUiLCJfZGVmaW5lQ29tcGFyYXRvcnM1IiwibURheSIsIm1NaW4iLCJtTWF4IiwibWluRHQiLCJtYXhEdCIsInRtIiwiYWRkZXIiLCJsb2NhbGVEYXRhIiwiZmlyc3REYXlPZldlZWsiLCJtaW51dGUiLCJkYXlTdGFydCIsIm1TdGFydCIsIm1GaXJzdCIsIm1FbmQiLCJtTGFzdCIsImlzU2FtZU9yQWZ0ZXIiLCJfcmVmNiRldnRBIiwiX3JlZjYkZXZ0QiIsIl9yZWY3IiwiX3JlZjckZXZlbnQiLCJfcmVmNyRyYW5nZSIsInN0YXJ0T2ZEYXkiLCJyU3RhcnQiLCJyRW5kIiwiZHQyIiwibmVnIiwiZHRPZmZzZXQiLCJjb21wYXJhdG9yIiwiTnVtYmVyIiwibXRPZmZzZXQiLCJ1dGNPZmZzZXQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiRG5EQ29udGV4dF8xIiwiX3JlYWN0IiwicmVxdWlyZSQkMyIsInJlcXVpcmUkJDQiLCJyZXF1aXJlJCQ1IiwicmVxdWlyZSQkNiIsIlNlbGVjdGlvbl8xIiwicmVxdWlyZSQkNyIsInJlcXVpcmUkJDgiLCJyZXF1aXJlJCQ5IiwiZXZlbnRMZXZlbHNfMSIsInJlcXVpcmUkJDEwIiwicmVxdWlyZSQkMTEiLCJyZXF1aXJlJCQxMiIsIk1vZGFsIiwiVGV4dENvbXBvbmVudCIsIkJ1dHRvbkNvbXBvbmVudCIsIk9ubHlXaGVuIiwid2hlbiIsIk9ubHkiLCJDYWxlbmRhckNvbXBvbmVudCIsInJlc2l6ZWFibGUiLCJkZWZhdWx0VmlldyIsIm9uRXZlbnREb3VibGVDbGljayIsImhhbmRsZURvdWJsZUNsaWNrRXZlbnRDYWxsYmFjayIsIm9uRXZlbnRTZWxlY3QiLCJoYW5kbGVFdmVudFNlbGVjdENhbGxiYWNrIiwiZXZlbnRTdGF0ZSIsInVzZUNvbnRleHQiLCJhcHBDb250ZXh0IiwicmVmcmVzaCIsInVzZVJlZnJlc2giLCJuZXdFdmVudHMiLCJzZXROZXdFdmVudHMiLCJldmVudFJlZiIsImNhbGVuZGFyVmlldyIsInNldENhbGVuZGFyVmlldyIsImNhbGVuZGFyVmlld1JlZiIsIkRyYWdBbmREcm9wQ2FsZW5kYXIiLCJ3aXRoRHJhZ0FuZERyb3AiLCJtb21lbnRMb2NhbGl6ZXIiLCJnZXRFZGl0b3JDb250ZW50Q2FjaGUiLCJzZXRFdmVudHMiLCJtb21lbnRDaGFuZ2UiLCJTdGFydERhdGUiLCJ1cGRhdGVMb2NhbGUiLCJkb3ciLCJzdHlsZUV2ZW50cyIsImV2ZW50VHlwZSIsImhhbmRsZUV2ZW50U2VsZWN0IiwiYXBwIiwiZGFpbHlOb3Rlc1NlcnZpY2UiLCJnZXRTdGF0ZSIsImFkZEV2ZW50IiwiR2VuZXJpY0lucHV0UHJvbXB0IiwiUHJvbXB0Iiwib25FdmVudFJlc2l6ZSIsImxvZyIsIm9uRXZlbnREcm9wIiwic3RvcmFnZSIsInZpZXdDYWNoZSIsIlBsYXRmb3JtIiwiQmlnQ2FsZW5kYXIiLCJnbG9iYWxTdGF0ZSIsImlzRmV0Y2hpbmciLCJzZXRGZXRjaFN0YXR1cyIsImZldGNoQWxsRXZlbnRzIiwidGhlbiIsImNhdGNoIiwiZ2V0TXlBbGxEYWlseU5vdGVzIiwibmV3RXZlbnQiLCJldmVudFNlcnZpY2UiLCJjcmVhdGVFdmVudCIsInB1c2hFdmVudCIsImhhbmRsZUV2ZW50RG91YmxlQ2xpY2siLCJwYXRoIiwiY2FsZW5kYXJDb25maWciLCJob21lUm91dGVyIiwibG9jYXRpb25TdGF0ZSIsInBhdGhuYW1lIiwibG9hZGluZ1N0YXRlIiwidXNlTG9hZGluZyIsInNldEZpbmlzaCIsImhvbWVSb3V0ZXJTd2l0Y2giLCJQcm92aWRlciIsInN0b3JlIiwiQ29udGV4dCIsImFwcFN0YXRlIiwic2V0QXBwU3RhdGUiLCJ1bnN1YnNjcmliZSIsInN1YnNjcmliZSIsIm5zIiwiYXBwU3RvcmUiLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJzZXRJc01vYmlsZVZpZXciLCJjbGllbnRXaWR0aCIsIkl0ZW1WaWV3IiwiQXBwIiwiUGx1Z2luU2V0dGluZ1RhYiIsIlNldHRpbmciLCJQbHVnaW4iLCJGaWxlVmlldyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFBYSxxQkFBcUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1FsQyxJQUFJLHdCQUF3QixPQUFPO0FBQ25DLElBQUlBLG1CQUFpQixPQUFPLFVBQVU7QUFDdEMsSUFBSSxtQkFBbUIsT0FBTyxVQUFVO0FBRXhDLGtCQUFrQixLQUFLO0FBQ3RCLE1BQUksUUFBUSxRQUFRLFFBQVEsUUFBVztBQUN0QyxVQUFNLElBQUksVUFBVTtBQUFBO0FBR3JCLFNBQU8sT0FBTztBQUFBO0FBR2YsMkJBQTJCO0FBQzFCLE1BQUk7QUFDSCxRQUFJLENBQUMsT0FBTyxRQUFRO0FBQ25CLGFBQU87QUFBQTtBQU1SLFFBQUksUUFBUSxJQUFJLE9BQU87QUFDdkIsVUFBTSxLQUFLO0FBQ1gsUUFBSSxPQUFPLG9CQUFvQixPQUFPLE9BQU8sS0FBSztBQUNqRCxhQUFPO0FBQUE7QUFJUixRQUFJLFFBQVE7QUFDWixhQUFTLElBQUksR0FBRyxJQUFJLElBQUksS0FBSztBQUM1QixZQUFNLE1BQU0sT0FBTyxhQUFhLE1BQU07QUFBQTtBQUV2QyxRQUFJLFNBQVMsT0FBTyxvQkFBb0IsT0FBTyxJQUFJLFNBQVUsSUFBRztBQUMvRCxhQUFPLE1BQU07QUFBQTtBQUVkLFFBQUksT0FBTyxLQUFLLFFBQVEsY0FBYztBQUNyQyxhQUFPO0FBQUE7QUFJUixRQUFJLFFBQVE7QUFDWiwyQkFBdUIsTUFBTSxJQUFJLFFBQVEsU0FBVSxRQUFRO0FBQzFELFlBQU0sVUFBVTtBQUFBO0FBRWpCLFFBQUksT0FBTyxLQUFLLE9BQU8sT0FBTyxJQUFJLFFBQVEsS0FBSyxRQUM3Qyx3QkFBd0I7QUFDekIsYUFBTztBQUFBO0FBR1IsV0FBTztBQUFBLFdBQ0MsS0FBUDtBQUVELFdBQU87QUFBQTtBQUFBO0lBSVQsbUNBQWlCLG9CQUFvQixPQUFPLFNBQVMsU0FBVSxRQUFRLFFBQVE7QUFDOUUsTUFBSTtBQUNKLE1BQUksS0FBSyxTQUFTO0FBQ2xCLE1BQUk7QUFFSixXQUFTLElBQUksR0FBRyxJQUFJLFVBQVUsUUFBUSxLQUFLO0FBQzFDLFdBQU8sT0FBTyxVQUFVO0FBRXhCLGFBQVMsT0FBTyxNQUFNO0FBQ3JCLFVBQUlBLGlCQUFlLEtBQUssTUFBTSxNQUFNO0FBQ25DLFdBQUcsT0FBTyxLQUFLO0FBQUE7QUFBQTtBQUlqQixRQUFJLHVCQUF1QjtBQUMxQixnQkFBVSxzQkFBc0I7QUFDaEMsZUFBUyxJQUFJLEdBQUcsSUFBSSxRQUFRLFFBQVEsS0FBSztBQUN4QyxZQUFJLGlCQUFpQixLQUFLLE1BQU0sUUFBUSxLQUFLO0FBQzVDLGFBQUcsUUFBUSxNQUFNLEtBQUssUUFBUTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTWxDLFNBQU87QUFBQTs7Ozs7Ozs7O0FDaEZLLElBQUksSUFBRUMsa0NBQXlCQyxNQUFFLE9BQU1DLE1BQUU7Z0NBQXVCO2tDQUF5QjtnQ0FBdUI7QUFBTSxJQUFJQyxNQUFFLE9BQU1DLE1BQUUsT0FBTUMsTUFBRTtnQ0FBdUI7QUFBTSxJQUFJLElBQUUsT0FBTSxJQUFFO0FBQ3BNLElBQUcsQUFBYSxPQUFPLFdBQXBCLGNBQTRCLE9BQU8sS0FBSTtBQUFDLE1BQUksSUFBRSxPQUFPO0FBQUlKLFFBQUUsRUFBRTtBQUFpQkMsUUFBRSxFQUFFO2tDQUFpQyxFQUFFO29DQUFxQyxFQUFFO2tDQUFzQyxFQUFFO0FBQWtCQyxRQUFFLEVBQUU7QUFBa0JDLFFBQUUsRUFBRTtBQUFpQkMsUUFBRSxFQUFFO2tDQUFzQyxFQUFFO0FBQWtCLE1BQUUsRUFBRTtBQUFjLE1BQUUsRUFBRTtBQUFBO0FBQWMsSUFBSSxJQUFFLEFBQWEsT0FBTyxXQUFwQixjQUE0QixPQUFPO0FBQy9ZLGFBQVcsR0FBRTtBQUFDLE1BQUcsQUFBTyxNQUFQLFFBQVUsQUFBVyxPQUFPLE1BQWxCO0FBQW9CLFdBQU87QUFBSyxNQUFFLEtBQUcsRUFBRSxNQUFJLEVBQUU7QUFBYyxTQUFNLEFBQWEsT0FBTyxNQUFwQixhQUFzQixJQUFFO0FBQUE7QUFBSyxXQUFXLEdBQUU7QUFBQyxXQUFRLElBQUUsMkRBQXlELEdBQUUsSUFBRSxHQUFFLElBQUUsVUFBVSxRQUFPO0FBQUksU0FBRyxhQUFXLG1CQUFtQixVQUFVO0FBQUksU0FBTSwyQkFBeUIsSUFBRSxhQUFXLElBQUU7QUFBQTtBQUNwVSxJQUFJLElBQUUsRUFBQyxXQUFVLFdBQVU7QUFBQyxTQUFNO0FBQUEsR0FBSSxvQkFBbUIsV0FBVTtBQUFBLEdBQUcscUJBQW9CLFdBQVU7QUFBQSxHQUFHLGlCQUFnQixXQUFVO0FBQUEsS0FBSUMsTUFBRTtBQUFHLFdBQVcsR0FBRSxHQUFFLEdBQUU7QUFBQyxPQUFLLFFBQU07QUFBRSxPQUFLLFVBQVE7QUFBRSxPQUFLLE9BQUtBO0FBQUUsT0FBSyxVQUFRLEtBQUc7QUFBQTtBQUFFLEVBQUUsVUFBVSxtQkFBaUI7QUFBRyxFQUFFLFVBQVUsV0FBUyxTQUFTLEdBQUUsR0FBRTtBQUFDLE1BQUcsQUFBVyxPQUFPLE1BQWxCLFlBQXFCLEFBQWEsT0FBTyxNQUFwQixjQUF1QixBQUFNLEtBQU47QUFBUSxVQUFNLE1BQU0sRUFBRTtBQUFLLE9BQUssUUFBUSxnQkFBZ0IsTUFBSyxHQUFFLEdBQUU7QUFBQTtBQUFhLEVBQUUsVUFBVSxjQUFZLFNBQVMsR0FBRTtBQUFDLE9BQUssUUFBUSxtQkFBbUIsTUFBSyxHQUFFO0FBQUE7QUFDamUsZUFBWTtBQUFBO0FBQUVDLElBQUUsWUFBVSxFQUFFO0FBQVUsYUFBVyxHQUFFLEdBQUUsR0FBRTtBQUFDLE9BQUssUUFBTTtBQUFFLE9BQUssVUFBUTtBQUFFLE9BQUssT0FBS0Q7QUFBRSxPQUFLLFVBQVEsS0FBRztBQUFBO0FBQUUsSUFBSUUsTUFBRUMsSUFBRSxZQUFVLElBQUlGO0FBQUVDLElBQUUsY0FBWUM7QUFBRSxFQUFFRCxLQUFFLEVBQUU7QUFBV0EsSUFBRSx1QkFBcUI7QUFBRyxJQUFJRSxNQUFFLEVBQUMsU0FBUSxRQUFNQyxNQUFFLE9BQU8sVUFBVSxnQkFBZUMsTUFBRSxFQUFDLEtBQUksTUFBRyxLQUFJLE1BQUcsUUFBTyxNQUFHLFVBQVM7QUFDaFMsV0FBVyxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksR0FBRSxJQUFFLElBQUcsSUFBRSxNQUFLLEtBQUU7QUFBSyxNQUFHLEFBQU0sS0FBTjtBQUFRLFNBQUksS0FBSyxBQUFTLEVBQUUsUUFBWCxVQUFpQixNQUFFLEVBQUUsTUFBSyxBQUFTLEVBQUUsUUFBWCxVQUFpQixLQUFFLEtBQUcsRUFBRSxNQUFLO0FBQUVELFVBQUUsS0FBSyxHQUFFLE1BQUksQ0FBQ0MsSUFBRSxlQUFlLE1BQUssR0FBRSxLQUFHLEVBQUU7QUFBSSxNQUFJLEtBQUUsVUFBVSxTQUFPO0FBQUUsTUFBRyxBQUFJLE9BQUo7QUFBTSxNQUFFLFdBQVM7QUFBQSxXQUFVLElBQUUsSUFBRTtBQUFDLGFBQVEsS0FBRSxNQUFNLEtBQUcsS0FBRSxHQUFFLEtBQUUsSUFBRTtBQUFJLFNBQUUsTUFBRyxVQUFVLEtBQUU7QUFBRyxNQUFFLFdBQVM7QUFBQTtBQUFFLE1BQUcsS0FBRyxFQUFFO0FBQWEsU0FBSSxLQUFLLEtBQUUsRUFBRSxjQUFhO0FBQUUsTUFBUyxFQUFFLE9BQVgsVUFBZ0IsR0FBRSxLQUFHLEdBQUU7QUFBSSxTQUFNLEVBQUMsVUFBU1gsS0FBRSxNQUFLLEdBQUUsS0FBSSxHQUFFLEtBQUksSUFBRSxPQUFNLEdBQUUsUUFBT1MsSUFBRTtBQUFBO0FBQ3JhLFdBQVcsR0FBRSxHQUFFO0FBQUMsU0FBTSxFQUFDLFVBQVNULEtBQUUsTUFBSyxFQUFFLE1BQUssS0FBSSxHQUFFLEtBQUksRUFBRSxLQUFJLE9BQU0sRUFBRSxPQUFNLFFBQU8sRUFBRTtBQUFBO0FBQVEsV0FBVyxHQUFFO0FBQUMsU0FBTSxBQUFXLE9BQU8sTUFBbEIsWUFBcUIsQUFBTyxNQUFQLFFBQVUsRUFBRSxhQUFXQTtBQUFBQTtBQUFFLGdCQUFnQixHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUMsS0FBSSxNQUFLLEtBQUk7QUFBTSxTQUFNLE1BQUksRUFBRSxRQUFRLFNBQVEsU0FBUyxJQUFFO0FBQUMsV0FBTyxFQUFFO0FBQUE7QUFBQTtBQUFLLElBQUlZLE1BQUU7QUFBTyxhQUFXLEdBQUUsR0FBRTtBQUFDLFNBQU0sQUFBVyxPQUFPLE1BQWxCLFlBQXFCLEFBQU8sTUFBUCxRQUFVLEFBQU0sRUFBRSxPQUFSLE9BQVksT0FBTyxLQUFHLEVBQUUsT0FBSyxFQUFFLFNBQVM7QUFBQTtBQUM1VyxhQUFXLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxPQUFPO0FBQUUsTUFBRyxBQUFjLE1BQWQsZUFBaUIsQUFBWSxNQUFaO0FBQWMsUUFBRTtBQUFLLE1BQUksS0FBRTtBQUFHLE1BQUcsQUFBTyxNQUFQO0FBQVMsU0FBRTtBQUFBO0FBQVEsWUFBTztBQUFBLFdBQVE7QUFBQSxXQUFjO0FBQVMsYUFBRTtBQUFHO0FBQUEsV0FBVztBQUFTLGdCQUFPLEVBQUU7QUFBQSxlQUFlWjtBQUFBQSxlQUFPQztBQUFFLGlCQUFFO0FBQUE7QUFBQTtBQUFJLE1BQUc7QUFBRSxXQUFPLEtBQUUsR0FBRSxJQUFFLEVBQUUsS0FBRyxJQUFFLEFBQUssTUFBTCxLQUFPLE1BQUlZLElBQUUsSUFBRSxLQUFHLEdBQUUsTUFBTSxRQUFRLEtBQUksS0FBRSxJQUFHLEFBQU0sS0FBTixRQUFVLEtBQUUsRUFBRSxRQUFRRCxLQUFFLFNBQU8sTUFBS0UsSUFBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLFNBQVMsSUFBRTtBQUFDLGFBQU87QUFBQSxVQUFLLEFBQU0sS0FBTixRQUFVLEdBQUUsTUFBSyxLQUFFLEVBQUUsR0FBRSxJQUFHLEVBQUMsRUFBRSxPQUFLLE1BQUcsR0FBRSxRQUFNLEVBQUUsTUFBSSxLQUFJLE1BQUcsRUFBRSxLQUFLLFFBQVFGLEtBQUUsU0FBTyxPQUFLLEtBQUksRUFBRSxLQUFLLEtBQUk7QUFBRSxPQUFFO0FBQUUsTUFBRSxBQUFLLE1BQUwsS0FBTyxNQUFJLElBQUU7QUFBSSxNQUFHLE1BQU0sUUFBUTtBQUFHLGFBQVEsS0FDemYsR0FBRSxLQUFFLEVBQUUsUUFBTyxNQUFJO0FBQUMsVUFBRSxFQUFFO0FBQUcsVUFBSSxLQUFFLElBQUVDLElBQUUsR0FBRTtBQUFHLFlBQUdDLElBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRTtBQUFBO0FBQUEsV0FBVyxLQUFFQyxJQUFFLElBQUcsQUFBYSxPQUFPLE9BQXBCO0FBQXNCLFNBQUksSUFBRSxHQUFFLEtBQUssSUFBRyxLQUFFLEdBQUUsQ0FBRSxLQUFFLEVBQUUsUUFBUTtBQUFNLFVBQUUsRUFBRSxPQUFNLEtBQUUsSUFBRUYsSUFBRSxHQUFFLE9BQUssTUFBR0MsSUFBRSxHQUFFLEdBQUUsR0FBRSxJQUFFO0FBQUEsV0FBVyxBQUFXLE1BQVg7QUFBYSxVQUFNLElBQUUsS0FBRyxHQUFFLE1BQU0sRUFBRSxJQUFHLEFBQW9CLE1BQXBCLG9CQUFzQix1QkFBcUIsT0FBTyxLQUFLLEdBQUcsS0FBSyxRQUFNLE1BQUk7QUFBSSxTQUFPO0FBQUE7QUFBRSxhQUFXLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBRyxBQUFNLEtBQU47QUFBUSxXQUFPO0FBQUUsTUFBSSxJQUFFLElBQUcsSUFBRTtBQUFFQSxNQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsU0FBUyxJQUFFO0FBQUMsV0FBTyxFQUFFLEtBQUssR0FBRSxJQUFFO0FBQUE7QUFBTyxTQUFPO0FBQUE7QUFDMVosV0FBVyxHQUFFO0FBQUMsTUFBRyxBQUFLLEVBQUUsWUFBUCxJQUFlO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBUSxRQUFFO0FBQUksTUFBRSxVQUFRO0FBQUUsTUFBRSxVQUFRO0FBQUUsTUFBRSxLQUFLLFNBQVMsSUFBRTtBQUFDLE1BQUksRUFBRSxZQUFOLEtBQWdCLE1BQUUsR0FBRSxTQUFRLEVBQUUsVUFBUSxHQUFFLEVBQUUsVUFBUTtBQUFBLE9BQUksU0FBUyxJQUFFO0FBQUMsTUFBSSxFQUFFLFlBQU4sS0FBZ0IsR0FBRSxVQUFRLEdBQUUsRUFBRSxVQUFRO0FBQUE7QUFBQTtBQUFLLE1BQUcsQUFBSSxFQUFFLFlBQU47QUFBYyxXQUFPLEVBQUU7QUFBUSxRQUFNLEVBQUU7QUFBQTtBQUFTLElBQUlFLE1BQUUsRUFBQyxTQUFRO0FBQU0sZUFBWTtBQUFDLE1BQUksSUFBRUEsSUFBRTtBQUFRLE1BQUcsQUFBTyxNQUFQO0FBQVMsVUFBTSxNQUFNLEVBQUU7QUFBTSxTQUFPO0FBQUE7QUFBRSxJQUFJQyxNQUFFLEVBQUMsd0JBQXVCRCxLQUFFLHlCQUF3QixFQUFDLFlBQVcsS0FBRyxtQkFBa0JQLEtBQUUsc0JBQXFCLEVBQUMsU0FBUSxTQUFJLFFBQU87Z0NBQ2hkLEVBQUMsS0FBSVMsS0FBRSxTQUFRLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQ0EsTUFBRSxHQUFFLFdBQVU7QUFBQyxNQUFFLE1BQU0sTUFBSztBQUFBLEtBQVk7QUFBQSxHQUFJLE9BQU0sU0FBUyxHQUFFO0FBQUMsTUFBSSxJQUFFO0FBQUVBLE1BQUUsR0FBRSxXQUFVO0FBQUM7QUFBQTtBQUFNLFNBQU87QUFBQSxHQUFHLFNBQVEsU0FBUyxHQUFFO0FBQUMsU0FBT0EsSUFBRSxHQUFFLFNBQVMsSUFBRTtBQUFDLFdBQU87QUFBQSxRQUFLO0FBQUEsR0FBSSxNQUFLLFNBQVMsR0FBRTtBQUFDLE1BQUcsQ0FBQyxFQUFFO0FBQUcsVUFBTSxNQUFNLEVBQUU7QUFBTSxTQUFPO0FBQUE7aUNBQXNCO3FDQUF3QlY7MEVBQTZEUztvQ0FDM1YsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUcsQUFBTyxNQUFQLFFBQVUsQUFBUyxNQUFUO0FBQVcsVUFBTSxNQUFNLEVBQUUsS0FBSTtBQUFJLE1BQUksSUFBRSxFQUFFLElBQUcsRUFBRSxRQUFPLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLEtBQUUsRUFBRTtBQUFPLE1BQUcsQUFBTSxLQUFOLE1BQVE7QUFBQyxJQUFTLEVBQUUsUUFBWCxVQUFpQixLQUFFLEVBQUUsS0FBSSxLQUFFUixJQUFFO0FBQVMsSUFBUyxFQUFFLFFBQVgsVUFBaUIsS0FBRSxLQUFHLEVBQUU7QUFBSyxRQUFHLEVBQUUsUUFBTSxFQUFFLEtBQUs7QUFBYSxVQUFJLEtBQUUsRUFBRSxLQUFLO0FBQWEsU0FBSSxNQUFLO0FBQUVDLFVBQUUsS0FBSyxHQUFFLE9BQUksQ0FBQ0MsSUFBRSxlQUFlLE9BQUssR0FBRSxNQUFHLEFBQVMsRUFBRSxRQUFYLFVBQWUsQUFBUyxPQUFULFNBQVcsR0FBRSxNQUFHLEVBQUU7QUFBQTtBQUFJLE1BQUksS0FBRSxVQUFVLFNBQU87QUFBRSxNQUFHLEFBQUksT0FBSjtBQUFNLE1BQUUsV0FBUztBQUFBLFdBQVUsSUFBRSxJQUFFO0FBQUMsU0FBRSxNQUFNO0FBQUcsYUFBUSxLQUFFLEdBQUUsS0FBRSxJQUFFO0FBQUksU0FBRSxNQUFHLFVBQVUsS0FBRTtBQUFHLE1BQUUsV0FBUztBQUFBO0FBQUUsU0FBTTtBQUFBLElBQUMsVUFBU1g7QUFBQUEsSUFBRSxNQUFLLEVBQUU7QUFBQSxJQUN4ZixLQUFJO0FBQUEsSUFBRSxLQUFJO0FBQUEsSUFBRSxPQUFNO0FBQUEsSUFBRSxRQUFPO0FBQUE7QUFBQTtxQ0FBMEIsU0FBUyxHQUFFLEdBQUU7QUFBQyxFQUFTLE1BQVQsVUFBYSxLQUFFO0FBQU0sTUFBRSxFQUFDLFVBQVNHLEtBQUUsdUJBQXNCLEdBQUUsZUFBYyxHQUFFLGdCQUFlLEdBQUUsY0FBYSxHQUFFLFVBQVMsTUFBSyxVQUFTO0FBQU0sSUFBRSxXQUFTLEVBQUMsVUFBU0QsS0FBRSxVQUFTO0FBQUcsU0FBTyxFQUFFLFdBQVM7QUFBQTtxQ0FBeUI7cUNBQXdCLFNBQVMsR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFLEtBQUssTUFBSztBQUFHLElBQUUsT0FBSztBQUFFLFNBQU87QUFBQTtpQ0FBcUIsV0FBVTtBQUFDLFNBQU0sRUFBQyxTQUFRO0FBQUE7a0NBQTBCLFNBQVMsR0FBRTtBQUFDLFNBQU0sRUFBQyxVQUFTRSxLQUFFLFFBQU87QUFBQTtzQ0FBMkI7NEJBQzlkLFNBQVMsR0FBRTtBQUFDLFNBQU0sRUFBQyxVQUFTLEdBQUUsVUFBUyxFQUFDLFNBQVEsSUFBRyxTQUFRLEtBQUcsT0FBTTtBQUFBOzRCQUFpQixTQUFTLEdBQUUsR0FBRTtBQUFDLFNBQU0sRUFBQyxVQUFTLEdBQUUsTUFBSyxHQUFFLFNBQVEsQUFBUyxNQUFULFNBQVcsT0FBSztBQUFBO21DQUF3QixTQUFTLEdBQUUsR0FBRTtBQUFDLFNBQU9lLE1BQUksWUFBWSxHQUFFO0FBQUE7a0NBQXVCLFNBQVMsR0FBRSxHQUFFO0FBQUMsU0FBT0EsTUFBSSxXQUFXLEdBQUU7QUFBQTtxQ0FBMEIsV0FBVTtBQUFBO2lDQUFxQixTQUFTLEdBQUUsR0FBRTtBQUFDLFNBQU9BLE1BQUksVUFBVSxHQUFFO0FBQUE7MkNBQWdDLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxTQUFPQSxNQUFJLG9CQUFvQixHQUFFLEdBQUU7QUFBQTt1Q0FDdGIsU0FBUyxHQUFFLEdBQUU7QUFBQyxTQUFPQSxNQUFJLGdCQUFnQixHQUFFO0FBQUE7K0JBQW9CLFNBQVMsR0FBRSxHQUFFO0FBQUMsU0FBT0EsTUFBSSxRQUFRLEdBQUU7QUFBQTtrQ0FBdUIsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLFNBQU9BLE1BQUksV0FBVyxHQUFFLEdBQUU7QUFBQTs4QkFBbUIsU0FBUyxHQUFFO0FBQUMsU0FBT0EsTUFBSSxPQUFPO0FBQUE7Z0NBQXFCLFNBQVMsR0FBRTtBQUFDLFNBQU9BLE1BQUksU0FBUztBQUFBOytCQUFvQjtBQ3BCMVE7QUFDekNDLGdDQUFpQnJCO0FBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUNLTixNQUFJLElBQUUsSUFBRSxJQUFFO0FBQUUsTUFBRyxBQUFXLE9BQU8sZ0JBQWxCLFlBQStCLEFBQWEsT0FBTyxZQUFZLFFBQWhDLFlBQW9DO0FBQUMsUUFBSSxLQUFFO0FBQVksNEJBQXFCLFdBQVU7QUFBQyxhQUFPLEdBQUU7QUFBQTtBQUFBLFNBQVc7QUFBQyxRQUFJLEtBQUUsTUFBSyxLQUFFLEdBQUU7QUFBTSw0QkFBcUIsV0FBVTtBQUFDLGFBQU8sR0FBRSxRQUFNO0FBQUE7QUFBQTtBQUMzTyxNQUFHLEFBQWMsT0FBTyxXQUFyQixlQUE2QixBQUFhLE9BQU8sbUJBQXBCLFlBQW1DO0FBQUMsUUFBSSxLQUFFLE1BQUssS0FBRSxNQUFLLEtBQUUsV0FBVTtBQUFDLFVBQUcsQUFBTyxPQUFQO0FBQVMsWUFBRztBQUFDLGNBQUksSUFBRSxTQUFRO0FBQWUsYUFBRSxNQUFHO0FBQUcsZUFBRTtBQUFBLGlCQUFXLEdBQU47QUFBUyxnQkFBTSxXQUFXLElBQUUsSUFBRztBQUFBO0FBQUE7QUFBSyxTQUFFLFNBQVMsR0FBRTtBQUFDLE1BQU8sT0FBUCxPQUFTLFdBQVcsSUFBRSxHQUFFLEtBQUksTUFBRSxHQUFFLFdBQVcsSUFBRTtBQUFBO0FBQUssU0FBRSxTQUFTLEdBQUUsR0FBRTtBQUFDLFdBQUUsV0FBVyxHQUFFO0FBQUE7QUFBSSxTQUFFLFdBQVU7QUFBQyxtQkFBYTtBQUFBO0FBQUksb0NBQTZCLFdBQVU7QUFBQyxhQUFNO0FBQUE7QUFBSSxRQUFFLG1DQUFnQyxXQUFVO0FBQUE7QUFBQSxTQUFPO0FBQUMsUUFBSSxLQUFFLE9BQU8sWUFBVyxLQUFFLE9BQU87QUFBYSxRQUFHLEFBQWMsT0FBTyxZQUFyQixhQUE2QjtBQUFDLFVBQUksS0FDN2YsT0FBTztBQUFxQixNQUFhLE9BQU8sT0FBTywwQkFBM0IsY0FBa0QsUUFBUSxNQUFNO0FBQXNKLE1BQWEsT0FBTyxPQUFwQixjQUF1QixRQUFRLE1BQU07QUFBQTtBQUFxSixRQUFJLEtBQUUsT0FBRyxLQUFFLE1BQUssS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFO0FBQUUsb0NBQTZCLFdBQVU7QUFBQyxhQUFPLFNBQVEsa0JBQ2hnQjtBQUFBO0FBQUcsUUFBRSxXQUFVO0FBQUE7QUFBRyx1Q0FBZ0MsU0FBUyxHQUFFO0FBQUMsVUFBRSxLQUFHLE1BQUksSUFBRSxRQUFRLE1BQU0scUhBQW1ILEtBQUUsSUFBRSxJQUFFLEtBQUssTUFBTSxNQUFJLEtBQUc7QUFBQTtBQUFHLFFBQUksS0FBRSxJQUFJLGtCQUFlLEtBQUUsR0FBRTtBQUFNLE9BQUUsTUFBTSxZQUFVLFdBQVU7QUFBQyxVQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMsWUFBSSxJQUFFLFNBQVE7QUFBZSxhQUFFLElBQUU7QUFBRSxZQUFHO0FBQUMsYUFBRSxNQUFHLEtBQUcsR0FBRSxZQUFZLFFBQU8sTUFBRSxPQUFHLEtBQUU7QUFBQSxpQkFBWSxHQUFOO0FBQVMsZ0JBQU0sR0FBRSxZQUFZLE9BQU07QUFBQTtBQUFBO0FBQVMsYUFBRTtBQUFBO0FBQUksU0FBRSxTQUFTLEdBQUU7QUFBQyxXQUFFO0FBQUUsWUFBSSxNQUFFLE1BQUcsR0FBRSxZQUFZO0FBQUE7QUFBUSxTQUFFLFNBQVMsR0FBRSxHQUFFO0FBQUMsV0FDdGYsR0FBRSxXQUFVO0FBQUMsVUFBRSxTQUFRO0FBQUEsU0FBaUI7QUFBQTtBQUFJLFNBQUUsV0FBVTtBQUFDLFNBQUU7QUFBRyxXQUFFO0FBQUE7QUFBQTtBQUFJLGNBQVcsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBTyxNQUFFLEtBQUs7QUFBRztBQUFFLGlCQUFPO0FBQUMsWUFBSSxJQUFFLElBQUUsTUFBSSxHQUFFLElBQUUsRUFBRTtBQUFHLFlBQUcsQUFBUyxNQUFULFVBQVksSUFBRSxHQUFFLEdBQUU7QUFBRyxZQUFFLEtBQUcsR0FBRSxFQUFFLEtBQUcsR0FBRSxJQUFFO0FBQUE7QUFBTztBQUFBO0FBQUE7QUFBUyxjQUFXLEdBQUU7QUFBQyxRQUFFLEVBQUU7QUFBRyxXQUFPLEFBQVMsTUFBVCxTQUFXLE9BQUs7QUFBQTtBQUNoUCxjQUFXLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFHLFFBQUcsQUFBUyxNQUFULFFBQVc7QUFBQyxVQUFJLElBQUUsRUFBRTtBQUFNLFVBQUcsTUFBSSxHQUFFO0FBQUMsVUFBRSxLQUFHO0FBQUU7QUFBRSxtQkFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sSUFBRSxLQUFHO0FBQUMsZ0JBQUksS0FBRSxJQUFHLEtBQUUsS0FBRyxHQUFFLEtBQUUsRUFBRSxLQUFHLEtBQUUsS0FBRSxHQUFFLEtBQUUsRUFBRTtBQUFHLGdCQUFHLEFBQVMsT0FBVCxVQUFZLElBQUUsR0FBRSxJQUFFO0FBQUcsY0FBUyxPQUFULFVBQVksSUFBRSxHQUFFLElBQUUsTUFBSSxHQUFFLEtBQUcsSUFBRSxFQUFFLE1BQUcsR0FBRSxJQUFFLE1BQUksR0FBRSxLQUFHLElBQUUsRUFBRSxNQUFHLEdBQUUsSUFBRTtBQUFBLHFCQUFXLEFBQVMsT0FBVCxVQUFZLElBQUUsR0FBRSxJQUFFO0FBQUcsZ0JBQUUsS0FBRyxJQUFFLEVBQUUsTUFBRyxHQUFFLElBQUU7QUFBQTtBQUFPO0FBQUE7QUFBQTtBQUFTLGFBQU87QUFBQTtBQUFFLFdBQU87QUFBQTtBQUFLLGNBQVcsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsWUFBVSxFQUFFO0FBQVUsV0FBTyxBQUFJLE1BQUosSUFBTSxJQUFFLEVBQUUsS0FBRyxFQUFFO0FBQUE7QUFBRyxNQUFJLEtBQUUsSUFBRyxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsTUFBSyxLQUFFLEdBQUUsS0FBRSxPQUFHLEtBQUUsT0FBRyxLQUFFO0FBQ2phLGNBQVcsR0FBRTtBQUFDLGFBQVEsSUFBRSxHQUFFLEtBQUcsQUFBTyxNQUFQLFFBQVU7QUFBQyxVQUFHLEFBQU8sRUFBRSxhQUFUO0FBQWtCLFdBQUU7QUFBQSxlQUFXLEVBQUUsYUFBVztBQUFFLFdBQUUsS0FBRyxFQUFFLFlBQVUsRUFBRSxnQkFBZSxHQUFFLElBQUU7QUFBQTtBQUFRO0FBQU0sVUFBRSxHQUFFO0FBQUE7QUFBQTtBQUFJLGNBQVcsR0FBRTtBQUFDLFNBQUU7QUFBRyxPQUFFO0FBQUcsUUFBRyxDQUFDO0FBQUUsVUFBRyxBQUFPLEdBQUUsUUFBVDtBQUFZLGFBQUUsTUFBRyxHQUFFO0FBQUEsV0FBTztBQUFDLFlBQUksSUFBRSxHQUFFO0FBQUcsUUFBTyxNQUFQLFFBQVUsR0FBRSxJQUFFLEVBQUUsWUFBVTtBQUFBO0FBQUE7QUFDdFAsY0FBVyxHQUFFLEdBQUU7QUFBQyxTQUFFO0FBQUcsVUFBSSxNQUFFLE9BQUc7QUFBSyxTQUFFO0FBQUcsUUFBSSxJQUFFO0FBQUUsUUFBRztBQUFDLFNBQUU7QUFBRyxXQUFJLEtBQUUsR0FBRSxLQUFHLEFBQU8sT0FBUCxRQUFXLEVBQUUsSUFBRSxpQkFBZSxNQUFJLEtBQUcsQ0FBQyxTQUFRLDJCQUF5QjtBQUFDLFlBQUksSUFBRSxHQUFFO0FBQVMsWUFBRyxBQUFhLE9BQU8sTUFBcEIsWUFBc0I7QUFBQyxhQUFFLFdBQVM7QUFBSyxlQUFFLEdBQUU7QUFBYyxjQUFJLElBQUUsRUFBRSxHQUFFLGtCQUFnQjtBQUFHLGNBQUUsU0FBUTtBQUFlLFVBQWEsT0FBTyxNQUFwQixhQUFzQixHQUFFLFdBQVMsSUFBRSxPQUFJLEdBQUUsT0FBSSxHQUFFO0FBQUcsYUFBRTtBQUFBO0FBQVEsYUFBRTtBQUFHLGFBQUUsR0FBRTtBQUFBO0FBQUcsVUFBRyxBQUFPLE9BQVA7QUFBUyxZQUFJLEtBQUU7QUFBQSxXQUFPO0FBQUMsWUFBSSxLQUFFLEdBQUU7QUFBRyxRQUFPLE9BQVAsUUFBVSxHQUFFLElBQUUsR0FBRSxZQUFVO0FBQUcsYUFBRTtBQUFBO0FBQUcsYUFBTztBQUFBLGNBQUU7QUFBUSxXQUFFLE1BQUssS0FBRSxHQUFFLEtBQUU7QUFBQTtBQUFBO0FBQUksTUFBSSxLQUFFO0FBQUUsbUNBQThCO0FBQ3RlLHdDQUFtQztBQUFFLGtDQUE2QjtBQUFFLHFDQUFnQztBQUFFLGdDQUEyQjtBQUFLLDJDQUFzQztBQUFFLHFDQUFnQyxTQUFTLEdBQUU7QUFBQyxNQUFFLFdBQVM7QUFBQTtBQUFNLHdDQUFtQyxXQUFVO0FBQUMsVUFBRyxNQUFJLE1BQUUsTUFBRyxHQUFFO0FBQUE7QUFBSyw4Q0FBeUMsV0FBVTtBQUFDLFdBQU87QUFBQTtBQUFHLDJDQUFzQyxXQUFVO0FBQUMsV0FBTyxHQUFFO0FBQUE7QUFDcGEsMkJBQXNCLFNBQVMsR0FBRTtBQUFDLFlBQU87QUFBQSxXQUFRO0FBQUEsV0FBTztBQUFBLFdBQU87QUFBRSxZQUFJLElBQUU7QUFBRTtBQUFBO0FBQWMsWUFBRTtBQUFBO0FBQUUsUUFBSSxJQUFFO0FBQUUsU0FBRTtBQUFFLFFBQUc7QUFBQyxhQUFPO0FBQUEsY0FBSTtBQUFRLFdBQUU7QUFBQTtBQUFBO0FBQUkscUNBQWdDLFdBQVU7QUFBQTtBQUFHLG1DQUE4QjtBQUFFLHNDQUFpQyxTQUFTLEdBQUUsR0FBRTtBQUFDLFlBQU87QUFBQSxXQUFRO0FBQUEsV0FBTztBQUFBLFdBQU87QUFBQSxXQUFPO0FBQUEsV0FBTztBQUFFO0FBQUE7QUFBYyxZQUFFO0FBQUE7QUFBRSxRQUFJLElBQUU7QUFBRSxTQUFFO0FBQUUsUUFBRztBQUFDLGFBQU87QUFBQSxjQUFJO0FBQVEsV0FBRTtBQUFBO0FBQUE7QUFDcFcsdUNBQWtDLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsU0FBUTtBQUFlLElBQVcsT0FBTyxNQUFsQixZQUFxQixBQUFPLE1BQVAsT0FBVSxLQUFFLEVBQUUsT0FBTSxJQUFFLEFBQVcsT0FBTyxNQUFsQixZQUFxQixJQUFFLElBQUUsSUFBRSxJQUFFLEtBQUcsSUFBRTtBQUFFLFlBQU87QUFBQSxXQUFRO0FBQUUsWUFBSSxJQUFFO0FBQUc7QUFBQSxXQUFXO0FBQUUsWUFBRTtBQUFJO0FBQUEsV0FBVztBQUFFLFlBQUU7QUFBVztBQUFBLFdBQVc7QUFBRSxZQUFFO0FBQUk7QUFBQTtBQUFjLFlBQUU7QUFBQTtBQUFJLFFBQUUsSUFBRTtBQUFFLFFBQUUsRUFBQyxJQUFHLE1BQUksVUFBUyxHQUFFLGVBQWMsR0FBRSxXQUFVLEdBQUUsZ0JBQWUsR0FBRSxXQUFVO0FBQUksUUFBRSxJQUFHLEdBQUUsWUFBVSxHQUFFLEdBQUUsSUFBRSxJQUFHLEFBQU8sR0FBRSxRQUFULFFBQWEsTUFBSSxHQUFFLE9BQUssTUFBRSxPQUFJLEtBQUUsTUFBRyxHQUFFLElBQUUsSUFBRSxPQUFNLEdBQUUsWUFBVSxHQUFFLEdBQUUsSUFBRSxJQUFHLE1BQUcsTUFBSSxNQUFFLE1BQUcsR0FBRTtBQUFLLFdBQU87QUFBQTtBQUMxZCxtQ0FBOEIsU0FBUyxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUUsV0FBTyxXQUFVO0FBQUMsVUFBSSxJQUFFO0FBQUUsV0FBRTtBQUFFLFVBQUc7QUFBQyxlQUFPLEVBQUUsTUFBTSxNQUFLO0FBQUEsZ0JBQVc7QUFBUSxhQUFFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUNqQmxGO0FBQ3pDc0Isd0NBQWlCdEI7QUFBQUE7Ozs7Ozs7OztBQ1FOLElBQUksS0FBR0EsNkJBQWlCdUIsTUFBRUMsa0NBQXlCLElBQUVDO0FBQXFCLFdBQVcsR0FBRTtBQUFDLFdBQVEsSUFBRSwyREFBeUQsR0FBRSxJQUFFLEdBQUUsSUFBRSxVQUFVLFFBQU87QUFBSSxTQUFHLGFBQVcsbUJBQW1CLFVBQVU7QUFBSSxTQUFNLDJCQUF5QixJQUFFLGFBQVcsSUFBRTtBQUFBO0FBQWlILElBQUcsQ0FBQztBQUFHLFFBQU0sTUFBTSxFQUFFO0FBQU0sSUFBSSxLQUFHLElBQUksT0FBSSxLQUFHO0FBQUcsY0FBWSxHQUFFLEdBQUU7QUFBQyxLQUFHLEdBQUU7QUFBRyxLQUFHLElBQUUsV0FBVTtBQUFBO0FBQzNlLFlBQVksR0FBRSxHQUFFO0FBQUMsS0FBRyxLQUFHO0FBQUUsT0FBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU87QUFBSSxPQUFHLElBQUksRUFBRTtBQUFBO0FBQ3pELElBQUksS0FBRyxDQUFFLENBQWMsT0FBTyxXQUFyQixlQUE2QixBQUFjLE9BQU8sT0FBTyxhQUE1QixlQUFzQyxBQUFjLE9BQU8sT0FBTyxTQUFTLGtCQUFyQyxjQUFvRCxLQUFHLCtWQUE4VixLQUFHLE9BQU8sVUFBVSxnQkFDcmZDLE9BQUcsSUFBRyxLQUFHO0FBQUcsWUFBWSxHQUFFO0FBQUMsTUFBRyxHQUFHLEtBQUssSUFBRztBQUFHLFdBQU07QUFBRyxNQUFHLEdBQUcsS0FBS0EsTUFBRztBQUFHLFdBQU07QUFBRyxNQUFHLEdBQUcsS0FBSztBQUFHLFdBQU8sR0FBRyxLQUFHO0FBQUdBLE9BQUcsS0FBRztBQUFHLFNBQU07QUFBQTtBQUFHLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUcsQUFBTyxNQUFQLFFBQVUsQUFBSSxFQUFFLFNBQU47QUFBVyxXQUFNO0FBQUcsVUFBTyxPQUFPO0FBQUEsU0FBUTtBQUFBLFNBQWdCO0FBQVMsYUFBTTtBQUFBLFNBQVE7QUFBVSxVQUFHO0FBQUUsZUFBTTtBQUFHLFVBQUcsQUFBTyxNQUFQO0FBQVMsZUFBTSxDQUFDLEVBQUU7QUFBZ0IsVUFBRSxFQUFFLGNBQWMsTUFBTSxHQUFFO0FBQUcsYUFBTSxBQUFVLE1BQVYsV0FBYSxBQUFVLE1BQVY7QUFBQTtBQUFvQixhQUFNO0FBQUE7QUFBQTtBQUN6WCxZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFHLEFBQU8sTUFBUCxRQUFVLEFBQWMsT0FBTyxNQUFyQixlQUF3QixHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUcsV0FBTTtBQUFHLE1BQUc7QUFBRSxXQUFNO0FBQUcsTUFBRyxBQUFPLE1BQVA7QUFBUyxZQUFPLEVBQUU7QUFBQSxXQUFXO0FBQUUsZUFBTSxDQUFDO0FBQUEsV0FBTztBQUFFLGVBQU0sQUFBSyxNQUFMO0FBQUEsV0FBWTtBQUFFLGVBQU8sTUFBTTtBQUFBLFdBQVE7QUFBRSxlQUFPLE1BQU0sTUFBSSxJQUFFO0FBQUE7QUFBRSxTQUFNO0FBQUE7QUFBRyxXQUFXLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFFLElBQUU7QUFBQyxPQUFLLGtCQUFnQixBQUFJLE1BQUosS0FBTyxBQUFJLE1BQUosS0FBTyxBQUFJLE1BQUo7QUFBTSxPQUFLLGdCQUFjO0FBQUUsT0FBSyxxQkFBbUI7QUFBRSxPQUFLLGtCQUFnQjtBQUFFLE9BQUssZUFBYTtBQUFFLE9BQUssT0FBSztBQUFFLE9BQUssY0FBWTtBQUFFLE9BQUssb0JBQWtCO0FBQUE7QUFBRSxJQUFJLElBQUU7QUFDbmIsdUlBQXVJLE1BQU0sS0FBSyxRQUFRLFNBQVMsR0FBRTtBQUFDLElBQUUsS0FBRyxJQUFJLEVBQUUsR0FBRSxHQUFFLE9BQUcsR0FBRSxNQUFLLE9BQUc7QUFBQTtBQUFNLENBQUMsQ0FBQyxpQkFBZ0IsbUJBQWtCLENBQUMsYUFBWSxVQUFTLENBQUMsV0FBVSxRQUFPLENBQUMsYUFBWSxlQUFlLFFBQVEsU0FBUyxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUU7QUFBRyxJQUFFLEtBQUcsSUFBSSxFQUFFLEdBQUUsR0FBRSxPQUFHLEVBQUUsSUFBRyxNQUFLLE9BQUc7QUFBQTtBQUFNLENBQUMsbUJBQWtCLGFBQVksY0FBYSxTQUFTLFFBQVEsU0FBUyxHQUFFO0FBQUMsSUFBRSxLQUFHLElBQUksRUFBRSxHQUFFLEdBQUUsT0FBRyxFQUFFLGVBQWMsTUFBSyxPQUFHO0FBQUE7QUFDdmUsQ0FBQyxlQUFjLDZCQUE0QixhQUFZLGlCQUFpQixRQUFRLFNBQVMsR0FBRTtBQUFDLElBQUUsS0FBRyxJQUFJLEVBQUUsR0FBRSxHQUFFLE9BQUcsR0FBRSxNQUFLLE9BQUc7QUFBQTtBQUFNLDhPQUE4TyxNQUFNLEtBQUssUUFBUSxTQUFTLEdBQUU7QUFBQyxJQUFFLEtBQUcsSUFBSSxFQUFFLEdBQUUsR0FBRSxPQUFHLEVBQUUsZUFBYyxNQUFLLE9BQUc7QUFBQTtBQUNyYixDQUFDLFdBQVUsWUFBVyxTQUFRLFlBQVksUUFBUSxTQUFTLEdBQUU7QUFBQyxJQUFFLEtBQUcsSUFBSSxFQUFFLEdBQUUsR0FBRSxNQUFHLEdBQUUsTUFBSyxPQUFHO0FBQUE7QUFBTSxDQUFDLFdBQVUsWUFBWSxRQUFRLFNBQVMsR0FBRTtBQUFDLElBQUUsS0FBRyxJQUFJLEVBQUUsR0FBRSxHQUFFLE9BQUcsR0FBRSxNQUFLLE9BQUc7QUFBQTtBQUFNLENBQUMsUUFBTyxRQUFPLFFBQU8sUUFBUSxRQUFRLFNBQVMsR0FBRTtBQUFDLElBQUUsS0FBRyxJQUFJLEVBQUUsR0FBRSxHQUFFLE9BQUcsR0FBRSxNQUFLLE9BQUc7QUFBQTtBQUFNLENBQUMsV0FBVSxTQUFTLFFBQVEsU0FBUyxHQUFFO0FBQUMsSUFBRSxLQUFHLElBQUksRUFBRSxHQUFFLEdBQUUsT0FBRyxFQUFFLGVBQWMsTUFBSyxPQUFHO0FBQUE7QUFBTSxJQUFJLEtBQUc7QUFBZ0IsWUFBWSxHQUFFO0FBQUMsU0FBTyxFQUFFLEdBQUc7QUFBQTtBQUMzWSwwakNBQTBqQyxNQUFNLEtBQUssUUFBUSxTQUFTLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRSxRQUFRLElBQ3ptQztBQUFJLElBQUUsS0FBRyxJQUFJLEVBQUUsR0FBRSxHQUFFLE9BQUcsR0FBRSxNQUFLLE9BQUc7QUFBQTtBQUFNLDJFQUEyRSxNQUFNLEtBQUssUUFBUSxTQUFTLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRSxRQUFRLElBQUc7QUFBSSxJQUFFLEtBQUcsSUFBSSxFQUFFLEdBQUUsR0FBRSxPQUFHLEdBQUUsZ0NBQStCLE9BQUc7QUFBQTtBQUFNLENBQUMsWUFBVyxZQUFXLGFBQWEsUUFBUSxTQUFTLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRSxRQUFRLElBQUc7QUFBSSxJQUFFLEtBQUcsSUFBSSxFQUFFLEdBQUUsR0FBRSxPQUFHLEdBQUUsd0NBQXVDLE9BQUc7QUFBQTtBQUFNLENBQUMsWUFBVyxlQUFlLFFBQVEsU0FBUyxHQUFFO0FBQUMsSUFBRSxLQUFHLElBQUksRUFBRSxHQUFFLEdBQUUsT0FBRyxFQUFFLGVBQWMsTUFBSyxPQUFHO0FBQUE7QUFDL2MsRUFBRSxZQUFVLElBQUksRUFBRSxhQUFZLEdBQUUsT0FBRyxjQUFhLGdDQUErQixNQUFHO0FBQUksQ0FBQyxPQUFNLFFBQU8sVUFBUyxjQUFjLFFBQVEsU0FBUyxHQUFFO0FBQUMsSUFBRSxLQUFHLElBQUksRUFBRSxHQUFFLEdBQUUsT0FBRyxFQUFFLGVBQWMsTUFBSyxNQUFHO0FBQUE7QUFDekwsWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUUsZUFBZSxLQUFHLEVBQUUsS0FBRztBQUFLLE1BQUksS0FBRSxBQUFPLE1BQVAsT0FBUyxBQUFJLEVBQUUsU0FBTixJQUFXLElBQUUsUUFBRyxDQUFFLEtBQUUsRUFBRSxXQUFTLEFBQU0sRUFBRSxPQUFSLE9BQVksQUFBTSxFQUFFLE9BQVIsT0FBWSxBQUFNLEVBQUUsT0FBUixPQUFZLEFBQU0sRUFBRSxPQUFSLE1BQVcsUUFBRztBQUFHLFFBQUksSUFBRyxHQUFFLEdBQUUsR0FBRSxNQUFLLEtBQUUsT0FBTSxLQUFHLEFBQU8sTUFBUCxPQUFTLEdBQUcsTUFBSyxDQUFPLE1BQVAsT0FBUyxFQUFFLGdCQUFnQixLQUFHLEVBQUUsYUFBYSxHQUFFLEtBQUcsTUFBSSxFQUFFLGtCQUFnQixFQUFFLEVBQUUsZ0JBQWMsQUFBTyxNQUFQLE9BQVMsQUFBSSxFQUFFLFNBQU4sSUFBVyxRQUFHLEtBQUcsSUFBRyxLQUFFLEVBQUUsZUFBYyxJQUFFLEVBQUUsb0JBQW1CLEFBQU8sTUFBUCxPQUFTLEVBQUUsZ0JBQWdCLEtBQUksS0FBRSxFQUFFLE1BQUssSUFBRSxBQUFJLE1BQUosS0FBTyxBQUFJLE1BQUosS0FBTyxBQUFLLE1BQUwsT0FBTyxLQUFHLEtBQUcsR0FBRSxJQUFFLEVBQUUsZUFBZSxHQUFFLEdBQUUsS0FBRyxFQUFFLGFBQWEsR0FBRTtBQUFBO0FBQzVkLElBQUksS0FBRyxHQUFHLG9EQUFtRCxLQUFHLE9BQU0sS0FBRyxPQUFNLEtBQUcsT0FBTSxLQUFHLE9BQU0sS0FBRyxPQUFNLEtBQUcsT0FBTSxLQUFHLE9BQU0sS0FBRyxPQUFNLEtBQUcsT0FBTSxLQUFHLE9BQU0sS0FBRyxPQUFNLEtBQUcsT0FBTSxLQUFHLE9BQU0sS0FBRyxPQUFNLEtBQUcsT0FBTSxLQUFHLE9BQU0sS0FBRztBQUNoTixJQUFHLEFBQWEsT0FBTyxXQUFwQixjQUE0QixPQUFPLEtBQUk7QUFBQyxNQUFJLElBQUUsT0FBTztBQUFJLE9BQUcsRUFBRTtBQUFpQixPQUFHLEVBQUU7QUFBZ0IsT0FBRyxFQUFFO0FBQWtCLE9BQUcsRUFBRTtBQUFxQixPQUFHLEVBQUU7QUFBa0IsT0FBRyxFQUFFO0FBQWtCLE9BQUcsRUFBRTtBQUFpQixPQUFHLEVBQUU7QUFBcUIsT0FBRyxFQUFFO0FBQWtCLE9BQUcsRUFBRTtBQUF1QixPQUFHLEVBQUU7QUFBYyxPQUFHLEVBQUU7QUFBYyxPQUFHLEVBQUU7QUFBZSxJQUFFO0FBQWUsT0FBRyxFQUFFO0FBQW1CLE9BQUcsRUFBRTtBQUEwQixPQUFHLEVBQUU7QUFBbUIsT0FBRyxFQUFFO0FBQUE7QUFDeGMsSUFBSSxLQUFHLEFBQWEsT0FBTyxXQUFwQixjQUE0QixPQUFPO0FBQVMsWUFBWSxHQUFFO0FBQUMsTUFBRyxBQUFPLE1BQVAsUUFBVSxBQUFXLE9BQU8sTUFBbEI7QUFBb0IsV0FBTztBQUFLLE1BQUUsTUFBSSxFQUFFLE9BQUssRUFBRTtBQUFjLFNBQU0sQUFBYSxPQUFPLE1BQXBCLGFBQXNCLElBQUU7QUFBQTtBQUFLLElBQUk7QUFBRyxZQUFZLEdBQUU7QUFBQyxNQUFHLEFBQVMsT0FBVDtBQUFZLFFBQUc7QUFBQyxZQUFNO0FBQUEsYUFBZSxHQUFOO0FBQVMsVUFBSSxJQUFFLEVBQUUsTUFBTSxPQUFPLE1BQU07QUFBZ0IsV0FBRyxLQUFHLEVBQUUsTUFBSTtBQUFBO0FBQUcsU0FBTSxPQUFLLEtBQUc7QUFBQTtBQUFFLElBQUksS0FBRztBQUNqVSxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUcsQ0FBQyxLQUFHO0FBQUcsV0FBTTtBQUFHLE9BQUc7QUFBRyxNQUFJLElBQUUsTUFBTTtBQUFrQixRQUFNLG9CQUFrQjtBQUFPLE1BQUc7QUFBQyxRQUFHO0FBQUUsVUFBRyxJQUFFLFdBQVU7QUFBQyxjQUFNO0FBQUEsU0FBVSxPQUFPLGVBQWUsRUFBRSxXQUFVLFNBQVEsRUFBQyxLQUFJLFdBQVU7QUFBQyxjQUFNO0FBQUEsWUFBWSxBQUFXLE9BQU8sWUFBbEIsWUFBMkIsUUFBUSxXQUFVO0FBQUMsWUFBRztBQUFDLGtCQUFRLFVBQVUsR0FBRTtBQUFBLGlCQUFVLEdBQU47QUFBUyxjQUFJLElBQUU7QUFBQTtBQUFFLGdCQUFRLFVBQVUsR0FBRSxJQUFHO0FBQUEsYUFBTztBQUFDLFlBQUc7QUFBQyxZQUFFO0FBQUEsaUJBQWEsR0FBTjtBQUFTLGNBQUU7QUFBQTtBQUFFLFVBQUUsS0FBSyxFQUFFO0FBQUE7QUFBQSxTQUFlO0FBQUMsVUFBRztBQUFDLGNBQU07QUFBQSxlQUFlLEdBQU47QUFBUyxZQUFFO0FBQUE7QUFBRTtBQUFBO0FBQUEsV0FBVyxHQUFOO0FBQVMsUUFBRyxLQUFHLEtBQUcsQUFBVyxPQUFPLEVBQUUsVUFBcEIsVUFBMEI7QUFBQyxlQUFRLElBQUUsRUFBRSxNQUFNLE1BQU0sT0FDbmYsS0FBRSxFQUFFLE1BQU0sTUFBTSxPQUFNLEtBQUUsRUFBRSxTQUFPLEdBQUUsS0FBRSxHQUFFLFNBQU8sR0FBRSxLQUFHLE1BQUcsS0FBRyxNQUFHLEVBQUUsUUFBSyxHQUFFO0FBQUk7QUFBSSxhQUFLLEtBQUcsTUFBRyxLQUFHLElBQUUsTUFBSTtBQUFJLFlBQUcsRUFBRSxRQUFLLEdBQUUsS0FBRztBQUFDLGNBQUcsQUFBSSxPQUFKLEtBQU8sQUFBSSxPQUFKLEdBQU07QUFBQztBQUFHLGtCQUFHLE1BQUksTUFBSSxJQUFFLE1BQUcsRUFBRSxRQUFLLEdBQUU7QUFBRyx1QkFBTSxPQUFLLEVBQUUsSUFBRyxRQUFRLFlBQVc7QUFBQSxtQkFBYyxLQUFHLE1BQUcsS0FBRztBQUFBO0FBQUc7QUFBQTtBQUFBO0FBQUEsWUFBUTtBQUFRLFNBQUcsT0FBRyxNQUFNLG9CQUFrQjtBQUFBO0FBQUUsU0FBTyxLQUFFLElBQUUsRUFBRSxlQUFhLEVBQUUsT0FBSyxNQUFJLEdBQUcsS0FBRztBQUFBO0FBQzdULFlBQVksR0FBRTtBQUFDLFVBQU8sRUFBRTtBQUFBLFNBQVU7QUFBRSxhQUFPLEdBQUcsRUFBRTtBQUFBLFNBQVc7QUFBRyxhQUFPLEdBQUc7QUFBQSxTQUFhO0FBQUcsYUFBTyxHQUFHO0FBQUEsU0FBaUI7QUFBRyxhQUFPLEdBQUc7QUFBQSxTQUFxQjtBQUFBLFNBQU87QUFBQSxTQUFPO0FBQUcsYUFBTyxJQUFFLEdBQUcsRUFBRSxNQUFLLFFBQUk7QUFBQSxTQUFPO0FBQUcsYUFBTyxJQUFFLEdBQUcsRUFBRSxLQUFLLFFBQU8sUUFBSTtBQUFBLFNBQU87QUFBRyxhQUFPLElBQUUsR0FBRyxFQUFFLEtBQUssU0FBUSxRQUFJO0FBQUEsU0FBTztBQUFFLGFBQU8sSUFBRSxHQUFHLEVBQUUsTUFBSyxPQUFJO0FBQUE7QUFBVSxhQUFNO0FBQUE7QUFBQTtBQUM5VCxZQUFZLEdBQUU7QUFBQyxNQUFHLEFBQU0sS0FBTjtBQUFRLFdBQU87QUFBSyxNQUFHLEFBQWEsT0FBTyxNQUFwQjtBQUFzQixXQUFPLEVBQUUsZUFBYSxFQUFFLFFBQU07QUFBSyxNQUFHLEFBQVcsT0FBTyxNQUFsQjtBQUFvQixXQUFPO0FBQUUsVUFBTztBQUFBLFNBQVE7QUFBRyxhQUFNO0FBQUEsU0FBZ0I7QUFBRyxhQUFNO0FBQUEsU0FBYztBQUFHLGFBQU07QUFBQSxTQUFnQjtBQUFHLGFBQU07QUFBQSxTQUFrQjtBQUFHLGFBQU07QUFBQSxTQUFnQjtBQUFHLGFBQU07QUFBQTtBQUFlLE1BQUcsQUFBVyxPQUFPLE1BQWxCO0FBQW9CLFlBQU8sRUFBRTtBQUFBLFdBQWU7QUFBRyxlQUFPLEdBQUUsZUFBYSxhQUFXO0FBQUEsV0FBaUI7QUFBRyxlQUFPLEdBQUUsU0FBUyxlQUFhLGFBQVc7QUFBQSxXQUFpQjtBQUFHLFlBQUksSUFBRSxFQUFFO0FBQU8sWUFBRSxFQUFFLGVBQWEsRUFBRSxRQUFNO0FBQ25mLGVBQU8sRUFBRSxlQUFjLENBQUssTUFBTCxLQUFPLGdCQUFjLElBQUUsTUFBSTtBQUFBLFdBQW1CO0FBQUcsZUFBTyxHQUFHLEVBQUU7QUFBQSxXQUFXO0FBQUcsZUFBTyxHQUFHLEVBQUU7QUFBQSxXQUFjO0FBQUcsWUFBRSxFQUFFO0FBQVMsWUFBRSxFQUFFO0FBQU0sWUFBRztBQUFDLGlCQUFPLEdBQUcsRUFBRTtBQUFBLGlCQUFVLEdBQU47QUFBQTtBQUFBO0FBQVcsU0FBTztBQUFBO0FBQUssWUFBWSxHQUFFO0FBQUMsVUFBTyxPQUFPO0FBQUEsU0FBUTtBQUFBLFNBQWU7QUFBQSxTQUFjO0FBQUEsU0FBYztBQUFBLFNBQWM7QUFBWSxhQUFPO0FBQUE7QUFBVSxhQUFNO0FBQUE7QUFBQTtBQUFJLFlBQVksR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFO0FBQUssU0FBTyxLQUFFLEVBQUUsYUFBVyxBQUFVLEVBQUUsa0JBQVosV0FBNEIsQ0FBYSxNQUFiLGNBQWdCLEFBQVUsTUFBVjtBQUFBO0FBQ3BhLFlBQVksR0FBRTtBQUFDLE1BQUksSUFBRSxHQUFHLEtBQUcsWUFBVSxTQUFRLElBQUUsT0FBTyx5QkFBeUIsRUFBRSxZQUFZLFdBQVUsSUFBRyxJQUFFLEtBQUcsRUFBRTtBQUFHLE1BQUcsQ0FBQyxFQUFFLGVBQWUsTUFBSSxBQUFjLE9BQU8sTUFBckIsZUFBd0IsQUFBYSxPQUFPLEVBQUUsUUFBdEIsY0FBMkIsQUFBYSxPQUFPLEVBQUUsUUFBdEIsWUFBMEI7QUFBQyxRQUFJLElBQUUsRUFBRSxLQUFJLEtBQUUsRUFBRTtBQUFJLFdBQU8sZUFBZSxHQUFFLEdBQUUsRUFBQyxjQUFhLE1BQUcsS0FBSSxXQUFVO0FBQUMsYUFBTyxFQUFFLEtBQUs7QUFBQSxPQUFPLEtBQUksU0FBUyxJQUFFO0FBQUMsVUFBRSxLQUFHO0FBQUUsU0FBRSxLQUFLLE1BQUs7QUFBQTtBQUFNLFdBQU8sZUFBZSxHQUFFLEdBQUUsRUFBQyxZQUFXLEVBQUU7QUFBYSxXQUFNLEVBQUMsVUFBUyxXQUFVO0FBQUMsYUFBTztBQUFBLE9BQUcsVUFBUyxTQUFTLElBQUU7QUFBQyxVQUFFLEtBQUc7QUFBQSxPQUFHLGNBQWEsV0FBVTtBQUFDLFFBQUUsZ0JBQ3hmO0FBQUssYUFBTyxFQUFFO0FBQUE7QUFBQTtBQUFBO0FBQU0sWUFBWSxHQUFFO0FBQUMsSUFBRSxpQkFBZ0IsR0FBRSxnQkFBYyxHQUFHO0FBQUE7QUFBSSxZQUFZLEdBQUU7QUFBQyxNQUFHLENBQUM7QUFBRSxXQUFNO0FBQUcsTUFBSSxJQUFFLEVBQUU7QUFBYyxNQUFHLENBQUM7QUFBRSxXQUFNO0FBQUcsTUFBSSxJQUFFLEVBQUU7QUFBVyxNQUFJLElBQUU7QUFBRyxPQUFJLEtBQUUsR0FBRyxLQUFHLEVBQUUsVUFBUSxTQUFPLFVBQVEsRUFBRTtBQUFPLE1BQUU7QUFBRSxTQUFPLE1BQUksSUFBRyxHQUFFLFNBQVMsSUFBRyxRQUFJO0FBQUE7QUFBRyxZQUFZLEdBQUU7QUFBQyxNQUFFLEtBQUksQ0FBYyxPQUFPLGFBQXJCLGNBQThCLFdBQVM7QUFBUSxNQUFHLEFBQWMsT0FBTyxNQUFyQjtBQUF1QixXQUFPO0FBQUssTUFBRztBQUFDLFdBQU8sRUFBRSxpQkFBZSxFQUFFO0FBQUEsV0FBVyxHQUFOO0FBQVMsV0FBTyxFQUFFO0FBQUE7QUFBQTtBQUMvWixZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFO0FBQVEsU0FBT0gsSUFBRSxJQUFHLEdBQUUsRUFBQyxnQkFBZSxRQUFPLGNBQWEsUUFBTyxPQUFNLFFBQU8sU0FBUSxBQUFNLEtBQU4sT0FBUSxJQUFFLEVBQUUsY0FBYztBQUFBO0FBQWlCLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEFBQU0sRUFBRSxnQkFBUixPQUFxQixLQUFHLEVBQUUsY0FBYSxJQUFFLEFBQU0sRUFBRSxXQUFSLE9BQWdCLEVBQUUsVUFBUSxFQUFFO0FBQWUsTUFBRSxHQUFHLEFBQU0sRUFBRSxTQUFSLE9BQWMsRUFBRSxRQUFNO0FBQUcsSUFBRSxnQkFBYyxFQUFDLGdCQUFlLEdBQUUsY0FBYSxHQUFFLFlBQVcsQUFBYSxFQUFFLFNBQWYsY0FBcUIsQUFBVSxFQUFFLFNBQVosVUFBaUIsQUFBTSxFQUFFLFdBQVIsT0FBZ0IsQUFBTSxFQUFFLFNBQVI7QUFBQTtBQUFlLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBRSxFQUFFO0FBQVEsRUFBTSxLQUFOLFFBQVMsR0FBRyxHQUFFLFdBQVUsR0FBRTtBQUFBO0FBQzNkLFlBQVksR0FBRSxHQUFFO0FBQUMsS0FBRyxHQUFFO0FBQUcsTUFBSSxJQUFFLEdBQUcsRUFBRSxRQUFPLElBQUUsRUFBRTtBQUFLLE1BQUcsQUFBTSxLQUFOO0FBQVEsUUFBRyxBQUFXLE1BQVgsVUFBYTtBQUFDLFVBQUcsQUFBSSxNQUFKLEtBQU8sQUFBSyxFQUFFLFVBQVAsTUFBYyxFQUFFLFNBQU87QUFBRSxVQUFFLFFBQU0sS0FBRztBQUFBO0FBQU8sUUFBRSxVQUFRLEtBQUcsS0FBSSxHQUFFLFFBQU0sS0FBRztBQUFBLFdBQVcsQUFBVyxNQUFYLFlBQWMsQUFBVSxNQUFWLFNBQVk7QUFBQyxNQUFFLGdCQUFnQjtBQUFTO0FBQUE7QUFBTyxJQUFFLGVBQWUsV0FBUyxHQUFHLEdBQUUsRUFBRSxNQUFLLEtBQUcsRUFBRSxlQUFlLG1CQUFpQixHQUFHLEdBQUUsRUFBRSxNQUFLLEdBQUcsRUFBRTtBQUFlLEVBQU0sRUFBRSxXQUFSLFFBQWlCLEFBQU0sRUFBRSxrQkFBUixRQUF5QixHQUFFLGlCQUFlLENBQUMsQ0FBQyxFQUFFO0FBQUE7QUFDblosWUFBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUcsRUFBRSxlQUFlLFlBQVUsRUFBRSxlQUFlLGlCQUFnQjtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQUssUUFBRyxDQUFFLENBQVcsTUFBWCxZQUFjLEFBQVUsTUFBVixXQUFhLEFBQVMsRUFBRSxVQUFYLFVBQWtCLEFBQU8sRUFBRSxVQUFUO0FBQWdCO0FBQU8sUUFBRSxLQUFHLEVBQUUsY0FBYztBQUFhLFNBQUcsTUFBSSxFQUFFLFNBQVEsR0FBRSxRQUFNO0FBQUcsTUFBRSxlQUFhO0FBQUE7QUFBRSxNQUFFLEVBQUU7QUFBSyxFQUFLLE1BQUwsTUFBUyxHQUFFLE9BQUs7QUFBSSxJQUFFLGlCQUFlLENBQUMsQ0FBQyxFQUFFLGNBQWM7QUFBZSxFQUFLLE1BQUwsTUFBUyxHQUFFLE9BQUs7QUFBQTtBQUN2VixZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBRyxBQUFXLE1BQVgsWUFBYyxHQUFHLEVBQUUsbUJBQWlCO0FBQUUsSUFBTSxLQUFOLE9BQVEsRUFBRSxlQUFhLEtBQUcsRUFBRSxjQUFjLGVBQWEsRUFBRSxpQkFBZSxLQUFHLEtBQUksR0FBRSxlQUFhLEtBQUc7QUFBQTtBQUFHLFlBQVksR0FBRTtBQUFDLE1BQUksSUFBRTtBQUFHLEtBQUcsU0FBUyxRQUFRLEdBQUUsU0FBUyxJQUFFO0FBQUMsSUFBTSxNQUFOLFFBQVUsTUFBRztBQUFBO0FBQUssU0FBTztBQUFBO0FBQUUsWUFBWSxHQUFFLEdBQUU7QUFBQyxNQUFFQSxJQUFFLEVBQUMsVUFBUyxVQUFRO0FBQUcsTUFBRyxJQUFFLEdBQUcsRUFBRTtBQUFVLE1BQUUsV0FBUztBQUFFLFNBQU87QUFBQTtBQUN2VSxZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLEVBQUU7QUFBUSxNQUFHLEdBQUU7QUFBQyxRQUFFO0FBQUcsYUFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU87QUFBSSxRQUFFLE1BQUksRUFBRSxNQUFJO0FBQUcsU0FBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU87QUFBSSxVQUFFLEVBQUUsZUFBZSxNQUFJLEVBQUUsR0FBRyxRQUFPLEVBQUUsR0FBRyxhQUFXLEtBQUksR0FBRSxHQUFHLFdBQVMsSUFBRyxLQUFHLEtBQUksR0FBRSxHQUFHLGtCQUFnQjtBQUFBLFNBQVE7QUFBQyxRQUFFLEtBQUcsR0FBRztBQUFHLFFBQUU7QUFBSyxTQUFJLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxLQUFJO0FBQUMsVUFBRyxFQUFFLEdBQUcsVUFBUSxHQUFFO0FBQUMsVUFBRSxHQUFHLFdBQVM7QUFBRyxhQUFJLEdBQUUsR0FBRyxrQkFBZ0I7QUFBSTtBQUFBO0FBQU8sTUFBTyxNQUFQLFFBQVUsRUFBRSxHQUFHLFlBQVcsS0FBRSxFQUFFO0FBQUE7QUFBSSxJQUFPLE1BQVAsUUFBVyxHQUFFLFdBQVM7QUFBQTtBQUFBO0FBQ3BZLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBRyxBQUFNLEVBQUUsMkJBQVI7QUFBZ0MsVUFBTSxNQUFNLEVBQUU7QUFBSyxTQUFPQSxJQUFFLElBQUcsR0FBRSxFQUFDLE9BQU0sUUFBTyxjQUFhLFFBQU8sVUFBUyxLQUFHLEVBQUUsY0FBYztBQUFBO0FBQWUsWUFBWSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRTtBQUFNLE1BQUcsQUFBTSxLQUFOLE1BQVE7QUFBQyxRQUFFLEVBQUU7QUFBUyxRQUFFLEVBQUU7QUFBYSxRQUFHLEFBQU0sS0FBTixNQUFRO0FBQUMsVUFBRyxBQUFNLEtBQU47QUFBUSxjQUFNLE1BQU0sRUFBRTtBQUFLLFVBQUcsTUFBTSxRQUFRLElBQUc7QUFBQyxZQUFHLENBQUUsTUFBRyxFQUFFO0FBQVEsZ0JBQU0sTUFBTSxFQUFFO0FBQUssWUFBRSxFQUFFO0FBQUE7QUFBRyxVQUFFO0FBQUE7QUFBRSxJQUFNLEtBQU4sUUFBVSxLQUFFO0FBQUksUUFBRTtBQUFBO0FBQUUsSUFBRSxnQkFBYyxFQUFDLGNBQWEsR0FBRztBQUFBO0FBQy9ZLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEdBQUcsRUFBRSxRQUFPLElBQUUsR0FBRyxFQUFFO0FBQWMsRUFBTSxLQUFOLFFBQVUsS0FBRSxLQUFHLEdBQUUsTUFBSSxFQUFFLFNBQVEsR0FBRSxRQUFNLElBQUcsQUFBTSxFQUFFLGdCQUFSLFFBQXNCLEVBQUUsaUJBQWUsS0FBSSxHQUFFLGVBQWE7QUFBSSxFQUFNLEtBQU4sUUFBVSxHQUFFLGVBQWEsS0FBRztBQUFBO0FBQUcsWUFBWSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUU7QUFBWSxRQUFJLEVBQUUsY0FBYyxnQkFBYyxBQUFLLE1BQUwsTUFBUSxBQUFPLE1BQVAsUUFBVyxHQUFFLFFBQU07QUFBQTtBQUFHLElBQUksS0FBRyxFQUFDLE1BQUssZ0NBQStCLFFBQU8sc0NBQXFDLEtBQUk7QUFDOVgsWUFBWSxHQUFFO0FBQUMsVUFBTztBQUFBLFNBQVE7QUFBTSxhQUFNO0FBQUEsU0FBa0M7QUFBTyxhQUFNO0FBQUE7QUFBNkMsYUFBTTtBQUFBO0FBQUE7QUFBZ0MsWUFBWSxHQUFFLEdBQUU7QUFBQyxTQUFPLEFBQU0sS0FBTixRQUFTLEFBQWlDLE1BQWpDLGlDQUFtQyxHQUFHLEtBQUcsQUFBK0IsTUFBL0IsZ0NBQWtDLEFBQWtCLE1BQWxCLGtCQUFvQixpQ0FBK0I7QUFBQTtBQUMzVSxJQUFJLElBQUcsS0FBRyxTQUFTLEdBQUU7QUFBQyxTQUFNLEFBQWMsT0FBTyxVQUFyQixlQUE0QixNQUFNLDBCQUF3QixTQUFTLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxVQUFNLHdCQUF3QixXQUFVO0FBQUMsYUFBTyxFQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUE7QUFBQSxNQUFNO0FBQUEsRUFBRyxTQUFTLEdBQUUsR0FBRTtBQUFDLE1BQUcsRUFBRSxpQkFBZSxHQUFHLE9BQUssZUFBYztBQUFFLE1BQUUsWUFBVTtBQUFBLE9BQU07QUFBQyxTQUFHLE1BQUksU0FBUyxjQUFjO0FBQU8sT0FBRyxZQUFVLFVBQVEsRUFBRSxVQUFVLGFBQVc7QUFBUyxTQUFJLElBQUUsR0FBRyxZQUFXLEVBQUU7QUFBWSxRQUFFLFlBQVksRUFBRTtBQUFZLFdBQUssRUFBRTtBQUFZLFFBQUUsWUFBWSxFQUFFO0FBQUE7QUFBQTtBQUNqYixZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUcsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQVcsUUFBRyxLQUFHLE1BQUksRUFBRSxhQUFXLEFBQUksRUFBRSxhQUFOLEdBQWU7QUFBQyxRQUFFLFlBQVU7QUFBRTtBQUFBO0FBQUE7QUFBUSxJQUFFLGNBQVk7QUFBQTtBQUNySCxJQUFJLEtBQUc7QUFBQSxFQUFDLHlCQUF3QjtBQUFBLEVBQUcsbUJBQWtCO0FBQUEsRUFBRyxrQkFBaUI7QUFBQSxFQUFHLGtCQUFpQjtBQUFBLEVBQUcsU0FBUTtBQUFBLEVBQUcsY0FBYTtBQUFBLEVBQUcsaUJBQWdCO0FBQUEsRUFBRyxhQUFZO0FBQUEsRUFBRyxTQUFRO0FBQUEsRUFBRyxNQUFLO0FBQUEsRUFBRyxVQUFTO0FBQUEsRUFBRyxjQUFhO0FBQUEsRUFBRyxZQUFXO0FBQUEsRUFBRyxjQUFhO0FBQUEsRUFBRyxXQUFVO0FBQUEsRUFBRyxVQUFTO0FBQUEsRUFBRyxTQUFRO0FBQUEsRUFBRyxZQUFXO0FBQUEsRUFBRyxhQUFZO0FBQUEsRUFBRyxjQUFhO0FBQUEsRUFBRyxZQUFXO0FBQUEsRUFBRyxlQUFjO0FBQUEsRUFBRyxnQkFBZTtBQUFBLEVBQUcsaUJBQWdCO0FBQUEsRUFBRyxZQUFXO0FBQUEsRUFBRyxXQUFVO0FBQUEsRUFBRyxZQUFXO0FBQUEsRUFBRyxTQUFRO0FBQUEsRUFBRyxPQUFNO0FBQUEsRUFBRyxTQUFRO0FBQUEsRUFBRyxTQUFRO0FBQUEsRUFBRyxRQUFPO0FBQUEsRUFBRyxRQUFPO0FBQUEsRUFBRyxNQUFLO0FBQUEsRUFBRyxhQUFZO0FBQUEsRUFDMWYsY0FBYTtBQUFBLEVBQUcsYUFBWTtBQUFBLEVBQUcsaUJBQWdCO0FBQUEsRUFBRyxrQkFBaUI7QUFBQSxFQUFHLGtCQUFpQjtBQUFBLEVBQUcsZUFBYztBQUFBLEVBQUcsYUFBWTtBQUFBLEdBQUksS0FBRyxDQUFDLFVBQVMsTUFBSyxPQUFNO0FBQUssT0FBTyxLQUFLLElBQUksUUFBUSxTQUFTLEdBQUU7QUFBQyxLQUFHLFFBQVEsU0FBUyxHQUFFO0FBQUMsUUFBRSxJQUFFLEVBQUUsT0FBTyxHQUFHLGdCQUFjLEVBQUUsVUFBVTtBQUFHLE9BQUcsS0FBRyxHQUFHO0FBQUE7QUFBQTtBQUFPLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxTQUFPLEFBQU0sS0FBTixRQUFTLEFBQVksT0FBTyxNQUFuQixhQUFzQixBQUFLLE1BQUwsS0FBTyxLQUFHLEtBQUcsQUFBVyxPQUFPLE1BQWxCLFlBQXFCLEFBQUksTUFBSixLQUFPLEdBQUcsZUFBZSxNQUFJLEdBQUcsS0FBSSxNQUFHLEdBQUcsU0FBTyxJQUFFO0FBQUE7QUFDOVosWUFBWSxHQUFFLEdBQUU7QUFBQyxNQUFFLEVBQUU7QUFBTSxXQUFRLEtBQUs7QUFBRSxRQUFHLEVBQUUsZUFBZSxJQUFHO0FBQUMsVUFBSSxJQUFFLEFBQUksRUFBRSxRQUFRLFVBQWQsR0FBb0IsSUFBRSxHQUFHLEdBQUUsRUFBRSxJQUFHO0FBQUcsTUFBVSxNQUFWLFdBQWMsS0FBRTtBQUFZLFVBQUUsRUFBRSxZQUFZLEdBQUUsS0FBRyxFQUFFLEtBQUc7QUFBQTtBQUFBO0FBQUcsSUFBSSxLQUFHQSxJQUFFLEVBQUMsVUFBUyxRQUFJLEVBQUMsTUFBSyxNQUFHLE1BQUssTUFBRyxJQUFHLE1BQUcsS0FBSSxNQUFHLE9BQU0sTUFBRyxJQUFHLE1BQUcsS0FBSSxNQUFHLE9BQU0sTUFBRyxRQUFPLE1BQUcsTUFBSyxNQUFHLE1BQUssTUFBRyxPQUFNLE1BQUcsUUFBTyxNQUFHLE9BQU0sTUFBRyxLQUFJO0FBQ2xULFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBRyxHQUFFO0FBQUMsUUFBRyxHQUFHLE1BQUssQ0FBTSxFQUFFLFlBQVIsUUFBa0IsQUFBTSxFQUFFLDJCQUFSO0FBQWlDLFlBQU0sTUFBTSxFQUFFLEtBQUk7QUFBSSxRQUFHLEFBQU0sRUFBRSwyQkFBUixNQUFnQztBQUFDLFVBQUcsQUFBTSxFQUFFLFlBQVI7QUFBaUIsY0FBTSxNQUFNLEVBQUU7QUFBSyxVQUFHLENBQUUsQ0FBVyxPQUFPLEVBQUUsNEJBQXBCLFlBQTZDLFlBQVcsRUFBRTtBQUF5QixjQUFNLE1BQU0sRUFBRTtBQUFBO0FBQU0sUUFBRyxBQUFNLEVBQUUsU0FBUixRQUFlLEFBQVcsT0FBTyxFQUFFLFVBQXBCO0FBQTBCLFlBQU0sTUFBTSxFQUFFO0FBQUE7QUFBQTtBQUM1VixZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUcsQUFBSyxFQUFFLFFBQVEsU0FBZjtBQUFvQixXQUFNLEFBQVcsT0FBTyxFQUFFLE9BQXBCO0FBQXVCLFVBQU87QUFBQSxTQUFRO0FBQUEsU0FBc0I7QUFBQSxTQUFxQjtBQUFBLFNBQWlCO0FBQUEsU0FBcUI7QUFBQSxTQUFxQjtBQUFBLFNBQXdCO0FBQUEsU0FBc0I7QUFBZ0IsYUFBTTtBQUFBO0FBQVcsYUFBTTtBQUFBO0FBQUE7QUFBSSxZQUFZLEdBQUU7QUFBQyxNQUFFLEVBQUUsVUFBUSxFQUFFLGNBQVk7QUFBTyxJQUFFLDJCQUEwQixLQUFFLEVBQUU7QUFBeUIsU0FBTyxBQUFJLEVBQUUsYUFBTixJQUFlLEVBQUUsYUFBVztBQUFBO0FBQUUsSUFBSSxLQUFHLE1BQUssS0FBRyxNQUFLLEtBQUc7QUFDeGIsWUFBWSxHQUFFO0FBQUMsTUFBRyxJQUFFLEdBQUcsSUFBRztBQUFDLFFBQUcsQUFBYSxPQUFPLE9BQXBCO0FBQXVCLFlBQU0sTUFBTSxFQUFFO0FBQU0sUUFBSSxJQUFFLEVBQUU7QUFBVSxTQUFJLEtBQUUsR0FBRyxJQUFHLEdBQUcsRUFBRSxXQUFVLEVBQUUsTUFBSztBQUFBO0FBQUE7QUFBSyxZQUFZLEdBQUU7QUFBQyxPQUFHLEtBQUcsR0FBRyxLQUFLLEtBQUcsS0FBRyxDQUFDLEtBQUcsS0FBRztBQUFBO0FBQUUsY0FBYTtBQUFDLE1BQUcsSUFBRztBQUFDLFFBQUksSUFBRSxJQUFHLElBQUU7QUFBRyxTQUFHLEtBQUc7QUFBSyxPQUFHO0FBQUcsUUFBRztBQUFFLFdBQUksSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPO0FBQUksV0FBRyxFQUFFO0FBQUE7QUFBQTtBQUFLLFlBQVksR0FBRSxHQUFFO0FBQUMsU0FBTyxFQUFFO0FBQUE7QUFBRyxZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFNBQU8sRUFBRSxHQUFFLEdBQUUsR0FBRTtBQUFBO0FBQUcsY0FBYTtBQUFBO0FBQUUsSUFBSSxLQUFHLElBQUcsS0FBRyxPQUFHLEtBQUc7QUFBRyxjQUFhO0FBQUMsTUFBRyxBQUFPLE9BQVAsUUFBVyxBQUFPLE9BQVA7QUFBVSxVQUFLO0FBQUE7QUFDOVosWUFBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUc7QUFBRyxXQUFPLEVBQUUsR0FBRTtBQUFHLE9BQUc7QUFBRyxNQUFHO0FBQUMsV0FBTyxHQUFHLEdBQUUsR0FBRTtBQUFBLFlBQUc7QUFBUSxTQUFHLE9BQUc7QUFBQTtBQUFBO0FBQ2hGLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUU7QUFBVSxNQUFHLEFBQU8sTUFBUDtBQUFTLFdBQU87QUFBSyxNQUFJLElBQUUsR0FBRztBQUFHLE1BQUcsQUFBTyxNQUFQO0FBQVMsV0FBTztBQUFLLE1BQUUsRUFBRTtBQUFHO0FBQUUsWUFBTztBQUFBLFdBQVE7QUFBQSxXQUFlO0FBQUEsV0FBc0I7QUFBQSxXQUFxQjtBQUFBLFdBQTRCO0FBQUEsV0FBbUI7QUFBQSxXQUEwQjtBQUFBLFdBQW1CO0FBQUEsV0FBMEI7QUFBQSxXQUFpQjtBQUFBLFdBQXdCO0FBQWUsUUFBQyxLQUFFLENBQUMsRUFBRSxhQUFZLEtBQUUsRUFBRSxNQUFLLElBQUUsQ0FBRSxDQUFXLE1BQVgsWUFBYyxBQUFVLE1BQVYsV0FBYSxBQUFXLE1BQVgsWUFBYyxBQUFhLE1BQWI7QUFBaUIsWUFBRSxDQUFDO0FBQUU7QUFBQTtBQUFnQixZQUFFO0FBQUE7QUFBRyxNQUFHO0FBQUUsV0FBTztBQUFLLE1BQUcsS0FBRyxBQUN6ZSxPQUFPLE1BRGtlO0FBQ2hlLFVBQU0sTUFBTSxFQUFFLEtBQUksR0FBRSxPQUFPO0FBQUksU0FBTztBQUFBO0FBQUUsSUFBSSxLQUFHO0FBQUcsSUFBRztBQUFHLE1BQUc7QUFBQyxRQUFJLEtBQUc7QUFBRyxXQUFPLGVBQWUsSUFBRyxXQUFVLEVBQUMsS0FBSSxXQUFVO0FBQUMsV0FBRztBQUFBO0FBQU0sV0FBTyxpQkFBaUIsUUFBTyxJQUFHO0FBQUksV0FBTyxvQkFBb0IsUUFBTyxJQUFHO0FBQUEsV0FBVSxHQUFOO0FBQVMsU0FBRztBQUFBO0FBQUcsWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsR0FBRTtBQUFDLE1BQUksS0FBRSxNQUFNLFVBQVUsTUFBTSxLQUFLLFdBQVU7QUFBRyxNQUFHO0FBQUMsTUFBRSxNQUFNLEdBQUU7QUFBQSxXQUFTLElBQU47QUFBUyxTQUFLLFFBQVE7QUFBQTtBQUFBO0FBQUksSUFBSSxLQUFHLE9BQUcsS0FBRyxNQUFLLEtBQUcsT0FBRyxLQUFHLE1BQUssS0FBRyxFQUFDLFNBQVEsU0FBUyxHQUFFO0FBQUMsT0FBRztBQUFHLE9BQUc7QUFBQTtBQUFJLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLEdBQUU7QUFBQyxPQUFHO0FBQUcsT0FBRztBQUFLLEtBQUcsTUFBTSxJQUFHO0FBQUE7QUFDL2QsWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsR0FBRTtBQUFDLEtBQUcsTUFBTSxNQUFLO0FBQVcsTUFBRyxJQUFHO0FBQUMsUUFBRyxJQUFHO0FBQUMsVUFBSSxLQUFFO0FBQUcsV0FBRztBQUFHLFdBQUc7QUFBQTtBQUFVLFlBQU0sTUFBTSxFQUFFO0FBQU0sVUFBSyxNQUFHLE1BQUcsS0FBRztBQUFBO0FBQUE7QUFBSSxZQUFZLEdBQUU7QUFBQyxNQUFJLElBQUUsR0FBRSxJQUFFO0FBQUUsTUFBRyxFQUFFO0FBQVUsV0FBSyxFQUFFO0FBQVEsVUFBRSxFQUFFO0FBQUEsT0FBVztBQUFDLFFBQUU7QUFBRTtBQUFHLFVBQUUsR0FBRSxBQUFLLEdBQUUsUUFBTSxVQUFiLEtBQXFCLEtBQUUsRUFBRSxTQUFRLElBQUUsRUFBRTtBQUFBLFdBQWE7QUFBQTtBQUFHLFNBQU8sQUFBSSxFQUFFLFFBQU4sSUFBVSxJQUFFO0FBQUE7QUFBSyxZQUFZLEdBQUU7QUFBQyxNQUFHLEFBQUssRUFBRSxRQUFQLElBQVc7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFjLElBQU8sTUFBUCxRQUFXLEtBQUUsRUFBRSxXQUFVLEFBQU8sTUFBUCxRQUFXLEtBQUUsRUFBRTtBQUFnQixRQUFHLEFBQU8sTUFBUDtBQUFTLGFBQU8sRUFBRTtBQUFBO0FBQVcsU0FBTztBQUFBO0FBQUssWUFBWSxHQUFFO0FBQUMsTUFBRyxHQUFHLE9BQUs7QUFBRSxVQUFNLE1BQU0sRUFBRTtBQUFBO0FBQzNlLFlBQVksR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFO0FBQVUsTUFBRyxDQUFDLEdBQUU7QUFBQyxRQUFFLEdBQUc7QUFBRyxRQUFHLEFBQU8sTUFBUDtBQUFTLFlBQU0sTUFBTSxFQUFFO0FBQU0sV0FBTyxNQUFJLElBQUUsT0FBSztBQUFBO0FBQUUsV0FBUSxJQUFFLEdBQUUsSUFBRSxPQUFJO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBTyxRQUFHLEFBQU8sTUFBUDtBQUFTO0FBQU0sUUFBSSxLQUFFLEVBQUU7QUFBVSxRQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMsVUFBRSxFQUFFO0FBQU8sVUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFlBQUU7QUFBRTtBQUFBO0FBQVM7QUFBQTtBQUFNLFFBQUcsRUFBRSxVQUFRLEdBQUUsT0FBTTtBQUFDLFdBQUksS0FBRSxFQUFFLE9BQU0sTUFBRztBQUFDLFlBQUcsT0FBSTtBQUFFLGlCQUFPLEdBQUcsSUFBRztBQUFFLFlBQUcsT0FBSTtBQUFFLGlCQUFPLEdBQUcsSUFBRztBQUFFLGFBQUUsR0FBRTtBQUFBO0FBQVEsWUFBTSxNQUFNLEVBQUU7QUFBQTtBQUFPLFFBQUcsRUFBRSxXQUFTLEVBQUU7QUFBTyxVQUFFLEdBQUUsSUFBRTtBQUFBLFNBQU07QUFBQyxlQUFRLEtBQUUsT0FBRyxLQUFFLEVBQUUsT0FBTSxNQUFHO0FBQUMsWUFBRyxPQUFJLEdBQUU7QUFBQyxlQUFFO0FBQUcsY0FBRTtBQUFFLGNBQUU7QUFBRTtBQUFBO0FBQU0sWUFBRyxPQUFJLEdBQUU7QUFBQyxlQUFFO0FBQUcsY0FBRTtBQUFFLGNBQUU7QUFBRTtBQUFBO0FBQU0sYUFBRSxHQUFFO0FBQUE7QUFBUSxVQUFHLENBQUMsSUFBRTtBQUFDLGFBQUksS0FBRSxHQUFFLE9BQU0sTUFBRztBQUFDLGNBQUcsT0FDNWYsR0FBRTtBQUFDLGlCQUFFO0FBQUcsZ0JBQUU7QUFBRSxnQkFBRTtBQUFFO0FBQUE7QUFBTSxjQUFHLE9BQUksR0FBRTtBQUFDLGlCQUFFO0FBQUcsZ0JBQUU7QUFBRSxnQkFBRTtBQUFFO0FBQUE7QUFBTSxlQUFFLEdBQUU7QUFBQTtBQUFRLFlBQUcsQ0FBQztBQUFFLGdCQUFNLE1BQU0sRUFBRTtBQUFBO0FBQUE7QUFBUSxRQUFHLEVBQUUsY0FBWTtBQUFFLFlBQU0sTUFBTSxFQUFFO0FBQUE7QUFBTyxNQUFHLEFBQUksRUFBRSxRQUFOO0FBQVUsVUFBTSxNQUFNLEVBQUU7QUFBTSxTQUFPLEVBQUUsVUFBVSxZQUFVLElBQUUsSUFBRTtBQUFBO0FBQUUsWUFBWSxHQUFFO0FBQUMsTUFBRSxHQUFHO0FBQUcsTUFBRyxDQUFDO0FBQUUsV0FBTztBQUFLLFdBQVEsSUFBRSxPQUFJO0FBQUMsUUFBRyxBQUFJLEVBQUUsUUFBTixLQUFXLEFBQUksRUFBRSxRQUFOO0FBQVUsYUFBTztBQUFFLFFBQUcsRUFBRTtBQUFNLFFBQUUsTUFBTSxTQUFPLEdBQUUsSUFBRSxFQUFFO0FBQUEsU0FBVTtBQUFDLFVBQUcsTUFBSTtBQUFFO0FBQU0sYUFBSyxDQUFDLEVBQUUsV0FBUztBQUFDLFlBQUcsQ0FBQyxFQUFFLFVBQVEsRUFBRSxXQUFTO0FBQUUsaUJBQU87QUFBSyxZQUFFLEVBQUU7QUFBQTtBQUFPLFFBQUUsUUFBUSxTQUFPLEVBQUU7QUFBTyxVQUFFLEVBQUU7QUFBQTtBQUFBO0FBQVMsU0FBTztBQUFBO0FBQzVjLFlBQVksR0FBRSxHQUFFO0FBQUMsV0FBUSxJQUFFLEVBQUUsV0FBVSxBQUFPLE1BQVAsUUFBVTtBQUFDLFFBQUcsTUFBSSxLQUFHLE1BQUk7QUFBRSxhQUFNO0FBQUcsUUFBRSxFQUFFO0FBQUE7QUFBTyxTQUFNO0FBQUE7QUFBRyxJQUFJLElBQUcsSUFBRyxJQUFHLElBQUcsS0FBRyxPQUFHLEtBQUcsSUFBRyxLQUFHLE1BQUssS0FBRyxNQUFLLEtBQUcsTUFBSyxLQUFHLElBQUksT0FBSSxLQUFHLElBQUksT0FBSSxLQUFHLElBQUcsS0FBRyw2UEFBNlAsTUFBTTtBQUNyYixZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFNBQU0sRUFBQyxXQUFVLEdBQUUsY0FBYSxHQUFFLGtCQUFpQixJQUFFLElBQUcsYUFBWSxHQUFFLGtCQUFpQixDQUFDO0FBQUE7QUFBSSxZQUFZLEdBQUUsR0FBRTtBQUFDLFVBQU87QUFBQSxTQUFRO0FBQUEsU0FBZTtBQUFXLFdBQUc7QUFBSztBQUFBLFNBQVc7QUFBQSxTQUFpQjtBQUFZLFdBQUc7QUFBSztBQUFBLFNBQVc7QUFBQSxTQUFpQjtBQUFXLFdBQUc7QUFBSztBQUFBLFNBQVc7QUFBQSxTQUFtQjtBQUFhLFNBQUcsT0FBTyxFQUFFO0FBQVc7QUFBQSxTQUFXO0FBQUEsU0FBeUI7QUFBcUIsU0FBRyxPQUFPLEVBQUU7QUFBQTtBQUFBO0FBQzNaLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUU7QUFBQyxNQUFHLEFBQU8sTUFBUCxRQUFVLEVBQUUsZ0JBQWM7QUFBRSxXQUFPLElBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEtBQUcsQUFBTyxNQUFQLFFBQVcsS0FBRSxHQUFHLElBQUcsQUFBTyxNQUFQLFFBQVUsR0FBRyxLQUFJO0FBQUUsSUFBRSxvQkFBa0I7QUFBRSxNQUFFLEVBQUU7QUFBaUIsRUFBTyxNQUFQLFFBQVUsQUFBSyxFQUFFLFFBQVEsT0FBZixNQUFtQixFQUFFLEtBQUs7QUFBRyxTQUFPO0FBQUE7QUFDOU0sWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxVQUFPO0FBQUEsU0FBUTtBQUFVLGFBQU8sS0FBRyxHQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHO0FBQUEsU0FBUTtBQUFZLGFBQU8sS0FBRyxHQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHO0FBQUEsU0FBUTtBQUFZLGFBQU8sS0FBRyxHQUFHLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHO0FBQUEsU0FBUTtBQUFjLFVBQUksS0FBRSxFQUFFO0FBQVUsU0FBRyxJQUFJLElBQUUsR0FBRyxHQUFHLElBQUksT0FBSSxNQUFLLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBSSxhQUFNO0FBQUEsU0FBUTtBQUFvQixhQUFPLEtBQUUsRUFBRSxXQUFVLEdBQUcsSUFBSSxJQUFFLEdBQUcsR0FBRyxJQUFJLE9BQUksTUFBSyxHQUFFLEdBQUUsR0FBRSxHQUFFLEtBQUk7QUFBQTtBQUFHLFNBQU07QUFBQTtBQUNqVyxZQUFZLEdBQUU7QUFBQyxNQUFJLElBQUUsR0FBRyxFQUFFO0FBQVEsTUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFFBQUksSUFBRSxHQUFHO0FBQUcsUUFBRyxBQUFPLE1BQVA7QUFBUyxVQUFHLElBQUUsRUFBRSxLQUFJLEFBQUssTUFBTCxJQUFPO0FBQUMsWUFBRyxJQUFFLEdBQUcsSUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFlBQUUsWUFBVTtBQUFFLGFBQUcsRUFBRSxjQUFhLFdBQVU7QUFBQyxjQUFFLHlCQUF5QixFQUFFLFVBQVMsV0FBVTtBQUFDLGlCQUFHO0FBQUE7QUFBQTtBQUFPO0FBQUE7QUFBQSxpQkFBZ0IsQUFBSSxNQUFKLEtBQU8sRUFBRSxVQUFVLFNBQVE7QUFBQyxVQUFFLFlBQVUsQUFBSSxFQUFFLFFBQU4sSUFBVSxFQUFFLFVBQVUsZ0JBQWM7QUFBSztBQUFBO0FBQUE7QUFBQTtBQUFRLElBQUUsWUFBVTtBQUFBO0FBQzFVLFlBQVksR0FBRTtBQUFDLE1BQUcsQUFBTyxFQUFFLGNBQVQ7QUFBbUIsV0FBTTtBQUFHLFdBQVEsSUFBRSxFQUFFLGtCQUFpQixJQUFFLEVBQUUsVUFBUTtBQUFDLFFBQUksSUFBRSxHQUFHLEVBQUUsY0FBYSxFQUFFLGtCQUFpQixFQUFFLElBQUcsRUFBRTtBQUFhLFFBQUcsQUFBTyxNQUFQO0FBQVMsYUFBTyxJQUFFLEdBQUcsSUFBRyxBQUFPLE1BQVAsUUFBVSxHQUFHLElBQUcsRUFBRSxZQUFVLEdBQUU7QUFBRyxNQUFFO0FBQUE7QUFBUSxTQUFNO0FBQUE7QUFBRyxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsS0FBRyxNQUFJLEVBQUUsT0FBTztBQUFBO0FBQ3pRLGNBQWE7QUFBQyxPQUFJLEtBQUcsT0FBRyxJQUFFLEdBQUcsVUFBUTtBQUFDLFFBQUksSUFBRSxHQUFHO0FBQUcsUUFBRyxBQUFPLEVBQUUsY0FBVCxNQUFtQjtBQUFDLFVBQUUsR0FBRyxFQUFFO0FBQVcsTUFBTyxNQUFQLFFBQVUsR0FBRztBQUFHO0FBQUE7QUFBTSxhQUFRLElBQUUsRUFBRSxrQkFBaUIsSUFBRSxFQUFFLFVBQVE7QUFBQyxVQUFJLElBQUUsR0FBRyxFQUFFLGNBQWEsRUFBRSxrQkFBaUIsRUFBRSxJQUFHLEVBQUU7QUFBYSxVQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsVUFBRSxZQUFVO0FBQUU7QUFBQTtBQUFNLFFBQUU7QUFBQTtBQUFRLElBQU8sRUFBRSxjQUFULFFBQW9CLEdBQUc7QUFBQTtBQUFRLEVBQU8sT0FBUCxRQUFXLEdBQUcsT0FBTSxNQUFHO0FBQU0sRUFBTyxPQUFQLFFBQVcsR0FBRyxPQUFNLE1BQUc7QUFBTSxFQUFPLE9BQVAsUUFBVyxHQUFHLE9BQU0sTUFBRztBQUFNLEtBQUcsUUFBUTtBQUFJLEtBQUcsUUFBUTtBQUFBO0FBQ3JaLFlBQVksR0FBRSxHQUFFO0FBQUMsSUFBRSxjQUFZLEtBQUksR0FBRSxZQUFVLE1BQUssTUFBSyxNQUFHLE1BQUcsRUFBRSwwQkFBMEIsRUFBRSx5QkFBd0I7QUFBQTtBQUNySCxZQUFZLEdBQUU7QUFBQyxhQUFXLElBQUU7QUFBQyxXQUFPLEdBQUcsSUFBRTtBQUFBO0FBQUcsTUFBRyxJQUFFLEdBQUcsUUFBTztBQUFDLE9BQUcsR0FBRyxJQUFHO0FBQUcsYUFBUSxJQUFFLEdBQUUsSUFBRSxHQUFHLFFBQU8sS0FBSTtBQUFDLFVBQUksSUFBRSxHQUFHO0FBQUcsUUFBRSxjQUFZLEtBQUksR0FBRSxZQUFVO0FBQUE7QUFBQTtBQUFPLEVBQU8sT0FBUCxRQUFXLEdBQUcsSUFBRztBQUFHLEVBQU8sT0FBUCxRQUFXLEdBQUcsSUFBRztBQUFHLEVBQU8sT0FBUCxRQUFXLEdBQUcsSUFBRztBQUFHLEtBQUcsUUFBUTtBQUFHLEtBQUcsUUFBUTtBQUFHLE9BQUksSUFBRSxHQUFFLElBQUUsR0FBRyxRQUFPO0FBQUksUUFBRSxHQUFHLElBQUcsRUFBRSxjQUFZLEtBQUksR0FBRSxZQUFVO0FBQU0sU0FBSyxJQUFFLEdBQUcsVUFBUyxLQUFFLEdBQUcsSUFBRyxBQUFPLEVBQUUsY0FBVDtBQUFxQixPQUFHLElBQUcsQUFBTyxFQUFFLGNBQVQsUUFBb0IsR0FBRztBQUFBO0FBQy9YLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFO0FBQUcsSUFBRSxFQUFFLGlCQUFlLEVBQUU7QUFBYyxJQUFFLFdBQVMsS0FBRyxXQUFTO0FBQUUsSUFBRSxRQUFNLEtBQUcsUUFBTTtBQUFFLFNBQU87QUFBQTtBQUFFLElBQUksS0FBRyxFQUFDLGNBQWEsR0FBRyxhQUFZLGlCQUFnQixvQkFBbUIsR0FBRyxhQUFZLHVCQUFzQixnQkFBZSxHQUFHLGFBQVksbUJBQWtCLGVBQWMsR0FBRyxjQUFhLG9CQUFrQixLQUFHLElBQUcsS0FBRztBQUN2VSxNQUFLLE1BQUcsU0FBUyxjQUFjLE9BQU8sT0FBTSxvQkFBbUIsVUFBUyxRQUFPLEdBQUcsYUFBYSxXQUFVLE9BQU8sR0FBRyxtQkFBbUIsV0FBVSxPQUFPLEdBQUcsZUFBZSxZQUFXLHFCQUFvQixVQUFRLE9BQU8sR0FBRyxjQUFjO0FBQVksWUFBWSxHQUFFO0FBQUMsTUFBRyxHQUFHO0FBQUcsV0FBTyxHQUFHO0FBQUcsTUFBRyxDQUFDLEdBQUc7QUFBRyxXQUFPO0FBQUUsTUFBSSxJQUFFLEdBQUcsSUFBRztBQUFFLE9BQUksS0FBSztBQUFFLFFBQUcsRUFBRSxlQUFlLE1BQUksS0FBSztBQUFHLGFBQU8sR0FBRyxLQUFHLEVBQUU7QUFBRyxTQUFPO0FBQUE7QUFDOVgsSUFBSSxLQUFHLEdBQUcsaUJBQWdCLEtBQUcsR0FBRyx1QkFBc0IsS0FBRyxHQUFHLG1CQUFrQixLQUFHLEdBQUcsa0JBQWlCLEtBQUcsSUFBSSxPQUFJLEtBQUcsSUFBSSxPQUFJLEtBQUc7QUFBQSxFQUFDO0FBQUEsRUFBUTtBQUFBLEVBQVE7QUFBQSxFQUFHO0FBQUEsRUFBZTtBQUFBLEVBQUc7QUFBQSxFQUFxQjtBQUFBLEVBQUc7QUFBQSxFQUFpQjtBQUFBLEVBQVU7QUFBQSxFQUFVO0FBQUEsRUFBaUI7QUFBQSxFQUFpQjtBQUFBLEVBQWlCO0FBQUEsRUFBaUI7QUFBQSxFQUFVO0FBQUEsRUFBVTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBUTtBQUFBLEVBQVE7QUFBQSxFQUFRO0FBQUEsRUFBUTtBQUFBLEVBQW9CO0FBQUEsRUFBb0I7QUFBQSxFQUFPO0FBQUEsRUFBTztBQUFBLEVBQWE7QUFBQSxFQUFhO0FBQUEsRUFBaUI7QUFBQSxFQUFpQjtBQUFBLEVBQVk7QUFBQSxFQUMvZTtBQUFBLEVBQXFCO0FBQUEsRUFBcUI7QUFBQSxFQUFVO0FBQUEsRUFBVTtBQUFBLEVBQVc7QUFBQSxFQUFXO0FBQUEsRUFBVTtBQUFBLEVBQVU7QUFBQSxFQUFVO0FBQUEsRUFBVTtBQUFBLEVBQVU7QUFBQSxFQUFVO0FBQUEsRUFBYTtBQUFBLEVBQWE7QUFBQSxFQUFHO0FBQUEsRUFBZ0I7QUFBQSxFQUFVO0FBQUE7QUFBVyxZQUFZLEdBQUUsR0FBRTtBQUFDLFdBQVEsSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPLEtBQUcsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFLElBQUU7QUFBRyxRQUFFLE9BQU0sR0FBRSxHQUFHLGdCQUFjLEVBQUUsTUFBTTtBQUFJLE9BQUcsSUFBSSxHQUFFO0FBQUcsT0FBRyxJQUFJLEdBQUU7QUFBR0ksU0FBRyxHQUFFLENBQUM7QUFBQTtBQUFBO0FBQUssSUFBSSxLQUFHLEVBQUU7QUFBYTtBQUFLLElBQUksSUFBRTtBQUMvWCxZQUFZLEdBQUU7QUFBQyxNQUFHLEFBQUssS0FBRSxPQUFQO0FBQVUsV0FBTyxJQUFFLElBQUc7QUFBRSxNQUFHLEFBQUssS0FBRSxPQUFQO0FBQVUsV0FBTyxJQUFFLElBQUc7QUFBRSxNQUFHLEFBQUssS0FBRSxPQUFQO0FBQVUsV0FBTyxJQUFFLElBQUc7QUFBRSxNQUFJLElBQUUsS0FBRztBQUFFLE1BQUcsQUFBSSxNQUFKO0FBQU0sV0FBTyxJQUFFLElBQUc7QUFBRSxNQUFHLEFBQUssS0FBRSxRQUFQO0FBQVcsV0FBTyxJQUFFLElBQUc7QUFBRyxNQUFFLE1BQUk7QUFBRSxNQUFHLEFBQUksTUFBSjtBQUFNLFdBQU8sSUFBRSxJQUFHO0FBQUUsTUFBRyxBQUFLLEtBQUUsU0FBUDtBQUFZLFdBQU8sSUFBRSxHQUFFO0FBQUksTUFBRSxPQUFLO0FBQUUsTUFBRyxBQUFJLE1BQUo7QUFBTSxXQUFPLElBQUUsR0FBRTtBQUFFLE1BQUcsQUFBSyxLQUFFLFVBQVA7QUFBYSxXQUFPLElBQUUsR0FBRTtBQUFLLE1BQUUsVUFBUTtBQUFFLE1BQUcsQUFBSSxNQUFKO0FBQU0sV0FBTyxJQUFFLEdBQUU7QUFBRSxNQUFFLFdBQVM7QUFBRSxNQUFHLEFBQUksTUFBSjtBQUFNLFdBQU8sSUFBRSxHQUFFO0FBQUUsTUFBRyxJQUFFO0FBQVMsV0FBTyxJQUFFLEdBQUU7QUFBUyxNQUFHLEFBQUssS0FBRSxlQUFQO0FBQWtCLFdBQU8sSUFBRSxHQUFFO0FBQVUsTUFBRSxZQUFVO0FBQUUsTUFBRyxBQUFJLE1BQUo7QUFBTSxXQUFPLElBQUUsR0FBRTtBQUFFLE1BQUcsQUFBSyxjQUFXLE9BQWhCO0FBQW1CLFdBQU8sSUFBRSxHQUFFO0FBQ2pmLE1BQUU7QUFBRSxTQUFPO0FBQUE7QUFBRSxZQUFZLEdBQUU7QUFBQyxVQUFPO0FBQUEsU0FBUTtBQUFHLGFBQU87QUFBQSxTQUFRO0FBQUcsYUFBTztBQUFBLFNBQVE7QUFBQSxTQUFRO0FBQUcsYUFBTztBQUFBLFNBQU87QUFBRyxhQUFPO0FBQUE7QUFBVSxhQUFPO0FBQUE7QUFBQTtBQUFHLFlBQVksR0FBRTtBQUFDLFVBQU87QUFBQSxTQUFRO0FBQUEsU0FBUTtBQUFHLGFBQU87QUFBQSxTQUFRO0FBQUEsU0FBUTtBQUFBLFNBQVE7QUFBQSxTQUFRO0FBQUcsYUFBTztBQUFBLFNBQVE7QUFBQSxTQUFPO0FBQUEsU0FBTztBQUFBLFNBQU87QUFBQSxTQUFPO0FBQUEsU0FBTztBQUFFLGFBQU87QUFBQSxTQUFRO0FBQUEsU0FBTztBQUFBLFNBQU87QUFBRSxhQUFPO0FBQUEsU0FBUTtBQUFFLGFBQU87QUFBQTtBQUFXLFlBQU0sTUFBTSxFQUFFLEtBQUk7QUFBQTtBQUFBO0FBQ2pXLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUU7QUFBYSxNQUFHLEFBQUksTUFBSjtBQUFNLFdBQU8sSUFBRTtBQUFFLE1BQUksSUFBRSxHQUFFLElBQUUsR0FBRSxLQUFFLEVBQUUsY0FBYSxLQUFFLEVBQUUsZ0JBQWUsS0FBRSxFQUFFO0FBQVksTUFBRyxBQUFJLE9BQUo7QUFBTSxRQUFFLElBQUUsSUFBRSxJQUFFO0FBQUEsV0FBVyxLQUFFLElBQUUsV0FBVSxBQUFJLE9BQUosR0FBTTtBQUFDLFFBQUksSUFBRSxLQUFFLENBQUM7QUFBRSxJQUFJLE1BQUosSUFBTyxLQUFFLEdBQUcsSUFBRyxJQUFFLEtBQUksT0FBRyxJQUFFLEFBQUksT0FBSixLQUFRLEtBQUUsR0FBRyxLQUFHLElBQUU7QUFBQTtBQUFTLFNBQUUsSUFBRSxDQUFDLElBQUUsQUFBSSxPQUFKLElBQU8sS0FBRSxHQUFHLEtBQUcsSUFBRSxLQUFHLEFBQUksT0FBSixLQUFRLEtBQUUsR0FBRyxLQUFHLElBQUU7QUFBRyxNQUFHLEFBQUksTUFBSjtBQUFNLFdBQU87QUFBRSxNQUFFLEtBQUcsR0FBRztBQUFHLE1BQUUsSUFBSSxNQUFFLElBQUUsSUFBRSxLQUFHLE1BQUksS0FBRztBQUFFLE1BQUcsQUFBSSxNQUFKLEtBQU8sTUFBSSxLQUFHLEFBQUssS0FBRSxRQUFQLEdBQVU7QUFBQyxPQUFHO0FBQUcsUUFBRyxLQUFHO0FBQUUsYUFBTztBQUFFLFFBQUU7QUFBQTtBQUFFLE1BQUUsRUFBRTtBQUFlLE1BQUcsQUFBSSxNQUFKO0FBQU0sU0FBSSxJQUFFLEVBQUUsZUFBYyxLQUFHLEdBQUUsSUFBRTtBQUFHLFVBQUUsS0FBRyxHQUFHLElBQUcsSUFBRSxLQUFHLEdBQUUsS0FBRyxFQUFFLElBQUcsS0FBRyxDQUFDO0FBQUUsU0FBTztBQUFBO0FBQzFlLFlBQVksR0FBRTtBQUFDLE1BQUUsRUFBRSxlQUFhO0FBQVksU0FBTyxBQUFJLE1BQUosSUFBTSxJQUFFLElBQUUsYUFBVyxhQUFXO0FBQUE7QUFBRSxZQUFZLEdBQUUsR0FBRTtBQUFDLFVBQU87QUFBQSxTQUFRO0FBQUcsYUFBTztBQUFBLFNBQU87QUFBRyxhQUFPO0FBQUEsU0FBTztBQUFHLGFBQU8sSUFBRSxHQUFHLEtBQUcsQ0FBQyxJQUFHLEFBQUksTUFBSixJQUFNLEdBQUcsSUFBRyxLQUFHO0FBQUEsU0FBTztBQUFHLGFBQU8sSUFBRSxHQUFHLE1BQUksQ0FBQyxJQUFHLEFBQUksTUFBSixJQUFNLEdBQUcsR0FBRSxLQUFHO0FBQUEsU0FBTztBQUFFLGFBQU8sSUFBRSxHQUFHLE9BQUssQ0FBQyxJQUFHLEFBQUksTUFBSixLQUFRLEtBQUUsR0FBRyxVQUFRLENBQUMsSUFBRyxBQUFJLE1BQUosS0FBUSxLQUFFLE9BQU07QUFBQSxTQUFPO0FBQUUsYUFBTyxJQUFFLEdBQUcsWUFBVSxDQUFDLElBQUcsQUFBSSxNQUFKLEtBQVEsS0FBRSxZQUFXO0FBQUE7QUFBRSxRQUFNLE1BQU0sRUFBRSxLQUFJO0FBQUE7QUFBSyxZQUFZLEdBQUU7QUFBQyxTQUFPLElBQUUsQ0FBQztBQUFBO0FBQUUsWUFBWSxHQUFFO0FBQUMsV0FBUSxJQUFFLElBQUcsSUFBRSxHQUFFLEtBQUcsR0FBRTtBQUFJLE1BQUUsS0FBSztBQUFHLFNBQU87QUFBQTtBQUNyZCxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsSUFBRSxnQkFBYztBQUFFLE1BQUksSUFBRSxJQUFFO0FBQUUsSUFBRSxrQkFBZ0I7QUFBRSxJQUFFLGVBQWE7QUFBRSxNQUFFLEVBQUU7QUFBVyxNQUFFLEtBQUcsR0FBRztBQUFHLElBQUUsS0FBRztBQUFBO0FBQUUsSUFBSSxLQUFHLEtBQUssUUFBTSxLQUFLLFFBQU0sSUFBRyxLQUFHLEtBQUssS0FBSSxLQUFHLEtBQUs7QUFBSSxZQUFZLEdBQUU7QUFBQyxTQUFPLEFBQUksTUFBSixJQUFNLEtBQUcsS0FBSSxJQUFHLEtBQUcsS0FBRyxLQUFHO0FBQUE7QUFBRSxJQUFJLEtBQUcsRUFBRSwrQkFBOEIsS0FBRyxFQUFFLDBCQUF5QixLQUFHO0FBQUcsWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSTtBQUFLLE1BQUksSUFBRSxJQUFHLEtBQUU7QUFBRyxPQUFHO0FBQUcsTUFBRztBQUFDLE9BQUcsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFBLFlBQUc7QUFBUSxJQUFDLE1BQUcsT0FBSTtBQUFBO0FBQUE7QUFBTSxjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxLQUFHLElBQUcsR0FBRyxLQUFLLE1BQUssR0FBRSxHQUFFLEdBQUU7QUFBQTtBQUNqYixZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFHLElBQUc7QUFBQyxRQUFJO0FBQUUsUUFBSSxLQUFFLEFBQUssS0FBRSxPQUFQLE1BQVksSUFBRSxHQUFHLFVBQVEsS0FBRyxHQUFHLFFBQVE7QUFBRyxVQUFFLEdBQUcsTUFBSyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUcsS0FBSztBQUFBLFNBQU87QUFBQyxVQUFJLEtBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFHLFVBQUcsQUFBTyxPQUFQO0FBQVMsYUFBRyxHQUFHLEdBQUU7QUFBQSxXQUFPO0FBQUMsWUFBRyxHQUFFO0FBQUMsY0FBRyxLQUFHLEdBQUcsUUFBUSxJQUFHO0FBQUMsZ0JBQUUsR0FBRyxJQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUcsZUFBRyxLQUFLO0FBQUc7QUFBQTtBQUFPLGNBQUcsR0FBRyxJQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUc7QUFBTyxhQUFHLEdBQUU7QUFBQTtBQUFHLFdBQUcsR0FBRSxHQUFFLEdBQUUsTUFBSztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzlRLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxHQUFHO0FBQUcsTUFBRSxHQUFHO0FBQUcsTUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFFBQUksS0FBRSxHQUFHO0FBQUcsUUFBRyxBQUFPLE9BQVA7QUFBUyxVQUFFO0FBQUEsU0FBUztBQUFDLFVBQUksS0FBRSxHQUFFO0FBQUksVUFBRyxBQUFLLE9BQUwsSUFBTztBQUFDLFlBQUUsR0FBRztBQUFHLFlBQUcsQUFBTyxNQUFQO0FBQVMsaUJBQU87QUFBRSxZQUFFO0FBQUEsaUJBQWEsQUFBSSxPQUFKLEdBQU07QUFBQyxZQUFHLEdBQUUsVUFBVTtBQUFRLGlCQUFPLEFBQUksR0FBRSxRQUFOLElBQVUsR0FBRSxVQUFVLGdCQUFjO0FBQUssWUFBRTtBQUFBO0FBQVUsZUFBSSxLQUFJLEtBQUU7QUFBQTtBQUFBO0FBQU8sS0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUcsU0FBTztBQUFBO0FBQUssSUFBSSxLQUFHLE1BQUssS0FBRyxNQUFLLEtBQUc7QUFDelQsY0FBYTtBQUFDLE1BQUc7QUFBRyxXQUFPO0FBQUcsTUFBSSxHQUFFLElBQUUsSUFBRyxJQUFFLEVBQUUsUUFBTyxHQUFFLElBQUUsV0FBVSxLQUFHLEdBQUcsUUFBTSxHQUFHLGFBQVksS0FBRSxFQUFFO0FBQU8sT0FBSSxJQUFFLEdBQUUsSUFBRSxLQUFHLEVBQUUsT0FBSyxFQUFFLElBQUc7QUFBSTtBQUFDLE1BQUksS0FBRSxJQUFFO0FBQUUsT0FBSSxJQUFFLEdBQUUsS0FBRyxNQUFHLEVBQUUsSUFBRSxPQUFLLEVBQUUsS0FBRSxJQUFHO0FBQUk7QUFBQyxTQUFPLEtBQUcsRUFBRSxNQUFNLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFBO0FBQVEsWUFBWSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUU7QUFBUSxnQkFBYSxJQUFHLEtBQUUsRUFBRSxVQUFTLEFBQUksTUFBSixLQUFPLEFBQUssTUFBTCxNQUFTLEtBQUUsT0FBSyxJQUFFO0FBQUUsRUFBSyxNQUFMLE1BQVMsS0FBRTtBQUFJLFNBQU8sTUFBSSxLQUFHLEFBQUssTUFBTCxLQUFPLElBQUU7QUFBQTtBQUFFLGNBQWE7QUFBQyxTQUFNO0FBQUE7QUFBRyxjQUFhO0FBQUMsU0FBTTtBQUFBO0FBQ2pZLFlBQVksR0FBRTtBQUFDLGFBQVcsSUFBRSxHQUFFLEdBQUUsSUFBRSxJQUFFO0FBQUMsU0FBSyxhQUFXO0FBQUUsU0FBSyxjQUFZO0FBQUUsU0FBSyxPQUFLO0FBQUUsU0FBSyxjQUFZO0FBQUUsU0FBSyxTQUFPO0FBQUUsU0FBSyxnQkFBYztBQUFLLGFBQVEsS0FBSztBQUFFLFFBQUUsZUFBZSxNQUFLLE1BQUUsRUFBRSxJQUFHLEtBQUssS0FBRyxLQUFFLEdBQUUsTUFBRyxHQUFFO0FBQUksU0FBSyxxQkFBb0IsQ0FBTSxHQUFFLG9CQUFSLE9BQXlCLEdBQUUsbUJBQWlCLEFBQUssR0FBRSxnQkFBUCxTQUFvQixLQUFHO0FBQUcsU0FBSyx1QkFBcUI7QUFBRyxXQUFPO0FBQUE7QUFBS0osTUFBRSxFQUFFLFdBQVUsRUFBQyxnQkFBZSxXQUFVO0FBQUMsU0FBSyxtQkFBaUI7QUFBRyxRQUFJLEtBQUUsS0FBSztBQUFZLFVBQUksSUFBRSxpQkFBZSxHQUFFLG1CQUFpQixBQUFZLE9BQU8sR0FBRSxnQkFBckIsYUFDeGQsSUFBRSxjQUFZLFFBQUksS0FBSyxxQkFBbUI7QUFBQSxLQUFLLGlCQUFnQixXQUFVO0FBQUMsUUFBSSxLQUFFLEtBQUs7QUFBWSxVQUFJLElBQUUsa0JBQWdCLEdBQUUsb0JBQWtCLEFBQVksT0FBTyxHQUFFLGlCQUFyQixhQUFvQyxJQUFFLGVBQWEsT0FBSSxLQUFLLHVCQUFxQjtBQUFBLEtBQUssU0FBUSxXQUFVO0FBQUEsS0FBRyxjQUFhO0FBQUssU0FBTztBQUFBO0FBQ2hSLElBQUksS0FBRyxFQUFDLFlBQVcsR0FBRSxTQUFRLEdBQUUsWUFBVyxHQUFFLFdBQVUsU0FBUyxHQUFFO0FBQUMsU0FBTyxFQUFFLGFBQVcsS0FBSztBQUFBLEdBQU8sa0JBQWlCLEdBQUUsV0FBVSxLQUFHLEtBQUcsR0FBRyxLQUFJLEtBQUdBLElBQUUsSUFBRyxJQUFHLEVBQUMsTUFBSyxHQUFFLFFBQU8sTUFBSSxLQUFHLEdBQUcsS0FBSSxJQUFHLElBQUcsSUFBRyxLQUFHQSxJQUFFLElBQUcsSUFBRyxFQUFDLFNBQVEsR0FBRSxTQUFRLEdBQUUsU0FBUSxHQUFFLFNBQVEsR0FBRSxPQUFNLEdBQUUsT0FBTSxHQUFFLFNBQVEsR0FBRSxVQUFTLEdBQUUsUUFBTyxHQUFFLFNBQVEsR0FBRSxrQkFBaUIsSUFBRyxRQUFPLEdBQUUsU0FBUSxHQUFFLGVBQWMsU0FBUyxHQUFFO0FBQUMsU0FBTyxBQUFTLEVBQUUsa0JBQVgsU0FBeUIsRUFBRSxnQkFBYyxFQUFFLGFBQVcsRUFBRSxZQUFVLEVBQUUsY0FBWSxFQUFFO0FBQUEsR0FBZSxXQUFVLFNBQVMsR0FBRTtBQUFDLE1BQUcsZUFDM2U7QUFBRSxXQUFPLEVBQUU7QUFBVSxRQUFJLE1BQUssT0FBSSxBQUFjLEVBQUUsU0FBaEIsY0FBc0IsTUFBRyxFQUFFLFVBQVEsR0FBRyxTQUFRLEtBQUcsRUFBRSxVQUFRLEdBQUcsV0FBUyxLQUFHLEtBQUcsR0FBRSxLQUFHO0FBQUcsU0FBTztBQUFBLEdBQUksV0FBVSxTQUFTLEdBQUU7QUFBQyxTQUFNLGVBQWMsSUFBRSxFQUFFLFlBQVU7QUFBQSxNQUFNLEtBQUcsR0FBRyxLQUFJLEtBQUdBLElBQUUsSUFBRyxJQUFHLEVBQUMsY0FBYSxNQUFJLEtBQUcsR0FBRyxLQUFJLEtBQUdBLElBQUUsSUFBRyxJQUFHLEVBQUMsZUFBYyxNQUFJLEtBQUcsR0FBRyxLQUFJLEtBQUdBLElBQUUsSUFBRyxJQUFHLEVBQUMsZUFBYyxHQUFFLGFBQVksR0FBRSxlQUFjLE1BQUksS0FBRyxHQUFHLEtBQUksS0FBR0EsSUFBRSxJQUFHLElBQUcsRUFBQyxlQUFjLFNBQVMsR0FBRTtBQUFDLFNBQU0sbUJBQWtCLElBQUUsRUFBRSxnQkFBYyxPQUFPO0FBQUEsTUFBaUIsS0FBRyxHQUFHLEtBQUksS0FBR0EsSUFBRSxJQUFHLElBQUcsRUFBQyxNQUFLLE1BQUksS0FBRyxHQUFHLEtBQUksS0FBRztBQUFBLEVBQUMsS0FBSTtBQUFBLEVBQ3hmLFVBQVM7QUFBQSxFQUFJLE1BQUs7QUFBQSxFQUFZLElBQUc7QUFBQSxFQUFVLE9BQU07QUFBQSxFQUFhLE1BQUs7QUFBQSxFQUFZLEtBQUk7QUFBQSxFQUFTLEtBQUk7QUFBQSxFQUFLLE1BQUs7QUFBQSxFQUFjLE1BQUs7QUFBQSxFQUFjLFFBQU87QUFBQSxFQUFhLGlCQUFnQjtBQUFBLEdBQWdCLEtBQUc7QUFBQSxFQUFDLEdBQUU7QUFBQSxFQUFZLEdBQUU7QUFBQSxFQUFNLElBQUc7QUFBQSxFQUFRLElBQUc7QUFBQSxFQUFRLElBQUc7QUFBQSxFQUFRLElBQUc7QUFBQSxFQUFVLElBQUc7QUFBQSxFQUFNLElBQUc7QUFBQSxFQUFRLElBQUc7QUFBQSxFQUFXLElBQUc7QUFBQSxFQUFTLElBQUc7QUFBQSxFQUFJLElBQUc7QUFBQSxFQUFTLElBQUc7QUFBQSxFQUFXLElBQUc7QUFBQSxFQUFNLElBQUc7QUFBQSxFQUFPLElBQUc7QUFBQSxFQUFZLElBQUc7QUFBQSxFQUFVLElBQUc7QUFBQSxFQUFhLElBQUc7QUFBQSxFQUFZLElBQUc7QUFBQSxFQUFTLElBQUc7QUFBQSxFQUFTLEtBQUk7QUFBQSxFQUFLLEtBQUk7QUFBQSxFQUFLLEtBQUk7QUFBQSxFQUFLLEtBQUk7QUFBQSxFQUFLLEtBQUk7QUFBQSxFQUFLLEtBQUk7QUFBQSxFQUFLLEtBQUk7QUFBQSxFQUN0ZixLQUFJO0FBQUEsRUFBSyxLQUFJO0FBQUEsRUFBSyxLQUFJO0FBQUEsRUFBTSxLQUFJO0FBQUEsRUFBTSxLQUFJO0FBQUEsRUFBTSxLQUFJO0FBQUEsRUFBVSxLQUFJO0FBQUEsRUFBYSxLQUFJO0FBQUEsR0FBUSxLQUFHLEVBQUMsS0FBSSxVQUFTLFNBQVEsV0FBVSxNQUFLLFdBQVUsT0FBTTtBQUFZLFlBQVksR0FBRTtBQUFDLE1BQUksSUFBRSxLQUFLO0FBQVksU0FBTyxFQUFFLG1CQUFpQixFQUFFLGlCQUFpQixLQUFJLEtBQUUsR0FBRyxNQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUc7QUFBQTtBQUFHLGNBQWE7QUFBQyxTQUFPO0FBQUE7QUFDOVIsSUFBSSxLQUFHQSxJQUFFLElBQUcsSUFBRyxFQUFDLEtBQUksU0FBUyxHQUFFO0FBQUMsTUFBRyxFQUFFLEtBQUk7QUFBQyxRQUFJLElBQUUsR0FBRyxFQUFFLFFBQU0sRUFBRTtBQUFJLFFBQUcsQUFBaUIsTUFBakI7QUFBbUIsYUFBTztBQUFBO0FBQUUsU0FBTSxBQUFhLEVBQUUsU0FBZixhQUFxQixLQUFFLEdBQUcsSUFBRyxBQUFLLE1BQUwsS0FBTyxVQUFRLE9BQU8sYUFBYSxNQUFJLEFBQVksRUFBRSxTQUFkLGFBQW9CLEFBQVUsRUFBRSxTQUFaLFVBQWlCLEdBQUcsRUFBRSxZQUFVLGlCQUFlO0FBQUEsR0FBSSxNQUFLLEdBQUUsVUFBUyxHQUFFLFNBQVEsR0FBRSxVQUFTLEdBQUUsUUFBTyxHQUFFLFNBQVEsR0FBRSxRQUFPLEdBQUUsUUFBTyxHQUFFLGtCQUFpQixJQUFHLFVBQVMsU0FBUyxHQUFFO0FBQUMsU0FBTSxBQUFhLEVBQUUsU0FBZixhQUFvQixHQUFHLEtBQUc7QUFBQSxHQUFHLFNBQVEsU0FBUyxHQUFFO0FBQUMsU0FBTSxBQUFZLEVBQUUsU0FBZCxhQUFvQixBQUFVLEVBQUUsU0FBWixVQUFpQixFQUFFLFVBQVE7QUFBQSxHQUFHLE9BQU0sU0FBUyxHQUFFO0FBQUMsU0FBTSxBQUM3ZSxFQUFFLFNBRDJlLGFBQ3RlLEdBQUcsS0FBRyxBQUFZLEVBQUUsU0FBZCxhQUFvQixBQUFVLEVBQUUsU0FBWixVQUFpQixFQUFFLFVBQVE7QUFBQSxNQUFLLEtBQUcsR0FBRyxLQUFJLEtBQUdBLElBQUUsSUFBRyxJQUFHLEVBQUMsV0FBVSxHQUFFLE9BQU0sR0FBRSxRQUFPLEdBQUUsVUFBUyxHQUFFLG9CQUFtQixHQUFFLE9BQU0sR0FBRSxPQUFNLEdBQUUsT0FBTSxHQUFFLGFBQVksR0FBRSxXQUFVLE1BQUksS0FBRyxHQUFHLEtBQUksS0FBR0EsSUFBRSxJQUFHLElBQUcsRUFBQyxTQUFRLEdBQUUsZUFBYyxHQUFFLGdCQUFlLEdBQUUsUUFBTyxHQUFFLFNBQVEsR0FBRSxTQUFRLEdBQUUsVUFBUyxHQUFFLGtCQUFpQixPQUFLLEtBQUcsR0FBRyxLQUFJLEtBQUdBLElBQUUsSUFBRyxJQUFHLEVBQUMsY0FBYSxHQUFFLGFBQVksR0FBRSxlQUFjLE1BQUksS0FBRyxHQUFHLEtBQUksS0FBR0EsSUFBRSxJQUFHLElBQUc7QUFBQSxFQUFDLFFBQU8sU0FBUyxHQUFFO0FBQUMsV0FBTSxZQUFXLElBQUUsRUFBRSxTQUFPLGlCQUFnQixJQUFFLENBQUMsRUFBRSxjQUFZO0FBQUE7QUFBQSxFQUNsZixRQUFPLFNBQVMsR0FBRTtBQUFDLFdBQU0sWUFBVyxJQUFFLEVBQUUsU0FBTyxpQkFBZ0IsSUFBRSxDQUFDLEVBQUUsY0FBWSxnQkFBZSxJQUFFLENBQUMsRUFBRSxhQUFXO0FBQUE7QUFBQSxFQUFHLFFBQU87QUFBQSxFQUFFLFdBQVU7QUFBQSxJQUFJLEtBQUcsR0FBRyxLQUFJLEtBQUcsQ0FBQyxHQUFFLElBQUcsSUFBRyxLQUFJLEtBQUcsTUFBSSxzQkFBcUIsUUFBTyxLQUFHO0FBQUssTUFBSSxrQkFBaUIsWUFBVyxNQUFHLFNBQVM7QUFBYyxJQUFJLEtBQUcsTUFBSSxlQUFjLFVBQVEsQ0FBQyxJQUFHSyxPQUFHLE1BQUssRUFBQyxNQUFJLE1BQUksSUFBRSxNQUFJLE1BQUksS0FBSSxLQUFHLE9BQU8sYUFBYSxLQUFJLEtBQUc7QUFDMVcsWUFBWSxHQUFFLEdBQUU7QUFBQyxVQUFPO0FBQUEsU0FBUTtBQUFRLGFBQU0sQUFBSyxHQUFHLFFBQVEsRUFBRSxhQUFsQjtBQUFBLFNBQWdDO0FBQVUsYUFBTyxBQUFNLEVBQUUsWUFBUjtBQUFBLFNBQXFCO0FBQUEsU0FBZ0I7QUFBQSxTQUFpQjtBQUFXLGFBQU07QUFBQTtBQUFXLGFBQU07QUFBQTtBQUFBO0FBQUksWUFBWSxHQUFFO0FBQUMsTUFBRSxFQUFFO0FBQU8sU0FBTSxBQUFXLE9BQU8sTUFBbEIsWUFBcUIsVUFBUyxJQUFFLEVBQUUsT0FBSztBQUFBO0FBQUssSUFBSSxLQUFHO0FBQUcsWUFBWSxHQUFFLEdBQUU7QUFBQyxVQUFPO0FBQUEsU0FBUTtBQUFpQixhQUFPLEdBQUc7QUFBQSxTQUFRO0FBQVcsVUFBRyxBQUFLLEVBQUUsVUFBUDtBQUFhLGVBQU87QUFBSyxXQUFHO0FBQUcsYUFBTztBQUFBLFNBQVE7QUFBWSxhQUFPLElBQUUsRUFBRSxNQUFLLE1BQUksTUFBSSxLQUFHLE9BQUs7QUFBQTtBQUFVLGFBQU87QUFBQTtBQUFBO0FBQzdjLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBRztBQUFHLFdBQU0sQUFBbUIsTUFBbkIsb0JBQXNCLENBQUMsTUFBSSxHQUFHLEdBQUUsS0FBSSxLQUFFLE1BQUssS0FBRyxLQUFHLEtBQUcsTUFBSyxLQUFHLE9BQUcsS0FBRztBQUFLLFVBQU87QUFBQSxTQUFRO0FBQVEsYUFBTztBQUFBLFNBQVU7QUFBVyxVQUFHLENBQUUsR0FBRSxXQUFTLEVBQUUsVUFBUSxFQUFFLFlBQVUsRUFBRSxXQUFTLEVBQUUsUUFBTztBQUFDLFlBQUcsRUFBRSxRQUFNLElBQUUsRUFBRSxLQUFLO0FBQU8saUJBQU8sRUFBRTtBQUFLLFlBQUcsRUFBRTtBQUFNLGlCQUFPLE9BQU8sYUFBYSxFQUFFO0FBQUE7QUFBTyxhQUFPO0FBQUEsU0FBVTtBQUFpQixhQUFPQSxRQUFJLEFBQU8sRUFBRSxXQUFULE9BQWdCLE9BQUssRUFBRTtBQUFBO0FBQWEsYUFBTztBQUFBO0FBQUE7QUFDbFksSUFBSSxLQUFHLEVBQUMsT0FBTSxNQUFHLE1BQUssTUFBRyxVQUFTLE1BQUcsa0JBQWlCLE1BQUcsT0FBTSxNQUFHLE9BQU0sTUFBRyxRQUFPLE1BQUcsVUFBUyxNQUFHLE9BQU0sTUFBRyxRQUFPLE1BQUcsS0FBSSxNQUFHLE1BQUssTUFBRyxNQUFLLE1BQUcsS0FBSSxNQUFHLE1BQUs7QUFBSSxZQUFZLEdBQUU7QUFBQyxNQUFJLElBQUUsS0FBRyxFQUFFLFlBQVUsRUFBRSxTQUFTO0FBQWMsU0FBTSxBQUFVLE1BQVYsVUFBWSxDQUFDLENBQUMsR0FBRyxFQUFFLFFBQU0sQUFBYSxNQUFiLGFBQWUsT0FBRztBQUFBO0FBQUcsWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsS0FBRztBQUFHLE1BQUUsR0FBRyxHQUFFO0FBQVksTUFBRSxFQUFFLFVBQVMsS0FBRSxJQUFJLEdBQUcsWUFBVyxVQUFTLE1BQUssR0FBRSxJQUFHLEVBQUUsS0FBSyxFQUFDLE9BQU0sR0FBRSxXQUFVO0FBQUE7QUFBSyxJQUFJLEtBQUcsTUFBSyxLQUFHO0FBQUssWUFBWSxHQUFFO0FBQUMsS0FBRyxHQUFFO0FBQUE7QUFBRyxZQUFZLEdBQUU7QUFBQyxNQUFJLElBQUUsR0FBRztBQUFHLE1BQUcsR0FBRztBQUFHLFdBQU87QUFBQTtBQUNuZSxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUcsQUFBVyxNQUFYO0FBQWEsV0FBTztBQUFBO0FBQUUsSUFBSSxLQUFHO0FBQUcsSUFBRyxJQUFHO0FBQUMsTUFBSTtBQUFHLE1BQUcsSUFBRztBQUFDLFFBQUksS0FBRyxhQUFZO0FBQVMsUUFBRyxDQUFDLElBQUc7QUFBQyxVQUFJLEtBQUcsU0FBUyxjQUFjO0FBQU8sU0FBRyxhQUFhLFdBQVU7QUFBVyxXQUFHLEFBQWEsT0FBTyxHQUFHLFlBQXZCO0FBQUE7QUFBK0IsU0FBRztBQUFBO0FBQVEsU0FBRztBQUFHLE9BQUcsTUFBSyxFQUFDLFNBQVMsZ0JBQWMsSUFBRSxTQUFTO0FBQUE7QUFBYyxjQUFhO0FBQUMsUUFBSyxJQUFHLFlBQVksb0JBQW1CLEtBQUksS0FBRyxLQUFHO0FBQUE7QUFBTSxZQUFZLEdBQUU7QUFBQyxNQUFHLEFBQVUsRUFBRSxpQkFBWixXQUEwQixHQUFHLEtBQUk7QUFBQyxRQUFJLElBQUU7QUFBRyxPQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUc7QUFBSSxRQUFFO0FBQUcsUUFBRztBQUFHLFFBQUU7QUFBQSxTQUFPO0FBQUMsV0FBRztBQUFHLFVBQUc7QUFBQyxXQUFHLEdBQUU7QUFBQSxnQkFBRztBQUFRLGFBQUcsT0FBRztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzNlLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxFQUFZLE1BQVosWUFBZSxPQUFLLEtBQUcsR0FBRSxLQUFHLEdBQUUsR0FBRyxZQUFZLG9CQUFtQixPQUFLLEFBQWEsTUFBYixjQUFnQjtBQUFBO0FBQUssWUFBWSxHQUFFO0FBQUMsTUFBRyxBQUFvQixNQUFwQixxQkFBdUIsQUFBVSxNQUFWLFdBQWEsQUFBWSxNQUFaO0FBQWMsV0FBTyxHQUFHO0FBQUE7QUFBSSxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUcsQUFBVSxNQUFWO0FBQVksV0FBTyxHQUFHO0FBQUE7QUFBRyxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUcsQUFBVSxNQUFWLFdBQWEsQUFBVyxNQUFYO0FBQWEsV0FBTyxHQUFHO0FBQUE7QUFBRyxZQUFZLEdBQUUsR0FBRTtBQUFDLFNBQU8sTUFBSSxLQUFJLENBQUksTUFBSixLQUFPLElBQUUsTUFBSSxJQUFFLE1BQUksTUFBSSxLQUFHLE1BQUk7QUFBQTtBQUFFLElBQUksS0FBRyxBQUFhLE9BQU8sT0FBTyxPQUEzQixhQUE4QixPQUFPLEtBQUcsSUFBRyxLQUFHLE9BQU8sVUFBVTtBQUM3YSxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUcsR0FBRyxHQUFFO0FBQUcsV0FBTTtBQUFHLE1BQUcsQUFBVyxPQUFPLE1BQWxCLFlBQXFCLEFBQU8sTUFBUCxRQUFVLEFBQVcsT0FBTyxNQUFsQixZQUFxQixBQUFPLE1BQVA7QUFBUyxXQUFNO0FBQUcsTUFBSSxJQUFFLE9BQU8sS0FBSyxJQUFHLElBQUUsT0FBTyxLQUFLO0FBQUcsTUFBRyxFQUFFLFdBQVMsRUFBRTtBQUFPLFdBQU07QUFBRyxPQUFJLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTztBQUFJLFFBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRSxFQUFFLE9BQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxLQUFJLEVBQUUsRUFBRTtBQUFLLGFBQU07QUFBRyxTQUFNO0FBQUE7QUFBRyxZQUFZLEdBQUU7QUFBQyxTQUFLLEtBQUcsRUFBRTtBQUFZLFFBQUUsRUFBRTtBQUFXLFNBQU87QUFBQTtBQUNsVSxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxHQUFHO0FBQUcsTUFBRTtBQUFFLFdBQVEsR0FBRSxLQUFHO0FBQUMsUUFBRyxBQUFJLEVBQUUsYUFBTixHQUFlO0FBQUMsVUFBRSxJQUFFLEVBQUUsWUFBWTtBQUFPLFVBQUcsS0FBRyxLQUFHLEtBQUc7QUFBRSxlQUFNLEVBQUMsTUFBSyxHQUFFLFFBQU8sSUFBRTtBQUFHLFVBQUU7QUFBQTtBQUFFLE9BQUU7QUFBQyxhQUFLLEtBQUc7QUFBQyxZQUFHLEVBQUUsYUFBWTtBQUFDLGNBQUUsRUFBRTtBQUFZO0FBQUE7QUFBUSxZQUFFLEVBQUU7QUFBQTtBQUFXLFVBQUU7QUFBQTtBQUFPLFFBQUUsR0FBRztBQUFBO0FBQUE7QUFBSSxZQUFZLEdBQUUsR0FBRTtBQUFDLFNBQU8sS0FBRyxJQUFFLE1BQUksSUFBRSxPQUFHLEtBQUcsQUFBSSxFQUFFLGFBQU4sSUFBZSxRQUFHLEtBQUcsQUFBSSxFQUFFLGFBQU4sSUFBZSxHQUFHLEdBQUUsRUFBRSxjQUFZLGNBQWEsSUFBRSxFQUFFLFNBQVMsS0FBRyxFQUFFLDBCQUF3QixDQUFDLENBQUUsR0FBRSx3QkFBd0IsS0FBRyxNQUFJLFFBQUc7QUFBQTtBQUM1WixjQUFhO0FBQUMsV0FBUSxJQUFFLFFBQU8sSUFBRSxNQUFLLGFBQWEsRUFBRSxxQkFBbUI7QUFBQyxRQUFHO0FBQUMsVUFBSSxJQUFFLEFBQVcsT0FBTyxFQUFFLGNBQWMsU0FBUyxTQUEzQztBQUFBLGFBQXNELEdBQU47QUFBUyxVQUFFO0FBQUE7QUFBRyxRQUFHO0FBQUUsVUFBRSxFQUFFO0FBQUE7QUFBbUI7QUFBTSxRQUFFLEdBQUcsRUFBRTtBQUFBO0FBQVUsU0FBTztBQUFBO0FBQUUsWUFBWSxHQUFFO0FBQUMsTUFBSSxJQUFFLEtBQUcsRUFBRSxZQUFVLEVBQUUsU0FBUztBQUFjLFNBQU8sS0FBSSxDQUFVLE1BQVYsV0FBYyxDQUFTLEVBQUUsU0FBWCxVQUFpQixBQUFXLEVBQUUsU0FBYixZQUFtQixBQUFRLEVBQUUsU0FBVixTQUFnQixBQUFRLEVBQUUsU0FBVixTQUFnQixBQUFhLEVBQUUsU0FBZixlQUFzQixBQUFhLE1BQWIsY0FBZ0IsQUFBUyxFQUFFLG9CQUFYO0FBQUE7QUFDN1ksSUFBSSxLQUFHLE1BQUksa0JBQWlCLFlBQVUsTUFBSSxTQUFTLGNBQWEsS0FBRyxNQUFLLEtBQUcsTUFBSyxLQUFHLE1BQUssS0FBRztBQUMzRixZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUUsV0FBUyxJQUFFLEVBQUUsV0FBUyxBQUFJLEVBQUUsYUFBTixJQUFlLElBQUUsRUFBRTtBQUFjLFFBQUksQUFBTSxNQUFOLFFBQVUsT0FBSyxHQUFHLE1BQUssS0FBRSxJQUFHLG9CQUFtQixLQUFHLEdBQUcsS0FBRyxJQUFFLEVBQUMsT0FBTSxFQUFFLGdCQUFlLEtBQUksRUFBRSxpQkFBZSxLQUFHLEdBQUUsaUJBQWUsRUFBRSxjQUFjLGVBQWEsUUFBUSxnQkFBZSxJQUFFLEVBQUMsWUFBVyxFQUFFLFlBQVcsY0FBYSxFQUFFLGNBQWEsV0FBVSxFQUFFLFdBQVUsYUFBWSxFQUFFLGdCQUFjLE1BQUksR0FBRyxJQUFHLE1BQUssTUFBRyxHQUFFLElBQUUsR0FBRyxJQUFHLGFBQVksSUFBRSxFQUFFLFVBQVMsS0FBRSxJQUFJLEdBQUcsWUFBVyxVQUFTLE1BQUssR0FBRSxJQUFHLEVBQUUsS0FBSyxFQUFDLE9BQU0sR0FBRSxXQUFVLE1BQUksRUFBRSxTQUFPO0FBQUE7QUFDamYsR0FBRyxtakJBQW1qQixNQUFNLE1BQzVqQjtBQUFHLEdBQUcsb1JBQW9SLE1BQU0sTUFBSztBQUFHLEdBQUcsSUFBRztBQUFHLFNBQVEsS0FBRyxxRkFBcUYsTUFBTSxNQUFLLEtBQUcsR0FBRSxLQUFHLEdBQUcsUUFBTztBQUFLLEtBQUcsSUFBSSxHQUFHLEtBQUk7QUFBRyxHQUFHLGdCQUFlLENBQUMsWUFBVztBQUNsZSxHQUFHLGdCQUFlLENBQUMsWUFBVztBQUFjLEdBQUcsa0JBQWlCLENBQUMsY0FBYTtBQUFnQixHQUFHLGtCQUFpQixDQUFDLGNBQWE7QUFBZ0JELEtBQUcsWUFBVyxvRUFBb0UsTUFBTTtBQUFNQSxLQUFHLFlBQVcsdUZBQXVGLE1BQU07QUFBTUEsS0FBRyxpQkFBZ0IsQ0FBQyxrQkFBaUIsWUFBVyxhQUFZO0FBQVVBLEtBQUcsb0JBQW1CLDJEQUEyRCxNQUFNO0FBQzVmQSxLQUFHLHNCQUFxQiw2REFBNkQsTUFBTTtBQUFNQSxLQUFHLHVCQUFzQiw4REFBOEQsTUFBTTtBQUFNLElBQUksS0FBRyxzTkFBc04sTUFBTSxNQUFLLEtBQUcsSUFBSSxJQUFJLDBDQUEwQyxNQUFNLEtBQUssT0FBTztBQUNuZixZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUUsUUFBTTtBQUFnQixJQUFFLGdCQUFjO0FBQUUsS0FBRyxHQUFFLEdBQUUsUUFBTztBQUFHLElBQUUsZ0JBQWM7QUFBQTtBQUNwRyxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUUsQUFBSyxLQUFFLE9BQVA7QUFBVSxXQUFRLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxLQUFJO0FBQUMsUUFBSSxJQUFFLEVBQUUsSUFBRyxJQUFFLEVBQUU7QUFBTSxRQUFFLEVBQUU7QUFBVSxPQUFFO0FBQUMsVUFBSSxLQUFFO0FBQU8sVUFBRztBQUFFLGlCQUFRLEtBQUUsRUFBRSxTQUFPLEdBQUUsS0FBRyxJQUFFLE1BQUk7QUFBQyxjQUFJLEtBQUUsRUFBRSxLQUFHLElBQUUsR0FBRSxVQUFTLEtBQUUsR0FBRTtBQUFjLGVBQUUsR0FBRTtBQUFTLGNBQUcsTUFBSSxNQUFHLEVBQUU7QUFBdUI7QUFBUSxhQUFHLEdBQUUsSUFBRTtBQUFHLGVBQUU7QUFBQTtBQUFBO0FBQU8sYUFBSSxLQUFFLEdBQUUsS0FBRSxFQUFFLFFBQU8sTUFBSTtBQUFDLGVBQUUsRUFBRTtBQUFHLGNBQUUsR0FBRTtBQUFTLGVBQUUsR0FBRTtBQUFjLGVBQUUsR0FBRTtBQUFTLGNBQUcsTUFBSSxNQUFHLEVBQUU7QUFBdUI7QUFBUSxhQUFHLEdBQUUsSUFBRTtBQUFHLGVBQUU7QUFBQTtBQUFBO0FBQUE7QUFBSSxNQUFHO0FBQUcsVUFBTSxJQUFFLElBQUcsS0FBRyxPQUFHLEtBQUcsTUFBSztBQUFBO0FBQzFhLFdBQVcsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEdBQUcsSUFBRyxJQUFFLElBQUU7QUFBVyxJQUFFLElBQUksTUFBSyxJQUFHLEdBQUUsR0FBRSxHQUFFLFFBQUksRUFBRSxJQUFJO0FBQUE7QUFBSSxJQUFJLEtBQUcsb0JBQWtCLEtBQUssU0FBUyxTQUFTLElBQUksTUFBTTtBQUFHLFlBQVksR0FBRTtBQUFDLElBQUUsT0FBTSxHQUFFLE1BQUksTUFBRyxHQUFHLFFBQVEsU0FBUyxHQUFFO0FBQUMsT0FBRyxJQUFJLE1BQUksR0FBRyxHQUFFLE9BQUcsR0FBRTtBQUFNLE9BQUcsR0FBRSxNQUFHLEdBQUU7QUFBQTtBQUFBO0FBQ3RPLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxJQUFFLFVBQVUsVUFBUSxBQUFTLFVBQVUsT0FBbkIsU0FBc0IsVUFBVSxLQUFHLEdBQUUsS0FBRTtBQUFFLEVBQW9CLE1BQXBCLHFCQUF1QixBQUFJLEVBQUUsYUFBTixLQUFpQixNQUFFLEVBQUU7QUFBZSxNQUFHLEFBQU8sTUFBUCxRQUFVLENBQUMsS0FBRyxHQUFHLElBQUksSUFBRztBQUFDLFFBQUcsQUFBVyxNQUFYO0FBQWE7QUFBTyxTQUFHO0FBQUUsU0FBRTtBQUFBO0FBQUUsTUFBSSxLQUFFLEdBQUcsS0FBRyxLQUFFLElBQUUsT0FBTSxLQUFFLFlBQVU7QUFBVSxLQUFFLElBQUksT0FBSyxNQUFJLE1BQUcsSUFBRyxHQUFHLElBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFJO0FBQUE7QUFDbFMsWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEdBQUcsSUFBSTtBQUFHLFVBQU8sQUFBUyxNQUFULFNBQVcsSUFBRTtBQUFBLFNBQVE7QUFBRSxVQUFFO0FBQUc7QUFBQSxTQUFXO0FBQUUsVUFBRUU7QUFBRztBQUFBO0FBQWMsVUFBRTtBQUFBO0FBQUcsTUFBRSxFQUFFLEtBQUssTUFBSyxHQUFFLEdBQUU7QUFBRyxNQUFFO0FBQU8sR0FBQyxNQUFJLEFBQWUsTUFBZixnQkFBa0IsQUFBYyxNQUFkLGVBQWlCLEFBQVUsTUFBVixXQUFjLEtBQUU7QUFBSSxNQUFFLEFBQVMsTUFBVCxTQUFXLEVBQUUsaUJBQWlCLEdBQUUsR0FBRSxFQUFDLFNBQVEsTUFBRyxTQUFRLE9BQUksRUFBRSxpQkFBaUIsR0FBRSxHQUFFLFFBQUksQUFBUyxNQUFULFNBQVcsRUFBRSxpQkFBaUIsR0FBRSxHQUFFLEVBQUMsU0FBUSxPQUFJLEVBQUUsaUJBQWlCLEdBQUUsR0FBRTtBQUFBO0FBQ3BXLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxLQUFFO0FBQUUsTUFBRyxBQUFLLEtBQUUsT0FBUCxLQUFXLEFBQUssS0FBRSxPQUFQLEtBQVcsQUFBTyxNQUFQO0FBQVM7QUFBRSxpQkFBTztBQUFDLFlBQUcsQUFBTyxNQUFQO0FBQVM7QUFBTyxZQUFJLEtBQUUsRUFBRTtBQUFJLFlBQUcsQUFBSSxPQUFKLEtBQU8sQUFBSSxPQUFKLEdBQU07QUFBQyxjQUFJLEtBQUUsRUFBRSxVQUFVO0FBQWMsY0FBRyxPQUFJLEtBQUcsQUFBSSxHQUFFLGFBQU4sS0FBZ0IsR0FBRSxlQUFhO0FBQUU7QUFBTSxjQUFHLEFBQUksT0FBSjtBQUFNLGlCQUFJLEtBQUUsRUFBRSxRQUFPLEFBQU8sT0FBUCxRQUFVO0FBQUMsa0JBQUksSUFBRSxHQUFFO0FBQUksa0JBQUcsQUFBSSxNQUFKLEtBQU8sQUFBSSxNQUFKO0FBQU0sb0JBQUcsSUFBRSxHQUFFLFVBQVUsZUFBYyxNQUFJLEtBQUcsQUFBSSxFQUFFLGFBQU4sS0FBZ0IsRUFBRSxlQUFhO0FBQUU7QUFBQTtBQUFPLG1CQUFFLEdBQUU7QUFBQTtBQUFPLGlCQUFLLEFBQU8sT0FBUCxRQUFVO0FBQUMsaUJBQUUsR0FBRztBQUFHLGdCQUFHLEFBQU8sT0FBUDtBQUFTO0FBQU8sZ0JBQUUsR0FBRTtBQUFJLGdCQUFHLEFBQUksTUFBSixLQUFPLEFBQUksTUFBSixHQUFNO0FBQUMsa0JBQUUsS0FBRTtBQUFFO0FBQUE7QUFBVyxpQkFBRSxHQUFFO0FBQUE7QUFBQTtBQUFZLFlBQUUsRUFBRTtBQUFBO0FBQU8sS0FBRyxXQUFVO0FBQUMsUUFBSSxLQUFFLElBQUUsS0FBRSxHQUFHLElBQUcsS0FBRTtBQUNwZixPQUFFO0FBQUMsVUFBSSxLQUFFLEdBQUcsSUFBSTtBQUFHLFVBQUcsQUFBUyxPQUFULFFBQVc7QUFBQyxZQUFJLEtBQUUsSUFBRyxLQUFFO0FBQUUsZ0JBQU87QUFBQSxlQUFRO0FBQVcsZ0JBQUcsQUFBSSxHQUFHLE9BQVA7QUFBVTtBQUFBLGVBQWE7QUFBQSxlQUFlO0FBQVEsaUJBQUU7QUFBRztBQUFBLGVBQVc7QUFBVSxpQkFBRTtBQUFRLGlCQUFFO0FBQUc7QUFBQSxlQUFXO0FBQVcsaUJBQUU7QUFBTyxpQkFBRTtBQUFHO0FBQUEsZUFBVztBQUFBLGVBQWtCO0FBQVksaUJBQUU7QUFBRztBQUFBLGVBQVc7QUFBUSxnQkFBRyxBQUFJLEVBQUUsV0FBTjtBQUFhO0FBQUEsZUFBYTtBQUFBLGVBQWdCO0FBQUEsZUFBZ0I7QUFBQSxlQUFpQjtBQUFBLGVBQWlCO0FBQUEsZUFBZTtBQUFBLGVBQWdCO0FBQUEsZUFBaUI7QUFBYyxpQkFBRTtBQUFHO0FBQUEsZUFBVztBQUFBLGVBQVk7QUFBQSxlQUFlO0FBQUEsZUFBaUI7QUFBQSxlQUFnQjtBQUFBLGVBQWlCO0FBQUEsZUFBZ0I7QUFBQSxlQUFpQjtBQUFPLGlCQUMxaUI7QUFBRztBQUFBLGVBQVc7QUFBQSxlQUFtQjtBQUFBLGVBQWdCO0FBQUEsZUFBaUI7QUFBYSxpQkFBRTtBQUFHO0FBQUEsZUFBVztBQUFBLGVBQVE7QUFBQSxlQUFRO0FBQUcsaUJBQUU7QUFBRztBQUFBLGVBQVc7QUFBRyxpQkFBRTtBQUFHO0FBQUEsZUFBVztBQUFTLGlCQUFFO0FBQUc7QUFBQSxlQUFXO0FBQVEsaUJBQUU7QUFBRztBQUFBLGVBQVc7QUFBQSxlQUFZO0FBQUEsZUFBVztBQUFRLGlCQUFFO0FBQUc7QUFBQSxlQUFXO0FBQUEsZUFBeUI7QUFBQSxlQUEwQjtBQUFBLGVBQXFCO0FBQUEsZUFBbUI7QUFBQSxlQUFtQjtBQUFBLGVBQWtCO0FBQUEsZUFBbUI7QUFBWSxpQkFBRTtBQUFBO0FBQUcsWUFBSSxLQUFFLEFBQUssS0FBRSxPQUFQLEdBQVUsS0FBRSxDQUFDLE1BQUcsQUFBVyxNQUFYLFVBQWEsS0FBRSxLQUFFLEFBQU8sT0FBUCxPQUFTLEtBQUUsWUFBVSxPQUFLO0FBQUUsYUFBRTtBQUFHLGlCQUFRLEtBQUUsSUFBRSxJQUFFLEFBQy9lLE9BRCtlLFFBQzVlO0FBQUMsZUFBRTtBQUFFLGNBQUksS0FBRSxHQUFFO0FBQVUsVUFBSSxHQUFFLFFBQU4sS0FBVyxBQUFPLE9BQVAsUUFBVyxNQUFFLElBQUUsQUFBTyxPQUFQLFFBQVcsTUFBRSxHQUFHLElBQUUsS0FBRyxBQUFNLE1BQU4sUUFBUyxHQUFFLEtBQUssR0FBRyxJQUFFLElBQUU7QUFBTSxjQUFHO0FBQUU7QUFBTSxlQUFFLEdBQUU7QUFBQTtBQUFPLFlBQUUsR0FBRSxVQUFTLE1BQUUsSUFBSSxHQUFFLElBQUUsSUFBRSxNQUFLLEdBQUUsS0FBRyxHQUFFLEtBQUssRUFBQyxPQUFNLElBQUUsV0FBVTtBQUFBO0FBQUE7QUFBTSxRQUFHLEFBQUssS0FBRSxPQUFQLEdBQVU7QUFBQyxTQUFFO0FBQUMsYUFBRSxBQUFjLE1BQWQsZUFBaUIsQUFBZ0IsTUFBaEI7QUFBa0IsYUFBRSxBQUFhLE1BQWIsY0FBZ0IsQUFBZSxNQUFmO0FBQWlCLFlBQUcsTUFBRyxBQUFLLEtBQUUsUUFBUCxLQUFhLE1BQUUsRUFBRSxpQkFBZSxFQUFFLGdCQUFlLElBQUcsT0FBSSxHQUFFO0FBQUs7QUFBUSxZQUFHLE1BQUcsSUFBRTtBQUFDLGVBQUUsR0FBRSxXQUFTLEtBQUUsS0FBRyxNQUFFLEdBQUUsaUJBQWUsR0FBRSxlQUFhLEdBQUUsZUFBYTtBQUFPLGNBQUcsSUFBRTtBQUFDLGdCQUFHLEtBQUUsRUFBRSxpQkFBZSxFQUFFLFdBQVUsS0FBRSxJQUFFLEtBQUUsS0FBRSxHQUFHLE1BQUcsTUFBSyxBQUNuZixPQURtZixRQUMvZSxNQUFFLEdBQUcsS0FBRyxPQUFJLE1BQUcsQUFBSSxHQUFFLFFBQU4sS0FBVyxBQUFJLEdBQUUsUUFBTjtBQUFXLG1CQUFFO0FBQUE7QUFBVSxpQkFBRSxNQUFLLEtBQUU7QUFBRSxjQUFHLE9BQUksSUFBRTtBQUFDLGlCQUFFO0FBQUcsaUJBQUU7QUFBZSxpQkFBRTtBQUFlLGlCQUFFO0FBQVEsZ0JBQUcsQUFBZSxNQUFmLGdCQUFrQixBQUFnQixNQUFoQjtBQUFrQixtQkFBRSxJQUFHLEtBQUUsa0JBQWlCLEtBQUUsa0JBQWlCLEtBQUU7QUFBVSxpQkFBRSxBQUFNLE1BQU4sT0FBUSxLQUFFLEdBQUc7QUFBRyxpQkFBRSxBQUFNLE1BQU4sT0FBUSxLQUFFLEdBQUc7QUFBRyxpQkFBRSxJQUFJLEdBQUUsSUFBRSxLQUFFLFNBQVEsSUFBRSxHQUFFO0FBQUcsZUFBRSxTQUFPO0FBQUUsZUFBRSxnQkFBYztBQUFFLGlCQUFFO0FBQUssZUFBRyxRQUFLLE1BQUksTUFBRSxJQUFJLEdBQUUsSUFBRSxLQUFFLFNBQVEsSUFBRSxHQUFFLEtBQUcsR0FBRSxTQUFPLElBQUUsR0FBRSxnQkFBYyxJQUFFLEtBQUU7QUFBRyxpQkFBRTtBQUFFLGdCQUFHLE1BQUc7QUFBRSxpQkFBRTtBQUFDLHFCQUFFO0FBQUUscUJBQUU7QUFBRSxxQkFBRTtBQUFFLHFCQUFJLEtBQUUsSUFBRSxJQUFFLEtBQUUsR0FBRztBQUFHO0FBQUkscUJBQUU7QUFBRSxxQkFBSSxLQUFFLElBQUUsSUFBRSxLQUFFLEdBQUc7QUFBRztBQUFJLHVCQUFLLElBQUUsS0FBRTtBQUFHLHVCQUFFLEdBQUcsS0FBRztBQUFJLHVCQUFLLElBQUUsS0FBRTtBQUFHLHVCQUNwZixHQUFHLEtBQUc7QUFBSSx1QkFBSyxRQUFLO0FBQUMsc0JBQUcsT0FBSSxNQUFHLEFBQU8sT0FBUCxRQUFVLE9BQUksR0FBRTtBQUFVO0FBQVEsdUJBQUUsR0FBRztBQUFHLHVCQUFFLEdBQUc7QUFBQTtBQUFHLHFCQUFFO0FBQUE7QUFBQTtBQUFVLG1CQUFFO0FBQUssWUFBTyxPQUFQLFFBQVUsR0FBRyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUksWUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsR0FBRyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUE7QUFBQTtBQUFBO0FBQU0sU0FBRTtBQUFDLGFBQUUsS0FBRSxHQUFHLE1BQUc7QUFBTyxhQUFFLEdBQUUsWUFBVSxHQUFFLFNBQVM7QUFBYyxZQUFHLEFBQVcsT0FBWCxZQUFjLEFBQVUsT0FBVixXQUFhLEFBQVMsR0FBRSxTQUFYO0FBQWdCLGNBQUksS0FBRTtBQUFBLGlCQUFXLEdBQUc7QUFBRyxjQUFHO0FBQUcsaUJBQUU7QUFBQSxlQUFPO0FBQUMsaUJBQUU7QUFBRyxnQkFBSSxLQUFFO0FBQUE7QUFBQTtBQUFPLFVBQUMsTUFBRSxHQUFFLGFBQVcsQUFBVSxHQUFFLGtCQUFaLFdBQTRCLENBQWEsR0FBRSxTQUFmLGNBQXFCLEFBQVUsR0FBRSxTQUFaLFlBQW9CLE1BQUU7QUFBSSxZQUFHLE1BQUksTUFBRSxHQUFFLEdBQUUsTUFBSTtBQUFDLGFBQUcsSUFBRSxJQUFFLEdBQUU7QUFBRztBQUFBO0FBQVEsY0FBRyxHQUFFLEdBQUUsSUFBRTtBQUFHLFFBQWEsTUFBYixjQUFpQixNQUFFLEdBQUUsa0JBQ3RlLEdBQUUsY0FBWSxBQUFXLEdBQUUsU0FBYixZQUFtQixHQUFHLElBQUUsVUFBUyxHQUFFO0FBQUE7QUFBTyxXQUFFLEtBQUUsR0FBRyxNQUFHO0FBQU8sY0FBTztBQUFBLGFBQVE7QUFBVSxjQUFHLEdBQUcsT0FBSSxBQUFTLEdBQUUsb0JBQVg7QUFBMkIsaUJBQUcsSUFBRSxLQUFHLElBQUUsS0FBRztBQUFLO0FBQUEsYUFBVztBQUFXLGVBQUcsS0FBRyxLQUFHO0FBQUs7QUFBQSxhQUFXO0FBQVksZUFBRztBQUFHO0FBQUEsYUFBVztBQUFBLGFBQW1CO0FBQUEsYUFBZTtBQUFVLGVBQUc7QUFBRyxhQUFHLElBQUUsR0FBRTtBQUFHO0FBQUEsYUFBVztBQUFrQixjQUFHO0FBQUc7QUFBQSxhQUFXO0FBQUEsYUFBZTtBQUFRLGFBQUcsSUFBRSxHQUFFO0FBQUE7QUFBRyxVQUFJO0FBQUUsVUFBRztBQUFHLFdBQUU7QUFBQyxrQkFBTztBQUFBLGlCQUFRO0FBQW1CLGtCQUFJLEtBQUU7QUFBcUI7QUFBQSxpQkFBYTtBQUFpQixtQkFBRTtBQUFtQjtBQUFBLGlCQUMxZTtBQUFvQixtQkFBRTtBQUFzQjtBQUFBO0FBQVEsZUFBRTtBQUFBO0FBQUE7QUFBWSxhQUFHLEdBQUcsR0FBRSxNQUFLLE1BQUUsc0JBQW9CLEFBQVksTUFBWixhQUFlLEFBQU0sRUFBRSxZQUFSLE9BQWtCLE1BQUU7QUFBc0IsWUFBSUQsU0FBSSxBQUFPLEVBQUUsV0FBVCxRQUFrQixPQUFJLEFBQXVCLE9BQXZCLHVCQUF5QixBQUFxQixPQUFyQixzQkFBd0IsTUFBSyxNQUFFLFFBQU8sTUFBRyxJQUFFLEtBQUcsV0FBVSxLQUFHLEdBQUcsUUFBTSxHQUFHLGFBQVksS0FBRyxRQUFLLEtBQUUsR0FBRyxJQUFFLEtBQUcsSUFBRSxHQUFFLFVBQVMsTUFBRSxJQUFJLEdBQUcsSUFBRSxHQUFFLE1BQUssR0FBRSxLQUFHLEdBQUUsS0FBSyxFQUFDLE9BQU0sSUFBRSxXQUFVLE9BQUksS0FBRSxHQUFFLE9BQUssS0FBRyxNQUFFLEdBQUcsSUFBRyxBQUFPLE9BQVAsUUFBVyxJQUFFLE9BQUs7QUFBTSxVQUFHLEtBQUUsS0FBRyxHQUFHLEdBQUUsS0FBRyxHQUFHLEdBQUU7QUFBRyxhQUFFLEdBQUcsSUFBRSxrQkFBaUIsSUFBRSxHQUFFLFVBQVMsTUFBRSxJQUFJLEdBQUcsaUJBQ25mLGVBQWMsTUFBSyxHQUFFLEtBQUcsR0FBRSxLQUFLLEVBQUMsT0FBTSxJQUFFLFdBQVUsT0FBSSxHQUFFLE9BQUs7QUFBQTtBQUFHLE9BQUcsSUFBRTtBQUFBO0FBQUE7QUFBSyxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsU0FBTSxFQUFDLFVBQVMsR0FBRSxVQUFTLEdBQUUsZUFBYztBQUFBO0FBQUcsWUFBWSxHQUFFLEdBQUU7QUFBQyxXQUFRLElBQUUsSUFBRSxXQUFVLElBQUUsSUFBRyxBQUFPLE1BQVAsUUFBVTtBQUFDLFFBQUksSUFBRSxHQUFFLEtBQUUsRUFBRTtBQUFVLElBQUksRUFBRSxRQUFOLEtBQVcsQUFBTyxPQUFQLFFBQVcsS0FBRSxJQUFFLEtBQUUsR0FBRyxHQUFFLElBQUcsQUFBTSxNQUFOLFFBQVMsRUFBRSxRQUFRLEdBQUcsR0FBRSxJQUFFLEtBQUksS0FBRSxHQUFHLEdBQUUsSUFBRyxBQUFNLE1BQU4sUUFBUyxFQUFFLEtBQUssR0FBRyxHQUFFLElBQUU7QUFBSyxRQUFFLEVBQUU7QUFBQTtBQUFPLFNBQU87QUFBQTtBQUFFLFlBQVksR0FBRTtBQUFDLE1BQUcsQUFBTyxNQUFQO0FBQVMsV0FBTztBQUFLO0FBQUcsUUFBRSxFQUFFO0FBQUEsU0FBYSxLQUFHLEFBQUksRUFBRSxRQUFOO0FBQVcsU0FBTyxJQUFFLElBQUU7QUFBQTtBQUN4YSxZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFdBQVEsS0FBRSxFQUFFLFlBQVcsS0FBRSxJQUFHLEFBQU8sTUFBUCxRQUFVLE1BQUksS0FBRztBQUFDLFFBQUksS0FBRSxHQUFFLElBQUUsR0FBRSxXQUFVLEtBQUUsR0FBRTtBQUFVLFFBQUcsQUFBTyxNQUFQLFFBQVUsTUFBSTtBQUFFO0FBQU0sSUFBSSxHQUFFLFFBQU4sS0FBVyxBQUFPLE9BQVAsUUFBVyxNQUFFLElBQUUsSUFBRyxLQUFFLEdBQUcsR0FBRSxLQUFHLEFBQU0sS0FBTixRQUFTLEdBQUUsUUFBUSxHQUFHLEdBQUUsR0FBRSxRQUFLLEtBQUksS0FBRSxHQUFHLEdBQUUsS0FBRyxBQUFNLEtBQU4sUUFBUyxHQUFFLEtBQUssR0FBRyxHQUFFLEdBQUU7QUFBTSxRQUFFLEVBQUU7QUFBQTtBQUFPLEVBQUksR0FBRSxXQUFOLEtBQWMsRUFBRSxLQUFLLEVBQUMsT0FBTSxHQUFFLFdBQVU7QUFBQTtBQUFJLGNBQWE7QUFBQTtBQUFFLElBQUksS0FBRyxNQUFLLEtBQUc7QUFBSyxZQUFZLEdBQUUsR0FBRTtBQUFDLFVBQU87QUFBQSxTQUFRO0FBQUEsU0FBYztBQUFBLFNBQWE7QUFBQSxTQUFjO0FBQVcsYUFBTSxDQUFDLENBQUMsRUFBRTtBQUFBO0FBQVUsU0FBTTtBQUFBO0FBQzNiLFlBQVksR0FBRSxHQUFFO0FBQUMsU0FBTSxBQUFhLE1BQWIsY0FBZ0IsQUFBVyxNQUFYLFlBQWMsQUFBYSxNQUFiLGNBQWdCLEFBQVcsT0FBTyxFQUFFLGFBQXBCLFlBQThCLEFBQVcsT0FBTyxFQUFFLGFBQXBCLFlBQThCLEFBQVcsT0FBTyxFQUFFLDRCQUFwQixZQUE2QyxBQUFPLEVBQUUsNEJBQVQsUUFBa0MsQUFBTSxFQUFFLHdCQUF3QixVQUFoQztBQUFBO0FBQXVDLElBQUksS0FBRyxBQUFhLE9BQU8sZUFBcEIsYUFBK0IsYUFBVyxRQUFPLEtBQUcsQUFBYSxPQUFPLGlCQUFwQixhQUFpQyxlQUFhO0FBQU8sWUFBWSxHQUFFO0FBQUMsRUFBSSxFQUFFLGFBQU4sSUFBZSxFQUFFLGNBQVksS0FBRyxBQUFJLEVBQUUsYUFBTixLQUFpQixLQUFFLEVBQUUsTUFBSyxBQUFNLEtBQU4sUUFBVSxHQUFFLGNBQVk7QUFBQTtBQUN4YyxZQUFZLEdBQUU7QUFBQyxTQUFLLEFBQU0sS0FBTixNQUFRLElBQUUsRUFBRSxhQUFZO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBUyxRQUFHLEFBQUksTUFBSixLQUFPLEFBQUksTUFBSjtBQUFNO0FBQUE7QUFBTSxTQUFPO0FBQUE7QUFBRSxZQUFZLEdBQUU7QUFBQyxNQUFFLEVBQUU7QUFBZ0IsV0FBUSxJQUFFLEdBQUUsS0FBRztBQUFDLFFBQUcsQUFBSSxFQUFFLGFBQU4sR0FBZTtBQUFDLFVBQUksSUFBRSxFQUFFO0FBQUssVUFBRyxBQUFNLE1BQU4sT0FBUyxBQUFPLE1BQVAsUUFBVSxBQUFPLE1BQVAsTUFBUztBQUFDLFlBQUcsQUFBSSxNQUFKO0FBQU0saUJBQU87QUFBRTtBQUFBO0FBQVEsUUFBTyxNQUFQLFFBQVU7QUFBQTtBQUFJLFFBQUUsRUFBRTtBQUFBO0FBQWdCLFNBQU87QUFBQTtBQUFLLElBQUksS0FBRztBQUFFLFlBQVksR0FBRTtBQUFDLFNBQU0sRUFBQyxVQUFTLElBQUcsVUFBUyxHQUFFLFNBQVE7QUFBQTtBQUFHLElBQUksS0FBRyxLQUFLLFNBQVMsU0FBUyxJQUFJLE1BQU0sSUFBRyxLQUFHLGtCQUFnQixJQUFHLEtBQUcsa0JBQWdCLElBQUcsS0FBRyxzQkFBb0IsSUFBRyxLQUFHLG1CQUFpQjtBQUM5ZCxZQUFZLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRTtBQUFJLE1BQUc7QUFBRSxXQUFPO0FBQUUsV0FBUSxJQUFFLEVBQUUsWUFBVyxLQUFHO0FBQUMsUUFBRyxJQUFFLEVBQUUsT0FBSyxFQUFFLEtBQUk7QUFBQyxVQUFFLEVBQUU7QUFBVSxVQUFHLEFBQU8sRUFBRSxVQUFULFFBQWdCLEFBQU8sTUFBUCxRQUFVLEFBQU8sRUFBRSxVQUFUO0FBQWUsYUFBSSxJQUFFLEdBQUcsSUFBRyxBQUFPLE1BQVAsUUFBVTtBQUFDLGNBQUcsSUFBRSxFQUFFO0FBQUksbUJBQU87QUFBRSxjQUFFLEdBQUc7QUFBQTtBQUFHLGFBQU87QUFBQTtBQUFFLFFBQUU7QUFBRSxRQUFFLEVBQUU7QUFBQTtBQUFXLFNBQU87QUFBQTtBQUFLLFlBQVksR0FBRTtBQUFDLE1BQUUsRUFBRSxPQUFLLEVBQUU7QUFBSSxTQUFNLENBQUMsS0FBRyxBQUFJLEVBQUUsUUFBTixLQUFXLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSyxFQUFFLFFBQVAsTUFBWSxBQUFJLEVBQUUsUUFBTixJQUFVLE9BQUs7QUFBQTtBQUFFLFlBQVksR0FBRTtBQUFDLE1BQUcsQUFBSSxFQUFFLFFBQU4sS0FBVyxBQUFJLEVBQUUsUUFBTjtBQUFVLFdBQU8sRUFBRTtBQUFVLFFBQU0sTUFBTSxFQUFFO0FBQUE7QUFBTSxZQUFZLEdBQUU7QUFBQyxTQUFPLEVBQUUsT0FBSztBQUFBO0FBQ2xiLFlBQVksR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFO0FBQUksRUFBUyxNQUFULFVBQWEsS0FBRSxFQUFFLE1BQUksSUFBSTtBQUFLLFNBQU87QUFBQTtBQUFFLElBQUksS0FBRyxJQUFHLEtBQUc7QUFBRyxZQUFZLEdBQUU7QUFBQyxTQUFNLEVBQUMsU0FBUTtBQUFBO0FBQUcsV0FBVyxHQUFFO0FBQUMsTUFBRSxNQUFLLEdBQUUsVUFBUSxHQUFHLEtBQUksR0FBRyxNQUFJLE1BQUs7QUFBQTtBQUFNLFdBQVcsR0FBRSxHQUFFO0FBQUM7QUFBSyxLQUFHLE1BQUksRUFBRTtBQUFRLElBQUUsVUFBUTtBQUFBO0FBQUUsSUFBSSxLQUFHLElBQUcsSUFBRSxHQUFHLEtBQUksSUFBRSxHQUFHLFFBQUksS0FBRztBQUM1UCxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFLEtBQUs7QUFBYSxNQUFHLENBQUM7QUFBRSxXQUFPO0FBQUcsTUFBSSxJQUFFLEVBQUU7QUFBVSxNQUFHLEtBQUcsRUFBRSxnREFBOEM7QUFBRSxXQUFPLEVBQUU7QUFBMEMsTUFBSSxJQUFFLElBQUc7QUFBRSxPQUFJLE1BQUs7QUFBRSxNQUFFLE1BQUcsRUFBRTtBQUFHLE9BQUksS0FBRSxFQUFFLFdBQVUsRUFBRSw4Q0FBNEMsR0FBRSxFQUFFLDRDQUEwQztBQUFHLFNBQU87QUFBQTtBQUFFLFlBQVksR0FBRTtBQUFDLE1BQUUsRUFBRTtBQUFrQixTQUFPLEFBQU8sTUFBUCxRQUFVLEFBQVMsTUFBVDtBQUFBO0FBQVcsY0FBYTtBQUFDLElBQUU7QUFBRyxJQUFFO0FBQUE7QUFBRyxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBRyxFQUFFLFlBQVU7QUFBRyxVQUFNLE1BQU0sRUFBRTtBQUFNLElBQUUsR0FBRTtBQUFHLElBQUUsR0FBRTtBQUFBO0FBQy9lLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRTtBQUFVLE1BQUUsRUFBRTtBQUFrQixNQUFHLEFBQWEsT0FBTyxFQUFFLG9CQUF0QjtBQUFzQyxXQUFPO0FBQUUsTUFBRSxFQUFFO0FBQWtCLFdBQVEsS0FBSztBQUFFLFFBQUcsQ0FBRSxNQUFLO0FBQUcsWUFBTSxNQUFNLEVBQUUsS0FBSSxHQUFHLE1BQUksV0FBVTtBQUFJLFNBQU9MLElBQUUsSUFBRyxHQUFFO0FBQUE7QUFBRyxZQUFZLEdBQUU7QUFBQyxNQUFHLEtBQUUsRUFBRSxjQUFZLEVBQUUsNkNBQTJDO0FBQUcsT0FBRyxFQUFFO0FBQVEsSUFBRSxHQUFFO0FBQUcsSUFBRSxHQUFFLEVBQUU7QUFBUyxTQUFNO0FBQUE7QUFBRyxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUU7QUFBVSxNQUFHLENBQUM7QUFBRSxVQUFNLE1BQU0sRUFBRTtBQUFNLE1BQUcsS0FBRSxHQUFHLEdBQUUsR0FBRSxLQUFJLEVBQUUsNENBQTBDLEdBQUUsRUFBRSxJQUFHLEVBQUUsSUFBRyxFQUFFLEdBQUUsTUFBSSxFQUFFO0FBQUcsSUFBRSxHQUFFO0FBQUE7QUFDN2UsSUFBSSxLQUFHLE1BQUssS0FBRyxNQUFLLEtBQUcsRUFBRSwwQkFBeUIsS0FBRyxFQUFFLDJCQUEwQixLQUFHLEVBQUUseUJBQXdCLEtBQUcsRUFBRSxzQkFBcUIsS0FBRyxFQUFFLHVCQUFzQixLQUFHLEVBQUUsY0FBYSxLQUFHLEVBQUUsa0NBQWlDLEtBQUcsRUFBRSw0QkFBMkIsS0FBRyxFQUFFLCtCQUE4QixLQUFHLEVBQUUseUJBQXdCLEtBQUcsRUFBRSxzQkFBcUIsS0FBRyxFQUFFLHVCQUFzQixLQUFHLElBQUcsS0FBRyxBQUFTLE9BQVQsU0FBWSxLQUFHLFdBQVU7QUFBQSxHQUFHLEtBQUcsTUFBSyxLQUFHLE1BQUssS0FBRyxPQUFHLEtBQUcsTUFBSyxJQUFFLE1BQUksS0FBRyxLQUFHLFdBQVU7QUFBQyxTQUFPLE9BQUs7QUFBQTtBQUN0ZCxjQUFhO0FBQUMsVUFBTztBQUFBLFNBQVc7QUFBRyxhQUFPO0FBQUEsU0FBUTtBQUFHLGFBQU87QUFBQSxTQUFRO0FBQUcsYUFBTztBQUFBLFNBQVE7QUFBRyxhQUFPO0FBQUEsU0FBUTtBQUFHLGFBQU87QUFBQTtBQUFXLFlBQU0sTUFBTSxFQUFFO0FBQUE7QUFBQTtBQUFRLFlBQVksR0FBRTtBQUFDLFVBQU87QUFBQSxTQUFRO0FBQUcsYUFBTztBQUFBLFNBQVE7QUFBRyxhQUFPO0FBQUEsU0FBUTtBQUFHLGFBQU87QUFBQSxTQUFRO0FBQUcsYUFBTztBQUFBLFNBQVE7QUFBRyxhQUFPO0FBQUE7QUFBVyxZQUFNLE1BQU0sRUFBRTtBQUFBO0FBQUE7QUFBUSxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUUsR0FBRztBQUFHLFNBQU8sR0FBRyxHQUFFO0FBQUE7QUFBRyxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBRSxHQUFHO0FBQUcsU0FBTyxHQUFHLEdBQUUsR0FBRTtBQUFBO0FBQUcsY0FBYTtBQUFDLE1BQUcsQUFBTyxPQUFQLE1BQVU7QUFBQyxRQUFJLElBQUU7QUFBRyxTQUFHO0FBQUssT0FBRztBQUFBO0FBQUc7QUFBQTtBQUMzYSxjQUFhO0FBQUMsTUFBRyxDQUFDLE1BQUksQUFBTyxPQUFQLE1BQVU7QUFBQyxTQUFHO0FBQUcsUUFBSSxJQUFFO0FBQUUsUUFBRztBQUFDLFVBQUksSUFBRTtBQUFHLFNBQUcsSUFBRyxXQUFVO0FBQUMsZUFBSyxJQUFFLEVBQUUsUUFBTyxLQUFJO0FBQUMsY0FBSSxJQUFFLEVBQUU7QUFBRztBQUFHLGdCQUFFLEVBQUU7QUFBQSxpQkFBVSxBQUFPLE1BQVA7QUFBQTtBQUFBO0FBQWEsV0FBRztBQUFBLGFBQVcsR0FBTjtBQUFTLFlBQU0sQUFBTyxPQUFQLFFBQVksTUFBRyxHQUFHLE1BQU0sSUFBRSxLQUFJLEdBQUcsSUFBRyxLQUFJO0FBQUEsY0FBRztBQUFRLFdBQUc7QUFBQTtBQUFBO0FBQUE7QUFBSyxJQUFJLEtBQUcsR0FBRztBQUF3QixZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUcsS0FBRyxFQUFFLGNBQWE7QUFBQyxRQUFFQSxJQUFFLElBQUc7QUFBRyxRQUFFLEVBQUU7QUFBYSxhQUFRLEtBQUs7QUFBRSxNQUFTLEVBQUUsT0FBWCxVQUFnQixHQUFFLEtBQUcsRUFBRTtBQUFJLFdBQU87QUFBQTtBQUFFLFNBQU87QUFBQTtBQUFFLElBQUksS0FBRyxHQUFHLE9BQU0sS0FBRyxNQUFLLEtBQUcsTUFBSyxLQUFHO0FBQUssY0FBYTtBQUFDLE9BQUcsS0FBRyxLQUFHO0FBQUE7QUFDNWIsWUFBWSxHQUFFO0FBQUMsTUFBSSxJQUFFLEdBQUc7QUFBUSxJQUFFO0FBQUksSUFBRSxLQUFLLFNBQVMsZ0JBQWM7QUFBQTtBQUFFLFlBQVksR0FBRSxHQUFFO0FBQUMsU0FBSyxBQUFPLE1BQVAsUUFBVTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQVUsUUFBSSxHQUFFLGFBQVcsT0FBSztBQUFFLFVBQUcsQUFBTyxNQUFQLFFBQVcsR0FBRSxhQUFXLE9BQUs7QUFBRTtBQUFBO0FBQVcsVUFBRSxjQUFZO0FBQUE7QUFBTyxRQUFFLGNBQVksR0FBRSxBQUFPLE1BQVAsUUFBVyxHQUFFLGNBQVk7QUFBRyxRQUFFLEVBQUU7QUFBQTtBQUFBO0FBQVEsWUFBWSxHQUFFLEdBQUU7QUFBQyxPQUFHO0FBQUUsT0FBRyxLQUFHO0FBQUssTUFBRSxFQUFFO0FBQWEsRUFBTyxNQUFQLFFBQVUsQUFBTyxFQUFFLGlCQUFULFFBQXdCLENBQUssR0FBRSxRQUFNLE9BQWIsS0FBa0IsTUFBRyxPQUFJLEVBQUUsZUFBYTtBQUFBO0FBQ3ZZLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBRyxPQUFLLEtBQUcsQUFBSyxNQUFMLFNBQVEsQUFBSSxNQUFKLEdBQU07QUFBQyxRQUFHLEFBQVcsT0FBTyxNQUFsQixZQUFxQixBQUFhLE1BQWI7QUFBZSxXQUFHLEdBQUUsSUFBRTtBQUFXLFFBQUUsRUFBQyxTQUFRLEdBQUUsY0FBYSxHQUFFLE1BQUs7QUFBTSxRQUFHLEFBQU8sT0FBUCxNQUFVO0FBQUMsVUFBRyxBQUFPLE9BQVA7QUFBVSxjQUFNLE1BQU0sRUFBRTtBQUFNLFdBQUc7QUFBRSxTQUFHLGVBQWEsRUFBQyxPQUFNLEdBQUUsY0FBYSxHQUFFLFlBQVc7QUFBQTtBQUFXLFdBQUcsR0FBRyxPQUFLO0FBQUE7QUFBRSxTQUFPLEVBQUU7QUFBQTtBQUFjLElBQUksS0FBRztBQUFHLFlBQVksR0FBRTtBQUFDLElBQUUsY0FBWSxFQUFDLFdBQVUsRUFBRSxlQUFjLGlCQUFnQixNQUFLLGdCQUFlLE1BQUssUUFBTyxFQUFDLFNBQVEsUUFBTSxTQUFRO0FBQUE7QUFDMWEsWUFBWSxHQUFFLEdBQUU7QUFBQyxNQUFFLEVBQUU7QUFBWSxJQUFFLGdCQUFjLEtBQUksR0FBRSxjQUFZLEVBQUMsV0FBVSxFQUFFLFdBQVUsaUJBQWdCLEVBQUUsaUJBQWdCLGdCQUFlLEVBQUUsZ0JBQWUsUUFBTyxFQUFFLFFBQU8sU0FBUSxFQUFFO0FBQUE7QUFBVSxZQUFZLEdBQUUsR0FBRTtBQUFDLFNBQU0sRUFBQyxXQUFVLEdBQUUsTUFBSyxHQUFFLEtBQUksR0FBRSxTQUFRLE1BQUssVUFBUyxNQUFLLE1BQUs7QUFBQTtBQUFNLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBRSxFQUFFO0FBQVksTUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFFBQUUsRUFBRTtBQUFPLFFBQUksSUFBRSxFQUFFO0FBQVEsSUFBTyxNQUFQLE9BQVMsRUFBRSxPQUFLLElBQUcsR0FBRSxPQUFLLEVBQUUsTUFBSyxFQUFFLE9BQUs7QUFBRyxNQUFFLFVBQVE7QUFBQTtBQUFBO0FBQ3JaLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUUsYUFBWSxJQUFFLEVBQUU7QUFBVSxNQUFHLEFBQU8sTUFBUCxRQUFXLEtBQUUsRUFBRSxhQUFZLE1BQUksSUFBRztBQUFDLFFBQUksSUFBRSxNQUFLLEtBQUU7QUFBSyxRQUFFLEVBQUU7QUFBZ0IsUUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFNBQUU7QUFBQyxZQUFJLEtBQUUsRUFBQyxXQUFVLEVBQUUsV0FBVSxNQUFLLEVBQUUsTUFBSyxLQUFJLEVBQUUsS0FBSSxTQUFRLEVBQUUsU0FBUSxVQUFTLEVBQUUsVUFBUyxNQUFLO0FBQU0sUUFBTyxPQUFQLE9BQVMsSUFBRSxLQUFFLEtBQUUsS0FBRSxHQUFFLE9BQUs7QUFBRSxZQUFFLEVBQUU7QUFBQSxlQUFXLEFBQU8sTUFBUDtBQUFVLE1BQU8sT0FBUCxPQUFTLElBQUUsS0FBRSxJQUFFLEtBQUUsR0FBRSxPQUFLO0FBQUE7QUFBTyxVQUFFLEtBQUU7QUFBRSxRQUFFLEVBQUMsV0FBVSxFQUFFLFdBQVUsaUJBQWdCLEdBQUUsZ0JBQWUsSUFBRSxRQUFPLEVBQUUsUUFBTyxTQUFRLEVBQUU7QUFBUyxNQUFFLGNBQVk7QUFBRTtBQUFBO0FBQU8sTUFBRSxFQUFFO0FBQWUsRUFBTyxNQUFQLE9BQVMsRUFBRSxrQkFBZ0IsSUFBRSxFQUFFLE9BQ25mO0FBQUUsSUFBRSxpQkFBZTtBQUFBO0FBQ25CLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFO0FBQVksT0FBRztBQUFHLE1BQUksS0FBRSxFQUFFLGlCQUFnQixLQUFFLEVBQUUsZ0JBQWUsS0FBRSxFQUFFLE9BQU87QUFBUSxNQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMsTUFBRSxPQUFPLFVBQVE7QUFBSyxRQUFJLElBQUUsSUFBRSxLQUFFLEVBQUU7QUFBSyxNQUFFLE9BQUs7QUFBSyxJQUFPLE9BQVAsT0FBUyxLQUFFLEtBQUUsR0FBRSxPQUFLO0FBQUUsU0FBRTtBQUFFLFFBQUksS0FBRSxFQUFFO0FBQVUsUUFBRyxBQUFPLE9BQVAsTUFBUztBQUFDLFdBQUUsR0FBRTtBQUFZLFVBQUksS0FBRSxHQUFFO0FBQWUsYUFBSSxNQUFJLENBQU8sT0FBUCxPQUFTLEdBQUUsa0JBQWdCLEtBQUUsR0FBRSxPQUFLLElBQUUsR0FBRSxpQkFBZTtBQUFBO0FBQUE7QUFBSSxNQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMsU0FBRSxFQUFFO0FBQVUsU0FBRTtBQUFFLFNBQUUsS0FBRSxJQUFFO0FBQUssT0FBRTtBQUFDLFdBQUUsR0FBRTtBQUFLLFVBQUksS0FBRSxHQUFFO0FBQVUsVUFBSSxLQUFFLFFBQUssSUFBRTtBQUFDLFFBQU8sT0FBUCxRQUFXLE1BQUUsR0FBRSxPQUFLO0FBQUEsVUFBQyxXQUFVO0FBQUEsVUFBRSxNQUFLO0FBQUEsVUFBRSxLQUFJLEdBQUU7QUFBQSxVQUFJLFNBQVEsR0FBRTtBQUFBLFVBQVEsVUFBUyxHQUFFO0FBQUEsVUFDcmYsTUFBSztBQUFBO0FBQU8sV0FBRTtBQUFDLGNBQUksS0FBRSxHQUFFLEtBQUU7QUFBRSxlQUFFO0FBQUUsZUFBRTtBQUFFLGtCQUFPLEdBQUU7QUFBQSxpQkFBVTtBQUFFLG1CQUFFLEdBQUU7QUFBUSxrQkFBRyxBQUFhLE9BQU8sT0FBcEIsWUFBc0I7QUFBQyxxQkFBRSxHQUFFLEtBQUssSUFBRSxJQUFFO0FBQUc7QUFBQTtBQUFRLG1CQUFFO0FBQUU7QUFBQSxpQkFBYTtBQUFFLGlCQUFFLFFBQU0sR0FBRSxRQUFNLFFBQU07QUFBQSxpQkFBUTtBQUFFLG1CQUFFLEdBQUU7QUFBUSxtQkFBRSxBQUFhLE9BQU8sT0FBcEIsYUFBc0IsR0FBRSxLQUFLLElBQUUsSUFBRSxNQUFHO0FBQUUsa0JBQUcsQUFBTyxPQUFQLFFBQVUsQUFBUyxPQUFUO0FBQVc7QUFBUSxtQkFBRUEsSUFBRSxJQUFHLElBQUU7QUFBRztBQUFBLGlCQUFhO0FBQUUsbUJBQUc7QUFBQTtBQUFBO0FBQUksUUFBTyxHQUFFLGFBQVQsUUFBb0IsR0FBRSxTQUFPLElBQUcsS0FBRSxFQUFFLFNBQVEsQUFBTyxPQUFQLE9BQVMsRUFBRSxVQUFRLENBQUMsTUFBRyxHQUFFLEtBQUs7QUFBQTtBQUFTLGFBQUUsRUFBQyxXQUFVLElBQUUsTUFBSyxJQUFFLEtBQUksR0FBRSxLQUFJLFNBQVEsR0FBRSxTQUFRLFVBQVMsR0FBRSxVQUFTLE1BQUssUUFBTSxBQUFPLE9BQVAsT0FBVSxNQUFFLEtBQUUsSUFBRSxJQUFFLE1BQUcsS0FBRSxHQUFFLE9BQUssSUFBRSxNQUFHO0FBQUUsV0FBRSxHQUFFO0FBQUssVUFBRyxBQUNwZixPQURvZjtBQUNsZixZQUFHLEtBQUUsRUFBRSxPQUFPLFNBQVEsQUFBTyxPQUFQO0FBQVM7QUFBQTtBQUFXLGVBQUUsR0FBRSxNQUFLLEdBQUUsT0FBSyxNQUFLLEVBQUUsaUJBQWUsSUFBRSxFQUFFLE9BQU8sVUFBUTtBQUFBLGFBQVc7QUFBRyxJQUFPLE9BQVAsUUFBVyxLQUFFO0FBQUcsTUFBRSxZQUFVO0FBQUUsTUFBRSxrQkFBZ0I7QUFBRSxNQUFFLGlCQUFlO0FBQUUsVUFBSTtBQUFFLE1BQUUsUUFBTTtBQUFFLE1BQUUsZ0JBQWM7QUFBQTtBQUFBO0FBQUcsWUFBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUUsRUFBRTtBQUFRLElBQUUsVUFBUTtBQUFLLE1BQUcsQUFBTyxNQUFQO0FBQVMsU0FBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLFVBQUksSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFO0FBQVMsVUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFVBQUUsV0FBUztBQUFLLFlBQUU7QUFBRSxZQUFHLEFBQWEsT0FBTyxNQUFwQjtBQUFzQixnQkFBTSxNQUFNLEVBQUUsS0FBSTtBQUFJLFVBQUUsS0FBSztBQUFBO0FBQUE7QUFBQTtBQUFLLElBQUksS0FBSSxJQUFJLEdBQUcsWUFBVztBQUMzYixZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLEVBQUU7QUFBYyxNQUFFLEVBQUUsR0FBRTtBQUFHLE1BQUUsQUFBTyxNQUFQLFFBQVUsQUFBUyxNQUFULFNBQVcsSUFBRUEsSUFBRSxJQUFHLEdBQUU7QUFBRyxJQUFFLGdCQUFjO0FBQUUsRUFBSSxFQUFFLFVBQU4sS0FBYyxHQUFFLFlBQVksWUFBVTtBQUFBO0FBQzNJLElBQUksS0FBRyxFQUFDLFdBQVUsU0FBUyxHQUFFO0FBQUMsU0FBTyxLQUFFLEVBQUUsbUJBQWlCLEdBQUcsT0FBSyxJQUFFO0FBQUEsR0FBSSxpQkFBZ0IsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUUsRUFBRTtBQUFnQixNQUFJLElBQUUsTUFBSyxJQUFFLEdBQUcsSUFBRyxLQUFFLEdBQUcsR0FBRTtBQUFHLEtBQUUsVUFBUTtBQUFFLEVBQVMsTUFBVCxVQUFZLEFBQU8sTUFBUCxRQUFXLElBQUUsV0FBUztBQUFHLEtBQUcsR0FBRTtBQUFHLEtBQUcsR0FBRSxHQUFFO0FBQUEsR0FBSSxxQkFBb0IsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUUsRUFBRTtBQUFnQixNQUFJLElBQUUsTUFBSyxJQUFFLEdBQUcsSUFBRyxLQUFFLEdBQUcsR0FBRTtBQUFHLEtBQUUsTUFBSTtBQUFFLEtBQUUsVUFBUTtBQUFFLEVBQVMsTUFBVCxVQUFZLEFBQU8sTUFBUCxRQUFXLElBQUUsV0FBUztBQUFHLEtBQUcsR0FBRTtBQUFHLEtBQUcsR0FBRSxHQUFFO0FBQUEsR0FBSSxvQkFBbUIsU0FBUyxHQUFFLEdBQUU7QUFBQyxNQUFFLEVBQUU7QUFBZ0IsTUFBSSxJQUFFLE1BQUssSUFBRSxHQUFHLElBQUcsSUFBRSxHQUFHLEdBQUU7QUFBRyxJQUFFLE1BQUk7QUFBRSxFQUFTLE1BQVQsVUFBWSxBQUFPLE1BQVAsUUFBVyxHQUFFLFdBQ2pmO0FBQUcsS0FBRyxHQUFFO0FBQUcsS0FBRyxHQUFFLEdBQUU7QUFBQTtBQUFLLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUUsSUFBRTtBQUFDLE1BQUUsRUFBRTtBQUFVLFNBQU0sQUFBYSxPQUFPLEVBQUUsMEJBQXRCLGFBQTRDLEVBQUUsc0JBQXNCLEdBQUUsSUFBRSxNQUFHLEVBQUUsYUFBVyxFQUFFLFVBQVUsdUJBQXFCLENBQUMsR0FBRyxHQUFFLE1BQUksQ0FBQyxHQUFHLEdBQUUsTUFBRztBQUFBO0FBQ2xOLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUUsT0FBRyxJQUFFO0FBQUcsTUFBSSxLQUFFLEVBQUU7QUFBWSxFQUFXLE9BQU8sT0FBbEIsWUFBcUIsQUFBTyxPQUFQLE9BQVMsS0FBRSxHQUFHLE1BQUksS0FBRSxHQUFHLEtBQUcsS0FBRyxFQUFFLFNBQVEsSUFBRSxFQUFFLGNBQWEsS0FBRyxLQUFFLEFBQU8sTUFBUCxRQUFVLEFBQVMsTUFBVCxVQUFZLEdBQUcsR0FBRSxLQUFHO0FBQUksTUFBRSxJQUFJLEVBQUUsR0FBRTtBQUFHLElBQUUsZ0JBQWMsQUFBTyxFQUFFLFVBQVQsUUFBZ0IsQUFBUyxFQUFFLFVBQVgsU0FBaUIsRUFBRSxRQUFNO0FBQUssSUFBRSxVQUFRO0FBQUcsSUFBRSxZQUFVO0FBQUUsSUFBRSxrQkFBZ0I7QUFBRSxPQUFJLEtBQUUsRUFBRSxXQUFVLEVBQUUsOENBQTRDLEdBQUUsRUFBRSw0Q0FBMEM7QUFBRyxTQUFPO0FBQUE7QUFDM1osWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBRSxFQUFFO0FBQU0sRUFBYSxPQUFPLEVBQUUsOEJBQXRCLGNBQWlELEVBQUUsMEJBQTBCLEdBQUU7QUFBRyxFQUFhLE9BQU8sRUFBRSxxQ0FBdEIsY0FBd0QsRUFBRSxpQ0FBaUMsR0FBRTtBQUFHLElBQUUsVUFBUSxLQUFHLEdBQUcsb0JBQW9CLEdBQUUsRUFBRSxPQUFNO0FBQUE7QUFDL1AsWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUU7QUFBVSxJQUFFLFFBQU07QUFBRSxJQUFFLFFBQU0sRUFBRTtBQUFjLElBQUUsT0FBSztBQUFHLEtBQUc7QUFBRyxNQUFJLEtBQUUsRUFBRTtBQUFZLEVBQVcsT0FBTyxPQUFsQixZQUFxQixBQUFPLE9BQVAsT0FBUyxFQUFFLFVBQVEsR0FBRyxNQUFJLE1BQUUsR0FBRyxLQUFHLEtBQUcsRUFBRSxTQUFRLEVBQUUsVUFBUSxHQUFHLEdBQUU7QUFBSSxLQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUcsSUFBRSxRQUFNLEVBQUU7QUFBYyxPQUFFLEVBQUU7QUFBeUIsRUFBYSxPQUFPLE9BQXBCLGNBQXdCLElBQUcsR0FBRSxHQUFFLElBQUUsSUFBRyxFQUFFLFFBQU0sRUFBRTtBQUFlLEVBQWEsT0FBTyxFQUFFLDZCQUF0QixjQUFnRCxBQUFhLE9BQU8sRUFBRSw0QkFBdEIsY0FBK0MsQUFBYSxPQUFPLEVBQUUsOEJBQXRCLGNBQWlELEFBQWEsT0FBTyxFQUFFLHVCQUF0QixjQUNqZCxLQUFFLEVBQUUsT0FBTSxBQUFhLE9BQU8sRUFBRSx1QkFBdEIsY0FBMEMsRUFBRSxzQkFBcUIsQUFBYSxPQUFPLEVBQUUsOEJBQXRCLGNBQWlELEVBQUUsNkJBQTRCLE1BQUksRUFBRSxTQUFPLEdBQUcsb0JBQW9CLEdBQUUsRUFBRSxPQUFNLE9BQU0sR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsUUFBTSxFQUFFO0FBQWUsRUFBYSxPQUFPLEVBQUUsc0JBQXRCLGNBQTBDLEdBQUUsU0FBTztBQUFBO0FBQUcsSUFBSSxLQUFHLE1BQU07QUFDdlQsWUFBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUUsRUFBRTtBQUFJLE1BQUcsQUFBTyxNQUFQLFFBQVUsQUFBYSxPQUFPLE1BQXBCLGNBQXVCLEFBQVcsT0FBTyxNQUFsQixVQUFvQjtBQUFDLFFBQUcsRUFBRSxRQUFPO0FBQUMsVUFBRSxFQUFFO0FBQU8sVUFBRyxHQUFFO0FBQUMsWUFBRyxBQUFJLEVBQUUsUUFBTjtBQUFVLGdCQUFNLE1BQU0sRUFBRTtBQUFNLFlBQUksSUFBRSxFQUFFO0FBQUE7QUFBVSxVQUFHLENBQUM7QUFBRSxjQUFNLE1BQU0sRUFBRSxLQUFJO0FBQUksVUFBSSxJQUFFLEtBQUc7QUFBRSxVQUFHLEFBQU8sTUFBUCxRQUFVLEFBQU8sRUFBRSxRQUFULFFBQWMsQUFBYSxPQUFPLEVBQUUsUUFBdEIsY0FBMkIsRUFBRSxJQUFJLGVBQWE7QUFBRSxlQUFPLEVBQUU7QUFBSSxVQUFFLFNBQVMsSUFBRTtBQUFDLFlBQUksS0FBRSxFQUFFO0FBQUssZUFBSSxNQUFLLE1BQUUsRUFBRSxPQUFLO0FBQUksUUFBTyxPQUFQLE9BQVMsT0FBTyxHQUFFLEtBQUcsR0FBRSxLQUFHO0FBQUE7QUFBRyxRQUFFLGFBQVc7QUFBRSxhQUFPO0FBQUE7QUFBRSxRQUFHLEFBQVcsT0FBTyxNQUFsQjtBQUFvQixZQUFNLE1BQU0sRUFBRTtBQUFNLFFBQUcsQ0FBQyxFQUFFO0FBQU8sWUFBTSxNQUFNLEVBQUUsS0FBSTtBQUFBO0FBQUssU0FBTztBQUFBO0FBQ2hlLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBRyxBQUFhLEVBQUUsU0FBZjtBQUFvQixVQUFNLE1BQU0sRUFBRSxJQUFHLEFBQW9CLE9BQU8sVUFBVSxTQUFTLEtBQUssT0FBbkQsb0JBQXNELHVCQUFxQixPQUFPLEtBQUssR0FBRyxLQUFLLFFBQU0sTUFBSTtBQUFBO0FBQ2xLLFlBQVksR0FBRTtBQUFDLGFBQVcsSUFBRSxJQUFFO0FBQUMsUUFBRyxHQUFFO0FBQUMsVUFBSSxLQUFFLEdBQUU7QUFBVyxNQUFPLE9BQVAsT0FBVSxJQUFFLGFBQVcsSUFBRSxHQUFFLGFBQVcsTUFBRyxHQUFFLGNBQVksR0FBRSxhQUFXO0FBQUUsU0FBRSxhQUFXO0FBQUssU0FBRSxRQUFNO0FBQUE7QUFBQTtBQUFHLGFBQVcsSUFBRSxJQUFFO0FBQUMsUUFBRyxDQUFDO0FBQUUsYUFBTztBQUFLLFdBQUssQUFBTyxPQUFQO0FBQVUsUUFBRSxJQUFFLEtBQUcsS0FBRSxHQUFFO0FBQVEsV0FBTztBQUFBO0FBQUssYUFBVyxJQUFFLElBQUU7QUFBQyxTQUFJLEtBQUUsSUFBSSxPQUFJLEFBQU8sT0FBUDtBQUFVLE1BQU8sR0FBRSxRQUFULE9BQWEsR0FBRSxJQUFJLEdBQUUsS0FBSSxNQUFHLEdBQUUsSUFBSSxHQUFFLE9BQU0sS0FBRyxLQUFFLEdBQUU7QUFBUSxXQUFPO0FBQUE7QUFBRSxhQUFXLElBQUUsSUFBRTtBQUFDLFNBQUUsR0FBRyxJQUFFO0FBQUcsT0FBRSxRQUFNO0FBQUUsT0FBRSxVQUFRO0FBQUssV0FBTztBQUFBO0FBQUUsY0FBVyxJQUFFLElBQUUsSUFBRTtBQUFDLE9BQUUsUUFBTTtBQUFFLFFBQUcsQ0FBQztBQUFFLGFBQU87QUFBRSxTQUFFLEdBQUU7QUFBVSxRQUFHLEFBQU8sT0FBUDtBQUFTLGFBQU8sS0FBRSxHQUFFLE9BQU0sS0FBRSxLQUFHLElBQUUsUUFBTSxHQUNwZixNQUFHO0FBQUUsT0FBRSxRQUFNO0FBQUUsV0FBTztBQUFBO0FBQUUsY0FBVyxJQUFFO0FBQUMsU0FBRyxBQUFPLEdBQUUsY0FBVCxRQUFxQixJQUFFLFFBQU07QUFBRyxXQUFPO0FBQUE7QUFBRSxjQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxRQUFHLEFBQU8sT0FBUCxRQUFVLEFBQUksR0FBRSxRQUFOO0FBQVUsYUFBTyxLQUFFLEdBQUcsSUFBRSxHQUFFLE1BQUssS0FBRyxHQUFFLFNBQU8sSUFBRTtBQUFFLFNBQUUsRUFBRSxJQUFFO0FBQUcsT0FBRSxTQUFPO0FBQUUsV0FBTztBQUFBO0FBQUUsYUFBVyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsUUFBRyxBQUFPLE9BQVAsUUFBVSxHQUFFLGdCQUFjLEdBQUU7QUFBSyxhQUFPLEtBQUUsRUFBRSxJQUFFLEdBQUUsUUFBTyxHQUFFLE1BQUksR0FBRyxJQUFFLElBQUUsS0FBRyxHQUFFLFNBQU8sSUFBRTtBQUFFLFNBQUUsR0FBRyxHQUFFLE1BQUssR0FBRSxLQUFJLEdBQUUsT0FBTSxNQUFLLEdBQUUsTUFBSztBQUFHLE9BQUUsTUFBSSxHQUFHLElBQUUsSUFBRTtBQUFHLE9BQUUsU0FBTztBQUFFLFdBQU87QUFBQTtBQUFFLGNBQVcsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLFFBQUcsQUFBTyxPQUFQLFFBQVUsQUFBSSxHQUFFLFFBQU4sS0FBVyxHQUFFLFVBQVUsa0JBQWdCLEdBQUUsaUJBQWUsR0FBRSxVQUFVLG1CQUFpQixHQUFFO0FBQWUsYUFBTyxLQUNyZ0IsR0FBRyxJQUFFLEdBQUUsTUFBSyxLQUFHLEdBQUUsU0FBTyxJQUFFO0FBQUUsU0FBRSxFQUFFLElBQUUsR0FBRSxZQUFVO0FBQUksT0FBRSxTQUFPO0FBQUUsV0FBTztBQUFBO0FBQUUsY0FBVyxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxRQUFHLEFBQU8sT0FBUCxRQUFVLEFBQUksR0FBRSxRQUFOO0FBQVUsYUFBTyxLQUFFLEdBQUcsSUFBRSxHQUFFLE1BQUssSUFBRSxLQUFHLEdBQUUsU0FBTyxJQUFFO0FBQUUsU0FBRSxFQUFFLElBQUU7QUFBRyxPQUFFLFNBQU87QUFBRSxXQUFPO0FBQUE7QUFBRSxjQUFXLElBQUUsSUFBRSxJQUFFO0FBQUMsUUFBRyxBQUFXLE9BQU8sT0FBbEIsWUFBcUIsQUFBVyxPQUFPLE9BQWxCO0FBQW9CLGFBQU8sS0FBRSxHQUFHLEtBQUcsSUFBRSxHQUFFLE1BQUssS0FBRyxHQUFFLFNBQU8sSUFBRTtBQUFFLFFBQUcsQUFBVyxPQUFPLE9BQWxCLFlBQXFCLEFBQU8sT0FBUCxNQUFTO0FBQUMsY0FBTyxHQUFFO0FBQUEsYUFBZTtBQUFHLGlCQUFPLEtBQUUsR0FBRyxHQUFFLE1BQUssR0FBRSxLQUFJLEdBQUUsT0FBTSxNQUFLLEdBQUUsTUFBSyxLQUFHLEdBQUUsTUFBSSxHQUFHLElBQUUsTUFBSyxLQUFHLEdBQUUsU0FBTyxJQUFFO0FBQUEsYUFBTztBQUFHLGlCQUFPLEtBQUUsR0FBRyxJQUFFLEdBQUUsTUFBSyxLQUFHLEdBQUUsU0FBTyxJQUFFO0FBQUE7QUFBRSxVQUFHLEdBQUcsT0FBSSxHQUFHO0FBQUcsZUFBTyxLQUFFLEdBQUcsSUFDbmYsR0FBRSxNQUFLLElBQUUsT0FBTSxHQUFFLFNBQU8sSUFBRTtBQUFFLFNBQUcsSUFBRTtBQUFBO0FBQUcsV0FBTztBQUFBO0FBQUssY0FBVyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsUUFBSSxLQUFFLEFBQU8sT0FBUCxPQUFTLEdBQUUsTUFBSTtBQUFLLFFBQUcsQUFBVyxPQUFPLE9BQWxCLFlBQXFCLEFBQVcsT0FBTyxPQUFsQjtBQUFvQixhQUFPLEFBQU8sT0FBUCxPQUFTLE9BQUssR0FBRSxJQUFFLElBQUUsS0FBRyxJQUFFO0FBQUcsUUFBRyxBQUFXLE9BQU8sT0FBbEIsWUFBcUIsQUFBTyxPQUFQLE1BQVM7QUFBQyxjQUFPLEdBQUU7QUFBQSxhQUFlO0FBQUcsaUJBQU8sR0FBRSxRQUFNLEtBQUUsR0FBRSxTQUFPLEtBQUcsR0FBRSxJQUFFLElBQUUsR0FBRSxNQUFNLFVBQVMsSUFBRSxNQUFHLEVBQUUsSUFBRSxJQUFFLElBQUUsTUFBRztBQUFBLGFBQVU7QUFBRyxpQkFBTyxHQUFFLFFBQU0sS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLE1BQUc7QUFBQTtBQUFLLFVBQUcsR0FBRyxPQUFJLEdBQUc7QUFBRyxlQUFPLEFBQU8sT0FBUCxPQUFTLE9BQUssR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQU0sU0FBRyxJQUFFO0FBQUE7QUFBRyxXQUFPO0FBQUE7QUFBSyxjQUFXLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLFFBQUcsQUFBVyxPQUFPLE9BQWxCLFlBQXFCLEFBQVcsT0FBTyxPQUFsQjtBQUFvQixhQUFPLEtBQUUsR0FBRSxJQUFJLE9BQ3RmLE1BQUssR0FBRSxJQUFFLElBQUUsS0FBRyxJQUFFO0FBQUcsUUFBRyxBQUFXLE9BQU8sT0FBbEIsWUFBcUIsQUFBTyxPQUFQLE1BQVM7QUFBQyxjQUFPLEdBQUU7QUFBQSxhQUFlO0FBQUcsaUJBQU8sS0FBRSxHQUFFLElBQUksQUFBTyxHQUFFLFFBQVQsT0FBYSxLQUFFLEdBQUUsUUFBTSxNQUFLLEdBQUUsU0FBTyxLQUFHLEdBQUUsSUFBRSxJQUFFLEdBQUUsTUFBTSxVQUFTLElBQUUsR0FBRSxPQUFLLEVBQUUsSUFBRSxJQUFFLElBQUU7QUFBQSxhQUFRO0FBQUcsaUJBQU8sS0FBRSxHQUFFLElBQUksQUFBTyxHQUFFLFFBQVQsT0FBYSxLQUFFLEdBQUUsUUFBTSxNQUFLLEdBQUUsSUFBRSxJQUFFLElBQUU7QUFBQTtBQUFHLFVBQUcsR0FBRyxPQUFJLEdBQUc7QUFBRyxlQUFPLEtBQUUsR0FBRSxJQUFJLE9BQUksTUFBSyxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBTSxTQUFHLElBQUU7QUFBQTtBQUFHLFdBQU87QUFBQTtBQUFLLGNBQVcsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGFBQVEsS0FBRSxNQUFLLEtBQUUsTUFBSyxLQUFFLElBQUUsS0FBRSxLQUFFLEdBQUUsS0FBRSxNQUFLLEFBQU8sT0FBUCxRQUFVLEtBQUUsR0FBRSxRQUFPLE1BQUk7QUFBQyxTQUFFLFFBQU0sS0FBRyxNQUFFLElBQUUsS0FBRSxRQUFNLEtBQUUsR0FBRTtBQUFRLFVBQUksS0FBRSxHQUFFLElBQUUsSUFBRSxHQUFFLEtBQUc7QUFBRyxVQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMsUUFBTyxPQUFQLFFBQVcsTUFBRTtBQUFHO0FBQUE7QUFBTSxXQUFHLE1BQUcsQUFDamYsR0FBRSxjQUQrZSxRQUNwZSxFQUFFLElBQUU7QUFBRyxXQUFFLEdBQUUsSUFBRSxJQUFFO0FBQUcsTUFBTyxPQUFQLE9BQVMsS0FBRSxLQUFFLEdBQUUsVUFBUTtBQUFFLFdBQUU7QUFBRSxXQUFFO0FBQUE7QUFBRSxRQUFHLE9BQUksR0FBRTtBQUFPLGFBQU8sRUFBRSxJQUFFLEtBQUc7QUFBRSxRQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMsYUFBSyxLQUFFLEdBQUUsUUFBTztBQUFJLGFBQUUsR0FBRSxJQUFFLEdBQUUsS0FBRyxLQUFHLEFBQU8sT0FBUCxRQUFXLE1BQUUsR0FBRSxJQUFFLElBQUUsS0FBRyxBQUFPLE9BQVAsT0FBUyxLQUFFLEtBQUUsR0FBRSxVQUFRLElBQUUsS0FBRTtBQUFHLGFBQU87QUFBQTtBQUFFLFNBQUksS0FBRSxFQUFFLElBQUUsS0FBRyxLQUFFLEdBQUUsUUFBTztBQUFJLFdBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxHQUFFLEtBQUcsS0FBRyxBQUFPLE9BQVAsUUFBVyxNQUFHLEFBQU8sR0FBRSxjQUFULFFBQW9CLEdBQUUsT0FBTyxBQUFPLEdBQUUsUUFBVCxPQUFhLEtBQUUsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsS0FBRyxBQUFPLE9BQVAsT0FBUyxLQUFFLEtBQUUsR0FBRSxVQUFRLElBQUUsS0FBRTtBQUFHLFNBQUcsR0FBRSxRQUFRLFNBQVMsSUFBRTtBQUFDLGFBQU8sRUFBRSxJQUFFO0FBQUE7QUFBSyxXQUFPO0FBQUE7QUFBRSxjQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxRQUFJLEtBQUUsR0FBRztBQUFHLFFBQUcsQUFBYSxPQUFPLE9BQXBCO0FBQXNCLFlBQU0sTUFBTSxFQUFFO0FBQU0sU0FBRSxHQUFFLEtBQUs7QUFBRyxRQUFHLEFBQ2xmLE1BRGtmO0FBQ2hmLFlBQU0sTUFBTSxFQUFFO0FBQU0sYUFBUSxLQUFFLEtBQUUsTUFBSyxLQUFFLElBQUUsS0FBRSxLQUFFLEdBQUUsS0FBRSxNQUFLLEtBQUUsR0FBRSxRQUFPLEFBQU8sT0FBUCxRQUFVLENBQUMsR0FBRSxNQUFLLE1BQUksS0FBRSxHQUFFLFFBQU87QUFBQyxTQUFFLFFBQU0sS0FBRyxNQUFFLElBQUUsS0FBRSxRQUFNLEtBQUUsR0FBRTtBQUFRLFVBQUksS0FBRSxHQUFFLElBQUUsSUFBRSxHQUFFLE9BQU07QUFBRyxVQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMsUUFBTyxPQUFQLFFBQVcsTUFBRTtBQUFHO0FBQUE7QUFBTSxXQUFHLE1BQUcsQUFBTyxHQUFFLGNBQVQsUUFBb0IsRUFBRSxJQUFFO0FBQUcsV0FBRSxHQUFFLElBQUUsSUFBRTtBQUFHLE1BQU8sT0FBUCxPQUFTLEtBQUUsS0FBRSxHQUFFLFVBQVE7QUFBRSxXQUFFO0FBQUUsV0FBRTtBQUFBO0FBQUUsUUFBRyxHQUFFO0FBQUssYUFBTyxFQUFFLElBQUUsS0FBRztBQUFFLFFBQUcsQUFBTyxPQUFQLE1BQVM7QUFBQyxhQUFLLENBQUMsR0FBRSxNQUFLLE1BQUksS0FBRSxHQUFFO0FBQU8sYUFBRSxHQUFFLElBQUUsR0FBRSxPQUFNLEtBQUcsQUFBTyxPQUFQLFFBQVcsTUFBRSxHQUFFLElBQUUsSUFBRSxLQUFHLEFBQU8sT0FBUCxPQUFTLEtBQUUsS0FBRSxHQUFFLFVBQVEsSUFBRSxLQUFFO0FBQUcsYUFBTztBQUFBO0FBQUUsU0FBSSxLQUFFLEVBQUUsSUFBRSxLQUFHLENBQUMsR0FBRSxNQUFLLE1BQUksS0FBRSxHQUFFO0FBQU8sV0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsT0FBTSxLQUFHLEFBQU8sT0FBUCxRQUFXLE1BQUcsQUFBTyxHQUFFLGNBQVQsUUFDdmUsR0FBRSxPQUFPLEFBQU8sR0FBRSxRQUFULE9BQWEsS0FBRSxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxLQUFHLEFBQU8sT0FBUCxPQUFTLEtBQUUsS0FBRSxHQUFFLFVBQVEsSUFBRSxLQUFFO0FBQUcsU0FBRyxHQUFFLFFBQVEsU0FBUyxJQUFFO0FBQUMsYUFBTyxFQUFFLElBQUU7QUFBQTtBQUFLLFdBQU87QUFBQTtBQUFFLFNBQU8sU0FBUyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsUUFBSSxLQUFFLEFBQVcsT0FBTyxPQUFsQixZQUFxQixBQUFPLE9BQVAsUUFBVSxHQUFFLFNBQU8sTUFBSSxBQUFPLEdBQUUsUUFBVDtBQUFhLFVBQUksTUFBRSxHQUFFLE1BQU07QUFBVSxRQUFJLEtBQUUsQUFBVyxPQUFPLE9BQWxCLFlBQXFCLEFBQU8sT0FBUDtBQUFTLFFBQUc7QUFBRSxjQUFPLEdBQUU7QUFBQSxhQUFlO0FBQUcsYUFBRTtBQUFDLGlCQUFFLEdBQUU7QUFBSSxpQkFBSSxLQUFFLElBQUUsQUFBTyxPQUFQLFFBQVU7QUFBQyxrQkFBRyxHQUFFLFFBQU0sSUFBRTtBQUFDLHdCQUFPLEdBQUU7QUFBQSx1QkFBVTtBQUFFLHdCQUFHLEdBQUUsU0FBTyxJQUFHO0FBQUMsd0JBQUUsSUFBRSxHQUFFO0FBQVMsMkJBQUUsRUFBRSxJQUFFLEdBQUUsTUFBTTtBQUFVLHlCQUFFLFNBQU87QUFBRSwyQkFBRTtBQUFFO0FBQUE7QUFBUTtBQUFBO0FBQWMsd0JBQUcsR0FBRSxnQkFBYyxHQUFFLE1BQUs7QUFBQyx3QkFBRSxJQUFFLEdBQUU7QUFDNWUsMkJBQUUsRUFBRSxJQUFFLEdBQUU7QUFBTyx5QkFBRSxNQUFJLEdBQUcsSUFBRSxJQUFFO0FBQUcseUJBQUUsU0FBTztBQUFFLDJCQUFFO0FBQUU7QUFBQTtBQUFBO0FBQVMsa0JBQUUsSUFBRTtBQUFHO0FBQUE7QUFBVyxrQkFBRSxJQUFFO0FBQUcsbUJBQUUsR0FBRTtBQUFBO0FBQVEsZUFBRSxTQUFPLEtBQUksTUFBRSxHQUFHLEdBQUUsTUFBTSxVQUFTLEdBQUUsTUFBSyxJQUFFLEdBQUUsTUFBSyxHQUFFLFNBQU8sSUFBRSxLQUFFLE1BQUksTUFBRSxHQUFHLEdBQUUsTUFBSyxHQUFFLEtBQUksR0FBRSxPQUFNLE1BQUssR0FBRSxNQUFLLEtBQUcsR0FBRSxNQUFJLEdBQUcsSUFBRSxJQUFFLEtBQUcsR0FBRSxTQUFPLElBQUUsS0FBRTtBQUFBO0FBQUcsaUJBQU8sR0FBRTtBQUFBLGFBQVE7QUFBRyxhQUFFO0FBQUMsaUJBQUksS0FBRSxHQUFFLEtBQUksQUFBTyxPQUFQLFFBQVU7QUFBQyxrQkFBRyxHQUFFLFFBQU07QUFBRSxvQkFBRyxBQUFJLEdBQUUsUUFBTixLQUFXLEdBQUUsVUFBVSxrQkFBZ0IsR0FBRSxpQkFBZSxHQUFFLFVBQVUsbUJBQWlCLEdBQUUsZ0JBQWU7QUFBQyxvQkFBRSxJQUFFLEdBQUU7QUFBUyx1QkFBRSxFQUFFLElBQUUsR0FBRSxZQUFVO0FBQUkscUJBQUUsU0FBTztBQUFFLHVCQUFFO0FBQUU7QUFBQSx1QkFBWTtBQUFDLG9CQUFFLElBQUU7QUFBRztBQUFBO0FBQUE7QUFBVyxrQkFBRSxJQUFFO0FBQUcsbUJBQUUsR0FBRTtBQUFBO0FBQVEsaUJBQ3BmLEdBQUcsSUFBRSxHQUFFLE1BQUs7QUFBRyxlQUFFLFNBQU87QUFBRSxpQkFBRTtBQUFBO0FBQUUsaUJBQU8sR0FBRTtBQUFBO0FBQUcsUUFBRyxBQUFXLE9BQU8sT0FBbEIsWUFBcUIsQUFBVyxPQUFPLE9BQWxCO0FBQW9CLGFBQU8sS0FBRSxLQUFHLElBQUUsQUFBTyxPQUFQLFFBQVUsQUFBSSxHQUFFLFFBQU4sSUFBVyxHQUFFLElBQUUsR0FBRSxVQUFTLEtBQUUsRUFBRSxJQUFFLEtBQUcsR0FBRSxTQUFPLElBQUUsS0FBRSxNQUFJLEdBQUUsSUFBRSxLQUFHLEtBQUUsR0FBRyxJQUFFLEdBQUUsTUFBSyxLQUFHLEdBQUUsU0FBTyxJQUFFLEtBQUUsS0FBRyxHQUFFO0FBQUcsUUFBRyxHQUFHO0FBQUcsYUFBTyxHQUFFLElBQUUsSUFBRSxJQUFFO0FBQUcsUUFBRyxHQUFHO0FBQUcsYUFBTyxHQUFFLElBQUUsSUFBRSxJQUFFO0FBQUcsVUFBRyxHQUFHLElBQUU7QUFBRyxRQUFHLEFBQWMsT0FBTyxPQUFyQixlQUF3QixDQUFDO0FBQUUsY0FBTyxHQUFFO0FBQUEsYUFBVTtBQUFBLGFBQU87QUFBQSxhQUFRO0FBQUEsYUFBTztBQUFBLGFBQVE7QUFBRyxnQkFBTSxNQUFNLEVBQUUsS0FBSSxHQUFHLEdBQUUsU0FBTztBQUFBO0FBQWUsV0FBTyxFQUFFLElBQUU7QUFBQTtBQUFBO0FBQUksSUFBSSxLQUFHLEdBQUcsT0FBSSxLQUFHLEdBQUcsUUFBSSxLQUFHLElBQUcsS0FBRyxHQUFHLEtBQUksS0FBRyxHQUFHLEtBQUksS0FBRyxHQUFHO0FBQ3RkLFlBQVksR0FBRTtBQUFDLE1BQUcsTUFBSTtBQUFHLFVBQU0sTUFBTSxFQUFFO0FBQU0sU0FBTztBQUFBO0FBQUUsWUFBWSxHQUFFLEdBQUU7QUFBQyxJQUFFLElBQUc7QUFBRyxJQUFFLElBQUc7QUFBRyxJQUFFLElBQUc7QUFBSSxNQUFFLEVBQUU7QUFBUyxVQUFPO0FBQUEsU0FBUTtBQUFBLFNBQU87QUFBRyxVQUFHLEtBQUUsRUFBRSxtQkFBaUIsRUFBRSxlQUFhLEdBQUcsTUFBSztBQUFJO0FBQUE7QUFBYyxVQUFFLEFBQUksTUFBSixJQUFNLEVBQUUsYUFBVyxHQUFFLElBQUUsRUFBRSxnQkFBYyxNQUFLLElBQUUsRUFBRSxTQUFRLElBQUUsR0FBRyxHQUFFO0FBQUE7QUFBRyxJQUFFO0FBQUksSUFBRSxJQUFHO0FBQUE7QUFBRyxjQUFhO0FBQUMsSUFBRTtBQUFJLElBQUU7QUFBSSxJQUFFO0FBQUE7QUFBSSxZQUFZLEdBQUU7QUFBQyxLQUFHLEdBQUc7QUFBUyxNQUFJLElBQUUsR0FBRyxHQUFHO0FBQVMsTUFBSSxJQUFFLEdBQUcsR0FBRSxFQUFFO0FBQU0sUUFBSSxLQUFJLEdBQUUsSUFBRyxJQUFHLEVBQUUsSUFBRztBQUFBO0FBQUksWUFBWSxHQUFFO0FBQUMsS0FBRyxZQUFVLEtBQUksR0FBRSxLQUFJLEVBQUU7QUFBQTtBQUFLLElBQUksSUFBRSxHQUFHO0FBQzljLFlBQVksR0FBRTtBQUFDLFdBQVEsSUFBRSxHQUFFLEFBQU8sTUFBUCxRQUFVO0FBQUMsUUFBRyxBQUFLLEVBQUUsUUFBUCxJQUFXO0FBQUMsVUFBSSxJQUFFLEVBQUU7QUFBYyxVQUFHLEFBQU8sTUFBUCxRQUFXLEtBQUUsRUFBRSxZQUFXLEFBQU8sTUFBUCxRQUFVLEFBQU8sRUFBRSxTQUFULFFBQWUsQUFBTyxFQUFFLFNBQVQ7QUFBZSxlQUFPO0FBQUEsZUFBVSxBQUFLLEVBQUUsUUFBUCxNQUFZLEFBQVMsRUFBRSxjQUFjLGdCQUF6QixRQUFxQztBQUFDLFVBQUcsQUFBSyxHQUFFLFFBQU0sUUFBYjtBQUFpQixlQUFPO0FBQUEsZUFBVSxBQUFPLEVBQUUsVUFBVCxNQUFlO0FBQUMsUUFBRSxNQUFNLFNBQU87QUFBRSxVQUFFLEVBQUU7QUFBTTtBQUFBO0FBQVMsUUFBRyxNQUFJO0FBQUU7QUFBTSxXQUFLLEFBQU8sRUFBRSxZQUFULFFBQWtCO0FBQUMsVUFBRyxBQUFPLEVBQUUsV0FBVCxRQUFpQixFQUFFLFdBQVM7QUFBRSxlQUFPO0FBQUssVUFBRSxFQUFFO0FBQUE7QUFBTyxNQUFFLFFBQVEsU0FBTyxFQUFFO0FBQU8sUUFBRSxFQUFFO0FBQUE7QUFBUSxTQUFPO0FBQUE7QUFBSyxJQUFJLEtBQUcsTUFBSyxLQUFHLE1BQUssS0FBRztBQUNwZCxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxHQUFHLEdBQUUsTUFBSyxNQUFLO0FBQUcsSUFBRSxjQUFZO0FBQVUsSUFBRSxPQUFLO0FBQVUsSUFBRSxZQUFVO0FBQUUsSUFBRSxTQUFPO0FBQUUsSUFBRSxRQUFNO0FBQUUsRUFBTyxFQUFFLGVBQVQsT0FBcUIsR0FBRSxXQUFXLGFBQVcsR0FBRSxFQUFFLGFBQVcsS0FBRyxFQUFFLGNBQVksRUFBRSxhQUFXO0FBQUE7QUFBRSxZQUFZLEdBQUUsR0FBRTtBQUFDLFVBQU8sRUFBRTtBQUFBLFNBQVU7QUFBRSxVQUFJLElBQUUsRUFBRTtBQUFLLFVBQUUsQUFBSSxFQUFFLGFBQU4sS0FBZ0IsRUFBRSxrQkFBZ0IsRUFBRSxTQUFTLGdCQUFjLE9BQUs7QUFBRSxhQUFPLEFBQU8sTUFBUCxPQUFVLEdBQUUsWUFBVSxHQUFFLFFBQUk7QUFBQSxTQUFRO0FBQUUsYUFBTyxJQUFFLEFBQUssRUFBRSxpQkFBUCxNQUFxQixBQUFJLEVBQUUsYUFBTixJQUFlLE9BQUssR0FBRSxBQUFPLE1BQVAsT0FBVSxHQUFFLFlBQVUsR0FBRSxRQUFJO0FBQUEsU0FBUTtBQUFHLGFBQU07QUFBQTtBQUFXLGFBQU07QUFBQTtBQUFBO0FBQ3ZlLFlBQVksR0FBRTtBQUFDLE1BQUcsSUFBRztBQUFDLFFBQUksSUFBRTtBQUFHLFFBQUcsR0FBRTtBQUFDLFVBQUksSUFBRTtBQUFFLFVBQUcsQ0FBQyxHQUFHLEdBQUUsSUFBRztBQUFDLFlBQUUsR0FBRyxFQUFFO0FBQWEsWUFBRyxDQUFDLEtBQUcsQ0FBQyxHQUFHLEdBQUUsSUFBRztBQUFDLFlBQUUsUUFBTSxFQUFFLFFBQU0sUUFBTTtBQUFFLGVBQUc7QUFBRyxlQUFHO0FBQUU7QUFBQTtBQUFPLFdBQUcsSUFBRztBQUFBO0FBQUcsV0FBRztBQUFFLFdBQUcsR0FBRyxFQUFFO0FBQUE7QUFBaUIsUUFBRSxRQUFNLEVBQUUsUUFBTSxRQUFNLEdBQUUsS0FBRyxPQUFHLEtBQUc7QUFBQTtBQUFBO0FBQUcsWUFBWSxHQUFFO0FBQUMsT0FBSSxJQUFFLEVBQUUsUUFBTyxBQUFPLE1BQVAsUUFBVSxBQUFJLEVBQUUsUUFBTixLQUFXLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSyxFQUFFLFFBQVA7QUFBWSxRQUFFLEVBQUU7QUFBTyxPQUFHO0FBQUE7QUFDNVMsWUFBWSxHQUFFO0FBQUMsTUFBRyxNQUFJO0FBQUcsV0FBTTtBQUFHLE1BQUcsQ0FBQztBQUFHLFdBQU8sR0FBRyxJQUFHLEtBQUcsTUFBRztBQUFHLE1BQUksSUFBRSxFQUFFO0FBQUssTUFBRyxBQUFJLEVBQUUsUUFBTixLQUFXLEFBQVMsTUFBVCxVQUFZLEFBQVMsTUFBVCxVQUFZLENBQUMsR0FBRyxHQUFFLEVBQUU7QUFBZSxTQUFJLElBQUUsSUFBRztBQUFHLFNBQUcsR0FBRSxJQUFHLElBQUUsR0FBRyxFQUFFO0FBQWEsS0FBRztBQUFHLE1BQUcsQUFBSyxFQUFFLFFBQVAsSUFBVztBQUFDLFFBQUUsRUFBRTtBQUFjLFFBQUUsQUFBTyxNQUFQLE9BQVMsRUFBRSxhQUFXO0FBQUssUUFBRyxDQUFDO0FBQUUsWUFBTSxNQUFNLEVBQUU7QUFBTSxPQUFFO0FBQUMsVUFBRSxFQUFFO0FBQVksV0FBSSxJQUFFLEdBQUUsS0FBRztBQUFDLFlBQUcsQUFBSSxFQUFFLGFBQU4sR0FBZTtBQUFDLGNBQUksSUFBRSxFQUFFO0FBQUssY0FBRyxBQUFPLE1BQVAsTUFBUztBQUFDLGdCQUFHLEFBQUksTUFBSixHQUFNO0FBQUMsbUJBQUcsR0FBRyxFQUFFO0FBQWE7QUFBQTtBQUFRO0FBQUE7QUFBUSxZQUFNLE1BQU4sT0FBUyxBQUFPLE1BQVAsUUFBVSxBQUFPLE1BQVAsUUFBVTtBQUFBO0FBQUksWUFBRSxFQUFFO0FBQUE7QUFBWSxXQUFHO0FBQUE7QUFBQTtBQUFXLFNBQUcsS0FBRyxHQUFHLEVBQUUsVUFBVSxlQUFhO0FBQUssU0FBTTtBQUFBO0FBQ3RmLGNBQWE7QUFBQyxPQUFHLEtBQUc7QUFBSyxPQUFHO0FBQUE7QUFBRyxJQUFJLEtBQUc7QUFBRyxjQUFhO0FBQUMsV0FBUSxJQUFFLEdBQUUsSUFBRSxHQUFHLFFBQU87QUFBSSxPQUFHLEdBQUcsZ0NBQThCO0FBQUssS0FBRyxTQUFPO0FBQUE7QUFBRSxJQUFJLEtBQUcsR0FBRyx3QkFBdUIsS0FBRyxHQUFHLHlCQUF3QixLQUFHLEdBQUUsSUFBRSxNQUFLLElBQUUsTUFBSyxJQUFFLE1BQUssS0FBRyxPQUFHLEtBQUc7QUFBRyxjQUFhO0FBQUMsUUFBTSxNQUFNLEVBQUU7QUFBQTtBQUFPLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBRyxBQUFPLE1BQVA7QUFBUyxXQUFNO0FBQUcsV0FBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFVBQVEsSUFBRSxFQUFFLFFBQU87QUFBSSxRQUFHLENBQUMsR0FBRyxFQUFFLElBQUcsRUFBRTtBQUFJLGFBQU07QUFBRyxTQUFNO0FBQUE7QUFDOVgsWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRTtBQUFDLE9BQUc7QUFBRSxNQUFFO0FBQUUsSUFBRSxnQkFBYztBQUFLLElBQUUsY0FBWTtBQUFLLElBQUUsUUFBTTtBQUFFLEtBQUcsVUFBUSxBQUFPLE1BQVAsUUFBVSxBQUFPLEVBQUUsa0JBQVQsT0FBdUIsS0FBRztBQUFHLE1BQUUsRUFBRSxHQUFFO0FBQUcsTUFBRyxJQUFHO0FBQUMsU0FBRTtBQUFFLE9BQUU7QUFBQyxXQUFHO0FBQUcsVUFBRyxDQUFFLE1BQUc7QUFBRyxjQUFNLE1BQU0sRUFBRTtBQUFNLFlBQUc7QUFBRSxVQUFFLElBQUU7QUFBSyxRQUFFLGNBQVk7QUFBSyxTQUFHLFVBQVE7QUFBRyxVQUFFLEVBQUUsR0FBRTtBQUFBLGFBQVM7QUFBQTtBQUFJLEtBQUcsVUFBUTtBQUFHLE1BQUUsQUFBTyxNQUFQLFFBQVUsQUFBTyxFQUFFLFNBQVQ7QUFBYyxPQUFHO0FBQUUsTUFBRSxJQUFFLElBQUU7QUFBSyxPQUFHO0FBQUcsTUFBRztBQUFFLFVBQU0sTUFBTSxFQUFFO0FBQU0sU0FBTztBQUFBO0FBQUUsY0FBYTtBQUFDLE1BQUksSUFBRSxFQUFDLGVBQWMsTUFBSyxXQUFVLE1BQUssV0FBVSxNQUFLLE9BQU0sTUFBSyxNQUFLO0FBQU0sRUFBTyxNQUFQLE9BQVMsRUFBRSxnQkFBYyxJQUFFLElBQUUsSUFBRSxFQUFFLE9BQUs7QUFBRSxTQUFPO0FBQUE7QUFDL2UsY0FBYTtBQUFDLE1BQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFVLFFBQUUsQUFBTyxNQUFQLE9BQVMsRUFBRSxnQkFBYztBQUFBO0FBQVUsUUFBRSxFQUFFO0FBQUssTUFBSSxJQUFFLEFBQU8sTUFBUCxPQUFTLEVBQUUsZ0JBQWMsRUFBRTtBQUFLLE1BQUcsQUFBTyxNQUFQO0FBQVMsUUFBRSxHQUFFLElBQUU7QUFBQSxPQUFNO0FBQUMsUUFBRyxBQUFPLE1BQVA7QUFBUyxZQUFNLE1BQU0sRUFBRTtBQUFNLFFBQUU7QUFBRSxRQUFFLEVBQUMsZUFBYyxFQUFFLGVBQWMsV0FBVSxFQUFFLFdBQVUsV0FBVSxFQUFFLFdBQVUsT0FBTSxFQUFFLE9BQU0sTUFBSztBQUFNLElBQU8sTUFBUCxPQUFTLEVBQUUsZ0JBQWMsSUFBRSxJQUFFLElBQUUsRUFBRSxPQUFLO0FBQUE7QUFBRSxTQUFPO0FBQUE7QUFBRSxZQUFZLEdBQUUsR0FBRTtBQUFDLFNBQU0sQUFBYSxPQUFPLE1BQXBCLGFBQXNCLEVBQUUsS0FBRztBQUFBO0FBQ3ZZLFlBQVksR0FBRTtBQUFDLE1BQUksSUFBRSxNQUFLLElBQUUsRUFBRTtBQUFNLE1BQUcsQUFBTyxNQUFQO0FBQVMsVUFBTSxNQUFNLEVBQUU7QUFBTSxJQUFFLHNCQUFvQjtBQUFFLE1BQUksSUFBRSxHQUFFLElBQUUsRUFBRSxXQUFVLEtBQUUsRUFBRTtBQUFRLE1BQUcsQUFBTyxPQUFQLE1BQVM7QUFBQyxRQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsVUFBSSxLQUFFLEVBQUU7QUFBSyxRQUFFLE9BQUssR0FBRTtBQUFLLFNBQUUsT0FBSztBQUFBO0FBQUUsTUFBRSxZQUFVLElBQUU7QUFBRSxNQUFFLFVBQVE7QUFBQTtBQUFLLE1BQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxRQUFFLEVBQUU7QUFBSyxRQUFFLEVBQUU7QUFBVSxRQUFJLEtBQUUsS0FBRSxLQUFFLE1BQUssSUFBRTtBQUFFLE9BQUU7QUFBQyxVQUFJLEtBQUUsRUFBRTtBQUFLLFVBQUksTUFBRyxRQUFLO0FBQUUsUUFBTyxPQUFQLFFBQVcsTUFBRSxHQUFFLE9BQUssRUFBQyxNQUFLLEdBQUUsUUFBTyxFQUFFLFFBQU8sY0FBYSxFQUFFLGNBQWEsWUFBVyxFQUFFLFlBQVcsTUFBSyxTQUFPLElBQUUsRUFBRSxpQkFBZSxJQUFFLEVBQUUsYUFBVyxFQUFFLEdBQUUsRUFBRTtBQUFBLFdBQVk7QUFBQyxZQUFJLEtBQUU7QUFBQSxVQUFDLE1BQUs7QUFBQSxVQUFFLFFBQU8sRUFBRTtBQUFBLFVBQU8sY0FBYSxFQUFFO0FBQUEsVUFDOWYsWUFBVyxFQUFFO0FBQUEsVUFBVyxNQUFLO0FBQUE7QUFBTSxRQUFPLE9BQVAsT0FBVSxNQUFFLEtBQUUsSUFBRSxLQUFFLEtBQUcsS0FBRSxHQUFFLE9BQUs7QUFBRSxVQUFFLFNBQU87QUFBRSxjQUFJO0FBQUE7QUFBRSxVQUFFLEVBQUU7QUFBQSxhQUFXLEFBQU8sTUFBUCxRQUFVLE1BQUk7QUFBRyxJQUFPLE9BQVAsT0FBUyxLQUFFLElBQUUsR0FBRSxPQUFLO0FBQUUsT0FBRyxHQUFFLEVBQUUsa0JBQWlCLE1BQUc7QUFBSSxNQUFFLGdCQUFjO0FBQUUsTUFBRSxZQUFVO0FBQUUsTUFBRSxZQUFVO0FBQUUsTUFBRSxvQkFBa0I7QUFBQTtBQUFFLFNBQU0sQ0FBQyxFQUFFLGVBQWMsRUFBRTtBQUFBO0FBQ3RRLFlBQVksR0FBRTtBQUFDLE1BQUksSUFBRSxNQUFLLElBQUUsRUFBRTtBQUFNLE1BQUcsQUFBTyxNQUFQO0FBQVMsVUFBTSxNQUFNLEVBQUU7QUFBTSxJQUFFLHNCQUFvQjtBQUFFLE1BQUksSUFBRSxFQUFFLFVBQVMsSUFBRSxFQUFFLFNBQVEsS0FBRSxFQUFFO0FBQWMsTUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLE1BQUUsVUFBUTtBQUFLLFFBQUksS0FBRSxJQUFFLEVBQUU7QUFBSztBQUFHLFdBQUUsRUFBRSxJQUFFLEdBQUUsU0FBUSxLQUFFLEdBQUU7QUFBQSxXQUFXLE9BQUk7QUFBRyxPQUFHLElBQUUsRUFBRSxrQkFBaUIsTUFBRztBQUFJLE1BQUUsZ0JBQWM7QUFBRSxJQUFPLEVBQUUsY0FBVCxRQUFxQixHQUFFLFlBQVU7QUFBRyxNQUFFLG9CQUFrQjtBQUFBO0FBQUUsU0FBTSxDQUFDLElBQUU7QUFBQTtBQUNuVixZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUU7QUFBWSxNQUFFLEVBQUUsRUFBRTtBQUFTLE1BQUksSUFBRSxFQUFFO0FBQThCLE1BQUcsQUFBTyxNQUFQO0FBQVMsUUFBRSxNQUFJO0FBQUEsV0FBVSxJQUFFLEVBQUUsa0JBQWlCLElBQUcsTUFBRyxPQUFLO0FBQUUsTUFBRSxnQ0FBOEIsR0FBRSxHQUFHLEtBQUs7QUFBRyxNQUFHO0FBQUUsV0FBTyxFQUFFLEVBQUU7QUFBUyxLQUFHLEtBQUs7QUFBRyxRQUFNLE1BQU0sRUFBRTtBQUFBO0FBQ3pQLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRTtBQUFFLE1BQUcsQUFBTyxNQUFQO0FBQVMsVUFBTSxNQUFNLEVBQUU7QUFBTSxNQUFJLEtBQUUsRUFBRSxhQUFZLEtBQUUsR0FBRSxFQUFFLFVBQVMsS0FBRSxHQUFHLFNBQVEsSUFBRSxHQUFFLFNBQVMsV0FBVTtBQUFDLFdBQU8sR0FBRyxHQUFFLEdBQUU7QUFBQSxNQUFLLEtBQUUsRUFBRSxJQUFHLEtBQUUsRUFBRTtBQUFHLE1BQUU7QUFBRSxNQUFJLEtBQUUsRUFBRSxlQUFjLEtBQUUsR0FBRSxNQUFLLEtBQUUsR0FBRSxhQUFZLEtBQUUsR0FBRTtBQUFPLE9BQUUsR0FBRTtBQUFVLE1BQUksS0FBRTtBQUFFLElBQUUsZ0JBQWMsRUFBQyxNQUFLLElBQUUsUUFBTyxHQUFFLFdBQVU7QUFBRyxLQUFFLFVBQVUsV0FBVTtBQUFDLE9BQUUsY0FBWTtBQUFFLE9BQUUsY0FBWTtBQUFFLFFBQUksS0FBRSxHQUFFLEVBQUU7QUFBUyxRQUFHLENBQUMsR0FBRyxJQUFFLEtBQUc7QUFBQyxXQUFFLEVBQUUsRUFBRTtBQUFTLFNBQUcsSUFBRSxPQUFLLElBQUUsS0FBRyxLQUFFLEdBQUcsS0FBRyxFQUFFLG9CQUFrQixLQUFFLEVBQUU7QUFBYyxXQUFFLEVBQUU7QUFBaUIsUUFBRSxrQkFBZ0I7QUFBRSxlQUFRLEtBQzVmLEVBQUUsZUFBYyxLQUFFLElBQUUsSUFBRSxNQUFHO0FBQUMsWUFBSSxLQUFFLEtBQUcsR0FBRyxLQUFHLEtBQUUsS0FBRztBQUFFLFdBQUUsT0FBSTtBQUFFLGNBQUcsQ0FBQztBQUFBO0FBQUE7QUFBQSxLQUFLLENBQUMsR0FBRSxHQUFFO0FBQUksS0FBRSxVQUFVLFdBQVU7QUFBQyxXQUFPLEVBQUUsRUFBRSxTQUFRLFdBQVU7QUFBQyxVQUFJLEtBQUUsR0FBRSxhQUFZLEtBQUUsR0FBRTtBQUFZLFVBQUc7QUFBQyxXQUFFLEdBQUUsRUFBRTtBQUFVLFlBQUksS0FBRSxHQUFHO0FBQUcsVUFBRSxvQkFBa0IsS0FBRSxFQUFFO0FBQUEsZUFBbUIsSUFBTjtBQUFTLFdBQUUsV0FBVTtBQUFDLGdCQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FBUyxDQUFDLEdBQUU7QUFBSSxLQUFHLElBQUUsTUFBSSxHQUFHLElBQUUsTUFBSSxHQUFHLElBQUUsTUFBSyxLQUFFLEVBQUMsU0FBUSxNQUFLLFVBQVMsTUFBSyxxQkFBb0IsSUFBRyxtQkFBa0IsTUFBRyxFQUFFLFdBQVMsS0FBRSxHQUFHLEtBQUssTUFBSyxHQUFFLElBQUcsRUFBRSxRQUFNLEdBQUUsRUFBRSxZQUFVLE1BQUssS0FBRSxHQUFHLEdBQUUsR0FBRSxJQUFHLEVBQUUsZ0JBQWMsRUFBRSxZQUFVO0FBQUcsU0FBTztBQUFBO0FBQ3RlLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUU7QUFBSyxTQUFPLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQTtBQUFHLFlBQVksR0FBRTtBQUFDLE1BQUksSUFBRTtBQUFLLEVBQWEsT0FBTyxNQUFwQixjQUF3QixLQUFFO0FBQUssSUFBRSxnQkFBYyxFQUFFLFlBQVU7QUFBRSxNQUFFLEVBQUUsUUFBTSxFQUFDLFNBQVEsTUFBSyxVQUFTLE1BQUsscUJBQW9CLElBQUcsbUJBQWtCO0FBQUcsTUFBRSxFQUFFLFdBQVMsR0FBRyxLQUFLLE1BQUssR0FBRTtBQUFHLFNBQU0sQ0FBQyxFQUFFLGVBQWM7QUFBQTtBQUNoUixZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLEVBQUMsS0FBSSxHQUFFLFFBQU8sR0FBRSxTQUFRLEdBQUUsTUFBSyxHQUFFLE1BQUs7QUFBTSxNQUFFLEVBQUU7QUFBWSxFQUFPLE1BQVAsT0FBVSxLQUFFLEVBQUMsWUFBVyxRQUFNLEVBQUUsY0FBWSxHQUFFLEVBQUUsYUFBVyxFQUFFLE9BQUssS0FBSSxLQUFFLEVBQUUsWUFBVyxBQUFPLE1BQVAsT0FBUyxFQUFFLGFBQVcsRUFBRSxPQUFLLElBQUcsS0FBRSxFQUFFLE1BQUssRUFBRSxPQUFLLEdBQUUsRUFBRSxPQUFLLEdBQUUsRUFBRSxhQUFXO0FBQUksU0FBTztBQUFBO0FBQUUsWUFBWSxHQUFFO0FBQUMsTUFBSSxJQUFFO0FBQUssTUFBRSxFQUFDLFNBQVE7QUFBRyxTQUFPLEVBQUUsZ0JBQWM7QUFBQTtBQUFFLGNBQWE7QUFBQyxTQUFPLEtBQUs7QUFBQTtBQUFjLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRTtBQUFLLElBQUUsU0FBTztBQUFFLElBQUUsZ0JBQWMsR0FBRyxJQUFFLEdBQUUsR0FBRSxRQUFPLEFBQVMsTUFBVCxTQUFXLE9BQUs7QUFBQTtBQUNqYyxZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUU7QUFBSyxNQUFFLEFBQVMsTUFBVCxTQUFXLE9BQUs7QUFBRSxNQUFJLEtBQUU7QUFBTyxNQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsUUFBSSxLQUFFLEVBQUU7QUFBYyxTQUFFLEdBQUU7QUFBUSxRQUFHLEFBQU8sTUFBUCxRQUFVLEdBQUcsR0FBRSxHQUFFLE9BQU07QUFBQyxTQUFHLEdBQUUsR0FBRSxJQUFFO0FBQUc7QUFBQTtBQUFBO0FBQVEsSUFBRSxTQUFPO0FBQUUsSUFBRSxnQkFBYyxHQUFHLElBQUUsR0FBRSxHQUFFLElBQUU7QUFBQTtBQUFHLFlBQVksR0FBRSxHQUFFO0FBQUMsU0FBTyxHQUFHLEtBQUksR0FBRSxHQUFFO0FBQUE7QUFBRyxZQUFZLEdBQUUsR0FBRTtBQUFDLFNBQU8sR0FBRyxLQUFJLEdBQUUsR0FBRTtBQUFBO0FBQUcsWUFBWSxHQUFFLEdBQUU7QUFBQyxTQUFPLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQTtBQUFHLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBRyxBQUFhLE9BQU8sTUFBcEI7QUFBc0IsV0FBTyxJQUFFLEtBQUksRUFBRSxJQUFHLFdBQVU7QUFBQyxRQUFFO0FBQUE7QUFBTyxNQUFHLEFBQU8sTUFBUCxRQUFVLEFBQVMsTUFBVDtBQUFXLFdBQU8sSUFBRSxLQUFJLEVBQUUsVUFBUSxHQUFFLFdBQVU7QUFBQyxRQUFFLFVBQVE7QUFBQTtBQUFBO0FBQzljLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLEFBQU8sTUFBUCxRQUFVLEFBQVMsTUFBVCxTQUFXLEVBQUUsT0FBTyxDQUFDLE1BQUk7QUFBSyxTQUFPLEdBQUcsR0FBRSxHQUFFLEdBQUcsS0FBSyxNQUFLLEdBQUUsSUFBRztBQUFBO0FBQUcsY0FBYTtBQUFBO0FBQUUsWUFBWSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUU7QUFBSyxNQUFFLEFBQVMsTUFBVCxTQUFXLE9BQUs7QUFBRSxNQUFJLElBQUUsRUFBRTtBQUFjLE1BQUcsQUFBTyxNQUFQLFFBQVUsQUFBTyxNQUFQLFFBQVUsR0FBRyxHQUFFLEVBQUU7QUFBSSxXQUFPLEVBQUU7QUFBRyxJQUFFLGdCQUFjLENBQUMsR0FBRTtBQUFHLFNBQU87QUFBQTtBQUFFLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFO0FBQUssTUFBRSxBQUFTLE1BQVQsU0FBVyxPQUFLO0FBQUUsTUFBSSxJQUFFLEVBQUU7QUFBYyxNQUFHLEFBQU8sTUFBUCxRQUFVLEFBQU8sTUFBUCxRQUFVLEdBQUcsR0FBRSxFQUFFO0FBQUksV0FBTyxFQUFFO0FBQUcsTUFBRTtBQUFJLElBQUUsZ0JBQWMsQ0FBQyxHQUFFO0FBQUcsU0FBTztBQUFBO0FBQ3paLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFO0FBQUssS0FBRyxLQUFHLElBQUUsS0FBRyxHQUFFLFdBQVU7QUFBQyxNQUFFO0FBQUE7QUFBTSxLQUFHLEtBQUcsSUFBRSxLQUFHLEdBQUUsV0FBVTtBQUFDLFFBQUksS0FBRSxHQUFHO0FBQVcsT0FBRyxhQUFXO0FBQUUsUUFBRztBQUFDLFFBQUUsUUFBSTtBQUFBLGNBQUk7QUFBUSxTQUFHLGFBQVc7QUFBQTtBQUFBO0FBQUE7QUFDNUosWUFBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxNQUFLLElBQUUsR0FBRyxJQUFHLEtBQUUsRUFBQyxNQUFLLEdBQUUsUUFBTyxHQUFFLGNBQWEsTUFBSyxZQUFXLE1BQUssTUFBSyxRQUFNLEtBQUUsRUFBRTtBQUFRLEVBQU8sT0FBUCxPQUFTLEdBQUUsT0FBSyxLQUFHLElBQUUsT0FBSyxHQUFFLE1BQUssR0FBRSxPQUFLO0FBQUcsSUFBRSxVQUFRO0FBQUUsT0FBRSxFQUFFO0FBQVUsTUFBRyxNQUFJLEtBQUcsQUFBTyxPQUFQLFFBQVUsT0FBSTtBQUFFLFNBQUcsS0FBRztBQUFBLE9BQU87QUFBQyxRQUFHLEFBQUksRUFBRSxVQUFOLEtBQWMsQ0FBTyxPQUFQLFFBQVUsQUFBSSxHQUFFLFVBQU4sTUFBZSxNQUFFLEVBQUUscUJBQW9CLEFBQU8sT0FBUDtBQUFVLFVBQUc7QUFBQyxZQUFJLEtBQUUsRUFBRSxtQkFBa0IsSUFBRSxHQUFFLElBQUU7QUFBRyxXQUFFLGVBQWE7QUFBRSxXQUFFLGFBQVc7QUFBRSxZQUFHLEdBQUcsR0FBRTtBQUFHO0FBQUEsZUFBYSxJQUFOO0FBQUEsZ0JBQVU7QUFBQTtBQUFTLE9BQUcsR0FBRSxHQUFFO0FBQUE7QUFBQTtBQUM5WixJQUFJLEtBQUcsRUFBQyxhQUFZLElBQUcsYUFBWSxJQUFHLFlBQVcsSUFBRyxXQUFVLElBQUcscUJBQW9CLElBQUcsaUJBQWdCLElBQUcsU0FBUSxJQUFHLFlBQVcsSUFBRyxRQUFPLElBQUcsVUFBUyxJQUFHLGVBQWMsSUFBRyxrQkFBaUIsSUFBRyxlQUFjLElBQUcsa0JBQWlCLElBQUcscUJBQW9CLElBQUcsMEJBQXlCLFNBQUksS0FBRyxFQUFDLGFBQVksSUFBRyxhQUFZLFNBQVMsR0FBRSxHQUFFO0FBQUMsT0FBSyxnQkFBYyxDQUFDLEdBQUUsQUFBUyxNQUFULFNBQVcsT0FBSztBQUFHLFNBQU87QUFBQSxHQUFHLFlBQVcsSUFBRyxXQUFVLElBQUcscUJBQW9CLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLEFBQU8sTUFBUCxRQUFVLEFBQVMsTUFBVCxTQUFXLEVBQUUsT0FBTyxDQUFDLE1BQUk7QUFBSyxTQUFPLEdBQUcsR0FBRSxHQUFFLEdBQUcsS0FBSyxNQUN2ZixHQUFFLElBQUc7QUFBQSxHQUFJLGlCQUFnQixTQUFTLEdBQUUsR0FBRTtBQUFDLFNBQU8sR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFBLEdBQUksU0FBUSxTQUFTLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRTtBQUFLLE1BQUUsQUFBUyxNQUFULFNBQVcsT0FBSztBQUFFLE1BQUU7QUFBSSxJQUFFLGdCQUFjLENBQUMsR0FBRTtBQUFHLFNBQU87QUFBQSxHQUFHLFlBQVcsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRTtBQUFLLE1BQUUsQUFBUyxNQUFULFNBQVcsRUFBRSxLQUFHO0FBQUUsSUFBRSxnQkFBYyxFQUFFLFlBQVU7QUFBRSxNQUFFLEVBQUUsUUFBTSxFQUFDLFNBQVEsTUFBSyxVQUFTLE1BQUsscUJBQW9CLEdBQUUsbUJBQWtCO0FBQUcsTUFBRSxFQUFFLFdBQVMsR0FBRyxLQUFLLE1BQUssR0FBRTtBQUFHLFNBQU0sQ0FBQyxFQUFFLGVBQWM7QUFBQSxHQUFJLFFBQU8sSUFBRyxVQUFTLElBQUcsZUFBYyxJQUFHLGtCQUFpQixTQUFTLEdBQUU7QUFBQyxNQUFJLElBQUUsR0FBRyxJQUFHLElBQUUsRUFBRSxJQUFHLElBQUUsRUFBRTtBQUFHLEtBQUcsV0FBVTtBQUFDLFFBQUksS0FBRSxHQUFHO0FBQzllLE9BQUcsYUFBVztBQUFFLFFBQUc7QUFBQyxRQUFFO0FBQUEsY0FBRztBQUFRLFNBQUcsYUFBVztBQUFBO0FBQUEsS0FBSSxDQUFDO0FBQUksU0FBTztBQUFBLEdBQUcsZUFBYyxXQUFVO0FBQUMsTUFBSSxJQUFFLEdBQUcsUUFBSSxJQUFFLEVBQUU7QUFBRyxNQUFFLEdBQUcsS0FBSyxNQUFLLEVBQUU7QUFBSSxLQUFHO0FBQUcsU0FBTSxDQUFDLEdBQUU7QUFBQSxHQUFJLGtCQUFpQixTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFO0FBQUssSUFBRSxnQkFBYyxFQUFDLE1BQUssRUFBQyxhQUFZLEdBQUUsYUFBWSxRQUFNLFFBQU8sR0FBRSxXQUFVO0FBQUcsU0FBTyxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUEsR0FBSSxxQkFBb0IsV0FBVTtBQUFDLE1BQUcsSUFBRztBQUFDLFFBQUksSUFBRSxPQUFHLElBQUUsR0FBRyxXQUFVO0FBQUMsV0FBSSxLQUFFLE1BQUcsRUFBRSxPQUFNLE9BQU0sU0FBUztBQUFNLFlBQU0sTUFBTSxFQUFFO0FBQUEsUUFBUyxJQUFFLEdBQUcsR0FBRztBQUFHLElBQUssR0FBRSxPQUFLLE9BQVosS0FBaUIsR0FBRSxTQUFPLEtBQUksR0FBRyxHQUFFLFdBQVU7QUFBQyxRQUFFLE9BQU0sT0FBTSxTQUFTO0FBQUEsT0FDaGYsUUFBTztBQUFPLFdBQU87QUFBQTtBQUFFLE1BQUUsT0FBTSxPQUFNLFNBQVM7QUFBSSxLQUFHO0FBQUcsU0FBTztBQUFBLEdBQUcsMEJBQXlCLFNBQUksS0FBRyxFQUFDLGFBQVksSUFBRyxhQUFZLElBQUcsWUFBVyxJQUFHLFdBQVUsSUFBRyxxQkFBb0IsSUFBRyxpQkFBZ0IsSUFBRyxTQUFRLElBQUcsWUFBVyxJQUFHLFFBQU8sSUFBRyxVQUFTLFdBQVU7QUFBQyxTQUFPLEdBQUc7QUFBQSxHQUFLLGVBQWMsSUFBRyxrQkFBaUIsU0FBUyxHQUFFO0FBQUMsTUFBSSxJQUFFLEdBQUcsS0FBSSxJQUFFLEVBQUUsSUFBRyxJQUFFLEVBQUU7QUFBRyxLQUFHLFdBQVU7QUFBQyxRQUFJLEtBQUUsR0FBRztBQUFXLE9BQUcsYUFBVztBQUFFLFFBQUc7QUFBQyxRQUFFO0FBQUEsY0FBRztBQUFRLFNBQUcsYUFBVztBQUFBO0FBQUEsS0FBSSxDQUFDO0FBQUksU0FBTztBQUFBLEdBQUcsZUFBYyxXQUFVO0FBQUMsTUFBSSxJQUFFLEdBQUcsSUFBSTtBQUFHLFNBQU07QUFBQSxJQUFDLEtBQUs7QUFBQSxJQUM5ZTtBQUFBO0FBQUEsR0FBSSxrQkFBaUIsSUFBRyxxQkFBb0IsV0FBVTtBQUFDLFNBQU8sR0FBRyxJQUFJO0FBQUEsR0FBSSwwQkFBeUIsU0FBSSxLQUFHLEVBQUMsYUFBWSxJQUFHLGFBQVksSUFBRyxZQUFXLElBQUcsV0FBVSxJQUFHLHFCQUFvQixJQUFHLGlCQUFnQixJQUFHLFNBQVEsSUFBRyxZQUFXLElBQUcsUUFBTyxJQUFHLFVBQVMsV0FBVTtBQUFDLFNBQU8sR0FBRztBQUFBLEdBQUssZUFBYyxJQUFHLGtCQUFpQixTQUFTLEdBQUU7QUFBQyxNQUFJLElBQUUsR0FBRyxLQUFJLElBQUUsRUFBRSxJQUFHLElBQUUsRUFBRTtBQUFHLEtBQUcsV0FBVTtBQUFDLFFBQUksS0FBRSxHQUFHO0FBQVcsT0FBRyxhQUFXO0FBQUUsUUFBRztBQUFDLFFBQUU7QUFBQSxjQUFHO0FBQVEsU0FBRyxhQUFXO0FBQUE7QUFBQSxLQUFJLENBQUM7QUFBSSxTQUFPO0FBQUEsR0FBRyxlQUFjLFdBQVU7QUFBQyxNQUFJLElBQUUsR0FBRyxJQUFJO0FBQUcsU0FBTTtBQUFBLElBQUMsS0FBSztBQUFBLElBQ3JmO0FBQUE7QUFBQSxHQUFJLGtCQUFpQixJQUFHLHFCQUFvQixXQUFVO0FBQUMsU0FBTyxHQUFHLElBQUk7QUFBQSxHQUFJLDBCQUF5QixTQUFJLEtBQUcsR0FBRyxtQkFBa0IsS0FBRztBQUFHLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLElBQUUsUUFBTSxBQUFPLE1BQVAsT0FBUyxHQUFHLEdBQUUsTUFBSyxHQUFFLEtBQUcsR0FBRyxHQUFFLEVBQUUsT0FBTSxHQUFFO0FBQUE7QUFBRyxZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUUsRUFBRTtBQUFPLE1BQUksS0FBRSxFQUFFO0FBQUksS0FBRyxHQUFFO0FBQUcsTUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRTtBQUFHLE1BQUcsQUFBTyxNQUFQLFFBQVUsQ0FBQztBQUFHLFdBQU8sRUFBRSxjQUFZLEVBQUUsYUFBWSxFQUFFLFNBQU8sTUFBSyxFQUFFLFNBQU8sQ0FBQyxHQUFFTyxLQUFHLEdBQUUsR0FBRTtBQUFHLElBQUUsU0FBTztBQUFFLEtBQUcsR0FBRSxHQUFFLEdBQUU7QUFBRyxTQUFPLEVBQUU7QUFBQTtBQUMzWSxZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFFO0FBQUMsTUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFFBQUksS0FBRSxFQUFFO0FBQUssUUFBRyxBQUFhLE9BQU8sT0FBcEIsY0FBdUIsQ0FBQyxHQUFHLE9BQUksQUFBUyxHQUFFLGlCQUFYLFVBQXlCLEFBQU8sRUFBRSxZQUFULFFBQWtCLEFBQVMsRUFBRSxpQkFBWDtBQUF3QixhQUFPLEVBQUUsTUFBSSxJQUFHLEVBQUUsT0FBSyxJQUFFLEdBQUcsR0FBRSxHQUFFLElBQUUsR0FBRSxHQUFFO0FBQUcsUUFBRSxHQUFHLEVBQUUsTUFBSyxNQUFLLEdBQUUsR0FBRSxFQUFFLE1BQUs7QUFBRyxNQUFFLE1BQUksRUFBRTtBQUFJLE1BQUUsU0FBTztBQUFFLFdBQU8sRUFBRSxRQUFNO0FBQUE7QUFBRSxPQUFFLEVBQUU7QUFBTSxNQUFHLEFBQUssS0FBRSxRQUFQLEtBQVksS0FBRSxHQUFFLGVBQWMsSUFBRSxFQUFFLFNBQVEsSUFBRSxBQUFPLE1BQVAsT0FBUyxJQUFFLElBQUcsRUFBRSxHQUFFLE1BQUksRUFBRSxRQUFNLEVBQUU7QUFBSyxXQUFPQSxLQUFHLEdBQUUsR0FBRTtBQUFHLElBQUUsU0FBTztBQUFFLE1BQUUsR0FBRyxJQUFFO0FBQUcsSUFBRSxNQUFJLEVBQUU7QUFBSSxJQUFFLFNBQU87QUFBRSxTQUFPLEVBQUUsUUFBTTtBQUFBO0FBQ2xiLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUU7QUFBQyxNQUFHLEFBQU8sTUFBUCxRQUFVLEdBQUcsRUFBRSxlQUFjLE1BQUksRUFBRSxRQUFNLEVBQUU7QUFBSSxRQUFHLEtBQUcsT0FBRyxBQUFLLE1BQUUsT0FBUDtBQUFVLE1BQUssR0FBRSxRQUFNLFdBQWIsS0FBc0IsTUFBRztBQUFBO0FBQVMsYUFBTyxFQUFFLFFBQU0sRUFBRSxPQUFNQSxLQUFHLEdBQUUsR0FBRTtBQUFHLFNBQU8sR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUE7QUFDbkwsWUFBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFLGNBQWEsSUFBRSxFQUFFLFVBQVMsS0FBRSxBQUFPLE1BQVAsT0FBUyxFQUFFLGdCQUFjO0FBQUssTUFBRyxBQUFXLEVBQUUsU0FBYixZQUFtQixBQUFrQyxFQUFFLFNBQXBDO0FBQXlDLFFBQUcsQUFBSyxHQUFFLE9BQUssT0FBWjtBQUFlLFFBQUUsZ0JBQWMsRUFBQyxXQUFVLEtBQUcsR0FBRyxHQUFFO0FBQUEsYUFBVyxBQUFLLEtBQUUsZ0JBQVA7QUFBbUIsUUFBRSxnQkFBYyxFQUFDLFdBQVUsS0FBRyxHQUFHLEdBQUUsQUFBTyxPQUFQLE9BQVMsR0FBRSxZQUFVO0FBQUE7QUFBUSxhQUFPLElBQUUsQUFBTyxPQUFQLE9BQVMsR0FBRSxZQUFVLElBQUUsR0FBRSxFQUFFLFFBQU0sRUFBRSxhQUFXLFlBQVcsRUFBRSxnQkFBYyxFQUFDLFdBQVUsS0FBRyxHQUFHLEdBQUUsSUFBRztBQUFBO0FBQVUsSUFBTyxPQUFQLE9BQVUsS0FBRSxHQUFFLFlBQVUsR0FBRSxFQUFFLGdCQUFjLFFBQU0sSUFBRSxHQUFFLEdBQUcsR0FBRTtBQUFHLEtBQUcsR0FBRSxHQUFFLEdBQUU7QUFBRyxTQUFPLEVBQUU7QUFBQTtBQUMxZSxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFO0FBQUksTUFBRyxBQUFPLE1BQVAsUUFBVSxBQUFPLE1BQVAsUUFBVSxBQUFPLE1BQVAsUUFBVSxFQUFFLFFBQU07QUFBRSxNQUFFLFNBQU87QUFBQTtBQUFJLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxLQUFFLEdBQUcsS0FBRyxLQUFHLEVBQUU7QUFBUSxPQUFFLEdBQUcsR0FBRTtBQUFHLEtBQUcsR0FBRTtBQUFHLE1BQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUU7QUFBRyxNQUFHLEFBQU8sTUFBUCxRQUFVLENBQUM7QUFBRyxXQUFPLEVBQUUsY0FBWSxFQUFFLGFBQVksRUFBRSxTQUFPLE1BQUssRUFBRSxTQUFPLENBQUMsR0FBRUEsS0FBRyxHQUFFLEdBQUU7QUFBRyxJQUFFLFNBQU87QUFBRSxLQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUcsU0FBTyxFQUFFO0FBQUE7QUFDalMsWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFHLEdBQUcsSUFBRztBQUFDLFFBQUksS0FBRTtBQUFHLE9BQUc7QUFBQTtBQUFRLFNBQUU7QUFBRyxLQUFHLEdBQUU7QUFBRyxNQUFHLEFBQU8sRUFBRSxjQUFUO0FBQW1CLElBQU8sTUFBUCxRQUFXLEdBQUUsWUFBVSxNQUFLLEVBQUUsWUFBVSxNQUFLLEVBQUUsU0FBTyxJQUFHLEdBQUcsR0FBRSxHQUFFLElBQUcsR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUU7QUFBQSxXQUFXLEFBQU8sTUFBUCxNQUFTO0FBQUMsUUFBSSxLQUFFLEVBQUUsV0FBVSxLQUFFLEVBQUU7QUFBYyxPQUFFLFFBQU07QUFBRSxRQUFJLElBQUUsR0FBRSxTQUFRLEtBQUUsRUFBRTtBQUFZLElBQVcsT0FBTyxPQUFsQixZQUFxQixBQUFPLE9BQVAsT0FBUyxLQUFFLEdBQUcsTUFBSSxNQUFFLEdBQUcsS0FBRyxLQUFHLEVBQUUsU0FBUSxLQUFFLEdBQUcsR0FBRTtBQUFJLFFBQUksS0FBRSxFQUFFLDBCQUF5QixLQUFFLEFBQWEsT0FBTyxPQUFwQixjQUF1QixBQUFhLE9BQU8sR0FBRSw0QkFBdEI7QUFBOEMsVUFBRyxBQUFhLE9BQU8sR0FBRSxxQ0FBdEIsY0FDOWIsQUFBYSxPQUFPLEdBQUUsOEJBQXRCLGNBQWtELFFBQUksS0FBRyxNQUFJLE9BQUksR0FBRyxHQUFFLElBQUUsR0FBRTtBQUFHLFNBQUc7QUFBRyxRQUFJLEtBQUUsRUFBRTtBQUFjLE9BQUUsUUFBTTtBQUFFLE9BQUcsR0FBRSxHQUFFLElBQUU7QUFBRyxRQUFFLEVBQUU7QUFBYyxXQUFJLEtBQUcsT0FBSSxLQUFHLEVBQUUsV0FBUyxLQUFJLENBQWEsT0FBTyxPQUFwQixjQUF3QixJQUFHLEdBQUUsR0FBRSxJQUFFLElBQUcsSUFBRSxFQUFFLGdCQUFnQixNQUFFLE1BQUksR0FBRyxHQUFFLEdBQUUsSUFBRSxHQUFFLElBQUUsR0FBRSxPQUFLLE9BQUcsQUFBYSxPQUFPLEdBQUUsOEJBQXRCLGNBQWlELEFBQWEsT0FBTyxHQUFFLHVCQUF0QixjQUEyQyxDQUFhLE9BQU8sR0FBRSx1QkFBdEIsY0FBMEMsR0FBRSxzQkFBcUIsQUFBYSxPQUFPLEdBQUUsOEJBQXRCLGNBQWlELEdBQUUsOEJBQTZCLEFBQ2hmLE9BQU8sR0FBRSxzQkFEdWUsY0FDbmQsR0FBRSxTQUFPLE1BQUssQ0FBYSxPQUFPLEdBQUUsc0JBQXRCLGNBQTBDLEdBQUUsU0FBTyxJQUFHLEVBQUUsZ0JBQWMsR0FBRSxFQUFFLGdCQUFjLElBQUcsR0FBRSxRQUFNLEdBQUUsR0FBRSxRQUFNLEdBQUUsR0FBRSxVQUFRLElBQUUsSUFBRSxNQUFJLENBQWEsT0FBTyxHQUFFLHNCQUF0QixjQUEwQyxHQUFFLFNBQU8sSUFBRyxJQUFFO0FBQUEsU0FBUTtBQUFDLFNBQUUsRUFBRTtBQUFVLE9BQUcsR0FBRTtBQUFHLFNBQUUsRUFBRTtBQUFjLFNBQUUsRUFBRSxTQUFPLEVBQUUsY0FBWSxLQUFFLEdBQUcsRUFBRSxNQUFLO0FBQUcsT0FBRSxRQUFNO0FBQUUsU0FBRSxFQUFFO0FBQWEsU0FBRSxHQUFFO0FBQVEsUUFBRSxFQUFFO0FBQVksSUFBVyxPQUFPLE1BQWxCLFlBQXFCLEFBQU8sTUFBUCxPQUFTLElBQUUsR0FBRyxLQUFJLEtBQUUsR0FBRyxLQUFHLEtBQUcsRUFBRSxTQUFRLElBQUUsR0FBRyxHQUFFO0FBQUksUUFBSSxLQUFFLEVBQUU7QUFBeUIsSUFBQyxNQUFFLEFBQWEsT0FBTyxPQUFwQixjQUMvZCxBQUFhLE9BQU8sR0FBRSw0QkFBdEIsZUFBZ0QsQUFBYSxPQUFPLEdBQUUscUNBQXRCLGNBQXdELEFBQWEsT0FBTyxHQUFFLDhCQUF0QixjQUFrRCxRQUFJLE1BQUcsT0FBSSxNQUFJLEdBQUcsR0FBRSxJQUFFLEdBQUU7QUFBRyxTQUFHO0FBQUcsU0FBRSxFQUFFO0FBQWMsT0FBRSxRQUFNO0FBQUUsT0FBRyxHQUFFLEdBQUUsSUFBRTtBQUFHLFFBQUksS0FBRSxFQUFFO0FBQWMsV0FBSSxNQUFHLE9BQUksTUFBRyxFQUFFLFdBQVMsS0FBSSxDQUFhLE9BQU8sT0FBcEIsY0FBd0IsSUFBRyxHQUFFLEdBQUUsSUFBRSxJQUFHLEtBQUUsRUFBRSxnQkFBZ0IsTUFBRSxNQUFJLEdBQUcsR0FBRSxHQUFFLElBQUUsR0FBRSxJQUFFLElBQUUsTUFBSyxPQUFHLEFBQWEsT0FBTyxHQUFFLCtCQUF0QixjQUFrRCxBQUFhLE9BQU8sR0FBRSx3QkFBdEIsY0FBNEMsQ0FBYSxPQUFPLEdBQUUsd0JBQXRCLGNBQTJDLEdBQUUsb0JBQW9CLEdBQzFnQixJQUFFLElBQUcsQUFBYSxPQUFPLEdBQUUsK0JBQXRCLGNBQWtELEdBQUUsMkJBQTJCLEdBQUUsSUFBRSxLQUFJLEFBQWEsT0FBTyxHQUFFLHVCQUF0QixjQUEyQyxHQUFFLFNBQU8sSUFBRyxBQUFhLE9BQU8sR0FBRSw0QkFBdEIsY0FBZ0QsR0FBRSxTQUFPLFFBQU8sQ0FBYSxPQUFPLEdBQUUsdUJBQXRCLGNBQTBDLE9BQUksRUFBRSxpQkFBZSxPQUFJLEVBQUUsaUJBQWdCLEdBQUUsU0FBTyxJQUFHLEFBQWEsT0FBTyxHQUFFLDRCQUF0QixjQUErQyxPQUFJLEVBQUUsaUJBQWUsT0FBSSxFQUFFLGlCQUFnQixHQUFFLFNBQU8sTUFBSyxFQUFFLGdCQUFjLEdBQUUsRUFBRSxnQkFBYyxLQUFHLEdBQUUsUUFBTSxHQUFFLEdBQUUsUUFBTSxJQUFFLEdBQUUsVUFBUSxHQUFFLElBQUUsTUFBSSxDQUFhLE9BQU8sR0FBRSx1QkFBdEIsY0FDdmUsT0FBSSxFQUFFLGlCQUFlLE9BQUksRUFBRSxpQkFBZ0IsR0FBRSxTQUFPLElBQUcsQUFBYSxPQUFPLEdBQUUsNEJBQXRCLGNBQStDLE9BQUksRUFBRSxpQkFBZSxPQUFJLEVBQUUsaUJBQWdCLEdBQUUsU0FBTyxNQUFLLElBQUU7QUFBQTtBQUFJLFNBQU8sR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUU7QUFBQTtBQUN6TCxZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFFO0FBQUMsS0FBRyxHQUFFO0FBQUcsTUFBSSxLQUFFLEFBQUssR0FBRSxRQUFNLFFBQWI7QUFBaUIsTUFBRyxDQUFDLEtBQUcsQ0FBQztBQUFFLFdBQU8sS0FBRyxHQUFHLEdBQUUsR0FBRSxRQUFJQSxLQUFHLEdBQUUsR0FBRTtBQUFHLE1BQUUsRUFBRTtBQUFVLEtBQUcsVUFBUTtBQUFFLE1BQUksS0FBRSxNQUFHLEFBQWEsT0FBTyxFQUFFLDZCQUF0QixhQUErQyxPQUFLLEVBQUU7QUFBUyxJQUFFLFNBQU87QUFBRSxFQUFPLE1BQVAsUUFBVSxLQUFHLEdBQUUsUUFBTSxHQUFHLEdBQUUsRUFBRSxPQUFNLE1BQUssS0FBRyxFQUFFLFFBQU0sR0FBRyxHQUFFLE1BQUssSUFBRSxPQUFJLEdBQUcsR0FBRSxHQUFFLElBQUU7QUFBRyxJQUFFLGdCQUFjLEVBQUU7QUFBTSxPQUFHLEdBQUcsR0FBRSxHQUFFO0FBQUksU0FBTyxFQUFFO0FBQUE7QUFBTSxZQUFZLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRTtBQUFVLElBQUUsaUJBQWUsR0FBRyxHQUFFLEVBQUUsZ0JBQWUsRUFBRSxtQkFBaUIsRUFBRSxXQUFTLEVBQUUsV0FBUyxHQUFHLEdBQUUsRUFBRSxTQUFRO0FBQUksS0FBRyxHQUFFLEVBQUU7QUFBQTtBQUM3ZCxJQUFJLEtBQUcsRUFBQyxZQUFXLE1BQUssV0FBVTtBQUNsQyxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUUsY0FBYSxJQUFFLEVBQUUsU0FBUSxLQUFFLE9BQUc7QUFBRSxFQUFDLE1BQUUsQUFBSyxHQUFFLFFBQU0sUUFBYixNQUFvQixNQUFFLEFBQU8sTUFBUCxRQUFVLEFBQU8sRUFBRSxrQkFBVCxPQUF1QixRQUFHLEFBQUssS0FBRSxPQUFQO0FBQVcsT0FBRyxNQUFFLE1BQUcsRUFBRSxTQUFPLE9BQUssQUFBTyxNQUFQLFFBQVUsQUFBTyxFQUFFLGtCQUFULFFBQXdCLEFBQVMsRUFBRSxhQUFYLFVBQXFCLEFBQUssRUFBRSwrQkFBUCxRQUFvQyxNQUFHO0FBQUcsSUFBRSxHQUFFLElBQUU7QUFBRyxNQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsSUFBUyxFQUFFLGFBQVgsVUFBcUIsR0FBRztBQUFHLFFBQUUsRUFBRTtBQUFTLFFBQUUsRUFBRTtBQUFTLFFBQUc7QUFBRSxhQUFPLElBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsTUFBTSxnQkFBYyxFQUFDLFdBQVUsS0FBRyxFQUFFLGdCQUFjLElBQUc7QUFBRSxRQUFHLEFBQVcsT0FBTyxFQUFFLDhCQUFwQjtBQUE4QyxhQUFPLElBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsTUFBTSxnQkFBYyxFQUFDLFdBQVUsS0FDL2YsRUFBRSxnQkFBYyxJQUFHLEVBQUUsUUFBTSxVQUFTO0FBQUUsUUFBRSxHQUFHLEVBQUMsTUFBSyxXQUFVLFVBQVMsS0FBRyxFQUFFLE1BQUssR0FBRTtBQUFNLE1BQUUsU0FBTztBQUFFLFdBQU8sRUFBRSxRQUFNO0FBQUE7QUFBRSxNQUFHLEFBQU8sRUFBRSxrQkFBVCxNQUF1QjtBQUFDLFFBQUc7QUFBRSxhQUFPLElBQUUsR0FBRyxHQUFFLEdBQUUsRUFBRSxVQUFTLEVBQUUsVUFBUyxJQUFHLEtBQUUsRUFBRSxPQUFNLElBQUUsRUFBRSxNQUFNLGVBQWMsR0FBRSxnQkFBYyxBQUFPLE1BQVAsT0FBUyxFQUFDLFdBQVUsTUFBRyxFQUFDLFdBQVUsRUFBRSxZQUFVLEtBQUcsR0FBRSxhQUFXLEVBQUUsYUFBVyxDQUFDLEdBQUUsRUFBRSxnQkFBYyxJQUFHO0FBQUUsUUFBRSxHQUFHLEdBQUUsR0FBRSxFQUFFLFVBQVM7QUFBRyxNQUFFLGdCQUFjO0FBQUssV0FBTztBQUFBO0FBQUUsTUFBRztBQUFFLFdBQU8sSUFBRSxHQUFHLEdBQUUsR0FBRSxFQUFFLFVBQVMsRUFBRSxVQUFTLElBQUcsS0FBRSxFQUFFLE9BQU0sSUFBRSxFQUFFLE1BQU0sZUFBYyxHQUFFLGdCQUFjLEFBQU8sTUFBUCxPQUFTLEVBQUMsV0FBVSxNQUN6ZixFQUFDLFdBQVUsRUFBRSxZQUFVLEtBQUcsR0FBRSxhQUFXLEVBQUUsYUFBVyxDQUFDLEdBQUUsRUFBRSxnQkFBYyxJQUFHO0FBQUUsTUFBRSxHQUFHLEdBQUUsR0FBRSxFQUFFLFVBQVM7QUFBRyxJQUFFLGdCQUFjO0FBQUssU0FBTztBQUFBO0FBQUUsWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUUsTUFBSyxLQUFFLEVBQUU7QUFBTSxNQUFFLEVBQUMsTUFBSyxVQUFTLFVBQVM7QUFBRyxFQUFLLEtBQUUsT0FBUCxLQUFXLEFBQU8sT0FBUCxPQUFVLElBQUUsYUFBVyxHQUFFLEdBQUUsZUFBYSxLQUFHLEtBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFNLE1BQUUsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFNLEtBQUUsU0FBTztBQUFFLElBQUUsU0FBTztBQUFFLEtBQUUsVUFBUTtBQUFFLElBQUUsUUFBTTtBQUFFLFNBQU87QUFBQTtBQUNyVixZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRTtBQUFNLE1BQUUsRUFBRTtBQUFRLE1BQUUsR0FBRyxHQUFFLEVBQUMsTUFBSyxXQUFVLFVBQVM7QUFBSSxFQUFLLEdBQUUsT0FBSyxPQUFaLEtBQWlCLEdBQUUsUUFBTTtBQUFHLElBQUUsU0FBTztBQUFFLElBQUUsVUFBUTtBQUFLLEVBQU8sTUFBUCxRQUFXLEdBQUUsYUFBVyxNQUFLLEVBQUUsUUFBTSxHQUFFLEVBQUUsY0FBWSxFQUFFLGFBQVc7QUFBRyxTQUFPLEVBQUUsUUFBTTtBQUFBO0FBQzdOLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxLQUFFLEVBQUUsTUFBSyxLQUFFLEVBQUU7QUFBTSxNQUFFLEdBQUU7QUFBUSxNQUFJLEtBQUUsRUFBQyxNQUFLLFVBQVMsVUFBUztBQUFHLEVBQUssTUFBRSxPQUFQLEtBQVcsRUFBRSxVQUFRLEtBQUcsS0FBRSxFQUFFLE9BQU0sRUFBRSxhQUFXLEdBQUUsRUFBRSxlQUFhLElBQUUsS0FBRSxFQUFFLFlBQVcsQUFBTyxPQUFQLE9BQVUsR0FBRSxjQUFZLEVBQUUsYUFBWSxFQUFFLGFBQVcsSUFBRSxHQUFFLGFBQVcsUUFBTSxFQUFFLGNBQVksRUFBRSxhQUFXLFFBQU0sSUFBRSxHQUFHLElBQUU7QUFBRyxFQUFPLE1BQVAsT0FBUyxJQUFFLEdBQUcsR0FBRSxLQUFJLEtBQUUsR0FBRyxHQUFFLElBQUUsR0FBRSxPQUFNLEVBQUUsU0FBTztBQUFHLElBQUUsU0FBTztBQUFFLElBQUUsU0FBTztBQUFFLElBQUUsVUFBUTtBQUFFLElBQUUsUUFBTTtBQUFFLFNBQU87QUFBQTtBQUFFLFlBQVksR0FBRSxHQUFFO0FBQUMsSUFBRSxTQUFPO0FBQUUsTUFBSSxJQUFFLEVBQUU7QUFBVSxFQUFPLE1BQVAsUUFBVyxHQUFFLFNBQU87QUFBRyxLQUFHLEVBQUUsUUFBTztBQUFBO0FBQ3RkLFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUU7QUFBQyxNQUFJLEtBQUUsRUFBRTtBQUFjLEVBQU8sT0FBUCxPQUFTLEVBQUUsZ0JBQWMsRUFBQyxhQUFZLEdBQUUsV0FBVSxNQUFLLG9CQUFtQixHQUFFLE1BQUssR0FBRSxNQUFLLEdBQUUsVUFBUyxHQUFFLFlBQVcsT0FBSSxJQUFFLGNBQVksR0FBRSxHQUFFLFlBQVUsTUFBSyxHQUFFLHFCQUFtQixHQUFFLEdBQUUsT0FBSyxHQUFFLEdBQUUsT0FBSyxHQUFFLEdBQUUsV0FBUyxHQUFFLEdBQUUsYUFBVztBQUFBO0FBQ3ZRLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRSxjQUFhLElBQUUsRUFBRSxhQUFZLEtBQUUsRUFBRTtBQUFLLEtBQUcsR0FBRSxHQUFFLEVBQUUsVUFBUztBQUFHLE1BQUUsRUFBRTtBQUFRLE1BQUcsQUFBSyxLQUFFLE9BQVA7QUFBVSxRQUFFLElBQUUsSUFBRSxHQUFFLEVBQUUsU0FBTztBQUFBLE9BQU87QUFBQyxRQUFHLEFBQU8sTUFBUCxRQUFVLEFBQUssR0FBRSxRQUFNLFFBQWI7QUFBaUI7QUFBRSxhQUFJLElBQUUsRUFBRSxPQUFNLEFBQU8sTUFBUCxRQUFVO0FBQUMsY0FBRyxBQUFLLEVBQUUsUUFBUDtBQUFXLFlBQU8sRUFBRSxrQkFBVCxRQUF3QixHQUFHLEdBQUU7QUFBQSxtQkFBVyxBQUFLLEVBQUUsUUFBUDtBQUFXLGVBQUcsR0FBRTtBQUFBLG1CQUFXLEFBQU8sRUFBRSxVQUFULE1BQWU7QUFBQyxjQUFFLE1BQU0sU0FBTztBQUFFLGdCQUFFLEVBQUU7QUFBTTtBQUFBO0FBQVMsY0FBRyxNQUFJO0FBQUU7QUFBUSxpQkFBSyxBQUFPLEVBQUUsWUFBVCxRQUFrQjtBQUFDLGdCQUFHLEFBQU8sRUFBRSxXQUFULFFBQWlCLEVBQUUsV0FBUztBQUFFO0FBQVEsZ0JBQUUsRUFBRTtBQUFBO0FBQU8sWUFBRSxRQUFRLFNBQU8sRUFBRTtBQUFPLGNBQUUsRUFBRTtBQUFBO0FBQVEsU0FBRztBQUFBO0FBQUUsSUFBRSxHQUFFO0FBQUcsTUFBRyxBQUFLLEdBQUUsT0FBSyxPQUFaO0FBQWUsTUFBRSxnQkFDemU7QUFBQTtBQUFVLFlBQU87QUFBQSxXQUFRO0FBQVcsWUFBRSxFQUFFO0FBQU0sYUFBSSxJQUFFLE1BQUssQUFBTyxNQUFQO0FBQVUsY0FBRSxFQUFFLFdBQVUsQUFBTyxNQUFQLFFBQVUsQUFBTyxHQUFHLE9BQVYsUUFBZSxLQUFFLElBQUcsSUFBRSxFQUFFO0FBQVEsWUFBRTtBQUFFLFFBQU8sTUFBUCxPQUFVLEtBQUUsRUFBRSxPQUFNLEVBQUUsUUFBTSxRQUFPLEtBQUUsRUFBRSxTQUFRLEVBQUUsVUFBUTtBQUFNLFdBQUcsR0FBRSxPQUFHLEdBQUUsR0FBRSxJQUFFLEVBQUU7QUFBWTtBQUFBLFdBQVc7QUFBWSxZQUFFO0FBQUssWUFBRSxFQUFFO0FBQU0sYUFBSSxFQUFFLFFBQU0sTUFBSyxBQUFPLE1BQVAsUUFBVTtBQUFDLGNBQUUsRUFBRTtBQUFVLGNBQUcsQUFBTyxNQUFQLFFBQVUsQUFBTyxHQUFHLE9BQVYsTUFBYTtBQUFDLGNBQUUsUUFBTTtBQUFFO0FBQUE7QUFBTSxjQUFFLEVBQUU7QUFBUSxZQUFFLFVBQVE7QUFBRSxjQUFFO0FBQUUsY0FBRTtBQUFBO0FBQUUsV0FBRyxHQUFFLE1BQUcsR0FBRSxNQUFLLElBQUUsRUFBRTtBQUFZO0FBQUEsV0FBVztBQUFXLFdBQUcsR0FBRSxPQUFHLE1BQUssTUFBSyxRQUFPLEVBQUU7QUFBWTtBQUFBO0FBQWMsVUFBRSxnQkFBYztBQUFBO0FBQUssU0FBTyxFQUFFO0FBQUE7QUFDL2YsY0FBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLEVBQU8sTUFBUCxRQUFXLEdBQUUsZUFBYSxFQUFFO0FBQWMsUUFBSSxFQUFFO0FBQU0sTUFBRyxBQUFLLEtBQUUsRUFBRSxnQkFBVCxHQUFxQjtBQUFDLFFBQUcsQUFBTyxNQUFQLFFBQVUsRUFBRSxVQUFRLEVBQUU7QUFBTSxZQUFNLE1BQU0sRUFBRTtBQUFNLFFBQUcsQUFBTyxFQUFFLFVBQVQsTUFBZTtBQUFDLFVBQUUsRUFBRTtBQUFNLFVBQUUsR0FBRyxHQUFFLEVBQUU7QUFBYyxRQUFFLFFBQU07QUFBRSxXQUFJLEVBQUUsU0FBTyxHQUFFLEFBQU8sRUFBRSxZQUFUO0FBQWtCLFlBQUUsRUFBRSxTQUFRLElBQUUsRUFBRSxVQUFRLEdBQUcsR0FBRSxFQUFFLGVBQWMsRUFBRSxTQUFPO0FBQUUsUUFBRSxVQUFRO0FBQUE7QUFBSyxXQUFPLEVBQUU7QUFBQTtBQUFNLFNBQU87QUFBQTtBQUFLLElBQUksSUFBRyxJQUFHLElBQUc7QUFDblcsS0FBRyxTQUFTLEdBQUUsR0FBRTtBQUFDLFdBQVEsSUFBRSxFQUFFLE9BQU0sQUFBTyxNQUFQLFFBQVU7QUFBQyxRQUFHLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSSxFQUFFLFFBQU47QUFBVSxRQUFFLFlBQVksRUFBRTtBQUFBLGFBQW1CLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBTyxFQUFFLFVBQVQsTUFBZTtBQUFDLFFBQUUsTUFBTSxTQUFPO0FBQUUsVUFBRSxFQUFFO0FBQU07QUFBQTtBQUFTLFFBQUcsTUFBSTtBQUFFO0FBQU0sV0FBSyxBQUFPLEVBQUUsWUFBVCxRQUFrQjtBQUFDLFVBQUcsQUFBTyxFQUFFLFdBQVQsUUFBaUIsRUFBRSxXQUFTO0FBQUU7QUFBTyxVQUFFLEVBQUU7QUFBQTtBQUFPLE1BQUUsUUFBUSxTQUFPLEVBQUU7QUFBTyxRQUFFLEVBQUU7QUFBQTtBQUFBO0FBQVUsS0FBRyxXQUFVO0FBQUE7QUFDdlQsS0FBRyxTQUFTLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRTtBQUFjLE1BQUcsTUFBSSxHQUFFO0FBQUMsUUFBRSxFQUFFO0FBQVUsT0FBRyxHQUFHO0FBQVMsUUFBSSxLQUFFO0FBQUssWUFBTztBQUFBLFdBQVE7QUFBUSxZQUFFLEdBQUcsR0FBRTtBQUFHLFlBQUUsR0FBRyxHQUFFO0FBQUcsYUFBRTtBQUFHO0FBQUEsV0FBVztBQUFTLFlBQUUsR0FBRyxHQUFFO0FBQUcsWUFBRSxHQUFHLEdBQUU7QUFBRyxhQUFFO0FBQUc7QUFBQSxXQUFXO0FBQVMsWUFBRVAsSUFBRSxJQUFHLEdBQUUsRUFBQyxPQUFNO0FBQVMsWUFBRUEsSUFBRSxJQUFHLEdBQUUsRUFBQyxPQUFNO0FBQVMsYUFBRTtBQUFHO0FBQUEsV0FBVztBQUFXLFlBQUUsR0FBRyxHQUFFO0FBQUcsWUFBRSxHQUFHLEdBQUU7QUFBRyxhQUFFO0FBQUc7QUFBQTtBQUFjLFFBQWEsT0FBTyxFQUFFLFlBQXRCLGNBQStCLEFBQWEsT0FBTyxFQUFFLFlBQXRCLGNBQWdDLEdBQUUsVUFBUTtBQUFBO0FBQUksT0FBRyxHQUFFO0FBQUcsUUFBSTtBQUFFLFFBQUU7QUFBSyxTQUFJLE1BQUs7QUFBRSxVQUFHLENBQUMsRUFBRSxlQUFlLE9BQUksRUFBRSxlQUFlLE9BQUksQUFBTSxFQUFFLE9BQVI7QUFBVyxZQUFHLEFBQzNlLE9BRDJlLFNBQ3plO0FBQUMsY0FBSSxLQUFFLEVBQUU7QUFBRyxlQUFJLE1BQUs7QUFBRSxlQUFFLGVBQWUsT0FBSyxNQUFJLEtBQUUsS0FBSSxFQUFFLE1BQUc7QUFBQTtBQUFRLFVBQTRCLE9BQTVCLDZCQUErQixBQUFhLE9BQWIsY0FBZ0IsQUFBbUMsT0FBbkMsb0NBQXNDLEFBQTZCLE9BQTdCLDhCQUFnQyxBQUFjLE9BQWQsZUFBa0IsSUFBRyxlQUFlLE1BQUcsTUFBSSxNQUFFLE1BQUssTUFBRSxNQUFHLElBQUksS0FBSyxJQUFFO0FBQU8sU0FBSSxNQUFLLEdBQUU7QUFBQyxVQUFJLElBQUUsRUFBRTtBQUFHLFdBQUUsQUFBTSxLQUFOLE9BQVEsRUFBRSxNQUFHO0FBQU8sVUFBRyxFQUFFLGVBQWUsT0FBSSxNQUFJLE1BQUksQ0FBTSxLQUFOLFFBQVMsQUFBTSxNQUFOO0FBQVMsWUFBRyxBQUFVLE9BQVY7QUFBWSxjQUFHLElBQUU7QUFBQyxpQkFBSSxNQUFLO0FBQUUsZUFBQyxHQUFFLGVBQWUsT0FBSSxLQUFHLEVBQUUsZUFBZSxPQUFLLE1BQUksS0FBRSxLQUFJLEVBQUUsTUFBRztBQUFJLGlCQUFJLE1BQUs7QUFBRSxnQkFBRSxlQUFlLE9BQUksR0FBRSxRQUFLLEVBQUUsT0FBSyxNQUNsZixLQUFFLEtBQUksRUFBRSxNQUFHLEVBQUU7QUFBQTtBQUFTLGlCQUFJLE9BQUksTUFBRSxLQUFJLEdBQUUsS0FBSyxJQUFFLEtBQUksSUFBRTtBQUFBO0FBQU0sVUFBNEIsT0FBNUIsNEJBQStCLEtBQUUsSUFBRSxFQUFFLFNBQU8sUUFBTyxLQUFFLEtBQUUsR0FBRSxTQUFPLFFBQU8sQUFBTSxLQUFOLFFBQVMsT0FBSSxLQUFJLE1BQUUsTUFBRyxJQUFJLEtBQUssSUFBRSxNQUFJLEFBQWEsT0FBYixhQUFlLEFBQVcsT0FBTyxNQUFsQixZQUFxQixBQUFXLE9BQU8sTUFBbEIsWUFBc0IsTUFBRSxNQUFHLElBQUksS0FBSyxJQUFFLEtBQUcsS0FBRyxBQUFtQyxPQUFuQyxvQ0FBc0MsQUFBNkIsT0FBN0IsOEJBQWlDLElBQUcsZUFBZSxNQUFJLENBQU0sS0FBTixRQUFTLEFBQWEsT0FBYixjQUFnQixFQUFFLFVBQVMsSUFBRyxNQUFHLE9BQUksS0FBSSxNQUFFLE9BQUssQUFBVyxPQUFPLE1BQWxCLFlBQXFCLEFBQU8sTUFBUCxRQUFVLEVBQUUsYUFBVyxLQUFHLEVBQUUsYUFBWSxNQUFFLE1BQUcsSUFBSSxLQUFLLElBQUU7QUFBQTtBQUFJLFNBQUksTUFBRSxNQUFHLElBQUksS0FBSyxTQUMvZTtBQUFHLFFBQUksS0FBRTtBQUFFLFFBQUcsRUFBRSxjQUFZO0FBQUUsUUFBRSxTQUFPO0FBQUE7QUFBQTtBQUFJLEtBQUcsU0FBUyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxLQUFJLEdBQUUsU0FBTztBQUFBO0FBQUksWUFBWSxHQUFFLEdBQUU7QUFBQyxNQUFHLENBQUM7QUFBRyxZQUFPLEVBQUU7QUFBQSxXQUFlO0FBQVMsWUFBRSxFQUFFO0FBQUssaUJBQVEsSUFBRSxNQUFLLEFBQU8sTUFBUDtBQUFVLFVBQU8sRUFBRSxjQUFULFFBQXFCLEtBQUUsSUFBRyxJQUFFLEVBQUU7QUFBUSxRQUFPLE1BQVAsT0FBUyxFQUFFLE9BQUssT0FBSyxFQUFFLFVBQVE7QUFBSztBQUFBLFdBQVc7QUFBWSxZQUFFLEVBQUU7QUFBSyxpQkFBUSxJQUFFLE1BQUssQUFBTyxNQUFQO0FBQVUsVUFBTyxFQUFFLGNBQVQsUUFBcUIsS0FBRSxJQUFHLElBQUUsRUFBRTtBQUFRLFFBQU8sTUFBUCxPQUFTLEtBQUcsQUFBTyxFQUFFLFNBQVQsT0FBYyxFQUFFLE9BQUssT0FBSyxFQUFFLEtBQUssVUFBUSxPQUFLLEVBQUUsVUFBUTtBQUFBO0FBQUE7QUFDN1osWUFBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFO0FBQWEsVUFBTyxFQUFFO0FBQUEsU0FBVTtBQUFBLFNBQU87QUFBQSxTQUFRO0FBQUEsU0FBUTtBQUFBLFNBQU87QUFBQSxTQUFRO0FBQUEsU0FBTztBQUFBLFNBQU87QUFBQSxTQUFRO0FBQUEsU0FBTztBQUFHLGFBQU87QUFBQSxTQUFVO0FBQUUsYUFBTyxHQUFHLEVBQUUsU0FBTyxNQUFLO0FBQUEsU0FBVTtBQUFFO0FBQUssUUFBRTtBQUFHLFFBQUU7QUFBRztBQUFLLFVBQUUsRUFBRTtBQUFVLFFBQUUsa0JBQWlCLEdBQUUsVUFBUSxFQUFFLGdCQUFlLEVBQUUsaUJBQWU7QUFBTSxVQUFHLEFBQU8sTUFBUCxRQUFVLEFBQU8sRUFBRSxVQUFUO0FBQWUsV0FBRyxLQUFHLEVBQUUsU0FBTyxJQUFFLEVBQUUsV0FBVSxHQUFFLFNBQU87QUFBSyxTQUFHO0FBQUcsYUFBTztBQUFBLFNBQVU7QUFBRSxTQUFHO0FBQUcsVUFBSSxJQUFFLEdBQUcsR0FBRztBQUFTLFVBQUUsRUFBRTtBQUFLLFVBQUcsQUFBTyxNQUFQLFFBQVUsQUFBTSxFQUFFLGFBQVI7QUFBa0IsV0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsRUFBRSxRQUFNLEVBQUUsT0FBTSxHQUFFLFNBQU87QUFBQSxXQUFTO0FBQUMsWUFBRyxDQUFDLEdBQUU7QUFBQyxjQUFHLEFBQzdmLEVBQUUsY0FEMmY7QUFDamYsa0JBQU0sTUFBTSxFQUFFO0FBQU0saUJBQU87QUFBQTtBQUFLLFlBQUUsR0FBRyxHQUFHO0FBQVMsWUFBRyxHQUFHLElBQUc7QUFBQyxjQUFFLEVBQUU7QUFBVSxjQUFFLEVBQUU7QUFBSyxjQUFJLEtBQUUsRUFBRTtBQUFjLFlBQUUsTUFBSTtBQUFFLFlBQUUsTUFBSTtBQUFFLGtCQUFPO0FBQUEsaUJBQVE7QUFBUyxnQkFBRSxVQUFTO0FBQUcsZ0JBQUUsU0FBUTtBQUFHO0FBQUEsaUJBQVc7QUFBQSxpQkFBYztBQUFBLGlCQUFjO0FBQVEsZ0JBQUUsUUFBTztBQUFHO0FBQUEsaUJBQVc7QUFBQSxpQkFBYTtBQUFRLG1CQUFJLElBQUUsR0FBRSxJQUFFLEdBQUcsUUFBTztBQUFJLGtCQUFFLEdBQUcsSUFBRztBQUFHO0FBQUEsaUJBQVc7QUFBUyxnQkFBRSxTQUFRO0FBQUc7QUFBQSxpQkFBVztBQUFBLGlCQUFXO0FBQUEsaUJBQWE7QUFBTyxnQkFBRSxTQUFRO0FBQUcsZ0JBQUUsUUFBTztBQUFHO0FBQUEsaUJBQVc7QUFBVSxnQkFBRSxVQUFTO0FBQUc7QUFBQSxpQkFBVztBQUFRLGlCQUFHLEdBQUU7QUFBRyxnQkFBRSxXQUFVO0FBQUc7QUFBQSxpQkFBVztBQUFTLGdCQUFFLGdCQUM1ZixFQUFDLGFBQVksQ0FBQyxDQUFDLEdBQUU7QUFBVSxnQkFBRSxXQUFVO0FBQUc7QUFBQSxpQkFBVztBQUFXLGlCQUFHLEdBQUUsS0FBRyxFQUFFLFdBQVU7QUFBQTtBQUFHLGFBQUcsR0FBRTtBQUFHLGNBQUU7QUFBSyxtQkFBUSxNQUFLO0FBQUUsZUFBRSxlQUFlLE9BQUssS0FBRSxHQUFFLEtBQUcsQUFBYSxPQUFiLGFBQWUsQUFBVyxPQUFPLE1BQWxCLFdBQW9CLEVBQUUsZ0JBQWMsS0FBSSxLQUFFLENBQUMsWUFBVyxNQUFJLEFBQVcsT0FBTyxNQUFsQixZQUFxQixFQUFFLGdCQUFjLEtBQUcsS0FBSSxLQUFFLENBQUMsWUFBVyxLQUFHLE1BQUksR0FBRyxlQUFlLE9BQUksQUFBTSxLQUFOLFFBQVMsQUFBYSxPQUFiLGNBQWdCLEVBQUUsVUFBUztBQUFJLGtCQUFPO0FBQUEsaUJBQVE7QUFBUSxpQkFBRztBQUFHLGlCQUFHLEdBQUUsSUFBRTtBQUFJO0FBQUEsaUJBQVc7QUFBVyxpQkFBRztBQUFHLGlCQUFHO0FBQUc7QUFBQSxpQkFBVztBQUFBLGlCQUFjO0FBQVM7QUFBQTtBQUFjLGNBQWEsT0FBTyxHQUFFLFlBQXRCLGNBQWdDLEdBQUUsVUFDdGY7QUFBQTtBQUFJLGNBQUU7QUFBRSxZQUFFLGNBQVk7QUFBRSxVQUFPLE1BQVAsUUFBVyxHQUFFLFNBQU87QUFBQSxlQUFPO0FBQUMsZUFBRSxBQUFJLEVBQUUsYUFBTixJQUFlLElBQUUsRUFBRTtBQUFjLGdCQUFJLEdBQUcsUUFBTyxLQUFFLEdBQUc7QUFBSSxnQkFBSSxHQUFHLE9BQUssQUFBVyxNQUFYLFdBQWMsS0FBRSxHQUFFLGNBQWMsUUFBTyxFQUFFLFlBQVUsc0JBQXVCLElBQUUsRUFBRSxZQUFZLEVBQUUsZUFBYSxBQUFXLE9BQU8sRUFBRSxPQUFwQixXQUF1QixJQUFFLEdBQUUsY0FBYyxHQUFFLEVBQUMsSUFBRyxFQUFFLFFBQU0sS0FBRSxHQUFFLGNBQWMsSUFBRyxBQUFXLE1BQVgsWUFBZSxNQUFFLEdBQUUsRUFBRSxXQUFTLEdBQUUsV0FBUyxPQUFHLEVBQUUsUUFBTyxJQUFFLE9BQUssRUFBRSxVQUFRLElBQUUsR0FBRSxnQkFBZ0IsR0FBRTtBQUFHLFlBQUUsTUFBSTtBQUFFLFlBQUUsTUFBSTtBQUFFLGFBQUcsR0FBRSxHQUFFLE9BQUc7QUFBSSxZQUFFLFlBQVU7QUFBRSxlQUFFLEdBQUcsR0FBRTtBQUFHLGtCQUFPO0FBQUEsaUJBQVE7QUFBUyxnQkFBRSxVQUFTO0FBQUcsZ0JBQUUsU0FBUTtBQUNwZixrQkFBRTtBQUFFO0FBQUEsaUJBQVc7QUFBQSxpQkFBYztBQUFBLGlCQUFjO0FBQVEsZ0JBQUUsUUFBTztBQUFHLGtCQUFFO0FBQUU7QUFBQSxpQkFBVztBQUFBLGlCQUFhO0FBQVEsbUJBQUksSUFBRSxHQUFFLElBQUUsR0FBRyxRQUFPO0FBQUksa0JBQUUsR0FBRyxJQUFHO0FBQUcsa0JBQUU7QUFBRTtBQUFBLGlCQUFXO0FBQVMsZ0JBQUUsU0FBUTtBQUFHLGtCQUFFO0FBQUU7QUFBQSxpQkFBVztBQUFBLGlCQUFXO0FBQUEsaUJBQWE7QUFBTyxnQkFBRSxTQUFRO0FBQUcsZ0JBQUUsUUFBTztBQUFHLGtCQUFFO0FBQUU7QUFBQSxpQkFBVztBQUFVLGdCQUFFLFVBQVM7QUFBRyxrQkFBRTtBQUFFO0FBQUEsaUJBQVc7QUFBUSxpQkFBRyxHQUFFO0FBQUcsa0JBQUUsR0FBRyxHQUFFO0FBQUcsZ0JBQUUsV0FBVTtBQUFHO0FBQUEsaUJBQVc7QUFBUyxrQkFBRSxHQUFHLEdBQUU7QUFBRztBQUFBLGlCQUFXO0FBQVMsZ0JBQUUsZ0JBQWMsRUFBQyxhQUFZLENBQUMsQ0FBQyxFQUFFO0FBQVUsa0JBQUVBLElBQUUsSUFBRyxHQUFFLEVBQUMsT0FBTTtBQUFTLGdCQUFFLFdBQVU7QUFBRztBQUFBLGlCQUFXO0FBQVcsaUJBQUcsR0FBRTtBQUFHLGtCQUNwZixHQUFHLEdBQUU7QUFBRyxnQkFBRSxXQUFVO0FBQUc7QUFBQTtBQUFjLGtCQUFFO0FBQUE7QUFBRSxhQUFHLEdBQUU7QUFBRyxjQUFJLEtBQUU7QUFBRSxlQUFJLE1BQUs7QUFBRSxnQkFBRyxHQUFFLGVBQWUsS0FBRztBQUFDLGtCQUFJLElBQUUsR0FBRTtBQUFHLGNBQVUsT0FBVixVQUFZLEdBQUcsR0FBRSxLQUFHLEFBQTRCLE9BQTVCLDRCQUErQixLQUFFLElBQUUsRUFBRSxTQUFPLFFBQU8sQUFBTSxLQUFOLFFBQVMsR0FBRyxHQUFFLE1BQUksQUFBYSxPQUFiLGFBQWUsQUFBVyxPQUFPLE1BQWxCLFdBQXFCLENBQWEsTUFBYixjQUFnQixBQUFLLE1BQUwsT0FBUyxHQUFHLEdBQUUsS0FBRyxBQUFXLE9BQU8sTUFBbEIsWUFBcUIsR0FBRyxHQUFFLEtBQUcsS0FBRyxBQUFtQyxPQUFuQyxvQ0FBc0MsQUFBNkIsT0FBN0IsOEJBQWdDLEFBQWMsT0FBZCxlQUFrQixJQUFHLGVBQWUsTUFBRyxBQUFNLEtBQU4sUUFBUyxBQUFhLE9BQWIsY0FBZ0IsRUFBRSxVQUFTLEtBQUcsQUFBTSxLQUFOLFFBQVMsR0FBRyxHQUFFLElBQUUsR0FBRTtBQUFBO0FBQUksa0JBQU87QUFBQSxpQkFBUTtBQUFRLGlCQUFHO0FBQUcsaUJBQUcsR0FBRSxHQUFFO0FBQ25mO0FBQUEsaUJBQVc7QUFBVyxpQkFBRztBQUFHLGlCQUFHO0FBQUc7QUFBQSxpQkFBVztBQUFTLGNBQU0sRUFBRSxTQUFSLFFBQWUsRUFBRSxhQUFhLFNBQVEsS0FBRyxHQUFHLEVBQUU7QUFBUTtBQUFBLGlCQUFXO0FBQVMsZ0JBQUUsV0FBUyxDQUFDLENBQUMsRUFBRTtBQUFTLG1CQUFFLEVBQUU7QUFBTSxjQUFNLE1BQU4sT0FBUSxHQUFHLEdBQUUsQ0FBQyxDQUFDLEVBQUUsVUFBUyxJQUFFLFNBQUksQUFBTSxFQUFFLGdCQUFSLFFBQXNCLEdBQUcsR0FBRSxDQUFDLENBQUMsRUFBRSxVQUFTLEVBQUUsY0FBYTtBQUFJO0FBQUE7QUFBYyxjQUFhLE9BQU8sRUFBRSxZQUF0QixjQUFnQyxHQUFFLFVBQVE7QUFBQTtBQUFJLGFBQUcsR0FBRSxNQUFLLEdBQUUsU0FBTztBQUFBO0FBQUcsUUFBTyxFQUFFLFFBQVQsUUFBZSxHQUFFLFNBQU87QUFBQTtBQUFLLGFBQU87QUFBQSxTQUFVO0FBQUUsVUFBRyxLQUFHLEFBQU0sRUFBRSxhQUFSO0FBQWtCLFdBQUcsR0FBRSxHQUFFLEVBQUUsZUFBYztBQUFBLFdBQU87QUFBQyxZQUFHLEFBQVcsT0FBTyxNQUFsQixZQUFxQixBQUFPLEVBQUUsY0FBVDtBQUFtQixnQkFBTSxNQUFNLEVBQUU7QUFDL2UsWUFBRSxHQUFHLEdBQUc7QUFBUyxXQUFHLEdBQUc7QUFBUyxXQUFHLEtBQUksS0FBRSxFQUFFLFdBQVUsSUFBRSxFQUFFLGVBQWMsRUFBRSxNQUFJLEdBQUUsRUFBRSxjQUFZLEtBQUksR0FBRSxTQUFPLE1BQUssS0FBRyxDQUFJLEVBQUUsYUFBTixJQUFlLElBQUUsRUFBRSxlQUFlLGVBQWUsSUFBRyxFQUFFLE1BQUksR0FBRSxFQUFFLFlBQVU7QUFBQTtBQUFHLGFBQU87QUFBQSxTQUFVO0FBQUcsUUFBRTtBQUFHLFVBQUUsRUFBRTtBQUFjLFVBQUcsQUFBSyxHQUFFLFFBQU0sUUFBYjtBQUFpQixlQUFPLEVBQUUsUUFBTSxHQUFFO0FBQUUsVUFBRSxBQUFPLE1BQVA7QUFBUyxVQUFFO0FBQUcsTUFBTyxNQUFQLE9BQVMsQUFBUyxFQUFFLGNBQWMsYUFBekIsVUFBbUMsR0FBRyxLQUFHLElBQUUsQUFBTyxFQUFFLGtCQUFUO0FBQXVCLFVBQUcsS0FBRyxDQUFDLEtBQUcsQUFBSyxHQUFFLE9BQUssT0FBWjtBQUFlLFlBQUcsQUFBTyxNQUFQLFFBQVUsQUFBSyxFQUFFLGNBQWMsK0JBQXJCLFFBQWlELEFBQUssR0FBRSxVQUFRLE9BQWY7QUFBa0IsVUFBSSxNQUFKLEtBQVEsS0FBRTtBQUFBLGFBQU87QUFBQyxjQUFHLEFBQUksTUFBSixLQUFPLEFBQUksTUFBSjtBQUFNLGdCQUNyZjtBQUFFLFVBQU8sTUFBUCxRQUFVLEFBQUssTUFBRyxlQUFSLEtBQW9CLEFBQUssTUFBRyxlQUFSLEtBQW9CLEdBQUcsR0FBRTtBQUFBO0FBQUcsVUFBRyxLQUFHO0FBQUUsVUFBRSxTQUFPO0FBQUUsYUFBTztBQUFBLFNBQVU7QUFBRSxhQUFPLE1BQUssR0FBRyxJQUFHLEFBQU8sTUFBUCxRQUFVLEdBQUcsRUFBRSxVQUFVLGdCQUFlO0FBQUEsU0FBVTtBQUFHLGFBQU8sR0FBRyxJQUFHO0FBQUEsU0FBVTtBQUFHLGFBQU8sR0FBRyxFQUFFLFNBQU8sTUFBSztBQUFBLFNBQVU7QUFBRyxRQUFFO0FBQUcsVUFBRSxFQUFFO0FBQWMsVUFBRyxBQUFPLE1BQVA7QUFBUyxlQUFPO0FBQUssV0FBRSxBQUFLLEdBQUUsUUFBTSxRQUFiO0FBQWlCLFdBQUUsRUFBRTtBQUFVLFVBQUcsQUFBTyxPQUFQO0FBQVMsWUFBRztBQUFFLGFBQUcsR0FBRTtBQUFBLGFBQVE7QUFBQyxjQUFHLEFBQUksTUFBSixLQUFPLEFBQU8sTUFBUCxRQUFVLEFBQUssR0FBRSxRQUFNLFFBQWI7QUFBaUIsaUJBQUksSUFBRSxFQUFFLE9BQU0sQUFBTyxNQUFQLFFBQVU7QUFBQyxtQkFBRSxHQUFHO0FBQUcsa0JBQUcsQUFBTyxPQUFQLE1BQVM7QUFBQyxrQkFBRSxTQUFPO0FBQUcsbUJBQUcsR0FBRTtBQUFJLHFCQUFFLEdBQUU7QUFBWSxnQkFBTyxPQUFQLFFBQVcsR0FBRSxjQUFZLElBQUUsRUFBRSxTQUFPO0FBQ25mLGdCQUFPLEVBQUUsZUFBVCxRQUFzQixHQUFFLGNBQVk7QUFBTSxrQkFBRSxhQUFXLEVBQUU7QUFBVyxvQkFBRTtBQUFFLHFCQUFJLElBQUUsRUFBRSxPQUFNLEFBQU8sTUFBUDtBQUFVLHVCQUFFLEdBQUUsSUFBRSxHQUFFLEdBQUUsU0FBTyxHQUFFLEdBQUUsYUFBVyxNQUFLLEdBQUUsY0FBWSxNQUFLLEdBQUUsYUFBVyxNQUFLLEtBQUUsR0FBRSxXQUFVLEFBQU8sT0FBUCxPQUFVLElBQUUsYUFBVyxHQUFFLEdBQUUsUUFBTSxHQUFFLEdBQUUsUUFBTSxNQUFLLEdBQUUsZ0JBQWMsTUFBSyxHQUFFLGdCQUFjLE1BQUssR0FBRSxjQUFZLE1BQUssR0FBRSxlQUFhLE1BQUssR0FBRSxZQUFVLFFBQU8sSUFBRSxhQUFXLEdBQUUsWUFBVyxHQUFFLFFBQU0sR0FBRSxPQUFNLEdBQUUsUUFBTSxHQUFFLE9BQU0sR0FBRSxnQkFBYyxHQUFFLGVBQWMsR0FBRSxnQkFBYyxHQUFFLGVBQWMsR0FBRSxjQUFZLEdBQUUsYUFBWSxHQUFFLE9BQUssR0FBRSxNQUFLLElBQUUsR0FBRSxjQUNwZixHQUFFLGVBQWEsQUFBTyxNQUFQLE9BQVMsT0FBSyxFQUFDLE9BQU0sRUFBRSxPQUFNLGNBQWEsRUFBRSxpQkFBZSxJQUFFLEVBQUU7QUFBUSxrQkFBRSxHQUFFLEVBQUUsVUFBUSxJQUFFO0FBQUcsdUJBQU8sRUFBRTtBQUFBO0FBQU0sa0JBQUUsRUFBRTtBQUFBO0FBQVEsVUFBTyxFQUFFLFNBQVQsUUFBZSxNQUFJLE1BQUssR0FBRSxTQUFPLElBQUcsS0FBRSxNQUFHLEdBQUcsR0FBRSxRQUFJLEVBQUUsUUFBTTtBQUFBO0FBQUEsV0FBYztBQUFDLFlBQUcsQ0FBQztBQUFFLGNBQUcsSUFBRSxHQUFHLEtBQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxnQkFBRyxFQUFFLFNBQU8sSUFBRyxLQUFFLE1BQUcsSUFBRSxFQUFFLGFBQVksQUFBTyxNQUFQLFFBQVcsR0FBRSxjQUFZLEdBQUUsRUFBRSxTQUFPLElBQUcsR0FBRyxHQUFFLE9BQUksQUFBTyxFQUFFLFNBQVQsUUFBZSxBQUFXLEVBQUUsYUFBYixZQUF1QixDQUFDLEdBQUUsYUFBVyxDQUFDO0FBQUcscUJBQU8sSUFBRSxFQUFFLGFBQVcsRUFBRSxZQUFXLEFBQU8sTUFBUCxRQUFXLEdBQUUsYUFBVyxPQUFNO0FBQUE7QUFBVSxnQkFBRSxNQUFJLEVBQUUscUJBQW1CLE1BQUksQUFBYSxNQUFiLGNBQWlCLEdBQUUsU0FDamYsSUFBRyxLQUFFLE1BQUcsR0FBRyxHQUFFLFFBQUksRUFBRSxRQUFNO0FBQVUsVUFBRSxjQUFhLElBQUUsVUFBUSxFQUFFLE9BQU0sRUFBRSxRQUFNLE1BQUksS0FBRSxFQUFFLE1BQUssQUFBTyxNQUFQLE9BQVMsRUFBRSxVQUFRLEtBQUUsRUFBRSxRQUFNLElBQUUsRUFBRSxPQUFLO0FBQUE7QUFBRyxhQUFPLEFBQU8sRUFBRSxTQUFULE9BQWUsS0FBRSxFQUFFLE1BQUssRUFBRSxZQUFVLEdBQUUsRUFBRSxPQUFLLEVBQUUsU0FBUSxFQUFFLGFBQVcsRUFBRSxZQUFXLEVBQUUscUJBQW1CLEtBQUksRUFBRSxVQUFRLE1BQUssSUFBRSxFQUFFLFNBQVEsRUFBRSxHQUFFLEtBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEtBQUc7QUFBQSxTQUFVO0FBQUEsU0FBUTtBQUFHLGFBQU8sTUFBSyxBQUFPLE1BQVAsUUFBVSxBQUFPLEVBQUUsa0JBQVQsU0FBMEIsQ0FBTyxFQUFFLGtCQUFULFNBQXlCLEFBQWtDLEVBQUUsU0FBcEMsbUNBQTJDLEdBQUUsU0FBTyxJQUFHO0FBQUE7QUFBSyxRQUFNLE1BQU0sRUFBRSxLQUFJLEVBQUU7QUFBQTtBQUNoZCxZQUFZLEdBQUU7QUFBQyxVQUFPLEVBQUU7QUFBQSxTQUFVO0FBQUUsU0FBRyxFQUFFLFNBQU87QUFBSyxVQUFJLElBQUUsRUFBRTtBQUFNLGFBQU8sSUFBRSxPQUFNLEdBQUUsUUFBTSxJQUFFLFFBQU0sSUFBRyxLQUFHO0FBQUEsU0FBVTtBQUFFO0FBQUssUUFBRTtBQUFHLFFBQUU7QUFBRztBQUFLLFVBQUUsRUFBRTtBQUFNLFVBQUcsQUFBSyxLQUFFLFFBQVA7QUFBVyxjQUFNLE1BQU0sRUFBRTtBQUFNLFFBQUUsUUFBTSxJQUFFLFFBQU07QUFBRyxhQUFPO0FBQUEsU0FBTztBQUFFLGFBQU8sR0FBRyxJQUFHO0FBQUEsU0FBVTtBQUFHLGFBQU8sRUFBRSxJQUFHLElBQUUsRUFBRSxPQUFNLElBQUUsT0FBTSxHQUFFLFFBQU0sSUFBRSxRQUFNLElBQUcsS0FBRztBQUFBLFNBQVU7QUFBRyxhQUFPLEVBQUUsSUFBRztBQUFBLFNBQVU7QUFBRSxhQUFPLE1BQUs7QUFBQSxTQUFVO0FBQUcsYUFBTyxHQUFHLElBQUc7QUFBQSxTQUFVO0FBQUEsU0FBUTtBQUFHLGFBQU8sTUFBSztBQUFBO0FBQWEsYUFBTztBQUFBO0FBQUE7QUFDcmEsWUFBWSxHQUFFLEdBQUU7QUFBQyxNQUFHO0FBQUMsUUFBSSxJQUFFLElBQUcsSUFBRTtBQUFFO0FBQUcsV0FBRyxHQUFHLElBQUcsSUFBRSxFQUFFO0FBQUEsV0FBYTtBQUFHLFFBQUksSUFBRTtBQUFBLFdBQVEsSUFBTjtBQUFTLFFBQUUsK0JBQTZCLEdBQUUsVUFBUSxPQUFLLEdBQUU7QUFBQTtBQUFNLFNBQU0sRUFBQyxPQUFNLEdBQUUsUUFBTyxHQUFFLE9BQU07QUFBQTtBQUFHLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBRztBQUFDLFlBQVEsTUFBTSxFQUFFO0FBQUEsV0FBYSxHQUFOO0FBQVMsZUFBVyxXQUFVO0FBQUMsWUFBTTtBQUFBO0FBQUE7QUFBQTtBQUFNLElBQUksS0FBRyxBQUFhLE9BQU8sWUFBcEIsYUFBNEIsVUFBUTtBQUFJLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLEdBQUcsSUFBRztBQUFHLElBQUUsTUFBSTtBQUFFLElBQUUsVUFBUSxFQUFDLFNBQVE7QUFBTSxNQUFJLElBQUUsRUFBRTtBQUFNLElBQUUsV0FBUyxXQUFVO0FBQUMsVUFBSyxNQUFHLE1BQUcsS0FBRztBQUFHLE9BQUcsR0FBRTtBQUFBO0FBQUksU0FBTztBQUFBO0FBQ3BiLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLEdBQUcsSUFBRztBQUFHLElBQUUsTUFBSTtBQUFFLE1BQUksSUFBRSxFQUFFLEtBQUs7QUFBeUIsTUFBRyxBQUFhLE9BQU8sTUFBcEIsWUFBc0I7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFNLE1BQUUsVUFBUSxXQUFVO0FBQUMsU0FBRyxHQUFFO0FBQUcsYUFBTyxFQUFFO0FBQUE7QUFBQTtBQUFJLE1BQUksS0FBRSxFQUFFO0FBQVUsRUFBTyxPQUFQLFFBQVUsQUFBYSxPQUFPLEdBQUUsc0JBQXRCLGNBQTBDLEdBQUUsV0FBUyxXQUFVO0FBQUMsSUFBYSxPQUFPLE1BQXBCLGNBQXdCLENBQU8sT0FBUCxPQUFVLEtBQUcsSUFBSSxJQUFJLENBQUMsU0FBTyxHQUFHLElBQUksT0FBTSxHQUFHLEdBQUU7QUFBSSxRQUFJLEtBQUUsRUFBRTtBQUFNLFNBQUssa0JBQWtCLEVBQUUsT0FBTSxFQUFDLGdCQUFlLEFBQU8sT0FBUCxPQUFTLEtBQUU7QUFBQTtBQUFPLFNBQU87QUFBQTtBQUFFLElBQUksS0FBRyxBQUFhLE9BQU8sWUFBcEIsYUFBNEIsVUFBUTtBQUN4YyxZQUFZLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRTtBQUFJLE1BQUcsQUFBTyxNQUFQO0FBQVMsUUFBRyxBQUFhLE9BQU8sTUFBcEI7QUFBc0IsVUFBRztBQUFDLFVBQUU7QUFBQSxlQUFZLEdBQU47QUFBUyxXQUFHLEdBQUU7QUFBQTtBQUFBO0FBQVEsUUFBRSxVQUFRO0FBQUE7QUFBSyxZQUFZLEdBQUUsR0FBRTtBQUFDLFVBQU8sRUFBRTtBQUFBLFNBQVU7QUFBQSxTQUFPO0FBQUEsU0FBUTtBQUFBLFNBQVE7QUFBRztBQUFBLFNBQVk7QUFBRSxVQUFHLEVBQUUsUUFBTSxPQUFLLEFBQU8sTUFBUCxNQUFTO0FBQUMsWUFBSSxJQUFFLEVBQUUsZUFBYyxJQUFFLEVBQUU7QUFBYyxZQUFFLEVBQUU7QUFBVSxZQUFFLEVBQUUsd0JBQXdCLEVBQUUsZ0JBQWMsRUFBRSxPQUFLLElBQUUsR0FBRyxFQUFFLE1BQUssSUFBRztBQUFHLFVBQUUsc0NBQW9DO0FBQUE7QUFBRTtBQUFBLFNBQVk7QUFBRSxRQUFFLFFBQU0sT0FBSyxHQUFHLEVBQUUsVUFBVTtBQUFlO0FBQUEsU0FBWTtBQUFBLFNBQU87QUFBQSxTQUFPO0FBQUEsU0FBTztBQUFHO0FBQUE7QUFBTyxRQUFNLE1BQU0sRUFBRTtBQUFBO0FBQzVlLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxVQUFPLEVBQUU7QUFBQSxTQUFVO0FBQUEsU0FBTztBQUFBLFNBQVE7QUFBQSxTQUFRO0FBQUcsVUFBRSxFQUFFO0FBQVksVUFBRSxBQUFPLE1BQVAsT0FBUyxFQUFFLGFBQVc7QUFBSyxVQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsWUFBRSxJQUFFLEVBQUU7QUFBSyxXQUFFO0FBQUMsY0FBRyxBQUFLLEdBQUUsTUFBSSxPQUFYLEdBQWM7QUFBQyxnQkFBSSxJQUFFLEVBQUU7QUFBTyxjQUFFLFVBQVE7QUFBQTtBQUFJLGNBQUUsRUFBRTtBQUFBLGlCQUFXLE1BQUk7QUFBQTtBQUFHLFVBQUUsRUFBRTtBQUFZLFVBQUUsQUFBTyxNQUFQLE9BQVMsRUFBRSxhQUFXO0FBQUssVUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFlBQUUsSUFBRSxFQUFFO0FBQUssV0FBRTtBQUFDLGNBQUksSUFBRTtBQUFFLGNBQUUsRUFBRTtBQUFLLGNBQUUsRUFBRTtBQUFJLFVBQUssS0FBRSxPQUFQLEtBQVcsQUFBSyxLQUFFLE9BQVAsS0FBWSxJQUFHLEdBQUUsSUFBRyxHQUFHLEdBQUU7QUFBSSxjQUFFO0FBQUEsaUJBQVEsTUFBSTtBQUFBO0FBQUc7QUFBQSxTQUFZO0FBQUUsVUFBRSxFQUFFO0FBQVUsUUFBRSxRQUFNLEtBQUksQ0FBTyxNQUFQLE9BQVMsRUFBRSxzQkFBcUIsS0FBRSxFQUFFLGdCQUFjLEVBQUUsT0FBSyxFQUFFLGdCQUFjLEdBQUcsRUFBRSxNQUFLLEVBQUUsZ0JBQWUsRUFBRSxtQkFBbUIsR0FDeGdCLEVBQUUsZUFBYyxFQUFFO0FBQXVDLFVBQUUsRUFBRTtBQUFZLE1BQU8sTUFBUCxRQUFVLEdBQUcsR0FBRSxHQUFFO0FBQUc7QUFBQSxTQUFZO0FBQUUsVUFBRSxFQUFFO0FBQVksVUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFlBQUU7QUFBSyxZQUFHLEFBQU8sRUFBRSxVQUFUO0FBQWUsa0JBQU8sRUFBRSxNQUFNO0FBQUEsaUJBQVU7QUFBRSxrQkFBRSxFQUFFLE1BQU07QUFBVTtBQUFBLGlCQUFXO0FBQUUsa0JBQUUsRUFBRSxNQUFNO0FBQUE7QUFBVSxXQUFHLEdBQUUsR0FBRTtBQUFBO0FBQUc7QUFBQSxTQUFZO0FBQUUsVUFBRSxFQUFFO0FBQVUsTUFBTyxNQUFQLFFBQVUsRUFBRSxRQUFNLEtBQUcsR0FBRyxFQUFFLE1BQUssRUFBRSxrQkFBZ0IsRUFBRTtBQUFRO0FBQUEsU0FBWTtBQUFFO0FBQUEsU0FBWTtBQUFFO0FBQUEsU0FBWTtBQUFHO0FBQUEsU0FBWTtBQUFHLE1BQU8sRUFBRSxrQkFBVCxRQUF5QixLQUFFLEVBQUUsV0FBVSxBQUFPLE1BQVAsUUFBVyxLQUFFLEVBQUUsZUFBYyxBQUFPLE1BQVAsUUFBVyxLQUFFLEVBQUUsWUFBVyxBQUFPLE1BQVAsUUFBVSxHQUFHO0FBQ3ZmO0FBQUEsU0FBWTtBQUFBLFNBQVE7QUFBQSxTQUFRO0FBQUEsU0FBUTtBQUFBLFNBQVE7QUFBQSxTQUFRO0FBQUc7QUFBQTtBQUFPLFFBQU0sTUFBTSxFQUFFO0FBQUE7QUFDNUUsWUFBWSxHQUFFLEdBQUU7QUFBQyxXQUFRLElBQUUsT0FBSTtBQUFDLFFBQUcsQUFBSSxFQUFFLFFBQU4sR0FBVTtBQUFDLFVBQUksSUFBRSxFQUFFO0FBQVUsVUFBRztBQUFFLFlBQUUsRUFBRSxPQUFNLEFBQWEsT0FBTyxFQUFFLGdCQUF0QixhQUFrQyxFQUFFLFlBQVksV0FBVSxRQUFPLGVBQWEsRUFBRSxVQUFRO0FBQUEsV0FBVztBQUFDLFlBQUUsRUFBRTtBQUFVLFlBQUksSUFBRSxFQUFFLGNBQWM7QUFBTSxZQUFFLEFBQVMsTUFBVCxVQUFZLEFBQU8sTUFBUCxRQUFVLEVBQUUsZUFBZSxhQUFXLEVBQUUsVUFBUTtBQUFLLFVBQUUsTUFBTSxVQUFRLEdBQUcsV0FBVTtBQUFBO0FBQUEsZUFBWSxBQUFJLEVBQUUsUUFBTjtBQUFVLFFBQUUsVUFBVSxZQUFVLElBQUUsS0FBRyxFQUFFO0FBQUEsYUFBdUIsQ0FBSyxFQUFFLFFBQVAsTUFBWSxBQUFLLEVBQUUsUUFBUCxNQUFZLEFBQU8sRUFBRSxrQkFBVCxRQUF3QixNQUFJLE1BQUksQUFBTyxFQUFFLFVBQVQsTUFBZTtBQUFDLFFBQUUsTUFBTSxTQUFPO0FBQUUsVUFBRSxFQUFFO0FBQU07QUFBQTtBQUFTLFFBQUcsTUFDdGY7QUFBRTtBQUFNLFdBQUssQUFBTyxFQUFFLFlBQVQsUUFBa0I7QUFBQyxVQUFHLEFBQU8sRUFBRSxXQUFULFFBQWlCLEVBQUUsV0FBUztBQUFFO0FBQU8sVUFBRSxFQUFFO0FBQUE7QUFBTyxNQUFFLFFBQVEsU0FBTyxFQUFFO0FBQU8sUUFBRSxFQUFFO0FBQUE7QUFBQTtBQUNqSCxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUcsTUFBSSxBQUFhLE9BQU8sR0FBRyx5QkFBdkI7QUFBNEMsUUFBRztBQUFDLFNBQUcscUJBQXFCLElBQUc7QUFBQSxhQUFTLElBQU47QUFBQTtBQUFVLFVBQU8sRUFBRTtBQUFBLFNBQVU7QUFBQSxTQUFPO0FBQUEsU0FBUTtBQUFBLFNBQVE7QUFBQSxTQUFRO0FBQUcsVUFBRSxFQUFFO0FBQVksVUFBRyxBQUFPLE1BQVAsUUFBVyxLQUFFLEVBQUUsWUFBVyxBQUFPLE1BQVAsT0FBVTtBQUFDLFlBQUksSUFBRSxJQUFFLEVBQUU7QUFBSyxXQUFFO0FBQUMsY0FBSSxJQUFFLEdBQUUsSUFBRSxFQUFFO0FBQVEsY0FBRSxFQUFFO0FBQUksY0FBRyxBQUFTLE1BQVQ7QUFBVyxnQkFBRyxBQUFLLEtBQUUsT0FBUDtBQUFVLGlCQUFHLEdBQUU7QUFBQSxpQkFBTztBQUFDLGtCQUFFO0FBQUUsa0JBQUc7QUFBQztBQUFBLHVCQUFVLElBQU47QUFBUyxtQkFBRyxHQUFFO0FBQUE7QUFBQTtBQUFJLGNBQUUsRUFBRTtBQUFBLGlCQUFXLE1BQUk7QUFBQTtBQUFHO0FBQUEsU0FBVztBQUFFLFNBQUc7QUFBRyxVQUFFLEVBQUU7QUFBVSxVQUFHLEFBQWEsT0FBTyxFQUFFLHlCQUF0QjtBQUEyQyxZQUFHO0FBQUMsWUFBRSxRQUFNLEVBQUUsZUFBYyxFQUFFLFFBQU0sRUFBRSxlQUFjLEVBQUU7QUFBQSxpQkFBNkIsSUFBTjtBQUFTLGFBQUcsR0FDL2dCO0FBQUE7QUFBRztBQUFBLFNBQVc7QUFBRSxTQUFHO0FBQUc7QUFBQSxTQUFXO0FBQUUsU0FBRyxHQUFFO0FBQUE7QUFBQTtBQUFJLFlBQVksR0FBRTtBQUFDLElBQUUsWUFBVTtBQUFLLElBQUUsUUFBTTtBQUFLLElBQUUsZUFBYTtBQUFLLElBQUUsY0FBWTtBQUFLLElBQUUsYUFBVztBQUFLLElBQUUsZ0JBQWM7QUFBSyxJQUFFLGdCQUFjO0FBQUssSUFBRSxlQUFhO0FBQUssSUFBRSxTQUFPO0FBQUssSUFBRSxjQUFZO0FBQUE7QUFBSyxZQUFZLEdBQUU7QUFBQyxTQUFPLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSSxFQUFFLFFBQU4sS0FBVyxBQUFJLEVBQUUsUUFBTjtBQUFBO0FBQzdSLFlBQVksR0FBRTtBQUFDLEtBQUU7QUFBQyxhQUFRLElBQUUsRUFBRSxRQUFPLEFBQU8sTUFBUCxRQUFVO0FBQUMsVUFBRyxHQUFHO0FBQUc7QUFBUSxVQUFFLEVBQUU7QUFBQTtBQUFPLFVBQU0sTUFBTSxFQUFFO0FBQUE7QUFBTyxNQUFJLElBQUU7QUFBRSxNQUFFLEVBQUU7QUFBVSxVQUFPLEVBQUU7QUFBQSxTQUFVO0FBQUUsVUFBSSxJQUFFO0FBQUc7QUFBQSxTQUFXO0FBQUUsVUFBRSxFQUFFO0FBQWMsVUFBRTtBQUFHO0FBQUEsU0FBVztBQUFFLFVBQUUsRUFBRTtBQUFjLFVBQUU7QUFBRztBQUFBO0FBQWMsWUFBTSxNQUFNLEVBQUU7QUFBQTtBQUFPLElBQUUsUUFBTSxNQUFLLElBQUcsR0FBRSxLQUFJLEVBQUUsU0FBTztBQUFLO0FBQUU7QUFBRSxXQUFJLElBQUUsT0FBSTtBQUFDLGVBQUssQUFBTyxFQUFFLFlBQVQsUUFBa0I7QUFBQyxjQUFHLEFBQU8sRUFBRSxXQUFULFFBQWlCLEdBQUcsRUFBRSxTQUFRO0FBQUMsZ0JBQUU7QUFBSztBQUFBO0FBQVEsY0FBRSxFQUFFO0FBQUE7QUFBTyxVQUFFLFFBQVEsU0FBTyxFQUFFO0FBQU8sYUFBSSxJQUFFLEVBQUUsU0FBUSxBQUFJLEVBQUUsUUFBTixLQUFXLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSyxFQUFFLFFBQVAsTUFBWTtBQUFDLGNBQUcsRUFBRSxRQUFNO0FBQUU7QUFBVyxjQUFHLEFBQy9lLEVBQUUsVUFENmUsUUFDdGUsQUFBSSxFQUFFLFFBQU47QUFBVTtBQUFBO0FBQWdCLGNBQUUsTUFBTSxTQUFPLEdBQUUsSUFBRSxFQUFFO0FBQUE7QUFBTSxZQUFHLENBQUUsR0FBRSxRQUFNLElBQUc7QUFBQyxjQUFFLEVBQUU7QUFBVTtBQUFBO0FBQUE7QUFBUyxNQUFFLEdBQUcsR0FBRSxHQUFFLEtBQUcsR0FBRyxHQUFFLEdBQUU7QUFBQTtBQUN6SCxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEFBQUksTUFBSixLQUFPLEFBQUksTUFBSjtBQUFNLE1BQUc7QUFBRSxRQUFFLElBQUUsRUFBRSxZQUFVLEVBQUUsVUFBVSxVQUFTLElBQUUsQUFBSSxFQUFFLGFBQU4sSUFBZSxFQUFFLFdBQVcsYUFBYSxHQUFFLEtBQUcsRUFBRSxhQUFhLEdBQUUsS0FBSSxDQUFJLEVBQUUsYUFBTixJQUFnQixLQUFFLEVBQUUsWUFBVyxFQUFFLGFBQWEsR0FBRSxNQUFLLEtBQUUsR0FBRSxFQUFFLFlBQVksS0FBSSxJQUFFLEVBQUUscUJBQW9CLEFBQU8sTUFBUCxRQUFVLEFBQVMsTUFBVCxVQUFZLEFBQU8sRUFBRSxZQUFULFFBQW1CLEdBQUUsVUFBUTtBQUFBLFdBQWEsQUFBSSxNQUFKLEtBQVEsS0FBRSxFQUFFLE9BQU0sQUFBTyxNQUFQO0FBQVUsU0FBSSxHQUFHLEdBQUUsR0FBRSxJQUFHLElBQUUsRUFBRSxTQUFRLEFBQU8sTUFBUDtBQUFVLFNBQUcsR0FBRSxHQUFFLElBQUcsSUFBRSxFQUFFO0FBQUE7QUFDOVksWUFBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFLEtBQUksSUFBRSxBQUFJLE1BQUosS0FBTyxBQUFJLE1BQUo7QUFBTSxNQUFHO0FBQUUsUUFBRSxJQUFFLEVBQUUsWUFBVSxFQUFFLFVBQVUsVUFBUyxJQUFFLEVBQUUsYUFBYSxHQUFFLEtBQUcsRUFBRSxZQUFZO0FBQUEsV0FBVyxBQUFJLE1BQUosS0FBUSxLQUFFLEVBQUUsT0FBTSxBQUFPLE1BQVA7QUFBVSxTQUFJLEdBQUcsR0FBRSxHQUFFLElBQUcsSUFBRSxFQUFFLFNBQVEsQUFBTyxNQUFQO0FBQVUsU0FBRyxHQUFFLEdBQUUsSUFBRyxJQUFFLEVBQUU7QUFBQTtBQUNyTixZQUFZLEdBQUUsR0FBRTtBQUFDLFdBQVEsSUFBRSxHQUFFLElBQUUsT0FBRyxHQUFFLFFBQUk7QUFBQyxRQUFHLENBQUMsR0FBRTtBQUFDLFVBQUUsRUFBRTtBQUFPO0FBQUUsbUJBQU87QUFBQyxjQUFHLEFBQU8sTUFBUDtBQUFTLGtCQUFNLE1BQU0sRUFBRTtBQUFNLGNBQUUsRUFBRTtBQUFVLGtCQUFPLEVBQUU7QUFBQSxpQkFBVTtBQUFFLG1CQUFFO0FBQUc7QUFBQSxpQkFBYTtBQUFFLGtCQUFFLEVBQUU7QUFBYyxtQkFBRTtBQUFHO0FBQUEsaUJBQWE7QUFBRSxrQkFBRSxFQUFFO0FBQWMsbUJBQUU7QUFBRztBQUFBO0FBQVEsY0FBRSxFQUFFO0FBQUE7QUFBTyxVQUFFO0FBQUE7QUFBRyxRQUFHLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSSxFQUFFLFFBQU4sR0FBVTtBQUFDO0FBQUUsaUJBQVEsS0FBRSxHQUFFLEtBQUUsR0FBRSxJQUFFO0FBQUksY0FBRyxHQUFHLElBQUUsSUFBRyxBQUFPLEVBQUUsVUFBVCxRQUFnQixBQUFJLEVBQUUsUUFBTjtBQUFVLGNBQUUsTUFBTSxTQUFPLEdBQUUsSUFBRSxFQUFFO0FBQUEsZUFBVTtBQUFDLGdCQUFHLE1BQUk7QUFBRTtBQUFRLG1CQUFLLEFBQU8sRUFBRSxZQUFULFFBQWtCO0FBQUMsa0JBQUcsQUFBTyxFQUFFLFdBQVQsUUFBaUIsRUFBRSxXQUFTO0FBQUU7QUFBUSxrQkFBRSxFQUFFO0FBQUE7QUFBTyxjQUFFLFFBQVEsU0FBTyxFQUFFO0FBQU8sZ0JBQUUsRUFBRTtBQUFBO0FBQVEsV0FBRyxNQUFFLEdBQUUsS0FBRSxFQUFFLFdBQ3JmLEFBQUksR0FBRSxhQUFOLElBQWUsR0FBRSxXQUFXLFlBQVksTUFBRyxHQUFFLFlBQVksT0FBSSxFQUFFLFlBQVksRUFBRTtBQUFBLGVBQW1CLEFBQUksRUFBRSxRQUFOLEdBQVU7QUFBQyxVQUFHLEFBQU8sRUFBRSxVQUFULE1BQWU7QUFBQyxZQUFFLEVBQUUsVUFBVTtBQUFjLGFBQUU7QUFBRyxVQUFFLE1BQU0sU0FBTztBQUFFLFlBQUUsRUFBRTtBQUFNO0FBQUE7QUFBQSxlQUFrQixHQUFHLEdBQUUsSUFBRyxBQUFPLEVBQUUsVUFBVCxNQUFlO0FBQUMsUUFBRSxNQUFNLFNBQU87QUFBRSxVQUFFLEVBQUU7QUFBTTtBQUFBO0FBQVMsUUFBRyxNQUFJO0FBQUU7QUFBTSxXQUFLLEFBQU8sRUFBRSxZQUFULFFBQWtCO0FBQUMsVUFBRyxBQUFPLEVBQUUsV0FBVCxRQUFpQixFQUFFLFdBQVM7QUFBRTtBQUFPLFVBQUUsRUFBRTtBQUFPLE1BQUksRUFBRSxRQUFOLEtBQVksS0FBRTtBQUFBO0FBQUksTUFBRSxRQUFRLFNBQU8sRUFBRTtBQUFPLFFBQUUsRUFBRTtBQUFBO0FBQUE7QUFDbFosWUFBWSxHQUFFLEdBQUU7QUFBQyxVQUFPLEVBQUU7QUFBQSxTQUFVO0FBQUEsU0FBTztBQUFBLFNBQVE7QUFBQSxTQUFRO0FBQUEsU0FBUTtBQUFHLFVBQUksSUFBRSxFQUFFO0FBQVksVUFBRSxBQUFPLE1BQVAsT0FBUyxFQUFFLGFBQVc7QUFBSyxVQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsWUFBSSxJQUFFLElBQUUsRUFBRTtBQUFLO0FBQUcsVUFBSyxHQUFFLE1BQUksT0FBWCxLQUFnQixLQUFFLEVBQUUsU0FBUSxFQUFFLFVBQVEsUUFBTyxBQUFTLE1BQVQsVUFBWSxNQUFLLElBQUUsRUFBRTtBQUFBLGVBQVcsTUFBSTtBQUFBO0FBQUc7QUFBQSxTQUFZO0FBQUU7QUFBQSxTQUFZO0FBQUUsVUFBRSxFQUFFO0FBQVUsVUFBRyxBQUFNLEtBQU4sTUFBUTtBQUFDLFlBQUUsRUFBRTtBQUFjLFlBQUksSUFBRSxBQUFPLE1BQVAsT0FBUyxFQUFFLGdCQUFjO0FBQUUsWUFBRSxFQUFFO0FBQUssWUFBSSxLQUFFLEVBQUU7QUFBWSxVQUFFLGNBQVk7QUFBSyxZQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMsWUFBRSxNQUFJO0FBQUUsVUFBVSxNQUFWLFdBQWEsQUFBVSxFQUFFLFNBQVosV0FBa0IsQUFBTSxFQUFFLFFBQVIsUUFBYyxHQUFHLEdBQUU7QUFBRyxhQUFHLEdBQUU7QUFBRyxjQUFFLEdBQUcsR0FBRTtBQUFHLGVBQUksSUFBRSxHQUFFLElBQUUsR0FBRSxRQUFPLEtBQ2xmLEdBQUU7QUFBQyxnQkFBSSxLQUFFLEdBQUUsSUFBRyxLQUFFLEdBQUUsSUFBRTtBQUFHLFlBQVUsT0FBVixVQUFZLEdBQUcsR0FBRSxNQUFHLEFBQTRCLE9BQTVCLDRCQUE4QixHQUFHLEdBQUUsTUFBRyxBQUFhLE9BQWIsYUFBZSxHQUFHLEdBQUUsTUFBRyxHQUFHLEdBQUUsSUFBRSxJQUFFO0FBQUE7QUFBRyxrQkFBTztBQUFBLGlCQUFRO0FBQVEsaUJBQUcsR0FBRTtBQUFHO0FBQUEsaUJBQVc7QUFBVyxpQkFBRyxHQUFFO0FBQUc7QUFBQSxpQkFBVztBQUFTLGtCQUFFLEVBQUUsY0FBYyxhQUFZLEVBQUUsY0FBYyxjQUFZLENBQUMsQ0FBQyxFQUFFLFVBQVMsS0FBRSxFQUFFLE9BQU0sQUFBTSxNQUFOLE9BQVEsR0FBRyxHQUFFLENBQUMsQ0FBQyxFQUFFLFVBQVMsSUFBRSxTQUFJLE1BQUksQ0FBQyxDQUFDLEVBQUUsWUFBVyxDQUFNLEVBQUUsZ0JBQVIsT0FBcUIsR0FBRyxHQUFFLENBQUMsQ0FBQyxFQUFFLFVBQVMsRUFBRSxjQUFhLFFBQUksR0FBRyxHQUFFLENBQUMsQ0FBQyxFQUFFLFVBQVMsRUFBRSxXQUFTLEtBQUcsSUFBRztBQUFBO0FBQUE7QUFBQTtBQUFPO0FBQUEsU0FBWTtBQUFFLFVBQUcsQUFBTyxFQUFFLGNBQVQ7QUFBbUIsY0FBTSxNQUFNLEVBQUU7QUFBTSxRQUFFLFVBQVUsWUFDamYsRUFBRTtBQUFjO0FBQUEsU0FBWTtBQUFFLFVBQUUsRUFBRTtBQUFVLFFBQUUsV0FBVSxHQUFFLFVBQVEsT0FBRyxHQUFHLEVBQUU7QUFBZ0I7QUFBQSxTQUFZO0FBQUc7QUFBQSxTQUFZO0FBQUcsTUFBTyxFQUFFLGtCQUFULFFBQXlCLE1BQUcsS0FBSSxHQUFHLEVBQUUsT0FBTTtBQUFLLFNBQUc7QUFBRztBQUFBLFNBQVk7QUFBRyxTQUFHO0FBQUc7QUFBQSxTQUFZO0FBQUc7QUFBQSxTQUFZO0FBQUEsU0FBUTtBQUFHLFNBQUcsR0FBRSxBQUFPLEVBQUUsa0JBQVQ7QUFBd0I7QUFBQTtBQUFPLFFBQU0sTUFBTSxFQUFFO0FBQUE7QUFBTyxZQUFZLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRTtBQUFZLE1BQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxNQUFFLGNBQVk7QUFBSyxRQUFJLElBQUUsRUFBRTtBQUFVLElBQU8sTUFBUCxRQUFXLEtBQUUsRUFBRSxZQUFVLElBQUk7QUFBSSxNQUFFLFFBQVEsU0FBUyxJQUFFO0FBQUMsVUFBSSxJQUFFLEdBQUcsS0FBSyxNQUFLLEdBQUU7QUFBRyxRQUFFLElBQUksT0FBSyxHQUFFLElBQUksS0FBRyxHQUFFLEtBQUssR0FBRTtBQUFBO0FBQUE7QUFBQTtBQUNuZSxZQUFZLEdBQUUsR0FBRTtBQUFDLFNBQU8sQUFBTyxNQUFQLFFBQVcsS0FBRSxFQUFFLGVBQWMsQUFBTyxNQUFQLFFBQVUsQUFBTyxFQUFFLGVBQVQsUUFBc0IsS0FBRSxFQUFFLGVBQWMsQUFBTyxNQUFQLFFBQVUsQUFBTyxFQUFFLGVBQVQsUUFBcUI7QUFBQTtBQUFHLElBQUksS0FBRyxLQUFLLE1BQUssS0FBRyxHQUFHLHdCQUF1QixLQUFHLEdBQUcsbUJBQWtCLElBQUUsR0FBRSxJQUFFLE1BQUssSUFBRSxNQUFLLElBQUUsR0FBRSxLQUFHLEdBQUUsS0FBRyxHQUFHLElBQUcsSUFBRSxHQUFFLEtBQUcsTUFBSyxLQUFHLEdBQUUsS0FBRyxHQUFFLEtBQUcsR0FBRSxLQUFHLEdBQUUsS0FBRyxNQUFLLEtBQUcsR0FBRSxLQUFHO0FBQVMsY0FBYTtBQUFDLE9BQUcsTUFBSTtBQUFBO0FBQUksSUFBSSxJQUFFLE1BQUssS0FBRyxPQUFHLEtBQUcsTUFBSyxLQUFHLE1BQUssS0FBRyxPQUFHLEtBQUcsTUFBSyxLQUFHLElBQUcsS0FBRyxJQUFHLEtBQUcsSUFBRyxLQUFHLE1BQUssS0FBRyxHQUFFLEtBQUcsTUFBSyxLQUFHLElBQUcsS0FBRyxHQUFFLEtBQUcsR0FBRSxLQUFHLE1BQUssS0FBRztBQUFHLGNBQWE7QUFBQyxTQUFPLEFBQUssS0FBRSxRQUFQLElBQVcsTUFBSSxBQUFLLE9BQUwsS0FBUSxLQUFHLEtBQUc7QUFBQTtBQUMzZSxZQUFZLEdBQUU7QUFBQyxNQUFFLEVBQUU7QUFBSyxNQUFHLEFBQUssS0FBRSxPQUFQO0FBQVUsV0FBTztBQUFFLE1BQUcsQUFBSyxLQUFFLE9BQVA7QUFBVSxXQUFPLEFBQUssU0FBTCxLQUFVLElBQUU7QUFBRSxFQUFJLE9BQUosS0FBUyxNQUFHO0FBQUksTUFBRyxBQUFJLEdBQUcsZUFBUCxHQUFrQjtBQUFDLElBQUksT0FBSixLQUFTLE1BQUcsQUFBTyxPQUFQLE9BQVUsR0FBRyxlQUFhO0FBQUcsUUFBRTtBQUFHLFFBQUksSUFBRSxVQUFRLENBQUM7QUFBRyxTQUFHLENBQUM7QUFBRSxJQUFJLE1BQUosS0FBUSxLQUFFLFVBQVEsQ0FBQyxHQUFFLElBQUUsSUFBRSxDQUFDLEdBQUUsQUFBSSxNQUFKLEtBQVEsS0FBRTtBQUFPLFdBQU87QUFBQTtBQUFFLE1BQUU7QUFBSyxFQUFLLEtBQUUsT0FBUCxLQUFXLEFBQUssTUFBTCxLQUFPLElBQUUsR0FBRyxJQUFHLE1BQUssS0FBRSxHQUFHLElBQUcsSUFBRSxHQUFHLEdBQUU7QUFBSyxTQUFPO0FBQUE7QUFDblQsWUFBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUcsS0FBRztBQUFHLFVBQU0sS0FBRyxHQUFFLEtBQUcsTUFBSyxNQUFNLEVBQUU7QUFBTSxNQUFFLEdBQUcsR0FBRTtBQUFHLE1BQUcsQUFBTyxNQUFQO0FBQVMsV0FBTztBQUFLLEtBQUcsR0FBRSxHQUFFO0FBQUcsUUFBSSxLQUFJLE9BQUksR0FBRSxBQUFJLE1BQUosS0FBTyxHQUFHLEdBQUU7QUFBSSxNQUFJLElBQUU7QUFBSyxFQUFJLE1BQUosSUFBTSxBQUFLLEtBQUUsT0FBUCxLQUFXLEFBQUssS0FBRSxRQUFQLElBQVcsR0FBRyxLQUFJLElBQUcsR0FBRSxJQUFHLEFBQUksTUFBSixLQUFRLE9BQUssU0FBUSxDQUFLLEtBQUUsT0FBUCxLQUFXLEFBQUssTUFBTCxNQUFRLEFBQUssTUFBTCxNQUFTLENBQU8sT0FBUCxPQUFVLEtBQUcsSUFBSSxJQUFJLENBQUMsTUFBSSxHQUFHLElBQUksS0FBSSxHQUFHLEdBQUU7QUFBSSxPQUFHO0FBQUE7QUFBRSxZQUFZLEdBQUUsR0FBRTtBQUFDLElBQUUsU0FBTztBQUFFLE1BQUksSUFBRSxFQUFFO0FBQVUsRUFBTyxNQUFQLFFBQVcsR0FBRSxTQUFPO0FBQUcsTUFBRTtBQUFFLE9BQUksSUFBRSxFQUFFLFFBQU8sQUFBTyxNQUFQO0FBQVUsTUFBRSxjQUFZLEdBQUUsSUFBRSxFQUFFLFdBQVUsQUFBTyxNQUFQLFFBQVcsR0FBRSxjQUFZLElBQUcsSUFBRSxHQUFFLElBQUUsRUFBRTtBQUFPLFNBQU8sQUFBSSxFQUFFLFFBQU4sSUFBVSxFQUFFLFlBQVU7QUFBQTtBQUN6ZSxZQUFZLEdBQUUsR0FBRTtBQUFDLFdBQVEsSUFBRSxFQUFFLGNBQWEsSUFBRSxFQUFFLGdCQUFlLElBQUUsRUFBRSxhQUFZLEtBQUUsRUFBRSxpQkFBZ0IsS0FBRSxFQUFFLGNBQWEsSUFBRSxNQUFHO0FBQUMsUUFBSSxLQUFFLEtBQUcsR0FBRyxLQUFHLElBQUUsS0FBRyxJQUFFLEtBQUUsR0FBRTtBQUFHLFFBQUcsQUFBSyxPQUFMLElBQU87QUFBQyxVQUFHLEFBQUssS0FBRSxPQUFQLEtBQVcsQUFBSyxLQUFFLE9BQVAsR0FBVTtBQUFDLGFBQUU7QUFBRSxXQUFHO0FBQUcsWUFBSSxLQUFFO0FBQUUsV0FBRSxNQUFHLE1BQUksS0FBRSxLQUFFLE1BQUksS0FBRyxLQUFFLEtBQUUsTUFBSTtBQUFBO0FBQUE7QUFBUyxZQUFHLEtBQUksR0FBRSxnQkFBYztBQUFHLFVBQUcsQ0FBQztBQUFBO0FBQUUsTUFBRSxHQUFHLEdBQUUsTUFBSSxJQUFFLElBQUU7QUFBRyxNQUFFO0FBQUUsTUFBRyxBQUFJLE1BQUo7QUFBTSxJQUFPLE1BQVAsUUFBVyxPQUFJLE1BQUksR0FBRyxJQUFHLEVBQUUsZUFBYSxNQUFLLEVBQUUsbUJBQWlCO0FBQUEsT0FBTztBQUFDLFFBQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxVQUFHLEVBQUUscUJBQW1CO0FBQUU7QUFBTyxZQUFJLE1BQUksR0FBRztBQUFBO0FBQUcsSUFBSyxNQUFMLEtBQVEsS0FBRSxHQUFHLEtBQUssTUFBSyxJQUFHLEFBQU8sT0FBUCxPQUFXLE1BQUcsQ0FBQyxJQUFHLEtBQUcsR0FBRyxJQUFHLE9BQUssR0FBRyxLQUFLLElBQ3JmLElBQUUsTUFBSSxBQUFLLE1BQUwsS0FBTyxJQUFFLEdBQUcsSUFBRyxHQUFHLEtBQUssTUFBSyxNQUFLLEtBQUUsR0FBRyxJQUFHLElBQUUsR0FBRyxHQUFFLEdBQUcsS0FBSyxNQUFLO0FBQUssTUFBRSxtQkFBaUI7QUFBRSxNQUFFLGVBQWE7QUFBQTtBQUFBO0FBQzVHLFlBQVksR0FBRTtBQUFDLE9BQUc7QUFBRyxPQUFHLEtBQUc7QUFBRSxNQUFHLEFBQUssS0FBRSxRQUFQO0FBQVcsVUFBTSxNQUFNLEVBQUU7QUFBTSxNQUFJLElBQUUsRUFBRTtBQUFhLE1BQUcsUUFBTSxFQUFFLGlCQUFlO0FBQUUsV0FBTztBQUFLLE1BQUksSUFBRSxHQUFHLEdBQUUsTUFBSSxJQUFFLElBQUU7QUFBRyxNQUFHLEFBQUksTUFBSjtBQUFNLFdBQU87QUFBSyxNQUFJLElBQUU7QUFBRSxNQUFJLElBQUU7QUFBRSxPQUFHO0FBQUcsTUFBSSxLQUFFO0FBQUssTUFBRyxNQUFJLEtBQUcsTUFBSTtBQUFFLFVBQUssR0FBRyxHQUFFO0FBQUc7QUFBRyxRQUFHO0FBQUM7QUFBSztBQUFBLGFBQVksSUFBTjtBQUFTLFNBQUcsR0FBRTtBQUFBO0FBQUEsU0FBUztBQUFHO0FBQUssS0FBRyxVQUFRO0FBQUUsTUFBRTtBQUFFLEVBQU8sTUFBUCxPQUFTLElBQUUsSUFBRyxLQUFFLE1BQUssSUFBRSxHQUFFLElBQUU7QUFBRyxNQUFHLEFBQUssTUFBRyxRQUFSO0FBQVksT0FBRyxHQUFFO0FBQUEsV0FBVyxBQUFJLE1BQUosR0FBTTtBQUFDLElBQUksTUFBSixLQUFRLE1BQUcsSUFBRyxFQUFFLFdBQVUsR0FBRSxVQUFRLE9BQUcsR0FBRyxFQUFFLGlCQUFnQixJQUFFLEdBQUcsSUFBRyxBQUFJLE1BQUosS0FBUSxLQUFFLEdBQUcsR0FBRTtBQUFLLFFBQUcsQUFBSSxNQUFKO0FBQU0sWUFBTSxJQUFFLElBQUcsR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLE1BQUs7QUFBRSxNQUFFLGVBQ3JmLEVBQUUsUUFBUTtBQUFVLE1BQUUsZ0JBQWM7QUFBRSxZQUFPO0FBQUEsV0FBUTtBQUFBLFdBQU87QUFBRSxjQUFNLE1BQU0sRUFBRTtBQUFBLFdBQVc7QUFBRSxXQUFHO0FBQUc7QUFBQSxXQUFXO0FBQUUsV0FBRyxHQUFFO0FBQUcsWUFBSSxLQUFFLGNBQVksS0FBSSxLQUFFLEtBQUcsTUFBSSxLQUFJLEtBQUcsSUFBRztBQUFDLGNBQUcsQUFBSSxHQUFHLEdBQUUsT0FBVDtBQUFZO0FBQU0sY0FBRSxFQUFFO0FBQWUsY0FBSSxLQUFFLE9BQUssR0FBRTtBQUFDO0FBQUssY0FBRSxlQUFhLEVBQUUsaUJBQWU7QUFBRTtBQUFBO0FBQU0sWUFBRSxnQkFBYyxHQUFHLEdBQUcsS0FBSyxNQUFLLElBQUc7QUFBRztBQUFBO0FBQU0sV0FBRztBQUFHO0FBQUEsV0FBVztBQUFFLFdBQUcsR0FBRTtBQUFHLFlBQUksS0FBRSxhQUFXO0FBQUU7QUFBTSxZQUFFLEVBQUU7QUFBVyxhQUFJLElBQUUsSUFBRyxJQUFFLEtBQUc7QUFBQyxjQUFJLEtBQUUsS0FBRyxHQUFHO0FBQUcsZUFBRSxLQUFHO0FBQUUsZUFBRSxFQUFFO0FBQUcsZUFBRSxLQUFJLEtBQUU7QUFBRyxlQUFHLENBQUM7QUFBQTtBQUFFLFlBQUU7QUFBRSxZQUFFLE1BQUk7QUFBRSxZQUFHLE9BQUksSUFBRSxNQUFJLE1BQUksSUFBRSxNQUFJLE9BQUssSUFBRSxPQUFLLE9BQUssSUFBRSxPQUFLLE1BQUksSUFBRSxNQUFJLE9BQ2xmLElBQUUsT0FBSyxPQUFLLEdBQUcsSUFBRSxTQUFPO0FBQUUsWUFBRyxLQUFHLEdBQUU7QUFBQyxZQUFFLGdCQUFjLEdBQUcsR0FBRyxLQUFLLE1BQUssSUFBRztBQUFHO0FBQUE7QUFBTSxXQUFHO0FBQUc7QUFBQSxXQUFXO0FBQUUsV0FBRztBQUFHO0FBQUE7QUFBYyxjQUFNLE1BQU0sRUFBRTtBQUFBO0FBQUE7QUFBUSxLQUFHLEdBQUU7QUFBSyxTQUFPLEVBQUUsaUJBQWUsSUFBRSxHQUFHLEtBQUssTUFBSyxLQUFHO0FBQUE7QUFBSyxZQUFZLEdBQUUsR0FBRTtBQUFDLE9BQUcsQ0FBQztBQUFHLE9BQUcsQ0FBQztBQUFHLElBQUUsa0JBQWdCO0FBQUUsSUFBRSxlQUFhLENBQUM7QUFBRSxPQUFJLElBQUUsRUFBRSxpQkFBZ0IsSUFBRSxLQUFHO0FBQUMsUUFBSSxJQUFFLEtBQUcsR0FBRyxJQUFHLElBQUUsS0FBRztBQUFFLE1BQUUsS0FBRztBQUFHLFNBQUcsQ0FBQztBQUFBO0FBQUE7QUFDMVUsWUFBWSxHQUFFO0FBQUMsTUFBRyxBQUFLLEtBQUUsUUFBUDtBQUFXLFVBQU0sTUFBTSxFQUFFO0FBQU07QUFBSyxNQUFHLE1BQUksS0FBRyxBQUFLLEdBQUUsZUFBYSxPQUFwQixHQUF1QjtBQUFDLFFBQUksSUFBRTtBQUFFLFFBQUksSUFBRSxHQUFHLEdBQUU7QUFBRyxJQUFLLE1BQUcsUUFBUixLQUFjLEtBQUUsR0FBRyxHQUFFLElBQUcsSUFBRSxHQUFHLEdBQUU7QUFBQTtBQUFTLFFBQUUsR0FBRyxHQUFFLElBQUcsSUFBRSxHQUFHLEdBQUU7QUFBRyxFQUFJLEVBQUUsUUFBTixLQUFXLEFBQUksTUFBSixLQUFRLE1BQUcsSUFBRyxFQUFFLFdBQVUsR0FBRSxVQUFRLE9BQUcsR0FBRyxFQUFFLGlCQUFnQixJQUFFLEdBQUcsSUFBRyxBQUFJLE1BQUosS0FBUSxLQUFFLEdBQUcsR0FBRTtBQUFLLE1BQUcsQUFBSSxNQUFKO0FBQU0sVUFBTSxJQUFFLElBQUcsR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLE1BQUs7QUFBRSxJQUFFLGVBQWEsRUFBRSxRQUFRO0FBQVUsSUFBRSxnQkFBYztBQUFFLEtBQUc7QUFBRyxLQUFHLEdBQUU7QUFBSyxTQUFPO0FBQUE7QUFDelksY0FBYTtBQUFDLE1BQUcsQUFBTyxPQUFQLE1BQVU7QUFBQyxRQUFJLElBQUU7QUFBRyxTQUFHO0FBQUssTUFBRSxRQUFRLFNBQVMsSUFBRTtBQUFDLFNBQUUsZ0JBQWMsS0FBRyxHQUFFO0FBQWEsU0FBRyxJQUFFO0FBQUE7QUFBQTtBQUFPO0FBQUE7QUFBSyxZQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRTtBQUFFLE9BQUc7QUFBRSxNQUFHO0FBQUMsV0FBTyxFQUFFO0FBQUEsWUFBRztBQUFRLFFBQUUsR0FBRSxBQUFJLE1BQUosS0FBUSxPQUFLO0FBQUE7QUFBQTtBQUFPLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFO0FBQUUsT0FBRztBQUFHLE9BQUc7QUFBRSxNQUFHO0FBQUMsV0FBTyxFQUFFO0FBQUEsWUFBRztBQUFRLFFBQUUsR0FBRSxBQUFJLE1BQUosS0FBUSxPQUFLO0FBQUE7QUFBQTtBQUFPLFlBQVksR0FBRSxHQUFFO0FBQUMsSUFBRSxJQUFHO0FBQUksUUFBSTtBQUFFLFFBQUk7QUFBQTtBQUFFLGNBQWE7QUFBQyxPQUFHLEdBQUc7QUFBUSxJQUFFO0FBQUE7QUFDNVYsWUFBWSxHQUFFLEdBQUU7QUFBQyxJQUFFLGVBQWE7QUFBSyxJQUFFLGdCQUFjO0FBQUUsTUFBSSxJQUFFLEVBQUU7QUFBYyxFQUFLLE1BQUwsTUFBUyxHQUFFLGdCQUFjLElBQUcsR0FBRztBQUFJLE1BQUcsQUFBTyxNQUFQO0FBQVMsU0FBSSxJQUFFLEVBQUUsUUFBTyxBQUFPLE1BQVAsUUFBVTtBQUFDLFVBQUksSUFBRTtBQUFFLGNBQU8sRUFBRTtBQUFBLGFBQVU7QUFBRSxjQUFFLEVBQUUsS0FBSztBQUFrQixVQUFPLE1BQVAsUUFBVSxBQUFTLE1BQVQsVUFBWTtBQUFLO0FBQUEsYUFBVztBQUFFO0FBQUssWUFBRTtBQUFHLFlBQUU7QUFBRztBQUFLO0FBQUEsYUFBVztBQUFFLGFBQUc7QUFBRztBQUFBLGFBQVc7QUFBRTtBQUFLO0FBQUEsYUFBVztBQUFHLFlBQUU7QUFBRztBQUFBLGFBQVc7QUFBRyxZQUFFO0FBQUc7QUFBQSxhQUFXO0FBQUcsYUFBRztBQUFHO0FBQUEsYUFBVztBQUFBLGFBQVE7QUFBRztBQUFBO0FBQUssVUFBRSxFQUFFO0FBQUE7QUFBTyxNQUFFO0FBQUUsTUFBRSxHQUFHLEVBQUUsU0FBUTtBQUFNLE1BQUUsS0FBRyxLQUFHO0FBQUUsTUFBRTtBQUFFLE9BQUc7QUFBSyxPQUFHLEtBQUcsS0FBRztBQUFBO0FBQ3ZjLFlBQVksR0FBRSxHQUFFO0FBQUMsS0FBRTtBQUFDLFFBQUksSUFBRTtBQUFFLFFBQUc7QUFBQztBQUFLLFNBQUcsVUFBUTtBQUFHLFVBQUcsSUFBRztBQUFDLGlCQUFRLElBQUUsRUFBRSxlQUFjLEFBQU8sTUFBUCxRQUFVO0FBQUMsY0FBSSxJQUFFLEVBQUU7QUFBTSxVQUFPLE1BQVAsUUFBVyxHQUFFLFVBQVE7QUFBTSxjQUFFLEVBQUU7QUFBQTtBQUFLLGFBQUc7QUFBQTtBQUFHLFdBQUc7QUFBRSxVQUFFLElBQUUsSUFBRTtBQUFLLFdBQUc7QUFBRyxTQUFHLFVBQVE7QUFBSyxVQUFHLEFBQU8sTUFBUCxRQUFVLEFBQU8sRUFBRSxXQUFULE1BQWdCO0FBQUMsWUFBRTtBQUFFLGFBQUc7QUFBRSxZQUFFO0FBQUs7QUFBQTtBQUFNLFNBQUU7QUFBQyxZQUFJLEtBQUUsR0FBRSxLQUFFLEVBQUUsUUFBTyxLQUFFLEdBQUUsSUFBRTtBQUFFLFlBQUU7QUFBRSxXQUFFLFNBQU87QUFBSyxXQUFFLGNBQVksR0FBRSxhQUFXO0FBQUssWUFBRyxBQUFPLE1BQVAsUUFBVSxBQUFXLE9BQU8sTUFBbEIsWUFBcUIsQUFBYSxPQUFPLEVBQUUsU0FBdEIsWUFBMkI7QUFBQyxjQUFJLEtBQUU7QUFBRSxjQUFHLEFBQUssSUFBRSxPQUFLLE9BQVosR0FBZTtBQUFDLGdCQUFJLEtBQUUsR0FBRTtBQUFVLGlCQUFHLElBQUUsY0FBWSxHQUFFLGFBQVksR0FBRSxnQkFBYyxHQUFFLGVBQWMsR0FBRSxRQUFNLEdBQUUsU0FDcGYsSUFBRSxjQUFZLE1BQUssR0FBRSxnQkFBYztBQUFBO0FBQU0sY0FBSSxLQUFFLEFBQUssR0FBRSxVQUFRLE9BQWYsR0FBa0IsS0FBRTtBQUFFLGFBQUU7QUFBQyxnQkFBSTtBQUFFLGdCQUFHLEtBQUUsQUFBSyxHQUFFLFFBQVAsSUFBVztBQUFDLGtCQUFJLEtBQUUsR0FBRTtBQUFjLGtCQUFHLEFBQU8sT0FBUDtBQUFTLHFCQUFFLEFBQU8sR0FBRSxlQUFULE9BQW9CLE9BQUc7QUFBQSxtQkFBTztBQUFDLG9CQUFJLEtBQUUsR0FBRTtBQUFjLHFCQUFFLEFBQVMsR0FBRSxhQUFYLFNBQW9CLFFBQUcsQUFBSyxHQUFFLCtCQUFQLE9BQWtDLE9BQUcsS0FBRSxRQUFHO0FBQUE7QUFBQTtBQUFJLGdCQUFHLElBQUU7QUFBQyxrQkFBSSxLQUFFLEdBQUU7QUFBWSxrQkFBRyxBQUFPLE9BQVAsTUFBUztBQUFDLG9CQUFJLEtBQUUsSUFBSTtBQUFJLG1CQUFFLElBQUk7QUFBRyxtQkFBRSxjQUFZO0FBQUE7QUFBTyxtQkFBRSxJQUFJO0FBQUcsa0JBQUcsQUFBSyxJQUFFLE9BQUssT0FBWixHQUFlO0FBQUMsbUJBQUUsU0FBTztBQUFHLG1CQUFFLFNBQU87QUFBTSxtQkFBRSxTQUFPO0FBQU0sb0JBQUcsQUFBSSxHQUFFLFFBQU47QUFBVSxzQkFBRyxBQUFPLEdBQUUsY0FBVDtBQUFtQix1QkFBRSxNQUFJO0FBQUEsdUJBQU87QUFBQyx3QkFBSSxLQUFFLEdBQUcsSUFBRztBQUFHLHVCQUFFLE1BQUk7QUFBRSx1QkFBRyxJQUFFO0FBQUE7QUFBRyxtQkFBRSxTQUFPO0FBQUU7QUFBQTtBQUFRLGtCQUM1ZjtBQUFPLG1CQUFFO0FBQUUsa0JBQUksS0FBRSxHQUFFO0FBQVUsY0FBTyxPQUFQLE9BQVUsTUFBRSxHQUFFLFlBQVUsSUFBSSxNQUFHLElBQUUsSUFBSSxPQUFJLEdBQUUsSUFBSSxJQUFFLE1BQUssS0FBRSxHQUFFLElBQUksS0FBRyxBQUFTLE1BQVQsVUFBYSxLQUFFLElBQUksT0FBSSxHQUFFLElBQUksSUFBRTtBQUFLLGtCQUFHLENBQUMsRUFBRSxJQUFJLEtBQUc7QUFBQyxrQkFBRSxJQUFJO0FBQUcsb0JBQUksS0FBRSxHQUFHLEtBQUssTUFBSyxJQUFFLElBQUU7QUFBRyxtQkFBRSxLQUFLLElBQUU7QUFBQTtBQUFHLGlCQUFFLFNBQU87QUFBSyxpQkFBRSxRQUFNO0FBQUU7QUFBQTtBQUFRLGlCQUFFLEdBQUU7QUFBQSxtQkFBYSxBQUFPLE9BQVA7QUFBVSxjQUFFLE1BQU8sSUFBRyxHQUFFLFNBQU8sdUJBQXFCO0FBQUE7QUFBeUwsUUFBSSxNQUFKLEtBQVEsS0FBRTtBQUFHLFlBQUUsR0FBRyxHQUFFO0FBQUcsYUFDcGY7QUFBRSxXQUFFO0FBQUMsa0JBQU8sR0FBRTtBQUFBLGlCQUFVO0FBQUUsbUJBQUU7QUFBRSxpQkFBRSxTQUFPO0FBQUssbUJBQUcsQ0FBQztBQUFFLGlCQUFFLFNBQU87QUFBRSxrQkFBSSxLQUFFLEdBQUcsSUFBRSxJQUFFO0FBQUcsaUJBQUcsSUFBRTtBQUFHO0FBQUEsaUJBQWE7QUFBRSxtQkFBRTtBQUFFLGtCQUFJLEtBQUUsR0FBRSxNQUFLLEtBQUUsR0FBRTtBQUFVLGtCQUFHLEFBQUssSUFBRSxRQUFNLFFBQWIsS0FBbUIsQ0FBYSxPQUFPLEdBQUUsNkJBQXRCLGNBQWdELEFBQU8sT0FBUCxRQUFVLEFBQWEsT0FBTyxHQUFFLHNCQUF0QixjQUEwQyxDQUFPLE9BQVAsUUFBVyxDQUFDLEdBQUcsSUFBSSxPQUFLO0FBQUMsbUJBQUUsU0FBTztBQUFLLHFCQUFHLENBQUM7QUFBRSxtQkFBRSxTQUFPO0FBQUUsb0JBQUksS0FBRSxHQUFHLElBQUUsSUFBRTtBQUFHLG1CQUFHLElBQUU7QUFBRztBQUFBO0FBQUE7QUFBUyxlQUFFLEdBQUU7QUFBQSxpQkFBYSxBQUFPLE9BQVA7QUFBQTtBQUFVLFNBQUc7QUFBQSxhQUFTLElBQU47QUFBVSxVQUFFO0FBQUcsWUFBSSxLQUFHLEFBQU8sTUFBUCxRQUFXLEtBQUUsSUFBRSxFQUFFO0FBQVE7QUFBQTtBQUFTO0FBQUEsV0FBWTtBQUFBO0FBQzNiLGNBQWE7QUFBQyxNQUFJLElBQUUsR0FBRztBQUFRLEtBQUcsVUFBUTtBQUFHLFNBQU8sQUFBTyxNQUFQLE9BQVMsS0FBRztBQUFBO0FBQUUsWUFBWSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUU7QUFBRSxPQUFHO0FBQUcsTUFBSSxJQUFFO0FBQUssUUFBSSxLQUFHLE1BQUksS0FBRyxHQUFHLEdBQUU7QUFBRztBQUFHLFFBQUc7QUFBQztBQUFLO0FBQUEsYUFBWSxHQUFOO0FBQVMsU0FBRyxHQUFFO0FBQUE7QUFBQSxTQUFTO0FBQUc7QUFBSyxNQUFFO0FBQUUsS0FBRyxVQUFRO0FBQUUsTUFBRyxBQUFPLE1BQVA7QUFBUyxVQUFNLE1BQU0sRUFBRTtBQUFNLE1BQUU7QUFBSyxNQUFFO0FBQUUsU0FBTztBQUFBO0FBQUUsY0FBYTtBQUFDLFNBQUssQUFBTyxNQUFQO0FBQVUsT0FBRztBQUFBO0FBQUcsY0FBYTtBQUFDLFNBQUssQUFBTyxNQUFQLFFBQVUsQ0FBQztBQUFNLE9BQUc7QUFBQTtBQUFHLFlBQVksR0FBRTtBQUFDLE1BQUksSUFBRSxHQUFHLEVBQUUsV0FBVSxHQUFFO0FBQUksSUFBRSxnQkFBYyxFQUFFO0FBQWEsRUFBTyxNQUFQLE9BQVMsR0FBRyxLQUFHLElBQUU7QUFBRSxLQUFHLFVBQVE7QUFBQTtBQUM1YSxZQUFZLEdBQUU7QUFBQyxNQUFJLElBQUU7QUFBRSxLQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBVSxRQUFFLEVBQUU7QUFBTyxRQUFHLEFBQUssR0FBRSxRQUFNLFVBQWIsR0FBbUI7QUFBQyxVQUFFLEdBQUcsR0FBRSxHQUFFO0FBQUksVUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFlBQUU7QUFBRTtBQUFBO0FBQU8sVUFBRTtBQUFFLFVBQUcsQUFBSyxFQUFFLFFBQVAsTUFBWSxBQUFLLEVBQUUsUUFBUCxNQUFZLEFBQU8sRUFBRSxrQkFBVCxRQUF3QixBQUFLLE1BQUcsZ0JBQVIsS0FBcUIsQUFBSyxHQUFFLE9BQUssT0FBWixHQUFlO0FBQUMsaUJBQVEsSUFBRSxHQUFFLElBQUUsRUFBRSxPQUFNLEFBQU8sTUFBUDtBQUFVLGVBQUcsRUFBRSxRQUFNLEVBQUUsWUFBVyxJQUFFLEVBQUU7QUFBUSxVQUFFLGFBQVc7QUFBQTtBQUFFLE1BQU8sTUFBUCxRQUFVLEFBQUssR0FBRSxRQUFNLFVBQWIsS0FBcUIsQ0FBTyxFQUFFLGdCQUFULFFBQXVCLEdBQUUsY0FBWSxFQUFFLGNBQWEsQUFBTyxFQUFFLGVBQVQsUUFBc0IsQ0FBTyxFQUFFLGVBQVQsUUFBc0IsR0FBRSxXQUFXLGFBQVcsRUFBRSxjQUFhLEVBQUUsYUFBVyxFQUFFLGFBQVksSUFBRSxFQUFFLFNBQVEsQ0FDL2UsRUFBRSxlQUQ2ZSxPQUNsZSxFQUFFLFdBQVcsYUFBVyxJQUFFLEVBQUUsY0FBWSxHQUFFLEVBQUUsYUFBVztBQUFBLFdBQVE7QUFBQyxVQUFFLEdBQUc7QUFBRyxVQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsVUFBRSxTQUFPO0FBQUssWUFBRTtBQUFFO0FBQUE7QUFBTyxNQUFPLE1BQVAsUUFBVyxHQUFFLGNBQVksRUFBRSxhQUFXLE1BQUssRUFBRSxTQUFPO0FBQUE7QUFBTSxRQUFFLEVBQUU7QUFBUSxRQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsVUFBRTtBQUFFO0FBQUE7QUFBTyxRQUFFLElBQUU7QUFBQSxXQUFRLEFBQU8sTUFBUDtBQUFVLEVBQUksTUFBSixLQUFRLEtBQUU7QUFBQTtBQUFHLFlBQVksR0FBRTtBQUFDLE1BQUksSUFBRTtBQUFLLEtBQUcsSUFBRyxHQUFHLEtBQUssTUFBSyxHQUFFO0FBQUksU0FBTztBQUFBO0FBQ3RULFlBQVksR0FBRSxHQUFFO0FBQUM7QUFBRztBQUFBLFNBQVcsQUFBTyxPQUFQO0FBQVcsTUFBRyxBQUFLLEtBQUUsUUFBUDtBQUFXLFVBQU0sTUFBTSxFQUFFO0FBQU0sTUFBSSxJQUFFLEVBQUU7QUFBYSxNQUFHLEFBQU8sTUFBUDtBQUFTLFdBQU87QUFBSyxJQUFFLGVBQWE7QUFBSyxJQUFFLGdCQUFjO0FBQUUsTUFBRyxNQUFJLEVBQUU7QUFBUSxVQUFNLE1BQU0sRUFBRTtBQUFNLElBQUUsZUFBYTtBQUFLLE1BQUksSUFBRSxFQUFFLFFBQU0sRUFBRSxZQUFXLElBQUUsR0FBRSxLQUFFLEVBQUUsZUFBYSxDQUFDO0FBQUUsSUFBRSxlQUFhO0FBQUUsSUFBRSxpQkFBZTtBQUFFLElBQUUsY0FBWTtBQUFFLElBQUUsZ0JBQWM7QUFBRSxJQUFFLG9CQUFrQjtBQUFFLElBQUUsa0JBQWdCO0FBQUUsTUFBRSxFQUFFO0FBQWMsV0FBUSxLQUFFLEVBQUUsWUFBVyxLQUFFLEVBQUUsaUJBQWdCLElBQUUsTUFBRztBQUFDLFFBQUksSUFBRSxLQUFHLEdBQUcsS0FBRyxLQUFFLEtBQUc7QUFBRSxNQUFFLEtBQUc7QUFBRSxPQUFFLEtBQUc7QUFBRyxPQUFFLEtBQUc7QUFBRyxVQUFHLENBQUM7QUFBQTtBQUFFLEVBQ2pmLE9BRGlmLFFBQzdlLEFBQUssS0FBRSxRQUFQLEtBQVksR0FBRyxJQUFJLE1BQUksR0FBRyxPQUFPO0FBQUcsUUFBSSxLQUFJLEtBQUUsSUFBRSxNQUFLLElBQUU7QUFBRyxNQUFFLEVBQUUsUUFBTSxBQUFPLEVBQUUsZUFBVCxPQUFxQixHQUFFLFdBQVcsYUFBVyxHQUFFLElBQUUsRUFBRSxlQUFhLElBQUUsSUFBRSxJQUFFLEVBQUU7QUFBWSxNQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsUUFBRTtBQUFFLFNBQUc7QUFBRyxPQUFHLFVBQVE7QUFBSyxTQUFHO0FBQUcsU0FBRTtBQUFLLFFBQUcsR0FBRyxLQUFHO0FBQUMsVUFBRyxvQkFBbUI7QUFBRSxhQUFFLEVBQUMsT0FBTSxHQUFFLGdCQUFlLEtBQUksR0FBRTtBQUFBO0FBQW1CO0FBQUUsY0FBRyxLQUFHLE1BQUUsR0FBRSxrQkFBZ0IsR0FBRSxlQUFhLFFBQVEsTUFBRSxHQUFFLGdCQUFjLEdBQUUsbUJBQWlCLEFBQUksR0FBRSxlQUFOLEdBQWlCO0FBQUMsaUJBQUUsR0FBRTtBQUFXLGlCQUFFLEdBQUU7QUFBYSxnQkFBRSxHQUFFO0FBQVUsaUJBQUUsR0FBRTtBQUFZLGdCQUFHO0FBQUMsaUJBQUUsVUFBUyxFQUFFO0FBQUEscUJBQWUsSUFBTjtBQUFVLG1CQUFFO0FBQ25mO0FBQUE7QUFBUSxnQkFBSSxLQUFFLEdBQUUsS0FBRSxJQUFHLEtBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxHQUFFLEtBQUUsSUFBRSxLQUFFO0FBQUs7QUFBRSx5QkFBTztBQUFDLHlCQUFRLFFBQUk7QUFBQyx5QkFBSSxNQUFHLEFBQUksT0FBSixLQUFPLEFBQUksR0FBRSxhQUFOLEtBQWlCLE1BQUUsS0FBRTtBQUFHLHlCQUFJLEtBQUcsQUFBSSxPQUFKLEtBQU8sQUFBSSxHQUFFLGFBQU4sS0FBaUIsTUFBRSxLQUFFO0FBQUcsa0JBQUksR0FBRSxhQUFOLEtBQWlCLE9BQUcsR0FBRSxVQUFVO0FBQVEsc0JBQUcsQUFBUSxNQUFFLEdBQUUsZ0JBQVo7QUFBd0I7QUFBTSx1QkFBRTtBQUFFLHVCQUFFO0FBQUE7QUFBRSwyQkFBTztBQUFDLHNCQUFHLE9BQUk7QUFBRTtBQUFRLHlCQUFJLE1BQUcsRUFBRSxPQUFJLE1BQUksTUFBRTtBQUFHLHlCQUFJLEtBQUcsRUFBRSxPQUFJLE1BQUksTUFBRTtBQUFHLHNCQUFHLEFBQVEsTUFBRSxHQUFFLGlCQUFaO0FBQXlCO0FBQU0sdUJBQUU7QUFBRSx1QkFBRSxHQUFFO0FBQUE7QUFBVyxxQkFBRTtBQUFBO0FBQUUsaUJBQUUsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLEtBQU8sT0FBSyxFQUFDLE9BQU0sSUFBRSxLQUFJO0FBQUE7QUFBUSxpQkFBRTtBQUFLLFdBQUUsTUFBRyxFQUFDLE9BQU0sR0FBRSxLQUFJO0FBQUE7QUFBUSxXQUFFO0FBQUssU0FBRyxFQUFDLGFBQVksSUFBRSxnQkFBZTtBQUFHLFNBQUc7QUFBRyxTQUFHO0FBQUssU0FBRztBQUFHLFFBQUU7QUFBRTtBQUFHLFVBQUc7QUFBQztBQUFBLGVBQVcsSUFBTjtBQUFVLFlBQUcsQUFDdmdCLE1BRHVnQjtBQUNyZ0IsZ0JBQU0sTUFBTSxFQUFFO0FBQU0sV0FBRyxHQUFFO0FBQUksWUFBRSxFQUFFO0FBQUE7QUFBQSxXQUFpQixBQUFPLE1BQVA7QUFBVSxTQUFHO0FBQUssUUFBRTtBQUFFO0FBQUcsVUFBRztBQUFDLGFBQUksS0FBRSxHQUFFLEFBQU8sTUFBUCxRQUFVO0FBQUMsY0FBSSxLQUFFLEVBQUU7QUFBTSxlQUFFLE1BQUksR0FBRyxFQUFFLFdBQVU7QUFBSSxjQUFHLEtBQUUsS0FBSTtBQUFDLGdCQUFJLEtBQUUsRUFBRTtBQUFVLGdCQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMsa0JBQUksS0FBRSxHQUFFO0FBQUksY0FBTyxPQUFQLFFBQVcsQ0FBYSxPQUFPLE9BQXBCLGFBQXNCLEdBQUUsUUFBTSxHQUFFLFVBQVE7QUFBQTtBQUFBO0FBQU8sa0JBQU8sS0FBRTtBQUFBLGlCQUFXO0FBQUUsaUJBQUc7QUFBRyxnQkFBRSxTQUFPO0FBQUc7QUFBQSxpQkFBVztBQUFFLGlCQUFHO0FBQUcsZ0JBQUUsU0FBTztBQUFHLGlCQUFHLEVBQUUsV0FBVTtBQUFHO0FBQUEsaUJBQVc7QUFBSyxnQkFBRSxTQUFPO0FBQU07QUFBQSxpQkFBVztBQUFLLGdCQUFFLFNBQU87QUFBTSxpQkFBRyxFQUFFLFdBQVU7QUFBRztBQUFBLGlCQUFXO0FBQUUsaUJBQUcsRUFBRSxXQUFVO0FBQUc7QUFBQSxpQkFBVztBQUFFLG1CQUFFO0FBQUUsaUJBQUcsSUFBRTtBQUFHLGtCQUFJLEtBQUUsR0FBRTtBQUFVLGlCQUFHO0FBQUcsY0FDbmYsT0FEbWYsUUFDaGYsR0FBRztBQUFBO0FBQUcsY0FBRSxFQUFFO0FBQUE7QUFBQSxlQUFrQixJQUFOO0FBQVUsWUFBRyxBQUFPLE1BQVA7QUFBUyxnQkFBTSxNQUFNLEVBQUU7QUFBTSxXQUFHLEdBQUU7QUFBSSxZQUFFLEVBQUU7QUFBQTtBQUFBLFdBQWlCLEFBQU8sTUFBUDtBQUFVLFNBQUU7QUFBRyxTQUFFO0FBQUssU0FBRSxHQUFFO0FBQVksU0FBRSxHQUFFO0FBQWUsUUFBRyxPQUFJLE1BQUcsTUFBRyxHQUFFLGlCQUFlLEdBQUcsR0FBRSxjQUFjLGlCQUFnQixLQUFHO0FBQUMsTUFBTyxPQUFQLFFBQVUsR0FBRyxPQUFLLE1BQUUsR0FBRSxPQUFNLEtBQUUsR0FBRSxLQUFJLEFBQVMsT0FBVCxVQUFhLE1BQUUsS0FBRyxvQkFBbUIsS0FBRyxJQUFFLGlCQUFlLElBQUUsR0FBRSxlQUFhLEtBQUssSUFBSSxJQUFFLEdBQUUsTUFBTSxXQUFVLE1BQUcsTUFBRSxHQUFFLGlCQUFlLGFBQVcsR0FBRSxlQUFhLFFBQU8sR0FBRSxnQkFBZSxNQUFFLEdBQUUsZ0JBQWUsS0FBRSxHQUFFLFlBQVksUUFBTyxLQUFFLEtBQUssSUFBSSxHQUFFLE9BQU0sS0FBRyxLQUFFLEFBQ3BmLEdBQUUsUUFEa2YsU0FDOWUsS0FBRSxLQUFLLElBQUksR0FBRSxLQUFJLEtBQUcsQ0FBQyxHQUFFLFVBQVEsS0FBRSxNQUFJLE1BQUUsSUFBRSxLQUFFLElBQUUsS0FBRSxLQUFHLEtBQUUsR0FBRyxJQUFFLEtBQUcsS0FBRSxHQUFHLElBQUUsS0FBRyxNQUFHLE1BQUksQ0FBSSxHQUFFLGVBQU4sS0FBa0IsR0FBRSxlQUFhLEdBQUUsUUFBTSxHQUFFLGlCQUFlLEdBQUUsVUFBUSxHQUFFLGNBQVksR0FBRSxRQUFNLEdBQUUsZ0JBQWMsR0FBRSxXQUFVLE1BQUUsR0FBRSxlQUFjLEdBQUUsU0FBUyxHQUFFLE1BQUssR0FBRSxTQUFRLEdBQUUsbUJBQWtCLEtBQUUsS0FBRyxJQUFFLFNBQVMsS0FBRyxHQUFFLE9BQU8sR0FBRSxNQUFLLEdBQUUsV0FBVSxJQUFFLE9BQU8sR0FBRSxNQUFLLEdBQUUsU0FBUSxHQUFFLFNBQVM7QUFBUSxXQUFFO0FBQUcsV0FBSSxLQUFFLElBQUUsS0FBRSxHQUFFO0FBQVksUUFBSSxHQUFFLGFBQU4sS0FBZ0IsR0FBRSxLQUFLLEVBQUMsU0FBUSxJQUFFLE1BQUssR0FBRSxZQUFXLEtBQUksR0FBRTtBQUFZLE1BQWEsT0FBTyxHQUFFLFVBQXRCLGNBQTZCLEdBQUU7QUFBUSxXQUFJLEtBQ3JmLEdBQUUsS0FBRSxHQUFFLFFBQU87QUFBSSxhQUFFLEdBQUUsS0FBRyxHQUFFLFFBQVEsYUFBVyxHQUFFLE1BQUssR0FBRSxRQUFRLFlBQVUsR0FBRTtBQUFBO0FBQUksU0FBRyxDQUFDLENBQUM7QUFBRyxTQUFHLEtBQUc7QUFBSyxNQUFFLFVBQVE7QUFBRSxRQUFFO0FBQUU7QUFBRyxVQUFHO0FBQUMsYUFBSSxLQUFFLEdBQUUsQUFBTyxNQUFQLFFBQVU7QUFBQyxjQUFJLEtBQUUsRUFBRTtBQUFNLGVBQUUsTUFBSSxHQUFHLElBQUUsRUFBRSxXQUFVO0FBQUcsY0FBRyxLQUFFLEtBQUk7QUFBQyxpQkFBRTtBQUFPLGdCQUFJLEtBQUUsRUFBRTtBQUFJLGdCQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMsa0JBQUksS0FBRSxFQUFFO0FBQVUsc0JBQU8sRUFBRTtBQUFBLHFCQUFVO0FBQUUsdUJBQUU7QUFBRTtBQUFBO0FBQWMsdUJBQUU7QUFBQTtBQUFFLGNBQWEsT0FBTyxPQUFwQixhQUFzQixHQUFFLE1BQUcsR0FBRSxVQUFRO0FBQUE7QUFBQTtBQUFHLGNBQUUsRUFBRTtBQUFBO0FBQUEsZUFBa0IsSUFBTjtBQUFVLFlBQUcsQUFBTyxNQUFQO0FBQVMsZ0JBQU0sTUFBTSxFQUFFO0FBQU0sV0FBRyxHQUFFO0FBQUksWUFBRSxFQUFFO0FBQUE7QUFBQSxXQUFpQixBQUFPLE1BQVA7QUFBVSxRQUFFO0FBQUs7QUFBSyxRQUFFO0FBQUE7QUFBTyxNQUFFLFVBQVE7QUFBRSxNQUFHO0FBQUcsU0FBRyxPQUFHLEtBQUcsR0FBRSxLQUFHO0FBQUE7QUFBTyxTQUFJLElBQUUsR0FBRSxBQUFPLE1BQVA7QUFBVSxVQUNwZixFQUFFLFlBQVcsRUFBRSxhQUFXLE1BQUssRUFBRSxRQUFNLEtBQUksTUFBRSxHQUFFLEdBQUUsVUFBUSxNQUFLLEdBQUUsWUFBVSxPQUFNLElBQUU7QUFBRSxNQUFFLEVBQUU7QUFBYSxFQUFJLE1BQUosS0FBUSxNQUFHO0FBQU0sRUFBSSxNQUFKLElBQU0sTUFBSSxLQUFHLE9BQU0sTUFBRyxHQUFFLEtBQUcsS0FBRyxLQUFHO0FBQUUsTUFBRSxFQUFFO0FBQVUsTUFBRyxNQUFJLEFBQWEsT0FBTyxHQUFHLHNCQUF2QjtBQUF5QyxRQUFHO0FBQUMsU0FBRyxrQkFBa0IsSUFBRyxHQUFFLFFBQU8sQUFBTSxHQUFFLFFBQVEsUUFBTSxRQUF0QjtBQUFBLGFBQWlDLElBQU47QUFBQTtBQUFXLEtBQUcsR0FBRTtBQUFLLE1BQUc7QUFBRyxVQUFNLEtBQUcsT0FBRyxJQUFFLElBQUcsS0FBRyxNQUFLO0FBQUUsTUFBRyxBQUFLLEtBQUUsT0FBUDtBQUFVLFdBQU87QUFBSztBQUFLLFNBQU87QUFBQTtBQUNsWCxjQUFhO0FBQUMsU0FBSyxBQUFPLE1BQVAsUUFBVTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQVUsVUFBSSxBQUFPLE9BQVAsUUFBWSxDQUFLLEdBQUUsUUFBTSxPQUFiLElBQWdCLEdBQUcsR0FBRSxPQUFNLE1BQUcsUUFBSSxBQUFLLEVBQUUsUUFBUCxNQUFZLEdBQUcsR0FBRSxNQUFJLEdBQUcsR0FBRSxPQUFNLE1BQUc7QUFBSyxRQUFJLElBQUUsRUFBRTtBQUFNLElBQUssS0FBRSxTQUFQLEtBQWEsR0FBRyxHQUFFO0FBQUcsSUFBSyxLQUFFLFNBQVAsS0FBYSxNQUFLLE1BQUcsTUFBRyxHQUFHLElBQUcsV0FBVTtBQUFDO0FBQUssYUFBTztBQUFBO0FBQVEsUUFBRSxFQUFFO0FBQUE7QUFBQTtBQUFZLGNBQWE7QUFBQyxNQUFHLEFBQUssT0FBTCxJQUFRO0FBQUMsUUFBSSxJQUFFLEtBQUcsS0FBRyxLQUFHO0FBQUcsU0FBRztBQUFHLFdBQU8sR0FBRyxHQUFFO0FBQUE7QUFBSSxTQUFNO0FBQUE7QUFBRyxZQUFZLEdBQUUsR0FBRTtBQUFDLEtBQUcsS0FBSyxHQUFFO0FBQUcsUUFBSyxNQUFHLE1BQUcsR0FBRyxJQUFHLFdBQVU7QUFBQztBQUFLLFdBQU87QUFBQTtBQUFBO0FBQVEsWUFBWSxHQUFFLEdBQUU7QUFBQyxLQUFHLEtBQUssR0FBRTtBQUFHLFFBQUssTUFBRyxNQUFHLEdBQUcsSUFBRyxXQUFVO0FBQUM7QUFBSyxXQUFPO0FBQUE7QUFBQTtBQUN6ZCxjQUFhO0FBQUMsTUFBRyxBQUFPLE9BQVA7QUFBVSxXQUFNO0FBQUcsTUFBSSxJQUFFO0FBQUcsT0FBRztBQUFLLE1BQUcsQUFBSyxLQUFFLFFBQVA7QUFBVyxVQUFNLE1BQU0sRUFBRTtBQUFNLE1BQUksSUFBRTtBQUFFLE9BQUc7QUFBRyxNQUFJLElBQUU7QUFBRyxPQUFHO0FBQUcsV0FBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBRyxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsSUFBRyxLQUFFLEVBQUUsSUFBRSxJQUFHLEtBQUUsRUFBRTtBQUFRLE1BQUUsVUFBUTtBQUFPLFFBQUcsQUFBYSxPQUFPLE9BQXBCO0FBQXNCLFVBQUc7QUFBQztBQUFBLGVBQVUsR0FBTjtBQUFTLFlBQUcsQUFBTyxPQUFQO0FBQVMsZ0JBQU0sTUFBTSxFQUFFO0FBQU0sV0FBRyxJQUFFO0FBQUE7QUFBQTtBQUFJLE1BQUU7QUFBRyxPQUFHO0FBQUcsT0FBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBRyxHQUFFO0FBQUMsUUFBRSxFQUFFO0FBQUcsU0FBRSxFQUFFLElBQUU7QUFBRyxRQUFHO0FBQUMsVUFBSSxLQUFFLEVBQUU7QUFBTyxRQUFFLFVBQVE7QUFBQSxhQUFVLEdBQU47QUFBUyxVQUFHLEFBQU8sT0FBUDtBQUFTLGNBQU0sTUFBTSxFQUFFO0FBQU0sU0FBRyxJQUFFO0FBQUE7QUFBQTtBQUFJLE9BQUksS0FBRSxFQUFFLFFBQVEsYUFBWSxBQUFPLE9BQVA7QUFBVSxRQUFFLEdBQUUsWUFBVyxHQUFFLGFBQVcsTUFBSyxHQUFFLFFBQU0sS0FBSSxJQUFFLFVBQ2pmLE1BQUssR0FBRSxZQUFVLE9BQU0sS0FBRTtBQUFFLE1BQUU7QUFBRTtBQUFLLFNBQU07QUFBQTtBQUFHLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLEdBQUcsR0FBRTtBQUFHLE1BQUUsR0FBRyxHQUFFLEdBQUU7QUFBRyxLQUFHLEdBQUU7QUFBRyxNQUFFO0FBQUssTUFBRSxHQUFHLEdBQUU7QUFBRyxFQUFPLE1BQVAsUUFBVyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUcsR0FBRTtBQUFBO0FBQ3pJLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBRyxBQUFJLEVBQUUsUUFBTjtBQUFVLE9BQUcsR0FBRSxHQUFFO0FBQUE7QUFBUSxhQUFRLElBQUUsRUFBRSxRQUFPLEFBQU8sTUFBUCxRQUFVO0FBQUMsVUFBRyxBQUFJLEVBQUUsUUFBTixHQUFVO0FBQUMsV0FBRyxHQUFFLEdBQUU7QUFBRztBQUFBLGlCQUFjLEFBQUksRUFBRSxRQUFOLEdBQVU7QUFBQyxZQUFJLElBQUUsRUFBRTtBQUFVLFlBQUcsQUFBYSxPQUFPLEVBQUUsS0FBSyw2QkFBM0IsY0FBcUQsQUFBYSxPQUFPLEVBQUUsc0JBQXRCLGNBQTBDLENBQU8sT0FBUCxRQUFXLENBQUMsR0FBRyxJQUFJLEtBQUk7QUFBQyxjQUFFLEdBQUcsR0FBRTtBQUFHLGNBQUksSUFBRSxHQUFHLEdBQUUsR0FBRTtBQUFHLGFBQUcsR0FBRTtBQUFHLGNBQUU7QUFBSyxjQUFFLEdBQUcsR0FBRTtBQUFHLGNBQUcsQUFBTyxNQUFQO0FBQVMsZUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFHLEdBQUU7QUFBQSxtQkFBVyxBQUFhLE9BQU8sRUFBRSxzQkFBdEIsY0FBMEMsQ0FBTyxPQUFQLFFBQVcsQ0FBQyxHQUFHLElBQUk7QUFBSSxnQkFBRztBQUFDLGdCQUFFLGtCQUFrQixHQUFFO0FBQUEscUJBQVMsSUFBTjtBQUFBO0FBQVU7QUFBQTtBQUFBO0FBQU8sVUFBRSxFQUFFO0FBQUE7QUFBQTtBQUNwZCxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUU7QUFBVSxFQUFPLE1BQVAsUUFBVSxFQUFFLE9BQU87QUFBRyxNQUFFO0FBQUssSUFBRSxlQUFhLEVBQUUsaUJBQWU7QUFBRSxRQUFJLEtBQUksS0FBRSxPQUFLLEtBQUksQ0FBSSxNQUFKLEtBQU8sQUFBSSxNQUFKLEtBQVEsS0FBRSxjQUFZLEtBQUcsTUFBSSxNQUFJLEtBQUcsR0FBRyxHQUFFLEtBQUcsTUFBSTtBQUFHLEtBQUcsR0FBRTtBQUFBO0FBQUcsWUFBWSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRTtBQUFVLEVBQU8sTUFBUCxRQUFVLEVBQUUsT0FBTztBQUFHLE1BQUU7QUFBRSxFQUFJLE1BQUosS0FBUSxLQUFFLEVBQUUsTUFBSyxBQUFLLEtBQUUsT0FBUCxJQUFVLElBQUUsSUFBRSxBQUFLLEtBQUUsT0FBUCxJQUFVLElBQUUsQUFBSyxTQUFMLEtBQVUsSUFBRSxJQUFHLENBQUksT0FBSixLQUFTLE1BQUcsS0FBSSxJQUFFLEdBQUcsV0FBUyxDQUFDLEtBQUksQUFBSSxNQUFKLEtBQVEsS0FBRTtBQUFXLE1BQUU7QUFBSyxNQUFFLEdBQUcsR0FBRTtBQUFHLEVBQU8sTUFBUCxRQUFXLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRyxHQUFFO0FBQUE7QUFBSSxJQUFJO0FBQzNaLEtBQUcsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxFQUFFO0FBQU0sTUFBRyxBQUFPLE1BQVA7QUFBUyxRQUFHLEVBQUUsa0JBQWdCLEVBQUUsZ0JBQWMsRUFBRTtBQUFRLFdBQUc7QUFBQSxhQUFXLEFBQUssS0FBRSxPQUFQO0FBQVUsV0FBRyxBQUFLLEdBQUUsUUFBTSxXQUFiLElBQW9CLE9BQUc7QUFBQSxTQUFPO0FBQUMsV0FBRztBQUFHLGNBQU8sRUFBRTtBQUFBLGFBQVU7QUFBRSxhQUFHO0FBQUc7QUFBSztBQUFBLGFBQVc7QUFBRSxhQUFHO0FBQUc7QUFBQSxhQUFXO0FBQUUsYUFBRyxFQUFFLFNBQU8sR0FBRztBQUFHO0FBQUEsYUFBVztBQUFFLGFBQUcsR0FBRSxFQUFFLFVBQVU7QUFBZTtBQUFBLGFBQVc7QUFBRyxjQUFFLEVBQUUsY0FBYztBQUFNLGNBQUksSUFBRSxFQUFFLEtBQUs7QUFBUyxZQUFFLElBQUcsRUFBRTtBQUFlLFlBQUUsZ0JBQWM7QUFBRTtBQUFBLGFBQVc7QUFBRyxjQUFHLEFBQU8sRUFBRSxrQkFBVCxNQUF1QjtBQUFDLGdCQUFHLEFBQUssS0FBRSxFQUFFLE1BQU0sZ0JBQWY7QUFBMkIscUJBQU8sR0FBRyxHQUFFLEdBQUU7QUFBRyxjQUFFLEdBQUUsRUFBRSxVQUFRO0FBQUcsZ0JBQUVPLEtBQUcsR0FBRSxHQUFFO0FBQUcsbUJBQU8sQUFDM2YsTUFEMmYsT0FDemYsRUFBRSxVQUFRO0FBQUE7QUFBSyxZQUFFLEdBQUUsRUFBRSxVQUFRO0FBQUc7QUFBQSxhQUFXO0FBQUcsY0FBRSxBQUFLLEtBQUUsRUFBRSxnQkFBVDtBQUFxQixjQUFHLEFBQUssR0FBRSxRQUFNLFFBQWIsR0FBaUI7QUFBQyxnQkFBRztBQUFFLHFCQUFPLEdBQUcsR0FBRSxHQUFFO0FBQUcsY0FBRSxTQUFPO0FBQUE7QUFBRyxjQUFFLEVBQUU7QUFBYyxVQUFPLE1BQVAsUUFBVyxHQUFFLFlBQVUsTUFBSyxFQUFFLE9BQUssTUFBSyxFQUFFLGFBQVc7QUFBTSxZQUFFLEdBQUUsRUFBRTtBQUFTLGNBQUc7QUFBRTtBQUFBO0FBQVcsbUJBQU87QUFBQSxhQUFVO0FBQUEsYUFBUTtBQUFHLGlCQUFPLEVBQUUsUUFBTSxHQUFFLEdBQUcsR0FBRSxHQUFFO0FBQUE7QUFBRyxhQUFPQSxLQUFHLEdBQUUsR0FBRTtBQUFBO0FBQUE7QUFBUSxTQUFHO0FBQUcsSUFBRSxRQUFNO0FBQUUsVUFBTyxFQUFFO0FBQUEsU0FBVTtBQUFFLFVBQUUsRUFBRTtBQUFLLE1BQU8sTUFBUCxRQUFXLEdBQUUsWUFBVSxNQUFLLEVBQUUsWUFBVSxNQUFLLEVBQUUsU0FBTztBQUFHLFVBQUUsRUFBRTtBQUFhLFVBQUUsR0FBRyxHQUFFLEVBQUU7QUFBUyxTQUFHLEdBQUU7QUFBRyxVQUFFLEdBQUcsTUFBSyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUcsUUFBRSxTQUFPO0FBQUUsVUFBRyxBQUM1ZSxPQUFPLE1BRHFlLFlBQ2xlLEFBQU8sTUFBUCxRQUFVLEFBQWEsT0FBTyxFQUFFLFdBQXRCLGNBQThCLEFBQVMsRUFBRSxhQUFYLFFBQW9CO0FBQUMsVUFBRSxNQUFJO0FBQUUsVUFBRSxnQkFBYztBQUFLLFVBQUUsY0FBWTtBQUFLLFlBQUcsR0FBRyxJQUFHO0FBQUMsY0FBSSxLQUFFO0FBQUcsYUFBRztBQUFBO0FBQVEsZUFBRTtBQUFHLFVBQUUsZ0JBQWMsQUFBTyxFQUFFLFVBQVQsUUFBZ0IsQUFBUyxFQUFFLFVBQVgsU0FBaUIsRUFBRSxRQUFNO0FBQUssV0FBRztBQUFHLFlBQUksS0FBRSxFQUFFO0FBQXlCLFFBQWEsT0FBTyxPQUFwQixjQUF1QixHQUFHLEdBQUUsR0FBRSxJQUFFO0FBQUcsVUFBRSxVQUFRO0FBQUcsVUFBRSxZQUFVO0FBQUUsVUFBRSxrQkFBZ0I7QUFBRSxXQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUcsWUFBRSxHQUFHLE1BQUssR0FBRSxHQUFFLE1BQUcsSUFBRTtBQUFBO0FBQVEsVUFBRSxNQUFJLEdBQUUsR0FBRyxNQUFLLEdBQUUsR0FBRSxJQUFHLElBQUUsRUFBRTtBQUFNLGFBQU87QUFBQSxTQUFPO0FBQUcsVUFBRSxFQUFFO0FBQVksU0FBRTtBQUFDLFFBQU8sTUFBUCxRQUFXLEdBQUUsWUFBVSxNQUFLLEVBQUUsWUFBVSxNQUFLLEVBQUUsU0FBTztBQUNuZixZQUFFLEVBQUU7QUFBYSxhQUFFLEVBQUU7QUFBTSxZQUFFLEdBQUUsRUFBRTtBQUFVLFVBQUUsT0FBSztBQUFFLGFBQUUsRUFBRSxNQUFJLEdBQUc7QUFBRyxZQUFFLEdBQUcsR0FBRTtBQUFHLGdCQUFPO0FBQUEsZUFBUTtBQUFFLGdCQUFFLEdBQUcsTUFBSyxHQUFFLEdBQUUsR0FBRTtBQUFHO0FBQUEsZUFBYTtBQUFFLGdCQUFFLEdBQUcsTUFBSyxHQUFFLEdBQUUsR0FBRTtBQUFHO0FBQUEsZUFBYTtBQUFHLGdCQUFFLEdBQUcsTUFBSyxHQUFFLEdBQUUsR0FBRTtBQUFHO0FBQUEsZUFBYTtBQUFHLGdCQUFFLEdBQUcsTUFBSyxHQUFFLEdBQUUsR0FBRyxFQUFFLE1BQUssSUFBRyxHQUFFO0FBQUc7QUFBQTtBQUFRLGNBQU0sTUFBTSxFQUFFLEtBQUksR0FBRTtBQUFBO0FBQU0sYUFBTztBQUFBLFNBQU87QUFBRSxhQUFPLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxjQUFhLElBQUUsRUFBRSxnQkFBYyxJQUFFLElBQUUsR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUEsU0FBUTtBQUFFLGFBQU8sSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFLGNBQWEsSUFBRSxFQUFFLGdCQUFjLElBQUUsSUFBRSxHQUFHLEdBQUUsSUFBRyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQSxTQUFRO0FBQUUsU0FBRztBQUFHLFVBQUUsRUFBRTtBQUFZLFVBQUcsQUFBTyxNQUFQLFFBQVUsQUFBTyxNQUFQO0FBQVMsY0FBTSxNQUFNLEVBQUU7QUFDemYsVUFBRSxFQUFFO0FBQWEsVUFBRSxFQUFFO0FBQWMsVUFBRSxBQUFPLE1BQVAsT0FBUyxFQUFFLFVBQVE7QUFBSyxTQUFHLEdBQUU7QUFBRyxTQUFHLEdBQUUsR0FBRSxNQUFLO0FBQUcsVUFBRSxFQUFFLGNBQWM7QUFBUSxVQUFHLE1BQUk7QUFBRSxjQUFLLElBQUVBLEtBQUcsR0FBRSxHQUFFO0FBQUEsV0FBTztBQUFDLFlBQUUsRUFBRTtBQUFVLFlBQUcsS0FBRSxFQUFFO0FBQVEsZUFBRyxHQUFHLEVBQUUsVUFBVSxjQUFjLGFBQVksS0FBRyxHQUFFLEtBQUUsS0FBRztBQUFHLFlBQUcsSUFBRTtBQUFDLGNBQUUsRUFBRTtBQUFnQyxjQUFHLEFBQU0sS0FBTjtBQUFRLGlCQUFJLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxLQUFHO0FBQUUsbUJBQUUsRUFBRSxJQUFHLEdBQUUsZ0NBQThCLEVBQUUsSUFBRSxJQUFHLEdBQUcsS0FBSztBQUFHLGNBQUUsR0FBRyxHQUFFLE1BQUssR0FBRTtBQUFHLGVBQUksRUFBRSxRQUFNLEdBQUU7QUFBRyxjQUFFLFFBQU0sRUFBRSxRQUFNLEtBQUcsTUFBSyxJQUFFLEVBQUU7QUFBQTtBQUFhLGFBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRztBQUFLLFlBQUUsRUFBRTtBQUFBO0FBQU0sYUFBTztBQUFBLFNBQU87QUFBRSxhQUFPLEdBQUcsSUFBRyxBQUFPLE1BQVAsUUFDNWUsR0FBRyxJQUFHLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxjQUFhLEtBQUUsQUFBTyxNQUFQLE9BQVMsRUFBRSxnQkFBYyxNQUFLLEtBQUUsRUFBRSxVQUFTLEdBQUcsR0FBRSxLQUFHLEtBQUUsT0FBSyxBQUFPLE9BQVAsUUFBVSxHQUFHLEdBQUUsT0FBSyxHQUFFLFNBQU8sS0FBSSxHQUFHLEdBQUUsSUFBRyxHQUFHLEdBQUUsR0FBRSxJQUFFLElBQUcsRUFBRTtBQUFBLFNBQVc7QUFBRSxhQUFPLEFBQU8sTUFBUCxRQUFVLEdBQUcsSUFBRztBQUFBLFNBQVU7QUFBRyxhQUFPLEdBQUcsR0FBRSxHQUFFO0FBQUEsU0FBUTtBQUFFLGFBQU8sR0FBRyxHQUFFLEVBQUUsVUFBVSxnQkFBZSxJQUFFLEVBQUUsY0FBYSxBQUFPLE1BQVAsT0FBUyxFQUFFLFFBQU0sR0FBRyxHQUFFLE1BQUssR0FBRSxLQUFHLEdBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsU0FBVztBQUFHLGFBQU8sSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFLGNBQWEsSUFBRSxFQUFFLGdCQUFjLElBQUUsSUFBRSxHQUFHLEdBQUUsSUFBRyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQSxTQUFRO0FBQUUsYUFBTyxHQUFHLEdBQUUsR0FBRSxFQUFFLGNBQWEsSUFBRyxFQUFFO0FBQUEsU0FBVztBQUFFLGFBQU8sR0FBRyxHQUFFLEdBQUUsRUFBRSxhQUFhLFVBQ2hmLElBQUcsRUFBRTtBQUFBLFNBQVc7QUFBRyxhQUFPLEdBQUcsR0FBRSxHQUFFLEVBQUUsYUFBYSxVQUFTLElBQUcsRUFBRTtBQUFBLFNBQVc7QUFBRyxTQUFFO0FBQUMsWUFBRSxFQUFFLEtBQUs7QUFBUyxZQUFFLEVBQUU7QUFBYSxhQUFFLEVBQUU7QUFBYyxhQUFFLEVBQUU7QUFBTSxZQUFJLEtBQUUsRUFBRSxLQUFLO0FBQVMsVUFBRSxJQUFHLEdBQUU7QUFBZSxXQUFFLGdCQUFjO0FBQUUsWUFBRyxBQUFPLE9BQVA7QUFBUyxjQUFHLEtBQUUsR0FBRSxPQUFNLEtBQUUsR0FBRyxJQUFFLE1BQUcsSUFBRyxDQUFhLE9BQU8sRUFBRSwwQkFBdEIsYUFBNEMsRUFBRSxzQkFBc0IsSUFBRSxNQUFHLGNBQVksR0FBRSxBQUFJLE9BQUosR0FBTTtBQUFDLGdCQUFHLEdBQUUsYUFBVyxFQUFFLFlBQVUsQ0FBQyxFQUFFLFNBQVE7QUFBQyxrQkFBRUEsS0FBRyxHQUFFLEdBQUU7QUFBRztBQUFBO0FBQUE7QUFBYyxpQkFBSSxLQUFFLEVBQUUsT0FBTSxBQUFPLE9BQVAsUUFBVyxJQUFFLFNBQU8sSUFBRyxBQUFPLE9BQVAsUUFBVTtBQUFDLGtCQUFJLElBQUUsR0FBRTtBQUFhLGtCQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMscUJBQUUsR0FBRTtBQUFNLHlCQUFRLEtBQ3RmLEVBQUUsY0FBYSxBQUFPLE9BQVAsUUFBVTtBQUFDLHNCQUFHLEdBQUUsWUFBVSxLQUFHLEFBQUssSUFBRSxlQUFhLFFBQXBCLEdBQXVCO0FBQUMsb0JBQUksR0FBRSxRQUFOLEtBQVksTUFBRSxHQUFHLElBQUcsSUFBRSxDQUFDLElBQUcsR0FBRSxNQUFJLEdBQUUsR0FBRyxJQUFFO0FBQUksdUJBQUUsU0FBTztBQUFFLHlCQUFFLEdBQUU7QUFBVSxvQkFBTyxPQUFQLFFBQVcsSUFBRSxTQUFPO0FBQUcsdUJBQUcsR0FBRSxRQUFPO0FBQUcsc0JBQUUsU0FBTztBQUFFO0FBQUE7QUFBTSx1QkFBRSxHQUFFO0FBQUE7QUFBQTtBQUFXLHFCQUFFLEFBQUssR0FBRSxRQUFQLEtBQVcsR0FBRSxTQUFPLEVBQUUsT0FBSyxPQUFLLEdBQUUsUUFBTSxHQUFFO0FBQU0sa0JBQUcsQUFBTyxPQUFQO0FBQVMsbUJBQUUsU0FBTztBQUFBO0FBQU8scUJBQUksS0FBRSxJQUFFLEFBQU8sT0FBUCxRQUFVO0FBQUMsc0JBQUcsT0FBSSxHQUFFO0FBQUMseUJBQUU7QUFBSztBQUFBO0FBQU0sdUJBQUUsR0FBRTtBQUFRLHNCQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMsdUJBQUUsU0FBTyxHQUFFO0FBQU8seUJBQUU7QUFBRTtBQUFBO0FBQU0sdUJBQUUsR0FBRTtBQUFBO0FBQU8sbUJBQUU7QUFBQTtBQUFFLFdBQUcsR0FBRSxHQUFFLEVBQUUsVUFBUztBQUFHLFlBQUUsRUFBRTtBQUFBO0FBQU0sYUFBTztBQUFBLFNBQU87QUFBRSxhQUFPLElBQUUsRUFBRSxNQUFLLEtBQUUsRUFBRSxjQUFhLElBQUUsR0FBRSxVQUFTLEdBQUcsR0FBRSxJQUFHLElBQUUsR0FBRyxHQUNwZixHQUFFLHdCQUF1QixJQUFFLEVBQUUsSUFBRyxFQUFFLFNBQU8sR0FBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsRUFBRTtBQUFBLFNBQVc7QUFBRyxhQUFPLElBQUUsRUFBRSxNQUFLLEtBQUUsR0FBRyxHQUFFLEVBQUUsZUFBYyxLQUFFLEdBQUcsRUFBRSxNQUFLLEtBQUcsR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFFLEdBQUU7QUFBQSxTQUFRO0FBQUcsYUFBTyxHQUFHLEdBQUUsR0FBRSxFQUFFLE1BQUssRUFBRSxjQUFhLEdBQUU7QUFBQSxTQUFRO0FBQUcsYUFBTyxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUUsY0FBYSxJQUFFLEVBQUUsZ0JBQWMsSUFBRSxJQUFFLEdBQUcsR0FBRSxJQUFHLEFBQU8sTUFBUCxRQUFXLEdBQUUsWUFBVSxNQUFLLEVBQUUsWUFBVSxNQUFLLEVBQUUsU0FBTyxJQUFHLEVBQUUsTUFBSSxHQUFFLEdBQUcsS0FBSSxLQUFFLE1BQUcsR0FBRyxNQUFJLElBQUUsT0FBRyxHQUFHLEdBQUUsSUFBRyxHQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFHLE1BQUssR0FBRSxHQUFFLE1BQUcsR0FBRTtBQUFBLFNBQVE7QUFBRyxhQUFPLEdBQUcsR0FBRSxHQUFFO0FBQUEsU0FBUTtBQUFHLGFBQU8sR0FBRyxHQUFFLEdBQUU7QUFBQSxTQUFRO0FBQUcsYUFBTyxHQUFHLEdBQUUsR0FBRTtBQUFBO0FBQUcsUUFBTSxNQUFNLEVBQUUsS0FBSSxFQUFFO0FBQUE7QUFDN2UsWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsT0FBSyxNQUFJO0FBQUUsT0FBSyxNQUFJO0FBQUUsT0FBSyxVQUFRLEtBQUssUUFBTSxLQUFLLFNBQU8sS0FBSyxZQUFVLEtBQUssT0FBSyxLQUFLLGNBQVk7QUFBSyxPQUFLLFFBQU07QUFBRSxPQUFLLE1BQUk7QUFBSyxPQUFLLGVBQWE7QUFBRSxPQUFLLGVBQWEsS0FBSyxnQkFBYyxLQUFLLGNBQVksS0FBSyxnQkFBYztBQUFLLE9BQUssT0FBSztBQUFFLE9BQUssUUFBTTtBQUFFLE9BQUssYUFBVyxLQUFLLGNBQVksS0FBSyxhQUFXO0FBQUssT0FBSyxhQUFXLEtBQUssUUFBTTtBQUFFLE9BQUssWUFBVTtBQUFBO0FBQUssWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsU0FBTyxJQUFJLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQTtBQUFHLFlBQVksR0FBRTtBQUFDLE1BQUUsRUFBRTtBQUFVLFNBQU0sQ0FBRSxFQUFDLEtBQUcsQ0FBQyxFQUFFO0FBQUE7QUFDcmQsWUFBWSxHQUFFO0FBQUMsTUFBRyxBQUFhLE9BQU8sTUFBcEI7QUFBc0IsV0FBTyxHQUFHLEtBQUcsSUFBRTtBQUFFLE1BQUcsQUFBUyxNQUFULFVBQVksQUFBTyxNQUFQLE1BQVM7QUFBQyxRQUFFLEVBQUU7QUFBUyxRQUFHLE1BQUk7QUFBRyxhQUFPO0FBQUcsUUFBRyxNQUFJO0FBQUcsYUFBTztBQUFBO0FBQUcsU0FBTztBQUFBO0FBQzlJLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEVBQUU7QUFBVSxFQUFPLE1BQVAsT0FBVSxLQUFFLEdBQUcsRUFBRSxLQUFJLEdBQUUsRUFBRSxLQUFJLEVBQUUsT0FBTSxFQUFFLGNBQVksRUFBRSxhQUFZLEVBQUUsT0FBSyxFQUFFLE1BQUssRUFBRSxZQUFVLEVBQUUsV0FBVSxFQUFFLFlBQVUsR0FBRSxFQUFFLFlBQVUsS0FBSSxHQUFFLGVBQWEsR0FBRSxFQUFFLE9BQUssRUFBRSxNQUFLLEVBQUUsUUFBTSxHQUFFLEVBQUUsYUFBVyxNQUFLLEVBQUUsY0FBWSxNQUFLLEVBQUUsYUFBVztBQUFNLElBQUUsYUFBVyxFQUFFO0FBQVcsSUFBRSxRQUFNLEVBQUU7QUFBTSxJQUFFLFFBQU0sRUFBRTtBQUFNLElBQUUsZ0JBQWMsRUFBRTtBQUFjLElBQUUsZ0JBQWMsRUFBRTtBQUFjLElBQUUsY0FBWSxFQUFFO0FBQVksTUFBRSxFQUFFO0FBQWEsSUFBRSxlQUFhLEFBQU8sTUFBUCxPQUFTLE9BQUssRUFBQyxPQUFNLEVBQUUsT0FBTSxjQUFhLEVBQUU7QUFDM2UsSUFBRSxVQUFRLEVBQUU7QUFBUSxJQUFFLFFBQU0sRUFBRTtBQUFNLElBQUUsTUFBSSxFQUFFO0FBQUksU0FBTztBQUFBO0FBQ3ZELFlBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUU7QUFBQyxNQUFJLEtBQUU7QUFBRSxNQUFFO0FBQUUsTUFBRyxBQUFhLE9BQU8sTUFBcEI7QUFBc0IsT0FBRyxNQUFLLE1BQUU7QUFBQSxXQUFXLEFBQVcsT0FBTyxNQUFsQjtBQUFvQixTQUFFO0FBQUE7QUFBTztBQUFFLGNBQU87QUFBQSxhQUFRO0FBQUcsaUJBQU8sR0FBRyxFQUFFLFVBQVMsR0FBRSxJQUFFO0FBQUEsYUFBUTtBQUFHLGVBQUU7QUFBRSxlQUFHO0FBQUc7QUFBQSxhQUFXO0FBQUcsZUFBRTtBQUFFLGVBQUc7QUFBRTtBQUFBLGFBQVc7QUFBRyxpQkFBTyxJQUFFLEdBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRSxJQUFHLEVBQUUsY0FBWSxJQUFHLEVBQUUsT0FBSyxJQUFHLEVBQUUsUUFBTSxJQUFFO0FBQUEsYUFBTztBQUFHLGlCQUFPLElBQUUsR0FBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEVBQUUsT0FBSyxJQUFHLEVBQUUsY0FBWSxJQUFHLEVBQUUsUUFBTSxJQUFFO0FBQUEsYUFBTztBQUFHLGlCQUFPLElBQUUsR0FBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEVBQUUsY0FBWSxJQUFHLEVBQUUsUUFBTSxJQUFFO0FBQUEsYUFBTztBQUFHLGlCQUFPLEdBQUcsR0FBRSxHQUFFLElBQUU7QUFBQSxhQUFRO0FBQUcsaUJBQU8sSUFBRSxHQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsRUFBRSxjQUFZLElBQUcsRUFBRSxRQUFNLElBQUU7QUFBQTtBQUFVLGNBQUcsQUFDdmYsT0FBTyxNQURnZixZQUM3ZSxBQUFPLE1BQVA7QUFBUyxvQkFBTyxFQUFFO0FBQUEsbUJBQWU7QUFBRyxxQkFBRTtBQUFHO0FBQUEsbUJBQWE7QUFBRyxxQkFBRTtBQUFFO0FBQUEsbUJBQWE7QUFBRyxxQkFBRTtBQUFHO0FBQUEsbUJBQWE7QUFBRyxxQkFBRTtBQUFHO0FBQUEsbUJBQWE7QUFBRyxxQkFBRTtBQUFHLG9CQUFFO0FBQUs7QUFBQSxtQkFBYTtBQUFHLHFCQUFFO0FBQUc7QUFBQTtBQUFRLGdCQUFNLE1BQU0sRUFBRSxLQUFJLEFBQU0sS0FBTixPQUFRLElBQUUsT0FBTyxHQUFFO0FBQUE7QUFBTSxNQUFFLEdBQUcsSUFBRSxHQUFFLEdBQUU7QUFBRyxJQUFFLGNBQVk7QUFBRSxJQUFFLE9BQUs7QUFBRSxJQUFFLFFBQU07QUFBRSxTQUFPO0FBQUE7QUFBRSxZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBRyxJQUFFLFFBQU07QUFBRSxTQUFPO0FBQUE7QUFBRSxZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLEdBQUcsSUFBRyxHQUFFLEdBQUU7QUFBRyxJQUFFLGNBQVk7QUFBRyxJQUFFLFFBQU07QUFBRSxTQUFPO0FBQUE7QUFBRSxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBRSxHQUFHLEdBQUUsR0FBRSxNQUFLO0FBQUcsSUFBRSxRQUFNO0FBQUUsU0FBTztBQUFBO0FBQ2xjLFlBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLEdBQUcsR0FBRSxBQUFPLEVBQUUsYUFBVCxPQUFrQixFQUFFLFdBQVMsSUFBRyxFQUFFLEtBQUk7QUFBRyxJQUFFLFFBQU07QUFBRSxJQUFFLFlBQVUsRUFBQyxlQUFjLEVBQUUsZUFBYyxpQkFBZ0IsTUFBSyxnQkFBZSxFQUFFO0FBQWdCLFNBQU87QUFBQTtBQUNyTCxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsT0FBSyxNQUFJO0FBQUUsT0FBSyxnQkFBYztBQUFFLE9BQUssZUFBYSxLQUFLLFlBQVUsS0FBSyxVQUFRLEtBQUssa0JBQWdCO0FBQUssT0FBSyxnQkFBYztBQUFHLE9BQUssaUJBQWUsS0FBSyxVQUFRO0FBQUssT0FBSyxVQUFRO0FBQUUsT0FBSyxlQUFhO0FBQUssT0FBSyxtQkFBaUI7QUFBRSxPQUFLLGFBQVcsR0FBRztBQUFHLE9BQUssa0JBQWdCLEdBQUc7QUFBSSxPQUFLLGlCQUFlLEtBQUssZ0JBQWMsS0FBSyxtQkFBaUIsS0FBSyxlQUFhLEtBQUssY0FBWSxLQUFLLGlCQUFlLEtBQUssZUFBYTtBQUFFLE9BQUssZ0JBQWMsR0FBRztBQUFHLE9BQUssa0NBQWdDO0FBQUE7QUFDN2UsWUFBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRSxJQUFFLFVBQVUsVUFBUSxBQUFTLFVBQVUsT0FBbkIsU0FBc0IsVUFBVSxLQUFHO0FBQUssU0FBTSxFQUFDLFVBQVMsSUFBRyxLQUFJLEFBQU0sS0FBTixPQUFRLE9BQUssS0FBRyxHQUFFLFVBQVMsR0FBRSxlQUFjLEdBQUUsZ0JBQWU7QUFBQTtBQUN4SyxZQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUUsRUFBRSxTQUFRLEtBQUUsTUFBSyxLQUFFLEdBQUc7QUFBRztBQUFFLFFBQUcsR0FBRTtBQUFDLFVBQUUsRUFBRTtBQUFnQixTQUFFO0FBQUMsWUFBRyxHQUFHLE9BQUssS0FBRyxBQUFJLEVBQUUsUUFBTjtBQUFVLGdCQUFNLE1BQU0sRUFBRTtBQUFNLFlBQUksS0FBRTtBQUFFLFdBQUU7QUFBQyxrQkFBTyxHQUFFO0FBQUEsaUJBQVU7QUFBRSxtQkFBRSxHQUFFLFVBQVU7QUFBUTtBQUFBLGlCQUFhO0FBQUUsa0JBQUcsR0FBRyxHQUFFLE9BQU07QUFBQyxxQkFBRSxHQUFFLFVBQVU7QUFBMEM7QUFBQTtBQUFBO0FBQVMsZUFBRSxHQUFFO0FBQUEsaUJBQWEsQUFBTyxPQUFQO0FBQVUsY0FBTSxNQUFNLEVBQUU7QUFBQTtBQUFPLFVBQUcsQUFBSSxFQUFFLFFBQU4sR0FBVTtBQUFDLFlBQUksSUFBRSxFQUFFO0FBQUssWUFBRyxHQUFHLElBQUc7QUFBQyxjQUFFLEdBQUcsR0FBRSxHQUFFO0FBQUc7QUFBQTtBQUFBO0FBQVMsVUFBRTtBQUFBO0FBQU8sVUFBRTtBQUFHLEVBQU8sRUFBRSxZQUFULE9BQWlCLEVBQUUsVUFBUSxJQUFFLEVBQUUsaUJBQWU7QUFBRSxNQUFFLEdBQUcsSUFBRTtBQUFHLElBQUUsVUFBUSxFQUFDLFNBQVE7QUFBRyxNQUFFLEFBQVMsTUFBVCxTQUFXLE9BQUs7QUFBRSxFQUNoZixNQURnZixRQUM1ZSxHQUFFLFdBQVM7QUFBRyxLQUFHLEdBQUU7QUFBRyxLQUFHLEdBQUUsSUFBRTtBQUFHLFNBQU87QUFBQTtBQUFFLFlBQVksR0FBRTtBQUFDLE1BQUUsRUFBRTtBQUFRLE1BQUcsQ0FBQyxFQUFFO0FBQU0sV0FBTztBQUFLLFVBQU8sRUFBRSxNQUFNO0FBQUEsU0FBVTtBQUFFLGFBQU8sRUFBRSxNQUFNO0FBQUE7QUFBa0IsYUFBTyxFQUFFLE1BQU07QUFBQTtBQUFBO0FBQVcsWUFBWSxHQUFFLEdBQUU7QUFBQyxNQUFFLEVBQUU7QUFBYyxNQUFHLEFBQU8sTUFBUCxRQUFVLEFBQU8sRUFBRSxlQUFULE1BQW9CO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBVSxNQUFFLFlBQVUsQUFBSSxNQUFKLEtBQU8sSUFBRSxJQUFFLElBQUU7QUFBQTtBQUFBO0FBQUcsWUFBWSxHQUFFLEdBQUU7QUFBQyxLQUFHLEdBQUU7QUFBRyxFQUFDLEtBQUUsRUFBRSxjQUFZLEdBQUcsR0FBRTtBQUFBO0FBQUcsY0FBYTtBQUFDLFNBQU87QUFBQTtBQUNoWCxZQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLEFBQU0sS0FBTixRQUFTLEFBQU0sRUFBRSxvQkFBUixRQUEwQixFQUFFLGlCQUFpQixrQkFBZ0I7QUFBSyxNQUFFLElBQUksR0FBRyxHQUFFLEdBQUUsQUFBTSxLQUFOLFFBQVMsQUFBSyxFQUFFLFlBQVA7QUFBZ0IsTUFBRSxHQUFHLEdBQUUsTUFBSyxNQUFLLEFBQUksTUFBSixJQUFNLElBQUUsQUFBSSxNQUFKLElBQU0sSUFBRTtBQUFHLElBQUUsVUFBUTtBQUFFLElBQUUsWUFBVTtBQUFFLEtBQUc7QUFBRyxJQUFFLE1BQUksRUFBRTtBQUFRLEtBQUcsQUFBSSxFQUFFLGFBQU4sSUFBZSxFQUFFLGFBQVc7QUFBRyxNQUFHO0FBQUUsU0FBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLFVBQUUsRUFBRTtBQUFHLFVBQUksSUFBRSxFQUFFO0FBQVksVUFBRSxFQUFFLEVBQUU7QUFBUyxNQUFNLEVBQUUsbUNBQVIsT0FBd0MsRUFBRSxrQ0FBZ0MsQ0FBQyxHQUFFLEtBQUcsRUFBRSxnQ0FBZ0MsS0FBSyxHQUFFO0FBQUE7QUFBRyxPQUFLLGdCQUFjO0FBQUE7QUFDdGQsR0FBRyxVQUFVLFNBQU8sU0FBUyxHQUFFO0FBQUMsS0FBRyxHQUFFLEtBQUssZUFBYyxNQUFLO0FBQUE7QUFBTyxHQUFHLFVBQVUsVUFBUSxXQUFVO0FBQUMsTUFBSSxJQUFFLEtBQUssZUFBYyxJQUFFLEVBQUU7QUFBYyxLQUFHLE1BQUssR0FBRSxNQUFLLFdBQVU7QUFBQyxNQUFFLE1BQUk7QUFBQTtBQUFBO0FBQVEsWUFBWSxHQUFFO0FBQUMsU0FBTSxDQUFFLEVBQUMsS0FBRyxBQUFJLEVBQUUsYUFBTixLQUFnQixBQUFJLEVBQUUsYUFBTixLQUFnQixBQUFLLEVBQUUsYUFBUCxNQUFrQixDQUFJLEVBQUUsYUFBTixLQUFnQixBQUFpQyxFQUFFLGNBQW5DO0FBQUE7QUFDcFIsWUFBWSxHQUFFLEdBQUU7QUFBQyxPQUFJLEtBQUUsSUFBRSxBQUFJLEVBQUUsYUFBTixJQUFlLEVBQUUsa0JBQWdCLEVBQUUsYUFBVyxNQUFLLElBQUUsQ0FBRSxFQUFDLEtBQUcsQUFBSSxFQUFFLGFBQU4sS0FBZ0IsQ0FBQyxFQUFFLGFBQWE7QUFBb0IsTUFBRyxDQUFDO0FBQUUsYUFBUSxHQUFFLElBQUUsRUFBRTtBQUFXLFFBQUUsWUFBWTtBQUFHLFNBQU8sSUFBSSxHQUFHLEdBQUUsR0FBRSxJQUFFLEVBQUMsU0FBUSxTQUFJO0FBQUE7QUFDek4sWUFBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFJLEtBQUUsRUFBRTtBQUFvQixNQUFHLElBQUU7QUFBQyxRQUFJLEtBQUUsR0FBRTtBQUFjLFFBQUcsQUFBYSxPQUFPLE1BQXBCLFlBQXNCO0FBQUMsVUFBSSxLQUFFO0FBQUUsVUFBRSxXQUFVO0FBQUMsWUFBSSxLQUFFLEdBQUc7QUFBRyxXQUFFLEtBQUs7QUFBQTtBQUFBO0FBQUksT0FBRyxHQUFFLElBQUUsR0FBRTtBQUFBLFNBQU87QUFBQyxTQUFFLEVBQUUsc0JBQW9CLEdBQUcsR0FBRTtBQUFHLFNBQUUsR0FBRTtBQUFjLFFBQUcsQUFBYSxPQUFPLE1BQXBCLFlBQXNCO0FBQUMsVUFBSSxJQUFFO0FBQUUsVUFBRSxXQUFVO0FBQUMsWUFBSSxLQUFFLEdBQUc7QUFBRyxVQUFFLEtBQUs7QUFBQTtBQUFBO0FBQUksT0FBRyxXQUFVO0FBQUMsU0FBRyxHQUFFLElBQUUsR0FBRTtBQUFBO0FBQUE7QUFBSyxTQUFPLEdBQUc7QUFBQTtBQUFHLEtBQUcsU0FBUyxHQUFFO0FBQUMsTUFBRyxBQUFLLEVBQUUsUUFBUCxJQUFXO0FBQUMsUUFBSSxJQUFFO0FBQUssT0FBRyxHQUFFLEdBQUU7QUFBRyxPQUFHLEdBQUU7QUFBQTtBQUFBO0FBQUssS0FBRyxTQUFTLEdBQUU7QUFBQyxNQUFHLEFBQUssRUFBRSxRQUFQLElBQVc7QUFBQyxRQUFJLElBQUU7QUFBSyxPQUFHLEdBQUUsVUFBUztBQUFHLE9BQUcsR0FBRTtBQUFBO0FBQUE7QUFDbmMsS0FBRyxTQUFTLEdBQUU7QUFBQyxNQUFHLEFBQUssRUFBRSxRQUFQLElBQVc7QUFBQyxRQUFJLElBQUUsTUFBSyxJQUFFLEdBQUc7QUFBRyxPQUFHLEdBQUUsR0FBRTtBQUFHLE9BQUcsR0FBRTtBQUFBO0FBQUE7QUFBSyxLQUFHLFNBQVMsR0FBRSxHQUFFO0FBQUMsU0FBTztBQUFBO0FBQzdGLEtBQUcsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLFVBQU87QUFBQSxTQUFRO0FBQVEsU0FBRyxHQUFFO0FBQUcsVUFBRSxFQUFFO0FBQUssVUFBRyxBQUFVLEVBQUUsU0FBWixXQUFrQixBQUFNLEtBQU4sTUFBUTtBQUFDLGFBQUksSUFBRSxHQUFFLEVBQUU7QUFBWSxjQUFFLEVBQUU7QUFBVyxZQUFFLEVBQUUsaUJBQWlCLGdCQUFjLEtBQUssVUFBVSxLQUFHLEtBQUc7QUFBbUIsYUFBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLGNBQUksSUFBRSxFQUFFO0FBQUcsY0FBRyxNQUFJLEtBQUcsRUFBRSxTQUFPLEVBQUUsTUFBSztBQUFDLGdCQUFJLElBQUUsR0FBRztBQUFHLGdCQUFHLENBQUM7QUFBRSxvQkFBTSxNQUFNLEVBQUU7QUFBSyxlQUFHO0FBQUcsZUFBRyxHQUFFO0FBQUE7QUFBQTtBQUFBO0FBQUs7QUFBQSxTQUFXO0FBQVcsU0FBRyxHQUFFO0FBQUc7QUFBQSxTQUFXO0FBQVMsVUFBRSxFQUFFLE9BQU0sQUFBTSxLQUFOLFFBQVMsR0FBRyxHQUFFLENBQUMsQ0FBQyxFQUFFLFVBQVMsR0FBRTtBQUFBO0FBQUE7QUFBTSxLQUFHO0FBQzlaLEtBQUcsU0FBUyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFJLEtBQUU7QUFBRSxPQUFHO0FBQUUsTUFBRztBQUFDLFdBQU8sR0FBRyxJQUFHLEVBQUUsS0FBSyxNQUFLLEdBQUUsR0FBRSxHQUFFO0FBQUEsWUFBSTtBQUFRLFFBQUUsSUFBRSxBQUFJLE1BQUosS0FBUSxPQUFLO0FBQUE7QUFBQTtBQUFRLEtBQUcsV0FBVTtBQUFDLEVBQUssS0FBRSxRQUFQLEtBQWEsT0FBSztBQUFBO0FBQU8sS0FBRyxTQUFTLEdBQUUsR0FBRTtBQUFDLE1BQUksSUFBRTtBQUFFLE9BQUc7QUFBRSxNQUFHO0FBQUMsV0FBTyxFQUFFO0FBQUEsWUFBRztBQUFRLFFBQUUsR0FBRSxBQUFJLE1BQUosS0FBUSxPQUFLO0FBQUE7QUFBQTtBQUFRLFlBQVksR0FBRSxHQUFFO0FBQUMsTUFBSSxJQUFFLElBQUUsVUFBVSxVQUFRLEFBQVMsVUFBVSxPQUFuQixTQUFzQixVQUFVLEtBQUc7QUFBSyxNQUFHLENBQUMsR0FBRztBQUFHLFVBQU0sTUFBTSxFQUFFO0FBQU0sU0FBTyxHQUFHLEdBQUUsR0FBRSxNQUFLO0FBQUE7QUFBRyxJQUFJLEtBQUcsRUFBQyxRQUFPLENBQUMsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsRUFBQyxTQUFRLFlBQU0sS0FBRyxFQUFDLHlCQUF3QixJQUFHLFlBQVcsR0FBRSxTQUFRLFVBQVMscUJBQW9CO0FBQzNlLElBQUksS0FBRyxFQUFDLFlBQVcsR0FBRyxZQUFXLFNBQVEsR0FBRyxTQUFRLHFCQUFvQixHQUFHLHFCQUFvQixnQkFBZSxHQUFHLGdCQUFlLG1CQUFrQixNQUFLLDZCQUE0QixNQUFLLDZCQUE0QixNQUFLLGVBQWMsTUFBSyx5QkFBd0IsTUFBSyx5QkFBd0IsTUFBSyxvQkFBbUIsTUFBSyxnQkFBZSxNQUFLLHNCQUFxQixHQUFHLHdCQUF1Qix5QkFBd0IsU0FBUyxHQUFFO0FBQUMsTUFBRSxHQUFHO0FBQUcsU0FBTyxBQUFPLE1BQVAsT0FBUyxPQUFLLEVBQUU7QUFBQSxHQUFXLHlCQUF3QixHQUFHLDJCQUMxZSxJQUFHLDZCQUE0QixNQUFLLGlCQUFnQixNQUFLLGNBQWEsTUFBSyxtQkFBa0IsTUFBSyxpQkFBZ0I7QUFBTSxJQUFHLEFBQWMsT0FBTyxtQ0FBckIsYUFBb0Q7QUFBQyxNQUFJLEtBQUc7QUFBK0IsTUFBRyxDQUFDLEdBQUcsY0FBWSxHQUFHO0FBQWMsUUFBRztBQUFDLFdBQUcsR0FBRyxPQUFPLEtBQUksS0FBRztBQUFBLGFBQVMsR0FBTjtBQUFBO0FBQUE7NkVBQXNFO3VDQUF3QjtzQ0FDL1YsU0FBUyxHQUFFO0FBQUMsTUFBRyxBQUFNLEtBQU47QUFBUSxXQUFPO0FBQUssTUFBRyxBQUFJLEVBQUUsYUFBTjtBQUFlLFdBQU87QUFBRSxNQUFJLElBQUUsRUFBRTtBQUFnQixNQUFHLEFBQVMsTUFBVCxRQUFXO0FBQUMsUUFBRyxBQUFhLE9BQU8sRUFBRSxXQUF0QjtBQUE2QixZQUFNLE1BQU0sRUFBRTtBQUFNLFVBQU0sTUFBTSxFQUFFLEtBQUksT0FBTyxLQUFLO0FBQUE7QUFBTSxNQUFFLEdBQUc7QUFBRyxNQUFFLEFBQU8sTUFBUCxPQUFTLE9BQUssRUFBRTtBQUFVLFNBQU87QUFBQTtvQ0FBcUIsU0FBUyxHQUFFLEdBQUU7QUFBQyxNQUFJLElBQUU7QUFBRSxNQUFHLEFBQUssS0FBRSxRQUFQO0FBQVcsV0FBTyxFQUFFO0FBQUcsT0FBRztBQUFFLE1BQUc7QUFBQyxRQUFHO0FBQUUsYUFBTyxHQUFHLElBQUcsRUFBRSxLQUFLLE1BQUs7QUFBQSxZQUFJO0FBQVEsUUFBRSxHQUFFO0FBQUE7QUFBQTtrQ0FBdUIsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUcsQ0FBQyxHQUFHO0FBQUcsVUFBTSxNQUFNLEVBQUU7QUFBTSxTQUFPLEdBQUcsTUFBSyxHQUFFLEdBQUUsTUFBRztBQUFBO2lDQUNwYyxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBRyxDQUFDLEdBQUc7QUFBRyxVQUFNLE1BQU0sRUFBRTtBQUFNLFNBQU8sR0FBRyxNQUFLLEdBQUUsR0FBRSxPQUFHO0FBQUE7aURBQW1DLFNBQVMsR0FBRTtBQUFDLE1BQUcsQ0FBQyxHQUFHO0FBQUcsVUFBTSxNQUFNLEVBQUU7QUFBSyxTQUFPLEVBQUUsc0JBQXFCLElBQUcsV0FBVTtBQUFDLE9BQUcsTUFBSyxNQUFLLEdBQUUsT0FBRyxXQUFVO0FBQUMsUUFBRSxzQkFBb0I7QUFBSyxRQUFFLE1BQUk7QUFBQTtBQUFBLE1BQVMsUUFBSTtBQUFBO2tEQUFvQztnREFBaUMsU0FBUyxHQUFFLEdBQUU7QUFBQyxTQUFPLEdBQUcsR0FBRSxHQUFFLElBQUUsVUFBVSxVQUFRLEFBQVMsVUFBVSxPQUFuQixTQUFzQixVQUFVLEtBQUc7QUFBQTs4REFDbFksU0FBUyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBRyxDQUFDLEdBQUc7QUFBRyxVQUFNLE1BQU0sRUFBRTtBQUFNLE1BQUcsQUFBTSxLQUFOLFFBQVMsQUFBUyxFQUFFLG9CQUFYO0FBQTJCLFVBQU0sTUFBTSxFQUFFO0FBQUssU0FBTyxHQUFHLEdBQUUsR0FBRSxHQUFFLE9BQUc7QUFBQTtrQ0FBb0I7QUN0UzdMLG9CQUFvQjtBQUVsQixNQUNFLE9BQU8sbUNBQW1DLGVBQzFDLE9BQU8sK0JBQStCLGFBQWEsWUFDbkQ7QUFDQTtBQUFBO0FBWUYsTUFBSTtBQUVGLG1DQUErQixTQUFTO0FBQUEsV0FDakMsS0FBUDtBQUdBLFlBQVEsTUFBTTtBQUFBO0FBQUE7QUFJeUI7QUFHekM7QUFDQUMsc0NBQWlCL0I7QUFBQUE7O0FDeEJuQix5QkFBNEQsVUFBNEM7UUFDaEcsY0FBYyxPQUFPLEtBQUs7UUFDMUIsbUJBQXNDO2FBRWpDLE9BQU8sYUFBYTtRQUN6QixPQUFPLFNBQVMsU0FBUyxZQUFZO3VCQUN0QixPQUFPLFNBQVM7QUFBQTtBQUFBO1NBSTdCLENBQUMsUUFBcUQsSUFBSSxXQUFjO1FBQzFFLGFBQWE7VUFDWCxZQUF5RDtlQUVwRCxPQUFPLGFBQWE7WUFDdkIsa0JBQWtCLE1BQU07WUFDeEIsa0JBQWtCLGlCQUFpQixLQUFLLGlCQUFpQjtnQkFDckQsT0FBTzttQkFDSixjQUFjLG9CQUFvQjtBQUFBO1dBRzFDLGFBQWEsWUFBWTtBQUFBO0FBQUE7QUNUcEMscUJBQ0UsZ0JBQ0EsVUFDdUI7UUFDakIsWUFBMkI7TUFDN0IsZUFBZTtRQUViLFdBQVcsQ0FBQyxXQUFjO1VBQ3hCLFlBQVksU0FBUSxjQUFjO1VBQ2xDLFlBQVk7bUJBQ0g7ZUFFSixPQUFNLFdBQVc7VUFDdkIsY0FBYztBQUFBO0FBQUE7UUFJZixZQUFZLENBQUMsYUFBMEI7UUFDdkMsZUFBZTtjQUNULEtBQUs7V0FFUixNQUFNO1VBQ1AsQ0FBQyxjQUFjOzs7WUFJYixRQUFRLFVBQVUsUUFBUTtnQkFDdEIsT0FBTyxPQUFPO3FCQUNUO0FBQUE7QUFBQTtRQUliLFdBQVcsTUFBTTtXQUNkO0FBQUE7U0FHRjtBQUFBLElBQ0w7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBO0FBQUE7bUJDUHNCLE9BQWMsUUFBd0I7VUFDcEQsT0FBTztBQUFBLFNBQ1IscUJBQXFCO1VBQ3BCLE9BQU8sUUFBUSxnQkFBZ0IsTUFBTSxhQUFhO2VBQzdDO0FBQUE7YUFHRixpQ0FDRixRQURFO0FBQUEsUUFFTCxhQUFhLE9BQU8sUUFBUTtBQUFBO0FBQUE7QUFBQSxTQUczQixxQkFBcUI7VUFDcEIsT0FBTyxRQUFRLGdCQUFnQixNQUFNLGFBQWE7ZUFDN0M7QUFBQTthQUdGLGlDQUNGLFFBREU7QUFBQSxRQUVMLGFBQWEsT0FBTyxRQUFRO0FBQUE7QUFBQTtBQUFBLFNBRzNCLG1CQUFtQjtVQUNsQixPQUFPLFFBQVEsaUJBQWlCLE1BQU0sY0FBYztlQUMvQztBQUFBO2FBR0YsaUNBQ0YsUUFERTtBQUFBLFFBRUwsY0FBYyxPQUFPLFFBQVE7QUFBQTtBQUFBO0FBQUEsU0FHNUIsbUNBQW1DO1VBQ2xDLE9BQU8sUUFBUSw2QkFBNkIsTUFBTSwwQkFBMEI7ZUFDdkU7QUFBQTthQUdGLGlDQUNGLFFBREU7QUFBQSxRQUVMLDBCQUEwQixPQUFPLFFBQVE7QUFBQTtBQUFBO0FBQUEsU0FHeEMsbUJBQW1CO2FBQ2Ysa0NBQ0YsUUFDQSxPQUFPO0FBQUE7QUFBQSxhQUdMO2FBQ0E7QUFBQTtBQUFBO0FBQUE7TUFLQWdDLGlCQUFzQjtBQUFBLEVBQ2pDLGFBQWE7QUFBQSxFQUNiLGFBQWE7QUFBQSxFQUNiLHNCQUFzQjtBQUFBLEVBQ3RCLG9CQUFvQjtBQUFBLEVBQ3BCLHlCQUF5QjtBQUFBLEVBQ3pCLHlCQUF5QjtBQUFBLEVBQ3pCLGNBQWM7QUFBQSxFQUNkLDBCQUEwQjtBQUFBO21CQzlDTixPQUFjLFFBQWlCO1VBQzdDLE9BQU87QUFBQSxTQUNSLGdCQUFnQjthQUNaLE9BQU87QUFBQTtBQUFBLFNBRVgsZ0JBQWdCO1VBQ2YsT0FBTyxRQUFRLGFBQWEsTUFBTSxVQUFVO2VBQ3ZDO0FBQUE7YUFHRixpQ0FDRixRQURFO0FBQUEsUUFFTCxVQUFVLE9BQU8sUUFBUTtBQUFBO0FBQUE7QUFBQSxTQUd4QixZQUFZO1VBQ1gsT0FBTyxRQUFRLFNBQVMsTUFBTSxNQUFNO2VBQy9CO0FBQUE7YUFHRixpQ0FDRixRQURFO0FBQUEsUUFFTCxNQUFNLE9BQU8sUUFBUTtBQUFBO0FBQUE7QUFBQSxTQUdwQixhQUFhO2FBQ1QsaUNBQ0YsUUFERTtBQUFBLFFBRUwsT0FBTyxtQkFDRixPQUFPO0FBQUE7QUFBQTtBQUFBLFNBSVgsaUJBQWlCO1VBQ2hCLE9BQU8sUUFBUSxRQUFRLE1BQU0sTUFBTSxLQUFLO2VBQ25DO0FBQUE7YUFHRixpQ0FDRixRQURFO0FBQUEsUUFFTCxPQUFPLGlDQUNGLE1BQU0sUUFESjtBQUFBLFVBRUwsS0FBSyxPQUFPLFFBQVE7QUFBQTtBQUFBO0FBQUE7QUFBQSxTQUlyQixzQkFBc0I7VUFDckIsT0FBTyxRQUFRLGFBQWEsTUFBTSxNQUFNLFVBQVU7ZUFDN0M7QUFBQTthQUdGLGlDQUNGLFFBREU7QUFBQSxRQUVMLE9BQU8saUNBQ0YsTUFBTSxRQURKO0FBQUEsVUFFTCxVQUFVLGtDQUNMLE1BQU0sTUFBTSxXQUNaLE9BQU8sUUFBUTtBQUFBO0FBQUE7QUFBQTtBQUFBLFNBS3JCLFlBQVk7VUFDWCxPQUFPLFFBQVEsU0FBUyxNQUFNLE1BQU0sTUFBTTtlQUNyQztBQUFBO2FBR0YsaUNBQ0YsUUFERTtBQUFBLFFBRUwsT0FBTyxpQ0FDRixNQUFNLFFBREo7QUFBQSxVQUVMLE1BQU0sT0FBTyxRQUFRO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FJdEIsWUFBWTtVQUNYLE9BQU8sUUFBUSxTQUFTLE1BQU0sTUFBTSxNQUFNO2VBQ3JDO0FBQUE7YUFHRixpQ0FDRixRQURFO0FBQUEsUUFFTCxPQUFPLGlDQUNGLE1BQU0sUUFESjtBQUFBLFVBRUwsTUFBTSxPQUFPLFFBQVE7QUFBQTtBQUFBO0FBQUE7QUFBQSxTQUl0QixvQkFBb0I7VUFDbkIsT0FBTyxZQUFZLE1BQU0sTUFBTSxRQUFRO2VBQ2xDO0FBQUE7YUFHRixpQ0FDRixRQURFO0FBQUEsUUFFTCxPQUFPLGlDQUNGLE1BQU0sUUFESjtBQUFBLFVBRUwsUUFBUSxPQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFJWjthQUNBO0FBQUE7QUFBQTtBQUFBO01BS0FBLGlCQUFzQjtBQUFBLEVBQ2pDLFVBQVU7QUFBQSxFQUNWLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLFVBQVU7QUFBQSxJQUNWLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLFFBQVE7QUFBQTtBQUFBO0FDdkxaLElBQVU7QUFBVixVQUFVLFFBQVY7NkJBQzRDO1dBQ2pDLFNBQVNDLG9CQUFTLE9BQU87QUFBQTtTQURsQjswQkFJMEQ7VUFDbEUsYUFBYSxVQUFVO1FBQ3pCLGFBQXdEO1FBRXhELFdBQVcsUUFBUSxVQUFVLElBQUk7bUJBQ3RCO0FBQUEsZUFDSixXQUFXLFFBQVEsVUFBVSxJQUFJO21CQUM3QjtBQUFBLGVBQ0osV0FBVyxRQUFRLFlBQVksSUFBSTttQkFDL0I7QUFBQTtXQUdSO0FBQUE7U0FaTzs4QkFlbUIsSUFBbUM7UUFDaEUsT0FBTyxPQUFNLFVBQVU7V0FDckIsR0FBRSxXQUFXLEtBQUs7QUFBQTtXQUVqQixJQUFJLEtBQUssSUFBRztBQUFBO1NBSkw7OEJBT21CLElBQW1DO1VBQzlELElBQUksSUFBSSxLQUFLLG1CQUFtQjtXQUMvQixJQUFJLEtBQUssRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLFdBQVc7QUFBQTtTQUY5Qzt5QkFLYyxJQUFtQztVQUN6RCxJQUFJLElBQUksS0FBSyxtQkFBbUI7VUFFaEMsUUFBTyxFQUFFO1VBQ1QsU0FBUSxFQUFFLGFBQWE7VUFDdkIsUUFBTyxFQUFFO1dBRVIsR0FBRyxTQUFRLFVBQVM7QUFBQTtTQVBiO3lCQVVjLElBQW1DO1VBQ3pELElBQUksSUFBSSxLQUFLLG1CQUFtQjtVQUVoQyxTQUFRLEVBQUU7VUFDVixPQUFPLEVBQUU7VUFFVCxXQUFXLFNBQVEsS0FBSyxNQUFNLFNBQVE7VUFDdEMsVUFBVSxPQUFPLEtBQUssTUFBTSxPQUFPO1dBRWxDLEdBQUcsWUFBWTtBQUFBO1NBVFI7NkJBYWtCLElBQW1DO1VBQzdELElBQUksSUFBSSxLQUFLLG1CQUFtQjtVQUVoQyxRQUFPLEVBQUU7VUFDVCxTQUFRLEVBQUUsYUFBYTtVQUN2QixRQUFPLEVBQUU7VUFDVCxTQUFRLEVBQUU7VUFDVixPQUFPLEVBQUU7VUFHVCxXQUFXLFNBQVEsS0FBSyxNQUFNLFNBQVE7VUFDdEMsVUFBVSxRQUFPLEtBQUssTUFBTSxRQUFPO1VBQ25DLFdBQVcsU0FBUSxLQUFLLE1BQU0sU0FBUTtVQUN0QyxVQUFVLE9BQU8sS0FBSyxNQUFNLE9BQU87VUFFbkMsVUFBVTtXQUVULEdBQUcsU0FBUSxZQUFZLFdBQVcsWUFBWSxXQUFXO0FBQUE7U0FqQmxEO2tCQW9CVSxNQUFnQjtXQUNqQyxNQUFNLEtBQUssSUFBSSxJQUFJO0FBQUE7U0FEWjs4QkFJMkMsTUFBZ0I7VUFDbkUsUUFBUSxJQUFJO1VBQ1osU0FBUztlQUVKLEtBQUssTUFBTTtVQUNoQixDQUFDLE1BQU0sSUFBSSxFQUFFLEtBQUs7Y0FDZCxJQUFJLEVBQUU7ZUFDTCxLQUFLO0FBQUE7QUFBQTtXQUlUO0FBQUE7U0FYTztxQkFjUyxLQUFrQixPQUFlO1FBQ3BELFFBQXVCO1dBRXBCLE1BQU07VUFDUCxPQUFPO3FCQUNJO2dCQUNMLFdBQVcsS0FBSTtBQUFBLGFBQ2xCO2dCQUNHLFdBQVcsS0FBSTtBQUFBO0FBQUE7QUFBQTtTQVJiO29CQWFTLEtBQWtCLE9BQWU7UUFDcEQsUUFBUTtXQUVMLE1BQU07VUFDUCxDQUFDLE9BQU87ZUFDSDtBQUFBO2NBRUQ7aUJBQ0csTUFBTTs7Z0JBRVA7QUFBQSxTQUNQO0FBQUE7QUFBQTtTQVhTO3lDQWU4QixRQUEwQjtVQUNoRSxTQUFTO1VBQ1QsUUFBTyxPQUFPLEtBQUssUUFBUTtlQUV0QixPQUFPLE9BQU07WUFDaEIsTUFBTSxPQUFPO1VBQ2YsS0FBSztZQUNILE9BQU8sUUFBUSxVQUFVO2lCQUNwQixLQUFLLEdBQUcsOEJBQThCLEtBQUssTUFBTTtBQUFBLGVBQ25EO2lCQUNFLEtBQUssR0FBRyxPQUFPO0FBQUE7QUFBQTtBQUFBO1dBS3JCLE9BQU8sS0FBSztBQUFBO1NBZkw7eUNBa0I4QixjQUFnQztVQUN0RSxTQUFtQjtVQUNuQixTQUFTLGFBQWEsTUFBTTtlQUV2QixNQUFLLFFBQVE7WUFDaEIsQ0FBQyxLQUFLLE9BQU8sR0FBRSxNQUFNO1VBQ3ZCLE9BQU8sS0FBSztlQUNQLE9BQU87QUFBQTtBQUFBO1dBSVg7QUFBQTtTQVhPO2dDQWNxQixRQUE0QjtRQUMzRCxDQUFDLFFBQVE7YUFDSjtBQUFBO1VBR0gsY0FBd0I7VUFDeEIsUUFBTyxPQUFPLEtBQUssUUFBUTtlQUV0QixPQUFPLE9BQU07WUFDaEIsTUFBTSxPQUFPO1VBQ2YsT0FBTyxRQUFRLFVBQVU7Y0FDckIsT0FBTyxxQkFBcUIsS0FBSyxNQUFNLEtBQUssVUFBVTtZQUN4RCxRQUFRLE9BQU8sS0FBSyxNQUFNLFNBQVMsR0FBRztzQkFDNUIsT0FBTztBQUFBO0FBQUEsYUFFaEI7WUFDRCxLQUFLO3NCQUNLLE9BQU87QUFBQTtBQUFBO0FBQUE7V0FLbEI7QUFBQTtTQXRCTztxQ0F5QjBCLE1BQWM7UUFDbEQsVUFBVSxhQUFhLFVBQVUsVUFBVSxXQUFXO1VBQ3BEO2NBQ0ksVUFBVSxVQUFVLFVBQVU7QUFBQSxlQUM3QjtnQkFDQyxLQUFLLDZCQUE2QjtBQUFBO0FBQUEsV0FFdkM7Y0FDRyxLQUFLO0FBQUE7QUFBQTtTQVJLO3dCQVlPLEtBQXVEO1dBQzNFLElBQUksUUFBUSxDQUFDLFlBQVk7WUFDeEIsUUFBUSxJQUFJO1lBRVosU0FBUyxNQUFNO2NBQ2IsRUFBQyxPQUFPLG9CQUFVO1lBRXBCLFFBQVEsS0FBSyxVQUFTLEdBQUc7a0JBQ25CLEVBQUMsT0FBTztBQUFBLGVBQ1g7a0JBQ0csRUFBQyxPQUFPLEdBQUcsUUFBUTtBQUFBO0FBQUE7WUFJekIsVUFBVSxNQUFNO2dCQUNaLEVBQUMsT0FBTyxHQUFHLFFBQVE7QUFBQTtZQUd2QixZQUFZO1lBQ1osTUFBTTtlQUNILEtBQUssWUFBWTtZQUNwQjtBQUFBO0FBQUE7U0FyQk07R0E5TFI7QUF3TlYsY0FBZTttQkNoTFMsT0FBYyxRQUF3QjtVQUNwRCxPQUFPO0FBQUEsU0FDUixjQUFjO1lBQ1gsU0FBU0MsUUFBTSxtQkFDbkIsT0FBTyxRQUFRLE9BQU8sS0FDcEIsQ0FBQyxHQUFHLE1BQU1BLFFBQU0sbUJBQW1CLEVBQUUsU0FBU0EsUUFBTSxtQkFBbUIsRUFBRTthQU10RSxpQ0FDRixRQURFO0FBQUEsUUFFTCxRQUFRLENBQUMsR0FBRztBQUFBO0FBQUE7QUFBQSxTQUdYLFlBQVk7YUFDUixpQ0FDRixRQURFO0FBQUEsUUFFTCxNQUFNLE9BQU8sUUFBUTtBQUFBO0FBQUE7QUFBQSxTQUdwQixnQkFBZ0I7WUFDYixTQUFTQSxRQUFNLG1CQUNuQixDQUFDLE9BQU8sUUFBUSxPQUFPLEdBQUcsTUFBTTthQUczQixpQ0FDRixRQURFO0FBQUEsUUFFTDtBQUFBO0FBQUE7QUFBQSxTQUdDLHNCQUFzQjthQUNsQixpQ0FDRixRQURFO0FBQUEsUUFFTCxRQUFRLENBQUMsR0FBRyxNQUFNLFFBQVEsT0FBTyxDQUFDLFVBQVUsTUFBTSxPQUFPLE9BQU8sUUFBUTtBQUFBO0FBQUE7QUFBQSxTQUd2RSxjQUFjO1lBQ1gsU0FBUyxNQUFNLE9BQU8sSUFBSSxDQUFDLE9BQU07WUFDakMsR0FBRSxPQUFPLE9BQU8sUUFBUSxJQUFJO2lCQUN2QixrQ0FDRixLQUNBLE9BQU87QUFBQSxlQUVQO2lCQUNFO0FBQUE7QUFBQTthQUlKLGlDQUNGLFFBREU7QUFBQSxRQUVMO0FBQUE7QUFBQTtBQUFBLGFBR0s7YUFDQTtBQUFBO0FBQUE7QUFBQTtNQUtBRixpQkFBc0I7QUFBQSxFQUNqQyxRQUFRO0FBQUEsRUFDUixNQUFNO0FBQUE7O0FDdkdSLE9BQU8sZUFBZUcsUUFBUyxjQUFjLEVBQUUsT0FBTztBQUV0RCxJQUFJLFdBQVduQztBQUVmLE1BQU0sNEJBQTRCO0FBQ2xDLE1BQU0sNkJBQTZCO0FBQ25DLE1BQU0sOEJBQThCO0FBQ3BDLE1BQU0sZ0NBQWdDO0FBQ3RDLE1BQU0sNkJBQTZCO0FBRW5DLHdDQUF3QyxhQUFhOztBQUVqRCxRQUFNLGdCQUFnQixPQUFPLElBQUksUUFBUSxVQUFVO0FBQ25ELFNBQU8saUJBQWlCLDJCQUFjLGFBQWQsbUJBQXlCLGlCQUF6QixtQkFBdUM7QUFBQTtBQU1uRSxnQ0FBZ0M7O0FBQzVCLE1BQUk7QUFFQSxVQUFNLEVBQUUsaUJBQWlCLFlBQVksT0FBTztBQUM1QyxRQUFJLCtCQUErQixVQUFVO0FBQ3pDLFlBQU0sRUFBRSxpQkFBUSxpQkFBUSx3QkFBYSxxQkFBUSxVQUFVLHNCQUFsQixtQkFBcUMsYUFBckMsbUJBQStDLFVBQVM7QUFDN0YsYUFBTztBQUFBLFFBQ0gsUUFBUSxXQUFVO0FBQUEsUUFDbEIsUUFBUSxvQ0FBUSxXQUFVO0FBQUEsUUFDMUIsVUFBVSx3Q0FBVSxXQUFVO0FBQUE7QUFBQTtBQUd0QyxVQUFNLEVBQUUsUUFBUSxRQUFRLGFBQWEsNkJBQWdCLGNBQWMsbUJBQTlCLG1CQUE4QyxhQUE5QyxtQkFBd0QsWUFBVztBQUN4RyxXQUFPO0FBQUEsTUFDSCxRQUFRLFVBQVU7QUFBQSxNQUNsQixRQUFRLGtDQUFRLFdBQVU7QUFBQSxNQUMxQixVQUFVLHNDQUFVLFdBQVU7QUFBQTtBQUFBLFdBRy9CLEtBQVA7QUFDSSxZQUFRLEtBQUssd0NBQXdDO0FBQUE7QUFBQTtBQU83RCxpQ0FBaUM7O0FBQzdCLE1BQUk7QUFFQSxVQUFNLGdCQUFnQixPQUFPLElBQUk7QUFDakMsVUFBTSxtQkFBbUIsb0JBQWMsVUFBVSxnQkFBeEIsbUJBQXFDO0FBQzlELFVBQU0sd0JBQXdCLDBCQUFjLFVBQVUsc0JBQXhCLG1CQUEyQyxhQUEzQyxtQkFBcUQ7QUFDbkYsUUFBSSwrQkFBK0IsV0FBVztBQUMxQyxhQUFPO0FBQUEsUUFDSCxRQUFRLHNCQUFzQixVQUFVO0FBQUEsUUFDeEMsUUFBUSw2QkFBc0IsV0FBdEIsbUJBQThCLFdBQVU7QUFBQSxRQUNoRCxVQUFVLDZCQUFzQixhQUF0QixtQkFBZ0MsV0FBVTtBQUFBO0FBQUE7QUFHNUQsVUFBTSxXQUFXLG9CQUFvQjtBQUNyQyxXQUFPO0FBQUEsTUFDSCxRQUFRLFNBQVMsb0JBQW9CO0FBQUEsTUFDckMsUUFBUSxnQkFBUyxxQkFBVCxtQkFBMkIsV0FBVTtBQUFBLE1BQzdDLFVBQVUsZ0JBQVMsdUJBQVQsbUJBQTZCLFdBQVU7QUFBQTtBQUFBLFdBR2xELEtBQVA7QUFDSSxZQUFRLEtBQUsseUNBQXlDO0FBQUE7QUFBQTtBQU85RCxrQ0FBa0M7O0FBRTlCLFFBQU0sZ0JBQWdCLE9BQU8sSUFBSTtBQUNqQyxNQUFJO0FBQ0EsVUFBTSxXQUFZLCtCQUErQixjQUM3QywyQkFBYyxVQUFVLHNCQUF4QixtQkFBMkMsYUFBM0MsbUJBQXFELFlBQ3JEO0FBQ0osV0FBTztBQUFBLE1BQ0gsUUFBUSxTQUFTLFVBQVU7QUFBQSxNQUMzQixRQUFRLGdCQUFTLFdBQVQsbUJBQWlCLFdBQVU7QUFBQSxNQUNuQyxVQUFVLGdCQUFTLGFBQVQsbUJBQW1CLFdBQVU7QUFBQTtBQUFBLFdBR3hDLEtBQVA7QUFDSSxZQUFRLEtBQUssMENBQTBDO0FBQUE7QUFBQTtBQU8vRCxvQ0FBb0M7O0FBRWhDLFFBQU0sZ0JBQWdCLE9BQU8sSUFBSTtBQUNqQyxNQUFJO0FBQ0EsVUFBTSxXQUFZLCtCQUErQixnQkFDN0MsMkJBQWMsVUFBVSxzQkFBeEIsbUJBQTJDLGFBQTNDLG1CQUFxRCxjQUNyRDtBQUNKLFdBQU87QUFBQSxNQUNILFFBQVEsU0FBUyxVQUFVO0FBQUEsTUFDM0IsUUFBUSxnQkFBUyxXQUFULG1CQUFpQixXQUFVO0FBQUEsTUFDbkMsVUFBVSxnQkFBUyxhQUFULG1CQUFtQixXQUFVO0FBQUE7QUFBQSxXQUd4QyxLQUFQO0FBQ0ksWUFBUSxLQUFLLDRDQUE0QztBQUFBO0FBQUE7QUFPakUsaUNBQWlDOztBQUU3QixRQUFNLGdCQUFnQixPQUFPLElBQUk7QUFDakMsTUFBSTtBQUNBLFVBQU0sV0FBWSwrQkFBK0IsYUFDN0MsMkJBQWMsVUFBVSxzQkFBeEIsbUJBQTJDLGFBQTNDLG1CQUFxRCxXQUNyRDtBQUNKLFdBQU87QUFBQSxNQUNILFFBQVEsU0FBUyxVQUFVO0FBQUEsTUFDM0IsUUFBUSxnQkFBUyxXQUFULG1CQUFpQixXQUFVO0FBQUEsTUFDbkMsVUFBVSxnQkFBUyxhQUFULG1CQUFtQixXQUFVO0FBQUE7QUFBQSxXQUd4QyxLQUFQO0FBQ0ksWUFBUSxLQUFLLHlDQUF5QztBQUFBO0FBQUE7QUFLOUQsaUJBQWlCLGNBQWM7QUFFM0IsTUFBSSxRQUFRO0FBQ1osV0FBUyxJQUFJLEdBQUcsS0FBSSxhQUFhLFFBQVEsSUFBSSxJQUFHLEtBQUs7QUFDakQsWUFBUSxNQUFNLE9BQU8sYUFBYSxHQUFHLE1BQU07QUFBQTtBQUcvQyxRQUFNLFdBQVc7QUFDakIsV0FBUyxJQUFJLEdBQUcsS0FBSSxNQUFNLFFBQVEsSUFBSSxJQUFHLEtBQUs7QUFDMUMsVUFBTSxPQUFPLE1BQU07QUFHbkIsUUFBSSxDQUFDLFFBQVEsU0FBUztBQUNsQjtBQUFBO0FBR0EsZUFBUyxLQUFLO0FBQUE7QUFHdEIsTUFBSSxNQUFNLE9BQU87QUFDYixhQUFTLFFBQVE7QUFFckIsU0FBTyxTQUFTLEtBQUs7QUFBQTtBQUV6QixrQkFBa0IsVUFBVTtBQUN4QixNQUFJLE9BQU8sU0FBUyxVQUFVLFNBQVMsWUFBWSxPQUFPO0FBQzFELE1BQUksS0FBSyxZQUFZLFFBQVE7QUFDekIsV0FBTyxLQUFLLFVBQVUsR0FBRyxLQUFLLFlBQVk7QUFDOUMsU0FBTztBQUFBO0FBRVgsa0NBQWtDLE1BQU07QUFDcEMsUUFBTSxPQUFPLEtBQUssUUFBUSxPQUFPLEtBQUssTUFBTTtBQUM1QyxPQUFLO0FBQ0wsTUFBSSxLQUFLLFFBQVE7QUFDYixVQUFNLE1BQU0sS0FBSyxHQUFHO0FBQ3BCLFFBQUksQ0FBQyxPQUFPLElBQUksTUFBTSxzQkFBc0IsTUFBTTtBQUM5QyxZQUFNLE9BQU8sSUFBSSxNQUFNLGFBQWE7QUFBQTtBQUFBO0FBQUE7QUFJaEQsMkJBQTJCLFdBQVcsVUFBVTtBQUM1QyxNQUFJLENBQUMsU0FBUyxTQUFTLFFBQVE7QUFDM0IsZ0JBQVk7QUFBQTtBQUVoQixRQUFNLE9BQU8sU0FBUyxjQUFjLEtBQUssV0FBVztBQUNwRCxRQUFNLG1CQUFtQjtBQUN6QixTQUFPO0FBQUE7QUFFWCwrQkFBK0IsVUFBVTtBQUNyQyxRQUFNLEVBQUUsZUFBZSxVQUFVLE9BQU87QUFDeEMsUUFBTSxlQUFlLFNBQVMsY0FBYztBQUM1QyxNQUFJLGlCQUFpQixLQUFLO0FBQ3RCLFdBQU8sUUFBUSxRQUFRLENBQUMsSUFBSTtBQUFBO0FBRWhDLE1BQUk7QUFDQSxVQUFNLGVBQWUsY0FBYyxxQkFBcUIsY0FBYztBQUN0RSxVQUFNLFdBQVcsTUFBTSxNQUFNLFdBQVc7QUFFeEMsVUFBTSxZQUFZLE9BQU8sSUFBSSxZQUFZLEtBQUs7QUFDOUMsV0FBTyxDQUFDLFVBQVU7QUFBQSxXQUVmLEtBQVA7QUFDSSxZQUFRLE1BQU0sMkNBQTJDLGlCQUFpQjtBQUMxRSxRQUFJLFNBQVMsT0FBTztBQUNwQixXQUFPLENBQUMsSUFBSTtBQUFBO0FBQUE7QUFRcEIsb0JBQW9CLE9BQU0sY0FBYyxPQUFPO0FBQzNDLFFBQU0sS0FBSyxNQUFLLFFBQVEsUUFBUSxhQUFhO0FBQzdDLFNBQU8sR0FBRyxlQUFlO0FBQUE7QUFFN0IsaUNBQWlDLFFBQVE7QUFDckMsU0FBTyxPQUFPLFFBQVEsZUFBZTtBQUFBO0FBT3pDLDJCQUEyQixRQUFRLGFBQWE7QUFDNUMsTUFBSSxnQkFBZ0IsUUFBUTtBQUN4QixVQUFNLGNBQWMsd0JBQXdCO0FBQzVDLFdBQVEsVUFBVSxLQUFLLGdCQUNsQixVQUFTLEtBQUssZ0JBQWdCLFNBQVMsS0FBSztBQUFBO0FBRXJELFNBQU87QUFBQTtBQUVYLHlCQUF5QixNQUFNLGFBQWE7QUFDeEMsU0FBTyxvQkFBb0IsS0FBSyxVQUFVO0FBQUE7QUFFOUMseUJBQXlCLE1BQU0sYUFBYTtBQUN4QyxTQUFPLG9CQUFvQixTQUFTLE9BQU87QUFBQTtBQUUvQyw2QkFBNkIsVUFBVSxhQUFhO0FBQ2hELFFBQU0sY0FBYztBQUFBLElBQ2hCLEtBQUs7QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLE9BQU87QUFBQSxJQUNQLFNBQVM7QUFBQSxJQUNULE1BQU07QUFBQTtBQUVWLFFBQU0sU0FBUyxZQUFZLGVBQWUsT0FBTyxNQUFNLEtBQUs7QUFDNUQsUUFBTSxXQUFXLE9BQU8sT0FBTyxVQUFVLFFBQVE7QUFDakQsTUFBSSxDQUFDLFNBQVMsV0FBVztBQUNyQixXQUFPO0FBQUE7QUFFWCxNQUFJLGtCQUFrQixRQUFRLGNBQWM7QUFDeEMsUUFBSSxnQkFBZ0IsUUFBUTtBQUN4QixZQUFNLGNBQWMsd0JBQXdCO0FBQzVDLFVBQUksVUFBVSxLQUFLLGNBQWM7QUFDN0IsZUFBTyxPQUFPLE9BQU8sVUFFckIsT0FBTyxRQUFRLFdBQVcsSUFBSSxRQUFRLFdBQVcsS0FBSztBQUFBO0FBQUE7QUFBQTtBQUlsRSxTQUFPO0FBQUE7QUFHWCw2Q0FBMkMsTUFBTTtBQUFBO0FBU2pELCtCQUErQixPQUFNO0FBQ2pDLFFBQU0sTUFBTSxPQUFPO0FBQ25CLFFBQU0sRUFBRSxVQUFVO0FBQ2xCLFFBQU0sVUFBUyxPQUFPO0FBQ3RCLFFBQU0sRUFBRSxVQUFVLFFBQVEsV0FBVztBQUNyQyxRQUFNLENBQUMsa0JBQWtCLGFBQWEsTUFBTSxnQkFBZ0I7QUFDNUQsUUFBTSxXQUFXLE1BQUssT0FBTztBQUM3QixRQUFNLGlCQUFpQixNQUFNLFlBQVksUUFBUTtBQUNqRCxNQUFJO0FBQ0EsVUFBTSxjQUFjLE1BQU0sTUFBTSxPQUFPLGdCQUFnQixpQkFDbEQsUUFBUSxvQkFBb0IsVUFDNUIsUUFBUSxvQkFBb0IsVUFBUyxPQUFPLFVBQzVDLFFBQVEscUJBQXFCLFVBQzdCLFFBQVEsNERBQTRELENBQUMsR0FBRyxhQUFhLE1BQU0sV0FBVyxNQUFNLGlCQUFpQjtBQUM5SCxZQUFNLE1BQU07QUFDWixZQUFNLGNBQWMsTUFBSyxRQUFRLElBQUk7QUFBQSxRQUNqQyxNQUFNLElBQUksSUFBSTtBQUFBLFFBQ2QsUUFBUSxJQUFJLElBQUk7QUFBQSxRQUNoQixRQUFRLElBQUksSUFBSTtBQUFBO0FBRXBCLFVBQUksTUFBTTtBQUNOLG9CQUFZLElBQUksU0FBUyxXQUFXLEtBQUs7QUFBQTtBQUU3QyxVQUFJLGNBQWM7QUFDZCxlQUFPLFlBQVksT0FBTyxhQUFhLFVBQVUsR0FBRztBQUFBO0FBRXhELGFBQU8sWUFBWSxPQUFPO0FBQUEsT0FFekIsUUFBUSx5QkFBeUIsTUFBSyxRQUFRLFNBQVMsR0FBRyxPQUFPLE9BQU8sU0FDeEUsUUFBUSx3QkFBd0IsTUFBSyxRQUFRLElBQUksR0FBRyxLQUFLLE9BQU87QUFFckUsUUFBSSxZQUFZLEtBQUssYUFBYTtBQUNsQyxXQUFPO0FBQUEsV0FFSixLQUFQO0FBQ0ksWUFBUSxNQUFNLDJCQUEyQixtQkFBbUI7QUFDNUQsUUFBSSxTQUFTLE9BQU87QUFBQTtBQUFBO0FBRzVCLHNCQUFzQixPQUFNLFlBQVk7O0FBQ3BDLFNBQU8saUJBQVcsV0FBVyxPQUFNLFlBQTVCLFlBQXVDO0FBQUE7QUFFbEQsNEJBQTRCO0FBSXhCLFFBQU0sRUFBRSxVQUFVLE9BQU87QUFDekIsUUFBTSxFQUFFLFdBQVc7QUFDbkIsUUFBTSxtQkFBbUIsTUFBTSxzQkFBc0IsU0FBUyxjQUFjO0FBQzVFLE1BQUksQ0FBQyxrQkFBa0I7QUFDbkIsVUFBTSxJQUFJb0MsK0JBQTZCO0FBQUE7QUFFM0MsUUFBTSxhQUFhO0FBQ25CLFdBQVMsTUFBTSxnQkFBZ0Isa0JBQWtCLENBQUMsU0FBUztBQUN2RCxRQUFJLGdCQUFnQixTQUFTLE9BQU87QUFDaEMsWUFBTSxRQUFPLGdCQUFnQixNQUFNO0FBQ25DLFVBQUksT0FBTTtBQUNOLGNBQU0sYUFBYSxXQUFXLE9BQU07QUFDcEMsbUJBQVcsY0FBYztBQUFBO0FBQUE7QUFBQTtBQUlyQyxTQUFPO0FBQUE7QUFHWCw0Q0FBNEMsTUFBTTtBQUFBO0FBRWxELHlCQUF5QjtBQUNyQixRQUFNLEVBQUUsb0JBQVc7QUFFbkIsTUFBSSxZQUFZLFFBQU8sYUFBYSxNQUFNO0FBQzFDLFFBQU0sYUFBYTtBQUFBLElBQ2Y7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQTtBQUVKLFNBQU8sV0FBVztBQUNkLGVBQVcsS0FBSyxXQUFXO0FBQzNCO0FBQUE7QUFFSixTQUFPO0FBQUE7QUFFWCxvQ0FBb0MsZUFBZTtBQUMvQyxTQUFPLGdCQUFnQixRQUFRLGNBQWM7QUFBQTtBQUVqRCxnQ0FBZ0MsT0FBTTtBQUNsQyxRQUFNLEVBQUUsVUFBVSxPQUFPO0FBQ3pCLFFBQU0sRUFBRSxVQUFVLFFBQVEsV0FBVztBQUNyQyxRQUFNLENBQUMsa0JBQWtCLGFBQWEsTUFBTSxnQkFBZ0I7QUFDNUQsUUFBTSxXQUFXLE1BQUssT0FBTztBQUM3QixRQUFNLGlCQUFpQixNQUFNLFlBQVksUUFBUTtBQUNqRCxNQUFJO0FBQ0EsVUFBTSxjQUFjLE1BQU0sTUFBTSxPQUFPLGdCQUFnQixpQkFDbEQsUUFBUSw0REFBNEQsQ0FBQyxHQUFHLGFBQWEsTUFBTSxXQUFXLE1BQU0saUJBQWlCO0FBQzlILFlBQU0sTUFBTSxPQUFPO0FBQ25CLFlBQU0sY0FBYyxNQUFLLFFBQVEsSUFBSTtBQUFBLFFBQ2pDLE1BQU0sSUFBSSxJQUFJO0FBQUEsUUFDZCxRQUFRLElBQUksSUFBSTtBQUFBLFFBQ2hCLFFBQVEsSUFBSSxJQUFJO0FBQUE7QUFFcEIsVUFBSSxNQUFNO0FBQ04sb0JBQVksSUFBSSxTQUFTLFdBQVcsS0FBSztBQUFBO0FBRTdDLFVBQUksY0FBYztBQUNkLGVBQU8sWUFBWSxPQUFPLGFBQWEsVUFBVSxHQUFHO0FBQUE7QUFFeEQsYUFBTyxZQUFZLE9BQU87QUFBQSxPQUV6QixRQUFRLHFCQUFxQixVQUM3QixRQUFRLG9CQUFvQixPQUFPLFNBQVMsT0FBTyxVQUNuRCxRQUFRLGdGQUFnRixDQUFDLEdBQUcsV0FBVyxpQkFBaUI7QUFDekgsWUFBTSxPQUFNLDJCQUEyQjtBQUN2QyxhQUFPLE1BQUssUUFBUSxNQUFLLE9BQU8sYUFBYTtBQUFBO0FBR2pELFdBQU8sSUFBSSxZQUFZLEtBQUssYUFBYTtBQUN6QyxXQUFPO0FBQUEsV0FFSixLQUFQO0FBQ0ksWUFBUSxNQUFNLDJCQUEyQixtQkFBbUI7QUFDNUQsUUFBSSxTQUFTLE9BQU87QUFBQTtBQUFBO0FBRzVCLHVCQUF1QixPQUFNLGFBQWE7O0FBQ3RDLFNBQU8sa0JBQVksV0FBVyxPQUFNLGFBQTdCLFlBQXlDO0FBQUE7QUFFcEQsNkJBQTZCO0FBQ3pCLFFBQU0sY0FBYztBQUNwQixNQUFJLENBQUMsaUNBQWlDO0FBQ2xDLFdBQU87QUFBQTtBQUVYLFFBQU0sRUFBRSxVQUFVLE9BQU87QUFDekIsUUFBTSxFQUFFLFdBQVc7QUFDbkIsUUFBTSxvQkFBb0IsTUFBTSxzQkFBc0IsU0FBUyxjQUFjO0FBQzdFLE1BQUksQ0FBQyxtQkFBbUI7QUFDcEIsVUFBTSxJQUFJLDhCQUE4QjtBQUFBO0FBRTVDLFdBQVMsTUFBTSxnQkFBZ0IsbUJBQW1CLENBQUMsU0FBUztBQUN4RCxRQUFJLGdCQUFnQixTQUFTLE9BQU87QUFDaEMsWUFBTSxRQUFPLGdCQUFnQixNQUFNO0FBQ25DLFVBQUksT0FBTTtBQUNOLGNBQU0sYUFBYSxXQUFXLE9BQU07QUFDcEMsb0JBQVksY0FBYztBQUFBO0FBQUE7QUFBQTtBQUl0QyxTQUFPO0FBQUE7QUFHWCw2Q0FBNkMsTUFBTTtBQUFBO0FBU25ELGlDQUFpQyxPQUFNO0FBQ25DLFFBQU0sRUFBRSxVQUFVLE9BQU87QUFDekIsUUFBTSxFQUFFLFVBQVUsUUFBUSxXQUFXO0FBQ3JDLFFBQU0sQ0FBQyxrQkFBa0IsYUFBYSxNQUFNLGdCQUFnQjtBQUM1RCxRQUFNLFdBQVcsTUFBSyxPQUFPO0FBQzdCLFFBQU0saUJBQWlCLE1BQU0sWUFBWSxRQUFRO0FBQ2pELE1BQUk7QUFDQSxVQUFNLGNBQWMsTUFBTSxNQUFNLE9BQU8sZ0JBQWdCLGlCQUNsRCxRQUFRLDREQUE0RCxDQUFDLEdBQUcsYUFBYSxNQUFNLFdBQVcsTUFBTSxpQkFBaUI7QUFDOUgsWUFBTSxNQUFNLE9BQU87QUFDbkIsWUFBTSxjQUFjLE1BQUssUUFBUSxJQUFJO0FBQUEsUUFDakMsTUFBTSxJQUFJLElBQUk7QUFBQSxRQUNkLFFBQVEsSUFBSSxJQUFJO0FBQUEsUUFDaEIsUUFBUSxJQUFJLElBQUk7QUFBQTtBQUVwQixVQUFJLE1BQU07QUFDTixvQkFBWSxJQUFJLFNBQVMsV0FBVyxLQUFLO0FBQUE7QUFFN0MsVUFBSSxjQUFjO0FBQ2QsZUFBTyxZQUFZLE9BQU8sYUFBYSxVQUFVLEdBQUc7QUFBQTtBQUV4RCxhQUFPLFlBQVksT0FBTztBQUFBLE9BRXpCLFFBQVEsb0JBQW9CLFVBQzVCLFFBQVEsb0JBQW9CLE9BQU8sU0FBUyxPQUFPLFVBQ25ELFFBQVEscUJBQXFCO0FBRWxDLFdBQU8sSUFBSSxZQUFZLEtBQUssYUFBYTtBQUN6QyxXQUFPO0FBQUEsV0FFSixLQUFQO0FBQ0ksWUFBUSxNQUFNLDJCQUEyQixtQkFBbUI7QUFDNUQsUUFBSSxTQUFTLE9BQU87QUFBQTtBQUFBO0FBRzVCLHdCQUF3QixPQUFNLGNBQWM7O0FBQ3hDLFNBQU8sbUJBQWEsV0FBVyxPQUFNLGNBQTlCLFlBQTJDO0FBQUE7QUFFdEQsOEJBQThCO0FBQzFCLFFBQU0sZUFBZTtBQUNyQixNQUFJLENBQUMsa0NBQWtDO0FBQ25DLFdBQU87QUFBQTtBQUVYLFFBQU0sRUFBRSxVQUFVLE9BQU87QUFDekIsUUFBTSxFQUFFLFdBQVc7QUFDbkIsUUFBTSxxQkFBcUIsTUFBTSxzQkFBc0IsU0FBUyxjQUFjO0FBQzlFLE1BQUksQ0FBQyxvQkFBb0I7QUFDckIsVUFBTSxJQUFJLCtCQUErQjtBQUFBO0FBRTdDLFdBQVMsTUFBTSxnQkFBZ0Isb0JBQW9CLENBQUMsU0FBUztBQUN6RCxRQUFJLGdCQUFnQixTQUFTLE9BQU87QUFDaEMsWUFBTSxRQUFPLGdCQUFnQixNQUFNO0FBQ25DLFVBQUksT0FBTTtBQUNOLGNBQU0sYUFBYSxXQUFXLE9BQU07QUFDcEMscUJBQWEsY0FBYztBQUFBO0FBQUE7QUFBQTtBQUl2QyxTQUFPO0FBQUE7QUFHWCwrQ0FBK0MsTUFBTTtBQUFBO0FBU3JELG1DQUFtQyxPQUFNO0FBQ3JDLFFBQU0sRUFBRSxVQUFVLE9BQU87QUFDekIsUUFBTSxFQUFFLFVBQVUsUUFBUSxXQUFXO0FBQ3JDLFFBQU0sQ0FBQyxrQkFBa0IsYUFBYSxNQUFNLGdCQUFnQjtBQUM1RCxRQUFNLFdBQVcsTUFBSyxPQUFPO0FBQzdCLFFBQU0saUJBQWlCLE1BQU0sWUFBWSxRQUFRO0FBQ2pELE1BQUk7QUFDQSxVQUFNLGNBQWMsTUFBTSxNQUFNLE9BQU8sZ0JBQWdCLGlCQUNsRCxRQUFRLDREQUE0RCxDQUFDLEdBQUcsYUFBYSxNQUFNLFdBQVcsTUFBTSxpQkFBaUI7QUFDOUgsWUFBTSxNQUFNLE9BQU87QUFDbkIsWUFBTSxjQUFjLE1BQUssUUFBUSxJQUFJO0FBQUEsUUFDakMsTUFBTSxJQUFJLElBQUk7QUFBQSxRQUNkLFFBQVEsSUFBSSxJQUFJO0FBQUEsUUFDaEIsUUFBUSxJQUFJLElBQUk7QUFBQTtBQUVwQixVQUFJLE1BQU07QUFDTixvQkFBWSxJQUFJLFNBQVMsV0FBVyxLQUFLO0FBQUE7QUFFN0MsVUFBSSxjQUFjO0FBQ2QsZUFBTyxZQUFZLE9BQU8sYUFBYSxVQUFVLEdBQUc7QUFBQTtBQUV4RCxhQUFPLFlBQVksT0FBTztBQUFBLE9BRXpCLFFBQVEsb0JBQW9CLFVBQzVCLFFBQVEsb0JBQW9CLE9BQU8sU0FBUyxPQUFPLFVBQ25ELFFBQVEscUJBQXFCO0FBRWxDLFdBQU8sSUFBSSxZQUFZLEtBQUssYUFBYTtBQUN6QyxXQUFPO0FBQUEsV0FFSixLQUFQO0FBQ0ksWUFBUSxNQUFNLDJCQUEyQixtQkFBbUI7QUFDNUQsUUFBSSxTQUFTLE9BQU87QUFBQTtBQUFBO0FBRzVCLDBCQUEwQixPQUFNLFdBQVc7O0FBQ3ZDLFNBQU8sZ0JBQVUsV0FBVyxPQUFNLGdCQUEzQixZQUEwQztBQUFBO0FBRXJELGdDQUFnQztBQUM1QixRQUFNLFlBQVk7QUFDbEIsTUFBSSxDQUFDLG9DQUFvQztBQUNyQyxXQUFPO0FBQUE7QUFFWCxRQUFNLEVBQUUsVUFBVSxPQUFPO0FBQ3pCLFFBQU0sRUFBRSxXQUFXO0FBQ25CLFFBQU0sa0JBQWtCLE1BQU0sc0JBQXNCLFNBQVMsY0FBYztBQUMzRSxNQUFJLENBQUMsaUJBQWlCO0FBQ2xCLFVBQU0sSUFBSSxpQ0FBaUM7QUFBQTtBQUUvQyxXQUFTLE1BQU0sZ0JBQWdCLGlCQUFpQixDQUFDLFNBQVM7QUFDdEQsUUFBSSxnQkFBZ0IsU0FBUyxPQUFPO0FBQ2hDLFlBQU0sUUFBTyxnQkFBZ0IsTUFBTTtBQUNuQyxVQUFJLE9BQU07QUFDTixjQUFNLGFBQWEsV0FBVyxPQUFNO0FBQ3BDLGtCQUFVLGNBQWM7QUFBQTtBQUFBO0FBQUE7QUFJcEMsU0FBTztBQUFBO0FBR1gsNENBQTRDLE1BQU07QUFBQTtBQVNsRCxnQ0FBZ0MsT0FBTTtBQUNsQyxRQUFNLEVBQUUsVUFBVSxPQUFPO0FBQ3pCLFFBQU0sRUFBRSxVQUFVLFFBQVEsV0FBVztBQUNyQyxRQUFNLENBQUMsa0JBQWtCLGFBQWEsTUFBTSxnQkFBZ0I7QUFDNUQsUUFBTSxXQUFXLE1BQUssT0FBTztBQUM3QixRQUFNLGlCQUFpQixNQUFNLFlBQVksUUFBUTtBQUNqRCxNQUFJO0FBQ0EsVUFBTSxjQUFjLE1BQU0sTUFBTSxPQUFPLGdCQUFnQixpQkFDbEQsUUFBUSw0REFBNEQsQ0FBQyxHQUFHLGFBQWEsTUFBTSxXQUFXLE1BQU0saUJBQWlCO0FBQzlILFlBQU0sTUFBTSxPQUFPO0FBQ25CLFlBQU0sY0FBYyxNQUFLLFFBQVEsSUFBSTtBQUFBLFFBQ2pDLE1BQU0sSUFBSSxJQUFJO0FBQUEsUUFDZCxRQUFRLElBQUksSUFBSTtBQUFBLFFBQ2hCLFFBQVEsSUFBSSxJQUFJO0FBQUE7QUFFcEIsVUFBSSxNQUFNO0FBQ04sb0JBQVksSUFBSSxTQUFTLFdBQVcsS0FBSztBQUFBO0FBRTdDLFVBQUksY0FBYztBQUNkLGVBQU8sWUFBWSxPQUFPLGFBQWEsVUFBVSxHQUFHO0FBQUE7QUFFeEQsYUFBTyxZQUFZLE9BQU87QUFBQSxPQUV6QixRQUFRLG9CQUFvQixVQUM1QixRQUFRLG9CQUFvQixPQUFPLFNBQVMsT0FBTyxVQUNuRCxRQUFRLHFCQUFxQjtBQUVsQyxXQUFPLElBQUksWUFBWSxLQUFLLGFBQWE7QUFDekMsV0FBTztBQUFBLFdBRUosS0FBUDtBQUNJLFlBQVEsTUFBTSwyQkFBMkIsbUJBQW1CO0FBQzVELFFBQUksU0FBUyxPQUFPO0FBQUE7QUFBQTtBQUc1Qix1QkFBdUIsT0FBTSxhQUFhOztBQUN0QyxTQUFPLGtCQUFZLFdBQVcsT0FBTSxhQUE3QixZQUF5QztBQUFBO0FBRXBELDZCQUE2QjtBQUN6QixRQUFNLGNBQWM7QUFDcEIsTUFBSSxDQUFDLGlDQUFpQztBQUNsQyxXQUFPO0FBQUE7QUFFWCxRQUFNLEVBQUUsVUFBVSxPQUFPO0FBQ3pCLFFBQU0sRUFBRSxXQUFXO0FBQ25CLFFBQU0sb0JBQW9CLE1BQU0sc0JBQXNCLFNBQVMsY0FBYztBQUM3RSxNQUFJLENBQUMsbUJBQW1CO0FBQ3BCLFVBQU0sSUFBSSw4QkFBOEI7QUFBQTtBQUU1QyxXQUFTLE1BQU0sZ0JBQWdCLG1CQUFtQixDQUFDLFNBQVM7QUFDeEQsUUFBSSxnQkFBZ0IsU0FBUyxPQUFPO0FBQ2hDLFlBQU0sUUFBTyxnQkFBZ0IsTUFBTTtBQUNuQyxVQUFJLE9BQU07QUFDTixjQUFNLGFBQWEsV0FBVyxPQUFNO0FBQ3BDLG9CQUFZLGNBQWM7QUFBQTtBQUFBO0FBQUE7QUFJdEMsU0FBTztBQUFBO0FBR1gsd0NBQXdDOztBQUNwQyxRQUFNLEVBQUUsUUFBUTtBQUVoQixRQUFNLG1CQUFtQixJQUFJLGdCQUFnQixRQUFRO0FBQ3JELE1BQUksb0JBQW9CLGlCQUFpQixTQUFTO0FBQzlDLFdBQU87QUFBQTtBQUdYLFFBQU0sZ0JBQWdCLElBQUksUUFBUSxVQUFVO0FBQzVDLFNBQU8saUJBQWlCLDJCQUFjLGFBQWQsbUJBQXdCLFVBQXhCLG1CQUErQjtBQUFBO0FBTTNELHlDQUF5Qzs7QUFDckMsUUFBTSxFQUFFLFFBQVE7QUFFaEIsTUFBSSxJQUFJLFFBQVEsVUFBVSxhQUFhO0FBQ25DLFdBQU87QUFBQTtBQUdYLFFBQU0sZ0JBQWdCLElBQUksUUFBUSxVQUFVO0FBQzVDLFNBQU8saUJBQWlCLDJCQUFjLGFBQWQsbUJBQXdCLFdBQXhCLG1CQUFnQztBQUFBO0FBRTVELDBDQUEwQzs7QUFDdEMsUUFBTSxFQUFFLFFBQVE7QUFFaEIsUUFBTSxnQkFBZ0IsSUFBSSxRQUFRLFVBQVU7QUFDNUMsU0FBTyxpQkFBaUIsMkJBQWMsYUFBZCxtQkFBd0IsWUFBeEIsbUJBQWlDO0FBQUE7QUFFN0QsNENBQTRDOztBQUN4QyxRQUFNLEVBQUUsUUFBUTtBQUVoQixRQUFNLGdCQUFnQixJQUFJLFFBQVEsVUFBVTtBQUM1QyxTQUFPLGlCQUFpQiwyQkFBYyxhQUFkLG1CQUF3QixjQUF4QixtQkFBbUM7QUFBQTtBQUUvRCx5Q0FBeUM7O0FBQ3JDLFFBQU0sRUFBRSxRQUFRO0FBRWhCLFFBQU0sZ0JBQWdCLElBQUksUUFBUSxVQUFVO0FBQzVDLFNBQU8saUJBQWlCLDJCQUFjLGFBQWQsbUJBQXdCLFdBQXhCLG1CQUFnQztBQUFBO0FBRTVELGlDQUFpQyxhQUFhO0FBQzFDLFFBQU0sY0FBYztBQUFBLElBQ2hCLEtBQUs7QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLE9BQU87QUFBQSxJQUNQLFNBQVM7QUFBQSxJQUNULE1BQU07QUFBQSxJQUNSO0FBQ0YsU0FBTztBQUFBO0FBRVgsNEJBQTRCLGFBQWEsT0FBTTtBQUMzQyxRQUFNLFdBQVc7QUFBQSxJQUNiLEtBQUs7QUFBQSxJQUNMLE9BQU87QUFBQSxJQUNQLE1BQU07QUFBQTtBQUVWLFNBQU8sU0FBUyxhQUFhO0FBQUE7bUNBR0c7cUNBQ0U7dUNBQ0U7b0NBQ0g7b0NBQ0E7c0NBQ0U7d0NBQ0U7MENBQ0U7dUNBQ0g7dUNBQ0E7QUFDeEMsaURBQTBCOzJCQUNFOzRCQUNDOzZCQUNDOzBCQUNIOzBCQUNBO0FBQzNCLG1EQUEyQjs0QkFDRTs4QkFDRTsyQkFDSDsyQkFDQTtBQUM1QiwyQ0FBdUI7QUFDdkIsMkRBQStCO0FBQy9CLGlEQUEwQjt5QkFDQTtvQkFDTDt3QkFDSTtnQ0FDUTtpQ0FDQzswQkFDUDtrQ0FDUTt5QkFDVDt1QkFDRjsrQkFDUTt1QkFDUjsrQkFDUTtpQkMzckJSLE9BQWMsUUFBd0I7VUFDcEQsT0FBTztBQUFBLFNBQ1Isa0JBQWtCO1lBQ2YsYUFBYUM7YUFFWixpQ0FDRixRQURFO0FBQUEsUUFFTDtBQUFBO0FBQUE7QUFBQSxTQUdDLFdBQVc7YUFDUCxpQ0FDRixRQURFO0FBQUEsUUFFTCxLQUFLLE9BQU8sUUFBUTtBQUFBO0FBQUE7QUFBQSxhQUdmO2FBQ0E7QUFBQTtBQUFBO0FBQUE7TUFLQSxlQUFzQjtBQUFBLEVBQ2pDLFlBQVk7QUFBQSxFQUNaLEtBQUs7QUFBQTtBQ25DUCxNQUFNLFdBQVcsWUFDZjtBQUFBLEVBQ0UsYUFBYUM7QUFBQUEsRUFDYixlQUFlQztBQUFBQSxFQUNmLFlBQVlDO0FBQUFBLEVBQ1osaUJBQWlCQztBQUFBQSxHQUVuQixnQkFBMkM7QUFBQSxFQUN6QyxhQUFhQztBQUFBQSxFQUNiLGVBQWVDO0FBQUFBLEVBQ2YsWUFBWUM7QUFBQUEsRUFDWixpQkFBaUJDO0FBQUFBO0FDNUJyQixNQUFNLGFBQWFDLDBDQUFjLFNBQVM7QUNNMUMsd0JBQXdCO0FBQUEsRUFDZixXQUFXO1dBQ1QsU0FBUyxXQUFXO0FBQUE7QUFBQSxFQUd0QixPQUFPLEtBQVU7YUFDYixTQUFTO0FBQUEsTUFDaEIsTUFBTTtBQUFBLE1BQ04sU0FBUztBQUFBLFFBQ1A7QUFBQTtBQUFBO1dBR0c7QUFBQTtBQUFBLFFBR0kscUJBQXFCO1VBQzFCLGFBQWFUO2FBRVYsU0FBUztBQUFBLE1BQ2hCLE1BQU07QUFBQSxNQUNOLFNBQVM7QUFBQSxRQUNQO0FBQUE7QUFBQTtXQUdHO0FBQUE7QUFBQSxRQWNJLG9CQUFvQixPQUE4QjtVQUN2RCxFQUFDLGVBQWMsS0FBSztVQUNwQixZQUFZVSxlQUFhLE9BQU07V0FDOUI7QUFBQTtBQUFBO0FBSVgsTUFBTSxvQkFBb0IsSUFBSTtJQzdCYjtBQUFWLFVBQVUsVUFBVjtnQkFDZSxPQUEwQztVQUN0RCxPQUE2QjtlQUV4QixPQUFPLE9BQU07VUFDbEI7Y0FDSSxpQkFBaUIsYUFBYSxRQUFRO1lBQ3hDLG1CQUFtQixNQUFNO2dCQUNyQixNQUFNLEtBQUssTUFBTTtlQUNsQixPQUFPO0FBQUE7QUFBQSxlQUVQO2dCQUNDLE1BQU0sMEJBQTBCLEtBQUs7QUFBQTtBQUFBO1dBSTFDO0FBQUE7V0FmTztlQWtCSSxNQUE0QjtlQUNuQyxPQUFPLE1BQU07VUFDbEI7Y0FDSSxpQkFBaUIsS0FBSyxVQUFVLEtBQUs7cUJBQzlCLFFBQVEsS0FBSztBQUFBLGVBQ25CO2dCQUNDLE1BQU0sMkJBQTJCLEtBQUs7QUFBQTtBQUFBO0FBQUE7V0FOcEM7a0JBV08sT0FBb0I7ZUFDOUIsT0FBTyxPQUFNO1VBQ2xCO3FCQUNXLFdBQVc7QUFBQSxlQUNqQjtnQkFDQyxNQUFNLDZCQUE2QixLQUFLO0FBQUE7QUFBQTtBQUFBO1dBTHRDO3FDQVUwQjs7VUFDbEMsV0FBVyxTQUFTLGNBQWM7YUFDL0IsTUFBTSxVQUFVO2FBQ2hCLEtBQUssWUFBWTttQkFFakIscUNBQWUsYUFBYSxRQUFRLEtBQUssS0FBSyxNQUFNO2FBQ3BEO0FBQUE7V0FOSztHQXhDRDtBQ3JCakIseUJBQXlCO0FBQUEsRUFDdkIsY0FBYztBQWVQLG9DQUFXLE1BQU07YUFDZixTQUFTLFdBQVc7QUFBQTtBQUd0QiwwQ0FBaUIsQ0FBQyxnQkFBd0I7ZUFDdEMsU0FBUztBQUFBLFFBQ2hCLE1BQU07QUFBQSxRQUNOLFNBQVM7QUFBQSxVQUNQO0FBQUE7QUFBQTtBQUFBO0FBS0MsMENBQWlCLENBQUMsZ0JBQXdCO2VBQ3RDLFNBQVM7QUFBQSxRQUNoQixNQUFNO0FBQUEsUUFDTixTQUFTO0FBQUEsVUFDUDtBQUFBO0FBQUE7QUFBQTtBQUtDLDJDQUFrQixDQUFDLGlCQUEwQjtlQUN6QyxTQUFTO0FBQUEsUUFDaEIsTUFBTTtBQUFBLFFBQ04sU0FBUztBQUFBLFVBQ1A7QUFBQTtBQUFBO0FBQUE7QUFLQyx1REFBOEIsQ0FBQyw2QkFBc0M7ZUFDakUsU0FBUztBQUFBLFFBQ2hCLE1BQU07QUFBQSxRQUNOLFNBQVM7QUFBQSxVQUNQO0FBQUE7QUFBQTtBQUFBO0FBS0MseUNBQWdCLENBQUMsZUFBb0M7ZUFDakQsU0FBUztBQUFBLFFBQ2hCLE1BQU07QUFBQSxRQUNOLFNBQVM7QUFBQTtjQUVILElBQUk7QUFBQTs7VUEzRE4sZ0JBQWdCLFFBQVEsSUFBSTtBQUFBLE1BQ2hDO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQTtVQUVJLG9CQUFvQjtBQUFBLE1BQ3hCLHNCQUFzQixvQkFBYyx5QkFBZCxZQUFzQztBQUFBLE1BQzVELG9CQUFvQixvQkFBYyx1QkFBZCxZQUFvQztBQUFBLE1BQ3hELHlCQUF5QixvQkFBYyw0QkFBZCxZQUF5QztBQUFBO1NBRy9ELGNBQWM7QUFBQTtBQUFBO0FBb0R2QixNQUFNLHFCQUFxQixJQUFJO0FDbEQvQixzQkFBc0I7QUFBQSxFQUNwQixjQUFjO0FBT1AsbURBQTBCLE1BQU07O1lBQy9CLEVBQUMsVUFBVSxRQUFRLGdCQUFRLE9BQU87WUFDbEMsWUFBWSxJQUFJLGdCQUFnQjtZQUNoQyxRQUFxQjtBQUFBLFFBQ3pCLFVBQVU7QUFBQSxRQUNWLE1BQU07QUFBQSxRQUNOLE9BQU87QUFBQSxVQUNMLEtBQUs7QUFBQSxVQUNMLFVBQVU7QUFBQSxVQUNWLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQTtBQUFBO1lBR04sTUFBTSxNQUFNLGdCQUFVLElBQUksV0FBZCxZQUF3QjtZQUNwQyxNQUFNLE9BQVEsZ0JBQVUsSUFBSSxZQUFkLFlBQXlCO1lBQ3ZDLE1BQU0sT0FBTyxnQkFBVSxJQUFJLFlBQWQsWUFBeUI7WUFDdEMsTUFBTSxTQUFTLGdCQUFVLElBQUksY0FBZCxZQUEyQjtZQUMxQyxPQUFPLFNBQVMsZ0JBQVUsSUFBSSxZQUFkLFlBQXlCO1lBQ3pDLEtBQUssU0FBUyxnQkFBVSxJQUFJLFVBQWQsWUFBdUI7VUFDdkMsS0FBSyxRQUFRLE9BQU8sR0FBRztjQUNuQixNQUFNLFdBQVc7QUFBQSxVQUNyQjtBQUFBLFVBQ0E7QUFBQTtBQUFBO1lBR0UsT0FBTztZQUNQLFdBQVcsS0FBSyxpQkFBaUI7ZUFDOUIsU0FBUztBQUFBLFFBQ2hCLE1BQU07QUFBQSxRQUNOLFNBQVM7QUFBQTtBQUFBO0FBSU4sb0NBQVcsTUFBTTthQUNmLFNBQVMsV0FBVztBQUFBO0FBR3RCLHNDQUFhLE1BQU07ZUFDZixTQUFTO0FBQUEsUUFDaEIsTUFBTTtBQUFBLFFBQ04sU0FBUztBQUFBLFVBQ1AsS0FBSztBQUFBLFVBQ0wsVUFBVTtBQUFBLFVBQ1YsTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBO0FBQUE7QUFBQTtBQU9QLG9DQUFXLENBQUMsVUFBaUI7ZUFDekIsU0FBUztBQUFBLFFBQ2hCLE1BQU07QUFBQSxRQUNOLFNBQVM7QUFBQTtBQUFBO0FBTU4sbUNBQVUsQ0FBQyxVQUFpQjtlQUN4QixTQUFTO0FBQUEsUUFDaEIsTUFBTTtBQUFBLFFBQ04sU0FBUztBQUFBLFVBQ1A7QUFBQTtBQUFBO0FBQUE7QUFPQyx1Q0FBYyxDQUFDLGFBQXFCO2VBQ2hDLFNBQVM7QUFBQSxRQUNoQixNQUFNO0FBQUEsUUFDTixTQUFTO0FBQUEsVUFDUDtBQUFBO0FBQUE7QUFBQTtBQU9DLHVDQUFjLENBQUMsYUFBcUI7ZUFDaEMsU0FBUztBQUFBLFFBQ2hCLE1BQU07QUFBQSxRQUNOLFNBQVM7QUFBQSxVQUNQO0FBQUE7QUFBQTtBQUFBO0FBT0MsMENBQWlCLENBQUMsYUFBcUI7ZUFDbkMsU0FBUztBQUFBLFFBQ2hCLE1BQU07QUFBQSxRQUNOLFNBQVM7QUFBQSxVQUNQO0FBQUE7QUFBQTtBQUFBO0FBT0MsNkNBQW9CLENBQUMsT0FBMkIsT0FBTztlQUNuRCxTQUFTO0FBQUEsUUFDaEIsTUFBTTtBQUFBLFFBQ04sU0FBUztBQUFBLFVBQ1A7QUFBQTtBQUFBO0FBQUE7QUFPQywwQ0FBaUIsQ0FBQyxhQUFxQjtlQUNuQyxTQUFTO0FBQUEsUUFDaEIsTUFBTTtBQUFBLFFBQ04sU0FBUztBQUFBO0FBQUE7QUFNTix3Q0FBZSxDQUFDLFNBQWlCO2VBQzdCLFNBQVM7QUFBQSxRQUNoQixNQUFNO0FBQUEsUUFDTixTQUFTO0FBQUEsVUFDUDtBQUFBO0FBQUE7QUFBQTtBQU9DLHVDQUFjLENBQUMsUUFBZ0I7ZUFDM0IsU0FBUztBQUFBLFFBQ2hCLE1BQU07QUFBQSxRQUNOLFNBQVM7QUFBQSxVQUNQO0FBQUE7QUFBQTtBQUFBO0FBT0MsNkNBQW9CLENBQUMsTUFBYyxPQUFlO2VBQzlDLFNBQVM7QUFBQSxRQUNoQixNQUFNO0FBQUEsUUFDTixTQUFTO0FBQUEsVUFDUCxVQUFVLEVBQUMsTUFBTTtBQUFBO0FBQUE7QUFBQTtBQU9oQiw0Q0FBbUIsQ0FBQyxhQUFnQztVQUNyRCxDQUFDLEtBQUssWUFBWSxZQUFZLFNBQVMsV0FBVztlQUM3QztBQUFBLGFBQ0Y7ZUFDRTtBQUFBO0FBQUE7U0F6S0o7V0FDRSxhQUFhLE1BQU07V0FDbkI7QUFBQTtBQUFBO0FBQUE7QUE0S2EsSUFBSTtzQkNyTEMsTUFBc0I7U0FDMUMsS0FBSyxRQUFRLDRCQUE0QjtBQUFBOzBCQUlqQixPQUF5QjtRQUNsRCxRQUFrQjtNQUNwQixhQUFhO1NBRVYsV0FBVyxTQUFTLE9BQU87VUFDMUIsZUFBZSxXQUFXLFFBQVE7VUFDbEMsS0FBSyxXQUFXLE1BQU0sR0FBRztpQkFDbEIsV0FBVyxNQUFNLGVBQWU7QUFBQTtRQUd6QyxLQUFLO1NBRUo7QUFBQTs2QkFHMkIsY0FBc0IsV0FBK0M7UUFFakcsRUFBQyxVQUFTLFNBQVMsV0FBVyxnQkFBZ0I7TUFLaEQ7UUFDRSxZQUFZLFVBQVU7UUFldEIsV0FDSixXQUNBLHdCQUF3QixRQUFRLFdBQVdkLGtCQUFPLFdBQVcsT0FBTyxVQUFVLFFBQVEsY0FBYztRQUVoRyxhQUFhLE1BQU1JO1FBQ25CLGVBQWVVLGVBQWFkLGtCQUFPLFlBQVk7TUFDakQsQ0FBQyxjQUFjO1VBQ1gsT0FBTyxNQUFNZSxrQkFBZ0JmLGtCQUFPO1VBQ3BDLGtCQUFrQjtVQUNsQixlQUFlLE1BQU0sTUFBTSxLQUFLO1VBQ2hDLGlCQUFpQixNQUFNLG1CQUFtQixhQUFhLFVBQVU7VUFDakUsTUFBTSxPQUFPLE1BQU0sZUFBZTtRQUNwQyxlQUFlLFdBQVcsSUFBSTtZQUMxQixXQUFXZ0Isc0JBQW9CLGVBQWU7Z0JBQzFDLFNBQVMsU0FBUztBQUFBLFdBQ3ZCO2dCQUNLLGVBQWUsU0FBUztBQUFBO1dBWTdCO0FBQUEsTUFDTCxJQUFJaEIsa0JBQU8sV0FBVyxPQUFPLGtCQUFrQixPQUFPO0FBQUEsTUFDdEQsT0FBTztBQUFBLE1BQ1AsT0FBT0Esa0JBQU8sV0FBVztBQUFBLE1BQ3pCLEtBQUtBLGtCQUFPLFdBQVc7QUFBQSxNQUN2QixXQUFXO0FBQUE7QUFBQSxTQUdSO1VBQ0MsZUFBZSxNQUFNLE1BQU0sS0FBSztVQUNoQyxpQkFBaUIsTUFBTSxtQkFBbUIsYUFBYSxVQUFVO1VBQ2pFLE1BQU0sT0FBTyxjQUFjLGVBQWU7UUFDNUMsZUFBZSxXQUFXLElBQUk7WUFDMUIsV0FBV2dCLHNCQUFvQixlQUFlO2dCQUMxQyxTQUFTLFNBQVM7QUFBQSxXQUN2QjtnQkFDSyxlQUFlLFNBQVM7QUFBQTtXQVk3QjtBQUFBLE1BQ0wsSUFBSWhCLGtCQUFPLFdBQVcsT0FBTyxrQkFBa0IsT0FBTztBQUFBLE1BQ3RELE9BQU87QUFBQSxNQUNQLE9BQU9BLGtCQUFPLFdBQVc7QUFBQSxNQUN6QixLQUFLQSxrQkFBTyxXQUFXO0FBQUEsTUFDdkIsV0FBVztBQUFBO0FBQUE7QUFBQTtrQ0FPd0IsY0FBc0IsV0FBbUIsYUFBd0M7UUFHbEgsY0FBYyxJQUFJLE9BQU8sS0FBTSxNQUFNLGFBQWE7UUFDbEQsbUJBQTZCLGlCQUFpQjtRQUU5QyxpQkFBaUIsaUJBQWlCLFVBQVUsQ0FBQyxTQUFTLFlBQVksS0FBSztRQUN2RSxpQkFBaUIsbUJBQW1CO01BQ3RDLGdCQUFnQjtZQUtWLElBQUk7QUFBQTtRQUdSLHdDQUF3QyxpQkFDM0MsTUFBTSxpQkFBaUIsR0FDdkIsVUFBVSxDQUFDLFNBQVMsV0FBVyxLQUFLO1FBQ2pDLGtCQUFrQiwwQ0FBMEM7TUFFOUQsaUJBQWlCO1FBQ2Y7YUFFSyxJQUFJLHdDQUF3QyxnQkFBZ0IsSUFBSSxnQkFBZ0IsS0FBSztZQUN0RixnQkFBeUIsYUFBYSxLQUFLLGlCQUFpQjtVQUM5RCxDQUFDLGVBQWU7NEJBQ0U7Ozs7UUFLcEIsQ0FBQzswQkFBdUM7V0FFckMsTUFBTSw4QkFBOEIsV0FBVyxhQUFhLG1CQUFtQjtBQUFBLFNBQ2pGO1dBQ0UsTUFBTSw4QkFBOEIsV0FBVyxhQUFhLGlCQUFpQixTQUFTLEdBQUc7QUFBQTtBQUFBOzZDQU1sRyxNQUNBLE1BQ0EsS0FDQSxPQUNtQjtNQUNmLFFBQVEsSUFBSTtXQUNQO0FBQUEsTUFDTCxTQUFTLEdBQUc7QUFBQSxFQUFTO0FBQUEsTUFDckIsUUFBUTtBQUFBO0FBQUE7UUFJTixlQUFlLEtBQUssTUFBTTtNQUU1QixPQUFPO1VBQ0gsTUFBTSxhQUFhLE1BQU0sR0FBRyxNQUFNLEdBQUcsS0FBSztVQUMxQyxPQUFPLGFBQWEsTUFBTSxNQUFNLEdBQUcsS0FBSztXQUV2QztBQUFBLE1BQ0wsU0FBUyxHQUFHO0FBQUEsRUFBUTtBQUFBLEVBQVM7QUFBQSxNQUM3QixRQUFRO0FBQUE7QUFBQSxTQUVMO1VBQ0MsTUFBTSxhQUFhLE1BQU0sR0FBRyxNQUFNLEdBQUcsS0FBSztVQUMxQyxPQUFPLGFBQWEsTUFBTSxNQUFNLEdBQUcsS0FBSztRQUMxQyxZQUFZLEtBQUssT0FBTzthQUNuQjtBQUFBLFFBQ0wsU0FBUyxHQUFHO0FBQUEsRUFBUTtBQUFBLFFBQ3BCLFFBQVE7QUFBQTtBQUFBLFdBRUw7YUFDRTtBQUFBLFFBQ0wsU0FBUyxHQUFHLE1BQU07QUFBQSxFQUFTO0FBQUEsUUFDM0IsUUFBUTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBT2hCLE1BQU1nQix3QkFBc0IsQ0FBQyxVQUFrQixNQUFNLE1BQU07MkJDdk16RCxTQUNBLGlCQUNBLFNBQ0EsV0FDc0I7UUFDaEIsRUFBQyxlQUFjLGtCQUFrQjtRQUNqQyxFQUFDLFVBQVMsU0FBUyxXQUFXLGdCQUFnQjtRQUM5QyxhQUFhLFFBQVEsTUFBTSxHQUFHLE1BQU07UUFDcEMsV0FBVyxTQUFTLFFBQVEsTUFBTTtRQUNsQyxlQUFlaEIsa0JBQU8sWUFBWTtRQUNsQyxZQUFZYyxlQUFhLGNBQWM7UUFDdkMsY0FBYyxNQUFNLE1BQU0sS0FBSztRQUMvQixZQUFZRSxzQkFBb0I7UUFDaEMsY0FBYyxRQUFRLFFBQVEsT0FBTztRQUNyQyxlQUFlLFVBQVU7UUFDekIsVUFBVSxVQUFVLFVBQVUsUUFBUSxpQkFBaUI7UUFDdkQsaUJBQWlCLFlBQVksUUFBUSxjQUFjO1FBQ25ELE1BQU0sT0FBTyxXQUFXO1NBQ3ZCO0FBQUEsSUFDTCxJQUFJO0FBQUEsSUFDSixPQUFPO0FBQUEsSUFDUCxPQUFPaEIsa0JBQU8sYUFBYSxPQUFPLHdCQUF3QjtBQUFBLElBQzFELEtBQUtBLGtCQUFPLGFBQWEsT0FBTyx3QkFBd0I7QUFBQSxJQUN4RDtBQUFBO0FBQUE7NEJBWXVDO1FBQ25DLG9CQUFvQmlCO1FBQ3BCLGdCQUFnQixrQkFBa0I7U0FDakM7QUFBQTtBQUdULE1BQU1ELHdCQUFzQixDQUFDLFVBQWtCLE1BQU0sTUFBTTsyQ0MzQ1QsTUFBTTtBQUFBO2tDQUVmLE1BQThCO01BQ2pFLENBQUMsTUFBTTtXQUNGO0FBQUE7UUFFSCxFQUFDLFVBQVMsU0FBUyxXQUFXLGdCQUFnQjtNQUNoRCxlQUFlLE1BQU0sTUFBTSxLQUFLO01BQ2hDO01BRUYsMkJBQTJCLE1BQzNCLFVBQVUsS0FBSyw0QkFDZixhQUFhLEtBQUssMEJBQ2xCO2lCQUdFLCtCQUNBLHdCQUF3QixRQUFRLFdBQVcsbUNBQW1DLFFBQVEsZUFBZTtBQUFBLFNBQ2xHO2lCQUVRO0FBQUE7UUFFVCxlQUFlLElBQUksT0FBTyxZQUFZO1FBRXRDLDRCQUE0QixNQUFNLGlCQUFpQixJQUFJO1FBRXZELE1BQUssSUFBSSxPQUFPLG9CQUFvQixRQUFRLDBCQUEwQixTQUFTO1FBQy9FLHFDQUFxQyxNQUFNLFFBQU8sSUFBSTtpQkFDN0M7TUFDWCxzQkFBc0I7V0FDakI7QUFBQTtTQUVGO0FBQUE7c0NBR29DLFdBQXlCLGFBQTRDO01BQzVHLENBQUMsV0FBVztXQUNQO0FBQUE7UUFFSCxFQUFDLFVBQVMsU0FBUyxXQUFXLGdCQUFnQjtRQUM5QyxTQUFTLE1BQU0sbUJBQW1CO01BRXBDLFFBQVE7UUFDTixlQUFlLE1BQU0sTUFBTSxLQUFLO1FBQ2hDLFlBQVlBLHNCQUFvQjtVQUM5QixZQUFZRSxrQkFBZ0IsV0FBVztVQUN2QyxVQUFVQSxrQkFBZ0IsV0FBVztRQUN2QyxxQkFBcUI7UUFDckI7YUFDSyxJQUFJLEdBQUcsSUFBSSxVQUFVLFFBQVEsS0FBSztZQUNuQyxPQUFPLFVBQVU7VUFDbkIsS0FBSyxXQUFXOztVQUNoQixzQkFBc0IsU0FBUyw0QkFBNEIsT0FBTzs2QkFDL0M7QUFBQTtVQUVuQixzQkFBc0IsUUFBUSxDQUFDLDRCQUE0QixTQUFTLFdBQVcsS0FBSyxPQUFPOzZCQUN4RTtBQUFBO1VBR25CLGlCQUFpQixTQUFTLG9CQUFvQjtjQUMxQyxXQUFXLDBCQUEwQjtjQUNyQyxVQUFVLHlCQUF5QjtrQkFDL0IsTUFBTSxTQUFTO2tCQUNmLFFBQVEsU0FBUztnQkFDbkIsTUFBTSxTQUFTO1lBQ25CLFNBQVMsWUFBWSxJQUFJO2tCQUNuQixRQUFRLFNBQVM7QUFBQSxlQUNwQjtrQkFDRyxRQUFRLFNBQVM7QUFBQTtZQUV2Qiw0QkFBNEIsS0FBSyxPQUFPO2dCQUNwQyxnQkFBZ0IsNkJBQTZCO2NBQy9DLGtCQUFrQixLQUFLO3dCQUNiO0FBQUEscUJBQ0gsa0JBQWtCLE9BQU8sa0JBQWtCLEtBQUs7d0JBQzdDO0FBQUEsaUJBQ1A7d0JBQ08sVUFBVTtBQUFBO0FBQUEsZUFFbkI7c0JBQ087QUFBQTtjQUVSLFVBQVUsd0JBQXdCO1lBQ3BDLFlBQVksSUFBSTtzQkFDTixLQUFLO0FBQUEsWUFDZixJQUFJLFVBQVUsT0FBTyxrQkFBa0IsT0FBTztBQUFBLFlBQzlDLE9BQU87QUFBQSxZQUNQLE9BQU9sQixrQkFBTyxXQUFXO0FBQUEsWUFDekIsS0FBS0Esa0JBQU8sV0FBVztBQUFBLFlBQ3ZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7Z0JBS0k7bUJBQ0c7QUFBQTtBQUFBOzJCQUkrQjtRQUMxQyxTQUFxQztRQUNyQyxFQUFDLFVBQVMsU0FBUyxXQUFXLGdCQUFnQjtRQUM5QyxFQUFDLFdBQVVpQjtRQUVYLG1CQUFtQixNQUFNLHNCQUFzQkUseUJBQWM7TUFFL0QsQ0FBQyxrQkFBa0I7VUFDZixJQUFJLDZCQUE2QjtBQUFBO1FBR25DLGFBQWFmO2FBRVIsVUFBVSxZQUFZO1FBQzNCLFdBQVcsbUJBQW1CZ0Isa0JBQU87WUFDakMsdUJBQXVCLFdBQVcsU0FBUztBQUFBO0FBQUE7U0FJOUM7QUFBQTtBQUdULE1BQU1KLHdCQUFzQixDQUFDLFVBQWtCLE1BQU0sTUFBTTtBQUszRCxNQUFNLG1CQUFtQixDQUFDLFNBQWlCO01BQ3JDO01BRUYsMkJBQTJCLE1BQzNCLFVBQVUsS0FBSyw0QkFDZixhQUFhLEtBQUssMEJBQ2xCO2lCQUdFLHNDQUNBLHdCQUF3QixRQUFRLFdBQVcsZ0RBQWdELFFBQ3pGLGNBQ0E7QUFBQSxTQUVDO2lCQUVRO0FBQUE7UUFFVCxlQUFlLElBQUksT0FBTyxZQUFZO1NBRXJDLGFBQWEsS0FBSztBQUFBO0FBTTNCLE1BQU0sOEJBQThCLENBQUMsU0FBaUI7TUFDaEQsd0JBQXdCLElBQUk7V0FDdkI7QUFBQTtRQUVILE1BQUssSUFBSSxPQUFPLG9CQUFvQixRQUFRLDBCQUEwQixTQUFTO1NBQzlFLElBQUcsS0FBSztBQUFBO0FBR2pCLE1BQU0sMEJBQTBCLENBQUMsU0FBaUI7O01BQzVDO01BRUYsMkJBQTJCLE1BQzNCLFVBQVUsS0FBSyw0QkFDZixhQUFhLEtBQUssMEJBQ2xCO2lCQUdFLHdDQUNBLHdCQUF3QixRQUFRLFdBQVcseURBQXlELFFBQ2xHLGNBQ0E7QUFBQSxTQUVDO2lCQUVRO0FBQUE7UUFFVCxlQUFlLElBQUksT0FBTyxZQUFZO1NBRXJDLG1CQUFhLEtBQUssVUFBbEIsbUJBQTBCO0FBQUE7QUFJbkMsTUFBTSw0QkFBNEIsQ0FBQyxTQUFpQjs7TUFDOUM7TUFFRiwyQkFBMkIsTUFDM0IsVUFBVSxLQUFLLDRCQUNmLGFBQWEsS0FBSywwQkFDbEI7cUJBR0Usd0NBQ0Esd0JBQXdCLFFBQVEsV0FBVyxzREFBc0QsUUFDL0YsY0FDQTtBQUFBLFNBRUM7cUJBRVk7QUFBQTtRQUViLGVBQWUsSUFBSSxPQUFPLGdCQUFnQjtTQUV6QyxtQkFBYSxLQUFLLFVBQWxCLG1CQUEwQjtBQUFBO0FBR25DLE1BQU0sMkJBQTJCLENBQUMsU0FBaUI7O01BQzdDO01BRUYsMkJBQTJCLE1BQzNCLFVBQVUsS0FBSyw0QkFDZixhQUFhLEtBQUssMEJBQ2xCO3FCQUdFLHdDQUNBLHdCQUF3QixRQUFRLFdBQVcsc0RBQXNELFFBQy9GLGNBQ0E7QUFBQSxTQUVDO3FCQUVZO0FBQUE7UUFFYixlQUFlLElBQUksT0FBTyxnQkFBZ0I7U0FFekMsbUJBQWEsS0FBSyxVQUFsQixtQkFBMEI7QUFBQTtBQUluQyxNQUFNLCtCQUErQixDQUFDOztBQUVwQyxpREFBa0MsS0FBSyxVQUF2QyxtQkFBK0M7QUFBQTtNQzFHcEMsb0JBQW9CLE9BQU8saUJBQXVDO1FBQ3ZFLEVBQUMsZUFBZSxVQUFTLFNBQVMsV0FBVyxnQkFBZ0I7UUFFN0QsV0FBVztRQUNYLGVBQWUsV0FBVztRQUUxQixhQUFhLGNBQWMscUJBQXFCLElBQUk7TUFFdEQsc0JBQXNCSSxrQkFBTztVQUN6QixlQUFlLE1BQU0sTUFBTSxLQUFLO1VBQ2hDLFlBQVlKLHNCQUFvQjtVQUNoQyxRQUFPaEI7VUFDUCxhQUFhLE1BQUssT0FBTztRQUMzQjtRQUNBLFVBQVUsV0FBVyxLQUFLLFVBQVUsT0FBTyxJQUFJO2dCQUN2QztBQUFBLFdBQ0w7Z0JBQ0ssVUFBVSxTQUFTO0FBQUE7VUFFekIsZUFBZSxNQUFLLE9BQU8sb0JBQW9CO1VBRS9DLHdCQUF3QixZQUFZLGNBQWMsY0FBYztXQUUvRDtBQUFBLFNBQ0Y7VUFDQyxpQkFBaUJtQix5QkFBYztVQUMvQixPQUFPLE1BQU0saUJBQWlCO1VBRzlCLFFBQU9uQjtVQUNQLGFBQWEsTUFBSyxPQUFPO1VBQ3pCLFVBQVU7VUFDVixlQUFlLE1BQUssT0FBTyxvQkFBb0I7VUFFL0Msd0JBQXdCLE1BQU0sSUFBSSxjQUFjO1dBRS9DO0FBQUE7QUFBQTtNQUlFLDBCQUEwQixPQUNyQyxNQUNBLGFBQ0EsY0FDQSxlQUNpQjtRQUNYLEVBQUMsVUFBUyxTQUFTLFdBQVcsZ0JBQWdCO01BQ2hEO01BQ0EsZ0JBQWdCLElBQUk7aUJBQ1QsZUFBZSxpQkFBaUI7QUFBQSxTQUN4QztpQkFDUSxjQUFjLE9BQU8sZUFBZSxpQkFBaUI7QUFBQTtRQUc5RCxNQUFNLE9BQU8sTUFBTTtTQUVsQjtBQUFBO01BR0ksbUJBQW1CLE9BQU8sU0FBaUM7UUFDaEUsRUFBQyxVQUFTLFNBQVMsV0FBVyxnQkFBZ0I7TUFFaEQ7VUFDSSxjQUFjLE1BQU0sTUFBTSxPQUFPLE1BQU07V0FDdEM7QUFBQSxXQUNBO1lBQ0MsTUFBTSwyQkFBMkIsU0FBUztRQUM5Q3FCLGtCQUFPO0FBQUE7QUFBQTtBQUlmLE1BQU1MLHdCQUFzQixDQUFDLFVBQWtCLE1BQU0sTUFBTTsyQkNuTXpCLFNBQXVDO1FBQ2pFLEVBQUMsZUFBYyxrQkFBa0I7TUFDbkMsVUFBVSxLQUFLLFVBQVU7VUFDckIsRUFBQyxVQUFTLFNBQVMsV0FBVyxnQkFBZ0I7VUFDOUMsYUFBYSxRQUFRLE1BQU0sR0FBRztVQUM5QixXQUFXLFNBQVMsUUFBUSxNQUFNO1VBQ2xDLGFBQWFoQixrQkFBTyxZQUFZO1VBQ2hDLFlBQVljLGVBQWEsWUFBWTtVQUNyQyxjQUFjLE1BQU0sTUFBTSxLQUFLO1VBQy9CLFlBQVksb0JBQW9CO1VBQ2hDLFVBQVUsdUJBQXVCLFVBQVU7VUFDM0MsZUFBZSxPQUFPLFVBQVUsTUFBTTtVQUN0QyxVQUFVLFVBQVU7VUFDcEIsaUJBQWlCLFlBQVksUUFBUSxTQUFTO1VBQzlDLE1BQU0sT0FBTyxXQUFXO1VBQ3hCLGFBQWEsTUFBTSxrQkFBa0I7V0FDcEM7QUFBQTtBQUFBO0FBSVgsTUFBTSxzQkFBc0IsQ0FBQyxVQUFrQixNQUFNLE1BQU07QUFDM0QsTUFBTSx5QkFBeUIsQ0FBQyxTQUFpQjs7TUFDM0M7TUFFRiwyQkFBMkIsTUFDM0IsVUFBVSxLQUFLLDRCQUNmLGFBQWEsS0FBSywwQkFDbEI7aUJBRWEsd0NBQ1gsd0JBQXdCLFFBQVEsV0FBVyx5REFBeUQsUUFDbEcsY0FDQTtBQUFBLFNBRUM7aUJBRVE7QUFBQTtRQUVULGVBQWUsSUFBSSxPQUFPLFlBQVk7U0FFckMsbUJBQWEsS0FBSyxVQUFsQixtQkFBMEI7QUFBQTtBQ0xuQyxJQUFVO0FBQVYsVUFBVSxNQUFWO3lCQUNnQztBQUFBO09BQWQ7K0JBK0JvQixVQUFrQjtBQUFBO09BQXRDOzhCQVNtQixVQUFrQjtBQUFBO09BQXJDOzBCQVNlLFVBQTZFO0FBQUE7T0FBNUY7K0JBUW9CO1dBQzNCLE1BQU07QUFBQTtPQURPO3FCQW9DSSxTQUFpQjtXQUNsQyxZQUFZO0FBQUE7T0FETDtHQTlGUjtBQWtNVixZQUFlO0FDdk9mLG1CQUFtQjtBQUFBLEVBQW5CO0FBQ1MsdUNBQWM7QUFBQTtBQUFBLEVBRWQsV0FBVztXQUNULFNBQVMsV0FBVztBQUFBO0FBQUEsUUFHaEIsaUJBQWlCO1VBTXRCLE9BQU8sTUFBTVEsTUFBSTtVQUNqQixTQUFTO2VBQ0osTUFBSyxNQUFNO2FBQ2IsS0FBSztBQUFBO2FBRUwsU0FBUztBQUFBLE1BQ2hCLE1BQU07QUFBQSxNQUNOLFNBQVM7QUFBQSxRQUNQO0FBQUE7QUFBQTtRQUlBLENBQUMsS0FBSyxhQUFhO1dBQ2hCLGNBQWM7QUFBQTtXQUdkO0FBQUE7QUFBQSxFQUdGLFVBQVUsT0FBb0I7YUFDMUIsU0FBUztBQUFBLE1BQ2hCLE1BQU07QUFBQSxNQUNOLFNBQVM7QUFBQSxRQUNQLE9BQU8sbUJBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1KLGFBQWEsS0FBWTtlQUNuQixNQUFLLEtBQUssV0FBVyxRQUFRO1VBQ2xDLEdBQUUsT0FBTyxLQUFJO2VBQ1I7QUFBQTtBQUFBO1dBSUo7QUFBQTtBQUFBLFFBR0ksY0FBYyxLQUFZO1VBQy9CQSxNQUFJLFVBQVU7YUFDWCxTQUFTO0FBQUEsTUFDaEIsTUFBTTtBQUFBLE1BQ04sU0FBUztBQUFBLFFBQ1A7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWVDLFVBQVUsT0FBb0I7YUFDMUIsU0FBUztBQUFBLE1BQ2hCLE1BQU07QUFBQSxNQUNOLFNBQVM7QUFBQTtBQUFBO0FBQUEsRUEyQk4sY0FBYzthQUNWLFNBQVM7QUFBQSxNQUNoQixNQUFNO0FBQUEsTUFDTixTQUFTO0FBQUEsUUFDUCxRQUFRO0FBQUE7QUFBQTtBQUFBO0FBQUEsUUFLRCxZQUFZLE1BQWMsV0FBK0M7VUFDOUUsUUFBUSxNQUFNLGNBQWMsTUFBTTtXQUNqQztBQUFBO0FBQUEsUUFHSSxZQUFZLFNBQWlCLGNBQXNCLE1BQWMsTUFBb0M7VUFDMUcsUUFBUSxNQUFNLFlBQVksU0FBUyxjQUFjLE1BQU07V0FDdEQ7QUFBQTtBQUFBO0FBSVgsTUFBTSxlQUFlLElBQUk7QUNoSXpCLHNCQUFzQjtRQUNkLEdBQUcsY0FBY0MscUNBQWtCO1FBRW5DLFVBQVVDLHdDQUFZLE1BQU07ZUFDckIsQ0FBQyxPQUFPO2FBQ1YsQ0FBQztBQUFBO0FBQUEsS0FFVDtTQUVJO0FBQUE7O0FDWE0sc0JBQW9CO0FBQ2pDQyxlQUFXLE9BQU8sVUFBVSxTQUFVLFFBQVE7QUFDNUMsYUFBUyxJQUFJLEdBQUcsSUFBSSxVQUFVLFFBQVEsS0FBSztBQUN6QyxVQUFJLFNBQVMsVUFBVTtBQUV2QixlQUFTLE9BQU8sUUFBUTtBQUN0QixZQUFJLE9BQU8sVUFBVSxlQUFlLEtBQUssUUFBUSxNQUFNO0FBQ3JELGlCQUFPLE9BQU8sT0FBTztBQUFBO0FBQUE7QUFBQTtBQUszQixXQUFPO0FBQUE7QUFHVCxTQUFPQSxXQUFTLE1BQU0sTUFBTTtBQUFBO0FDZmYsdUNBQXVDLFFBQVEsVUFBVTtBQUN0RSxNQUFJLFVBQVU7QUFBTSxXQUFPO0FBQzNCLE1BQUksU0FBUztBQUNiLE1BQUksYUFBYSxPQUFPLEtBQUs7QUFDN0IsTUFBSSxLQUFLO0FBRVQsT0FBSyxJQUFJLEdBQUcsSUFBSSxXQUFXLFFBQVEsS0FBSztBQUN0QyxVQUFNLFdBQVc7QUFDakIsUUFBSSxTQUFTLFFBQVEsUUFBUTtBQUFHO0FBQ2hDLFdBQU8sT0FBTyxPQUFPO0FBQUE7QUFHdkIsU0FBTztBQUFBO0FDWk0seUJBQXlCLEdBQUcsSUFBRztBQUM1QyxvQkFBa0IsT0FBTyxrQkFBa0IsMEJBQXlCLElBQUcsSUFBRztBQUN4RSxPQUFFLFlBQVk7QUFDZCxXQUFPO0FBQUE7QUFHVCxTQUFPLGdCQUFnQixHQUFHO0FBQUE7QUNMYix3QkFBd0IsVUFBVSxZQUFZO0FBQzNELFdBQVMsWUFBWSxPQUFPLE9BQU8sV0FBVztBQUM5QyxXQUFTLFVBQVUsY0FBYztBQUNqQ0Msa0JBQWUsVUFBVTtBQUFBOztBQ0szQixJQUFJQyx5QkFBdUI7SUFFM0IseUJBQWlCQTtBQ0ZqQixJQUFJLHVCQUF1QjVEO0FBRTNCLHlCQUF5QjtBQUFBO0FBQ3pCLGtDQUFrQztBQUFBO0FBQ2xDLHVCQUF1QixvQkFBb0I7SUFFM0MsMkJBQWlCLFdBQVc7QUFDMUIsZ0JBQWMsT0FBTyxVQUFVLGVBQWUsVUFBVSxjQUFjLFFBQVE7QUFDNUUsUUFBSSxXQUFXLHNCQUFzQjtBQUVuQztBQUFBO0FBRUYsUUFBSSxNQUFNLElBQUksTUFDWjtBQUlGLFFBQUksT0FBTztBQUNYLFVBQU07QUFBQTtBQUVSLE9BQUssYUFBYTtBQUNsQixxQkFBbUI7QUFDakIsV0FBTztBQUFBO0FBSVQsTUFBSSxpQkFBaUI7QUFBQSxJQUNuQixPQUFPO0FBQUEsSUFDUCxNQUFNO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixRQUFRO0FBQUEsSUFDUixRQUFRO0FBQUEsSUFDUixRQUFRO0FBQUEsSUFDUixRQUFRO0FBQUEsSUFFUixLQUFLO0FBQUEsSUFDTCxTQUFTO0FBQUEsSUFDVCxTQUFTO0FBQUEsSUFDVCxhQUFhO0FBQUEsSUFDYixZQUFZO0FBQUEsSUFDWixNQUFNO0FBQUEsSUFDTixVQUFVO0FBQUEsSUFDVixPQUFPO0FBQUEsSUFDUCxXQUFXO0FBQUEsSUFDWCxPQUFPO0FBQUEsSUFDUCxPQUFPO0FBQUEsSUFFUCxnQkFBZ0I7QUFBQSxJQUNoQixtQkFBbUI7QUFBQTtBQUdyQixpQkFBZSxZQUFZO0FBRTNCLFNBQU87QUFBQTtBQ2hERjtBQUdMNkQsd0NBQWlCN0Q7QUFBQUE7O0FDR25CLElBQUksWUFBWSxTQUFTLFdBQVcsUUFBUSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBRztBQU81RCxNQUFJLENBQUMsV0FBVztBQUNkLFFBQUk7QUFDSixRQUFJLFdBQVcsUUFBVztBQUN4QixjQUFRLElBQUksTUFDVjtBQUFBLFdBR0c7QUFDTCxVQUFJLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUc7QUFDM0IsVUFBSSxXQUFXO0FBQ2YsY0FBUSxJQUFJLE1BQ1YsT0FBTyxRQUFRLE9BQU8sV0FBVztBQUFFLGVBQU8sS0FBSztBQUFBO0FBRWpELFlBQU0sT0FBTztBQUFBO0FBR2YsVUFBTSxjQUFjO0FBQ3BCLFVBQU07QUFBQTtBQUFBO0lBSVYsVUFBaUI7QUM5Q2pCLElBQUk4RCxTQUFPLGlCQUFnQjtBQUFBO0FBWXBCLCtCQUErQixrQkFBa0IsYUFBYTtBQUNuRSxNQUFJLFlBQVk7QUFDaEIsU0FBTyxLQUFLLGtCQUFrQixRQUFRLFNBQVUsTUFBTTtBQUVwRCxjQUFVLFdBQVcsU0FBU0E7QUFBQUE7QUFRaEMsU0FBTztBQUFBO0FBRUYsZ0JBQWdCLE9BQU8sTUFBTTtBQUNsQyxTQUFPLE1BQU0sVUFBVTtBQUFBO0FBRWxCLG9CQUFvQixLQUFLO0FBQzlCLFNBQU8sWUFBWSxJQUFJLE9BQU8sR0FBRyxnQkFBZ0IsSUFBSSxPQUFPO0FBQUE7QUFXdkQsc0JBQXNCLFdBQVc7QUFDdEMsU0FBTyxDQUFDLENBQUMsYUFBYyxRQUFPLGNBQWMsY0FBYyxVQUFVLGFBQWEsVUFBVSxVQUFVO0FBQUE7QUNyQ3ZHLDhCQUE4QjtBQUU1QixNQUFJLFFBQVEsS0FBSyxZQUFZLHlCQUF5QixLQUFLLE9BQU8sS0FBSztBQUN2RSxNQUFJLFVBQVUsUUFBUSxVQUFVLFFBQVc7QUFDekMsU0FBSyxTQUFTO0FBQUE7QUFBQTtBQUlsQixtQ0FBbUMsV0FBVztBQUc1QyxtQkFBaUIsV0FBVztBQUMxQixRQUFJLFFBQVEsS0FBSyxZQUFZLHlCQUF5QixXQUFXO0FBQ2pFLFdBQU8sVUFBVSxRQUFRLFVBQVUsU0FBWSxRQUFRO0FBQUE7QUFHekQsT0FBSyxTQUFTLFFBQVEsS0FBSztBQUFBO0FBRzdCLDZCQUE2QixXQUFXLFdBQVc7QUFDakQsTUFBSTtBQUNGLFFBQUksWUFBWSxLQUFLO0FBQ3JCLFFBQUksWUFBWSxLQUFLO0FBQ3JCLFNBQUssUUFBUTtBQUNiLFNBQUssUUFBUTtBQUNiLFNBQUssOEJBQThCO0FBQ25DLFNBQUssMEJBQTBCLEtBQUssd0JBQ2xDLFdBQ0E7QUFBQTtBQUdGLFNBQUssUUFBUTtBQUNiLFNBQUssUUFBUTtBQUFBO0FBQUE7QUFNakIsbUJBQW1CLCtCQUErQjtBQUNsRCwwQkFBMEIsK0JBQStCO0FBQ3pELG9CQUFvQiwrQkFBK0I7QUFFbkQsa0JBQWtCLFdBQVc7QUFDM0IsTUFBSSxZQUFZLFVBQVU7QUFFMUIsTUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLGtCQUFrQjtBQUM3QyxVQUFNLElBQUksTUFBTTtBQUFBO0FBR2xCLE1BQ0UsT0FBTyxVQUFVLDZCQUE2QixjQUM5QyxPQUFPLFVBQVUsNEJBQTRCLFlBQzdDO0FBQ0EsV0FBTztBQUFBO0FBTVQsTUFBSSxxQkFBcUI7QUFDekIsTUFBSSw0QkFBNEI7QUFDaEMsTUFBSSxzQkFBc0I7QUFDMUIsTUFBSSxPQUFPLFVBQVUsdUJBQXVCLFlBQVk7QUFDdEQseUJBQXFCO0FBQUEsYUFDWixPQUFPLFVBQVUsOEJBQThCLFlBQVk7QUFDcEUseUJBQXFCO0FBQUE7QUFFdkIsTUFBSSxPQUFPLFVBQVUsOEJBQThCLFlBQVk7QUFDN0QsZ0NBQTRCO0FBQUEsYUFDbkIsT0FBTyxVQUFVLHFDQUFxQyxZQUFZO0FBQzNFLGdDQUE0QjtBQUFBO0FBRTlCLE1BQUksT0FBTyxVQUFVLHdCQUF3QixZQUFZO0FBQ3ZELDBCQUFzQjtBQUFBLGFBQ2IsT0FBTyxVQUFVLCtCQUErQixZQUFZO0FBQ3JFLDBCQUFzQjtBQUFBO0FBRXhCLE1BQ0UsdUJBQXVCLFFBQ3ZCLDhCQUE4QixRQUM5Qix3QkFBd0IsTUFDeEI7QUFDQSxRQUFJLGdCQUFnQixVQUFVLGVBQWUsVUFBVTtBQUN2RCxRQUFJLGFBQ0YsT0FBTyxVQUFVLDZCQUE2QixhQUMxQywrQkFDQTtBQUVOLFVBQU0sTUFDSiw2RkFDRSxnQkFDQSxXQUNBLGFBQ0Esd0RBQ0Msd0JBQXVCLE9BQU8sU0FBUyxxQkFBcUIsTUFDNUQsK0JBQThCLE9BQzNCLFNBQVMsNEJBQ1QsTUFDSCx5QkFBd0IsT0FBTyxTQUFTLHNCQUFzQixNQUMvRDtBQUFBO0FBUU4sTUFBSSxPQUFPLFVBQVUsNkJBQTZCLFlBQVk7QUFDNUQsY0FBVSxxQkFBcUI7QUFDL0IsY0FBVSw0QkFBNEI7QUFBQTtBQU14QyxNQUFJLE9BQU8sVUFBVSw0QkFBNEIsWUFBWTtBQUMzRCxRQUFJLE9BQU8sVUFBVSx1QkFBdUIsWUFBWTtBQUN0RCxZQUFNLElBQUksTUFDUjtBQUFBO0FBSUosY0FBVSxzQkFBc0I7QUFFaEMsUUFBSSxxQkFBcUIsVUFBVTtBQUVuQyxjQUFVLHFCQUFxQixvQ0FDN0IsV0FDQSxXQUNBLGVBQ0E7QUFTQSxVQUFJLFdBQVcsS0FBSyw4QkFDaEIsS0FBSywwQkFDTDtBQUVKLHlCQUFtQixLQUFLLE1BQU0sV0FBVyxXQUFXO0FBQUE7QUFBQTtBQUl4RCxTQUFPO0FBQUE7QUN2SlQsSUFBSSxlQUFlO0FBS0osd0JBQXdCLFdBQVcsa0JBQWtCLFNBQVM7QUFDM0UsTUFBSSxZQUFZLFFBQVE7QUFDdEIsY0FBVTtBQUFBO0FBR1osTUFBSSxjQUFjLFVBQVUsZUFBZSxVQUFVLFFBQVE7QUFDN0QsTUFBSUMsaUJBQWVDLGFBQW1CO0FBQ3RDLE1BQUksa0JBQWtCLE9BQU8sS0FBSztBQUNsQyxNQUFJLGdCQUFnQixnQkFBZ0IsSUFBSUM7QUFDeEMsR0FBRUYsbUJBQWdCLENBQUMsUUFBUSxVQUF3U0csUUFBVSxTQUFTO0FBRXRWLE1BQUksd0JBRUoseUJBQVUsa0JBQWtCO0FBQzFCLG1CQUFlLHdCQUF1QjtBQUV0QyxzQ0FBaUM7QUFDL0IsVUFBSTtBQUVKLGVBQVMsT0FBTyxVQUFVLFFBQVEsT0FBTyxJQUFJLE1BQU0sT0FBTyxPQUFPLEdBQUcsT0FBTyxNQUFNLFFBQVE7QUFDdkYsYUFBSyxRQUFRLFVBQVU7QUFBQTtBQUd6QixjQUFRLGlCQUFpQixLQUFLLE1BQU0sa0JBQWtCLENBQUMsTUFBTSxPQUFPLFVBQVU7QUFDOUUsWUFBTSxXQUFXLE9BQU8sT0FBTztBQUMvQixzQkFBZ0IsUUFBUSxTQUFVLFVBQVU7QUFDMUMsWUFBSSxjQUFjLGlCQUFpQjtBQUVuQyxZQUFJLGVBQWUsdUJBQXNCLE9BQU87QUFDOUMsY0FBSSxNQUFNLE1BQU0sY0FBYztBQUM1QixnQkFBSTtBQUVKLGtCQUFNLGFBQWE7QUFFbkIscUJBQVMsUUFBUSxVQUFVLFFBQVEsUUFBTyxJQUFJLE1BQU0sUUFBUSxJQUFJLFFBQVEsSUFBSSxJQUFJLFFBQVEsR0FBRyxRQUFRLE9BQU8sU0FBUztBQUNqSCxvQkFBSyxRQUFRLEtBQUssVUFBVTtBQUFBO0FBRzlCLFlBQUMsZUFBYyxNQUFNLE9BQU8sYUFBYSxNQUFNLGFBQWEsQ0FBQyxPQUFPLE9BQU87QUFFM0Usa0JBQU0sYUFBYTtBQUFBO0FBR3JCLGNBQUksQ0FBQyxNQUFNO0FBQVcsa0JBQU0sU0FBUyxTQUFVLE1BQU07QUFDbkQsa0JBQUk7QUFFSixrQkFBSSxVQUFTLEtBQUs7QUFDbEIscUJBQU87QUFBQSxnQkFDTCxRQUFRUixXQUFTLE9BQU8sT0FBTyxPQUFPLFNBQVMsY0FBWSxJQUFJLFdBQVUsWUFBWSxPQUFPO0FBQUE7QUFBQTtBQUFBO0FBS2xHLGNBQU0sU0FBUyxlQUFlO0FBQUE7QUFFaEMsVUFBSSxRQUFRO0FBQVEsY0FBTSxZQUFZLFNBQVUsS0FBSztBQUNuRCxnQkFBTSxRQUFRO0FBQUE7QUFFaEIsVUFBSSxTQUFTLE9BQU8sT0FBTztBQUMzQixzQkFBZ0IsUUFBUSxTQUFVLEtBQUs7QUFDckMsZUFBTyxPQUFPLE1BQU0sTUFBTU8sV0FBaUI7QUFBQTtBQUU3QyxZQUFNLFFBQVE7QUFBQSxRQUNaO0FBQUEsUUFDQSxXQUFXO0FBQUE7QUFFYixhQUFPO0FBQUE7QUFHVCxRQUFJLFNBQVMsdUJBQXNCO0FBRW5DLFdBQU8sd0JBQXdCLGlDQUFpQztBQUU5RCxhQUFPLENBQUMsS0FBSztBQUFBO0FBR2YsMkJBQXNCLDJCQUEyQixrQ0FBa0MsT0FBTyxPQUFPO0FBQy9GLFVBQUksU0FBUyxNQUFNLFFBQ2YsWUFBWSxNQUFNO0FBQ3RCLFVBQUksWUFBWTtBQUFBLFFBQ2QsUUFBUVAsV0FBUyxPQUFPLE9BQU8sT0FBTztBQUFBLFFBQ3RDLFdBQVc7QUFBQTtBQUViLHNCQUFnQixRQUFRLFNBQVUsS0FBSztBQUtyQyxrQkFBVSxVQUFVLE9BQU8sTUFBTTtBQUVqQyxZQUFJLENBQUNTLE9BQWEsT0FBTyxRQUFRQSxPQUFhLFdBQVcsTUFBTTtBQUM3RCxvQkFBVSxPQUFPLE9BQU8sTUFBTUYsV0FBaUI7QUFBQTtBQUFBO0FBR25ELGFBQU87QUFBQTtBQUdULFdBQU8sdUJBQXVCLGdDQUFnQztBQUM1RCxXQUFLLFlBQVk7QUFBQTtBQUduQixXQUFPLFNBQVMsa0JBQWtCO0FBQ2hDLFVBQUksU0FBUztBQUViLFVBQUksZUFBZSxLQUFLLE9BQ3BCLFdBQVcsYUFBYSxVQUN4QixRQUFRLDhCQUE4QixjQUFjLENBQUM7QUFFekQsb0JBQWMsUUFBUSxTQUFVLE1BQU07QUFDcEMsZUFBTyxNQUFNO0FBQUE7QUFFZixVQUFJLFdBQVc7QUFDZixzQkFBZ0IsUUFBUSxTQUFVLFVBQVU7QUFDMUMsWUFBSSxZQUFZLE9BQU8sTUFBTTtBQUM3QixpQkFBUyxZQUFZLGNBQWMsU0FBWSxZQUFZLE9BQU8sTUFBTSxPQUFPO0FBQUE7QUFFakYsYUFBTyxNQUFNLGNBQWMsV0FBV1AsV0FBUyxJQUFJLE9BQU8sVUFBVSxLQUFLLFVBQVU7QUFBQSxRQUNqRixLQUFLLFlBQVksS0FBSztBQUFBO0FBQUE7QUFJMUIsV0FBTztBQUFBLElBQ1AsTUFBTTtBQUVSLFdBQVM7QUFDVCx3QkFBc0IsY0FBYyxrQkFBa0IsY0FBYztBQUNwRSx3QkFBc0IsWUFBWUEsV0FBUztBQUFBLElBQ3pDLFVBQVUsb0JBQW9CO0FBQUE7QUFBQSxLQUM3QlUsc0JBQTRCO0FBQy9CLFVBQVEsUUFBUSxTQUFVLFFBQVE7QUFDaEMsMEJBQXNCLFVBQVUsVUFBVSwwQkFBMEI7QUFDbEUsVUFBSTtBQUVKLGFBQVEsZUFBYyxLQUFLLE9BQU8sUUFBUSxNQUFNLGFBQWE7QUFBQTtBQUFBO0FBR2pFLE1BQUksbUJBQW1CO0FBRXZCLE1BQUksTUFBTSxZQUFZO0FBQ3BCLHVCQUFtQixNQUFNLFdBQVcsU0FBVSxPQUFPLEtBQUs7QUFDeEQsYUFBTyxNQUFNLGNBQWMsdUJBQXVCVixXQUFTLElBQUksT0FBTztBQUFBLFFBQ3BFLFVBQVU7QUFBQSxRQUNWLFVBQVU7QUFBQSxVQUNSLFVBQVU7QUFBQSxVQUNWLFlBQVk7QUFBQTtBQUFBLFFBRWQsUUFBUTtBQUFBO0FBQUE7QUFHWixxQkFBaUIsWUFBWSxzQkFBc0I7QUFBQTtBQUdyRCxtQkFBaUIsc0JBQXNCO0FBTXZDLG1CQUFpQixpQkFBaUIsU0FBVSxjQUFjLFdBQVcsYUFBYTtBQUNoRixRQUFJLGNBQWMsUUFBUTtBQUN4QixrQkFBWTtBQUFBO0FBR2QsV0FBTyxlQUFlLGNBQWNBLFdBQVMsSUFBSSxrQkFBa0IsWUFBWTtBQUFBO0FBR2pGLFNBQU87QUFBQTtBQzlLVCxlQUFlLEtBQUs7QUFDbkIsTUFBSSxHQUFHLElBQUcsTUFBSTtBQUVkLE1BQUksT0FBTyxRQUFRLFlBQVksT0FBTyxRQUFRLFVBQVU7QUFDdkQsV0FBTztBQUFBLGFBQ0csT0FBTyxRQUFRLFVBQVU7QUFDbkMsUUFBSSxNQUFNLFFBQVEsTUFBTTtBQUN2QixXQUFLLElBQUUsR0FBRyxJQUFJLElBQUksUUFBUSxLQUFLO0FBQzlCLFlBQUksSUFBSSxJQUFJO0FBQ1gsY0FBSSxLQUFJLE1BQU0sSUFBSSxLQUFLO0FBQ3RCLG1CQUFRLFFBQU87QUFDZixtQkFBTztBQUFBO0FBQUE7QUFBQTtBQUFBLFdBSUo7QUFDTixXQUFLLEtBQUssS0FBSztBQUNkLFlBQUksSUFBSSxJQUFJO0FBQ1gsaUJBQVEsUUFBTztBQUNmLGlCQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNWCxTQUFPO0FBQUE7QUFHTyxnQkFBWTtBQUMxQixNQUFJLElBQUUsR0FBRyxLQUFLLElBQUcsTUFBSTtBQUNyQixTQUFPLElBQUksVUFBVSxRQUFRO0FBQzVCLFFBQUksTUFBTSxVQUFVLE1BQU07QUFDekIsVUFBSSxLQUFJLE1BQU0sTUFBTTtBQUNuQixlQUFRLFFBQU87QUFDZixlQUFPO0FBQUE7QUFBQTtBQUFBO0FBSVYsU0FBTztBQUFBOzs7Ozs7QUN0Q1IsSUFBSSxPQUFVLGdCQUNWLFVBQVUsV0FDVixVQUFVLFdBQ1YsUUFBVSxTQUNWLE1BQVUsT0FDVixPQUFVLFFBQ1YsUUFBVSxTQUNWLE9BQVUsUUFDVixTQUFVLFVBQ1YsVUFBVTtBQUVkLElBQUksa0JBQWtCO0FBQUEsRUFDcEIsZ0JBQWdCO0FBQUEsRUFDaEIsV0FBVztBQUFBLEVBQ1gsV0FBVyxLQUFLO0FBQUEsRUFDaEIsU0FBUyxLQUFLLEtBQUs7QUFBQSxFQUNuQixPQUFPLEtBQUssS0FBSyxLQUFLO0FBQUEsRUFDdEIsUUFBUSxJQUFJLEtBQUssS0FBSyxLQUFLO0FBQUE7QUFHN0IsSUFBSSxrQkFBa0I7QUFBQSxFQUNwQixTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixVQUFVLEtBQUs7QUFBQSxFQUNmLFdBQVcsTUFBTTtBQUFBO0FBR25CLGdCQUFnQixPQUFNO0FBQ3BCLFNBQU8sQ0FBQyxJQUFJLFVBQVUsUUFBTyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSTtBQUFBO0FBR25FLG1CQUFtQixPQUFNO0FBQ3ZCLFNBQ0ksUUFBTyxNQUFNLEtBQ1YsUUFBTyxRQUFRLEtBQ2YsUUFBTyxRQUFRLElBQ2hCLEtBQ0E7QUFBQTtBQUdELGFBQWEsR0FBRyxLQUFLLE1BQU07QUFDaEMsTUFBSSxJQUFJLEtBQUs7QUFFYixVQUFRO0FBQUEsU0FDRDtBQUFBLFNBQ0E7QUFBQSxTQUNBO0FBQUEsU0FDQTtBQUFBLFNBQ0E7QUFBQSxTQUNBO0FBQ0gsYUFBTyxVQUFVLEdBQUcsTUFBTSxnQkFBZ0I7QUFBQSxTQUN2QztBQUFBLFNBQ0E7QUFBQSxTQUNBO0FBQUEsU0FDQTtBQUNILGFBQU8sVUFBVSxHQUFHLE1BQU0sZ0JBQWdCO0FBQUE7QUFHOUMsUUFBTSxJQUFJLFVBQVUscUJBQXFCLE9BQU87QUFBQTtBQUdsRCxtQkFBbUIsR0FBRyxLQUFLO0FBQ3pCLE1BQUksV0FBVyxJQUFJLEtBQUssQ0FBRSxJQUFLO0FBRS9CLFNBQU8sU0FBUyxHQUFHO0FBQUE7QUFHckIsbUJBQW1CLEdBQUcsS0FBSztBQUN6QixNQUFJLFFBQU8sRUFBRSxlQUNULFNBQVEsRUFBRSxZQUNWLE9BQU0sRUFBRSxXQUNSLGNBQWMsUUFBTyxLQUFLLFNBQVEsS0FDbEMsV0FBVyxLQUFLLE1BQU0sY0FBYyxLQUNwQyxZQUFZLGNBQWMsSUFDMUIsVUFBVSxLQUFLLElBQUksTUFBSyxPQUFPLFVBQVU7QUFFN0MsTUFBSSxXQUFXLElBQUksS0FBSztBQUN4QixXQUFTLFlBQVk7QUFJckIsV0FBUyxRQUFRO0FBRWpCLFdBQVMsU0FBUztBQUNsQixXQUFTLFFBQVE7QUFFakIsU0FBTztBQUFBO0FBR1Qsa0JBQWtCLGFBQWEsVUFBVTtBQUN2QyxNQUFJLGdCQUFnQixZQUFZLHFCQUM1QixhQUFhLFNBQVM7QUFJMUIsTUFBSSxjQUFlLGFBQWE7QUFFaEMsU0FBTyxJQUFJLEtBQUssQ0FBRSxXQUFZLGNBQWMsZ0JBQWdCO0FBQUE7QUFHdkQsa0JBQWtCLEdBQUcsS0FBSyxNQUFNO0FBQ3JDLFNBQU8sSUFBSSxHQUFHLENBQUMsS0FBSztBQUFBO0FBR2YsaUJBQWlCLEdBQUcsTUFBTSxhQUFhO0FBQzVDLE1BQUksSUFBSSxLQUFLO0FBRWIsVUFBUTtBQUFBLFNBQ0Q7QUFBQSxTQUNBO0FBQUEsU0FDQTtBQUNELFVBQUksTUFBTSxHQUFHO0FBQUEsU0FDWjtBQUNELFVBQUksS0FBSyxHQUFHO0FBQUEsU0FDWDtBQUFBLFNBQ0E7QUFDRCxVQUFJLE1BQU0sR0FBRztBQUFBLFNBQ1o7QUFDRCxVQUFJLFFBQVEsR0FBRztBQUFBLFNBQ2Q7QUFDRCxVQUFJLFFBQVEsR0FBRztBQUFBLFNBQ2Q7QUFDRCxVQUFJLGFBQWEsR0FBRztBQUFBO0FBRzFCLE1BQUksU0FBUztBQUNYLFFBQUksU0FBUyxHQUFHLEtBQUssS0FBSyxJQUFJO0FBRWhDLE1BQUksU0FBUztBQUNYLFFBQUksU0FBUyxHQUFHLEtBQUssS0FBSyxLQUFLO0FBRWpDLE1BQUksU0FBUztBQUNYLFFBQUksUUFBUSxHQUFHLEdBQUc7QUFFcEIsU0FBTztBQUFBO0FBR0YsZUFBZSxHQUFHLE1BQU0sYUFBWTtBQUN6QyxNQUFJLElBQUksS0FBSztBQUNiLE1BQUksUUFBUSxHQUFHLE1BQU07QUFDckIsVUFBUTtBQUFBLFNBQ0Q7QUFBQSxTQUNBO0FBQUEsU0FDQTtBQUFBLFNBQ0E7QUFBQSxTQUNBO0FBQ0gsVUFBSSxJQUFJLEdBQUcsR0FBRztBQUNkLFVBQUksU0FBUyxHQUFHLEdBQUc7QUFDbkIsUUFBRSxTQUFTLElBQUksSUFBSSxJQUFJO0FBQ3ZCO0FBQUEsU0FDRztBQUNILFFBQUUsU0FBUyxJQUFJLElBQUksSUFBSTtBQUN2QjtBQUFBLFNBQ0c7QUFBQSxTQUNBO0FBQUEsU0FDQTtBQUNILFVBQUksSUFBSSxHQUFHLEdBQUc7QUFDZCxVQUFJLFNBQVMsR0FBRyxHQUFHO0FBQUE7QUFFdkIsU0FBTztBQUFBO0FBR0YsSUFBSVcsT0FBTSxlQUFlLFNBQVMsR0FBRyxHQUFFO0FBQUUsU0FBTyxNQUFNO0FBQUE7QUFDdEQsSUFBSSxNQUFNLGVBQWUsU0FBUyxHQUFHLEdBQUU7QUFBRSxTQUFPLE1BQU07QUFBQTtBQUN0RCxJQUFJLEtBQU0sZUFBZSxTQUFTLEdBQUcsR0FBRTtBQUFFLFNBQU8sSUFBSTtBQUFBO0FBQ3BELElBQUksTUFBTSxlQUFlLFNBQVMsR0FBRyxHQUFFO0FBQUUsU0FBTyxLQUFLO0FBQUE7QUFDckQsSUFBSSxLQUFNLGVBQWUsU0FBUyxHQUFHLEdBQUU7QUFBRSxTQUFPLElBQUk7QUFBQTtBQUNwRCxJQUFJLE1BQU0sZUFBZSxTQUFTLEdBQUcsR0FBRTtBQUFFLFNBQU8sS0FBSztBQUFBO0FBRXJELGlCQUFjO0FBQ25CLFNBQU8sSUFBSSxLQUFLLEtBQUssSUFBSSxNQUFNLE1BQU07QUFBQTtBQUdoQyxpQkFBYztBQUNuQixTQUFPLElBQUksS0FBSyxLQUFLLElBQUksTUFBTSxNQUFNO0FBQUE7QUFHaEMsbUJBQWlCLE1BQUssTUFBSyxNQUFLLE1BQUs7QUFDMUMsU0FBTyxRQUFRO0FBRWYsU0FBUSxFQUFDLFFBQU8sSUFBSSxNQUFLLE1BQUssVUFDdEIsRUFBQyxRQUFPLElBQUksTUFBSyxNQUFLO0FBQUE7QUFHekIsSUFBSSxlQUFlLGVBQWU7QUFDbEMsSUFBSSxVQUFlLGVBQWU7QUFDbEMsSUFBSSxVQUFlLGVBQWU7QUFDbEMsSUFBSSxRQUFlLGVBQWU7QUFDbEMsSUFBSSxNQUFlLGVBQWU7QUFDbEMsSUFBSSxPQUFlLGVBQWU7QUFDbEMsSUFBSSxRQUFlLGVBQWU7QUFDbEMsSUFBSSxPQUFlLGVBQWU7QUFjbEMsaUJBQWlCLEdBQUcsS0FBSyxVQUFVO0FBQ3RDLE1BQUksS0FBSyxLQUFJLEtBQUssSUFBSyxhQUFZLE1BQU87QUFFMUMsU0FBTyxRQUFRLFNBQ1gsS0FDQSxJQUFJLEdBQUcsTUFBTSxJQUFHO0FBQUE7QUFxRHhCLHdCQUF3QixRQUFPO0FBQzdCLE1BQUksYUFBYyxTQUFTLFNBQVE7QUFDakMsWUFBTztBQUFBLFdBQ0E7QUFDSCxlQUFPO0FBQUEsV0FDSjtBQUNILGVBQU87QUFBQSxXQUNKO0FBQ0gsZUFBTztBQUFBLFdBQ0o7QUFDSCxlQUFPO0FBQUE7QUFFUCxlQUFPO0FBQUE7QUFBQSxJQUVWO0FBRUgsU0FBTyxTQUFTLEdBQUcsS0FBSTtBQUNyQixRQUFJLFFBQVE7QUFDVixhQUFPLEVBQUUsUUFBUTtBQUVuQixRQUFJLFVBQVUsSUFBSSxLQUFLO0FBQ3ZCLFlBQVEsUUFBUSxRQUFRO0FBRXhCLFFBQUcsY0FBYyxRQUFRLFFBQU0sYUFBYSxPQUFRLFlBQVcsV0FBVyxPQUFNLGNBQWUsUUFBUSxhQUFXLEVBQUUsYUFBVyxLQUFLLE1BQU0sTUFBSSxjQUFlO0FBRTNKLGNBQVEsUUFBTSxRQUFRLE1BQUk7QUFBQTtBQUc1QixXQUFPO0FBQUE7QUFBQTtBQUlYLHdCQUF3QixVQUFVO0FBQ2hDLFNBQU8sU0FBVSxHQUFHLEdBQUcsTUFBTTtBQUMzQixXQUFPLFNBQVMsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsR0FBRztBQUFBO0FBQUE7QUN6U3BDLGdDQUFnQyxPQUFNO0FBQ25ELE1BQUksVUFBUyxRQUFRO0FBQ25CLFVBQU0sSUFBSSxlQUFlO0FBQUE7QUFHM0IsU0FBTztBQUFBO0FDSVQsbUJBQW1CLE9BQU8sUUFBTyxNQUFLO0FBQ3BDLE1BQUksUUFBUSxJQUNSLFNBQVMsTUFBTTtBQUVuQixNQUFJLFNBQVEsR0FBRztBQUNiLGFBQVEsQ0FBQyxTQUFRLFNBQVMsSUFBSyxTQUFTO0FBQUE7QUFFMUMsU0FBTSxPQUFNLFNBQVMsU0FBUztBQUM5QixNQUFJLE9BQU0sR0FBRztBQUNYLFlBQU87QUFBQTtBQUVULFdBQVMsU0FBUSxPQUFNLElBQU0sT0FBTSxXQUFXO0FBQzlDLGNBQVc7QUFFWCxNQUFJLFNBQVMsTUFBTTtBQUNuQixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFdBQU8sU0FBUyxNQUFNLFFBQVE7QUFBQTtBQUVoQyxTQUFPO0FBQUE7QUNLVCxjQUFZLE9BQU8sT0FBTztBQUN4QixTQUFPLFVBQVUsU0FBVSxVQUFVLFNBQVMsVUFBVTtBQUFBO0FDaEMxRCxJQUFJQyxlQUFhLE9BQU8sVUFBVSxZQUFZLFVBQVUsT0FBTyxXQUFXLFVBQVU7QUFFcEYsbUJBQWVBO0FDQWYsSUFBSUMsYUFBVyxPQUFPLFFBQVEsWUFBWSxRQUFRLEtBQUssV0FBVyxVQUFVO0FBRzVFLElBQUlDLFNBQU9GLGdCQUFjQyxjQUFZLFNBQVM7QUFFOUMsYUFBZUM7QUNMZixJQUFJQyxXQUFTRCxPQUFLO0FBRWxCLGVBQWVDO0FDRmYsSUFBSUMsZ0JBQWMsT0FBTztBQUd6QixJQUFJM0UsbUJBQWlCMkUsY0FBWTtBQU9qQyxJQUFJQyx5QkFBdUJELGNBQVk7QUFHdkMsSUFBSUUsbUJBQWlCSCxXQUFTQSxTQUFPLGNBQWM7QUFTbkQscUJBQW1CLE9BQU87QUFDeEIsTUFBSSxRQUFRMUUsaUJBQWUsS0FBSyxPQUFPNkUsbUJBQ25DLE1BQU0sTUFBTUE7QUFFaEIsTUFBSTtBQUNGLFVBQU1BLG9CQUFrQjtBQUN4QixRQUFJLFdBQVc7QUFBQSxXQUNSLEdBQVA7QUFBQTtBQUVGLE1BQUksU0FBU0QsdUJBQXFCLEtBQUs7QUFDdkMsTUFBSSxVQUFVO0FBQ1osUUFBSSxPQUFPO0FBQ1QsWUFBTUMsb0JBQWtCO0FBQUEsV0FDbkI7QUFDTCxhQUFPLE1BQU1BO0FBQUFBO0FBQUFBO0FBR2pCLFNBQU87QUFBQTtBQ3pDVCxJQUFJRixnQkFBYyxPQUFPO0FBT3pCLElBQUlDLHlCQUF1QkQsY0FBWTtBQVN2QywwQkFBd0IsT0FBTztBQUM3QixTQUFPQyx1QkFBcUIsS0FBSztBQUFBO0FDYm5DLElBQUlFLFlBQVUsaUJBQ1ZDLGlCQUFlO0FBR25CLElBQUlGLG1CQUFpQkgsV0FBU0EsU0FBTyxjQUFjO0FBU25ELHNCQUFvQixPQUFPO0FBQ3pCLE1BQUksU0FBUyxNQUFNO0FBQ2pCLFdBQU8sVUFBVSxTQUFZSyxpQkFBZUQ7QUFBQUE7QUFFOUMsU0FBUUQsb0JBQWtCQSxvQkFBa0IsT0FBTyxTQUMvQ0csWUFBVSxTQUNWQyxpQkFBZTtBQUFBO0FDQ3JCLG9CQUFrQixPQUFPO0FBQ3ZCLE1BQUksT0FBTyxPQUFPO0FBQ2xCLFNBQU8sU0FBUyxRQUFTLFNBQVEsWUFBWSxRQUFRO0FBQUE7QUN2QnZELElBQUlDLGFBQVcsMEJBQ1hDLFlBQVUscUJBQ1ZDLFdBQVMsOEJBQ1RDLGFBQVc7QUFtQmYsc0JBQW9CLE9BQU87QUFDekIsTUFBSSxDQUFDQyxXQUFTLFFBQVE7QUFDcEIsV0FBTztBQUFBO0FBSVQsTUFBSSxNQUFNQyxhQUFXO0FBQ3JCLFNBQU8sT0FBT0osYUFBVyxPQUFPQyxZQUFVLE9BQU9GLGNBQVksT0FBT0c7QUFBQUE7QUNoQ3RFLElBQUlHLHFCQUFtQjtBQTRCdkIsb0JBQWtCLE9BQU87QUFDdkIsU0FBTyxPQUFPLFNBQVMsWUFDckIsUUFBUSxNQUFNLFFBQVEsS0FBSyxLQUFLLFNBQVNBO0FBQUFBO0FDSDdDLHVCQUFxQixPQUFPO0FBQzFCLFNBQU8sU0FBUyxRQUFRQyxXQUFTLE1BQU0sV0FBVyxDQUFDQyxhQUFXO0FBQUE7QUM1QmhFLElBQUlGLHFCQUFtQjtBQUd2QixJQUFJRyxhQUFXO0FBVWYsbUJBQWlCLE9BQU8sUUFBUTtBQUM5QixNQUFJLE9BQU8sT0FBTztBQUNsQixXQUFTLFVBQVUsT0FBT0gscUJBQW1CO0FBRTdDLFNBQU8sQ0FBQyxDQUFDLFVBQ04sU0FBUSxZQUNOLFFBQVEsWUFBWUcsV0FBUyxLQUFLLFdBQ2hDLFNBQVEsTUFBTSxRQUFRLEtBQUssS0FBSyxRQUFRO0FBQUE7QUNOakQsd0JBQXdCLE9BQU8sT0FBTyxRQUFRO0FBQzVDLE1BQUksQ0FBQ0wsV0FBUyxTQUFTO0FBQ3JCLFdBQU87QUFBQTtBQUVULE1BQUksT0FBTyxPQUFPO0FBQ2xCLE1BQUksUUFBUSxXQUNITSxjQUFZLFdBQVdDLFVBQVEsT0FBTyxPQUFPLFVBQzdDLFFBQVEsWUFBWSxTQUFTLFFBQ2hDO0FBQ0osV0FBT3ZCLEtBQUcsT0FBTyxRQUFRO0FBQUE7QUFFM0IsU0FBTztBQUFBO0FDekJULElBQUl3QixpQkFBZTtBQVVuQiwyQkFBeUIsUUFBUTtBQUMvQixNQUFJLFFBQVEsT0FBTztBQUVuQixTQUFPLFdBQVdBLGVBQWEsS0FBSyxPQUFPLE9BQU8sU0FBUztBQUFBO0FBQzNELFNBQU87QUFBQTtBQ1pULElBQUlDLGdCQUFjO0FBU2xCLG9CQUFrQixRQUFRO0FBQ3hCLFNBQU8sU0FDSCxPQUFPLE1BQU0sR0FBR0Msa0JBQWdCLFVBQVUsR0FBRyxRQUFRRCxlQUFhLE1BQ2xFO0FBQUE7QUNTTix3QkFBc0IsT0FBTztBQUMzQixTQUFPLFNBQVMsUUFBUSxPQUFPLFNBQVM7QUFBQTtBQ3JCMUMsSUFBSUUsY0FBWTtBQW1CaEIsb0JBQWtCLE9BQU87QUFDdkIsU0FBTyxPQUFPLFNBQVMsWUFDcEJDLGVBQWEsVUFBVVgsYUFBVyxVQUFVVTtBQUFBQTtBQ3BCakQsSUFBSUUsUUFBTSxJQUFJO0FBR2QsSUFBSUMsZUFBYTtBQUdqQixJQUFJQyxlQUFhO0FBR2pCLElBQUlDLGNBQVk7QUFHaEIsSUFBSUMsaUJBQWU7QUF5Qm5CLG9CQUFrQixPQUFPO0FBQ3ZCLE1BQUksT0FBTyxTQUFTLFVBQVU7QUFDNUIsV0FBTztBQUFBO0FBRVQsTUFBSUMsV0FBUyxRQUFRO0FBQ25CLFdBQU9MO0FBQUFBO0FBRVQsTUFBSWIsV0FBUyxRQUFRO0FBQ25CLFFBQUksUUFBUSxPQUFPLE1BQU0sV0FBVyxhQUFhLE1BQU0sWUFBWTtBQUNuRSxZQUFRQSxXQUFTLFNBQVUsUUFBUSxLQUFNO0FBQUE7QUFFM0MsTUFBSSxPQUFPLFNBQVMsVUFBVTtBQUM1QixXQUFPLFVBQVUsSUFBSSxRQUFRLENBQUM7QUFBQTtBQUVoQyxVQUFRbUIsV0FBUztBQUNqQixNQUFJLFdBQVdKLGFBQVcsS0FBSztBQUMvQixTQUFRLFlBQVlDLFlBQVUsS0FBSyxTQUMvQkMsZUFBYSxNQUFNLE1BQU0sSUFBSSxXQUFXLElBQUksS0FDM0NILGFBQVcsS0FBSyxTQUFTRCxRQUFNLENBQUM7QUFBQTtBQ3pEdkMsSUFBSU8sYUFBVyxJQUFJLEdBQ2ZDLGdCQUFjO0FBeUJsQixvQkFBa0IsT0FBTztBQUN2QixNQUFJLENBQUMsT0FBTztBQUNWLFdBQU8sVUFBVSxJQUFJLFFBQVE7QUFBQTtBQUUvQixVQUFRQyxXQUFTO0FBQ2pCLE1BQUksVUFBVUYsY0FBWSxVQUFVLENBQUNBLFlBQVU7QUFDN0MsUUFBSSxPQUFRLFFBQVEsSUFBSSxLQUFLO0FBQzdCLFdBQU8sT0FBT0M7QUFBQUE7QUFFaEIsU0FBTyxVQUFVLFFBQVEsUUFBUTtBQUFBO0FDVm5DLHFCQUFtQixPQUFPO0FBQ3hCLE1BQUksU0FBU0UsV0FBUyxRQUNsQixZQUFZLFNBQVM7QUFFekIsU0FBTyxXQUFXLFNBQVUsWUFBWSxTQUFTLFlBQVksU0FBVTtBQUFBO0FDM0J6RSxJQUFJQyxlQUFhLEtBQUssTUFDbEJDLGNBQVksS0FBSztBQXVCckIsZUFBZSxPQUFPLE9BQU0sT0FBTztBQUNqQyxNQUFLLFFBQVEsZUFBZSxPQUFPLE9BQU0sU0FBUyxVQUFTLFFBQVk7QUFDckUsWUFBTztBQUFBLFNBQ0Y7QUFDTCxZQUFPQSxZQUFVQyxZQUFVLFFBQU87QUFBQTtBQUVwQyxNQUFJLFNBQVMsU0FBUyxPQUFPLElBQUksTUFBTTtBQUN2QyxNQUFJLENBQUMsVUFBVSxRQUFPLEdBQUc7QUFDdkIsV0FBTztBQUFBO0FBRVQsTUFBSSxRQUFRLEdBQ1IsV0FBVyxHQUNYLFNBQVMsTUFBTUYsYUFBVyxTQUFTO0FBRXZDLFNBQU8sUUFBUSxRQUFRO0FBQ3JCLFdBQU8sY0FBYyxVQUFVLE9BQU8sT0FBUSxTQUFTO0FBQUE7QUFFekQsU0FBTztBQUFBO0FDekNNLHlCQUF1QixNQUFNO0FBQzFDLFNBQU8sUUFBUSxLQUFLLGlCQUFpQjtBQUFBO0FDQ3hCLHFCQUFxQixNQUFNO0FBQ3hDLE1BQUksTUFBTUcsZ0JBQWM7QUFDeEIsU0FBTyxPQUFPLElBQUksZUFBZTtBQUFBO0FDRHBCLDRCQUEwQixNQUFNLGVBQWU7QUFDNUQsU0FBTyxZQUFZLE1BQU0saUJBQWlCLE1BQU07QUFBQTtBQ1RsRCxJQUFJLFNBQVM7QUFDRSxtQkFBbUIsUUFBUTtBQUN4QyxTQUFPLE9BQU8sUUFBUSxRQUFRLE9BQU87QUFBQTtBQ0l2QyxJQUFJLFlBQVk7QUFDRCw0QkFBNEIsUUFBUTtBQUNqRCxTQUFPLFVBQVUsUUFBUSxRQUFRLFdBQVc7QUFBQTtBQ1I5QyxJQUFJLHNCQUFzQjtBQUNYLHFCQUFxQixPQUFPO0FBQ3pDLFNBQU8sQ0FBQyxDQUFFLFVBQVMsb0JBQW9CLEtBQUs7QUFBQTtBQ0U5QyxlQUFlLE1BQU0sV0FBVTtBQUM3QixNQUFJLE1BQU07QUFDVixNQUFJLGFBQWE7QUFFakIsTUFBSSxPQUFPLGNBQWEsVUFBVTtBQUNoQyxXQUFPLEtBQUssTUFBTSxpQkFBaUJDLG1CQUFVLGVBQWNDLG1CQUFpQixNQUFNLGlCQUFpQkQsbUJBQVU7QUFBQTtBQUcvRyxTQUFPLEtBQUssV0FBVSxRQUFRLFNBQVUsS0FBSztBQUMzQyxRQUFJLFFBQVEsVUFBUztBQUVyQixRQUFJLENBQUMsU0FBUyxVQUFVLEdBQUc7QUFDekIsV0FBSyxNQUFNLGVBQWVBLG1CQUFVO0FBQUEsZUFDM0IsWUFBWSxNQUFNO0FBQzNCLG9CQUFjLE1BQU0sTUFBTSxRQUFRO0FBQUEsV0FDN0I7QUFDTCxhQUFPQSxtQkFBVSxPQUFPLE9BQU8sUUFBUTtBQUFBO0FBQUE7QUFJM0MsTUFBSSxZQUFZO0FBQ2QsV0FBTyxnQkFBZ0IsYUFBYTtBQUFBO0FBR3RDLE9BQUssTUFBTSxXQUFXLE1BQU07QUFBQTtBQ3BCZixvQkFBa0IsU0FBUyxNQUFNO0FBRzlDLE1BQUksUUFBUTtBQUFVLFdBQU8sUUFBUSxTQUFTO0FBQzlDLE1BQUksUUFBUTtBQUF5QixXQUFPLFlBQVksUUFBUSxDQUFDLENBQUUsU0FBUSx3QkFBd0IsUUFBUTtBQUFBOzs7Ozs7QUNaOUYsb0JBQW9CLFNBQVM7QUFDMUMsU0FBTyxjQUFjLFdBQVcsUUFBUSxhQUFhLFNBQVM7QUFBQTtBQ0FqRCxrQkFBa0IsTUFBTTtBQUNyQyxNQUFJLFlBQVksUUFBUSxLQUFLLFdBQVc7QUFBTSxXQUFPO0FBQ3JELE1BQUksV0FBVztBQUFPLFdBQU8sS0FBSyxlQUFlO0FBQ2pELFNBQU87QUFBQTtBQ0hNLDJCQUEyQixTQUFRO0FBQ2hELE1BQUksT0FBTyxZQUFXLGdCQUFnQixlQUFlO0FBRXJELDBCQUF3QixNQUFNLEtBQUs7QUFDakMsUUFBSSxNQUFNLFNBQVM7QUFFbkIsUUFBSSxRQUFRLFFBQVc7QUFDckIsYUFBTyxNQUFNLElBQUksV0FBVSxLQUFLO0FBQUE7QUFHbEMsUUFBSSxLQUFLO0FBQ1AsVUFBSSxTQUFTLElBQUksVUFBUztBQUFBLFdBQ3JCO0FBQ0wsV0FBSyxRQUFRO0FBQUE7QUFBQTtBQUlqQixTQUFPO0FBQUE7QUNWVCxvQkFBZUUsa0JBQWtCO0FDQWpDLG1CQUFlQSxrQkFBa0I7QUNFbEIsa0JBQWdCLE1BQU07QUFDbkMsTUFBSSxNQUFNSCxnQkFBYztBQUN4QixNQUFJLE1BQU07QUFBQSxJQUNSLEtBQUs7QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLFFBQVE7QUFBQSxJQUNSLE9BQU87QUFBQTtBQUVULE1BQUksVUFBVSxPQUFPLElBQUk7QUFFekIsTUFBSSxDQUFDLFdBQVcsQ0FBQ0ksV0FBUyxTQUFTO0FBQU8sV0FBTztBQUNqRCxNQUFJLEtBQUssMEJBQTBCO0FBQVcsVUFBTSxLQUFLO0FBQ3pELFFBQU07QUFBQSxJQUNKLEtBQUssSUFBSSxNQUFNQyxhQUFVLFdBQVksU0FBUSxhQUFhO0FBQUEsSUFDMUQsTUFBTSxJQUFJLE9BQU9DLGNBQVcsV0FBWSxTQUFRLGNBQWM7QUFBQSxJQUM5RCxPQUFPLElBQUk7QUFBQSxJQUNYLFFBQVEsSUFBSTtBQUFBO0FBRWQsU0FBTztBQUFBO0FDekJULElBQUlDLGtCQUFnQix3QkFBdUIsR0FBRztBQUM1QyxTQUFPLENBQUMsQ0FBQyxLQUFLLGtCQUFrQjtBQUFBO0FBR25CLHNCQUFzQixNQUFNO0FBQ3pDLE1BQUksTUFBTVAsZ0JBQWM7QUFDeEIsTUFBSSxVQUFTLFFBQVEsS0FBSztBQUUxQixTQUFPTyxnQkFBYyxZQUFXLFFBQU8sYUFBYSxVQUFVQyxNQUFJLFNBQVEsZ0JBQWdCLFVBQVU7QUFDbEcsY0FBUyxRQUFPO0FBQUE7QUFHbEIsU0FBTyxXQUFVLElBQUk7QUFBQTtBQ1J2QixJQUFJLFdBQVcsbUJBQWtCLE1BQU07QUFDckMsU0FBTyxLQUFLLFlBQVksS0FBSyxTQUFTO0FBQUE7QUFVekIsa0JBQWtCLE1BQU1DLGdCQUFjO0FBQ25ELE1BQUksZUFBZTtBQUFBLElBQ2pCLEtBQUs7QUFBQSxJQUNMLE1BQU07QUFBQTtBQUVSLE1BQUk7QUFHSixNQUFJRCxNQUFJLE1BQU0sZ0JBQWdCLFNBQVM7QUFDckMsY0FBUyxLQUFLO0FBQUEsU0FDVDtBQUNMLFFBQUksVUFBU0Msa0JBQWdCQyxhQUFnQjtBQUM3QyxjQUFTQyxTQUFVO0FBQ25CLFFBQUksU0FBUyxhQUFZO0FBQVEscUJBQWVBLFNBQVU7QUFDMUQsUUFBSSxZQUFZLE9BQU9ILE1BQUksU0FBUSxxQkFBcUI7QUFDeEQsaUJBQWEsT0FBTyxTQUFTLFdBQVcsTUFBTUgsYUFBVSxZQUFXO0FBQ25FLFFBQUksYUFBYSxPQUFPRyxNQUFJLFNBQVEsc0JBQXNCO0FBQzFELGlCQUFhLFFBQVEsU0FBUyxZQUFZLE1BQU1GLGNBQVcsWUFBVztBQUFBO0FBR3hFLE1BQUksWUFBWSxPQUFPRSxNQUFJLE1BQU0sZ0JBQWdCO0FBQ2pELE1BQUksYUFBYSxPQUFPQSxNQUFJLE1BQU0saUJBQWlCO0FBRW5ELFNBQU85RCxXQUFTLElBQUksU0FBUTtBQUFBLElBQzFCLEtBQUssUUFBTyxNQUFNLGFBQWEsTUFBTyxVQUFTLFdBQVcsT0FBTztBQUFBLElBQ2pFLE1BQU0sUUFBTyxPQUFPLGFBQWEsT0FBUSxVQUFTLFlBQVksT0FBTztBQUFBO0FBQUE7QUMzQ3pFLGdCQUFlLENBQUMsQ0FBRSxRQUFPLFdBQVcsZUFBZSxPQUFPLFlBQVksT0FBTyxTQUFTO0FDR3RGLElBQUksT0FBTyxJQUFJLE9BQU87QUFFdEIsa0JBQWtCLEtBQUk7QUFDcEIsTUFBSSxPQUFPLElBQUksT0FBTztBQUN0QixNQUFJLEtBQUssS0FBSyxJQUFJLEdBQUcsS0FBTSxRQUFPO0FBQ2xDLE1BQUksU0FBUyxXQUFXLEtBQUk7QUFDNUIsU0FBTztBQUNQLFNBQU87QUFBQTtBQUdULElBQUksVUFBVSxDQUFDLElBQUksVUFBVSxPQUFPLEtBQUs7QUFDekMsSUFBSSxlQUFlO0FBQ25CLElBQUksVUFBVTtBQUVkLElBQUlrRSxXQUFTLGlCQUFnQixRQUFRLEdBQUc7QUFDdEMsU0FBTyxTQUFVLEVBQUMsU0FBUyxJQUFJLEVBQUUsR0FBRyxnQkFBZ0IsRUFBRSxPQUFPLE1BQU07QUFBQTtBQUdyRSxJQUFJLFdBQVc7QUFDYixVQUFRLEtBQUssU0FBVSxRQUFRO0FBQzdCLFFBQUksWUFBWUEsU0FBTyxRQUFRO0FBRS9CLFFBQUksYUFBYSxRQUFRO0FBQ3ZCLHFCQUFlQSxTQUFPLFFBQVE7QUFFOUIsZ0JBQVUsa0JBQWlCLEtBQUk7QUFDN0IsZUFBTyxPQUFPLFdBQVc7QUFBQTtBQUFBO0FBSTdCLFdBQU8sQ0FBQyxDQUFDO0FBQUE7QUFBQTtBQUlOLElBQUksU0FBUyxpQkFBZ0IsS0FBSTtBQUV0QyxNQUFJLE9BQU8sT0FBTyxrQkFBa0I7QUFBWSxXQUFPLGNBQWM7QUFBQTtBQUVoRSxJQUFJLFVBQVU7QUNsQ3JCLDRCQUEwQjtBQUN4QixPQUFLLFdBQVc7QUFDaEIsT0FBSyxPQUFPO0FBQUE7QUNDZCx3QkFBc0IsT0FBTyxLQUFLO0FBQ2hDLE1BQUksU0FBUyxNQUFNO0FBQ25CLFNBQU8sVUFBVTtBQUNmLFFBQUl2RCxLQUFHLE1BQU0sUUFBUSxJQUFJLE1BQU07QUFDN0IsYUFBTztBQUFBO0FBQUE7QUFHWCxTQUFPO0FBQUE7QUNkVCxJQUFJd0QsZUFBYSxNQUFNO0FBR3ZCLElBQUlDLFdBQVNELGFBQVc7QUFXeEIsMkJBQXlCLEtBQUs7QUFDNUIsTUFBSSxPQUFPLEtBQUssVUFDWixRQUFRRSxlQUFhLE1BQU07QUFFL0IsTUFBSSxRQUFRLEdBQUc7QUFDYixXQUFPO0FBQUE7QUFFVCxNQUFJLFlBQVksS0FBSyxTQUFTO0FBQzlCLE1BQUksU0FBUyxXQUFXO0FBQ3RCLFNBQUs7QUFBQSxTQUNBO0FBQ0xELGFBQU8sS0FBSyxNQUFNLE9BQU87QUFBQTtBQUUzQixJQUFFLEtBQUs7QUFDUCxTQUFPO0FBQUE7QUNwQlQsd0JBQXNCLEtBQUs7QUFDekIsTUFBSSxPQUFPLEtBQUssVUFDWixRQUFRQyxlQUFhLE1BQU07QUFFL0IsU0FBTyxRQUFRLElBQUksU0FBWSxLQUFLLE9BQU87QUFBQTtBQ0o3Qyx3QkFBc0IsS0FBSztBQUN6QixTQUFPQSxlQUFhLEtBQUssVUFBVSxPQUFPO0FBQUE7QUNBNUMsd0JBQXNCLEtBQUssT0FBTztBQUNoQyxNQUFJLE9BQU8sS0FBSyxVQUNaLFFBQVFBLGVBQWEsTUFBTTtBQUUvQixNQUFJLFFBQVEsR0FBRztBQUNiLE1BQUUsS0FBSztBQUNQLFNBQUssS0FBSyxDQUFDLEtBQUs7QUFBQSxTQUNYO0FBQ0wsU0FBSyxPQUFPLEtBQUs7QUFBQTtBQUVuQixTQUFPO0FBQUE7QUNUVCxxQkFBbUIsU0FBUztBQUMxQixNQUFJLFFBQVEsSUFDUixTQUFTLFdBQVcsT0FBTyxJQUFJLFFBQVE7QUFFM0MsT0FBSztBQUNMLFNBQU8sRUFBRSxRQUFRLFFBQVE7QUFDdkIsUUFBSSxRQUFRLFFBQVE7QUFDcEIsU0FBSyxJQUFJLE1BQU0sSUFBSSxNQUFNO0FBQUE7QUFBQTtBQUs3QkMsWUFBVSxVQUFVLFFBQVFDO0FBQzVCRCxZQUFVLFVBQVUsWUFBWUU7QUFDaENGLFlBQVUsVUFBVSxNQUFNRztBQUMxQkgsWUFBVSxVQUFVLE1BQU1JO0FBQzFCSixZQUFVLFVBQVUsTUFBTUs7QUNwQjFCLHdCQUFzQjtBQUNwQixPQUFLLFdBQVcsSUFBSUw7QUFDcEIsT0FBSyxPQUFPO0FBQUE7QUNGZCx1QkFBcUIsS0FBSztBQUN4QixNQUFJLE9BQU8sS0FBSyxVQUNaLFNBQVMsS0FBSyxVQUFVO0FBRTVCLE9BQUssT0FBTyxLQUFLO0FBQ2pCLFNBQU87QUFBQTtBQ0xULG9CQUFrQixLQUFLO0FBQ3JCLFNBQU8sS0FBSyxTQUFTLElBQUk7QUFBQTtBQ0QzQixvQkFBa0IsS0FBSztBQUNyQixTQUFPLEtBQUssU0FBUyxJQUFJO0FBQUE7QUNQM0IsSUFBSU0sZUFBYTlELE9BQUs7QUFFdEIsbUJBQWU4RDtBQ0ZmLElBQUlDLGVBQWMsV0FBVztBQUMzQixNQUFJLE1BQU0sU0FBUyxLQUFLRCxnQkFBY0EsYUFBVyxRQUFRQSxhQUFXLEtBQUssWUFBWTtBQUNyRixTQUFPLE1BQU8sbUJBQW1CLE1BQU87QUFBQTtBQVUxQyxvQkFBa0IsTUFBTTtBQUN0QixTQUFPLENBQUMsQ0FBQ0MsZ0JBQWVBLGdCQUFjO0FBQUE7QUNmeEMsSUFBSUMsY0FBWSxTQUFTO0FBR3pCLElBQUlDLGlCQUFlRCxZQUFVO0FBUzdCLG9CQUFrQixNQUFNO0FBQ3RCLE1BQUksUUFBUSxNQUFNO0FBQ2hCLFFBQUk7QUFDRixhQUFPQyxlQUFhLEtBQUs7QUFBQSxhQUNsQixHQUFQO0FBQUE7QUFDRixRQUFJO0FBQ0YsYUFBUSxPQUFPO0FBQUEsYUFDUixHQUFQO0FBQUE7QUFBQTtBQUVKLFNBQU87QUFBQTtBQ2JULElBQUlDLGlCQUFlO0FBR25CLElBQUlDLGlCQUFlO0FBR25CLElBQUlILGNBQVksU0FBUyxXQUNyQjlELGdCQUFjLE9BQU87QUFHekIsSUFBSStELGlCQUFlRCxZQUFVO0FBRzdCLElBQUl6SSxtQkFBaUIyRSxjQUFZO0FBR2pDLElBQUlrRSxlQUFhLE9BQU8sTUFDdEJILGVBQWEsS0FBSzFJLGtCQUFnQixRQUFRMkksZ0JBQWMsUUFDdkQsUUFBUSwwREFBMEQsV0FBVztBQVdoRix3QkFBc0IsT0FBTztBQUMzQixNQUFJLENBQUNyRCxXQUFTLFVBQVV3RCxXQUFTLFFBQVE7QUFDdkMsV0FBTztBQUFBO0FBRVQsTUFBSSxVQUFVcEQsYUFBVyxTQUFTbUQsZUFBYUQ7QUFDL0MsU0FBTyxRQUFRLEtBQUtHLFdBQVM7QUFBQTtBQ25DL0Isb0JBQWtCLFFBQVEsS0FBSztBQUM3QixTQUFPLFVBQVUsT0FBTyxTQUFZLE9BQU87QUFBQTtBQ0U3QyxxQkFBbUIsUUFBUSxLQUFLO0FBQzlCLE1BQUksUUFBUUMsV0FBUyxRQUFRO0FBQzdCLFNBQU9DLGVBQWEsU0FBUyxRQUFRO0FBQUE7QUNUdkMsSUFBSUMsUUFBTUMsWUFBVTFFLFFBQU07QUFFMUIsWUFBZXlFO0FDSGYsSUFBSUUsaUJBQWVELFlBQVUsUUFBUTtBQUVyQyxxQkFBZUM7QUNJZix1QkFBcUI7QUFDbkIsT0FBSyxXQUFXQSxpQkFBZUEsZUFBYSxRQUFRO0FBQ3BELE9BQUssT0FBTztBQUFBO0FDRGQsc0JBQW9CLEtBQUs7QUFDdkIsTUFBSSxTQUFTLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSyxTQUFTO0FBQ25ELE9BQUssUUFBUSxTQUFTLElBQUk7QUFDMUIsU0FBTztBQUFBO0FDVlQsSUFBSUMsbUJBQWlCO0FBR3JCLElBQUkxRSxnQkFBYyxPQUFPO0FBR3pCLElBQUkzRSxtQkFBaUIyRSxjQUFZO0FBV2pDLG1CQUFpQixLQUFLO0FBQ3BCLE1BQUksT0FBTyxLQUFLO0FBQ2hCLE1BQUl5RSxnQkFBYztBQUNoQixRQUFJLFNBQVMsS0FBSztBQUNsQixXQUFPLFdBQVdDLG1CQUFpQixTQUFZO0FBQUE7QUFFakQsU0FBT3JKLGlCQUFlLEtBQUssTUFBTSxPQUFPLEtBQUssT0FBTztBQUFBO0FDdkJ0RCxJQUFJMkUsZ0JBQWMsT0FBTztBQUd6QixJQUFJM0UsbUJBQWlCMkUsY0FBWTtBQVdqQyxtQkFBaUIsS0FBSztBQUNwQixNQUFJLE9BQU8sS0FBSztBQUNoQixTQUFPeUUsaUJBQWdCLEtBQUssU0FBUyxTQUFhcEosaUJBQWUsS0FBSyxNQUFNO0FBQUE7QUNoQjlFLElBQUlxSixtQkFBaUI7QUFZckIsbUJBQWlCLEtBQUssT0FBTztBQUMzQixNQUFJLE9BQU8sS0FBSztBQUNoQixPQUFLLFFBQVEsS0FBSyxJQUFJLE9BQU8sSUFBSTtBQUNqQyxPQUFLLE9BQVFELGtCQUFnQixVQUFVLFNBQWFDLG1CQUFpQjtBQUNyRSxTQUFPO0FBQUE7QUNOVCxnQkFBYyxTQUFTO0FBQ3JCLE1BQUksUUFBUSxJQUNSLFNBQVMsV0FBVyxPQUFPLElBQUksUUFBUTtBQUUzQyxPQUFLO0FBQ0wsU0FBTyxFQUFFLFFBQVEsUUFBUTtBQUN2QixRQUFJLFFBQVEsUUFBUTtBQUNwQixTQUFLLElBQUksTUFBTSxJQUFJLE1BQU07QUFBQTtBQUFBO0FBSzdCQyxPQUFLLFVBQVUsUUFBUUM7QUFDdkJELE9BQUssVUFBVSxZQUFZRTtBQUMzQkYsT0FBSyxVQUFVLE1BQU1HO0FBQ3JCSCxPQUFLLFVBQVUsTUFBTUk7QUFDckJKLE9BQUssVUFBVSxNQUFNSztBQ2xCckIsMkJBQXlCO0FBQ3ZCLE9BQUssT0FBTztBQUNaLE9BQUssV0FBVztBQUFBLElBQ2QsUUFBUSxJQUFJTDtBQUFBQSxJQUNaLE9BQU8sSUFBS0osVUFBT2pCO0FBQUFBLElBQ25CLFVBQVUsSUFBSXFCO0FBQUFBO0FBQUFBO0FDVGxCLHFCQUFtQixPQUFPO0FBQ3hCLE1BQUksT0FBTyxPQUFPO0FBQ2xCLFNBQVEsUUFBUSxZQUFZLFFBQVEsWUFBWSxRQUFRLFlBQVksUUFBUSxZQUN2RSxVQUFVLGNBQ1YsVUFBVTtBQUFBO0FDRGpCLHNCQUFvQixLQUFLLEtBQUs7QUFDNUIsTUFBSSxPQUFPLElBQUk7QUFDZixTQUFPTSxZQUFVLE9BQ2IsS0FBSyxPQUFPLE9BQU8sV0FBVyxXQUFXLFVBQ3pDLEtBQUs7QUFBQTtBQ0hYLDBCQUF3QixLQUFLO0FBQzNCLE1BQUksU0FBU0MsYUFBVyxNQUFNLEtBQUssVUFBVTtBQUM3QyxPQUFLLFFBQVEsU0FBUyxJQUFJO0FBQzFCLFNBQU87QUFBQTtBQ0hULHVCQUFxQixLQUFLO0FBQ3hCLFNBQU9BLGFBQVcsTUFBTSxLQUFLLElBQUk7QUFBQTtBQ0RuQyx1QkFBcUIsS0FBSztBQUN4QixTQUFPQSxhQUFXLE1BQU0sS0FBSyxJQUFJO0FBQUE7QUNBbkMsdUJBQXFCLEtBQUssT0FBTztBQUMvQixNQUFJLE9BQU9BLGFBQVcsTUFBTSxNQUN4QixRQUFPLEtBQUs7QUFFaEIsT0FBSyxJQUFJLEtBQUs7QUFDZCxPQUFLLFFBQVEsS0FBSyxRQUFRLFFBQU8sSUFBSTtBQUNyQyxTQUFPO0FBQUE7QUNMVCxvQkFBa0IsU0FBUztBQUN6QixNQUFJLFFBQVEsSUFDUixTQUFTLFdBQVcsT0FBTyxJQUFJLFFBQVE7QUFFM0MsT0FBSztBQUNMLFNBQU8sRUFBRSxRQUFRLFFBQVE7QUFDdkIsUUFBSSxRQUFRLFFBQVE7QUFDcEIsU0FBSyxJQUFJLE1BQU0sSUFBSSxNQUFNO0FBQUE7QUFBQTtBQUs3QkMsV0FBUyxVQUFVLFFBQVFDO0FBQzNCRCxXQUFTLFVBQVUsWUFBWUU7QUFDL0JGLFdBQVMsVUFBVSxNQUFNRztBQUN6QkgsV0FBUyxVQUFVLE1BQU1JO0FBQ3pCSixXQUFTLFVBQVUsTUFBTUs7QUN4QnpCLElBQUlDLHFCQUFtQjtBQVl2QixvQkFBa0IsS0FBSyxPQUFPO0FBQzVCLE1BQUksT0FBTyxLQUFLO0FBQ2hCLE1BQUksZ0JBQWdCbkMsYUFBVztBQUM3QixRQUFJLFFBQVEsS0FBSztBQUNqQixRQUFJLENBQUNpQixTQUFRLE1BQU0sU0FBU2tCLHFCQUFtQixHQUFJO0FBQ2pELFlBQU0sS0FBSyxDQUFDLEtBQUs7QUFDakIsV0FBSyxPQUFPLEVBQUUsS0FBSztBQUNuQixhQUFPO0FBQUE7QUFFVCxXQUFPLEtBQUssV0FBVyxJQUFJTixXQUFTO0FBQUE7QUFFdEMsT0FBSyxJQUFJLEtBQUs7QUFDZCxPQUFLLE9BQU8sS0FBSztBQUNqQixTQUFPO0FBQUE7QUNoQlQsaUJBQWUsU0FBUztBQUN0QixNQUFJLE9BQU8sS0FBSyxXQUFXLElBQUk3QixZQUFVO0FBQ3pDLE9BQUssT0FBTyxLQUFLO0FBQUE7QUFJbkJvQyxRQUFNLFVBQVUsUUFBUUM7QUFDeEJELFFBQU0sVUFBVSxZQUFZRTtBQUM1QkYsUUFBTSxVQUFVLE1BQU1HO0FBQ3RCSCxRQUFNLFVBQVUsTUFBTUk7QUFDdEJKLFFBQU0sVUFBVSxNQUFNSztBQ3ZCdEIsSUFBSXJCLG1CQUFpQjtBQVlyQix1QkFBcUIsT0FBTztBQUMxQixPQUFLLFNBQVMsSUFBSSxPQUFPQTtBQUN6QixTQUFPO0FBQUE7QUNOVCx1QkFBcUIsT0FBTztBQUMxQixTQUFPLEtBQUssU0FBUyxJQUFJO0FBQUE7QUNFM0Isb0JBQWtCLFFBQVE7QUFDeEIsTUFBSSxRQUFRLElBQ1IsU0FBUyxVQUFVLE9BQU8sSUFBSSxPQUFPO0FBRXpDLE9BQUssV0FBVyxJQUFJUztBQUNwQixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFNBQUssSUFBSSxPQUFPO0FBQUE7QUFBQTtBQUtwQmEsV0FBUyxVQUFVLE1BQU1BLFdBQVMsVUFBVSxPQUFPQztBQUNuREQsV0FBUyxVQUFVLE1BQU1FO0FDZHpCLHFCQUFtQixPQUFPLFdBQVc7QUFDbkMsTUFBSSxRQUFRLElBQ1IsU0FBUyxTQUFTLE9BQU8sSUFBSSxNQUFNO0FBRXZDLFNBQU8sRUFBRSxRQUFRLFFBQVE7QUFDdkIsUUFBSSxVQUFVLE1BQU0sUUFBUSxPQUFPLFFBQVE7QUFDekMsYUFBTztBQUFBO0FBQUE7QUFHWCxTQUFPO0FBQUE7QUNYVCxvQkFBa0IsT0FBTyxLQUFLO0FBQzVCLFNBQU8sTUFBTSxJQUFJO0FBQUE7QUNKbkIsSUFBSUMseUJBQXVCLEdBQ3ZCQywyQkFBeUI7QUFlN0IsdUJBQXFCLE9BQU8sT0FBTyxTQUFTLFlBQVksV0FBVyxPQUFPO0FBQ3hFLE1BQUksWUFBWSxVQUFVRCx3QkFDdEIsWUFBWSxNQUFNLFFBQ2xCLFlBQVksTUFBTTtBQUV0QixNQUFJLGFBQWEsYUFBYSxDQUFFLGNBQWEsWUFBWSxZQUFZO0FBQ25FLFdBQU87QUFBQTtBQUdULE1BQUksYUFBYSxNQUFNLElBQUk7QUFDM0IsTUFBSSxhQUFhLE1BQU0sSUFBSTtBQUMzQixNQUFJLGNBQWMsWUFBWTtBQUM1QixXQUFPLGNBQWMsU0FBUyxjQUFjO0FBQUE7QUFFOUMsTUFBSSxRQUFRLElBQ1IsU0FBUyxNQUNULE9BQVEsVUFBVUMsMkJBQTBCLElBQUlKLGVBQVc7QUFFL0QsUUFBTSxJQUFJLE9BQU87QUFDakIsUUFBTSxJQUFJLE9BQU87QUFHakIsU0FBTyxFQUFFLFFBQVEsV0FBVztBQUMxQixRQUFJLFdBQVcsTUFBTSxRQUNqQixXQUFXLE1BQU07QUFFckIsUUFBSSxZQUFZO0FBQ2QsVUFBSSxXQUFXLFlBQ1gsV0FBVyxVQUFVLFVBQVUsT0FBTyxPQUFPLE9BQU8sU0FDcEQsV0FBVyxVQUFVLFVBQVUsT0FBTyxPQUFPLE9BQU87QUFBQTtBQUUxRCxRQUFJLGFBQWEsUUFBVztBQUMxQixVQUFJLFVBQVU7QUFDWjtBQUFBO0FBRUYsZUFBUztBQUNUO0FBQUE7QUFHRixRQUFJLE1BQU07QUFDUixVQUFJLENBQUNLLFlBQVUsT0FBTyxTQUFTLFdBQVUsVUFBVTtBQUM3QyxZQUFJLENBQUNDLFdBQVMsTUFBTSxhQUNmLGNBQWEsYUFBWSxVQUFVLFVBQVUsV0FBVSxTQUFTLFlBQVksU0FBUztBQUN4RixpQkFBTyxLQUFLLEtBQUs7QUFBQTtBQUFBLFVBRWpCO0FBQ04saUJBQVM7QUFDVDtBQUFBO0FBQUEsZUFFTyxDQUNMLGNBQWEsWUFDWCxVQUFVLFVBQVUsVUFBVSxTQUFTLFlBQVksU0FDcEQ7QUFDTCxlQUFTO0FBQ1Q7QUFBQTtBQUFBO0FBR0osUUFBTSxVQUFVO0FBQ2hCLFFBQU0sVUFBVTtBQUNoQixTQUFPO0FBQUE7QUM3RVQsSUFBSUMsZUFBYXpHLE9BQUs7QUFFdEIsbUJBQWV5RztBQ0VmLHNCQUFvQixLQUFLO0FBQ3ZCLE1BQUksUUFBUSxJQUNSLFNBQVMsTUFBTSxJQUFJO0FBRXZCLE1BQUksUUFBUSxTQUFTLE9BQU8sS0FBSztBQUMvQixXQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUs7QUFBQTtBQUUxQixTQUFPO0FBQUE7QUNQVCxzQkFBb0IsS0FBSztBQUN2QixNQUFJLFFBQVEsSUFDUixTQUFTLE1BQU0sSUFBSTtBQUV2QixNQUFJLFFBQVEsU0FBUyxPQUFPO0FBQzFCLFdBQU8sRUFBRSxTQUFTO0FBQUE7QUFFcEIsU0FBTztBQUFBO0FDTlQsSUFBSUoseUJBQXVCLEdBQ3ZCQywyQkFBeUI7QUFHN0IsSUFBSUksWUFBVSxvQkFDVkMsWUFBVSxpQkFDVkMsYUFBVyxrQkFDWEMsV0FBUyxnQkFDVEMsY0FBWSxtQkFDWkMsY0FBWSxtQkFDWkMsV0FBUyxnQkFDVEMsY0FBWSxtQkFDWnpGLGNBQVk7QUFFaEIsSUFBSTBGLG1CQUFpQix3QkFDakJDLGdCQUFjO0FBR2xCLElBQUlDLGdCQUFjbkgsV0FBU0EsU0FBTyxZQUFZLFFBQzFDb0gsa0JBQWdCRCxnQkFBY0EsY0FBWSxVQUFVO0FBbUJ4RCxzQkFBb0IsUUFBUSxPQUFPLEtBQUssU0FBUyxZQUFZLFdBQVcsT0FBTztBQUM3RSxVQUFRO0FBQUEsU0FDREQ7QUFDSCxVQUFLLE9BQU8sY0FBYyxNQUFNLGNBQzNCLE9BQU8sY0FBYyxNQUFNLFlBQWE7QUFDM0MsZUFBTztBQUFBO0FBRVQsZUFBUyxPQUFPO0FBQ2hCLGNBQVEsTUFBTTtBQUFBLFNBRVhEO0FBQ0gsVUFBSyxPQUFPLGNBQWMsTUFBTSxjQUM1QixDQUFDLFVBQVUsSUFBSVQsYUFBVyxTQUFTLElBQUlBLGFBQVcsU0FBUztBQUM3RCxlQUFPO0FBQUE7QUFFVCxhQUFPO0FBQUEsU0FFSkM7QUFBQUEsU0FDQUM7QUFBQUEsU0FDQUc7QUFHSCxhQUFPakgsS0FBRyxDQUFDLFFBQVEsQ0FBQztBQUFBLFNBRWpCK0c7QUFDSCxhQUFPLE9BQU8sUUFBUSxNQUFNLFFBQVEsT0FBTyxXQUFXLE1BQU07QUFBQSxTQUV6REc7QUFBQUEsU0FDQUU7QUFJSCxhQUFPLFVBQVcsUUFBUTtBQUFBLFNBRXZCSjtBQUNILFVBQUksVUFBVVM7QUFBQUEsU0FFWE47QUFDSCxVQUFJLFlBQVksVUFBVVg7QUFDMUIsaUJBQVksV0FBVWtCO0FBRXRCLFVBQUksT0FBTyxRQUFRLE1BQU0sUUFBUSxDQUFDLFdBQVc7QUFDM0MsZUFBTztBQUFBO0FBR1QsVUFBSSxVQUFVLE1BQU0sSUFBSTtBQUN4QixVQUFJLFNBQVM7QUFDWCxlQUFPLFdBQVc7QUFBQTtBQUVwQixpQkFBV2pCO0FBR1gsWUFBTSxJQUFJLFFBQVE7QUFDbEIsVUFBSSxTQUFTa0IsY0FBWSxRQUFRLFNBQVMsUUFBUSxRQUFRLFNBQVMsWUFBWSxXQUFXO0FBQzFGLFlBQU0sVUFBVTtBQUNoQixhQUFPO0FBQUEsU0FFSmhHO0FBQ0gsVUFBSTZGLGlCQUFlO0FBQ2pCLGVBQU9BLGdCQUFjLEtBQUssV0FBV0EsZ0JBQWMsS0FBSztBQUFBO0FBQUE7QUFHOUQsU0FBTztBQUFBO0FDcEdULHFCQUFtQixPQUFPLFFBQVE7QUFDaEMsTUFBSSxRQUFRLElBQ1IsU0FBUyxPQUFPLFFBQ2hCLFVBQVMsTUFBTTtBQUVuQixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFVBQU0sVUFBUyxTQUFTLE9BQU87QUFBQTtBQUVqQyxTQUFPO0FBQUE7QUNPVCxJQUFJSSxZQUFVLE1BQU07QUFFcEIsZ0JBQWVBO0FDWGYsMEJBQXdCLFFBQVEsVUFBVSxhQUFhO0FBQ3JELE1BQUksU0FBUyxTQUFTO0FBQ3RCLFNBQU9BLFVBQVEsVUFBVSxTQUFTQyxZQUFVLFFBQVEsWUFBWTtBQUFBO0FDUGxFLHVCQUFxQixPQUFPLFdBQVc7QUFDckMsTUFBSSxRQUFRLElBQ1IsU0FBUyxTQUFTLE9BQU8sSUFBSSxNQUFNLFFBQ25DLFdBQVcsR0FDWCxTQUFTO0FBRWIsU0FBTyxFQUFFLFFBQVEsUUFBUTtBQUN2QixRQUFJLFFBQVEsTUFBTTtBQUNsQixRQUFJLFVBQVUsT0FBTyxPQUFPLFFBQVE7QUFDbEMsYUFBTyxjQUFjO0FBQUE7QUFBQTtBQUd6QixTQUFPO0FBQUE7QUNIVCx1QkFBcUI7QUFDbkIsU0FBTztBQUFBO0FDZlQsSUFBSXhILGdCQUFjLE9BQU87QUFHekIsSUFBSXlILHlCQUF1QnpILGNBQVk7QUFHdkMsSUFBSTBILHFCQUFtQixPQUFPO0FBUzlCLElBQUlDLGVBQWEsQ0FBQ0QscUJBQW1CRSxjQUFZLFNBQVMsUUFBUTtBQUNoRSxNQUFJLFVBQVUsTUFBTTtBQUNsQixXQUFPO0FBQUE7QUFFVCxXQUFTLE9BQU87QUFDaEIsU0FBT0MsY0FBWUgsbUJBQWlCLFNBQVMsU0FBUyxRQUFRO0FBQzVELFdBQU9ELHVCQUFxQixLQUFLLFFBQVE7QUFBQTtBQUFBO0FBSTdDLG1CQUFlRTtBQ3BCZixxQkFBbUIsSUFBRyxVQUFVO0FBQzlCLE1BQUksUUFBUSxJQUNSLFNBQVMsTUFBTTtBQUVuQixTQUFPLEVBQUUsUUFBUSxJQUFHO0FBQ2xCLFdBQU8sU0FBUyxTQUFTO0FBQUE7QUFFM0IsU0FBTztBQUFBO0FDWlQsSUFBSUcsWUFBVTtBQVNkLDJCQUF5QixPQUFPO0FBQzlCLFNBQU92RyxlQUFhLFVBQVVYLGFBQVcsVUFBVWtIO0FBQUFBO0FDVnJELElBQUk5SCxnQkFBYyxPQUFPO0FBR3pCLElBQUkzRSxtQkFBaUIyRSxjQUFZO0FBR2pDLElBQUl5SCx5QkFBdUJ6SCxjQUFZO0FBb0J2QyxJQUFJK0gsZ0JBQWNDLGtCQUFnQixXQUFXO0FBQUUsU0FBTztBQUFBLE9BQWtCQSxvQkFBa0IsU0FBUyxPQUFPO0FBQ3hHLFNBQU96RyxlQUFhLFVBQVVsRyxpQkFBZSxLQUFLLE9BQU8sYUFDdkQsQ0FBQ29NLHVCQUFxQixLQUFLLE9BQU87QUFBQTtBQUd0QyxvQkFBZU07QUN0QmYsdUJBQXFCO0FBQ25CLFNBQU87QUFBQTtBQ1ZULElBQUlFLGdCQUFjLE9BQU8sV0FBVyxZQUFZLFdBQVcsQ0FBQyxRQUFRLFlBQVk7QUFHaEYsSUFBSUMsZUFBYUQsaUJBQWUsT0FBTyxVQUFVLFlBQVksVUFBVSxDQUFDLE9BQU8sWUFBWTtBQUczRixJQUFJRSxrQkFBZ0JELGdCQUFjQSxhQUFXLFlBQVlEO0FBR3pELElBQUlHLFdBQVNELGtCQUFnQnJJLE9BQUssU0FBUztBQUczQyxJQUFJLGlCQUFpQnNJLFdBQVNBLFNBQU8sV0FBVztBQW1CaEQsSUFBSUMsYUFBVyxrQkFBa0JDO0FBRWpDLGlCQUFlRDtBQ2hDZixJQUFJUCxZQUFVLHNCQUNWUyxhQUFXLGtCQUNYL0IsWUFBVSxvQkFDVkMsWUFBVSxpQkFDVkMsYUFBVyxrQkFDWGxHLFlBQVUscUJBQ1ZtRyxXQUFTLGdCQUNUQyxjQUFZLG1CQUNaNEIsY0FBWSxtQkFDWjNCLGNBQVksbUJBQ1pDLFdBQVMsZ0JBQ1RDLGNBQVksbUJBQ1owQixlQUFhO0FBRWpCLElBQUl6QixtQkFBaUIsd0JBQ2pCQyxnQkFBYyxxQkFDZHlCLGVBQWEseUJBQ2JDLGVBQWEseUJBQ2JDLFlBQVUsc0JBQ1ZDLGFBQVcsdUJBQ1hDLGFBQVcsdUJBQ1hDLGFBQVcsdUJBQ1hDLG9CQUFrQiw4QkFDbEJDLGNBQVksd0JBQ1pDLGNBQVk7QUFHaEIsSUFBSUMsbUJBQWlCO0FBQ3JCQSxpQkFBZVQsZ0JBQWNTLGlCQUFlUixnQkFDNUNRLGlCQUFlUCxhQUFXTyxpQkFBZU4sY0FDekNNLGlCQUFlTCxjQUFZSyxpQkFBZUosY0FDMUNJLGlCQUFlSCxxQkFBbUJHLGlCQUFlRixlQUNqREUsaUJBQWVELGVBQWE7QUFDNUJDLGlCQUFlckIsYUFBV3FCLGlCQUFlWixjQUN6Q1ksaUJBQWVuQyxvQkFBa0JtQyxpQkFBZTNDLGFBQ2hEMkMsaUJBQWVsQyxpQkFBZWtDLGlCQUFlMUMsYUFDN0MwQyxpQkFBZXpDLGNBQVl5QyxpQkFBZTNJLGFBQzFDMkksaUJBQWV4QyxZQUFVd0MsaUJBQWV2QyxlQUN4Q3VDLGlCQUFlWCxlQUFhVyxpQkFBZXRDLGVBQzNDc0MsaUJBQWVyQyxZQUFVcUMsaUJBQWVwQyxlQUN4Q29DLGlCQUFlVixnQkFBYztBQVM3Qiw0QkFBMEIsT0FBTztBQUMvQixTQUFPbEgsZUFBYSxVQUNsQlQsV0FBUyxNQUFNLFdBQVcsQ0FBQyxDQUFDcUksaUJBQWV2SSxhQUFXO0FBQUE7QUNqRDFELHFCQUFtQixNQUFNO0FBQ3ZCLFNBQU8sU0FBUyxPQUFPO0FBQ3JCLFdBQU8sS0FBSztBQUFBO0FBQUE7QUNOaEIsSUFBSXFILGdCQUFjLE9BQU8sV0FBVyxZQUFZLFdBQVcsQ0FBQyxRQUFRLFlBQVk7QUFHaEYsSUFBSUMsZUFBYUQsaUJBQWUsT0FBTyxVQUFVLFlBQVksVUFBVSxDQUFDLE9BQU8sWUFBWTtBQUczRixJQUFJRSxrQkFBZ0JELGdCQUFjQSxhQUFXLFlBQVlEO0FBR3pELElBQUksY0FBY0UsbUJBQWlCdkksYUFBVztBQUc5QyxJQUFJd0osYUFBWSxXQUFXO0FBQ3pCLE1BQUk7QUFFRixRQUFJLFFBQVFsQixnQkFBY0EsYUFBVyxXQUFXQSxhQUFXLFFBQVEsUUFBUTtBQUUzRSxRQUFJLE9BQU87QUFDVCxhQUFPO0FBQUE7QUFJVCxXQUFPLGVBQWUsWUFBWSxXQUFXLFlBQVksUUFBUTtBQUFBLFdBQzFELEdBQVA7QUFBQTtBQUFBO0FBR0osaUJBQWVrQjtBQ3hCZixJQUFJQyxxQkFBbUJELGNBQVlBLFdBQVM7QUFtQjVDLElBQUlFLGlCQUFlRCxxQkFBbUJFLFlBQVVGLHNCQUFvQkc7QUFFcEUscUJBQWVGO0FDbEJmLElBQUl0SixnQkFBYyxPQUFPO0FBR3pCLElBQUkzRSxtQkFBaUIyRSxjQUFZO0FBVWpDLHlCQUF1QixPQUFPLFdBQVc7QUFDdkMsTUFBSSxRQUFRdUgsVUFBUSxRQUNoQixRQUFRLENBQUMsU0FBU1EsY0FBWSxRQUM5QixTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVNNLFdBQVMsUUFDdEMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBVWlCLGVBQWEsUUFDckQsY0FBYyxTQUFTLFNBQVMsVUFBVSxRQUMxQyxTQUFTLGNBQWNHLFlBQVUsTUFBTSxRQUFRLFVBQVUsSUFDekQsU0FBUyxPQUFPO0FBRXBCLFdBQVMsT0FBTyxPQUFPO0FBQ3JCLFFBQUssY0FBYXBPLGlCQUFlLEtBQUssT0FBTyxTQUN6QyxDQUFFLGdCQUVDLFFBQU8sWUFFTixVQUFXLFFBQU8sWUFBWSxPQUFPLGFBRXJDLFVBQVcsUUFBTyxZQUFZLE9BQU8sZ0JBQWdCLE9BQU8saUJBRTdENkYsVUFBUSxLQUFLLFdBQ1o7QUFDTixhQUFPLEtBQUs7QUFBQTtBQUFBO0FBR2hCLFNBQU87QUFBQTtBQzVDVCxJQUFJbEIsZ0JBQWMsT0FBTztBQVN6Qix1QkFBcUIsT0FBTztBQUMxQixNQUFJLE9BQU8sU0FBUyxNQUFNLGFBQ3RCLFFBQVMsT0FBTyxRQUFRLGNBQWMsS0FBSyxhQUFjQTtBQUU3RCxTQUFPLFVBQVU7QUFBQTtBQ05uQixtQkFBaUIsTUFBTSxZQUFXO0FBQ2hDLFNBQU8sU0FBUyxLQUFLO0FBQ25CLFdBQU8sS0FBSyxXQUFVO0FBQUE7QUFBQTtBQ1AxQixJQUFJMEosZUFBYUMsVUFBUSxPQUFPLE1BQU07QUFFdEMsbUJBQWVEO0FDRGYsSUFBSTFKLGdCQUFjLE9BQU87QUFHekIsSUFBSTNFLG1CQUFpQjJFLGNBQVk7QUFTakMsb0JBQWtCLFFBQVE7QUFDeEIsTUFBSSxDQUFDNEosY0FBWSxTQUFTO0FBQ3hCLFdBQU9GLGFBQVc7QUFBQTtBQUVwQixNQUFJLFNBQVM7QUFDYixXQUFTLE9BQU8sT0FBTyxTQUFTO0FBQzlCLFFBQUlyTyxpQkFBZSxLQUFLLFFBQVEsUUFBUSxPQUFPLGVBQWU7QUFDNUQsYUFBTyxLQUFLO0FBQUE7QUFBQTtBQUdoQixTQUFPO0FBQUE7QUNNVCxnQkFBYyxRQUFRO0FBQ3BCLFNBQU80RixjQUFZLFVBQVU0SSxnQkFBYyxVQUFVQyxXQUFTO0FBQUE7QUN0QmhFLHNCQUFvQixRQUFRO0FBQzFCLFNBQU9DLGlCQUFlLFFBQVFDLFFBQU1yQztBQUFBQTtBQ1R0QyxJQUFJeEIseUJBQXVCO0FBRzNCLElBQUluRyxnQkFBYyxPQUFPO0FBR3pCLElBQUkzRSxtQkFBaUIyRSxjQUFZO0FBZWpDLHdCQUFzQixRQUFRLE9BQU8sU0FBUyxZQUFZLFdBQVcsT0FBTztBQUMxRSxNQUFJLFlBQVksVUFBVW1HLHdCQUN0QixXQUFXOEQsYUFBVyxTQUN0QixZQUFZLFNBQVMsUUFDckIsV0FBV0EsYUFBVyxRQUN0QixZQUFZLFNBQVM7QUFFekIsTUFBSSxhQUFhLGFBQWEsQ0FBQyxXQUFXO0FBQ3hDLFdBQU87QUFBQTtBQUVULE1BQUksUUFBUTtBQUNaLFNBQU8sU0FBUztBQUNkLFFBQUksTUFBTSxTQUFTO0FBQ25CLFFBQUksQ0FBRSxhQUFZLE9BQU8sUUFBUTVPLGlCQUFlLEtBQUssT0FBTyxPQUFPO0FBQ2pFLGFBQU87QUFBQTtBQUFBO0FBSVgsTUFBSSxhQUFhLE1BQU0sSUFBSTtBQUMzQixNQUFJLGFBQWEsTUFBTSxJQUFJO0FBQzNCLE1BQUksY0FBYyxZQUFZO0FBQzVCLFdBQU8sY0FBYyxTQUFTLGNBQWM7QUFBQTtBQUU5QyxNQUFJLFNBQVM7QUFDYixRQUFNLElBQUksUUFBUTtBQUNsQixRQUFNLElBQUksT0FBTztBQUVqQixNQUFJLFdBQVc7QUFDZixTQUFPLEVBQUUsUUFBUSxXQUFXO0FBQzFCLFVBQU0sU0FBUztBQUNmLFFBQUksV0FBVyxPQUFPLE1BQ2xCLFdBQVcsTUFBTTtBQUVyQixRQUFJLFlBQVk7QUFDZCxVQUFJLFdBQVcsWUFDWCxXQUFXLFVBQVUsVUFBVSxLQUFLLE9BQU8sUUFBUSxTQUNuRCxXQUFXLFVBQVUsVUFBVSxLQUFLLFFBQVEsT0FBTztBQUFBO0FBR3pELFFBQUksQ0FBRSxjQUFhLFNBQ1YsYUFBYSxZQUFZLFVBQVUsVUFBVSxVQUFVLFNBQVMsWUFBWSxTQUM3RSxXQUNEO0FBQ0wsZUFBUztBQUNUO0FBQUE7QUFFRixnQkFBYSxZQUFXLE9BQU87QUFBQTtBQUVqQyxNQUFJLFVBQVUsQ0FBQyxVQUFVO0FBQ3ZCLFFBQUksVUFBVSxPQUFPLGFBQ2pCLFVBQVUsTUFBTTtBQUdwQixRQUFJLFdBQVcsV0FDVixrQkFBaUIsVUFBVSxpQkFBaUIsVUFDN0MsQ0FBRSxRQUFPLFdBQVcsY0FBYyxtQkFBbUIsV0FDbkQsT0FBTyxXQUFXLGNBQWMsbUJBQW1CLFVBQVU7QUFDakUsZUFBUztBQUFBO0FBQUE7QUFHYixRQUFNLFVBQVU7QUFDaEIsUUFBTSxVQUFVO0FBQ2hCLFNBQU87QUFBQTtBQ2xGVCxJQUFJNk8sYUFBVzFGLFlBQVUxRSxRQUFNO0FBRS9CLGlCQUFlb0s7QUNGZixJQUFJQyxZQUFVM0YsWUFBVTFFLFFBQU07QUFFOUIsZ0JBQWVxSztBQ0ZmLElBQUlDLFFBQU01RixZQUFVMUUsUUFBTTtBQUUxQixZQUFlc0s7QUNGZixJQUFJQyxZQUFVN0YsWUFBVTFFLFFBQU07QUFFOUIsZ0JBQWV1SztBQ0dmLElBQUkxRCxXQUFTLGdCQUNUNkIsY0FBWSxtQkFDWjhCLGVBQWEsb0JBQ2J4RCxXQUFTLGdCQUNUMkIsZUFBYTtBQUVqQixJQUFJeEIsZ0JBQWM7QUFHbEIsSUFBSXNELHVCQUFxQm5HLFdBQVM4RixhQUM5Qk0sa0JBQWdCcEcsV0FBU0csUUFDekJrRyxzQkFBb0JyRyxXQUFTK0YsWUFDN0JPLGtCQUFnQnRHLFdBQVNnRyxRQUN6Qk8sc0JBQW9CdkcsV0FBU2lHO0FBU2pDLElBQUlPLFdBQVNoSztBQUdiLElBQUtzSixjQUFZVSxTQUFPLElBQUlWLFdBQVMsSUFBSSxZQUFZLFFBQVFqRCxpQkFDeEQxQyxTQUFPcUcsU0FBTyxJQUFJckcsWUFBUW9DLFlBQzFCd0QsYUFBV1MsU0FBT1QsVUFBUSxjQUFjRyxnQkFDeENGLFNBQU9RLFNBQU8sSUFBSVIsWUFBUXRELFlBQzFCdUQsYUFBV08sU0FBTyxJQUFJUCxnQkFBWTVCLGNBQWE7QUFDbERtQyxhQUFTLFNBQVMsT0FBTztBQUN2QixRQUFJLFNBQVNoSyxhQUFXLFFBQ3BCLE9BQU8sVUFBVTRILGNBQVksTUFBTSxjQUFjLFFBQ2pELGFBQWEsT0FBT3BFLFdBQVMsUUFBUTtBQUV6QyxRQUFJLFlBQVk7QUFDZCxjQUFRO0FBQUEsYUFDRG1HO0FBQW9CLGlCQUFPdEQ7QUFBQUEsYUFDM0J1RDtBQUFlLGlCQUFPN0Q7QUFBQUEsYUFDdEI4RDtBQUFtQixpQkFBT0g7QUFBQUEsYUFDMUJJO0FBQWUsaUJBQU81RDtBQUFBQSxhQUN0QjZEO0FBQW1CLGlCQUFPbEM7QUFBQUE7QUFBQUE7QUFHbkMsV0FBTztBQUFBO0FBQUE7QUFJWCxlQUFlbUM7QUMvQ2YsSUFBSXpFLHlCQUF1QjtBQUczQixJQUFJMkIsWUFBVSxzQkFDVlMsYUFBVyxrQkFDWEMsY0FBWTtBQUdoQixJQUFJeEksZ0JBQWMsT0FBTztBQUd6QixJQUFJM0UsbUJBQWlCMkUsY0FBWTtBQWdCakMsMkJBQXlCLFFBQVEsT0FBTyxTQUFTLFlBQVksV0FBVyxPQUFPO0FBQzdFLE1BQUksV0FBV3VILFVBQVEsU0FDbkIsV0FBV0EsVUFBUSxRQUNuQixTQUFTLFdBQVdnQixhQUFXcUMsU0FBTyxTQUN0QyxTQUFTLFdBQVdyQyxhQUFXcUMsU0FBTztBQUUxQyxXQUFTLFVBQVU5QyxZQUFVVSxjQUFZO0FBQ3pDLFdBQVMsVUFBVVYsWUFBVVUsY0FBWTtBQUV6QyxNQUFJLFdBQVcsVUFBVUEsYUFDckIsV0FBVyxVQUFVQSxhQUNyQixZQUFZLFVBQVU7QUFFMUIsTUFBSSxhQUFhSCxXQUFTLFNBQVM7QUFDakMsUUFBSSxDQUFDQSxXQUFTLFFBQVE7QUFDcEIsYUFBTztBQUFBO0FBRVQsZUFBVztBQUNYLGVBQVc7QUFBQTtBQUViLE1BQUksYUFBYSxDQUFDLFVBQVU7QUFDMUIsYUFBVSxTQUFRLElBQUkzQztBQUN0QixXQUFRLFlBQVk0RCxlQUFhLFVBQzdCaEMsY0FBWSxRQUFRLE9BQU8sU0FBUyxZQUFZLFdBQVcsU0FDM0R1RCxhQUFXLFFBQVEsT0FBTyxRQUFRLFNBQVMsWUFBWSxXQUFXO0FBQUE7QUFFeEUsTUFBSSxDQUFFLFdBQVUxRSx5QkFBdUI7QUFDckMsUUFBSSxlQUFlLFlBQVk5SyxpQkFBZSxLQUFLLFFBQVEsZ0JBQ3ZELGVBQWUsWUFBWUEsaUJBQWUsS0FBSyxPQUFPO0FBRTFELFFBQUksZ0JBQWdCLGNBQWM7QUFDaEMsVUFBSSxlQUFlLGVBQWUsT0FBTyxVQUFVLFFBQy9DLGVBQWUsZUFBZSxNQUFNLFVBQVU7QUFFbEQsZUFBVSxTQUFRLElBQUlxSztBQUN0QixhQUFPLFVBQVUsY0FBYyxjQUFjLFNBQVMsWUFBWTtBQUFBO0FBQUE7QUFHdEUsTUFBSSxDQUFDLFdBQVc7QUFDZCxXQUFPO0FBQUE7QUFFVCxXQUFVLFNBQVEsSUFBSUE7QUFDdEIsU0FBT29GLGVBQWEsUUFBUSxPQUFPLFNBQVMsWUFBWSxXQUFXO0FBQUE7QUM5RHJFLHVCQUFxQixPQUFPLE9BQU8sU0FBUyxZQUFZLE9BQU87QUFDN0QsTUFBSSxVQUFVLE9BQU87QUFDbkIsV0FBTztBQUFBO0FBRVQsTUFBSSxTQUFTLFFBQVEsU0FBUyxRQUFTLENBQUN2SixlQUFhLFVBQVUsQ0FBQ0EsZUFBYSxRQUFTO0FBQ3BGLFdBQU8sVUFBVSxTQUFTLFVBQVU7QUFBQTtBQUV0QyxTQUFPd0osa0JBQWdCLE9BQU8sT0FBTyxTQUFTLFlBQVlDLGVBQWE7QUFBQTtBQ016RSxtQkFBaUIsT0FBTyxPQUFPO0FBQzdCLFNBQU9BLGNBQVksT0FBTztBQUFBO0FDTGIsMEJBQTBCO0FBQ3ZDLFNBQU9sTSxxQ0FBUztBQUFBO0FDekJsQixJQUFJLFVBQVUsa0JBQWlCLEtBQUs7QUFDbEMsU0FBTyxDQUFDLE9BQU8sT0FBTyxRQUFRLGFBQWEsTUFBTSxTQUFVLE9BQU87QUFDaEUsUUFBSSxVQUFVO0FBQUE7QUFBQTtBQUlYLG1CQUFtQixNQUFNLE1BQU07QUFDcEMsTUFBSSxJQUFJLFFBQVE7QUFDaEIsTUFBSSxJQUFJLFFBQVE7QUFDaEIsU0FBTyxTQUFVLE9BQU87QUFDdEIsUUFBSTtBQUFHLFFBQUU7QUFDVCxRQUFJO0FBQUcsUUFBRTtBQUFBO0FBQUE7QUFvQmIsdUJBQXVCLE1BQU0sTUFBTTtBQUNqQyxTQUFPbU0sb0NBQVEsV0FBWTtBQUN6QixXQUFPLFVBQVUsTUFBTTtBQUFBLEtBQ3RCLENBQUMsTUFBTTtBQUFBO0FDcENMLElBQUksTUFBTTtBQUNWLElBQUksU0FBUztBQUNiLElBQUksUUFBUTtBQUNaLElBQUksT0FBTztBQUNYLElBQUksT0FBTztBQUNYLElBQUksaUJBQWlCLENBQUMsS0FBSyxRQUFRLE9BQU87QUFDMUMsSUFBSSxRQUFRO0FBQ1osSUFBSSxNQUFNO0FBQ1YsSUFBSSxrQkFBa0I7QUFDdEIsSUFBSSxXQUFXO0FBQ2YsSUFBSSxTQUFTO0FBQ2IsSUFBSSxZQUFZO0FBQ2hCLElBQUksc0JBQW1DLCtCQUFlLE9BQU8sU0FBVSxLQUFLLFdBQVc7QUFDNUYsU0FBTyxJQUFJLE9BQU8sQ0FBQyxZQUFZLE1BQU0sT0FBTyxZQUFZLE1BQU07QUFBQSxHQUM3RDtBQUNJLElBQUksYUFBMEIsbUJBQUcsT0FBTyxnQkFBZ0IsQ0FBQyxPQUFPLE9BQU8sU0FBVSxLQUFLLFdBQVc7QUFDdEcsU0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLFlBQVksTUFBTSxPQUFPLFlBQVksTUFBTTtBQUFBLEdBQ3hFO0FBRUksSUFBSSxhQUFhO0FBQ2pCLElBQUksT0FBTztBQUNYLElBQUksWUFBWTtBQUVoQixJQUFJLGFBQWE7QUFDakIsSUFBSSxPQUFPO0FBQ1gsSUFBSSxZQUFZO0FBRWhCLElBQUksY0FBYztBQUNsQixJQUFJLFFBQVE7QUFDWixJQUFJLGFBQWE7QUFDakIsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLE1BQU0sV0FBVyxZQUFZLE1BQU0sV0FBVyxhQUFhLE9BQU87QUM3QjVGLDBCQUEwQixXQUFXO0FBQ2xELFNBQU8sVUFBVSxNQUFNLEtBQUs7QUFBQTtBQ0ZmLG1CQUFtQixNQUFNO0FBQ3RDLE1BQUksUUFBUSxNQUFNO0FBQ2hCLFdBQU87QUFBQTtBQUdULE1BQUksS0FBSyxlQUFlLG1CQUFtQjtBQUN6QyxRQUFJLGlCQUFnQixLQUFLO0FBQ3pCLFdBQU8saUJBQWdCLGVBQWMsZUFBZSxTQUFTO0FBQUE7QUFHL0QsU0FBTztBQUFBO0FDUlQsbUJBQW1CLE1BQU07QUFDdkIsTUFBSSxhQUFhLFVBQVUsTUFBTTtBQUNqQyxTQUFPLGdCQUFnQixjQUFjLGdCQUFnQjtBQUFBO0FBR3ZELHVCQUF1QixNQUFNO0FBQzNCLE1BQUksYUFBYSxVQUFVLE1BQU07QUFDakMsU0FBTyxnQkFBZ0IsY0FBYyxnQkFBZ0I7QUFBQTtBQUd2RCxzQkFBc0IsTUFBTTtBQUUxQixNQUFJLE9BQU8sZUFBZSxhQUFhO0FBQ3JDLFdBQU87QUFBQTtBQUdULE1BQUksYUFBYSxVQUFVLE1BQU07QUFDakMsU0FBTyxnQkFBZ0IsY0FBYyxnQkFBZ0I7QUFBQTtBQ25CaEQsSUFBSSxNQUFNLEtBQUs7QUFDZixJQUFJLE1BQU0sS0FBSztBQUNmLElBQUksUUFBUSxLQUFLO0FDQVQsK0JBQStCLFNBQVMsY0FBYztBQUNuRSxNQUFJLGlCQUFpQixRQUFRO0FBQzNCLG1CQUFlO0FBQUE7QUFHakIsTUFBSSxPQUFPLFFBQVE7QUFDbkIsTUFBSSxTQUFTO0FBQ2IsTUFBSSxTQUFTO0FBRWIsTUFBSSxjQUFjLFlBQVksY0FBYztBQUMxQyxRQUFJLGVBQWUsUUFBUTtBQUMzQixRQUFJLGNBQWMsUUFBUTtBQUcxQixRQUFJLGNBQWMsR0FBRztBQUNuQixlQUFTLE1BQU0sS0FBSyxTQUFTLGVBQWU7QUFBQTtBQUc5QyxRQUFJLGVBQWUsR0FBRztBQUNwQixlQUFTLE1BQU0sS0FBSyxVQUFVLGdCQUFnQjtBQUFBO0FBQUE7QUFJbEQsU0FBTztBQUFBLElBQ0wsT0FBTyxLQUFLLFFBQVE7QUFBQSxJQUNwQixRQUFRLEtBQUssU0FBUztBQUFBLElBQ3RCLEtBQUssS0FBSyxNQUFNO0FBQUEsSUFDaEIsT0FBTyxLQUFLLFFBQVE7QUFBQSxJQUNwQixRQUFRLEtBQUssU0FBUztBQUFBLElBQ3RCLE1BQU0sS0FBSyxPQUFPO0FBQUEsSUFDbEIsR0FBRyxLQUFLLE9BQU87QUFBQSxJQUNmLEdBQUcsS0FBSyxNQUFNO0FBQUE7QUFBQTtBQzlCSCx1QkFBdUIsU0FBUztBQUM3QyxNQUFJLGFBQWEsc0JBQXNCO0FBR3ZDLE1BQUksUUFBUSxRQUFRO0FBQ3BCLE1BQUksVUFBUyxRQUFRO0FBRXJCLE1BQUksS0FBSyxJQUFJLFdBQVcsUUFBUSxVQUFVLEdBQUc7QUFDM0MsWUFBUSxXQUFXO0FBQUE7QUFHckIsTUFBSSxLQUFLLElBQUksV0FBVyxTQUFTLFlBQVcsR0FBRztBQUM3QyxjQUFTLFdBQVc7QUFBQTtBQUd0QixTQUFPO0FBQUEsSUFDTCxHQUFHLFFBQVE7QUFBQSxJQUNYLEdBQUcsUUFBUTtBQUFBLElBQ1g7QUFBQSxJQUNBLFFBQVE7QUFBQTtBQUFBO0FDckJHLGtCQUFrQixTQUFRLE9BQU87QUFDOUMsTUFBSSxXQUFXLE1BQU0sZUFBZSxNQUFNO0FBRTFDLE1BQUksUUFBTyxTQUFTLFFBQVE7QUFDMUIsV0FBTztBQUFBLGFBRUEsWUFBWSxhQUFhLFdBQVc7QUFDekMsUUFBSSxPQUFPO0FBRVgsT0FBRztBQUNELFVBQUksUUFBUSxRQUFPLFdBQVcsT0FBTztBQUNuQyxlQUFPO0FBQUE7QUFJVCxhQUFPLEtBQUssY0FBYyxLQUFLO0FBQUEsYUFDeEI7QUFBQTtBQUliLFNBQU87QUFBQTtBQ3JCTSxxQkFBcUIsU0FBUztBQUMzQyxTQUFPLFVBQVcsU0FBUSxZQUFZLElBQUksZ0JBQWdCO0FBQUE7QUNBN0MsMEJBQTBCLFNBQVM7QUFDaEQsU0FBTyxVQUFVLFNBQVMsaUJBQWlCO0FBQUE7QUNEOUIsd0JBQXdCLFNBQVM7QUFDOUMsU0FBTyxDQUFDLFNBQVMsTUFBTSxNQUFNLFFBQVEsWUFBWSxhQUFhO0FBQUE7QUNEakQsNEJBQTRCLFNBQVM7QUFFbEQsU0FBUyxZQUFVLFdBQVcsUUFBUSxnQkFDdEMsUUFBUSxhQUFhLE9BQU8sVUFBVTtBQUFBO0FDRHpCLHVCQUF1QixTQUFTO0FBQzdDLE1BQUksWUFBWSxhQUFhLFFBQVE7QUFDbkMsV0FBTztBQUFBO0FBR1QsU0FHRSxRQUFRLGdCQUNSLFFBQVEsY0FDUixjQUFhLFdBQVcsUUFBUSxPQUFPLFNBRXZDLG1CQUFtQjtBQUFBO0FDUnZCLDZCQUE2QixTQUFTO0FBQ3BDLE1BQUksQ0FBQyxjQUFjLFlBQ25CLGlCQUFpQixTQUFTLGFBQWEsU0FBUztBQUM5QyxXQUFPO0FBQUE7QUFHVCxTQUFPLFFBQVE7QUFBQTtBQUtqQiw0QkFBNEIsU0FBUztBQUNuQyxNQUFJLFlBQVksVUFBVSxVQUFVLGNBQWMsUUFBUSxlQUFlO0FBQ3pFLE1BQUksT0FBTyxVQUFVLFVBQVUsUUFBUSxlQUFlO0FBRXRELE1BQUksUUFBUSxjQUFjLFVBQVU7QUFFbEMsUUFBSSxhQUFhLGlCQUFpQjtBQUVsQyxRQUFJLFdBQVcsYUFBYSxTQUFTO0FBQ25DLGFBQU87QUFBQTtBQUFBO0FBSVgsTUFBSSxjQUFjLGNBQWM7QUFFaEMsU0FBTyxjQUFjLGdCQUFnQixDQUFDLFFBQVEsUUFBUSxRQUFRLFlBQVksZ0JBQWdCLEdBQUc7QUFDM0YsUUFBSSxNQUFNLGlCQUFpQjtBQUkzQixRQUFJLElBQUksY0FBYyxVQUFVLElBQUksZ0JBQWdCLFVBQVUsSUFBSSxZQUFZLFdBQVcsQ0FBQyxhQUFhLGVBQWUsUUFBUSxJQUFJLGdCQUFnQixNQUFNLGFBQWEsSUFBSSxlQUFlLFlBQVksYUFBYSxJQUFJLFVBQVUsSUFBSSxXQUFXLFFBQVE7QUFDcFAsYUFBTztBQUFBLFdBQ0Y7QUFDTCxvQkFBYyxZQUFZO0FBQUE7QUFBQTtBQUk5QixTQUFPO0FBQUE7QUFLTSx5QkFBeUIsU0FBUztBQUMvQyxNQUFJLFVBQVMsVUFBVTtBQUN2QixNQUFJLGdCQUFlLG9CQUFvQjtBQUV2QyxTQUFPLGlCQUFnQixlQUFlLGtCQUFpQixpQkFBaUIsZUFBYyxhQUFhLFVBQVU7QUFDM0csb0JBQWUsb0JBQW9CO0FBQUE7QUFHckMsTUFBSSxpQkFBaUIsYUFBWSxtQkFBa0IsVUFBVSxZQUFZLG1CQUFrQixVQUFVLGlCQUFpQixlQUFjLGFBQWEsV0FBVztBQUMxSixXQUFPO0FBQUE7QUFHVCxTQUFPLGlCQUFnQixtQkFBbUIsWUFBWTtBQUFBO0FDOUR6QyxrQ0FBa0MsV0FBVztBQUMxRCxTQUFPLENBQUMsT0FBTyxVQUFVLFFBQVEsY0FBYyxJQUFJLE1BQU07QUFBQTtBQ0FwRCxnQkFBZ0JDLFFBQUssT0FBT0MsUUFBSztBQUN0QyxTQUFPQyxJQUFRRixRQUFLRyxJQUFRLE9BQU9GO0FBQUFBO0FBRTlCLHdCQUF3QixNQUFLLE9BQU8sTUFBSztBQUM5QyxNQUFJLEtBQUksT0FBTyxNQUFLLE9BQU87QUFDM0IsU0FBTyxLQUFJLE9BQU0sT0FBTTtBQUFBO0FDTlYsOEJBQThCO0FBQzNDLFNBQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLE9BQU87QUFBQSxJQUNQLFFBQVE7QUFBQSxJQUNSLE1BQU07QUFBQTtBQUFBO0FDSkssNEJBQTRCLGVBQWU7QUFDeEQsU0FBTyxPQUFPLE9BQU8sSUFBSSxzQkFBc0I7QUFBQTtBQ0ZsQyx5QkFBeUIsT0FBTyxPQUFNO0FBQ25ELFNBQU8sTUFBSyxPQUFPLFNBQVUsU0FBUyxLQUFLO0FBQ3pDLFlBQVEsT0FBTztBQUNmLFdBQU87QUFBQSxLQUNOO0FBQUE7QUNPTCxJQUFJLGtCQUFrQiwwQkFBeUIsU0FBUyxPQUFPO0FBQzdELFlBQVUsT0FBTyxZQUFZLGFBQWEsUUFBUSxPQUFPLE9BQU8sSUFBSSxNQUFNLE9BQU87QUFBQSxJQUMvRSxXQUFXLE1BQU07QUFBQSxRQUNiO0FBQ04sU0FBTyxtQkFBbUIsT0FBTyxZQUFZLFdBQVcsVUFBVSxnQkFBZ0IsU0FBUztBQUFBO0FBRzdGLGVBQWUsTUFBTTtBQUNuQixNQUFJO0FBRUosTUFBSSxRQUFRLEtBQUssT0FDYixPQUFPLEtBQUssTUFDWixXQUFVLEtBQUs7QUFDbkIsTUFBSSxlQUFlLE1BQU0sU0FBUztBQUNsQyxNQUFJLGlCQUFnQixNQUFNLGNBQWM7QUFDeEMsTUFBSSxnQkFBZ0IsaUJBQWlCLE1BQU07QUFDM0MsTUFBSSxPQUFPLHlCQUF5QjtBQUNwQyxNQUFJLGFBQWEsQ0FBQyxNQUFNLE9BQU8sUUFBUSxrQkFBa0I7QUFDekQsTUFBSSxNQUFNLGFBQWEsV0FBVztBQUVsQyxNQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWU7QUFDbkM7QUFBQTtBQUdGLE1BQUksZ0JBQWdCLGdCQUFnQixTQUFRLFNBQVM7QUFDckQsTUFBSSxZQUFZLGNBQWM7QUFDOUIsTUFBSSxVQUFVLFNBQVMsTUFBTSxNQUFNO0FBQ25DLE1BQUksVUFBVSxTQUFTLE1BQU0sU0FBUztBQUN0QyxNQUFJLFVBQVUsTUFBTSxNQUFNLFVBQVUsT0FBTyxNQUFNLE1BQU0sVUFBVSxRQUFRLGVBQWMsUUFBUSxNQUFNLE1BQU0sT0FBTztBQUNsSCxNQUFJLFlBQVksZUFBYyxRQUFRLE1BQU0sTUFBTSxVQUFVO0FBQzVELE1BQUksb0JBQW9CLGdCQUFnQjtBQUN4QyxNQUFJLGFBQWEsb0JBQW9CLFNBQVMsTUFBTSxrQkFBa0IsZ0JBQWdCLElBQUksa0JBQWtCLGVBQWUsSUFBSTtBQUMvSCxNQUFJLG9CQUFvQixVQUFVLElBQUksWUFBWTtBQUdsRCxNQUFJLE9BQU0sY0FBYztBQUN4QixNQUFJLE9BQU0sYUFBYSxVQUFVLE9BQU8sY0FBYztBQUN0RCxNQUFJLFNBQVMsYUFBYSxJQUFJLFVBQVUsT0FBTyxJQUFJO0FBQ25ELE1BQUksVUFBUyxPQUFPLE1BQUssUUFBUTtBQUVqQyxNQUFJLFdBQVc7QUFDZixRQUFNLGNBQWMsUUFBUyx5QkFBd0IsSUFBSSxzQkFBc0IsWUFBWSxTQUFRLHNCQUFzQixlQUFlLFVBQVMsUUFBUTtBQUFBO0FBRzNKLGtCQUFnQixPQUFPO0FBQ3JCLE1BQUksUUFBUSxNQUFNLE9BQ2QsV0FBVSxNQUFNO0FBQ3BCLE1BQUksbUJBQW1CLFNBQVEsU0FDM0IsZUFBZSxxQkFBcUIsU0FBUyx3QkFBd0I7QUFFekUsTUFBSSxnQkFBZ0IsTUFBTTtBQUN4QjtBQUFBO0FBSUYsTUFBSSxPQUFPLGlCQUFpQixVQUFVO0FBQ3BDLG1CQUFlLE1BQU0sU0FBUyxPQUFPLGNBQWM7QUFFbkQsUUFBSSxDQUFDLGNBQWM7QUFDakI7QUFBQTtBQUFBO0FBVUosTUFBSSxDQUFDLFNBQVMsTUFBTSxTQUFTLFFBQVEsZUFBZTtBQUtsRDtBQUFBO0FBR0YsUUFBTSxTQUFTLFFBQVE7QUFBQTtBQUl6QixjQUFlO0FBQUEsRUFDYixNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsRUFDUCxJQUFJO0FBQUEsRUFDSixRQUFRRztBQUFBQSxFQUNSLFVBQVUsQ0FBQztBQUFBLEVBQ1gsa0JBQWtCLENBQUM7QUFBQTtBQ25HTixzQkFBc0IsV0FBVztBQUM5QyxTQUFPLFVBQVUsTUFBTSxLQUFLO0FBQUE7QUNROUIsSUFBSSxhQUFhO0FBQUEsRUFDZixLQUFLO0FBQUEsRUFDTCxPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixNQUFNO0FBQUE7QUFLUiwyQkFBMkIsTUFBTTtBQUMvQixNQUFJLEtBQUksS0FBSyxHQUNULEtBQUksS0FBSztBQUNiLE1BQUksTUFBTTtBQUNWLE1BQUksTUFBTSxJQUFJLG9CQUFvQjtBQUNsQyxTQUFPO0FBQUEsSUFDTCxHQUFHLE1BQU0sS0FBSSxPQUFPLE9BQU87QUFBQSxJQUMzQixHQUFHLE1BQU0sS0FBSSxPQUFPLE9BQU87QUFBQTtBQUFBO0FBSXhCLHFCQUFxQixPQUFPO0FBQ2pDLE1BQUk7QUFFSixNQUFJLFVBQVMsTUFBTSxRQUNmLGFBQWEsTUFBTSxZQUNuQixZQUFZLE1BQU0sV0FDbEIsWUFBWSxNQUFNLFdBQ2xCLFVBQVUsTUFBTSxTQUNoQixZQUFXLE1BQU0sVUFDakIsa0JBQWtCLE1BQU0saUJBQ3hCLFdBQVcsTUFBTSxVQUNqQixlQUFlLE1BQU0sY0FDckIsVUFBVSxNQUFNO0FBRXBCLE1BQUksUUFBUSxpQkFBaUIsT0FBTyxrQkFBa0IsV0FBVyxPQUFPLGlCQUFpQixhQUFhLGFBQWEsV0FBVyxTQUMxSCxVQUFVLE1BQU0sR0FDaEIsS0FBSSxZQUFZLFNBQVMsSUFBSSxTQUM3QixVQUFVLE1BQU0sR0FDaEIsS0FBSSxZQUFZLFNBQVMsSUFBSTtBQUVqQyxNQUFJLE9BQU8sUUFBUSxlQUFlO0FBQ2xDLE1BQUksT0FBTyxRQUFRLGVBQWU7QUFDbEMsTUFBSSxRQUFRO0FBQ1osTUFBSSxRQUFRO0FBQ1osTUFBSSxNQUFNO0FBRVYsTUFBSSxVQUFVO0FBQ1osUUFBSSxnQkFBZSxnQkFBZ0I7QUFDbkMsUUFBSSxhQUFhO0FBQ2pCLFFBQUksWUFBWTtBQUVoQixRQUFJLGtCQUFpQixVQUFVLFVBQVM7QUFDdEMsc0JBQWUsbUJBQW1CO0FBRWxDLFVBQUksaUJBQWlCLGVBQWMsYUFBYSxZQUFZLGNBQWEsWUFBWTtBQUNuRixxQkFBYTtBQUNiLG9CQUFZO0FBQUE7QUFBQTtBQUtoQixvQkFBZTtBQUVmLFFBQUksY0FBYyxPQUFRLGVBQWMsUUFBUSxjQUFjLFVBQVUsY0FBYyxLQUFLO0FBQ3pGLGNBQVE7QUFDUixVQUFJLFVBQVUsV0FBVyxJQUFJLGlCQUFpQixJQUFJLGVBQWUsU0FDakUsY0FBYTtBQUNiLFlBQUssVUFBVSxXQUFXO0FBQzFCLFlBQUssa0JBQWtCLElBQUk7QUFBQTtBQUc3QixRQUFJLGNBQWMsUUFBUyxlQUFjLE9BQU8sY0FBYyxXQUFXLGNBQWMsS0FBSztBQUMxRixjQUFRO0FBQ1IsVUFBSSxVQUFVLFdBQVcsSUFBSSxpQkFBaUIsSUFBSSxlQUFlLFFBQ2pFLGNBQWE7QUFDYixZQUFLLFVBQVUsV0FBVztBQUMxQixZQUFLLGtCQUFrQixJQUFJO0FBQUE7QUFBQTtBQUkvQixNQUFJLGVBQWUsT0FBTyxPQUFPO0FBQUEsSUFDL0IsVUFBVTtBQUFBLEtBQ1QsWUFBWTtBQUVmLE1BQUksaUJBQWlCO0FBQ25CLFFBQUk7QUFFSixXQUFPLE9BQU8sT0FBTyxJQUFJLGNBQWUsa0JBQWlCLElBQUksZUFBZSxTQUFTLE9BQU8sTUFBTSxJQUFJLGVBQWUsU0FBUyxPQUFPLE1BQU0sSUFBSSxlQUFlLFlBQWEsS0FBSSxvQkFBb0IsTUFBTSxJQUFJLGVBQWUsS0FBSSxTQUFTLEtBQUksUUFBUSxpQkFBaUIsS0FBSSxTQUFTLEtBQUksVUFBVTtBQUFBO0FBR25TLFNBQU8sT0FBTyxPQUFPLElBQUksY0FBZSxtQkFBa0IsSUFBSSxnQkFBZ0IsU0FBUyxPQUFPLEtBQUksT0FBTyxJQUFJLGdCQUFnQixTQUFTLE9BQU8sS0FBSSxPQUFPLElBQUksZ0JBQWdCLFlBQVksSUFBSTtBQUFBO0FBRzlMLHVCQUF1QixPQUFPO0FBQzVCLE1BQUksUUFBUSxNQUFNLE9BQ2QsV0FBVSxNQUFNO0FBQ3BCLE1BQUksd0JBQXdCLFNBQVEsaUJBQ2hDLGtCQUFrQiwwQkFBMEIsU0FBUyxPQUFPLHVCQUM1RCxvQkFBb0IsU0FBUSxVQUM1QixXQUFXLHNCQUFzQixTQUFTLE9BQU8sbUJBQ2pELHdCQUF3QixTQUFRLGNBQ2hDLGVBQWUsMEJBQTBCLFNBQVMsT0FBTztBQVk3RCxNQUFJLGVBQWU7QUFBQSxJQUNqQixXQUFXLGlCQUFpQixNQUFNO0FBQUEsSUFDbEMsV0FBVyxhQUFhLE1BQU07QUFBQSxJQUM5QixRQUFRLE1BQU0sU0FBUztBQUFBLElBQ3ZCLFlBQVksTUFBTSxNQUFNO0FBQUEsSUFDeEI7QUFBQSxJQUNBLFNBQVMsTUFBTSxRQUFRLGFBQWE7QUFBQTtBQUd0QyxNQUFJLE1BQU0sY0FBYyxpQkFBaUIsTUFBTTtBQUM3QyxVQUFNLE9BQU8sU0FBUyxPQUFPLE9BQU8sSUFBSSxNQUFNLE9BQU8sUUFBUSxZQUFZLE9BQU8sT0FBTyxJQUFJLGNBQWM7QUFBQSxNQUN2RyxTQUFTLE1BQU0sY0FBYztBQUFBLE1BQzdCLFVBQVUsTUFBTSxRQUFRO0FBQUEsTUFDeEI7QUFBQSxNQUNBO0FBQUE7QUFBQTtBQUlKLE1BQUksTUFBTSxjQUFjLFNBQVMsTUFBTTtBQUNyQyxVQUFNLE9BQU8sUUFBUSxPQUFPLE9BQU8sSUFBSSxNQUFNLE9BQU8sT0FBTyxZQUFZLE9BQU8sT0FBTyxJQUFJLGNBQWM7QUFBQSxNQUNyRyxTQUFTLE1BQU0sY0FBYztBQUFBLE1BQzdCLFVBQVU7QUFBQSxNQUNWLFVBQVU7QUFBQSxNQUNWO0FBQUE7QUFBQTtBQUlKLFFBQU0sV0FBVyxTQUFTLE9BQU8sT0FBTyxJQUFJLE1BQU0sV0FBVyxRQUFRO0FBQUEsSUFDbkUseUJBQXlCLE1BQU07QUFBQTtBQUFBO0FBS25DLHNCQUFlO0FBQUEsRUFDYixNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsRUFDUCxJQUFJO0FBQUEsRUFDSixNQUFNO0FBQUE7QUM5SlIsSUFBSSxVQUFVO0FBQUEsRUFDWixTQUFTO0FBQUE7QUFHWCxnQkFBZ0IsTUFBTTtBQUNwQixNQUFJLFFBQVEsS0FBSyxPQUNiLFdBQVcsS0FBSyxVQUNoQixXQUFVLEtBQUs7QUFDbkIsTUFBSSxrQkFBa0IsU0FBUSxRQUMxQixTQUFTLG9CQUFvQixTQUFTLE9BQU8saUJBQzdDLGtCQUFrQixTQUFRLFFBQzFCLFNBQVMsb0JBQW9CLFNBQVMsT0FBTztBQUNqRCxNQUFJLFVBQVMsVUFBVSxNQUFNLFNBQVM7QUFDdEMsTUFBSSxnQkFBZ0IsR0FBRyxPQUFPLE1BQU0sY0FBYyxXQUFXLE1BQU0sY0FBYztBQUVqRixNQUFJLFFBQVE7QUFDVixrQkFBYyxRQUFRLFNBQVUsY0FBYztBQUM1QyxtQkFBYSxpQkFBaUIsVUFBVSxTQUFTLFFBQVE7QUFBQTtBQUFBO0FBSTdELE1BQUksUUFBUTtBQUNWLFlBQU8saUJBQWlCLFVBQVUsU0FBUyxRQUFRO0FBQUE7QUFHckQsU0FBTyxXQUFZO0FBQ2pCLFFBQUksUUFBUTtBQUNWLG9CQUFjLFFBQVEsU0FBVSxjQUFjO0FBQzVDLHFCQUFhLG9CQUFvQixVQUFVLFNBQVMsUUFBUTtBQUFBO0FBQUE7QUFJaEUsUUFBSSxRQUFRO0FBQ1YsY0FBTyxvQkFBb0IsVUFBVSxTQUFTLFFBQVE7QUFBQTtBQUFBO0FBQUE7QUFNNUQscUJBQWU7QUFBQSxFQUNiLE1BQU07QUFBQSxFQUNOLFNBQVM7QUFBQSxFQUNULE9BQU87QUFBQSxFQUNQLElBQUksY0FBYztBQUFBO0FBQUEsRUFDbEI7QUFBQSxFQUNBLE1BQU07QUFBQTtBQy9DUixJQUFJQyxTQUFPO0FBQUEsRUFDVCxNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixLQUFLO0FBQUE7QUFFUSw4QkFBOEIsV0FBVztBQUN0RCxTQUFPLFVBQVUsUUFBUSwwQkFBMEIsU0FBVSxTQUFTO0FBQ3BFLFdBQU9BLE9BQUs7QUFBQTtBQUFBO0FDUmhCLElBQUksT0FBTztBQUFBLEVBQ1QsT0FBTztBQUFBLEVBQ1AsS0FBSztBQUFBO0FBRVEsdUNBQXVDLFdBQVc7QUFDL0QsU0FBTyxVQUFVLFFBQVEsY0FBYyxTQUFVLFNBQVM7QUFDeEQsV0FBTyxLQUFLO0FBQUE7QUFBQTtBQ0xELHlCQUF5QixNQUFNO0FBQzVDLE1BQUksTUFBTSxVQUFVO0FBQ3BCLE1BQUksYUFBYSxJQUFJO0FBQ3JCLE1BQUksWUFBWSxJQUFJO0FBQ3BCLFNBQU87QUFBQSxJQUNMO0FBQUEsSUFDQTtBQUFBO0FBQUE7QUNKVyw2QkFBNkIsU0FBUztBQVFuRCxTQUFPLHNCQUFzQixtQkFBbUIsVUFBVSxPQUFPLGdCQUFnQixTQUFTO0FBQUE7QUNSN0UseUJBQXlCLFNBQVM7QUFDL0MsTUFBSSxNQUFNLFVBQVU7QUFDcEIsTUFBSSxPQUFPLG1CQUFtQjtBQUM5QixNQUFJLGlCQUFpQixJQUFJO0FBQ3pCLE1BQUksUUFBUSxLQUFLO0FBQ2pCLE1BQUksVUFBUyxLQUFLO0FBQ2xCLE1BQUksS0FBSTtBQUNSLE1BQUksS0FBSTtBQU1SLE1BQUksZ0JBQWdCO0FBQ2xCLFlBQVEsZUFBZTtBQUN2QixjQUFTLGVBQWU7QUFTeEIsUUFBSSxDQUFDLGlDQUFpQyxLQUFLLFVBQVUsWUFBWTtBQUMvRCxXQUFJLGVBQWU7QUFDbkIsV0FBSSxlQUFlO0FBQUE7QUFBQTtBQUl2QixTQUFPO0FBQUEsSUFDTDtBQUFBLElBQ0EsUUFBUTtBQUFBLElBQ1IsR0FBRyxLQUFJLG9CQUFvQjtBQUFBLElBQzNCLEdBQUc7QUFBQTtBQUFBO0FDOUJRLHlCQUF5QixTQUFTO0FBQy9DLE1BQUk7QUFFSixNQUFJLE9BQU8sbUJBQW1CO0FBQzlCLE1BQUksWUFBWSxnQkFBZ0I7QUFDaEMsTUFBSSxPQUFRLHlCQUF3QixRQUFRLGtCQUFrQixPQUFPLFNBQVMsc0JBQXNCO0FBQ3BHLE1BQUksUUFBUSxJQUFJLEtBQUssYUFBYSxLQUFLLGFBQWEsT0FBTyxLQUFLLGNBQWMsR0FBRyxPQUFPLEtBQUssY0FBYztBQUMzRyxNQUFJLFVBQVMsSUFBSSxLQUFLLGNBQWMsS0FBSyxjQUFjLE9BQU8sS0FBSyxlQUFlLEdBQUcsT0FBTyxLQUFLLGVBQWU7QUFDaEgsTUFBSSxLQUFJLENBQUMsVUFBVSxhQUFhLG9CQUFvQjtBQUNwRCxNQUFJLEtBQUksQ0FBQyxVQUFVO0FBRW5CLE1BQUksaUJBQWlCLFFBQVEsTUFBTSxjQUFjLE9BQU87QUFDdEQsVUFBSyxJQUFJLEtBQUssYUFBYSxPQUFPLEtBQUssY0FBYyxLQUFLO0FBQUE7QUFHNUQsU0FBTztBQUFBLElBQ0w7QUFBQSxJQUNBLFFBQVE7QUFBQSxJQUNSLEdBQUc7QUFBQSxJQUNILEdBQUc7QUFBQTtBQUFBO0FDekJRLHdCQUF3QixTQUFTO0FBRTlDLE1BQUksb0JBQW9CLGlCQUFpQixVQUNyQyxXQUFXLGtCQUFrQixVQUM3QixZQUFZLGtCQUFrQixXQUM5QixZQUFZLGtCQUFrQjtBQUVsQyxTQUFPLDZCQUE2QixLQUFLLFdBQVcsWUFBWTtBQUFBO0FDSm5ELHlCQUF5QixNQUFNO0FBQzVDLE1BQUksQ0FBQyxRQUFRLFFBQVEsYUFBYSxRQUFRLFlBQVksVUFBVSxHQUFHO0FBRWpFLFdBQU8sS0FBSyxjQUFjO0FBQUE7QUFHNUIsTUFBSSxjQUFjLFNBQVMsZUFBZSxPQUFPO0FBQy9DLFdBQU87QUFBQTtBQUdULFNBQU8sZ0JBQWdCLGNBQWM7QUFBQTtBQ0h4QiwyQkFBMkIsU0FBUyxNQUFNO0FBQ3ZELE1BQUk7QUFFSixNQUFJLFNBQVMsUUFBUTtBQUNuQixXQUFPO0FBQUE7QUFHVCxNQUFJLGVBQWUsZ0JBQWdCO0FBQ25DLE1BQUksU0FBUyxpQkFBbUIsMEJBQXdCLFFBQVEsa0JBQWtCLE9BQU8sU0FBUyxzQkFBc0I7QUFDeEgsTUFBSSxNQUFNLFVBQVU7QUFDcEIsTUFBSSxTQUFTLFNBQVMsQ0FBQyxLQUFLLE9BQU8sSUFBSSxrQkFBa0IsSUFBSSxlQUFlLGdCQUFnQixlQUFlLE1BQU07QUFDakgsTUFBSSxjQUFjLEtBQUssT0FBTztBQUM5QixTQUFPLFNBQVMsY0FDaEIsWUFBWSxPQUFPLGtCQUFrQixjQUFjO0FBQUE7QUN4QnRDLDBCQUEwQixNQUFNO0FBQzdDLFNBQU8sT0FBTyxPQUFPLElBQUksTUFBTTtBQUFBLElBQzdCLE1BQU0sS0FBSztBQUFBLElBQ1gsS0FBSyxLQUFLO0FBQUEsSUFDVixPQUFPLEtBQUssSUFBSSxLQUFLO0FBQUEsSUFDckIsUUFBUSxLQUFLLElBQUksS0FBSztBQUFBO0FBQUE7QUNVMUIsb0NBQW9DLFNBQVM7QUFDM0MsTUFBSSxPQUFPLHNCQUFzQjtBQUNqQyxPQUFLLE1BQU0sS0FBSyxNQUFNLFFBQVE7QUFDOUIsT0FBSyxPQUFPLEtBQUssT0FBTyxRQUFRO0FBQ2hDLE9BQUssU0FBUyxLQUFLLE1BQU0sUUFBUTtBQUNqQyxPQUFLLFFBQVEsS0FBSyxPQUFPLFFBQVE7QUFDakMsT0FBSyxRQUFRLFFBQVE7QUFDckIsT0FBSyxTQUFTLFFBQVE7QUFDdEIsT0FBSyxJQUFJLEtBQUs7QUFDZCxPQUFLLElBQUksS0FBSztBQUNkLFNBQU87QUFBQTtBQUdULG9DQUFvQyxTQUFTLGdCQUFnQjtBQUMzRCxTQUFPLG1CQUFtQixXQUFXLGlCQUFpQixnQkFBZ0IsWUFBWSxVQUFVLGtCQUFrQiwyQkFBMkIsa0JBQWtCLGlCQUFpQixnQkFBZ0IsbUJBQW1CO0FBQUE7QUFNak4sNEJBQTRCLFNBQVM7QUFDbkMsTUFBSSxtQkFBa0Isa0JBQWtCLGNBQWM7QUFDdEQsTUFBSSxvQkFBb0IsQ0FBQyxZQUFZLFNBQVMsUUFBUSxpQkFBaUIsU0FBUyxhQUFhO0FBQzdGLE1BQUksaUJBQWlCLHFCQUFxQixjQUFjLFdBQVcsZ0JBQWdCLFdBQVc7QUFFOUYsTUFBSSxDQUFDLFVBQVUsaUJBQWlCO0FBQzlCLFdBQU87QUFBQTtBQUlULFNBQU8saUJBQWdCLE9BQU8sU0FBVSxnQkFBZ0I7QUFDdEQsV0FBTyxVQUFVLG1CQUFtQixTQUFTLGdCQUFnQixtQkFBbUIsWUFBWSxvQkFBb0IsVUFBVyxxQkFBb0IsaUJBQWlCLGdCQUFnQixhQUFhLFdBQVc7QUFBQTtBQUFBO0FBTTdMLHlCQUF5QixTQUFTLFVBQVUsY0FBYztBQUN2RSxNQUFJLHNCQUFzQixhQUFhLG9CQUFvQixtQkFBbUIsV0FBVyxHQUFHLE9BQU87QUFDbkcsTUFBSSxtQkFBa0IsR0FBRyxPQUFPLHFCQUFxQixDQUFDO0FBQ3RELE1BQUksc0JBQXNCLGlCQUFnQjtBQUMxQyxNQUFJLGVBQWUsaUJBQWdCLE9BQU8sU0FBVSxTQUFTLGdCQUFnQjtBQUMzRSxRQUFJLE9BQU8sMkJBQTJCLFNBQVM7QUFDL0MsWUFBUSxNQUFNLElBQUksS0FBSyxLQUFLLFFBQVE7QUFDcEMsWUFBUSxRQUFRLElBQUksS0FBSyxPQUFPLFFBQVE7QUFDeEMsWUFBUSxTQUFTLElBQUksS0FBSyxRQUFRLFFBQVE7QUFDMUMsWUFBUSxPQUFPLElBQUksS0FBSyxNQUFNLFFBQVE7QUFDdEMsV0FBTztBQUFBLEtBQ04sMkJBQTJCLFNBQVM7QUFDdkMsZUFBYSxRQUFRLGFBQWEsUUFBUSxhQUFhO0FBQ3ZELGVBQWEsU0FBUyxhQUFhLFNBQVMsYUFBYTtBQUN6RCxlQUFhLElBQUksYUFBYTtBQUM5QixlQUFhLElBQUksYUFBYTtBQUM5QixTQUFPO0FBQUE7QUNoRU0sd0JBQXdCLE1BQU07QUFDM0MsTUFBSSxhQUFZLEtBQUssV0FDakIsVUFBVSxLQUFLLFNBQ2YsWUFBWSxLQUFLO0FBQ3JCLE1BQUksZ0JBQWdCLFlBQVksaUJBQWlCLGFBQWE7QUFDOUQsTUFBSSxZQUFZLFlBQVksYUFBYSxhQUFhO0FBQ3RELE1BQUksVUFBVSxXQUFVLElBQUksV0FBVSxRQUFRLElBQUksUUFBUSxRQUFRO0FBQ2xFLE1BQUksVUFBVSxXQUFVLElBQUksV0FBVSxTQUFTLElBQUksUUFBUSxTQUFTO0FBQ3BFLE1BQUk7QUFFSixVQUFRO0FBQUEsU0FDRDtBQUNILGdCQUFVO0FBQUEsUUFDUixHQUFHO0FBQUEsUUFDSCxHQUFHLFdBQVUsSUFBSSxRQUFRO0FBQUE7QUFFM0I7QUFBQSxTQUVHO0FBQ0gsZ0JBQVU7QUFBQSxRQUNSLEdBQUc7QUFBQSxRQUNILEdBQUcsV0FBVSxJQUFJLFdBQVU7QUFBQTtBQUU3QjtBQUFBLFNBRUc7QUFDSCxnQkFBVTtBQUFBLFFBQ1IsR0FBRyxXQUFVLElBQUksV0FBVTtBQUFBLFFBQzNCLEdBQUc7QUFBQTtBQUVMO0FBQUEsU0FFRztBQUNILGdCQUFVO0FBQUEsUUFDUixHQUFHLFdBQVUsSUFBSSxRQUFRO0FBQUEsUUFDekIsR0FBRztBQUFBO0FBRUw7QUFBQTtBQUdBLGdCQUFVO0FBQUEsUUFDUixHQUFHLFdBQVU7QUFBQSxRQUNiLEdBQUcsV0FBVTtBQUFBO0FBQUE7QUFJbkIsTUFBSSxXQUFXLGdCQUFnQix5QkFBeUIsaUJBQWlCO0FBRXpFLE1BQUksWUFBWSxNQUFNO0FBQ3BCLFFBQUksTUFBTSxhQUFhLE1BQU0sV0FBVztBQUV4QyxZQUFRO0FBQUEsV0FDRDtBQUNILGdCQUFRLFlBQVksUUFBUSxZQUFhLFlBQVUsT0FBTyxJQUFJLFFBQVEsT0FBTztBQUM3RTtBQUFBLFdBRUc7QUFDSCxnQkFBUSxZQUFZLFFBQVEsWUFBYSxZQUFVLE9BQU8sSUFBSSxRQUFRLE9BQU87QUFDN0U7QUFBQTtBQUFBO0FBTU4sU0FBTztBQUFBO0FDMURNLHdCQUF3QixPQUFPLFVBQVM7QUFDckQsTUFBSSxhQUFZLFFBQVE7QUFDdEIsZUFBVTtBQUFBO0FBR1osTUFBSSxXQUFXLFVBQ1gscUJBQXFCLFNBQVMsV0FDOUIsWUFBWSx1QkFBdUIsU0FBUyxNQUFNLFlBQVksb0JBQzlELG9CQUFvQixTQUFTLFVBQzdCLFdBQVcsc0JBQXNCLFNBQVMsa0JBQWtCLG1CQUM1RCx3QkFBd0IsU0FBUyxjQUNqQyxlQUFlLDBCQUEwQixTQUFTLFdBQVcsdUJBQzdELHdCQUF3QixTQUFTLGdCQUNqQyxpQkFBaUIsMEJBQTBCLFNBQVMsU0FBUyx1QkFDN0QsdUJBQXVCLFNBQVMsYUFDaEMsY0FBYyx5QkFBeUIsU0FBUyxRQUFRLHNCQUN4RCxtQkFBbUIsU0FBUyxTQUM1QixVQUFVLHFCQUFxQixTQUFTLElBQUk7QUFDaEQsTUFBSSxnQkFBZ0IsbUJBQW1CLE9BQU8sWUFBWSxXQUFXLFVBQVUsZ0JBQWdCLFNBQVM7QUFDeEcsTUFBSSxhQUFhLG1CQUFtQixTQUFTLFlBQVk7QUFDekQsTUFBSSxhQUFhLE1BQU0sTUFBTTtBQUM3QixNQUFJLFVBQVUsTUFBTSxTQUFTLGNBQWMsYUFBYTtBQUN4RCxNQUFJLHFCQUFxQixnQkFBZ0IsVUFBVSxXQUFXLFVBQVUsUUFBUSxrQkFBa0IsbUJBQW1CLE1BQU0sU0FBUyxTQUFTLFVBQVU7QUFDdkosTUFBSSxzQkFBc0Isc0JBQXNCLE1BQU0sU0FBUztBQUMvRCxNQUFJLGlCQUFnQixlQUFlO0FBQUEsSUFDakMsV0FBVztBQUFBLElBQ1gsU0FBUztBQUFBLElBQ1QsVUFBVTtBQUFBLElBQ1Y7QUFBQTtBQUVGLE1BQUksbUJBQW1CLGlCQUFpQixPQUFPLE9BQU8sSUFBSSxZQUFZO0FBQ3RFLE1BQUksb0JBQW9CLG1CQUFtQixTQUFTLG1CQUFtQjtBQUd2RSxNQUFJLGtCQUFrQjtBQUFBLElBQ3BCLEtBQUssbUJBQW1CLE1BQU0sa0JBQWtCLE1BQU0sY0FBYztBQUFBLElBQ3BFLFFBQVEsa0JBQWtCLFNBQVMsbUJBQW1CLFNBQVMsY0FBYztBQUFBLElBQzdFLE1BQU0sbUJBQW1CLE9BQU8sa0JBQWtCLE9BQU8sY0FBYztBQUFBLElBQ3ZFLE9BQU8sa0JBQWtCLFFBQVEsbUJBQW1CLFFBQVEsY0FBYztBQUFBO0FBRTVFLE1BQUksYUFBYSxNQUFNLGNBQWM7QUFFckMsTUFBSSxtQkFBbUIsVUFBVSxZQUFZO0FBQzNDLFFBQUksVUFBUyxXQUFXO0FBQ3hCLFdBQU8sS0FBSyxpQkFBaUIsUUFBUSxTQUFVLEtBQUs7QUFDbEQsVUFBSSxXQUFXLENBQUMsT0FBTyxRQUFRLFFBQVEsUUFBUSxJQUFJLElBQUk7QUFDdkQsVUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLFFBQVEsUUFBUSxJQUFJLE1BQU07QUFDbkQsc0JBQWdCLFFBQVEsUUFBTyxRQUFRO0FBQUE7QUFBQTtBQUkzQyxTQUFPO0FBQUE7QUN6RE0sOEJBQThCLE9BQU8sVUFBUztBQUMzRCxNQUFJLGFBQVksUUFBUTtBQUN0QixlQUFVO0FBQUE7QUFHWixNQUFJLFdBQVcsVUFDWCxZQUFZLFNBQVMsV0FDckIsV0FBVyxTQUFTLFVBQ3BCLGVBQWUsU0FBUyxjQUN4QixVQUFVLFNBQVMsU0FDbkIsaUJBQWlCLFNBQVMsZ0JBQzFCLHdCQUF3QixTQUFTLHVCQUNqQyx3QkFBd0IsMEJBQTBCLFNBQVNDLGFBQWdCO0FBQy9FLE1BQUksWUFBWSxhQUFhO0FBQzdCLE1BQUlDLGVBQWEsWUFBWSxpQkFBaUIsc0JBQXNCLG9CQUFvQixPQUFPLFNBQVUsWUFBVztBQUNsSCxXQUFPLGFBQWEsZ0JBQWU7QUFBQSxPQUNoQztBQUNMLE1BQUksb0JBQW9CQSxhQUFXLE9BQU8sU0FBVSxZQUFXO0FBQzdELFdBQU8sc0JBQXNCLFFBQVEsZUFBYztBQUFBO0FBR3JELE1BQUksa0JBQWtCLFdBQVcsR0FBRztBQUNsQyx3QkFBb0JBO0FBQUFBO0FBUXRCLE1BQUksWUFBWSxrQkFBa0IsT0FBTyxTQUFVLEtBQUssWUFBVztBQUNqRSxRQUFJLGNBQWEsZUFBZSxPQUFPO0FBQUEsTUFDckMsV0FBVztBQUFBLE1BQ1g7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE9BQ0MsaUJBQWlCO0FBQ3BCLFdBQU87QUFBQSxLQUNOO0FBQ0gsU0FBTyxPQUFPLEtBQUssV0FBVyxLQUFLLFNBQVUsR0FBRyxHQUFHO0FBQ2pELFdBQU8sVUFBVSxLQUFLLFVBQVU7QUFBQTtBQUFBO0FDcENwQyx1Q0FBdUMsV0FBVztBQUNoRCxNQUFJLGlCQUFpQixlQUFlLE1BQU07QUFDeEMsV0FBTztBQUFBO0FBR1QsTUFBSSxvQkFBb0IscUJBQXFCO0FBQzdDLFNBQU8sQ0FBQyw4QkFBOEIsWUFBWSxtQkFBbUIsOEJBQThCO0FBQUE7QUFHckcsY0FBYyxNQUFNO0FBQ2xCLE1BQUksUUFBUSxLQUFLLE9BQ2IsV0FBVSxLQUFLLFNBQ2YsT0FBTyxLQUFLO0FBRWhCLE1BQUksTUFBTSxjQUFjLE1BQU0sT0FBTztBQUNuQztBQUFBO0FBR0YsTUFBSSxvQkFBb0IsU0FBUSxVQUM1QixnQkFBZ0Isc0JBQXNCLFNBQVMsT0FBTyxtQkFDdEQsbUJBQW1CLFNBQVEsU0FDM0IsZUFBZSxxQkFBcUIsU0FBUyxPQUFPLGtCQUNwRCw4QkFBOEIsU0FBUSxvQkFDdEMsVUFBVSxTQUFRLFNBQ2xCLFdBQVcsU0FBUSxVQUNuQixlQUFlLFNBQVEsY0FDdkIsY0FBYyxTQUFRLGFBQ3RCLHdCQUF3QixTQUFRLGdCQUNoQyxpQkFBaUIsMEJBQTBCLFNBQVMsT0FBTyx1QkFDM0Qsd0JBQXdCLFNBQVE7QUFDcEMsTUFBSSxxQkFBcUIsTUFBTSxRQUFRO0FBQ3ZDLE1BQUksZ0JBQWdCLGlCQUFpQjtBQUNyQyxNQUFJLGtCQUFrQixrQkFBa0I7QUFDeEMsTUFBSSxxQkFBcUIsK0JBQWdDLG9CQUFtQixDQUFDLGlCQUFpQixDQUFDLHFCQUFxQix1QkFBdUIsOEJBQThCO0FBQ3pLLE1BQUksY0FBYSxDQUFDLG9CQUFvQixPQUFPLG9CQUFvQixPQUFPLFNBQVUsS0FBSyxZQUFXO0FBQ2hHLFdBQU8sSUFBSSxPQUFPLGlCQUFpQixnQkFBZSxPQUFPLHFCQUFxQixPQUFPO0FBQUEsTUFDbkYsV0FBVztBQUFBLE1BQ1g7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsU0FDRztBQUFBLEtBQ0o7QUFDSCxNQUFJLGdCQUFnQixNQUFNLE1BQU07QUFDaEMsTUFBSSxhQUFhLE1BQU0sTUFBTTtBQUM3QixNQUFJLFlBQVksSUFBSTtBQUNwQixNQUFJLHFCQUFxQjtBQUN6QixNQUFJLHdCQUF3QixZQUFXO0FBRXZDLFdBQVMsSUFBSSxHQUFHLElBQUksWUFBVyxRQUFRLEtBQUs7QUFDMUMsUUFBSSxZQUFZLFlBQVc7QUFFM0IsUUFBSSxpQkFBaUIsaUJBQWlCO0FBRXRDLFFBQUksbUJBQW1CLGFBQWEsZUFBZTtBQUNuRCxRQUFJLGFBQWEsQ0FBQyxLQUFLLFFBQVEsUUFBUSxtQkFBbUI7QUFDMUQsUUFBSSxNQUFNLGFBQWEsVUFBVTtBQUNqQyxRQUFJLFdBQVcsZUFBZSxPQUFPO0FBQUEsTUFDbkM7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUE7QUFFRixRQUFJLG9CQUFvQixhQUFhLG1CQUFtQixRQUFRLE9BQU8sbUJBQW1CLFNBQVM7QUFFbkcsUUFBSSxjQUFjLE9BQU8sV0FBVyxNQUFNO0FBQ3hDLDBCQUFvQixxQkFBcUI7QUFBQTtBQUczQyxRQUFJLG1CQUFtQixxQkFBcUI7QUFDNUMsUUFBSSxTQUFTO0FBRWIsUUFBSSxlQUFlO0FBQ2pCLGFBQU8sS0FBSyxTQUFTLG1CQUFtQjtBQUFBO0FBRzFDLFFBQUksY0FBYztBQUNoQixhQUFPLEtBQUssU0FBUyxzQkFBc0IsR0FBRyxTQUFTLHFCQUFxQjtBQUFBO0FBRzlFLFFBQUksT0FBTyxNQUFNLFNBQVUsT0FBTztBQUNoQyxhQUFPO0FBQUEsUUFDTDtBQUNGLDhCQUF3QjtBQUN4QiwyQkFBcUI7QUFDckI7QUFBQTtBQUdGLGNBQVUsSUFBSSxXQUFXO0FBQUE7QUFHM0IsTUFBSSxvQkFBb0I7QUFFdEIsUUFBSSxpQkFBaUIsaUJBQWlCLElBQUk7QUFFMUMsUUFBSSxRQUFRLGdCQUFlLEtBQUk7QUFDN0IsVUFBSSxtQkFBbUIsWUFBVyxLQUFLLFNBQVUsWUFBVztBQUMxRCxZQUFJLFVBQVMsVUFBVSxJQUFJO0FBRTNCLFlBQUksU0FBUTtBQUNWLGlCQUFPLFFBQU8sTUFBTSxHQUFHLEtBQUksTUFBTSxTQUFVLE9BQU87QUFDaEQsbUJBQU87QUFBQTtBQUFBO0FBQUE7QUFLYixVQUFJLGtCQUFrQjtBQUNwQixnQ0FBd0I7QUFDeEIsZUFBTztBQUFBO0FBQUE7QUFJWCxhQUFTLEtBQUssZ0JBQWdCLEtBQUssR0FBRyxNQUFNO0FBQzFDLFVBQUksT0FBTyxNQUFNO0FBRWpCLFVBQUksU0FBUztBQUFTO0FBQUE7QUFBQTtBQUkxQixNQUFJLE1BQU0sY0FBYyx1QkFBdUI7QUFDN0MsVUFBTSxjQUFjLE1BQU0sUUFBUTtBQUNsQyxVQUFNLFlBQVk7QUFDbEIsVUFBTSxRQUFRO0FBQUE7QUFBQTtBQUtsQixhQUFlO0FBQUEsRUFDYixNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsRUFDUCxJQUFJO0FBQUEsRUFDSixrQkFBa0IsQ0FBQztBQUFBLEVBQ25CLE1BQU07QUFBQSxJQUNKLE9BQU87QUFBQTtBQUFBO0FDN0lYLHdCQUF3QixVQUFVLE1BQU0sa0JBQWtCO0FBQ3hELE1BQUkscUJBQXFCLFFBQVE7QUFDL0IsdUJBQW1CO0FBQUEsTUFDakIsR0FBRztBQUFBLE1BQ0gsR0FBRztBQUFBO0FBQUE7QUFJUCxTQUFPO0FBQUEsSUFDTCxLQUFLLFNBQVMsTUFBTSxLQUFLLFNBQVMsaUJBQWlCO0FBQUEsSUFDbkQsT0FBTyxTQUFTLFFBQVEsS0FBSyxRQUFRLGlCQUFpQjtBQUFBLElBQ3RELFFBQVEsU0FBUyxTQUFTLEtBQUssU0FBUyxpQkFBaUI7QUFBQSxJQUN6RCxNQUFNLFNBQVMsT0FBTyxLQUFLLFFBQVEsaUJBQWlCO0FBQUE7QUFBQTtBQUl4RCwrQkFBK0IsVUFBVTtBQUN2QyxTQUFPLENBQUMsS0FBSyxPQUFPLFFBQVEsTUFBTSxLQUFLLFNBQVUsTUFBTTtBQUNyRCxXQUFPLFNBQVMsU0FBUztBQUFBO0FBQUE7QUFJN0IsY0FBYyxNQUFNO0FBQ2xCLE1BQUksUUFBUSxLQUFLLE9BQ2IsT0FBTyxLQUFLO0FBQ2hCLE1BQUksZ0JBQWdCLE1BQU0sTUFBTTtBQUNoQyxNQUFJLGFBQWEsTUFBTSxNQUFNO0FBQzdCLE1BQUksbUJBQW1CLE1BQU0sY0FBYztBQUMzQyxNQUFJLG9CQUFvQixlQUFlLE9BQU87QUFBQSxJQUM1QyxnQkFBZ0I7QUFBQTtBQUVsQixNQUFJLG9CQUFvQixlQUFlLE9BQU87QUFBQSxJQUM1QyxhQUFhO0FBQUE7QUFFZixNQUFJLDJCQUEyQixlQUFlLG1CQUFtQjtBQUNqRSxNQUFJLHNCQUFzQixlQUFlLG1CQUFtQixZQUFZO0FBQ3hFLE1BQUksb0JBQW9CLHNCQUFzQjtBQUM5QyxNQUFJLG1CQUFtQixzQkFBc0I7QUFDN0MsUUFBTSxjQUFjLFFBQVE7QUFBQSxJQUMxQjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBO0FBRUYsUUFBTSxXQUFXLFNBQVMsT0FBTyxPQUFPLElBQUksTUFBTSxXQUFXLFFBQVE7QUFBQSxJQUNuRSxnQ0FBZ0M7QUFBQSxJQUNoQyx1QkFBdUI7QUFBQTtBQUFBO0FBSzNCLGFBQWU7QUFBQSxFQUNiLE1BQU07QUFBQSxFQUNOLFNBQVM7QUFBQSxFQUNULE9BQU87QUFBQSxFQUNQLGtCQUFrQixDQUFDO0FBQUEsRUFDbkIsSUFBSTtBQUFBO0FDeERDLGlDQUFpQyxXQUFXLE9BQU8sU0FBUTtBQUNoRSxNQUFJLGdCQUFnQixpQkFBaUI7QUFDckMsTUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEtBQUssUUFBUSxrQkFBa0IsSUFBSSxLQUFLO0FBRXBFLE1BQUksT0FBTyxPQUFPLFlBQVcsYUFBYSxRQUFPLE9BQU8sT0FBTyxJQUFJLE9BQU87QUFBQSxJQUN4RTtBQUFBLFFBQ0ksU0FDRixXQUFXLEtBQUssSUFDaEIsV0FBVyxLQUFLO0FBRXBCLGFBQVcsWUFBWTtBQUN2QixhQUFZLGFBQVksS0FBSztBQUM3QixTQUFPLENBQUMsTUFBTSxPQUFPLFFBQVEsa0JBQWtCLElBQUk7QUFBQSxJQUNqRCxHQUFHO0FBQUEsSUFDSCxHQUFHO0FBQUEsTUFDRDtBQUFBLElBQ0YsR0FBRztBQUFBLElBQ0gsR0FBRztBQUFBO0FBQUE7QUFJUCxnQkFBZ0IsT0FBTztBQUNyQixNQUFJLFFBQVEsTUFBTSxPQUNkLFdBQVUsTUFBTSxTQUNoQixPQUFPLE1BQU07QUFDakIsTUFBSSxrQkFBa0IsU0FBUSxRQUMxQixVQUFTLG9CQUFvQixTQUFTLENBQUMsR0FBRyxLQUFLO0FBQ25ELE1BQUksT0FBTyxXQUFXLE9BQU8sU0FBVSxLQUFLLFdBQVc7QUFDckQsUUFBSSxhQUFhLHdCQUF3QixXQUFXLE1BQU0sT0FBTztBQUNqRSxXQUFPO0FBQUEsS0FDTjtBQUNILE1BQUksd0JBQXdCLEtBQUssTUFBTSxZQUNuQyxLQUFJLHNCQUFzQixHQUMxQixLQUFJLHNCQUFzQjtBQUU5QixNQUFJLE1BQU0sY0FBYyxpQkFBaUIsTUFBTTtBQUM3QyxVQUFNLGNBQWMsY0FBYyxLQUFLO0FBQ3ZDLFVBQU0sY0FBYyxjQUFjLEtBQUs7QUFBQTtBQUd6QyxRQUFNLGNBQWMsUUFBUTtBQUFBO0FBSTlCLGVBQWU7QUFBQSxFQUNiLE1BQU07QUFBQSxFQUNOLFNBQVM7QUFBQSxFQUNULE9BQU87QUFBQSxFQUNQLFVBQVUsQ0FBQztBQUFBLEVBQ1gsSUFBSTtBQUFBO0FDbEROLHVCQUF1QixNQUFNO0FBQzNCLE1BQUksUUFBUSxLQUFLLE9BQ2IsT0FBTyxLQUFLO0FBS2hCLFFBQU0sY0FBYyxRQUFRLGVBQWU7QUFBQSxJQUN6QyxXQUFXLE1BQU0sTUFBTTtBQUFBLElBQ3ZCLFNBQVMsTUFBTSxNQUFNO0FBQUEsSUFDckIsVUFBVTtBQUFBLElBQ1YsV0FBVyxNQUFNO0FBQUE7QUFBQTtBQUtyQixzQkFBZTtBQUFBLEVBQ2IsTUFBTTtBQUFBLEVBQ04sU0FBUztBQUFBLEVBQ1QsT0FBTztBQUFBLEVBQ1AsSUFBSTtBQUFBLEVBQ0osTUFBTTtBQUFBO0FDdkJPLG9CQUFvQixNQUFNO0FBQ3ZDLFNBQU8sU0FBUyxNQUFNLE1BQU07QUFBQTtBQ1c5Qix5QkFBeUIsTUFBTTtBQUM3QixNQUFJLFFBQVEsS0FBSyxPQUNiLFdBQVUsS0FBSyxTQUNmLE9BQU8sS0FBSztBQUNoQixNQUFJLG9CQUFvQixTQUFRLFVBQzVCLGdCQUFnQixzQkFBc0IsU0FBUyxPQUFPLG1CQUN0RCxtQkFBbUIsU0FBUSxTQUMzQixlQUFlLHFCQUFxQixTQUFTLFFBQVEsa0JBQ3JELFdBQVcsU0FBUSxVQUNuQixlQUFlLFNBQVEsY0FDdkIsY0FBYyxTQUFRLGFBQ3RCLFVBQVUsU0FBUSxTQUNsQixrQkFBa0IsU0FBUSxRQUMxQixTQUFTLG9CQUFvQixTQUFTLE9BQU8saUJBQzdDLHdCQUF3QixTQUFRLGNBQ2hDLGVBQWUsMEJBQTBCLFNBQVMsSUFBSTtBQUMxRCxNQUFJLFdBQVcsZUFBZSxPQUFPO0FBQUEsSUFDbkM7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQTtBQUVGLE1BQUksZ0JBQWdCLGlCQUFpQixNQUFNO0FBQzNDLE1BQUksWUFBWSxhQUFhLE1BQU07QUFDbkMsTUFBSSxrQkFBa0IsQ0FBQztBQUN2QixNQUFJLFdBQVcseUJBQXlCO0FBQ3hDLE1BQUksVUFBVSxXQUFXO0FBQ3pCLE1BQUksaUJBQWdCLE1BQU0sY0FBYztBQUN4QyxNQUFJLGdCQUFnQixNQUFNLE1BQU07QUFDaEMsTUFBSSxhQUFhLE1BQU0sTUFBTTtBQUM3QixNQUFJLG9CQUFvQixPQUFPLGlCQUFpQixhQUFhLGFBQWEsT0FBTyxPQUFPLElBQUksTUFBTSxPQUFPO0FBQUEsSUFDdkcsV0FBVyxNQUFNO0FBQUEsUUFDYjtBQUNOLE1BQUksOEJBQThCLE9BQU8sc0JBQXNCLFdBQVc7QUFBQSxJQUN4RSxVQUFVO0FBQUEsSUFDVixTQUFTO0FBQUEsTUFDUCxPQUFPLE9BQU87QUFBQSxJQUNoQixVQUFVO0FBQUEsSUFDVixTQUFTO0FBQUEsS0FDUjtBQUNILE1BQUksc0JBQXNCLE1BQU0sY0FBYyxTQUFTLE1BQU0sY0FBYyxPQUFPLE1BQU0sYUFBYTtBQUNyRyxNQUFJLE9BQU87QUFBQSxJQUNULEdBQUc7QUFBQSxJQUNILEdBQUc7QUFBQTtBQUdMLE1BQUksQ0FBQyxnQkFBZTtBQUNsQjtBQUFBO0FBR0YsTUFBSSxlQUFlO0FBQ2pCLFFBQUk7QUFFSixRQUFJLFdBQVcsYUFBYSxNQUFNLE1BQU07QUFDeEMsUUFBSSxVQUFVLGFBQWEsTUFBTSxTQUFTO0FBQzFDLFFBQUksTUFBTSxhQUFhLE1BQU0sV0FBVztBQUN4QyxRQUFJLFVBQVMsZUFBYztBQUMzQixRQUFJUCxTQUFNLFVBQVMsU0FBUztBQUM1QixRQUFJQyxTQUFNLFVBQVMsU0FBUztBQUM1QixRQUFJLFdBQVcsU0FBUyxDQUFDLFdBQVcsT0FBTyxJQUFJO0FBQy9DLFFBQUksU0FBUyxjQUFjLFFBQVEsY0FBYyxPQUFPLFdBQVc7QUFDbkUsUUFBSSxTQUFTLGNBQWMsUUFBUSxDQUFDLFdBQVcsT0FBTyxDQUFDLGNBQWM7QUFHckUsUUFBSSxlQUFlLE1BQU0sU0FBUztBQUNsQyxRQUFJLFlBQVksVUFBVSxlQUFlLGNBQWMsZ0JBQWdCO0FBQUEsTUFDckUsT0FBTztBQUFBLE1BQ1AsUUFBUTtBQUFBO0FBRVYsUUFBSSxxQkFBcUIsTUFBTSxjQUFjLHNCQUFzQixNQUFNLGNBQWMsb0JBQW9CLFVBQVU7QUFDckgsUUFBSSxrQkFBa0IsbUJBQW1CO0FBQ3pDLFFBQUksa0JBQWtCLG1CQUFtQjtBQU16QyxRQUFJLFdBQVcsT0FBTyxHQUFHLGNBQWMsTUFBTSxVQUFVO0FBQ3ZELFFBQUksWUFBWSxrQkFBa0IsY0FBYyxPQUFPLElBQUksV0FBVyxXQUFXLGtCQUFrQiw0QkFBNEIsV0FBVyxTQUFTLFdBQVcsa0JBQWtCLDRCQUE0QjtBQUM1TSxRQUFJLFlBQVksa0JBQWtCLENBQUMsY0FBYyxPQUFPLElBQUksV0FBVyxXQUFXLGtCQUFrQiw0QkFBNEIsV0FBVyxTQUFTLFdBQVcsa0JBQWtCLDRCQUE0QjtBQUM3TSxRQUFJLG9CQUFvQixNQUFNLFNBQVMsU0FBUyxnQkFBZ0IsTUFBTSxTQUFTO0FBQy9FLFFBQUksZUFBZSxvQkFBb0IsYUFBYSxNQUFNLGtCQUFrQixhQUFhLElBQUksa0JBQWtCLGNBQWMsSUFBSTtBQUNqSSxRQUFJLHNCQUF1Qix5QkFBd0IsdUJBQXVCLE9BQU8sU0FBUyxvQkFBb0IsY0FBYyxPQUFPLHdCQUF3QjtBQUMzSixRQUFJLFlBQVksVUFBUyxZQUFZLHNCQUFzQjtBQUMzRCxRQUFJLFlBQVksVUFBUyxZQUFZO0FBQ3JDLFFBQUksa0JBQWtCLE9BQU8sU0FBU0UsSUFBUUgsUUFBSyxhQUFhQSxRQUFLLFNBQVEsU0FBU0UsSUFBUUQsUUFBSyxhQUFhQTtBQUNoSCxtQkFBYyxZQUFZO0FBQzFCLFNBQUssWUFBWSxrQkFBa0I7QUFBQTtBQUdyQyxNQUFJLGNBQWM7QUFDaEIsUUFBSTtBQUVKLFFBQUksWUFBWSxhQUFhLE1BQU0sTUFBTTtBQUV6QyxRQUFJLFdBQVcsYUFBYSxNQUFNLFNBQVM7QUFFM0MsUUFBSSxVQUFVLGVBQWM7QUFFNUIsUUFBSSxPQUFPLFlBQVksTUFBTSxXQUFXO0FBRXhDLFFBQUksT0FBTyxVQUFVLFNBQVM7QUFFOUIsUUFBSSxPQUFPLFVBQVUsU0FBUztBQUU5QixRQUFJLGVBQWUsQ0FBQyxLQUFLLE1BQU0sUUFBUSxtQkFBbUI7QUFFMUQsUUFBSSx1QkFBd0IsMEJBQXlCLHVCQUF1QixPQUFPLFNBQVMsb0JBQW9CLGFBQWEsT0FBTyx5QkFBeUI7QUFFN0osUUFBSSxhQUFhLGVBQWUsT0FBTyxVQUFVLGNBQWMsUUFBUSxXQUFXLFFBQVEsdUJBQXVCLDRCQUE0QjtBQUU3SSxRQUFJLGFBQWEsZUFBZSxVQUFVLGNBQWMsUUFBUSxXQUFXLFFBQVEsdUJBQXVCLDRCQUE0QixVQUFVO0FBRWhKLFFBQUksbUJBQW1CLFVBQVUsZUFBZSxlQUFlLFlBQVksU0FBUyxjQUFjLE9BQU8sU0FBUyxhQUFhLE1BQU0sU0FBUyxTQUFTLGFBQWE7QUFFcEssbUJBQWMsV0FBVztBQUN6QixTQUFLLFdBQVcsbUJBQW1CO0FBQUE7QUFHckMsUUFBTSxjQUFjLFFBQVE7QUFBQTtBQUk5Qix3QkFBZTtBQUFBLEVBQ2IsTUFBTTtBQUFBLEVBQ04sU0FBUztBQUFBLEVBQ1QsT0FBTztBQUFBLEVBQ1AsSUFBSTtBQUFBLEVBQ0osa0JBQWtCLENBQUM7QUFBQTtBQzVJTiw4QkFBOEIsU0FBUztBQUNwRCxTQUFPO0FBQUEsSUFDTCxZQUFZLFFBQVE7QUFBQSxJQUNwQixXQUFXLFFBQVE7QUFBQTtBQUFBO0FDQ1IsdUJBQXVCLE1BQU07QUFDMUMsTUFBSSxTQUFTLFVBQVUsU0FBUyxDQUFDLGNBQWMsT0FBTztBQUNwRCxXQUFPLGdCQUFnQjtBQUFBLFNBQ2xCO0FBQ0wsV0FBTyxxQkFBcUI7QUFBQTtBQUFBO0FDQ2hDLHlCQUF5QixTQUFTO0FBQ2hDLE1BQUksT0FBTyxRQUFRO0FBQ25CLE1BQUksU0FBUyxNQUFNLEtBQUssU0FBUyxRQUFRLGVBQWU7QUFDeEQsTUFBSSxTQUFTLE1BQU0sS0FBSyxVQUFVLFFBQVEsZ0JBQWdCO0FBQzFELFNBQU8sV0FBVyxLQUFLLFdBQVc7QUFBQTtBQUtyQiwwQkFBMEIseUJBQXlCLGVBQWMsU0FBUztBQUN2RixNQUFJLFlBQVksUUFBUTtBQUN0QixjQUFVO0FBQUE7QUFHWixNQUFJLDBCQUEwQixjQUFjO0FBQzVDLE1BQUksdUJBQXVCLGNBQWMsa0JBQWlCLGdCQUFnQjtBQUMxRSxNQUFJLGtCQUFrQixtQkFBbUI7QUFDekMsTUFBSSxPQUFPLHNCQUFzQix5QkFBeUI7QUFDMUQsTUFBSSxTQUFTO0FBQUEsSUFDWCxZQUFZO0FBQUEsSUFDWixXQUFXO0FBQUE7QUFFYixNQUFJLFVBQVU7QUFBQSxJQUNaLEdBQUc7QUFBQSxJQUNILEdBQUc7QUFBQTtBQUdMLE1BQUksMkJBQTJCLENBQUMsMkJBQTJCLENBQUMsU0FBUztBQUNuRSxRQUFJLFlBQVksbUJBQWtCLFVBQ2xDLGVBQWUsa0JBQWtCO0FBQy9CLGVBQVMsY0FBYztBQUFBO0FBR3pCLFFBQUksY0FBYyxnQkFBZTtBQUMvQixnQkFBVSxzQkFBc0IsZUFBYztBQUM5QyxjQUFRLEtBQUssY0FBYTtBQUMxQixjQUFRLEtBQUssY0FBYTtBQUFBLGVBQ2pCLGlCQUFpQjtBQUMxQixjQUFRLElBQUksb0JBQW9CO0FBQUE7QUFBQTtBQUlwQyxTQUFPO0FBQUEsSUFDTCxHQUFHLEtBQUssT0FBTyxPQUFPLGFBQWEsUUFBUTtBQUFBLElBQzNDLEdBQUcsS0FBSyxNQUFNLE9BQU8sWUFBWSxRQUFRO0FBQUEsSUFDekMsT0FBTyxLQUFLO0FBQUEsSUFDWixRQUFRLEtBQUs7QUFBQTtBQUFBO0FDckRqQixlQUFlLFdBQVc7QUFDeEIsTUFBSSxNQUFNLElBQUk7QUFDZCxNQUFJLFVBQVUsSUFBSTtBQUNsQixNQUFJLFNBQVM7QUFDYixZQUFVLFFBQVEsU0FBVSxVQUFVO0FBQ3BDLFFBQUksSUFBSSxTQUFTLE1BQU07QUFBQTtBQUd6QixnQkFBYyxVQUFVO0FBQ3RCLFlBQVEsSUFBSSxTQUFTO0FBQ3JCLFFBQUksV0FBVyxHQUFHLE9BQU8sU0FBUyxZQUFZLElBQUksU0FBUyxvQkFBb0I7QUFDL0UsYUFBUyxRQUFRLFNBQVUsS0FBSztBQUM5QixVQUFJLENBQUMsUUFBUSxJQUFJLE1BQU07QUFDckIsWUFBSSxjQUFjLElBQUksSUFBSTtBQUUxQixZQUFJLGFBQWE7QUFDZixlQUFLO0FBQUE7QUFBQTtBQUFBO0FBSVgsV0FBTyxLQUFLO0FBQUE7QUFHZCxZQUFVLFFBQVEsU0FBVSxVQUFVO0FBQ3BDLFFBQUksQ0FBQyxRQUFRLElBQUksU0FBUyxPQUFPO0FBRS9CLFdBQUs7QUFBQTtBQUFBO0FBR1QsU0FBTztBQUFBO0FBR00sd0JBQXdCLFdBQVc7QUFFaEQsTUFBSSxtQkFBbUIsTUFBTTtBQUU3QixTQUFPLGVBQWUsT0FBTyxTQUFVLEtBQUssT0FBTztBQUNqRCxXQUFPLElBQUksT0FBTyxpQkFBaUIsT0FBTyxTQUFVLFVBQVU7QUFDNUQsYUFBTyxTQUFTLFVBQVU7QUFBQTtBQUFBLEtBRTNCO0FBQUE7QUMxQ1Usa0JBQWtCLEtBQUk7QUFDbkMsTUFBSTtBQUNKLFNBQU8sV0FBWTtBQUNqQixRQUFJLENBQUMsU0FBUztBQUNaLGdCQUFVLElBQUksUUFBUSxTQUFVLFNBQVM7QUFDdkMsZ0JBQVEsVUFBVSxLQUFLLFdBQVk7QUFDakMsb0JBQVU7QUFDVixrQkFBUTtBQUFBO0FBQUE7QUFBQTtBQUtkLFdBQU87QUFBQTtBQUFBO0FDWkkscUJBQXFCLFdBQVc7QUFDN0MsTUFBSSxTQUFTLFVBQVUsT0FBTyxTQUFVLFNBQVEsU0FBUztBQUN2RCxRQUFJLFdBQVcsUUFBTyxRQUFRO0FBQzlCLFlBQU8sUUFBUSxRQUFRLFdBQVcsT0FBTyxPQUFPLElBQUksVUFBVSxTQUFTO0FBQUEsTUFDckUsU0FBUyxPQUFPLE9BQU8sSUFBSSxTQUFTLFNBQVMsUUFBUTtBQUFBLE1BQ3JELE1BQU0sT0FBTyxPQUFPLElBQUksU0FBUyxNQUFNLFFBQVE7QUFBQSxTQUM1QztBQUNMLFdBQU87QUFBQSxLQUNOO0FBRUgsU0FBTyxPQUFPLEtBQUssUUFBUSxJQUFJLFNBQVUsS0FBSztBQUM1QyxXQUFPLE9BQU87QUFBQTtBQUFBO0FDS2xCLElBQUksa0JBQWtCO0FBQUEsRUFDcEIsV0FBVztBQUFBLEVBQ1gsV0FBVztBQUFBLEVBQ1gsVUFBVTtBQUFBO0FBR1osNEJBQTRCO0FBQzFCLFdBQVMsT0FBTyxVQUFVLFFBQVEsT0FBTyxJQUFJLE1BQU0sT0FBTyxPQUFPLEdBQUcsT0FBTyxNQUFNLFFBQVE7QUFDdkYsU0FBSyxRQUFRLFVBQVU7QUFBQTtBQUd6QixTQUFPLENBQUMsS0FBSyxLQUFLLFNBQVUsU0FBUztBQUNuQyxXQUFPLENBQUUsWUFBVyxPQUFPLFFBQVEsMEJBQTBCO0FBQUE7QUFBQTtBQUkxRCx5QkFBeUIsa0JBQWtCO0FBQ2hELE1BQUkscUJBQXFCLFFBQVE7QUFDL0IsdUJBQW1CO0FBQUE7QUFHckIsTUFBSSxvQkFBb0Isa0JBQ3BCLHdCQUF3QixrQkFBa0Isa0JBQzFDLG1CQUFtQiwwQkFBMEIsU0FBUyxLQUFLLHVCQUMzRCx5QkFBeUIsa0JBQWtCLGdCQUMzQyxpQkFBaUIsMkJBQTJCLFNBQVMsa0JBQWtCO0FBQzNFLFNBQU8sdUJBQXNCLFlBQVcsU0FBUSxVQUFTO0FBQ3ZELFFBQUksYUFBWSxRQUFRO0FBQ3RCLGlCQUFVO0FBQUE7QUFHWixRQUFJLFFBQVE7QUFBQSxNQUNWLFdBQVc7QUFBQSxNQUNYLGtCQUFrQjtBQUFBLE1BQ2xCLFNBQVMsT0FBTyxPQUFPLElBQUksaUJBQWlCO0FBQUEsTUFDNUMsZUFBZTtBQUFBLE1BQ2YsVUFBVTtBQUFBLFFBQ1IsV0FBVztBQUFBLFFBQ1gsUUFBUTtBQUFBO0FBQUEsTUFFVixZQUFZO0FBQUEsTUFDWixRQUFRO0FBQUE7QUFFVixRQUFJLG1CQUFtQjtBQUN2QixRQUFJLGNBQWM7QUFDbEIsUUFBSSxXQUFXO0FBQUEsTUFDYjtBQUFBLE1BQ0EsWUFBWSxvQkFBb0Isa0JBQWtCO0FBQ2hELFlBQUksV0FBVSxPQUFPLHFCQUFxQixhQUFhLGlCQUFpQixNQUFNLFdBQVc7QUFDekY7QUFDQSxjQUFNLFVBQVUsT0FBTyxPQUFPLElBQUksZ0JBQWdCLE1BQU0sU0FBUztBQUNqRSxjQUFNLGdCQUFnQjtBQUFBLFVBQ3BCLFdBQVcsVUFBVSxjQUFhLGtCQUFrQixjQUFhLFdBQVUsaUJBQWlCLGtCQUFrQixXQUFVLGtCQUFrQjtBQUFBLFVBQzFJLFFBQVEsa0JBQWtCO0FBQUE7QUFJNUIsWUFBSSxtQkFBbUIsZUFBZSxZQUFZLEdBQUcsT0FBTyxrQkFBa0IsTUFBTSxRQUFRO0FBRTVGLGNBQU0sbUJBQW1CLGlCQUFpQixPQUFPLFNBQVUsSUFBRztBQUM1RCxpQkFBTyxHQUFFO0FBQUE7QUFxQ1g7QUFDQSxlQUFPLFNBQVM7QUFBQTtBQUFBLE1BT2xCLGFBQWEsdUJBQXVCO0FBQ2xDLFlBQUksYUFBYTtBQUNmO0FBQUE7QUFHRixZQUFJLGtCQUFrQixNQUFNLFVBQ3hCLGFBQVksZ0JBQWdCLFdBQzVCLFVBQVMsZ0JBQWdCO0FBRzdCLFlBQUksQ0FBQyxpQkFBaUIsWUFBVyxVQUFTO0FBS3hDO0FBQUE7QUFJRixjQUFNLFFBQVE7QUFBQSxVQUNaLFdBQVcsaUJBQWlCLFlBQVcsZ0JBQWdCLFVBQVMsTUFBTSxRQUFRLGFBQWE7QUFBQSxVQUMzRixRQUFRLGNBQWM7QUFBQTtBQU94QixjQUFNLFFBQVE7QUFDZCxjQUFNLFlBQVksTUFBTSxRQUFRO0FBS2hDLGNBQU0saUJBQWlCLFFBQVEsU0FBVSxVQUFVO0FBQ2pELGlCQUFPLE1BQU0sY0FBYyxTQUFTLFFBQVEsT0FBTyxPQUFPLElBQUksU0FBUztBQUFBO0FBSXpFLGlCQUFTLFFBQVEsR0FBRyxRQUFRLE1BQU0saUJBQWlCLFFBQVEsU0FBUztBQVVsRSxjQUFJLE1BQU0sVUFBVSxNQUFNO0FBQ3hCLGtCQUFNLFFBQVE7QUFDZCxvQkFBUTtBQUNSO0FBQUE7QUFHRixjQUFJLHdCQUF3QixNQUFNLGlCQUFpQixRQUMvQyxNQUFLLHNCQUFzQixJQUMzQix5QkFBeUIsc0JBQXNCLFNBQy9DLFdBQVcsMkJBQTJCLFNBQVMsS0FBSyx3QkFDcEQsT0FBTyxzQkFBc0I7QUFFakMsY0FBSSxPQUFPLFFBQU8sWUFBWTtBQUM1QixvQkFBUSxJQUFHO0FBQUEsY0FDVDtBQUFBLGNBQ0EsU0FBUztBQUFBLGNBQ1Q7QUFBQSxjQUNBO0FBQUEsa0JBQ0k7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU1aLFFBQVEsU0FBUyxXQUFZO0FBQzNCLGVBQU8sSUFBSSxRQUFRLFNBQVUsU0FBUztBQUNwQyxtQkFBUztBQUNULGtCQUFRO0FBQUE7QUFBQTtBQUFBLE1BR1osU0FBUyxtQkFBbUI7QUFDMUI7QUFDQSxzQkFBYztBQUFBO0FBQUE7QUFJbEIsUUFBSSxDQUFDLGlCQUFpQixZQUFXLFVBQVM7QUFLeEMsYUFBTztBQUFBO0FBR1QsYUFBUyxXQUFXLFVBQVMsS0FBSyxTQUFVLFFBQU87QUFDakQsVUFBSSxDQUFDLGVBQWUsU0FBUSxlQUFlO0FBQ3pDLGlCQUFRLGNBQWM7QUFBQTtBQUFBO0FBUTFCLGtDQUE4QjtBQUM1QixZQUFNLGlCQUFpQixRQUFRLFNBQVUsT0FBTztBQUM5QyxZQUFJLE9BQU8sTUFBTSxNQUNiLGdCQUFnQixNQUFNLFNBQ3RCLFdBQVUsa0JBQWtCLFNBQVMsS0FBSyxlQUMxQyxVQUFTLE1BQU07QUFFbkIsWUFBSSxPQUFPLFlBQVcsWUFBWTtBQUNoQyxjQUFJLFlBQVksUUFBTztBQUFBLFlBQ3JCO0FBQUEsWUFDQTtBQUFBLFlBQ0E7QUFBQSxZQUNBLFNBQVM7QUFBQTtBQUdYLGNBQUksU0FBUyxtQkFBa0I7QUFBQTtBQUUvQiwyQkFBaUIsS0FBSyxhQUFhO0FBQUE7QUFBQTtBQUFBO0FBS3pDLHNDQUFrQztBQUNoQyx1QkFBaUIsUUFBUSxTQUFVLEtBQUk7QUFDckMsZUFBTztBQUFBO0FBRVQseUJBQW1CO0FBQUE7QUFHckIsV0FBTztBQUFBO0FBQUE7QUNqUEosSUFBSSxlQUFlLGdCQUFnQjtBQUFBLEVBQ3hDLGtCQUFrQixDQUFDTyxRQUFNQyxpQkFBZUMsaUJBQWUsZ0JBQWdCQyxVQUFRQyxRQUFNQyxtQkFBaUJDO0FBQUFBO0FDU3pGLHNCQUFzQjtBQUNuQyxNQUFJLFVBQVVDLG1DQUFPO0FBQ3JCLE1BQUksWUFBWUEsbUNBQU8sV0FBWTtBQUNqQyxXQUFPLFFBQVE7QUFBQTtBQUVqQkMsd0NBQVUsV0FBWTtBQUNwQixXQUFPLFdBQVk7QUFDakIsY0FBUSxVQUFVO0FBQUE7QUFBQSxLQUVuQjtBQUNILFNBQU8sVUFBVTtBQUFBO0FDN0JuQixzQkFBc0IsT0FBTztBQUMzQixNQUFJLFlBQVk7QUFDaEIsU0FBTyxDQUFDLE1BQU0sSUFBSW5OLHdDQUFZLFNBQVUsV0FBVztBQUNqRCxRQUFJLENBQUM7QUFBYTtBQUNsQixXQUFPLE1BQU0sR0FBRztBQUFBLEtBQ2YsQ0FBQyxXQUFXLE1BQU07QUFBQTtBQ0Z2QixJQUFJLHNCQUFzQiw4QkFBNkIsV0FBVTtBQUMvRCxTQUFPO0FBQUEsSUFDTCxVQUFVO0FBQUEsSUFDVixLQUFLO0FBQUEsSUFDTCxNQUFNO0FBQUEsSUFDTixTQUFTO0FBQUEsSUFDVCxlQUFlO0FBQUE7QUFBQTtBQUluQixJQUFJLDhCQUE4QjtBQUFBLEVBQ2hDLE1BQU07QUFBQSxFQUNOLFNBQVM7QUFBQTtBQUdYLElBQUksMEJBQTBCO0FBQUEsRUFDNUIsTUFBTTtBQUFBLEVBQ04sU0FBUztBQUFBLEVBQ1QsT0FBTztBQUFBLEVBQ1AsUUFBUSxpQkFBZ0IsTUFBTTtBQUM1QixRQUFJLFFBQVEsS0FBSztBQUNqQixXQUFPLFdBQVk7QUFDakIsVUFBSSxrQkFBa0IsTUFBTSxVQUN4QixhQUFZLGdCQUFnQixXQUM1QixVQUFTLGdCQUFnQjtBQUU3QixVQUFJLHFCQUFxQixZQUFXO0FBQ2xDLFlBQUksTUFBTyxZQUFVLGFBQWEsdUJBQXVCLElBQUksTUFBTSxLQUFLLE9BQU8sU0FBVSxLQUFJO0FBQzNGLGlCQUFPLElBQUcsV0FBVyxRQUFPO0FBQUE7QUFFOUIsWUFBSSxDQUFDLElBQUk7QUFBUSxxQkFBVSxnQkFBZ0I7QUFBQTtBQUF5QixxQkFBVSxhQUFhLG9CQUFvQixJQUFJLEtBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUk5SCxJQUFJLGFBQVksT0FBTztBQUNyQixRQUFJO0FBRUosUUFBSSxRQUFRLE1BQU07QUFDbEIsUUFBSSxtQkFBbUIsTUFBTSxVQUN6QixVQUFTLGlCQUFpQixRQUMxQixhQUFZLGlCQUFpQjtBQUNqQyxRQUFJLE9BQVEsd0JBQXVCLFFBQU8sYUFBYSxZQUFZLE9BQU8sU0FBUyxxQkFBcUI7QUFFeEcsUUFBSSxRQUFPLE1BQU0sU0FBUyxhQUFhLGtCQUFrQixZQUFXO0FBQ2xFLFVBQUksTUFBTSxXQUFVLGFBQWE7QUFFakMsVUFBSSxPQUFPLElBQUksTUFBTSxLQUFLLFFBQVEsUUFBTyxRQUFRLElBQUk7QUFDbkQ7QUFBQTtBQUdGLGlCQUFVLGFBQWEsb0JBQW9CLE1BQU0sTUFBTSxNQUFNLFFBQU8sS0FBSyxRQUFPO0FBQUE7QUFBQTtBQUFBO0FBSXRGLElBQUksa0JBQWtCO0FBa0J0QixtQkFBbUIsa0JBQWtCLGVBQWUsT0FBTztBQUN6RCxNQUFJLFFBQVEsVUFBVSxTQUFTLEtBQUssT0FDaEMsZ0JBQWdCLE1BQU0sU0FDdEIsVUFBVSxrQkFBa0IsU0FBUyxPQUFPLGVBQzVDLGtCQUFrQixNQUFNLFdBQ3hCLFlBQVksb0JBQW9CLFNBQVMsV0FBVyxpQkFDcEQsaUJBQWlCLE1BQU0sVUFDdkIsV0FBVyxtQkFBbUIsU0FBUyxhQUFhLGdCQUNwRCxrQkFBa0IsTUFBTSxXQUN4QixZQUFZLG9CQUFvQixTQUFTLGtCQUFrQixpQkFDM0QsU0FBUyw4QkFBOEIsT0FBTyxDQUFDLFdBQVcsYUFBYSxZQUFZO0FBRXZGLE1BQUksb0JBQW9Ca047QUFDeEIsTUFBSSxTQUFTbE4sd0NBQVksV0FBWTtBQUNuQyxRQUFJO0FBRUosSUFBQyx5QkFBd0Isa0JBQWtCLFlBQVksT0FBTyxTQUFTLHNCQUFzQjtBQUFBLEtBQzVGO0FBQ0gsTUFBSSxjQUFjQSx3Q0FBWSxXQUFZO0FBQ3hDLFFBQUk7QUFFSixJQUFDLDBCQUF5QixrQkFBa0IsWUFBWSxPQUFPLFNBQVMsdUJBQXVCO0FBQUEsS0FDOUY7QUFFSCxNQUFJLGdCQUFnQixhQUFhRCxxQ0FBUztBQUFBLElBQ3hDO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBLFlBQVk7QUFBQSxJQUNaLFFBQVE7QUFBQSxNQUNOLFFBQVEsb0JBQW9CO0FBQUEsTUFDNUIsT0FBTztBQUFBO0FBQUEsT0FHUCxjQUFjLGNBQWMsSUFDNUIsV0FBVyxjQUFjO0FBRTdCLE1BQUksaUJBQWlCbU0sb0NBQVEsV0FBWTtBQUN2QyxXQUFPO0FBQUEsTUFDTCxNQUFNO0FBQUEsTUFDTixTQUFTO0FBQUEsTUFDVCxPQUFPO0FBQUEsTUFDUCxVQUFVLENBQUM7QUFBQSxNQUNYLElBQUksYUFBWSxPQUFPO0FBQ3JCLFlBQUksUUFBUSxNQUFNO0FBQ2xCLFlBQUksU0FBUztBQUNiLFlBQUksYUFBYTtBQUNqQixlQUFPLEtBQUssTUFBTSxVQUFVLFFBQVEsU0FBVSxTQUFTO0FBQ3JELGlCQUFPLFdBQVcsTUFBTSxPQUFPO0FBQy9CLHFCQUFXLFdBQVcsTUFBTSxXQUFXO0FBQUE7QUFFekMsaUJBQVM7QUFBQSxVQUNQO0FBQUEsVUFDQTtBQUFBLFVBQ0E7QUFBQSxVQUNBO0FBQUEsVUFDQTtBQUFBLFVBQ0EsV0FBVyxNQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FJdEIsQ0FBQyxRQUFRLGFBQWE7QUFDekJpQix3Q0FBVSxXQUFZO0FBQ3BCLFFBQUksQ0FBQyxrQkFBa0IsV0FBVyxDQUFDO0FBQVM7QUFDNUMsc0JBQWtCLFFBQVEsV0FBVztBQUFBLE1BQ25DO0FBQUEsTUFDQTtBQUFBLE1BQ0EsV0FBVyxHQUFHLE9BQU8sV0FBVyxDQUFDLGdCQUFnQjtBQUFBO0FBQUEsS0FHbEQsQ0FBQyxVQUFVLFdBQVcsZ0JBQWdCO0FBQ3pDQSx3Q0FBVSxXQUFZO0FBQ3BCLFFBQUksQ0FBQyxXQUFXLG9CQUFvQixRQUFRLGlCQUFpQixNQUFNO0FBQ2pFLGFBQU87QUFBQTtBQUdULHNCQUFrQixVQUFVLGFBQWEsa0JBQWtCLGVBQWVsTixXQUFTLElBQUksUUFBUTtBQUFBLE1BQzdGO0FBQUEsTUFDQTtBQUFBLE1BQ0EsV0FBVyxHQUFHLE9BQU8sV0FBVyxDQUFDLHlCQUF5QjtBQUFBO0FBRTVELFdBQU8sV0FBWTtBQUNqQixVQUFJLGtCQUFrQixXQUFXLE1BQU07QUFDckMsMEJBQWtCLFFBQVE7QUFDMUIsMEJBQWtCLFVBQVU7QUFDNUIsaUJBQVMsU0FBVSxHQUFHO0FBQ3BCLGlCQUFPQSxXQUFTLElBQUksR0FBRztBQUFBLFlBQ3JCLFlBQVk7QUFBQSxZQUNaLFFBQVE7QUFBQSxjQUNOLFFBQVEsb0JBQW9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBT3JDLENBQUMsU0FBUyxrQkFBa0I7QUFDL0IsU0FBTztBQUFBO0FDN0tGLElBQUksbUJBQW1CO0FBQ3ZCLElBQUksZ0JBQWdCO0FBRTNCLElBQUk7QUFDRixNQUFJLFVBQVU7QUFBQSxRQUNSLFVBQVU7QUFDWixhQUFPLG1CQUFtQjtBQUFBO0FBQUEsUUFHeEIsT0FBTztBQUVULGFBQU8sZ0JBQWdCLG1CQUFtQjtBQUFBO0FBQUE7QUFLOUMsTUFBSSxXQUFXO0FBQ2IsV0FBTyxpQkFBaUIsUUFBUSxTQUFTO0FBQ3pDLFdBQU8sb0JBQW9CLFFBQVEsU0FBUztBQUFBO0FBQUEsU0FFdkMsR0FBUDtBQUFBO0FBWUYsNEJBQTBCLE1BQU0sV0FBVyxTQUFTLFVBQVM7QUFDM0QsTUFBSSxZQUFXLE9BQU8sYUFBWSxhQUFhLENBQUMsZUFBZTtBQUM3RCxRQUFJLE9BQU8sU0FBUSxNQUNmLFVBQVUsU0FBUTtBQUN0QixRQUFJLGlCQUFpQjtBQUVyQixRQUFJLENBQUMsaUJBQWlCLE1BQU07QUFDMUIsdUJBQWlCLFFBQVEsVUFBVSxxQkFBcUIsT0FBTztBQUM3RCxhQUFLLG9CQUFvQixXQUFXLGFBQWE7QUFDakQsZ0JBQVEsS0FBSyxNQUFNO0FBQUE7QUFHckIsY0FBUSxTQUFTO0FBQUE7QUFHbkIsU0FBSyxpQkFBaUIsV0FBVyxnQkFBZ0IsbUJBQW1CLFdBQVU7QUFBQTtBQUdoRixPQUFLLGlCQUFpQixXQUFXLFNBQVM7QUFBQTtBQzVDNUMsNkJBQTZCLE1BQU0sV0FBVyxTQUFTLFVBQVM7QUFDOUQsTUFBSSxVQUFVLFlBQVcsT0FBTyxhQUFZLFlBQVksU0FBUSxVQUFVO0FBQzFFLE9BQUssb0JBQW9CLFdBQVcsU0FBUztBQUU3QyxNQUFJLFFBQVEsUUFBUTtBQUNsQixTQUFLLG9CQUFvQixXQUFXLFFBQVEsUUFBUTtBQUFBO0FBQUE7QUNWeEQsZ0JBQWdCLE1BQU0sV0FBVyxTQUFTLFVBQVM7QUFDakRtTixxQkFBaUIsTUFBTSxXQUFXLFNBQVM7QUFDM0MsU0FBTyxXQUFZO0FBQ2pCLHdCQUFvQixNQUFNLFdBQVcsU0FBUztBQUFBO0FBQUE7Ozs7OztBQ0tsRCx5QkFBeUIsT0FBTztBQUM5QixNQUFJLE1BQU1GLG1DQUFPO0FBQ2pCQyx3Q0FBVSxXQUFZO0FBQ3BCLFFBQUksVUFBVTtBQUFBLEtBQ2IsQ0FBQztBQUNKLFNBQU87QUFBQTtBQ2RNLDBCQUEwQixLQUFJO0FBQzNDLE1BQUksTUFBTSxnQkFBZ0I7QUFDMUIsU0FBT25OLHdDQUFZLFdBQVk7QUFDN0IsV0FBTyxJQUFJLFdBQVcsSUFBSSxRQUFRLE1BQU0sS0FBSztBQUFBLEtBQzVDLENBQUM7QUFBQTtBQ0xTLHlCQUF5QixvQkFBb0I7QUFDMUQsTUFBSSxzQkFBc0IsY0FBYyxvQkFBb0I7QUFDMUQsV0FBTyxTQUFTLFlBQVk7QUFBQTtBQUc5QixTQUFPLHNCQUFzQixPQUFPLHFCQUFxQjtBQUFBO0FDSjNELG9CQUFnQixTQUFVLG9CQUFvQjtBQUM1QyxTQUFPdUQsZ0JBQWMsZ0JBQWdCO0FBQUE7QUNHdkMsSUFBSSxnQkFBZ0I7QUFFcEIsSUFBSSxPQUFPLGlCQUFnQjtBQUFBO0FBRTNCLDBCQUEwQixPQUFPO0FBQy9CLFNBQU8sTUFBTSxXQUFXO0FBQUE7QUFHMUIseUJBQXlCLE9BQU87QUFDOUIsU0FBTyxDQUFDLENBQUUsT0FBTSxXQUFXLE1BQU0sVUFBVSxNQUFNLFdBQVcsTUFBTTtBQUFBO0FBR3BFLElBQUksZUFBZSx1QkFBc0IsS0FBSztBQUM1QyxTQUFPLE9BQVEsY0FBYSxNQUFNLElBQUksVUFBVTtBQUFBO0FBZWxELHNCQUFzQixLQUFLLGFBQWEsT0FBTztBQUM3QyxNQUFJLE9BQU8sVUFBVSxTQUFTLEtBQUssT0FDL0IsV0FBVyxLQUFLLFVBQ2hCLG9CQUFvQixLQUFLLGNBQ3pCLGVBQWUsc0JBQXNCLFNBQVMsVUFBVTtBQUU1RCxNQUFJLDJCQUEyQjJKLG1DQUFPO0FBQ3RDLE1BQUksVUFBVSxlQUFlO0FBQzdCLE1BQUkscUJBQXFCbE4sd0NBQVksU0FBVSxHQUFHO0FBQ2hELFFBQUksZ0JBQWdCLGFBQWE7QUFFakMsNkJBQXlCLFVBQVUsQ0FBQyxpQkFBaUIsZ0JBQWdCLE1BQU0sQ0FBQyxpQkFBaUIsTUFBTSxDQUFDLENBQUMyRCxXQUFTLGVBQWUsRUFBRTtBQUFBLEtBQzlILENBQUM7QUFDSixNQUFJLGNBQWMsaUJBQWlCLFNBQVUsR0FBRztBQUM5QyxRQUFJLENBQUMseUJBQXlCLFNBQVM7QUFDckMsY0FBUTtBQUFBO0FBQUE7QUFHWixNQUFJLGNBQWMsaUJBQWlCLFNBQVUsR0FBRztBQUM5QyxRQUFJLEVBQUUsWUFBWSxlQUFlO0FBQy9CLGNBQVE7QUFBQTtBQUFBO0FBR1p3Six3Q0FBVSxXQUFZO0FBQ3BCLFFBQUksWUFBWSxPQUFPO0FBQU0sYUFBTztBQUdwQyxRQUFJLGVBQWUsT0FBTztBQUMxQixRQUFJLE1BQU0sY0FBYyxhQUFhO0FBSXJDLFFBQUksNkJBQTZCLE9BQU8sS0FBSyxjQUFjLG9CQUFvQjtBQUMvRSxRQUFJLHNCQUFzQixPQUFPLEtBQUssY0FBYyxTQUFVLEdBQUc7QUFFL0QsVUFBSSxNQUFNLGNBQWM7QUFDdEIsdUJBQWU7QUFDZjtBQUFBO0FBR0Ysa0JBQVk7QUFBQTtBQUVkLFFBQUksc0JBQXNCLE9BQU8sS0FBSyxTQUFTLFNBQVUsR0FBRztBQUUxRCxVQUFJLE1BQU0sY0FBYztBQUN0Qix1QkFBZTtBQUNmO0FBQUE7QUFHRixrQkFBWTtBQUFBO0FBRWQsUUFBSSw0QkFBNEI7QUFFaEMsUUFBSSxrQkFBa0IsSUFBSSxpQkFBaUI7QUFDekMsa0NBQTRCLEdBQUcsTUFBTSxLQUFLLElBQUksS0FBSyxVQUFVLElBQUksU0FBVSxJQUFJO0FBQzdFLGVBQU8sT0FBTyxJQUFJLGFBQWE7QUFBQTtBQUFBO0FBSW5DLFdBQU8sV0FBWTtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxnQ0FBMEIsUUFBUSxTQUFVLFFBQVE7QUFDbEQsZUFBTztBQUFBO0FBQUE7QUFBQSxLQUdWLENBQUMsS0FBSyxVQUFVLGNBQWMsb0JBQW9CLGFBQWE7QUFBQTtBQ25HN0QsSUFBSSxzQkFBc0IsOEJBQTZCLEtBQUs7QUFDakUsTUFBSTtBQUVKLE1BQUksT0FBTyxhQUFhO0FBQWEsV0FBTztBQUM1QyxNQUFJLE9BQU87QUFBTSxXQUFPNUosa0JBQWdCO0FBQ3hDLE1BQUksT0FBTyxRQUFRO0FBQVksVUFBTTtBQUNyQyxNQUFJLE9BQU8sYUFBYTtBQUFLLFVBQU0sSUFBSTtBQUN2QyxNQUFLLFFBQU8sUUFBUSxPQUFPLFNBQVMsS0FBSztBQUFVLFdBQU8sT0FBTztBQUNqRSxTQUFPO0FBQUE7QUFFTSwwQkFBMEIsS0FBSyxZQUFZO0FBQ3hELE1BQUksWUFBWXhELHFDQUFTLFdBQVk7QUFDbkMsV0FBTyxvQkFBb0I7QUFBQSxNQUV6QixjQUFjLFVBQVUsSUFDeEIsU0FBUyxVQUFVO0FBRXZCLE1BQUksQ0FBQyxhQUFhO0FBQ2hCLFFBQUksV0FBVyxvQkFBb0I7QUFDbkMsUUFBSTtBQUFVLGFBQU87QUFBQTtBQUd2Qm9OLHdDQUFVLFdBQVk7QUFDcEIsUUFBSSxjQUFjLGFBQWE7QUFDN0IsaUJBQVc7QUFBQTtBQUFBLEtBRVosQ0FBQyxZQUFZO0FBQ2hCQSx3Q0FBVSxXQUFZO0FBQ3BCLFFBQUksVUFBVSxvQkFBb0I7QUFFbEMsUUFBSSxZQUFZLGFBQWE7QUFDM0IsYUFBTztBQUFBO0FBQUEsS0FFUixDQUFDLEtBQUs7QUFDVCxTQUFPO0FBQUE7QUNuQ0YsdUJBQXVCLFdBQVc7QUFDdkMsTUFBSSxTQUFTO0FBRWIsTUFBSSxDQUFDLE1BQU0sUUFBUSxZQUFZO0FBQzdCLFdBQU8sYUFBYTtBQUFBO0FBSXRCLGVBQWEsT0FBTyxTQUFTLFVBQVUsUUFBUSxTQUFVLElBQUc7QUFDMUQsV0FBTyxHQUFFLFFBQVE7QUFBQTtBQUVuQixTQUFPO0FBQUE7QUFFRix5QkFBeUIsS0FBSztBQUNuQyxNQUFJLFFBQVEsUUFBUTtBQUNsQixVQUFNO0FBQUE7QUFHUixNQUFJLE1BQU0sUUFBUTtBQUFNLFdBQU87QUFDL0IsU0FBTyxPQUFPLEtBQUssS0FBSyxJQUFJLFNBQVUsR0FBRztBQUN2QyxRQUFJLEdBQUcsT0FBTztBQUNkLFdBQU8sSUFBSTtBQUFBO0FBQUE7QUFHQSxzQ0FBc0MsTUFBTTtBQUN6RCxNQUFJLHVCQUF1Qix3QkFBd0IsbUJBQW1CO0FBRXRFLE1BQUksVUFBVSxLQUFLLFNBQ2YsZUFBZSxLQUFLLGNBQ3BCLFlBQVksS0FBSyxXQUNqQixRQUFPLEtBQUssTUFDWixVQUFTLEtBQUssUUFDZCxtQkFBbUIsS0FBSyxrQkFDeEIsZUFBZSxLQUFLLGNBQ3BCLG9CQUFvQixLQUFLLGNBQ3pCLGVBQWUsc0JBQXNCLFNBQVMsS0FBSztBQUN2RCxNQUFJLFlBQVksY0FBYyxhQUFhO0FBQzNDLFNBQU9sTixXQUFTLElBQUksY0FBYztBQUFBLElBQ2hDO0FBQUEsSUFDQTtBQUFBLElBQ0EsV0FBVyxnQkFBZ0JBLFdBQVMsSUFBSSxXQUFXO0FBQUEsTUFDakQsZ0JBQWdCO0FBQUEsUUFDZCxTQUFTO0FBQUE7QUFBQSxNQUVYLGlCQUFpQkEsV0FBUyxJQUFJLFVBQVUsaUJBQWlCO0FBQUEsUUFDdkQsU0FBUyxtQkFBbUJBLFdBQVM7QUFBQSxVQUNuQyxTQUFTO0FBQUEsV0FDUCx5QkFBd0IsVUFBVSxvQkFBb0IsT0FBTyxTQUFTLHNCQUFzQixXQUFZLDBCQUF5QixVQUFVLG9CQUFvQixPQUFPLFNBQVMsdUJBQXVCO0FBQUE7QUFBQSxNQUU1TSxRQUFRO0FBQUEsUUFDTixTQUFTQSxXQUFTO0FBQUEsVUFDaEIsUUFBUTtBQUFBLFdBQ04scUJBQW9CLFVBQVUsV0FBVyxPQUFPLFNBQVMsa0JBQWtCO0FBQUE7QUFBQSxNQUVqRixPQUFPQSxXQUFTLElBQUksVUFBVSxPQUFPO0FBQUEsUUFDbkMsU0FBUyxDQUFDLENBQUM7QUFBQSxRQUNYLFNBQVNBLFdBQVMsSUFBSyxvQkFBbUIsVUFBVSxVQUFVLE9BQU8sU0FBUyxpQkFBaUIsU0FBUztBQUFBLFVBQ3RHLFNBQVM7QUFBQTtBQUFBO0FBQUEsTUFHYixNQUFNQSxXQUFTO0FBQUEsUUFDYixTQUFTLENBQUMsQ0FBQztBQUFBLFNBQ1YsVUFBVTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7QUN2RG1CLElBQUksSUFBRTFELDZCQUFpQixJQUFFOzBDQUF1QjtBQUFNLElBQUcsQUFBYSxPQUFPLFdBQXBCLGNBQTRCLE9BQU8sS0FBSTtBQUFDLE1BQUksSUFBRSxPQUFPO0FBQUksTUFBRSxFQUFFOzRDQUFrQyxFQUFFO0FBQUE7QUFBa0IsSUFBSSxJQUFFLEVBQUUsbURBQW1ELG1CQUFrQixJQUFFLE9BQU8sVUFBVSxnQkFBZSxJQUFFLEVBQUMsS0FBSSxNQUFHLEtBQUksTUFBRyxRQUFPLE1BQUcsVUFBUztBQUNyVyxXQUFXLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBSSxHQUFFLElBQUUsSUFBRyxJQUFFLE1BQUssS0FBRTtBQUFLLEVBQVMsTUFBVCxVQUFhLEtBQUUsS0FBRztBQUFHLEVBQVMsRUFBRSxRQUFYLFVBQWlCLEtBQUUsS0FBRyxFQUFFO0FBQUssRUFBUyxFQUFFLFFBQVgsVUFBaUIsTUFBRSxFQUFFO0FBQUssT0FBSSxLQUFLO0FBQUUsTUFBRSxLQUFLLEdBQUUsTUFBSSxDQUFDLEVBQUUsZUFBZSxNQUFLLEdBQUUsS0FBRyxFQUFFO0FBQUksTUFBRyxLQUFHLEVBQUU7QUFBYSxTQUFJLEtBQUssSUFBRSxFQUFFLGNBQWE7QUFBRSxNQUFTLEVBQUUsT0FBWCxVQUFnQixHQUFFLEtBQUcsRUFBRTtBQUFJLFNBQU0sRUFBQyxVQUFTLEdBQUUsTUFBSyxHQUFFLEtBQUksR0FBRSxLQUFJLElBQUUsT0FBTSxHQUFFLFFBQU8sRUFBRTtBQUFBO3FDQUFxQjtzQ0FBZTtBQ1A1UztBQUN6QzhRLHVCQUFpQjlRO0FBQUFBO0FDRlosTUFBTSxNQUFNK1E7QUFDWixNQUFNLE9BQU9DO0FBQ2IsTUFBTSxXQUFXQztBQ2N4QixJQUFJQyxVQUF1QkMsc0JBQU1DLFdBQVcsU0FBVUMsT0FBT0MsVUFBVTtNQUNqRWQsUUFBT2EsTUFBTWIsTUFDYkQsVUFBU2MsTUFBTWQsUUFDZmdCLFlBQVlGLE1BQU1FLFdBQ2xCQyx3QkFBd0JILE1BQU1JLGtCQUM5QkEsbUJBQW1CRCwwQkFBMEIsU0FBUyxJQUFJQSx1QkFDMURFLHNCQUFzQkwsTUFBTU0sY0FDNUJBLGVBQWVELHdCQUF3QixTQUFTLEtBQUtBLHFCQUNyREUsYUFBYVAsTUFBTVE7TUFFbkJDLGtCQUFrQkMsa0JBQ2xCQyxjQUFjRixnQkFBZ0IsSUFDOUJHLFlBQVlILGdCQUFnQjtNQUU1QkksbUJBQW1CSCxrQkFDbkJJLGVBQWVELGlCQUFpQixJQUNoQ0UsaUJBQWlCRixpQkFBaUI7TUFFbENHLFlBQVlDLGNBQWNMLFdBQVdYO01BQ3JDaUIsWUFBWUMsaUJBQWlCbkIsTUFBTWtCO01BQ25DRSxTQUFTRCxpQkFBaUJuQixNQUFNb0I7TUFFaENDLFlBQVlsUCxxQ0FBUyxDQUFDNk4sTUFBTXNCLE9BQzVCQyxTQUFTRixVQUFVLElBQ25CRyxZQUFZSCxVQUFVO01BRXRCSSxhQUFhQyxVQUFVTixRQUFRVCxhQUFhZ0IsNkJBQTZCO0FBQUEsSUFDM0V6QjtBQUFBQSxJQUNBMEIsY0FBYyxDQUFDLENBQUM1QixNQUFNc0I7QUFBQUEsSUFDdEJsQixrQkFBa0JBLG9CQUFvQjtBQUFBLElBQ3RDakIsTUFBTUE7QUFBQUEsSUFDTkQsUUFBUUE7QUFBQUEsSUFDUjRCO0FBQUFBLElBQ0FSO0FBQUFBLE9BRUV1QixTQUFTSixXQUFXSSxRQUNwQkMsYUFBYUwsV0FBV0ssWUFDeEJDLFVBQVNDLDhCQUE4QlAsWUFBWSxDQUFDLFVBQVU7TUFFOUR6QixNQUFNc0IsTUFBTTtRQUNWQztBQUFRQyxnQkFBVTtBQUFBLGFBQ2IsQ0FBQ3hCLE1BQU1RLGNBQWMsQ0FBQ2UsUUFBUTtBQUN2Q0MsY0FBVTtBQUFBO01BR1JTLGVBQWUseUJBQXdCO0FBQ3pDVCxjQUFVO1FBRU54QixNQUFNa0MsVUFBVTtBQUNsQmxDLFlBQU1rQyxTQUFTQyxNQUFNbkMsT0FBT29DO0FBQUFBO0FBQUFBO01BSzVCQyxlQUFlckMsTUFBTXNCLFFBQVFmLGNBQWMsQ0FBQ2dCO0FBQ2hEZSxlQUFhM0IsYUFBYVgsTUFBTXVDLFFBQVE7QUFBQSxJQUN0Q0MsVUFBVSxDQUFDeEMsTUFBTXlDLGFBQWF6QyxNQUFNMEM7QUFBQUEsSUFDcENDLGNBQWMzQyxNQUFNNEM7QUFBQUE7TUFHbEIsQ0FBQ1AsY0FBYztXQUVWO0FBQUE7TUFHTFEsUUFBUTdDLE1BQU04QyxTQUFTelEsV0FBUyxJQUFJMFAsU0FBUTtBQUFBLElBQzlDVCxNQUFNLENBQUMsQ0FBQ3RCLE1BQU1zQjtBQUFBQSxJQUNkdEIsT0FBTzNOLFdBQVMsSUFBSXlQLFdBQVdDLFFBQVE7QUFBQSxNQUNyQ2dCLE9BQU9sQixPQUFPRTtBQUFBQSxNQUNkaUIsS0FBS2hDO0FBQUFBO0FBQUFBLElBRVBpQyxZQUFZNVEsV0FBUyxJQUFJeVAsV0FBV3pDLE9BQU87QUFBQSxNQUN6QzBELE9BQU9sQixPQUFPeEM7QUFBQUEsTUFDZDJELEtBQUtqQztBQUFBQTtBQUFBQTtNQUlMUixZQUFZO1FBQ1YyQyxTQUFTbEQsTUFBTWtELFFBQ2ZDLFlBQVluRCxNQUFNbUQsV0FDbEJDLFVBQVVwRCxNQUFNb0QsU0FDaEJDLGFBQWFyRCxNQUFNcUQsWUFDbkJDLFlBQVl0RCxNQUFNc0Q7QUFDdEJUO1VBQ1E3QyxNQUFNc0I7QUFBQUEsY0FDSjtBQUFBOztnQkFHRVc7QUFBQUE7OztnQkFJVFk7QUFBQUE7QUFBQUE7U0FHRTNCLFlBQXlCcUMseUJBQVNDLGFBQWFYLE9BQU8zQixhQUFhO0FBQUE7QUFFNUVyQixRQUFRNEQsY0FBYztBQUN0QjVELFFBQVE2RCxZQUFZO0FBQUEsRUFJbEJwQyxNQUFNcUMsVUFBVUM7QUFBQUEsRUFHaEIxRCxXQUFXeUQsVUFBVUUsTUFBTS9FO0FBQUFBLEVBTTNCc0MsUUFBUXVDLFVBQVVHO0FBQUFBLEVBTWxCNUMsV0FBV3lDLFVBQVVHO0FBQUFBLEVBT3JCM0UsTUFBTXdFLFVBQVVDO0FBQUFBLEVBd0JoQmQsVUFBVWEsVUFBVUksS0FBS0M7QUFBQUEsRUFNekI1RCxrQkFBa0J1RCxVQUFVTTtBQUFBQSxFQUs1QjNELGNBQWNxRCxVQUFVTztBQUFBQSxFQUt4QnpCLFdBQVdrQixVQUFVQztBQUFBQSxFQUtyQmhCLGdCQUFnQmUsVUFBVUUsTUFBTSxDQUFDLFNBQVM7QUFBQSxFQUsxQ25CLG1CQUFtQmlCLFVBQVVDO0FBQUFBLEVBUzdCckIsUUFBUSxnQkFBZ0J2QyxPQUFPO2FBQ3BCbUUsT0FBTy9CLFVBQVVnQyxRQUFRQyxPQUFPLElBQUlDLE1BQU1ILE9BQU8sSUFBSUEsT0FBTyxJQUFJLElBQUlJLE9BQU8sR0FBR0EsT0FBT0osTUFBTUksUUFBUTtBQUMxR0YsV0FBS0UsT0FBTyxLQUFLbkMsVUFBVW1DO0FBQUFBO1FBR3pCdkUsTUFBTXlDLFdBQVc7VUFDZitCO2FBRUlBLG1CQUFrQmIsVUFBVUksTUFBTUMsV0FBVzdCLE1BQU1xQyxpQkFBaUIsQ0FBQ3hFLE9BQU95RSxPQUFPSjtBQUFBQTtXQUd0RlYsVUFBVUksS0FBSzVCLE1BQU13QixXQUFXLENBQUMzRCxPQUFPeUUsT0FBT0o7QUFBQUE7QUFBQUEsRUFReEQ3RCxZQUFZbUQsVUFBVWU7QUFBQUEsRUFLdEJ0QixTQUFTTyxVQUFVSTtBQUFBQSxFQUtuQlYsWUFBWU0sVUFBVUk7QUFBQUEsRUFLdEJULFdBQVdLLFVBQVVJO0FBQUFBLEVBS3JCYixRQUFRUyxVQUFVSTtBQUFBQSxFQUtsQlosV0FBV1EsVUFBVUk7QUFBQUEsRUFLckI3QixVQUFVeUIsVUFBVUk7QUFBQUE7QUNoUFAsZ0JBQWdCLE1BQU0sUUFBUTtBQUMzQyxNQUFJLE1BQU1ZLFNBQVU7QUFDcEIsU0FBTyxNQUFNLElBQUksY0FBYyxTQUFTLEtBQUssZUFBZXpGLFNBQU8sTUFBTTtBQUFBO0FDWDNFLElBQUksVUFBVSxTQUFTLFVBQVUsS0FBSyxLQUFLLFNBQVMsVUFBVSxNQUFNLEdBQUc7QUFReEQsYUFBYSxTQUFTLFVBQVU7QUFDN0MsU0FBTyxRQUFRLFFBQVEsaUJBQWlCO0FBQUE7QUNUMUMsSUFBSTtBQVFXLGlCQUFpQixNQUFNLFVBQVU7QUFDOUMsTUFBSSxDQUFDLGFBQWE7QUFDaEIsUUFBSSxPQUFPLFNBQVM7QUFDcEIsUUFBSSxjQUFjLEtBQUssV0FBVyxLQUFLLG1CQUFtQixLQUFLLHlCQUF5QixLQUFLLHNCQUFzQixLQUFLO0FBRXhILGtCQUFjLHNCQUFxQixJQUFHLEdBQUc7QUFDdkMsYUFBTyxZQUFZLEtBQUssSUFBRztBQUFBO0FBQUE7QUFJL0IsU0FBTyxZQUFZLE1BQU07QUFBQTtBQ1RaLGlCQUFpQixNQUFNLFVBQVUsUUFBUTtBQUN0RCxNQUFJLEtBQUssV0FBVyxDQUFDO0FBQVEsU0FBSyxRQUFRO0FBQzFDLE1BQUksV0FBVztBQUVmLEtBQUc7QUFDRCxRQUFJLFFBQVEsVUFBVTtBQUFXLGFBQU87QUFDeEMsZUFBVyxTQUFTO0FBQUEsV0FDYixZQUFZLGFBQWEsVUFBVSxTQUFTLGFBQWEsU0FBUztBQUUzRSxTQUFPO0FBQUE7Ozs7OztBQ1BULHlCQUF1QixPQUFPLFdBQVcsV0FBVyxXQUFXO0FBQzdELE1BQUksU0FBUyxNQUFNLFFBQ2YsUUFBUSxZQUFhLGFBQVksSUFBSTtBQUV6QyxTQUFRLFlBQVksVUFBVSxFQUFFLFFBQVEsUUFBUztBQUMvQyxRQUFJLFVBQVUsTUFBTSxRQUFRLE9BQU8sUUFBUTtBQUN6QyxhQUFPO0FBQUE7QUFBQTtBQUdYLFNBQU87QUFBQTtBQ2hCVCxJQUFJMUYseUJBQXVCLEdBQ3ZCQywyQkFBeUI7QUFZN0IsdUJBQXFCLFFBQVEsUUFBUSxXQUFXLFlBQVk7QUFDMUQsTUFBSSxRQUFRLFVBQVUsUUFDbEIsU0FBUyxPQUNULGVBQWUsQ0FBQztBQUVwQixNQUFJLFVBQVUsTUFBTTtBQUNsQixXQUFPLENBQUM7QUFBQTtBQUVWLFdBQVMsT0FBTztBQUNoQixTQUFPLFNBQVM7QUFDZCxRQUFJLE9BQU8sVUFBVTtBQUNyQixRQUFLLGdCQUFnQixLQUFLLEtBQ2xCLEtBQUssT0FBTyxPQUFPLEtBQUssTUFDeEIsQ0FBRSxNQUFLLE1BQU0sU0FDZjtBQUNKLGFBQU87QUFBQTtBQUFBO0FBR1gsU0FBTyxFQUFFLFFBQVEsUUFBUTtBQUN2QixXQUFPLFVBQVU7QUFDakIsUUFBSSxNQUFNLEtBQUssSUFDWCxXQUFXLE9BQU8sTUFDbEIsV0FBVyxLQUFLO0FBRXBCLFFBQUksZ0JBQWdCLEtBQUssSUFBSTtBQUMzQixVQUFJLGFBQWEsVUFBYSxDQUFFLFFBQU8sU0FBUztBQUM5QyxlQUFPO0FBQUE7QUFBQSxXQUVKO0FBQ0wsVUFBSSxRQUFRLElBQUlWO0FBQ2hCLFVBQUksWUFBWTtBQUNkLFlBQUksU0FBUyxXQUFXLFVBQVUsVUFBVSxLQUFLLFFBQVEsUUFBUTtBQUFBO0FBRW5FLFVBQUksQ0FBRSxZQUFXLFNBQ1RzRixjQUFZLFVBQVUsVUFBVTdFLHlCQUF1QkMsMEJBQXdCLFlBQVksU0FDM0YsU0FDRDtBQUNMLGVBQU87QUFBQTtBQUFBO0FBQUE7QUFJYixTQUFPO0FBQUE7QUNoRFQsOEJBQTRCLE9BQU87QUFDakMsU0FBTyxVQUFVLFNBQVMsQ0FBQ3pGLFdBQVM7QUFBQTtBQ0R0Qyx3QkFBc0IsUUFBUTtBQUM1QixNQUFJLFNBQVNxSixPQUFLLFNBQ2QsU0FBUyxPQUFPO0FBRXBCLFNBQU8sVUFBVTtBQUNmLFFBQUksTUFBTSxPQUFPLFNBQ2IsUUFBUSxPQUFPO0FBRW5CLFdBQU8sVUFBVSxDQUFDLEtBQUssT0FBT3VILHFCQUFtQjtBQUFBO0FBRW5ELFNBQU87QUFBQTtBQ1hULG1DQUFpQyxLQUFLLFVBQVU7QUFDOUMsU0FBTyxTQUFTLFFBQVE7QUFDdEIsUUFBSSxVQUFVLE1BQU07QUFDbEIsYUFBTztBQUFBO0FBRVQsV0FBTyxPQUFPLFNBQVMsWUFDcEIsY0FBYSxVQUFjLE9BQU8sT0FBTztBQUFBO0FBQUE7QUNKaEQsdUJBQXFCLFFBQVE7QUFDM0IsTUFBSSxZQUFZQyxlQUFhO0FBQzdCLE1BQUksVUFBVSxVQUFVLEtBQUssVUFBVSxHQUFHLElBQUk7QUFDNUMsV0FBT0MsMEJBQXdCLFVBQVUsR0FBRyxJQUFJLFVBQVUsR0FBRztBQUFBO0FBRS9ELFNBQU8sU0FBUyxRQUFRO0FBQ3RCLFdBQU8sV0FBVyxVQUFVQyxjQUFZLFFBQVEsUUFBUTtBQUFBO0FBQUE7QUNiNUQsSUFBSUMsaUJBQWUsb0RBQ2ZDLGtCQUFnQjtBQVVwQixpQkFBZSxPQUFPLFFBQVE7QUFDNUIsTUFBSXJLLFVBQVEsUUFBUTtBQUNsQixXQUFPO0FBQUE7QUFFVCxNQUFJLE9BQU8sT0FBTztBQUNsQixNQUFJLFFBQVEsWUFBWSxRQUFRLFlBQVksUUFBUSxhQUNoRCxTQUFTLFFBQVExRixXQUFTLFFBQVE7QUFDcEMsV0FBTztBQUFBO0FBRVQsU0FBTytQLGdCQUFjLEtBQUssVUFBVSxDQUFDRCxlQUFhLEtBQUssVUFDcEQsVUFBVSxRQUFRLFNBQVMsT0FBTztBQUFBO0FDdEJ2QyxJQUFJRSxvQkFBa0I7QUE4Q3RCLG1CQUFpQixNQUFNLFVBQVU7QUFDL0IsTUFBSSxPQUFPLFFBQVEsY0FBZSxZQUFZLFFBQVEsT0FBTyxZQUFZLFlBQWE7QUFDcEYsVUFBTSxJQUFJLFVBQVVBO0FBQUFBO0FBRXRCLE1BQUksV0FBVyxXQUFXO0FBQ3hCLFFBQUksT0FBTyxXQUNQLE1BQU0sV0FBVyxTQUFTLE1BQU0sTUFBTSxRQUFRLEtBQUssSUFDbkQsUUFBUSxTQUFTO0FBRXJCLFFBQUksTUFBTSxJQUFJLE1BQU07QUFDbEIsYUFBTyxNQUFNLElBQUk7QUFBQTtBQUVuQixRQUFJLFNBQVMsS0FBSyxNQUFNLE1BQU07QUFDOUIsYUFBUyxRQUFRLE1BQU0sSUFBSSxLQUFLLFdBQVc7QUFDM0MsV0FBTztBQUFBO0FBRVQsV0FBUyxRQUFRLElBQUtDLFdBQVEsU0FBUzNNO0FBQ3ZDLFNBQU87QUFBQTtBQUlUMk0sVUFBUSxRQUFRM007QUNuRWhCLElBQUk0TSxxQkFBbUI7QUFVdkIseUJBQXVCLE1BQU07QUFDM0IsTUFBSSxTQUFTRCxVQUFRLE1BQU0sU0FBUyxLQUFLO0FBQ3ZDLFFBQUksTUFBTSxTQUFTQyxvQkFBa0I7QUFDbkMsWUFBTTtBQUFBO0FBRVIsV0FBTztBQUFBO0FBR1QsTUFBSSxRQUFRLE9BQU87QUFDbkIsU0FBTztBQUFBO0FDbkJULElBQUlDLGVBQWE7QUFHakIsSUFBSUMsaUJBQWU7QUFTbkIsSUFBSUMsaUJBQWVDLGdCQUFjLFNBQVMsUUFBUTtBQUNoRCxNQUFJLFNBQVM7QUFDYixNQUFJLE9BQU8sV0FBVyxPQUFPLElBQVk7QUFDdkMsV0FBTyxLQUFLO0FBQUE7QUFFZCxTQUFPLFFBQVFILGNBQVksU0FBUyxPQUFPLFFBQVEsT0FBTyxXQUFXO0FBQ25FLFdBQU8sS0FBSyxRQUFRLFVBQVUsUUFBUUMsZ0JBQWMsUUFBUyxVQUFVO0FBQUE7QUFFekUsU0FBTztBQUFBO0FBR1QscUJBQWVDO0FDakJmLG9CQUFrQixPQUFPLFVBQVU7QUFDakMsTUFBSSxRQUFRLElBQ1IsU0FBUyxTQUFTLE9BQU8sSUFBSSxNQUFNLFFBQ25DLFNBQVMsTUFBTTtBQUVuQixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFdBQU8sU0FBUyxTQUFTLE1BQU0sUUFBUSxPQUFPO0FBQUE7QUFFaEQsU0FBTztBQUFBO0FDWFQsSUFBSW5RLGFBQVcsSUFBSTtBQUduQixJQUFJbUYsZ0JBQWNuSCxXQUFTQSxTQUFPLFlBQVksUUFDMUNxUyxtQkFBaUJsTCxnQkFBY0EsY0FBWSxXQUFXO0FBVTFELHdCQUFzQixPQUFPO0FBRTNCLE1BQUksT0FBTyxTQUFTLFVBQVU7QUFDNUIsV0FBTztBQUFBO0FBRVQsTUFBSUssVUFBUSxRQUFRO0FBRWxCLFdBQU84SyxXQUFTLE9BQU9DLGtCQUFnQjtBQUFBO0FBRXpDLE1BQUl6USxXQUFTLFFBQVE7QUFDbkIsV0FBT3VRLG1CQUFpQkEsaUJBQWUsS0FBSyxTQUFTO0FBQUE7QUFFdkQsTUFBSSxTQUFVLFFBQVE7QUFDdEIsU0FBUSxVQUFVLE9BQVEsSUFBSSxTQUFVLENBQUNyUSxhQUFZLE9BQU87QUFBQTtBQ1Y5RCxvQkFBa0IsT0FBTztBQUN2QixTQUFPLFNBQVMsT0FBTyxLQUFLdVEsZUFBYTtBQUFBO0FDWDNDLG9CQUFrQixPQUFPLFFBQVE7QUFDL0IsTUFBSS9LLFVBQVEsUUFBUTtBQUNsQixXQUFPO0FBQUE7QUFFVCxTQUFPZ0wsUUFBTSxPQUFPLFVBQVUsQ0FBQyxTQUFTTCxlQUFhTSxXQUFTO0FBQUE7QUNkaEUsSUFBSXpRLGFBQVcsSUFBSTtBQVNuQixpQkFBZSxPQUFPO0FBQ3BCLE1BQUksT0FBTyxTQUFTLFlBQVlGLFdBQVMsUUFBUTtBQUMvQyxXQUFPO0FBQUE7QUFFVCxNQUFJLFNBQVUsUUFBUTtBQUN0QixTQUFRLFVBQVUsT0FBUSxJQUFJLFNBQVUsQ0FBQ0UsYUFBWSxPQUFPO0FBQUE7QUNOOUQsbUJBQWlCLFFBQVEsTUFBTTtBQUM3QixTQUFPMFEsV0FBUyxNQUFNO0FBRXRCLE1BQUksUUFBUSxHQUNSLFNBQVMsS0FBSztBQUVsQixTQUFPLFVBQVUsUUFBUSxRQUFRLFFBQVE7QUFDdkMsYUFBUyxPQUFPQyxRQUFNLEtBQUs7QUFBQTtBQUU3QixTQUFRLFNBQVMsU0FBUyxTQUFVLFNBQVM7QUFBQTtBQ08vQyxlQUFhLFFBQVEsTUFBTSxjQUFjO0FBQ3ZDLE1BQUksU0FBUyxVQUFVLE9BQU8sU0FBWUMsVUFBUSxRQUFRO0FBQzFELFNBQU8sV0FBVyxTQUFZLGVBQWU7QUFBQTtBQ3JCL0MscUJBQW1CLFFBQVEsS0FBSztBQUM5QixTQUFPLFVBQVUsUUFBUSxPQUFPLE9BQU87QUFBQTtBQ096QyxtQkFBaUIsUUFBUSxNQUFNLFNBQVM7QUFDdEMsU0FBT0YsV0FBUyxNQUFNO0FBRXRCLE1BQUksUUFBUSxJQUNSLFNBQVMsS0FBSyxRQUNkLFNBQVM7QUFFYixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFFBQUksTUFBTUMsUUFBTSxLQUFLO0FBQ3JCLFFBQUksQ0FBRSxVQUFTLFVBQVUsUUFBUSxRQUFRLFFBQVEsT0FBTztBQUN0RDtBQUFBO0FBRUYsYUFBUyxPQUFPO0FBQUE7QUFFbEIsTUFBSSxVQUFVLEVBQUUsU0FBUyxRQUFRO0FBQy9CLFdBQU87QUFBQTtBQUVULFdBQVMsVUFBVSxPQUFPLElBQUksT0FBTztBQUNyQyxTQUFPLENBQUMsQ0FBQyxVQUFVNVIsV0FBUyxXQUFXSSxVQUFRLEtBQUssV0FDakRxRyxXQUFRLFdBQVdRLGNBQVk7QUFBQTtBQ05wQyxpQkFBZSxRQUFRLE1BQU07QUFDM0IsU0FBTyxVQUFVLFFBQVE2SyxVQUFRLFFBQVEsTUFBTUM7QUFBQUE7QUNyQmpELElBQUkxTSx5QkFBdUIsR0FDdkJDLDJCQUF5QjtBQVU3QiwrQkFBNkIsTUFBTSxVQUFVO0FBQzNDLE1BQUltTSxRQUFNLFNBQVNoQixxQkFBbUIsV0FBVztBQUMvQyxXQUFPRSwwQkFBd0JpQixRQUFNLE9BQU87QUFBQTtBQUU5QyxTQUFPLFNBQVMsUUFBUTtBQUN0QixRQUFJLFdBQVdJLE1BQUksUUFBUTtBQUMzQixXQUFRLGFBQWEsVUFBYSxhQUFhLFdBQzNDQyxRQUFNLFFBQVEsUUFDZC9ILGNBQVksVUFBVSxVQUFVN0UseUJBQXVCQztBQUFBQTtBQUFBQTtBQ1ovRCxvQkFBa0IsT0FBTztBQUN2QixTQUFPO0FBQUE7QUNWVCx3QkFBc0IsS0FBSztBQUN6QixTQUFPLFNBQVMsUUFBUTtBQUN0QixXQUFPLFVBQVUsT0FBTyxTQUFZLE9BQU87QUFBQTtBQUFBO0FDQS9DLDRCQUEwQixNQUFNO0FBQzlCLFNBQU8sU0FBUyxRQUFRO0FBQ3RCLFdBQU91TSxVQUFRLFFBQVE7QUFBQTtBQUFBO0FDZ0IzQixvQkFBa0IsTUFBTTtBQUN0QixTQUFPSixRQUFNLFFBQVFTLGVBQWFOLFFBQU0sU0FBU08sbUJBQWlCO0FBQUE7QUNmcEUsd0JBQXNCLE9BQU87QUFHM0IsTUFBSSxPQUFPLFNBQVMsWUFBWTtBQUM5QixXQUFPO0FBQUE7QUFFVCxNQUFJLFNBQVMsTUFBTTtBQUNqQixXQUFPQztBQUFBQTtBQUVULE1BQUksT0FBTyxTQUFTLFVBQVU7QUFDNUIsV0FBTzNMLFVBQVEsU0FDWDRMLHNCQUFvQixNQUFNLElBQUksTUFBTSxNQUNwQ0MsY0FBWTtBQUFBO0FBRWxCLFNBQU9DLFdBQVM7QUFBQTtBQ3RCbEIsSUFBSWpSLGNBQVksS0FBSztBQXFDckIscUJBQW1CLE9BQU8sV0FBVyxXQUFXO0FBQzlDLE1BQUksU0FBUyxTQUFTLE9BQU8sSUFBSSxNQUFNO0FBQ3ZDLE1BQUksQ0FBQyxRQUFRO0FBQ1gsV0FBTztBQUFBO0FBRVQsTUFBSSxRQUFRLGFBQWEsT0FBTyxJQUFJQyxZQUFVO0FBQzlDLE1BQUksUUFBUSxHQUFHO0FBQ2IsWUFBUUQsWUFBVSxTQUFTLE9BQU87QUFBQTtBQUVwQyxTQUFPa1IsZ0JBQWMsT0FBT0MsZUFBYSxZQUFlO0FBQUE7QUNsRDFELElBQUksYUFBYSxLQUFLLE1BQ2xCblIsY0FBWSxLQUFLO0FBYXJCLG1CQUFtQixRQUFPLE1BQUssTUFBTSxXQUFXO0FBQzlDLE1BQUksUUFBUSxJQUNSLFNBQVNBLFlBQVUsV0FBWSxRQUFNLFVBQVUsU0FBUSxLQUFLLElBQzVELFNBQVMsTUFBTTtBQUVuQixTQUFPLFVBQVU7QUFDZixXQUFPLFlBQVksU0FBUyxFQUFFLFNBQVM7QUFDdkMsY0FBUztBQUFBO0FBRVgsU0FBTztBQUFBO0FDYlQscUJBQXFCLFdBQVc7QUFDOUIsU0FBTyxTQUFTLFFBQU8sTUFBSyxNQUFNO0FBQ2hDLFFBQUksUUFBUSxPQUFPLFFBQVEsWUFBWSxlQUFlLFFBQU8sTUFBSyxPQUFPO0FBQ3ZFLGFBQU0sT0FBTztBQUFBO0FBR2YsYUFBUUYsV0FBUztBQUNqQixRQUFJLFNBQVEsUUFBVztBQUNyQixhQUFNO0FBQ04sZUFBUTtBQUFBLFdBQ0g7QUFDTCxhQUFNQSxXQUFTO0FBQUE7QUFFakIsV0FBTyxTQUFTLFNBQWEsU0FBUSxPQUFNLElBQUksS0FBTUEsV0FBUztBQUM5RCxXQUFPLFVBQVUsUUFBTyxNQUFLLE1BQU07QUFBQTtBQUFBO0FDa0J2QyxJQUFJc1IsVUFBUTtBQUVaLGdCQUFlQTtBQzdDZixJQUFJLFlBQVksT0FBTyxTQUNuQixrQkFBa0IsT0FBTztBQUNyQixTQUFPLE9BQU8sVUFBVSxZQUFZLFVBQVU7QUFBQTtBQUV0RCxtQkFBaUIsT0FBTyxRQUFRO0FBQzVCLE1BQUksVUFBVSxRQUFRO0FBQ2xCLFdBQU87QUFBQTtBQUVYLE1BQUksVUFBVSxVQUFVLFVBQVUsU0FBUztBQUN2QyxXQUFPO0FBQUE7QUFFWCxTQUFPO0FBQUE7QUFFWCx3QkFBd0IsV0FBVyxZQUFZO0FBQzNDLE1BQUksVUFBVSxXQUFXLFdBQVcsUUFBUTtBQUN4QyxXQUFPO0FBQUE7QUFFWCxXQUFTLElBQUksR0FBRyxJQUFJLFVBQVUsUUFBUSxLQUFLO0FBQ3ZDLFFBQUksQ0FBQ0MsVUFBUSxVQUFVLElBQUksV0FBVyxLQUFLO0FBQ3ZDLGFBQU87QUFBQTtBQUFBO0FBR2YsU0FBTztBQUFBO0FBR1gsb0JBQW9CLFVBQVUsVUFBUztBQUNuQyxNQUFJLGFBQVksUUFBUTtBQUFFLGVBQVU7QUFBQTtBQUNwQyxNQUFJO0FBQ0osTUFBSSxXQUFXO0FBQ2YsTUFBSTtBQUNKLE1BQUksYUFBYTtBQUNqQixzQkFBb0I7QUFDaEIsUUFBSSxVQUFVO0FBQ2QsYUFBUyxLQUFLLEdBQUcsS0FBSyxVQUFVLFFBQVEsTUFBTTtBQUMxQyxjQUFRLE1BQU0sVUFBVTtBQUFBO0FBRTVCLFFBQUksY0FBYyxhQUFhLFFBQVEsU0FBUSxTQUFTLFdBQVc7QUFDL0QsYUFBTztBQUFBO0FBRVgsaUJBQWEsU0FBUyxNQUFNLE1BQU07QUFDbEMsaUJBQWE7QUFDYixlQUFXO0FBQ1gsZUFBVztBQUNYLFdBQU87QUFBQTtBQUVYLFNBQU87QUFBQTtBQzdDWCwyQkFBMkIsUUFBUSxPQUFPO0FBQ3hDLFdBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEtBQUs7QUFDckMsUUFBSSxhQUFhLE1BQU07QUFDdkIsZUFBVyxhQUFhLFdBQVcsY0FBYztBQUNqRCxlQUFXLGVBQWU7QUFDMUIsUUFBSSxXQUFXO0FBQVksaUJBQVcsV0FBVztBQUNqRCxXQUFPLGVBQWUsUUFBUSxXQUFXLEtBQUs7QUFBQTtBQUFBO0FBSW5DLHNCQUFzQixhQUFhLFlBQVksYUFBYTtBQUN6RSxNQUFJO0FBQVksc0JBQWtCLFlBQVksV0FBVztBQUN6RCxNQUFJO0FBQWEsc0JBQWtCLGFBQWE7QUFDaEQsU0FBTyxlQUFlLGFBQWEsYUFBYTtBQUFBLElBQzlDLFVBQVU7QUFBQTtBQUVaLFNBQU87QUFBQTtBQ1hULElBQUksbUJBQW1CMVQsV0FBU0EsU0FBTyxxQkFBcUI7QUFTNUQsdUJBQXVCLE9BQU87QUFDNUIsU0FBT3dILFVBQVEsVUFBVVEsY0FBWSxVQUNuQyxDQUFDLENBQUUscUJBQW9CLFNBQVMsTUFBTTtBQUFBO0FDRjFDLHFCQUFxQixPQUFPLE9BQU8sV0FBVyxVQUFVLFFBQVE7QUFDOUQsTUFBSSxRQUFRLElBQ1IsU0FBUyxNQUFNO0FBRW5CLGVBQWMsYUFBWTtBQUMxQixZQUFXLFVBQVM7QUFFcEIsU0FBTyxFQUFFLFFBQVEsUUFBUTtBQUN2QixRQUFJLFFBQVEsTUFBTTtBQUNsQixRQUFJLFFBQVEsS0FBSyxVQUFVLFFBQVE7QUFDakMsVUFBSSxRQUFRLEdBQUc7QUFFYixvQkFBWSxPQUFPLFFBQVEsR0FBRyxXQUFXLFVBQVU7QUFBQSxhQUM5QztBQUNMUCxvQkFBVSxRQUFRO0FBQUE7QUFBQSxlQUVYLENBQUMsVUFBVTtBQUNwQixhQUFPLE9BQU8sVUFBVTtBQUFBO0FBQUE7QUFHNUIsU0FBTztBQUFBO0FDM0JULHVCQUF1QixXQUFXO0FBQ2hDLFNBQU8sU0FBUyxRQUFRLFVBQVUsVUFBVTtBQUMxQyxRQUFJLFFBQVEsSUFDUixXQUFXLE9BQU8sU0FDbEIsUUFBUSxTQUFTLFNBQ2pCLFNBQVMsTUFBTTtBQUVuQixXQUFPLFVBQVU7QUFDZixVQUFJLE1BQU0sTUFBTSxZQUFZLFNBQVMsRUFBRTtBQUN2QyxVQUFJLFNBQVMsU0FBUyxNQUFNLEtBQUssY0FBYyxPQUFPO0FBQ3BEO0FBQUE7QUFBQTtBQUdKLFdBQU87QUFBQTtBQUFBO0FDUFgsSUFBSSxVQUFVO0FBRWQsZ0JBQWU7QUNKZixvQkFBb0IsUUFBUSxVQUFVO0FBQ3BDLFNBQU8sVUFBVWtNLFVBQVEsUUFBUSxVQUFVMUo7QUFBQUE7QUNGN0Msd0JBQXdCLFVBQVUsV0FBVztBQUMzQyxTQUFPLFNBQVMsWUFBWSxVQUFVO0FBQ3BDLFFBQUksY0FBYyxNQUFNO0FBQ3RCLGFBQU87QUFBQTtBQUVULFFBQUksQ0FBQy9JLGNBQVksYUFBYTtBQUM1QixhQUFPLFNBQVMsWUFBWTtBQUFBO0FBRTlCLFFBQUksU0FBUyxXQUFXLFFBQ3BCLFFBQVEsWUFBWSxTQUFTLElBQzdCLFdBQVcsT0FBTztBQUV0QixXQUFRLFlBQVksVUFBVSxFQUFFLFFBQVEsUUFBUztBQUMvQyxVQUFJLFNBQVMsU0FBUyxRQUFRLE9BQU8sY0FBYyxPQUFPO0FBQ3hEO0FBQUE7QUFBQTtBQUdKLFdBQU87QUFBQTtBQUFBO0FDaEJYLElBQUksV0FBVyxlQUFlO0FBRTlCLGlCQUFlO0FDRmYsaUJBQWlCLFlBQVksVUFBVTtBQUNyQyxNQUFJLFFBQVEsSUFDUixTQUFTQSxjQUFZLGNBQWMsTUFBTSxXQUFXLFVBQVU7QUFFbEUwUyxhQUFTLFlBQVksU0FBUyxPQUFPLEtBQUssYUFBWTtBQUNwRCxXQUFPLEVBQUUsU0FBUyxTQUFTLE9BQU8sS0FBSztBQUFBO0FBRXpDLFNBQU87QUFBQTtBQ1JULG9CQUFvQixPQUFPLFVBQVU7QUFDbkMsTUFBSSxTQUFTLE1BQU07QUFFbkIsUUFBTSxLQUFLO0FBQ1gsU0FBTyxVQUFVO0FBQ2YsVUFBTSxVQUFVLE1BQU0sUUFBUTtBQUFBO0FBRWhDLFNBQU87QUFBQTtBQ1BULDBCQUEwQixPQUFPLE9BQU87QUFDdEMsTUFBSSxVQUFVLE9BQU87QUFDbkIsUUFBSSxlQUFlLFVBQVUsUUFDekIsWUFBWSxVQUFVLE1BQ3RCLGlCQUFpQixVQUFVLE9BQzNCLGNBQWM5UixXQUFTO0FBRTNCLFFBQUksZUFBZSxVQUFVLFFBQ3pCLFlBQVksVUFBVSxNQUN0QixpQkFBaUIsVUFBVSxPQUMzQixjQUFjQSxXQUFTO0FBRTNCLFFBQUssQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLGVBQWUsUUFBUSxTQUN0RCxlQUFlLGdCQUFnQixrQkFBa0IsQ0FBQyxhQUFhLENBQUMsZUFDaEUsYUFBYSxnQkFBZ0Isa0JBQzdCLENBQUMsZ0JBQWdCLGtCQUNsQixDQUFDLGdCQUFnQjtBQUNuQixhQUFPO0FBQUE7QUFFVCxRQUFLLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxlQUFlLFFBQVEsU0FDdEQsZUFBZSxnQkFBZ0Isa0JBQWtCLENBQUMsYUFBYSxDQUFDLGVBQ2hFLGFBQWEsZ0JBQWdCLGtCQUM3QixDQUFDLGdCQUFnQixrQkFDbEIsQ0FBQyxnQkFBZ0I7QUFDbkIsYUFBTztBQUFBO0FBQUE7QUFHWCxTQUFPO0FBQUE7QUNyQlQseUJBQXlCLFFBQVEsT0FBTyxRQUFRO0FBQzlDLE1BQUksUUFBUSxJQUNSLGNBQWMsT0FBTyxVQUNyQixjQUFjLE1BQU0sVUFDcEIsU0FBUyxZQUFZLFFBQ3JCLGVBQWUsT0FBTztBQUUxQixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFFBQUksU0FBUyxpQkFBaUIsWUFBWSxRQUFRLFlBQVk7QUFDOUQsUUFBSSxRQUFRO0FBQ1YsVUFBSSxTQUFTLGNBQWM7QUFDekIsZUFBTztBQUFBO0FBRVQsVUFBSSxTQUFRLE9BQU87QUFDbkIsYUFBTyxTQUFVLFdBQVMsU0FBUyxLQUFLO0FBQUE7QUFBQTtBQVU1QyxTQUFPLE9BQU8sUUFBUSxNQUFNO0FBQUE7QUNyQjlCLHFCQUFxQixZQUFZLFdBQVcsUUFBUTtBQUNsRCxNQUFJLFVBQVUsUUFBUTtBQUNwQixnQkFBWXdRLFdBQVMsV0FBVyxTQUFTLFVBQVU7QUFDakQsVUFBSTlLLFVBQVEsV0FBVztBQUNyQixlQUFPLFNBQVMsT0FBTztBQUNyQixpQkFBT29MLFVBQVEsT0FBTyxTQUFTLFdBQVcsSUFBSSxTQUFTLEtBQUs7QUFBQTtBQUFBO0FBR2hFLGFBQU87QUFBQTtBQUFBLFNBRUo7QUFDTCxnQkFBWSxDQUFDTztBQUFBQTtBQUdmLE1BQUksUUFBUTtBQUNaLGNBQVliLFdBQVMsV0FBVzlJLFlBQVVnSztBQUUxQyxNQUFJLFNBQVMsUUFBUSxZQUFZLFNBQVMsT0FBTyxLQUFLLGFBQVk7QUFDaEUsUUFBSSxXQUFXbEIsV0FBUyxXQUFXLFNBQVMsVUFBVTtBQUNwRCxhQUFPLFNBQVM7QUFBQTtBQUVsQixXQUFPLEVBQUUsWUFBWSxVQUFVLFNBQVMsRUFBRSxPQUFPLFNBQVM7QUFBQTtBQUc1RCxTQUFPLFdBQVcsUUFBUSxTQUFTLFFBQVEsT0FBTztBQUNoRCxXQUFPLGdCQUFnQixRQUFRLE9BQU87QUFBQTtBQUFBO0FDbEMxQyxlQUFlLE1BQU0sU0FBUyxNQUFNO0FBQ2xDLFVBQVEsS0FBSztBQUFBLFNBQ047QUFBRyxhQUFPLEtBQUssS0FBSztBQUFBLFNBQ3BCO0FBQUcsYUFBTyxLQUFLLEtBQUssU0FBUyxLQUFLO0FBQUEsU0FDbEM7QUFBRyxhQUFPLEtBQUssS0FBSyxTQUFTLEtBQUssSUFBSSxLQUFLO0FBQUEsU0FDM0M7QUFBRyxhQUFPLEtBQUssS0FBSyxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSztBQUFBO0FBRTNELFNBQU8sS0FBSyxNQUFNLFNBQVM7QUFBQTtBQ2Q3QixJQUFJalEsY0FBWSxLQUFLO0FBV3JCLGtCQUFrQixNQUFNLFFBQU8sWUFBVztBQUN4QyxXQUFRQSxZQUFVLFdBQVUsU0FBYSxLQUFLLFNBQVMsSUFBSyxRQUFPO0FBQ25FLFNBQU8sV0FBVztBQUNoQixRQUFJLE9BQU8sV0FDUCxRQUFRLElBQ1IsU0FBU0EsWUFBVSxLQUFLLFNBQVMsUUFBTyxJQUN4QyxRQUFRLE1BQU07QUFFbEIsV0FBTyxFQUFFLFFBQVEsUUFBUTtBQUN2QixZQUFNLFNBQVMsS0FBSyxTQUFRO0FBQUE7QUFFOUIsWUFBUTtBQUNSLFFBQUksWUFBWSxNQUFNLFNBQVE7QUFDOUIsV0FBTyxFQUFFLFFBQVEsUUFBTztBQUN0QixnQkFBVSxTQUFTLEtBQUs7QUFBQTtBQUUxQixjQUFVLFVBQVMsV0FBVTtBQUM3QixXQUFPLE1BQU0sTUFBTSxNQUFNO0FBQUE7QUFBQTtBQ1o3QixrQkFBa0IsT0FBTztBQUN2QixTQUFPLFdBQVc7QUFDaEIsV0FBTztBQUFBO0FBQUE7QUNuQlgsSUFBSSxpQkFBa0IsV0FBVztBQUMvQixNQUFJO0FBQ0YsUUFBSSxPQUFPb0MsWUFBVSxRQUFRO0FBQzdCLFNBQUssSUFBSSxJQUFJO0FBQ2IsV0FBTztBQUFBLFdBQ0EsR0FBUDtBQUFBO0FBQUE7QUFHSix1QkFBZTtBQ0VmLElBQUksa0JBQWtCLENBQUNvUCxtQkFBaUJWLGFBQVcsU0FBUyxNQUFNLFFBQVE7QUFDeEUsU0FBT1UsaUJBQWUsTUFBTSxZQUFZO0FBQUEsSUFDdEMsZ0JBQWdCO0FBQUEsSUFDaEIsY0FBYztBQUFBLElBQ2QsU0FBUyxTQUFTO0FBQUEsSUFDbEIsWUFBWTtBQUFBO0FBQUE7QUFJaEIsd0JBQWU7QUNwQmYsSUFBSSxZQUFZLEtBQ1osV0FBVztBQUdmLElBQUksWUFBWSxLQUFLO0FBV3JCLGtCQUFrQixNQUFNO0FBQ3RCLE1BQUksUUFBUSxHQUNSLGFBQWE7QUFFakIsU0FBTyxXQUFXO0FBQ2hCLFFBQUksUUFBUSxhQUNSLFlBQVksV0FBWSxTQUFRO0FBRXBDLGlCQUFhO0FBQ2IsUUFBSSxZQUFZLEdBQUc7QUFDakIsVUFBSSxFQUFFLFNBQVMsV0FBVztBQUN4QixlQUFPLFVBQVU7QUFBQTtBQUFBLFdBRWQ7QUFDTCxjQUFRO0FBQUE7QUFFVixXQUFPLEtBQUssTUFBTSxRQUFXO0FBQUE7QUFBQTtBQ3JCakMsSUFBSSxjQUFjLFNBQVNDO0FBRTNCLG9CQUFlO0FDRGYsa0JBQWtCLE1BQU0sUUFBTztBQUM3QixTQUFPQyxjQUFZLFNBQVMsTUFBTSxRQUFPWixhQUFXLE9BQU87QUFBQTtBQ3FCN0QsSUFBSSxTQUFTLFNBQVMsU0FBUyxZQUFZLFdBQVc7QUFDcEQsTUFBSSxjQUFjLE1BQU07QUFDdEIsV0FBTztBQUFBO0FBRVQsTUFBSSxTQUFTLFVBQVU7QUFDdkIsTUFBSSxTQUFTLEtBQUssZUFBZSxZQUFZLFVBQVUsSUFBSSxVQUFVLEtBQUs7QUFDeEUsZ0JBQVk7QUFBQSxhQUNILFNBQVMsS0FBSyxlQUFlLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLO0FBQ2pGLGdCQUFZLENBQUMsVUFBVTtBQUFBO0FBRXpCLFNBQU8sWUFBWSxZQUFZLFlBQVksV0FBVyxJQUFJO0FBQUE7QUFHNUQsZUFBZTtBQ3RDQSxrQkFBa0IsTUFBTSxRQUFRO0FBQzdDLE1BQUksTUFBTTVCLFNBQVU7QUFDcEIsU0FBTyxNQUFNLElBQUksYUFBYSxTQUFTLEtBQUssY0FBY3pGLFNBQU8sTUFBTTtBQUFBO0FDVnpFLElBQUk7QUFDVyx1QkFBdUIsUUFBUTtBQUM1QyxNQUFJLENBQUMsUUFBUSxTQUFTLEtBQUssUUFBUTtBQUNqQyxRQUFJLFdBQVc7QUFDYixVQUFJLFlBQVksU0FBUyxjQUFjO0FBQ3ZDLGdCQUFVLE1BQU0sV0FBVztBQUMzQixnQkFBVSxNQUFNLE1BQU07QUFDdEIsZ0JBQVUsTUFBTSxRQUFRO0FBQ3hCLGdCQUFVLE1BQU0sU0FBUztBQUN6QixnQkFBVSxNQUFNLFdBQVc7QUFDM0IsZUFBUyxLQUFLLFlBQVk7QUFDMUIsYUFBTyxVQUFVLGNBQWMsVUFBVTtBQUN6QyxlQUFTLEtBQUssWUFBWTtBQUFBO0FBQUE7QUFJOUIsU0FBTztBQUFBO0FDWE0sa0JBQWtCLFNBQVMsV0FBVztBQUNuRCxNQUFJLFFBQVE7QUFBVyxXQUFPLENBQUMsQ0FBQyxhQUFhLFFBQVEsVUFBVSxTQUFTO0FBQ3hFLFNBQVEsT0FBTyxTQUFRLFVBQVUsV0FBVyxRQUFRLGFBQWEsS0FBSyxRQUFRLE1BQU0sWUFBWSxTQUFTO0FBQUE7QUNBNUYsa0JBQWtCLFNBQVMsV0FBVztBQUNuRCxNQUFJLFFBQVE7QUFBVyxZQUFRLFVBQVUsSUFBSTtBQUFBLFdBQW9CLENBQUMsU0FBUyxTQUFTO0FBQVksUUFBSSxPQUFPLFFBQVEsY0FBYztBQUFVLGNBQVEsWUFBWSxRQUFRLFlBQVksTUFBTTtBQUFBO0FBQWUsY0FBUSxhQUFhLFNBQVUsU0FBUSxhQUFhLFFBQVEsVUFBVSxXQUFXLE1BQU0sTUFBTTtBQUFBO0FDVHZTLDBCQUEwQixXQUFXLGVBQWU7QUFDbEQsU0FBTyxVQUFVLFFBQVEsSUFBSSxPQUFPLFlBQVksZ0JBQWdCLGFBQWEsTUFBTSxNQUFNLFFBQVEsUUFBUSxLQUFLLFFBQVEsY0FBYztBQUFBO0FBVXZILHFCQUFxQixTQUFTLFdBQVc7QUFDdEQsTUFBSSxRQUFRLFdBQVc7QUFDckIsWUFBUSxVQUFVLE9BQU87QUFBQSxhQUNoQixPQUFPLFFBQVEsY0FBYyxVQUFVO0FBQ2hELFlBQVEsWUFBWSxpQkFBaUIsUUFBUSxXQUFXO0FBQUEsU0FDbkQ7QUFDTCxZQUFRLGFBQWEsU0FBUyxpQkFBaUIsUUFBUSxhQUFhLFFBQVEsVUFBVSxXQUFXLElBQUk7QUFBQTtBQUFBO0FDUnpHLG1CQUFtQixPQUFPLFVBQVU7QUFDbEMsTUFBSSxRQUFRLElBQ1IsU0FBUyxTQUFTLE9BQU8sSUFBSSxNQUFNO0FBRXZDLFNBQU8sRUFBRSxRQUFRLFFBQVE7QUFDdkIsUUFBSSxTQUFTLE1BQU0sUUFBUSxPQUFPLFdBQVcsT0FBTztBQUNsRDtBQUFBO0FBQUE7QUFHSixTQUFPO0FBQUE7QUNQVCx5QkFBeUIsUUFBUSxLQUFLLE9BQU87QUFDM0MsTUFBSSxPQUFPLGVBQWUrSCxrQkFBZ0I7QUFDeENBLHFCQUFlLFFBQVEsS0FBSztBQUFBLE1BQzFCLGdCQUFnQjtBQUFBLE1BQ2hCLGNBQWM7QUFBQSxNQUNkLFNBQVM7QUFBQSxNQUNULFlBQVk7QUFBQTtBQUFBLFNBRVQ7QUFDTCxXQUFPLE9BQU87QUFBQTtBQUFBO0FDaEJsQixJQUFJNVQsZ0JBQWMsT0FBTztBQUd6QixJQUFJM0UsbUJBQWlCMkUsY0FBWTtBQVlqQyxxQkFBcUIsUUFBUSxLQUFLLE9BQU87QUFDdkMsTUFBSSxXQUFXLE9BQU87QUFDdEIsTUFBSSxDQUFFM0Usa0JBQWUsS0FBSyxRQUFRLFFBQVFzRSxLQUFHLFVBQVUsV0FDbEQsVUFBVSxVQUFhLENBQUUsUUFBTyxTQUFVO0FBQzdDLG9CQUFnQixRQUFRLEtBQUs7QUFBQTtBQUFBO0FDVmpDLG9CQUFvQixRQUFRLE9BQU8sUUFBUSxZQUFZO0FBQ3JELE1BQUksUUFBUSxDQUFDO0FBQ2IsWUFBVyxVQUFTO0FBRXBCLE1BQUksUUFBUSxJQUNSLFNBQVMsTUFBTTtBQUVuQixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFFBQUksTUFBTSxNQUFNO0FBRWhCLFFBQUksV0FBVyxhQUNYLFdBQVcsT0FBTyxNQUFNLE9BQU8sTUFBTSxLQUFLLFFBQVEsVUFDbEQ7QUFFSixRQUFJLGFBQWEsUUFBVztBQUMxQixpQkFBVyxPQUFPO0FBQUE7QUFFcEIsUUFBSSxPQUFPO0FBQ1Qsc0JBQWdCLFFBQVEsS0FBSztBQUFBLFdBQ3hCO0FBQ0wsa0JBQVksUUFBUSxLQUFLO0FBQUE7QUFBQTtBQUc3QixTQUFPO0FBQUE7QUN4QlQsb0JBQW9CLFFBQVEsUUFBUTtBQUNsQyxTQUFPLFVBQVUsV0FBVyxRQUFRcUssT0FBSyxTQUFTO0FBQUE7QUNKcEQsc0JBQXNCLFFBQVE7QUFDNUIsTUFBSSxTQUFTO0FBQ2IsTUFBSSxVQUFVLE1BQU07QUFDbEIsYUFBUyxPQUFPLE9BQU8sU0FBUztBQUM5QixhQUFPLEtBQUs7QUFBQTtBQUFBO0FBR2hCLFNBQU87QUFBQTtBQ1hULElBQUloSyxnQkFBYyxPQUFPO0FBR3pCLElBQUkzRSxtQkFBaUIyRSxjQUFZO0FBU2pDLG9CQUFvQixRQUFRO0FBQzFCLE1BQUksQ0FBQ1csV0FBUyxTQUFTO0FBQ3JCLFdBQU8sYUFBYTtBQUFBO0FBRXRCLE1BQUksVUFBVWlKLGNBQVksU0FDdEIsU0FBUztBQUViLFdBQVMsT0FBTyxRQUFRO0FBQ3RCLFFBQUksQ0FBRSxRQUFPLGlCQUFrQixZQUFXLENBQUN2TyxpQkFBZSxLQUFLLFFBQVEsUUFBUTtBQUM3RSxhQUFPLEtBQUs7QUFBQTtBQUFBO0FBR2hCLFNBQU87QUFBQTtBQ0ZULGdCQUFnQixRQUFRO0FBQ3RCLFNBQU80RixjQUFZLFVBQVU0SSxnQkFBYyxRQUFRLFFBQVEsV0FBVztBQUFBO0FDaEJ4RSxzQkFBc0IsUUFBUSxRQUFRO0FBQ3BDLFNBQU8sVUFBVSxXQUFXLFFBQVEsT0FBTyxTQUFTO0FBQUE7QUNWdEQsSUFBSSxjQUFjLE9BQU8sV0FBVyxZQUFZLFdBQVcsQ0FBQyxRQUFRLFlBQVk7QUFHaEYsSUFBSSxhQUFhLGVBQWUsT0FBTyxVQUFVLFlBQVksVUFBVSxDQUFDLE9BQU8sWUFBWTtBQUczRixJQUFJLGdCQUFnQixjQUFjLFdBQVcsWUFBWTtBQUd6RCxJQUFJLFNBQVMsZ0JBQWdCL0osT0FBSyxTQUFTLFFBQ3ZDLGNBQWMsU0FBUyxPQUFPLGNBQWM7QUFVaEQscUJBQXFCLFFBQVEsUUFBUTtBQUNuQyxNQUFJLFFBQVE7QUFDVixXQUFPLE9BQU87QUFBQTtBQUVoQixNQUFJLFNBQVMsT0FBTyxRQUNoQixTQUFTLGNBQWMsWUFBWSxVQUFVLElBQUksT0FBTyxZQUFZO0FBRXhFLFNBQU8sS0FBSztBQUNaLFNBQU87QUFBQTtBQ3ZCVCxtQkFBbUIsUUFBUSxPQUFPO0FBQ2hDLE1BQUksUUFBUSxJQUNSLFNBQVMsT0FBTztBQUVwQixXQUFVLFNBQVEsTUFBTTtBQUN4QixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFVBQU0sU0FBUyxPQUFPO0FBQUE7QUFFeEIsU0FBTztBQUFBO0FDTFQscUJBQXFCLFFBQVEsUUFBUTtBQUNuQyxTQUFPLFdBQVcsUUFBUTZILGFBQVcsU0FBUztBQUFBO0FDVGhELElBQUksZUFBZWdDLFVBQVEsT0FBTyxnQkFBZ0I7QUFFbEQscUJBQWU7QUNDZixJQUFJakMscUJBQW1CLE9BQU87QUFTOUIsSUFBSSxlQUFlLENBQUNBLHFCQUFtQkUsY0FBWSxTQUFTLFFBQVE7QUFDbEUsTUFBSSxTQUFTO0FBQ2IsU0FBTyxRQUFRO0FBQ2JKLGdCQUFVLFFBQVFHLGFBQVc7QUFDN0IsYUFBU29NLGVBQWE7QUFBQTtBQUV4QixTQUFPO0FBQUE7QUFHVCxxQkFBZTtBQ2JmLHVCQUF1QixRQUFRLFFBQVE7QUFDckMsU0FBTyxXQUFXLFFBQVFDLGVBQWEsU0FBUztBQUFBO0FDQWxELHNCQUFzQixRQUFRO0FBQzVCLFNBQU9qSyxpQkFBZSxRQUFRLFFBQVFpSztBQUFBQTtBQ1p4QyxJQUFJaFUsZ0JBQWMsT0FBTztBQUd6QixJQUFJM0UsbUJBQWlCMkUsY0FBWTtBQVNqQyx3QkFBd0IsT0FBTztBQUM3QixNQUFJLFNBQVMsTUFBTSxRQUNmLFNBQVMsSUFBSSxNQUFNLFlBQVk7QUFHbkMsTUFBSSxVQUFVLE9BQU8sTUFBTSxNQUFNLFlBQVkzRSxpQkFBZSxLQUFLLE9BQU8sVUFBVTtBQUNoRixXQUFPLFFBQVEsTUFBTTtBQUNyQixXQUFPLFFBQVEsTUFBTTtBQUFBO0FBRXZCLFNBQU87QUFBQTtBQ2JULDBCQUEwQixhQUFhO0FBQ3JDLE1BQUksU0FBUyxJQUFJLFlBQVksWUFBWSxZQUFZO0FBQ3JELE1BQUlrTCxhQUFXLFFBQVEsSUFBSSxJQUFJQSxhQUFXO0FBQzFDLFNBQU87QUFBQTtBQ0ZULHVCQUF1QixVQUFVLFFBQVE7QUFDdkMsTUFBSSxTQUFTLFNBQVMsaUJBQWlCLFNBQVMsVUFBVSxTQUFTO0FBQ25FLFNBQU8sSUFBSSxTQUFTLFlBQVksUUFBUSxTQUFTLFlBQVksU0FBUztBQUFBO0FDWHhFLElBQUksVUFBVTtBQVNkLHFCQUFxQixRQUFRO0FBQzNCLE1BQUksU0FBUyxJQUFJLE9BQU8sWUFBWSxPQUFPLFFBQVEsUUFBUSxLQUFLO0FBQ2hFLFNBQU8sWUFBWSxPQUFPO0FBQzFCLFNBQU87QUFBQTtBQ1ZULElBQUlXLGdCQUFjbkgsV0FBU0EsU0FBTyxZQUFZLFFBQzFDb0gsa0JBQWdCRCxnQkFBY0EsY0FBWSxVQUFVO0FBU3hELHFCQUFxQixRQUFRO0FBQzNCLFNBQU9DLGtCQUFnQixPQUFPQSxnQkFBYyxLQUFLLFdBQVc7QUFBQTtBQ0o5RCx5QkFBeUIsWUFBWSxRQUFRO0FBQzNDLE1BQUksU0FBUyxTQUFTLGlCQUFpQixXQUFXLFVBQVUsV0FBVztBQUN2RSxTQUFPLElBQUksV0FBVyxZQUFZLFFBQVEsV0FBVyxZQUFZLFdBQVc7QUFBQTtBQ0w5RSxJQUFJWCxZQUFVLG9CQUNWQyxZQUFVLGlCQUNWRSxXQUFTLGdCQUNUQyxjQUFZLG1CQUNaQyxjQUFZLG1CQUNaQyxXQUFTLGdCQUNUQyxjQUFZLG1CQUNaekYsY0FBWTtBQUVoQixJQUFJMEYsbUJBQWlCLHdCQUNqQkMsZ0JBQWMscUJBQ2R5QixlQUFhLHlCQUNiQyxlQUFhLHlCQUNiQyxZQUFVLHNCQUNWQyxhQUFXLHVCQUNYQyxhQUFXLHVCQUNYQyxhQUFXLHVCQUNYQyxvQkFBa0IsOEJBQ2xCQyxjQUFZLHdCQUNaQyxjQUFZO0FBY2hCLHdCQUF3QixRQUFRLEtBQUssUUFBUTtBQUMzQyxNQUFJLE9BQU8sT0FBTztBQUNsQixVQUFRO0FBQUEsU0FDRGxDO0FBQ0gsYUFBTyxpQkFBaUI7QUFBQSxTQUVyQlI7QUFBQUEsU0FDQUM7QUFDSCxhQUFPLElBQUksS0FBSyxDQUFDO0FBQUEsU0FFZFE7QUFDSCxhQUFPLGNBQWMsUUFBUTtBQUFBLFNBRTFCeUI7QUFBQUEsU0FBaUJDO0FBQUFBLFNBQ2pCQztBQUFBQSxTQUFjQztBQUFBQSxTQUFlQztBQUFBQSxTQUM3QkM7QUFBQUEsU0FBZUM7QUFBQUEsU0FBc0JDO0FBQUFBLFNBQWdCQztBQUN4RCxhQUFPLGdCQUFnQixRQUFRO0FBQUEsU0FFNUJ2QztBQUNILGFBQU8sSUFBSTtBQUFBLFNBRVJDO0FBQUFBLFNBQ0FHO0FBQ0gsYUFBTyxJQUFJLEtBQUs7QUFBQSxTQUViRjtBQUNILGFBQU8sWUFBWTtBQUFBLFNBRWhCQztBQUNILGFBQU8sSUFBSTtBQUFBLFNBRVJ4RjtBQUNILGFBQU8sWUFBWTtBQUFBO0FBQUE7QUNyRXpCLElBQUksZUFBZSxPQUFPO0FBVTFCLElBQUksYUFBYyxXQUFXO0FBQzNCLG9CQUFrQjtBQUFBO0FBQ2xCLFNBQU8sU0FBUyxPQUFPO0FBQ3JCLFFBQUksQ0FBQ1gsV0FBUyxRQUFRO0FBQ3BCLGFBQU87QUFBQTtBQUVULFFBQUksY0FBYztBQUNoQixhQUFPLGFBQWE7QUFBQTtBQUV0QixXQUFPLFlBQVk7QUFDbkIsUUFBSSxTQUFTLElBQUk7QUFDakIsV0FBTyxZQUFZO0FBQ25CLFdBQU87QUFBQTtBQUFBO0FBSVgsbUJBQWU7QUNsQmYseUJBQXlCLFFBQVE7QUFDL0IsU0FBUSxPQUFPLE9BQU8sZUFBZSxjQUFjLENBQUNpSixjQUFZLFVBQzVEcUssYUFBV0YsZUFBYSxXQUN4QjtBQUFBO0FDVk4sSUFBSXBOLFdBQVM7QUFTYixtQkFBbUIsT0FBTztBQUN4QixTQUFPcEYsZUFBYSxVQUFVcUosU0FBTyxVQUFVakU7QUFBQUE7QUNUakQsSUFBSSxZQUFZeUMsY0FBWUEsV0FBUztBQW1CckMsSUFBSSxRQUFRLFlBQVlHLFlBQVUsYUFBYTtBQUUvQyxjQUFlO0FDdEJmLElBQUl6QyxXQUFTO0FBU2IsbUJBQW1CLE9BQU87QUFDeEIsU0FBT3ZGLGVBQWEsVUFBVXFKLFNBQU8sVUFBVTlEO0FBQUFBO0FDVGpELElBQUksWUFBWXNDLGNBQVlBLFdBQVM7QUFtQnJDLElBQUksUUFBUSxZQUFZRyxZQUFVLGFBQWE7QUFFL0MsY0FBZTtBQ0ZmLElBQUkySyxvQkFBa0IsR0FDbEJDLG9CQUFrQixHQUNsQkMsdUJBQXFCO0FBR3pCLElBQUl0TSxZQUFVLHNCQUNWUyxhQUFXLGtCQUNYL0IsWUFBVSxvQkFDVkMsWUFBVSxpQkFDVkMsYUFBVyxrQkFDWGxHLFlBQVUscUJBQ1ZDLFdBQVMsOEJBQ1RrRyxXQUFTLGdCQUNUQyxjQUFZLG1CQUNaNEIsY0FBWSxtQkFDWjNCLGNBQVksbUJBQ1pDLFdBQVMsZ0JBQ1RDLGNBQVksbUJBQ1p6RixjQUFZLG1CQUNabUgsZUFBYTtBQUVqQixJQUFJekIsbUJBQWlCLHdCQUNqQkMsZ0JBQWMscUJBQ2R5QixlQUFhLHlCQUNiQyxlQUFhLHlCQUNiQyxZQUFVLHNCQUNWQyxhQUFXLHVCQUNYQyxhQUFXLHVCQUNYQyxhQUFXLHVCQUNYQyxvQkFBa0IsOEJBQ2xCQyxjQUFZLHdCQUNaQyxjQUFZO0FBR2hCLElBQUksZ0JBQWdCO0FBQ3BCLGNBQWNwQixhQUFXLGNBQWNTLGNBQ3ZDLGNBQWN2QixvQkFBa0IsY0FBY0MsaUJBQzlDLGNBQWNULGFBQVcsY0FBY0MsYUFDdkMsY0FBY2lDLGdCQUFjLGNBQWNDLGdCQUMxQyxjQUFjQyxhQUFXLGNBQWNDLGNBQ3ZDLGNBQWNDLGNBQVksY0FBY25DLFlBQ3hDLGNBQWNDLGVBQWEsY0FBYzRCLGVBQ3pDLGNBQWMzQixlQUFhLGNBQWNDLFlBQ3pDLGNBQWNDLGVBQWEsY0FBY3pGLGVBQ3pDLGNBQWN5SCxjQUFZLGNBQWNDLHFCQUN4QyxjQUFjQyxlQUFhLGNBQWNDLGVBQWE7QUFDdEQsY0FBY3hDLGNBQVksY0FBY2xHLGFBQ3hDLGNBQWNpSSxnQkFBYztBQWtCNUIsbUJBQW1CLE9BQU8sU0FBUyxZQUFZLEtBQUssUUFBUSxPQUFPO0FBQ2pFLE1BQUksUUFDQSxTQUFTLFVBQVV5TCxtQkFDbkIsU0FBUyxVQUFVQyxtQkFDbkIsU0FBUyxVQUFVQztBQUV2QixNQUFJLFlBQVk7QUFDZCxhQUFTLFNBQVMsV0FBVyxPQUFPLEtBQUssUUFBUSxTQUFTLFdBQVc7QUFBQTtBQUV2RSxNQUFJLFdBQVcsUUFBVztBQUN4QixXQUFPO0FBQUE7QUFFVCxNQUFJLENBQUN6VCxXQUFTLFFBQVE7QUFDcEIsV0FBTztBQUFBO0FBRVQsTUFBSSxRQUFRNEcsVUFBUTtBQUNwQixNQUFJLE9BQU87QUFDVCxhQUFTLGVBQWU7QUFDeEIsUUFBSSxDQUFDLFFBQVE7QUFDWCxhQUFPLFVBQVUsT0FBTztBQUFBO0FBQUEsU0FFckI7QUFDTCxRQUFJLE1BQU1xRCxTQUFPLFFBQ2IsU0FBUyxPQUFPcEssYUFBVyxPQUFPQztBQUV0QyxRQUFJNEgsV0FBUyxRQUFRO0FBQ25CLGFBQU8sWUFBWSxPQUFPO0FBQUE7QUFFNUIsUUFBSSxPQUFPRyxlQUFhLE9BQU9WLGFBQVksVUFBVSxDQUFDLFFBQVM7QUFDN0QsZUFBVSxVQUFVLFNBQVUsS0FBSyxnQkFBZ0I7QUFDbkQsVUFBSSxDQUFDLFFBQVE7QUFDWCxlQUFPLFNBQ0gsY0FBYyxPQUFPLGFBQWEsUUFBUSxVQUMxQyxZQUFZLE9BQU8sV0FBVyxRQUFRO0FBQUE7QUFBQSxXQUV2QztBQUNMLFVBQUksQ0FBQyxjQUFjLE1BQU07QUFDdkIsZUFBTyxTQUFTLFFBQVE7QUFBQTtBQUUxQixlQUFTLGVBQWUsT0FBTyxLQUFLO0FBQUE7QUFBQTtBQUl4QyxXQUFVLFNBQVEsSUFBSXBDO0FBQ3RCLE1BQUksVUFBVSxNQUFNLElBQUk7QUFDeEIsTUFBSSxTQUFTO0FBQ1gsV0FBTztBQUFBO0FBRVQsUUFBTSxJQUFJLE9BQU87QUFFakIsTUFBSTJPLFFBQU0sUUFBUTtBQUNoQixVQUFNLFFBQVEsU0FBUyxVQUFVO0FBQy9CLGFBQU8sSUFBSSxVQUFVLFVBQVUsU0FBUyxZQUFZLFVBQVUsT0FBTztBQUFBO0FBQUEsYUFFOURDLFFBQU0sUUFBUTtBQUN2QixVQUFNLFFBQVEsU0FBUyxVQUFVLE1BQUs7QUFDcEMsYUFBTyxJQUFJLE1BQUssVUFBVSxVQUFVLFNBQVMsWUFBWSxNQUFLLE9BQU87QUFBQTtBQUFBO0FBSXpFLE1BQUksV0FBVyxTQUNWLFNBQVMsZUFBZXJLLGVBQ3hCLFNBQVMsU0FBU0Q7QUFFdkIsTUFBSSxRQUFRLFFBQVEsU0FBWSxTQUFTO0FBQ3pDLFlBQVUsU0FBUyxPQUFPLFNBQVMsVUFBVSxNQUFLO0FBQ2hELFFBQUksT0FBTztBQUNULGFBQU07QUFDTixpQkFBVyxNQUFNO0FBQUE7QUFHbkIsZ0JBQVksUUFBUSxNQUFLLFVBQVUsVUFBVSxTQUFTLFlBQVksTUFBSyxPQUFPO0FBQUE7QUFFaEYsU0FBTztBQUFBO0FDcEpULGNBQWMsT0FBTztBQUNuQixNQUFJLFNBQVMsU0FBUyxPQUFPLElBQUksTUFBTTtBQUN2QyxTQUFPLFNBQVMsTUFBTSxTQUFTLEtBQUs7QUFBQTtBQ0x0QyxnQkFBZ0IsUUFBUSxNQUFNO0FBQzVCLFNBQU8sS0FBSyxTQUFTLElBQUksU0FBUzJJLFVBQVEsUUFBUSxVQUFVLE1BQU0sR0FBRztBQUFBO0FDQ3ZFLG1CQUFtQixRQUFRLE1BQU07QUFDL0IsU0FBT0YsV0FBUyxNQUFNO0FBQ3RCLFdBQVMsT0FBTyxRQUFRO0FBQ3hCLFNBQU8sVUFBVSxRQUFRLE9BQU8sT0FBT0MsUUFBTSxLQUFLO0FBQUE7QUNYcEQsSUFBSWxLLGNBQVk7QUFHaEIsSUFBSTFFLGNBQVksU0FBUyxXQUNyQjlELGdCQUFjLE9BQU87QUFHekIsSUFBSStELGlCQUFlRCxZQUFVO0FBRzdCLElBQUl6SSxtQkFBaUIyRSxjQUFZO0FBR2pDLElBQUksbUJBQW1CK0QsZUFBYSxLQUFLO0FBOEJ6Qyx1QkFBdUIsT0FBTztBQUM1QixNQUFJLENBQUN4QyxlQUFhLFVBQVVYLGFBQVcsVUFBVTRILGFBQVc7QUFDMUQsV0FBTztBQUFBO0FBRVQsTUFBSSxRQUFRdUwsZUFBYTtBQUN6QixNQUFJLFVBQVUsTUFBTTtBQUNsQixXQUFPO0FBQUE7QUFFVCxNQUFJLE9BQU8xWSxpQkFBZSxLQUFLLE9BQU8sa0JBQWtCLE1BQU07QUFDOUQsU0FBTyxPQUFPLFFBQVEsY0FBYyxnQkFBZ0IsUUFDbEQwSSxlQUFhLEtBQUssU0FBUztBQUFBO0FDL0MvQix5QkFBeUIsT0FBTztBQUM5QixTQUFPLGNBQWMsU0FBUyxTQUFZO0FBQUE7QUNJNUMsaUJBQWlCLE9BQU87QUFDdEIsTUFBSSxTQUFTLFNBQVMsT0FBTyxJQUFJLE1BQU07QUFDdkMsU0FBTyxTQUFTLFlBQVksT0FBTyxLQUFLO0FBQUE7QUNQMUMsa0JBQWtCLE1BQU07QUFDdEIsU0FBTytQLGNBQVksU0FBUyxNQUFNLFFBQVcsVUFBVSxPQUFPO0FBQUE7QUNGaEUsSUFBSSxrQkFBa0IsR0FDbEIsa0JBQWtCLEdBQ2xCLHFCQUFxQjtBQXNCekIsSUFBSSxPQUFPLFNBQVMsU0FBUyxRQUFRLE9BQU87QUFDMUMsTUFBSSxTQUFTO0FBQ2IsTUFBSSxVQUFVLE1BQU07QUFDbEIsV0FBTztBQUFBO0FBRVQsTUFBSSxTQUFTO0FBQ2IsVUFBUXpCLFdBQVMsT0FBTyxTQUFTLE1BQU07QUFDckMsV0FBT0ksV0FBUyxNQUFNO0FBQ3RCLGNBQVcsVUFBUyxLQUFLLFNBQVM7QUFDbEMsV0FBTztBQUFBO0FBRVQsYUFBVyxRQUFRLGFBQWEsU0FBUztBQUN6QyxNQUFJLFFBQVE7QUFDVixhQUFTLFVBQVUsUUFBUSxrQkFBa0Isa0JBQWtCLG9CQUFvQjtBQUFBO0FBRXJGLE1BQUksU0FBUyxNQUFNO0FBQ25CLFNBQU8sVUFBVTtBQUNmLGNBQVUsUUFBUSxNQUFNO0FBQUE7QUFFMUIsU0FBTztBQUFBO0FBR1QsYUFBZTtBQ2xEZixJQUFJelMsZ0JBQWMsT0FBTztBQUd6QixJQUFJM0UsbUJBQWlCMkUsY0FBWTtBQXVCakMsSUFBSSxXQUFXLFNBQVMsU0FBUyxRQUFRLFNBQVM7QUFDaEQsV0FBUyxPQUFPO0FBRWhCLE1BQUksUUFBUTtBQUNaLE1BQUksU0FBUyxRQUFRO0FBQ3JCLE1BQUksUUFBUSxTQUFTLElBQUksUUFBUSxLQUFLO0FBRXRDLE1BQUksU0FBUyxlQUFlLFFBQVEsSUFBSSxRQUFRLElBQUksUUFBUTtBQUMxRCxhQUFTO0FBQUE7QUFHWCxTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFFBQUksU0FBUyxRQUFRO0FBQ3JCLFFBQUksUUFBUSxPQUFPO0FBQ25CLFFBQUksYUFBYTtBQUNqQixRQUFJLGNBQWMsTUFBTTtBQUV4QixXQUFPLEVBQUUsYUFBYSxhQUFhO0FBQ2pDLFVBQUksTUFBTSxNQUFNO0FBQ2hCLFVBQUksUUFBUSxPQUFPO0FBRW5CLFVBQUksVUFBVSxVQUNUTCxLQUFHLE9BQU9LLGNBQVksU0FBUyxDQUFDM0UsaUJBQWUsS0FBSyxRQUFRLE1BQU87QUFDdEUsZUFBTyxPQUFPLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFLM0IsU0FBTztBQUFBO0FBR1QsaUJBQWU7QUN0QmYsbUJBQW1CLFFBQVEsVUFBVSxhQUFhO0FBQ2hELE1BQUksUUFBUWtNLFVBQVEsU0FDaEIsWUFBWSxTQUFTYyxXQUFTLFdBQVdpQixlQUFhO0FBRTFELGFBQVdpSyxlQUFhO0FBQ3hCLE1BQUksZUFBZSxNQUFNO0FBQ3ZCLFFBQUksT0FBTyxVQUFVLE9BQU87QUFDNUIsUUFBSSxXQUFXO0FBQ2Isb0JBQWMsUUFBUSxJQUFJLFNBQU87QUFBQSxlQUUxQjVTLFdBQVMsU0FBUztBQUN6QixvQkFBY0ksYUFBVyxRQUFRa1QsYUFBV0YsZUFBYSxXQUFXO0FBQUEsV0FFakU7QUFDSCxvQkFBYztBQUFBO0FBQUE7QUFHbEIsRUFBQyxhQUFZLFlBQVksWUFBWSxRQUFRLFNBQVMsT0FBTyxPQUFPLFNBQVE7QUFDMUUsV0FBTyxTQUFTLGFBQWEsT0FBTyxPQUFPO0FBQUE7QUFFN0MsU0FBTztBQUFBO0FDN0JULG1CQUFtQixRQUFRLFVBQVU7QUFDbkMsTUFBSSxTQUFTO0FBQ2IsYUFBV1IsZUFBYTtBQUV4QixhQUFXLFFBQVEsU0FBUyxPQUFPLEtBQUssU0FBUTtBQUM5QyxvQkFBZ0IsUUFBUSxLQUFLLFNBQVMsT0FBTyxLQUFLO0FBQUE7QUFFcEQsU0FBTztBQUFBO0FDRFQsdUJBQXFCNUcsT0FBTztTQUNuQkEsTUFBTThDO0FBQUFBO0FBR2YsSUFBSThFLGFBQVc7QUFBQSxFQUNiQyxVQUFVO0FBQUEsRUFDVkMsTUFBTTtBQUFBLEVBQ05DLE9BQU87QUFBQSxFQUNQQyxNQUFNO0FBQUE7QUFFUixJQUFJQyxVQUFRO0FBQUEsRUFDVkMsT0FBTztBQUFBLEVBQ1BDLE1BQU07QUFBQSxFQUNOQyxXQUFXO0FBQUEsRUFDWEMsS0FBSztBQUFBLEVBQ0xDLFFBQVE7QUFBQTtBQUdWLElBQUlDLGNBQVlDLE9BQU9uTCxLQUFLNEssU0FBT1EsSUFBSSxTQUFVQyxHQUFHO1NBQzNDVCxRQUFNUztBQUFBQTtBQUVBL0UsVUFBVWdGLFVBQVUsQ0FBQ2hGLFVBQVVpRixRQUFRakYsVUFBVUk7QUFDL0NKLFVBQVVHO0FBQ0xILFVBQVVJO0FBbUJsQkosVUFBVWdGLFVBQVUsQ0FBQ2hGLFVBQVVrRixRQUFRbEYsVUFBVUUsTUFBTTBFLGVBQWE1RSxVQUFVbUYsU0FBUyxTQUFVQyxNQUFNQyxLQUFLO01BQ3BIQyxnQkFBZ0JWLFlBQVVXLFFBQVFGLFNBQVMsTUFBTSxPQUFPRCxLQUFLQyxTQUFTO01BRXRFQyxlQUFlO1dBQ1Y7QUFBQSxTQUNGO2FBQ0k5RSxPQUFPL0IsVUFBVWdDLFFBQVFDLE9BQU8sSUFBSUMsTUFBTUgsT0FBTyxJQUFJQSxPQUFPLElBQUksSUFBSUksT0FBTyxHQUFHQSxPQUFPSixNQUFNSSxRQUFRO0FBQzFHRixXQUFLRSxPQUFPLEtBQUtuQyxVQUFVbUM7QUFBQUE7V0FHdEJaLFVBQVVlLFlBQVl2QyxNQUFNd0IsV0FBVyxDQUFDb0YsTUFBTUMsS0FBS3ZFLE9BQU9KO0FBQUFBO0FBQUFBO0FBR3BDVixVQUFVZ0YsVUFBVSxDQUFDaEYsVUFBVUUsTUFBTSxDQUFDLFdBQVcsZ0JBQWdCRixVQUFVSTtBQUU1RyxnQkFBZ0JvRixTQUFTOUUsTUFBTTtBQUM3QjhFLGFBQVdBLFFBQVFoSCxNQUFNLE1BQU0sR0FBR3NDLE9BQU9KO0FBQUFBO0FBSTNDLElBQUkrRSxRQUFRO0FBQUEsRUFDVkMsU0FBUztBQUFBLEVBQ1RDLFNBQVMsTUFBTztBQUFBLEVBQ2hCQyxPQUFPLE1BQU8sS0FBSztBQUFBLEVBQ25CQyxLQUFLLE1BQU8sS0FBSyxLQUFLO0FBQUE7QUFFeEIseUJBQXlCQyxPQUFNQyxXQUFXO01BQ3BDQyxlQUFlQyxRQUFRSCxPQUFNO1NBQzFCRyxRQUFRRCxjQUFjLFFBQVFELFVBQVVHO0FBQUFBO0FBRWpELHdCQUF3QkosT0FBTUMsV0FBVztNQUNuQ0ksYUFBYUMsTUFBTU4sT0FBTTtTQUN0Qk0sTUFBTUQsWUFBWSxRQUFRSixVQUFVRztBQUFBQTtBQUU3QyxxQkFBcUJKLE9BQU1DLFdBQVc7TUFDaENNLFVBQVVDLGdCQUFnQlIsT0FBTUMsWUFDaENRLFFBQU9DLGVBQWVWLE9BQU1DLFlBQzVCVSxPQUFPO1NBRUpDLElBQUlMLFNBQVNFLE9BQU0sUUFBUTtBQUNoQ0UsU0FBS0UsS0FBS047QUFDVkEsY0FBVU8sSUFBSVAsU0FBUyxHQUFHO0FBQUE7U0FHckJJO0FBQUFBO0FBRVQsY0FBY1gsT0FBTWUsTUFBTTtNQUNwQkMsUUFBUWIsUUFBUUgsT0FBTWU7U0FDbkJ4WCxLQUFHeVgsT0FBT2hCLFNBQVFnQixRQUFRRixJQUFJRSxPQUFPLEdBQUdEO0FBQUFBO0FBRWpELGVBQWVFLFFBQU9DLE1BQUtILE1BQU07TUFDM0JBLFNBQVMsUUFBUTtBQUNuQkEsV0FBTztBQUFBO01BR0xSLFVBQVVVLFFBQ1ZOLE9BQU87U0FFSkMsSUFBSUwsU0FBU1csTUFBS0gsT0FBTztBQUM5QkosU0FBS0UsS0FBS047QUFDVkEsY0FBVU8sSUFBSVAsU0FBUyxHQUFHUTtBQUFBQTtTQUdyQko7QUFBQUE7QUFFVCxlQUFlWCxPQUFNbUIsTUFBTTtNQUNyQkEsUUFBUSxRQUFRbkIsU0FBUTtBQUFNLFdBQU87TUFDckNtQixRQUFRO0FBQU1BLFdBQU8sSUFBSUM7TUFDekJwQixTQUFRO0FBQU1BLFlBQU8sSUFBSW9CO0FBQzdCcEIsVUFBT0csUUFBUUgsT0FBTTtBQUNyQkEsVUFBT0YsTUFBTUUsT0FBTUYsTUFBTXFCO0FBQ3pCbkIsVUFBT0gsUUFBUUcsT0FBTUgsUUFBUXNCO0FBQzdCbkIsVUFBT0osUUFBUUksT0FBTUosUUFBUXVCO1NBQ3RCRSxhQUFhckIsT0FBTXFCLGFBQWFGO0FBQUFBO0FBRXpDLG9CQUFvQm5CLE9BQU07U0FDakJGLE1BQU1FLFdBQVUsS0FBS0gsUUFBUUcsV0FBVSxLQUFLSixRQUFRSSxXQUFVLEtBQUtxQixhQUFhckIsV0FBVTtBQUFBO0FBRW5HLGNBQWNzQixPQUFPQyxPQUFPUixNQUFNO01BQzVCLENBQUNBLFFBQVFBLFNBQVM7QUFBZ0IsV0FBT1MsS0FBS0MsSUFBSSxDQUFDSCxRQUFRLENBQUNDO1NBSXpEQyxLQUFLRSxNQUFNRixLQUFLQyxJQUFJLENBQUN0QixRQUFRbUIsT0FBT1AsUUFBUXBCLE1BQU1vQixRQUFRLENBQUNaLFFBQVFvQixPQUFPUixRQUFRcEIsTUFBTW9CO0FBQUFBO0FBR2pHLElBQUlZLGlCQUFpQnpILFVBQVVnRixVQUFVLENBQUNoRixVQUFVaUYsUUFBUWpGLFVBQVVJO0FBRXRFLGlCQUFpQjJGLFdBQVcyQixXQUFXQyxPQUFPQyxRQUFRQyxTQUFTO01BQ3pEQyxTQUFTLE9BQU9GLFdBQVcsYUFBYUEsT0FBT0QsT0FBT0UsU0FBUzlCLGFBQWEyQixVQUFVSyxLQUFLaEMsV0FBVzRCLE9BQU9DLFFBQVFDO0dBQ3ZIQyxXQUFVLFFBQVEsT0FBT0EsV0FBVyxZQUEwSTVZLFFBQVUsU0FBUztTQUM1TDRZO0FBQUFBO0FBWVQscUJBQXFCRSxJQUFJQyxxQkFBcUIxTSxTQUFRO1NBQzdDLElBQUkyTCxLQUFLYyxHQUFHRSxlQUFlRixHQUFHRyxZQUFZSCxHQUFHSSxXQUFXLEdBQUdILHNCQUFzQjFNLFNBQVEsR0FBRztBQUFBO0FBR3JHLHNCQUFzQndMLFFBQU9DLE1BQUs7U0FDekJELE9BQU1zQixzQkFBc0JyQixLQUFJcUI7QUFBQUE7QUFLekMscUJBQXFCdEIsUUFBT0MsTUFBSztTQUN4QnNCLEtBQUt2QixRQUFPQyxNQUFLLGFBQWF1QixhQUFheEIsUUFBT0M7QUFBQUE7QUFHM0QsZ0NBQWdDRCxRQUFPO01BQ2pDeUIsV0FBV3ZDLFFBQVFjLFFBQU87U0FDdkJ1QixLQUFLRSxVQUFVekIsUUFBTyxhQUFhd0IsYUFBYUMsVUFBVXpCO0FBQUFBO0FBSW5FLHdCQUF3QkEsUUFBTzBCLE9BQU87U0FDN0JDLEdBQUczQixRQUFPMEIsT0FBTztBQUFBO0FBRzFCLHdCQUF3QjFCLFFBQU9DLE1BQUtULE9BQU07TUFDcENvQyxvQkFBb0J0WixLQUFHMFgsUUFBT0MsTUFBSztTQUNoQzJCLG9CQUFvQkMsSUFBSTVCLE1BQUtULE9BQU0sYUFBYXNDLEdBQUc3QixNQUFLVCxPQUFNO0FBQUE7QUFJdkUsc0JBQW9CdUMsTUFBTTtNQUNwQkMsWUFBWUQsS0FBS0UsTUFDakJDLFNBQVNGLFVBQVVoQyxPQUNuQm1DLE9BQU9ILFVBQVUvQixLQUNqQm1DLFVBQVVKLFVBQVVLLFFBQ3BCQyxZQUFZUCxLQUFLUSxNQUNqQkMsU0FBU0YsVUFBVXRDLE9BQ25CeUMsT0FBT0gsVUFBVXJDLEtBQ2pCeUMsVUFBVUosVUFBVUQ7TUFDcEJNLFlBQVksQ0FBQ3pELFFBQVFnRCxRQUFRLFNBQVMsQ0FBQ2hELFFBQVFzRCxRQUFRO01BQ3ZESSxPQUFPckIsS0FBS1csUUFBUVcsS0FBS1YsTUFBTSxRQUFRO01BQ3ZDVyxPQUFPdkIsS0FBS2lCLFFBQVFLLEtBQUtKLE1BQU0sUUFBUTtTQUNwQ0UsYUFDUHBDLEtBQUt6TSxJQUFJZ1AsTUFBTSxLQUFLdkMsS0FBS3pNLElBQUk4TyxNQUFNLE9BQ2xDLENBQUNGLFVBQVUsQ0FBQyxDQUFDTixZQUNiRixTQUFTLENBQUNNLFdBQ1ZMLE9BQU8sQ0FBQ007QUFBQUE7QUFJWCxzQkFBc0JNLE9BQU87TUFDdkJDLGNBQWNELE1BQU1FLE9BQ3BCakQsU0FBUWdELFlBQVloRCxPQUNwQkMsT0FBTStDLFlBQVkvQyxLQUNsQmlELGNBQWNILE1BQU01RyxPQUNwQmdILGFBQWFELFlBQVlsRCxPQUN6Qm9ELFdBQVdGLFlBQVlqRDtNQUN2Qm9ELFNBQVNuRSxRQUFRYyxRQUFPO01BQ3hCc0Qsa0JBQWtCM0QsSUFBSTBELFFBQVFELFVBQVU7TUFFeENHLFVBQVVDLElBQUlILFFBQVFwRCxNQUFLO01BQzNCd0QsaUJBQWlCRixVQUFVekIsR0FBRzdCLE1BQUtrRCxZQUFZLGFBQWF0QixJQUFJNUIsTUFBS2tELFlBQVk7U0FDOUVHLG1CQUFtQkc7QUFBQUE7QUFNNUIsb0JBQW9CQyxPQUFPQyxPQUFPO1NBQ3pCcmIsS0FBR29iLE9BQU9DLE9BQU87QUFBQTtBQUcxQixnQ0FBZ0MzRCxRQUFPQyxNQUFLO1NBQ25DMkQsV0FBVzVELFdBQVU0RCxXQUFXM0Q7QUFBQUE7QUFHekMsSUFBSTRELGdCQUFnQix3QkFBdUJDLE1BQU07TUFDM0NDLFFBQVE7R0FFVixRQUFPRCxLQUFLakQsV0FBVyxjQUEySDFZLFFBQVUsU0FBUztHQUNySyxRQUFPMmIsS0FBS0UsZ0JBQWdCLGNBQWdJN2IsUUFBVSxTQUFTO09BQzVLOGIsV0FBV0gsS0FBS0csWUFBWXZEO09BQzVCd0QsVUFBVUosS0FBS0k7T0FFZnJELFNBQVMsV0FBWTthQUNmcEgsT0FBTy9CLFVBQVVnQyxRQUFRQyxPQUFPLElBQUlDLE1BQU1ILE9BQU9JLE9BQU8sR0FBR0EsT0FBT0osTUFBTUksUUFBUTtBQUN2RkYsV0FBS0UsUUFBUW5DLFVBQVVtQztBQUFBQTtXQUdsQnNLLFFBQVExTSxNQUFNLFFBQVEsQ0FBQ3NNLE9BQU9ELEtBQUtqRCxRQUFROUcsT0FBT0o7QUFBQUE7T0FJdER3RixjQUFjMkUsS0FBS0U7T0FDbkJJLFFBQVFOLEtBQUtNLFNBQVNBO09BQ3RCQyxVQUFVUCxLQUFLTyxXQUFXQztPQUMxQjNDLEtBQUttQyxLQUFLbkMsTUFBTUE7T0FDaEJoQyxNQUFNbUUsS0FBS25FLE9BQU9BO09BQ2xCbUMsS0FBS2dDLEtBQUtoQyxNQUFNQTtPQUNoQkQsTUFBTWlDLEtBQUtqQyxPQUFPQTtPQUNsQnZaLEtBQUt3YixLQUFLeGIsTUFBTUE7T0FDaEJrYixNQUFNTSxLQUFLTixPQUFPQTtPQUNsQnRFLFVBQVU0RSxLQUFLNUUsV0FBV0E7T0FDMUJHLFFBQVF5RSxLQUFLekUsU0FBU0E7T0FDdEJRLE1BQU1pRSxLQUFLakUsT0FBT0E7T0FDbEIxRCxRQUFRMkgsS0FBSzNILFNBQVNBO09BQ3RCb0YsT0FBT3VDLEtBQUt2QyxRQUFRQTtPQUNwQnNCLE9BQU9pQixLQUFLakIsUUFBUUE7T0FDcEJoUCxNQUFNaVEsS0FBS2pRLE9BQU9BO09BQ2xCQyxNQUFNZ1EsS0FBS2hRLE9BQU9BO09BQ2xCOEssVUFBVWtGLEtBQUtsRixXQUFXQTtPQUMxQlcsa0JBQWtCdUUsS0FBS3ZFLG1CQUFtQkE7T0FDMUNFLGlCQUFpQnFFLEtBQUtyRSxrQkFBa0JBO09BQ3hDOEUsY0FBY1QsS0FBS1MsZUFBZUE7T0FDbENDLGNBQWNWLEtBQUtVLGVBQWVBO09BQ2xDQyxjQUFjWCxLQUFLVyxlQUFlQTtPQUNsQ0MseUJBQXlCWixLQUFLWSwwQkFBMEJBO09BQ3hEQyxpQkFBaUJiLEtBQUthLGtCQUFrQkE7T0FDeENDLGlCQUFpQmQsS0FBS2Msa0JBQWtCQTtPQUN4Q0MsYUFBYWYsS0FBS2UsY0FBY0E7T0FDaENDLGVBQWVoQixLQUFLZ0IsZ0JBQWdCQTtPQUNwQ0MsYUFBYWpCLEtBQUtpQixjQUFjQTtPQUNoQ0MseUJBQXlCbEIsS0FBS2tCLDBCQUEwQkE7T0FDeERDLGdCQUFnQm5CLEtBQUtvQixrQkFBa0JwQixLQUFLb0Isb0JBQW9CO0FBQUE7QUFFdkUsMkJBQTJCbEcsV0FBVzhCLFNBQVNxRSxpQkFBaUJDLFdBQVU7TUFDcEVsQixXQUFVdmMsV0FBUyxJQUFJcVgsVUFBVWtGLFNBQVNpQjtTQUV2Q3hkLFdBQVMsSUFBSXFYLFdBQVc7QUFBQSxJQUM3Qm9HLFVBQVVBO0FBQUFBLElBQ1ZqRyxhQUFhLHVCQUF1QjthQUMzQkgsVUFBVUcsWUFBWTJCO0FBQUFBO0FBQUFBLElBRS9CRCxRQUFRLGdCQUFnQkQsT0FBT3lFLFVBQVU7YUFDaENyRyxVQUFVNkIsT0FBT0QsT0FBT3NELFNBQVFtQixhQUFhQSxVQUFVdkU7QUFBQUE7QUFBQUE7QUFBQUE7QUFLcEUsSUFBSXdFLGtCQUFrQjtBQUFBLEVBQ3BCdkcsTUFBTTtBQUFBLEVBQ05tQixNQUFNO0FBQUEsRUFDTitDLE9BQU87QUFBQSxFQUNQWixRQUFRO0FBQUEsRUFDUmtELE1BQU07QUFBQSxFQUNOQyxXQUFXO0FBQUEsRUFDWDFHLEtBQUs7QUFBQSxFQUNMMkcsT0FBTztBQUFBLEVBQ1BDLFVBQVU7QUFBQSxFQUNWQyxNQUFNO0FBQUEsRUFDTkMsV0FBVztBQUFBLEVBQ1hDLFVBQVU7QUFBQSxFQUNWQyxPQUFPO0FBQUEsRUFDUEMsUUFBUTtBQUFBLEVBQ1JDLGlCQUFpQjtBQUFBLEVBQ2pCQyxVQUFVLGtCQUFrQkMsT0FBTztXQUMxQixNQUFNQSxRQUFRO0FBQUE7QUFBQTtBQUd6QixrQkFBa0JDLE1BQU07U0FDZnhlLFdBQVMsSUFBSTJkLGlCQUFpQmE7QUFBQUE7QUFHdkMsSUFBSUMsY0FBWSxDQUFDLFNBQVMsYUFBYSxTQUFTLFlBQVksWUFBWSxZQUFZLGlCQUFpQixjQUFjLGFBQWEsa0JBQWtCLGtCQUFrQixhQUFhLFdBQVcsWUFBWSxjQUFjLGFBQWE7QUFFbk8sSUFBSUMsY0FBeUIseUJBQVVDLGtCQUFrQjtBQUN2REMsaUJBQWVGLFlBQVdDO3dCQUVMO1dBQ1pBLGlCQUFpQjdPLE1BQU0sTUFBTUMsY0FBYztBQUFBO01BR2hEOE8sU0FBU0gsV0FBVUk7QUFFdkJELFNBQU9FLFNBQVMsa0JBQWtCO1FBQzVCQyxjQUFjLEtBQUtyUixPQUNuQitDLFNBQVFzTyxZQUFZdE8sT0FDcEJ1TyxZQUFZRCxZQUFZQyxXQUN4QjNELFFBQVEwRCxZQUFZMUQsT0FDcEI0RCxXQUFXRixZQUFZRSxVQUN2QkMsV0FBV0gsWUFBWUcsVUFDdkJDLFdBQVdKLFlBQVlJLFVBQ3ZCQyxpQkFBaUJMLFlBQVlNLGVBQzdCQyxjQUFjUCxZQUFZUSxZQUMxQm5JLFlBQVkySCxZQUFZM0gsV0FDeEIyRixrQkFBaUJnQyxZQUFZaEMsZ0JBQzdCQyxrQkFBaUIrQixZQUFZL0IsZ0JBQzdCd0MsYUFBWVQsWUFBWVMsV0FDeEJDLFVBQVVWLFlBQVlVLFNBQ3RCalAsV0FBV3VPLFlBQVl2TyxVQUN2QmtQLHdCQUF3QlgsWUFBWVksWUFDcENDLFNBQVFGLHNCQUFzQnJFLE9BQzlCd0UsZ0JBQWVILHNCQUFzQkksY0FDckNDLFlBQVloQixZQUFZZ0IsV0FDeEJDLFVBQVVqQixZQUFZaUIsU0FDdEJ0UyxRQUFRZ0MsOEJBQThCcVAsYUFBYVA7V0FFaEQ5USxNQUFNdVM7UUFDVEMsUUFBUVYsV0FBVVUsTUFBTTdFO1FBQ3hCOEUsVUFBVVgsV0FBVVcsUUFBUTlFO1FBQzVCaEQsT0FBTW1ILFdBQVVuSCxJQUFJZ0Q7UUFDcEJqRCxTQUFRb0gsV0FBVXBILE1BQU1pRDtRQUN4QlosU0FBUytFLFdBQVUvRSxPQUFPWTtRQUMxQitFLGVBQWVsQixZQUFZekUsVUFBVXJELFVBQVV1QyxLQUFLdkIsUUFBT2hCLFVBQVU2RCxLQUFLNUMsTUFBSyxRQUFRLFNBQVM7UUFDaEdnSSxZQUFZWixRQUFRYSxVQUFVakYsT0FBT2pELFFBQU9DLE1BQUs0RztRQUNqRHNCO2lCQUNTO0FBQUEsYUFDSkosV0FBV0s7QUFBQUEsZ0JBQ2pCWjs7d0JBRWU3QztBQUFBQSx3QkFDQUM7QUFBQUE7a0JBRU52QztBQUFBQTs7O1dBSVB5RjtBQUFBQTsrRUFDOEQsS0FBS3hTO1lBQ2hFO0FBQUEsNEVBQ2lEQTtrQkFDN0M7QUFBQSxlQUNIM04sV0FBUyxJQUFJc2dCLFVBQVU1UCxPQUFPQTtBQUFBQSxtQkFDMUJnUSxLQUFLLGFBQWF6QixXQUFXcUIsVUFBVXJCLFdBQVc7QUFBQSwwQkFDM0NDO0FBQUFBLDhCQUNJbUI7QUFBQUEsdUNBQ1NyRDtBQUFBQSx1Q0FDQUM7QUFBQUE7QUFBQUEsaUJBRXRCLGlCQUFpQjBELEdBQUc7aUJBQ3BCdkIsWUFBWUEsU0FBUzlELE9BQU9xRjtBQUFBQTtBQUFBQSx1QkFFdEIsdUJBQXVCQSxHQUFHO2lCQUNoQ3RCLGtCQUFrQkEsZUFBZS9ELE9BQU9xRjtBQUFBQTtBQUFBQSxvQkFFckMsb0JBQW9CQSxHQUFHO2lCQUMxQnBCLGVBQWVBLFlBQVlqRSxPQUFPcUY7QUFBQUE7QUFBQUEsa0JBRXpDLE9BQU9sUSxhQUFhLGFBQWFBLFNBQVMrUCxXQUFXQTtBQUFBQTtBQUFBQTtBQUFBQTtTQUdwRDlCO0FBQUFBLEVBQ1BqUixNQUFNbVQ7QUFFUmxDLFlBQVVyTixZQWdCTjtBQUVKLHNCQUFvQmlLLE9BQU80RCxVQUFVO01BQy9CLENBQUM1RCxTQUFTNEQsWUFBWTtBQUFNLFdBQU87U0FDaEMyQixVQUFVdkYsT0FBTzREO0FBQUFBO0FBRTFCLHFCQUFtQjRCLFFBQVFDLE9BQU87TUFDNUJDLFdBQVdGLE9BQU9HLFFBQVFILE9BQU9JO01BQ2pDQyxZQUFZSCxXQUFXRDtTQUNwQkk7QUFBQUE7QUFFVCxzQkFBb0JMLFFBQVFNLElBQUdDLEtBQUtOLE9BQU87TUFDckNJLFlBQVlHLFlBQVVSLFFBQVFDO1NBQzNCTSxNQUFNTixRQUFRLElBQUluSSxLQUFLUixNQUFPZ0osTUFBSU4sT0FBT0ksUUFBUUMsYUFBYXZJLEtBQUtSLE1BQU9nSixNQUFJTixPQUFPSSxRQUFRQztBQUFBQTtBQUV0RyxzQkFBb0JJLEtBQUtuSCxNQUFNO01BQ3pCZ0gsS0FBSWhILEtBQUtnSCxHQUNUOWpCLEtBQUk4YyxLQUFLOWM7U0FDTkEsTUFBS2lrQixJQUFJQyxPQUFPbGtCLE1BQUtpa0IsSUFBSUUsVUFBVUwsTUFBS0csSUFBSUwsUUFBUUUsTUFBS0csSUFBSU47QUFBQUE7QUFFdEUsNkJBQTJCNUksUUFBT3lJLFFBQVFTLEtBQUtSLE9BQU9NLEtBQUs7TUFDckRLLFdBQVc7TUFDWEMsU0FBUztNQUNUQyxjQUFjYixRQUFRO01BQ3RCSSxZQUFZRyxZQUFVUixRQUFRQztNQUU5QmMsY0FBY0MsYUFBV2hCLFFBQVFTLElBQUlILEdBQUdDLEtBQUtOO01BRzdDZ0IsZUFBZWpCLE9BQU9VLE1BQU1ELElBQUlqa0IsS0FBS3dqQixPQUFPVyxTQUFTRixJQUFJamtCO01BQ3pEMGtCLGFBQWFsQixPQUFPVSxNQUFNbkosT0FBTS9hLEtBQUt3akIsT0FBT1csU0FBU3BKLE9BQU0vYTtNQUUzRDJrQixlQUFlNUosT0FBTS9hLElBQUl3akIsT0FBT1c7TUFDaENTLGVBQWVwQixPQUFPVSxNQUFNbkosT0FBTS9hO01BQ2xDNmtCLFlBQVlaLElBQUlDLE1BQU1WLE9BQU9VLE9BQU9ELElBQUlFLFNBQVNYLE9BQU9XO01BRXhEVSxXQUFXO0FBQ2JULGVBQVc7QUFDWEMsYUFBU0M7QUFBQUE7TUFHUEcsY0FBYztRQUNaRyxjQUFjO0FBQ2hCUixpQkFBVztBQUNYQyxlQUFTRTtBQUFBQSxlQUNBSSxjQUFjO0FBQ3ZCUCxpQkFBV0c7QUFDWEYsZUFBU0M7QUFBQUE7QUFBQUE7TUFJVEksWUFBWTtBQUVkTixlQUFXQyxTQUFTTixNQUFNTyxjQUFjaEosS0FBS1IsTUFBT0MsUUFBTStJLElBQUlOLE9BQU9JLFFBQVFDLGFBQWF2SSxLQUFLUixNQUFPQyxRQUFNK0ksSUFBSU4sT0FBT0ksUUFBUUM7UUFFM0hZLGNBQWM7VUFDWkYsY0FBY0g7QUFBVUEsbUJBQVdHO0FBQUFBO0FBQWlCRixpQkFBU0U7QUFBQUEsZUFDeER4SixPQUFNL2EsSUFBSWlrQixJQUFJamtCLEdBQUc7QUFHMUJxa0IsZUFBU0M7QUFBQUEsV0FDSjtBQUVMRixpQkFBVztBQUFBO0FBQUE7U0FJUjtBQUFBLElBQ0xBO0FBQUFBLElBQ0FDO0FBQUFBO0FBQUFBO0FBSUosSUFBSVMsUUFBcUIseUJBQVV6RCxrQkFBa0I7QUFDbkRDLGlCQUFld0QsUUFBT3pEO29CQUVMO1dBQ1JBLGlCQUFpQjdPLE1BQU0sTUFBTUMsY0FBYztBQUFBO01BR2hEOE8sU0FBU3VELE9BQU10RDtBQUVuQkQsU0FBT3dELG9CQUFvQiw2QkFBNkI7UUFDbERyRCxjQUFjLEtBQUtyUixPQUNuQjJVLHdCQUF3QnRELFlBQVl1RCxhQUNwQ0EsY0FBY0QsMEJBQTBCLFNBQVMsSUFBSUEsdUJBQ3JERSxZQUFZeEQsWUFBWXdELFdBQ3hCQyxhQUFheGUsU0FBVXVlLFVBQVU3SyxVQUNqQzZKLE9BQU1pQixXQUFXakIsS0FDakJOLFFBQU91QixXQUFXdkIsTUFDbEJ3QixRQUFRRCxXQUFXQyxPQUNuQkMsVUFBU0YsV0FBV0UsUUFDcEJDLGFBQWFDLE9BQU9DLGNBQWNDLGFBQWFGLFNBQy9DRyxZQUFZSCxPQUFPSSxhQUFhQyxjQUFjTCxTQUM5Q3BCLFVBQVNELE9BQU1tQixTQUNmMUIsU0FBUUMsUUFBT3dCO1FBRWZqQixVQUFTbUIsY0FBYzNCLFNBQVErQixXQUFXO1VBQ3hDRyxXQUFXQztVQUNYM0IsVUFBU21CO0FBQVlPLG9CQUFZMUIsVUFBU21CLGFBQWNMLGFBQVlqbEIsS0FBSyxDQUFDaWxCLGVBQWU7VUFDekZ0QixTQUFRK0I7QUFBV0kscUJBQWFuQyxTQUFRK0IsWUFBYVQsYUFBWW5CLEtBQUssQ0FBQ21CLGVBQWU7V0FDckZjLFNBQVM7QUFBQSxRQUNaRjtBQUFBQSxRQUNBQztBQUFBQTtBQUFBQTtBQUFBQTtBQUtOdkUsU0FBT0UsU0FBUyxrQkFBa0I7UUFDNUIzQyxRQUFRO1FBRVJrSCxlQUFlLEtBQUszVixPQUNwQjRWLFNBQVNELGFBQWFDLFFBQ3RCckUsV0FBV29FLGFBQWFwRSxVQUN4QlEsVUFBVTRELGFBQWE1RCxTQUN2QkQsYUFBWTZELGFBQWE3RCxXQUN6QkcsYUFBYTBELGFBQWExRCxZQUMxQlIsV0FBV2tFLGFBQWFsRSxVQUN4QkUsZ0JBQWdCZ0UsYUFBYWhFLGVBQzdCRSxhQUFhOEQsYUFBYTlELFlBQzFCUSxZQUFZc0QsYUFBYXRELFdBQ3pCQyxVQUFVcUQsYUFBYXJELFNBQ3ZCNUksWUFBWWlNLGFBQWFqTSxXQUN6Qm1MLFlBQVljLGFBQWFkO1FBQ3pCRSxRQUFRLEtBQUsvVSxNQUFNNlYsU0FBU2QsT0FDNUJTLFlBQWEsTUFBS00sU0FBUyxJQUFJTixhQUFhLEdBQzVDQyxhQUFjLE1BQUtLLFNBQVMsSUFBSUwsY0FBYztRQUM5QzFTLFNBQVE7QUFBQSxNQUNWOFEsS0FBSyxDQUFDMkI7QUFBQUEsTUFDTmpDLE1BQU0sQ0FBQ2tDO0FBQUFBLE1BQ1BNLFVBQVVoQixRQUFRQSxRQUFRO0FBQUE7O2FBR25CMWlCLFdBQVMsSUFBSSxLQUFLMk4sTUFBTStDLE9BQU9BO0FBQUFBLGlCQUMzQjtBQUFBLFdBQ044UjtBQUFBQTttQkFFTTtBQUFBLGtCQUNWbkwsVUFBVTZCLE9BQU84RyxXQUFXO0FBQUEsVUFBcUJ1RCxPQUFPbk4sSUFBSSxTQUFVa0YsT0FBT3FJLEtBQUs7O2dCQUczRTtBQUFBOzs7O3FCQUtLbEU7QUFBQUE7OzswQkFJS3BJLFVBQVUyQyxHQUFHeUYsV0FBVW5ILElBQUlnRCxRQUFRMEUsV0FBVztBQUFBLDBCQUM5QzNJLFVBQVU2QyxJQUFJdUYsV0FBVXBILE1BQU1pRCxRQUFRMkUsU0FBUztBQUFBOztvQkFHckQyRCxhQUFXdEksT0FBTzREO0FBQUFBLHFCQUNqQjtBQUFBLHVCQUNFLHVCQUF1QjttQkFDM0I5QyxNQUFNek8sTUFBTWtXLGdCQUFnQnZJO0FBQUFBO0FBQUFBLHFCQUUxQixxQkFBcUI7bUJBQ3ZCYyxNQUFNek8sTUFBTXNCO0FBQUFBO0FBQUFBLFdBcEJoQjBVO0FBQUFBO0FBQUFBO0FBQUFBO1NBMEJKdkI7QUFBQUEsRUFDUDNVLE1BQU1tVDtBQUVSd0IsTUFBTS9RLFlBc0JGO0FBTUosSUFBSXlTLFVBQXVCclcsc0JBQU1DLFdBQVcsU0FBVUMsT0FBT2dELEtBQUs7O2VBRW5EQTtBQUFBQSxLQUNWaEQ7QUFBQUE7QUFHTCw0QkFBMEJvVyxNQUFNak4sU0FBUy9ILFFBQVE7TUFDM0NBLFdBQVcsUUFBUTtBQUNyQkEsYUFBU2lWO0FBQUFBO1NBR0pDLE9BQU9sVixRQUFRZ1YsTUFBTWpOLFNBQVM7QUFBQSxJQUNuQ29OLFNBQVM7QUFBQTtBQUFBO0FBSWIsMkJBQXlCclYsV0FBV3VTLElBQUc5akIsSUFBRztTQUNqQyxDQUFDdVIsYUFBYW5MLFdBQVNtTCxXQUFXbVYsU0FBU0csaUJBQWlCL0MsSUFBRzlqQjtBQUFBQTtBQUd4RSxpQ0FBK0I4bUIsTUFBTWhLLE1BQU07TUFDckNpSyxVQUFVakssS0FBS2lLLFNBQ2ZDLFVBQVVsSyxLQUFLa0s7TUFDZnZWLFNBQVNpVixTQUFTRyxpQkFBaUJFLFNBQVNDO1NBQ3pDQyxRQUFReFYsUUFBUSxjQUFjcVY7QUFBQUE7QUFFdkMsbUJBQWlCQSxNQUFNSSxRQUFRO1NBQ3RCLENBQUMsQ0FBQ0Msd0JBQXNCTCxNQUFNSTtBQUFBQTtBQUd2QywrQkFBNkI3RCxHQUFHO01BQzFCNVIsU0FBUzRSO01BRVRBLEVBQUUrRCxXQUFXL0QsRUFBRStELFFBQVEzUyxRQUFRO0FBQ2pDaEQsYUFBUzRSLEVBQUUrRCxRQUFRO0FBQUE7U0FHZDtBQUFBLElBQ0xMLFNBQVN0VixPQUFPc1Y7QUFBQUEsSUFDaEJDLFNBQVN2VixPQUFPdVY7QUFBQUEsSUFDaEJLLE9BQU81VixPQUFPNFY7QUFBQUEsSUFDZEMsT0FBTzdWLE9BQU82VjtBQUFBQTtBQUFBQTtBQUlsQixJQUFJQyxtQkFBaUI7QUFDckIsSUFBSUMsa0JBQWdCO0FBRXBCLElBQUlDLGNBQXlCLDJCQUFZO3NCQUNwQlgsTUFBTVksT0FBTztRQUMxQjVKLFFBQVE0SixVQUFVLFNBQVMsS0FBS0EsT0FDaENDLGVBQWU3SixNQUFNOEosUUFDckJBLFVBQVNELGlCQUFpQixTQUFTLFFBQVFBLGNBQzNDRSx3QkFBd0IvSixNQUFNZ0ssb0JBQzlCQSxxQkFBcUJELDBCQUEwQixTQUFTLE1BQU1BO1NBRTdERSxhQUFhO1NBQ2J4VyxZQUFZdVY7U0FDWmtCLGNBQWMsQ0FBQ2xCLFFBQVFjO1NBQ3ZCRSxxQkFBcUJBO1NBQ3JCRyxhQUFhcFAsT0FBT3FQLE9BQU87U0FDM0JDLHNCQUFzQixLQUFLQSxvQkFBb0JDLEtBQUs7U0FDcERDLG1CQUFtQixLQUFLQSxpQkFBaUJELEtBQUs7U0FDOUNFLDBCQUEwQixLQUFLQSx3QkFBd0JGLEtBQUs7U0FDNURHLGVBQWUsS0FBS0EsYUFBYUgsS0FBSztTQUN0Q0ksMkJBQTJCLEtBQUtBLHlCQUF5QkosS0FBSztTQUM5REssK0JBQStCLEtBQUtBLDZCQUE2QkwsS0FBSztTQUd0RU0saUNBQWlDN1ksbUJBQWlCLGFBQWEsV0FBWTtBQUFBLE9BQUkwVjtTQUMvRW9ELHlCQUF5QjlZLG1CQUFpQixXQUFXLEtBQUswWTtTQUMxREssdUJBQXVCL1ksbUJBQWlCLFNBQVMsS0FBSzBZO1NBQ3RETSxpQ0FBaUNoWixtQkFBaUIsUUFBUSxLQUFLMlk7U0FDL0RNLHFDQUFxQ2paLG1CQUFpQixZQUFZLEtBQUs0WTtTQUV2RU07QUFBQUE7TUFHSHhILFNBQVNrRyxXQUFVakc7QUFFdkJELFNBQU95SCxLQUFLLFlBQVl2QyxNQUFNak4sU0FBUztRQUNqQ3lQLFdBQVcsS0FBS2hCLFdBQVd4QixTQUFVLE1BQUt3QixXQUFXeEIsUUFBUTtBQUNqRXdDLGFBQVN0TyxLQUFLbkI7V0FDUDtBQUFBLE1BQ0wwUCxRQUFRLGtCQUFrQjtZQUNwQjdDLE1BQU00QyxTQUFTMVAsUUFBUUM7WUFDdkI2TSxRQUFRO0FBQUk0QyxtQkFBU25pQixPQUFPdWYsS0FBSztBQUFBO0FBQUE7QUFBQTtBQUszQzlFLFNBQU80SCxPQUFPLGNBQWMxQyxNQUFNO2FBQ3ZCalMsT0FBTy9CLFVBQVVnQyxRQUFRQyxPQUFPLElBQUlDLE1BQU1ILE9BQU8sSUFBSUEsT0FBTyxJQUFJLElBQUlJLE9BQU8sR0FBR0EsT0FBT0osTUFBTUksUUFBUTtBQUMxR0YsV0FBS0UsT0FBTyxLQUFLbkMsVUFBVW1DO0FBQUFBO1FBR3pCa0g7UUFDQW1OLFdBQVcsS0FBS2hCLFdBQVd4QixTQUFTO0FBQ3hDd0MsYUFBU0csUUFBUSxTQUFVQyxLQUFJO1VBQ3pCdk4sV0FBV3FIO0FBQVdySCxpQkFBU3VOLElBQUc3VyxNQUFNLFFBQVFrQztBQUFBQTtXQUUvQ29IO0FBQUFBO0FBR1R5RixTQUFPK0gsV0FBVyxvQkFBb0I7U0FDL0J2QixhQUFhO1NBQ2JFLGFBQWFwUCxPQUFPcVAsT0FBTztTQUMzQlEsa0NBQWtDLEtBQUtBO1NBQ3ZDYSwrQkFBK0IsS0FBS0E7U0FDcENDLHNCQUFzQixLQUFLQTtTQUMzQkMsa0JBQWtCLEtBQUtBO1NBQ3ZCQyx1QkFBdUIsS0FBS0E7U0FDNUJkLHdCQUF3QixLQUFLQTtTQUM3QkQsMEJBQTBCLEtBQUtBO1NBQy9CRSxrQ0FBa0MsS0FBS0E7U0FDdkNDLHNDQUFzQyxLQUFLQTtBQUFBQTtBQUdsRHZILFNBQU8rRSxhQUFhLHFCQUFvQlEsTUFBTTtRQUN4QzdDLE1BQU0sS0FBSzBGO1FBQ1gsQ0FBQzFGLE9BQU8sQ0FBQyxLQUFLMkY7QUFBVyxhQUFPO1dBQzdCQyxpQkFBZTVGLEtBQUs2RixtQkFBaUJoRDtBQUFBQTtBQUc5Q3ZGLFNBQU93SSxTQUFTLGdCQUFnQkMsT0FBTztRQUNqQy9GLE1BQU0sS0FBSzBGO1FBRVgsQ0FBQzFGLE9BQU8sQ0FBQyxLQUFLMkY7QUFBVyxhQUFPO1dBQzdCSSxNQUFNRCxPQUFPLEtBQUt6RCxZQUFZO0FBQUE7QUFLdkMvRSxTQUFPMEksd0JBQXdCLCtCQUErQnpRLFNBQVMwUSxjQUFjO1FBQy9FcEwsUUFBUTtRQUVScUwsUUFBUTtRQUNSQywwQkFBMEI7UUFDMUJDLHlCQUF5QjtRQUV6QkMsbUJBQW1CLDJCQUEwQkosZUFBYztBQUM3REMsY0FBUUksV0FBVyxXQUFZO0FBQzdCQztBQUNBaFIsZ0JBQVEwUTtBQUFBQSxTQUNQcEwsTUFBTWdKO0FBQ1RzQyxnQ0FBMEJ2YSxtQkFBaUIsYUFBYSxXQUFZO2VBQzNEMmE7QUFBQUE7QUFFVEgsK0JBQXlCeGEsbUJBQWlCLFlBQVksV0FBWTtlQUN6RDJhO0FBQUFBO0FBQUFBO1FBSVBDLDJCQUEyQjVhLG1CQUFpQixjQUFjeWE7UUFFMURFLFVBQVUsb0JBQW1CO1VBQzNCTCxPQUFPO0FBQ1RPLHFCQUFhUDtBQUFBQTtVQUdYQyx5QkFBeUI7QUFDM0JBO0FBQUFBO1VBR0VDLHdCQUF3QjtBQUMxQkE7QUFBQUE7QUFHRkYsY0FBUTtBQUNSQyxnQ0FBMEI7QUFDMUJDLCtCQUF5QjtBQUFBO1FBR3ZCSCxjQUFjO0FBQ2hCSSx1QkFBaUJKO0FBQUFBO1dBR1osV0FBWTtBQUNqQk07QUFDQUM7QUFBQUE7QUFBQUE7QUFNSmxKLFNBQU93SCwyQkFBMkIsb0NBQW9DO1FBQ2hFNEIsU0FBUztRQUVUQywwQkFBMEIvYSxtQkFBaUIsYUFBYSxTQUFVd1QsR0FBRztBQUN2RXNILGFBQU9wQjtBQUVQb0IsYUFBT3hDLG9CQUFvQjlFO0FBRTNCc0gsYUFBT3BCLDhCQUE4QjFaLG1CQUFpQixhQUFhOGEsT0FBT3hDO0FBQUFBO1FBRXhFc0MsMkJBQTJCNWEsbUJBQWlCLGNBQWMsU0FBVXdULEdBQUc7QUFDekVzSCxhQUFPcEI7QUFFUG9CLGFBQU9wQiw4QkFBOEJvQixPQUFPVixzQkFBc0JVLE9BQU94QyxxQkFBcUI5RTtBQUFBQTtTQUczRmtHLDhCQUE4QixXQUFZO0FBQzdDcUI7QUFDQUg7QUFBQUE7QUFBQUE7QUFJSmxKLFNBQU9pSCwyQkFBMkIsa0NBQWtDbkYsR0FBRztRQUNqRXdILHVCQUF1QkMsc0JBQW9CekgsSUFDM0NnRSxRQUFRd0QscUJBQXFCeEQsT0FDN0JDLFFBQVF1RCxxQkFBcUJ2RCxPQUM3QlAsVUFBVThELHFCQUFxQjlELFNBQy9CQyxVQUFVNkQscUJBQXFCN0Q7U0FFOUJtQyxLQUFLLG1CQUFtQjtBQUFBLE1BQzNCckYsR0FBR3VEO0FBQUFBLE1BQ0hybkIsR0FBR3NuQjtBQUFBQSxNQUNIUDtBQUFBQSxNQUNBQztBQUFBQTtBQUVGM0QsTUFBRTBIO0FBQUFBO0FBR0p4SixTQUFPa0gsK0JBQStCLHNDQUFzQ3BGLEdBQUc7UUFDekUySCx3QkFBd0JGLHNCQUFvQnpILElBQzVDZ0UsUUFBUTJELHNCQUFzQjNELE9BQzlCQyxRQUFRMEQsc0JBQXNCMUQsT0FDOUJQLFVBQVVpRSxzQkFBc0JqRSxTQUNoQ0MsVUFBVWdFLHNCQUFzQmhFO1NBRS9CbUMsS0FBSyx1QkFBdUI7QUFBQSxNQUMvQnJGLEdBQUd1RDtBQUFBQSxNQUNIcm5CLEdBQUdzbkI7QUFBQUEsTUFDSFA7QUFBQUEsTUFDQUM7QUFBQUE7QUFFRjNELE1BQUUwSDtBQUFBQTtBQUdKeEosU0FBTzRHLHNCQUFzQiw2QkFBNkI5RSxHQUFHO1FBQ3ZELEtBQUswRSxZQUFZOzs7UUFJakJrRCx3QkFBd0JILHNCQUFvQnpILElBQzVDMEQsVUFBVWtFLHNCQUFzQmxFLFNBQ2hDQyxVQUFVaUUsc0JBQXNCakUsU0FDaENLLFFBQVE0RCxzQkFBc0I1RCxPQUM5QkMsUUFBUTJELHNCQUFzQjNEO1FBRTlCUixPQUFPLEtBQUt2VixhQUNaMlosVUFDQUM7UUFFQTlILEVBQUUrSCxVQUFVLEtBQUsvSCxFQUFFZ0ksV0FBVyxLQUFLLENBQUNDLGtCQUFnQnhFLE1BQU1DLFNBQVNDO0FBQVU7UUFFN0UsQ0FBQyxLQUFLZ0IsZUFBZWxCLFFBQVEsQ0FBQzFnQixXQUFTMGdCLE1BQU16RCxFQUFFNVIsU0FBUztVQUN0RDhaLHFCQUFxQkMsb0JBQWtCLElBQ3ZDdEgsT0FBTXFILG1CQUFtQnJILEtBQ3pCTixRQUFPMkgsbUJBQW1CM0gsTUFDMUJPLFVBQVNvSCxtQkFBbUJwSCxRQUM1QlIsU0FBUTRILG1CQUFtQjVIO0FBRS9Cd0gsbUJBQWFyQixtQkFBaUJoRDtBQUM5Qm9FLGlCQUFXckIsaUJBQWU7QUFBQSxRQUN4QjNGLEtBQUtpSCxXQUFXakgsTUFBTUE7QUFBQUEsUUFDdEJOLE1BQU11SCxXQUFXdkgsT0FBT0E7QUFBQUEsUUFDeEJPLFFBQVFnSCxXQUFXaEgsU0FBU0E7QUFBQUEsUUFDNUJSLE9BQU93SCxXQUFXeEgsUUFBUUE7QUFBQUEsU0FDekI7QUFBQSxRQUNETyxLQUFLb0Q7QUFBQUEsUUFDTDFELE1BQU15RDtBQUFBQTtVQUVKLENBQUM2RDtBQUFVO0FBQUE7UUFHYnBQLFNBQVMsS0FBS3FOLEtBQUssZ0JBQWdCLEtBQUtzQyxvQkFBb0I7QUFBQSxNQUM5REMsU0FBUyxTQUFTQyxLQUFLdEksRUFBRW9EO0FBQUFBLE1BQ3pCM0MsR0FBR3VEO0FBQUFBLE1BQ0hybkIsR0FBR3NuQjtBQUFBQSxNQUNIUDtBQUFBQSxNQUNBQztBQUFBQTtRQUVFbEwsV0FBVztBQUFPO1lBRWR1SCxFQUFFb0Q7QUFBQUEsV0FDSDthQUNFK0MscUJBQXFCM1osbUJBQWlCLFdBQVcsS0FBS3lZO2FBQ3REbUIsaUJBQWlCNVosbUJBQWlCLFdBQVcsS0FBS3lZO2FBQ2xEb0Isc0JBQXNCN1osbUJBQWlCLGFBQWEsS0FBS3dZOztXQUczRDthQUNFQSxpQkFBaUJoRjthQUVqQm1HLHFCQUFxQjNaLG1CQUFpQixZQUFZLEtBQUt5WTthQUN2RG9CLHNCQUFzQjdaLG1CQUFpQixhQUFhLEtBQUt3WTs7OztBQUtwRTlHLFNBQU8rRywwQkFBMEIsaUNBQWlDakYsR0FBRztRQUMvRHVJLHdCQUF3QmQsc0JBQW9CekgsSUFDNUNnRSxRQUFRdUUsc0JBQXNCdkUsT0FDOUJDLFFBQVFzRSxzQkFBc0J0RTtTQUU3QnNDLFlBQVk7U0FDWkosc0JBQXNCLEtBQUtBO1NBQzNCRSx1QkFBdUIsS0FBS0E7UUFDN0IsQ0FBQyxLQUFLK0I7QUFBbUI7UUFDekJJLFNBQVMsQ0FBQyxLQUFLdGEsYUFBYW5MLFdBQVMsS0FBS21MLGFBQWE4UixFQUFFNVI7UUFDekR5VixTQUFTLEtBQUt5QztRQUNkbUMsUUFBUSxLQUFLQyxRQUFRMUUsT0FBT0M7U0FDM0JtRSxvQkFBb0I7UUFFckJwSSxFQUFFaEssUUFBUSxVQUFVO2FBQ2YsS0FBSzhQLEtBQUs7QUFBQTtRQUdmLENBQUMwQyxRQUFRO2FBQ0osS0FBSzFDLEtBQUs7QUFBQTtRQUdmMkMsU0FBU0QsUUFBUTthQUNaLEtBQUtHLGtCQUFrQjNJO0FBQUFBO1FBSTVCLENBQUN5STtBQUFPLGFBQU8sS0FBSzNDLEtBQUssVUFBVWpDO0FBQUFBO0FBR3pDM0YsU0FBT3lLLG9CQUFvQiwyQkFBMkIzSSxHQUFHO1FBQ25ENEksd0JBQXdCbkIsc0JBQW9CekgsSUFDNUNnRSxRQUFRNEUsc0JBQXNCNUUsT0FDOUJDLFFBQVEyRSxzQkFBc0IzRSxPQUM5QlAsVUFBVWtGLHNCQUFzQmxGLFNBQ2hDQyxVQUFVaUYsc0JBQXNCakY7UUFFaENrRixNQUFNLElBQUloUixPQUFPaVI7UUFFakIsS0FBS0Msa0JBQWtCRixNQUFNLEtBQUtFLGVBQWVDLFlBQVk3RSxpQkFBZTtXQUV6RTRFLGlCQUFpQjthQUNmLEtBQUtqRCxLQUFLLGVBQWU7QUFBQSxRQUM5QnJGLEdBQUd1RDtBQUFBQSxRQUNIcm5CLEdBQUdzbkI7QUFBQUEsUUFDSFA7QUFBQUEsUUFDQUM7QUFBQUE7QUFBQUE7U0FLQ29GLGlCQUFpQjtBQUFBLE1BQ3BCQyxXQUFXSDtBQUFBQTtXQUVOLEtBQUsvQyxLQUFLLFNBQVM7QUFBQSxNQUN4QnJGLEdBQUd1RDtBQUFBQSxNQUNIcm5CLEdBQUdzbkI7QUFBQUEsTUFDSFA7QUFBQUEsTUFDQUM7QUFBQUE7QUFBQUE7QUFJSnpGLFNBQU84RyxtQkFBbUIsMEJBQTBCaEYsR0FBRztRQUNqRCxLQUFLb0ksc0JBQXNCLFFBQVEsS0FBSzFELFlBQVk7OztRQUlwRHVFLHdCQUF3QixLQUFLYixtQkFDN0IzSCxLQUFJd0ksc0JBQXNCeEksR0FDMUI5akIsS0FBSXNzQixzQkFBc0J0c0I7UUFFMUJ1c0Isd0JBQXdCekIsc0JBQW9CekgsSUFDNUNnRSxRQUFRa0Ysc0JBQXNCbEYsT0FDOUJDLFFBQVFpRixzQkFBc0JqRjtRQUU5QmtGLEtBQUlsUixLQUFLQyxJQUFJdUksS0FBSXVEO1FBQ2pCb0YsS0FBSW5SLEtBQUtDLElBQUl2YixLQUFJc25CO1FBQ2pCMUQsUUFBT3RJLEtBQUsxTSxJQUFJeVksT0FBT3ZELEtBQ3ZCSSxPQUFNNUksS0FBSzFNLElBQUkwWSxPQUFPdG5CLEtBQ3RCMHNCLE1BQU0sS0FBSzlDO1FBR1gsS0FBS21DLFFBQVExRSxPQUFPQyxVQUFVLENBQUNvRixPQUFPLENBQUVGLE9BQUtDLEtBQUk7OztTQUloRDdDLFlBQVk7U0FDWkQsY0FBYztBQUFBLE1BQ2pCekYsS0FBS0E7QUFBQUEsTUFDTE4sTUFBTUE7QUFBQUEsTUFDTkUsR0FBR3VEO0FBQUFBLE1BQ0hybkIsR0FBR3NuQjtBQUFBQSxNQUNIM0QsT0FBT0MsUUFBTzRJO0FBQUFBLE1BQ2RySSxRQUFRRCxPQUFNdUk7QUFBQUE7UUFHWixDQUFDQyxLQUFLO1dBQ0h2RCxLQUFLLGVBQWUsS0FBS3NDO0FBQUFBO1FBRzVCLENBQUMsS0FBS00sUUFBUTFFLE9BQU9DO0FBQVEsV0FBSzZCLEtBQUssYUFBYSxLQUFLUTtBQUM3RHRHLE1BQUUwSDtBQUFBQTtBQUdKeEosU0FBT2dILGVBQWUsc0JBQXNCbEYsR0FBRztTQUN4Q3NKLE9BQU90SixFQUFFdUosV0FBV3ZKLEVBQUV3SjtBQUFBQTtBQUc3QnRMLFNBQU93SyxVQUFVLGlCQUFpQjFFLE9BQU9DLE9BQU87UUFDMUN3Rix5QkFBeUIsS0FBS3JCLG1CQUM5QjNILEtBQUlnSix1QkFBdUJoSixHQUMzQjlqQixLQUFJOHNCLHVCQUF1QjlzQixHQUMzQjByQixVQUFVb0IsdUJBQXVCcEI7V0FDOUIsQ0FBQ0EsV0FBV3BRLEtBQUtDLElBQUk4TCxRQUFRdkQsT0FBTXlELG9CQUFrQmpNLEtBQUtDLElBQUkrTCxRQUFRdG5CLE9BQU11bkI7QUFBQUE7U0FHOUVFO0FBQUFBO0FBUVQsNkJBQTJCc0YsVUFBVTtNQUMvQkEsYUFBYSxRQUFRO0FBQ3ZCQSxlQUFXO0FBQUE7TUFHVCxPQUFPQSxhQUFhO0FBQVVBLGVBQVc7QUFBQSxNQUMzQzdJLEtBQUs2STtBQUFBQSxNQUNMbkosTUFBTW1KO0FBQUFBLE1BQ05wSixPQUFPb0o7QUFBQUEsTUFDUDVJLFFBQVE0STtBQUFBQTtTQUVIQTtBQUFBQTtBQVdULDBCQUF3QkMsT0FBT0MsT0FBT0MsV0FBVztNQUMzQ0EsY0FBYyxRQUFRO0FBQ3hCQSxnQkFBWTtBQUFBO01BR1ZDLG9CQUFvQnJELG1CQUFpQmtELFFBQ3JDSSxPQUFPRCxrQkFBa0JqSixLQUN6Qm1KLFFBQVFGLGtCQUFrQnZKLE1BQzFCMEosd0JBQXdCSCxrQkFBa0J4SixPQUMxQzRKLFNBQVNELDBCQUEwQixTQUFTRCxRQUFRQyx1QkFDcERFLHdCQUF3Qkwsa0JBQWtCaEosUUFDMUNzSixVQUFVRCwwQkFBMEIsU0FBU0osT0FBT0k7TUFFcERFLHFCQUFxQjVELG1CQUFpQm1ELFFBQ3RDVSxPQUFPRCxtQkFBbUJ4SixLQUMxQjBKLFFBQVFGLG1CQUFtQjlKLE1BQzNCaUssd0JBQXdCSCxtQkFBbUIvSixPQUMzQ21LLFNBQVNELDBCQUEwQixTQUFTRCxRQUFRQyx1QkFDcERFLHdCQUF3QkwsbUJBQW1CdkosUUFDM0M2SixVQUFVRCwwQkFBMEIsU0FBU0osT0FBT0k7U0FFakQsQ0FBRU4sV0FBVVAsWUFBWVMsUUFDL0JQLE9BQU9GLFlBQVljLFdBQ25CVCxTQUFTTCxZQUFZVSxTQUNyQlAsUUFBUUgsWUFBWVk7QUFBQUE7QUFRdEIsNEJBQTBCaEgsTUFBTTtNQUMxQixDQUFDQSxLQUFLbUg7QUFBdUIsV0FBT25IO01BQ3BDb0gsT0FBT3BILEtBQUttSCx5QkFDWnJLLFFBQU9zSyxLQUFLdEssT0FBT3VLLGFBQVcsU0FDOUJqSyxPQUFNZ0ssS0FBS2hLLE1BQU1pSyxhQUFXO1NBQ3pCO0FBQUEsSUFDTGpLLEtBQUtBO0FBQUFBLElBQ0xOLE1BQU1BO0FBQUFBLElBQ05ELE9BQVFtRCxNQUFLc0gsZUFBZSxLQUFLeEs7QUFBQUEsSUFDakNPLFFBQVMyQyxNQUFLdUgsZ0JBQWdCLEtBQUtuSztBQUFBQTtBQUFBQTtBQUl2QyxzQkFBb0JvSyxLQUFLO01BQ25CQSxRQUFRO0FBQVEsV0FBTy9JLE9BQU9nSixlQUFlN0gsU0FBUzhILEtBQUtsb0IsY0FBYztNQUN6RWdvQixRQUFRO0FBQU8sV0FBTy9JLE9BQU9rSixlQUFlL0gsU0FBUzhILEtBQUtub0IsYUFBYTtBQUFBO0FBRzdFLElBQUlxb0Isa0JBQStCLHlCQUFVck4sa0JBQWtCO0FBQzdEQyxpQkFBZW9OLGtCQUFpQnJOOzRCQUVQaFIsT0FBT3NlLFNBQVM7UUFDbkM3UDtBQUVKQSxZQUFRdUMsaUJBQWlCdEYsS0FBSyxNQUFNMUwsT0FBT3NlLFlBQVk7QUFDdkQ3UCxVQUFNcUgsUUFBUTtBQUFBLE1BQ1p5RCxXQUFXO0FBQUE7V0FFTjlLO0FBQUFBO01BR0x5QyxTQUFTbU4saUJBQWdCbE47QUFFN0JELFNBQU93RCxvQkFBb0IsNkJBQTZCO1NBQ2pEMVUsTUFBTXVlLGNBQWMsS0FBS0M7QUFBQUE7QUFHaEN0TixTQUFPdU4sdUJBQXVCLGdDQUFnQztTQUN2REM7QUFBQUE7QUFHUHhOLFNBQU95TixtQ0FBbUMsMENBQTBDQyxXQUFXO1FBQ3pGQSxVQUFVTCxjQUFjLENBQUMsS0FBS3ZlLE1BQU11ZTtBQUFZLFdBQUtDO1FBQ3JELENBQUNJLFVBQVVMLGNBQWMsS0FBS3ZlLE1BQU11ZTtBQUFZLFdBQUtHO0FBQUFBO0FBRzNEeE4sU0FBT0UsU0FBUyxrQkFBa0I7UUFDNUJDLGNBQWMsS0FBS3JSLE9BQ25CNkcsU0FBUXdLLFlBQVl4SyxPQUNwQmdZLFVBQVN4TixZQUFZd04sUUFDckI5TSxVQUFVVixZQUFZVSxTQUN0QitNLGNBQWN6TixZQUFZNUgsTUFDMUJzVixVQUFVMU4sWUFBWVksV0FBVytNLGlCQUNqQ3RWLFlBQVkySCxZQUFZM0g7UUFDeEJ1VixjQUFjLEtBQUtuSixPQUNuQnlELFlBQVkwRixZQUFZMUYsV0FDeEJ4RixXQUFXa0wsWUFBWWxMLFVBQ3ZCQyxTQUFTaUwsWUFBWWpMO1FBQ3JCaEssVUFBVTZVOztpQkFFRDtBQUFBLGdCQUNWaFksT0FBTTRCLElBQUksU0FBVWdCLE9BQU15VixPQUFPO1lBQzlCM04sV0FBV2dJLGFBQWEyRixTQUFTbkwsWUFBWW1MLFNBQVNsTDtZQUV0RG1MLG1CQUFtQnBOLFFBQVFxTixRQUFRM1YsUUFDbkM2SCxZQUFZNk4saUJBQWlCN04sV0FDN0J2TyxTQUFRb2MsaUJBQWlCcGM7O2lCQUlwQjBHO0FBQUFBLGlCQUNBNUM7QUFBQUE7bUJBRUE5RDtBQUFBQSx1QkFDSWdRLEtBQUssY0FBY3pCLFdBQVdDLFlBQVkscUJBQXFCN0gsVUFBVStGLFdBQVdoRyxPQUFNTyxZQUFZLGFBQWE4VSxlQUFlcFYsVUFBVXdFLElBQUk0USxhQUFhclYsT0FBTSxZQUFZO0FBQUE7QUFBQSxXQUxyTHlWO0FBQUFBO0FBQUFBO0FBQUFBO0FBVVhoTyxTQUFPc04sY0FBYyx1QkFBdUI7UUFDdENsRSxTQUFTO1FBRVQ3RCxPQUFPNEksOENBQVk7UUFDbkJDLFdBQVcsS0FBS0MsWUFBWSxJQUFJbkksWUFBVSxLQUFLcFgsTUFBTWtCLFdBQVc7QUFBQSxNQUNsRXVXLG9CQUFvQixLQUFLelgsTUFBTXlYO0FBQUFBO1FBRzdCK0gsd0JBQXdCLGdDQUErQkMsT0FBT0MsWUFBWTtVQUN4RSxDQUFDQyxVQUFRTiw4Q0FBWS9FLFNBQVNtRixRQUFRO1lBQ3BDdE0sU0FBU3NHLG1CQUFpQmhEO1lBQzFCbUosZUFBZXRGLE9BQU90YSxPQUN0QjZHLFNBQVErWSxhQUFhL1ksT0FDckI2TSxNQUFNa00sYUFBYWxNO1lBRW5CbU0sYUFBVzFNLFFBQVFzTSxRQUFRO2NBQ3pCSyxjQUFjM0wsYUFBV2hCLFFBQVFzTSxNQUFNaE0sR0FBR0MsS0FBSzdNLE9BQU16QztBQUV6RGtXLGlCQUFPeUYsWUFBWTtBQUFBLFlBQ2pCaE0sVUFBVStMO0FBQUFBLFlBQ1Y5TCxRQUFROEw7QUFBQUEsWUFDUkUsUUFBUU47QUFBQUEsWUFDUjlMLEtBQUs2TDtBQUFBQTtBQUFBQTtBQUFBQTtBQUtYbkYsYUFBTzJGLFdBQVc7QUFFbEIzRixhQUFPNUUsU0FBUztBQUFBLFFBQ2Q2RCxXQUFXO0FBQUE7QUFBQTtBQUlmK0YsYUFBUzNHLEdBQUcsYUFBYSxTQUFVL0UsS0FBSztVQUNsQ3NNLGdCQUFnQjVGLE9BQU90YSxPQUN2QjZHLFNBQVFxWixjQUFjclosT0FDdEI2TSxNQUFNd00sY0FBY3hNO1VBQ3BCSyxXQUFXO1VBQ1hDLFNBQVM7VUFFVCxDQUFDc0csT0FBT3hFLE1BQU15RCxXQUFXO0FBQzNCNEcsZUFBTzdGLE9BQU90YSxNQUFNb2dCLGVBQWUsQ0FBQ3hNO0FBQ3BDMEcsZUFBTzJGLFdBQVc7QUFBQSxVQUNoQnhNLEdBQUdHLElBQUlIO0FBQUFBLFVBQ1A5akIsR0FBR2lrQixJQUFJamtCO0FBQUFBO0FBQUFBO1VBSVAydkIsU0FBU3JKLFdBQVdRLE9BQU87WUFDekI0SixVQUFVNUcsbUJBQWlCaEQ7WUFFM0I2SixxQkFBcUJDLG9CQUFrQmpHLE9BQU8yRixVQUFVSSxTQUFTek0sS0FBSy9NLE9BQU16QyxRQUFRc1A7QUFFeEZLLG1CQUFXdU0sbUJBQW1Cdk07QUFDOUJDLGlCQUFTc00sbUJBQW1CdE07QUFBQUE7QUFHOUJzRyxhQUFPNUUsU0FBUztBQUFBLFFBQ2Q2RCxXQUFXO0FBQUEsUUFDWHhGO0FBQUFBLFFBQ0FDO0FBQUFBO0FBQUFBO0FBR0pzTCxhQUFTM0csR0FBRyxnQkFBZ0IsU0FBVS9FLEtBQUs7VUFDckMwRyxPQUFPdGEsTUFBTXVlLGVBQWU7QUFBZ0I7YUFDekMsQ0FBQ29CLFVBQVFOLDhDQUFZL0UsU0FBUzFHO0FBQUFBO0FBRXZDMEwsYUFBUzNHLEdBQUcsU0FBUyxTQUFVOEcsT0FBTzthQUM3QkQsc0JBQXNCQyxPQUFPO0FBQUE7QUFFdENILGFBQVMzRyxHQUFHLGVBQWUsU0FBVThHLE9BQU87YUFDbkNELHNCQUFzQkMsT0FBTztBQUFBO0FBRXRDSCxhQUFTM0csR0FBRyxVQUFVLFNBQVU5QixRQUFRO0FBQ3RDeUQsYUFBT3lGLFlBQVkxdEIsV0FBUyxJQUFJaW9CLE9BQU94RSxPQUFPO0FBQUEsUUFDNUNrSyxRQUFRO0FBQUEsUUFDUm5KO0FBQUFBO0FBR0Z5RCxhQUFPMkYsV0FBVztBQUVsQjNGLGFBQU81RSxTQUFTO0FBQUEsUUFDZDZELFdBQVc7QUFBQTtBQUdiNEcsYUFBTzdGLE9BQU90YSxNQUFNd2dCLGFBQWEsQ0FBQ2xHLE9BQU94RTtBQUFBQTtBQUFBQTtBQUk3QzVFLFNBQU93TixzQkFBc0IsK0JBQStCO1FBQ3RELENBQUMsS0FBS2E7QUFBVztTQUVoQkEsVUFBVXRHO1NBRVZzRyxZQUFZO0FBQUE7QUFHbkJyTyxTQUFPNk8sY0FBYyxxQkFBcUJ0VCxNQUFNO1FBQzFDdUgsU0FBU3ZILEtBQUt1SCxRQUNkRCxXQUFXdEgsS0FBS3NILFVBQ2hCaU0sU0FBU3ZULEtBQUt1VCxRQUNkbkosU0FBU3BLLEtBQUtvSyxRQUNkakQsTUFBTW5ILEtBQUttSDtRQUNYSSxXQUFXLE1BQU1ELGFBQWE7QUFBSSxXQUFLL1QsTUFBTXlnQixnQkFBZ0IsS0FBS3pnQixNQUFNeWdCLGFBQWE7QUFBQSxRQUN2Ri9WLE9BQU9xSjtBQUFBQSxRQUNQcEosS0FBS3FKO0FBQUFBLFFBQ0xnTTtBQUFBQSxRQUNBbko7QUFBQUEsUUFDQWpEO0FBQUFBLFFBQ0E4TSxZQUFZLEtBQUsxZ0IsTUFBTTBnQjtBQUFBQTtBQUFBQTtTQUlwQnJDO0FBQUFBLEVBQ1B2ZSxNQUFNbVQ7QUFFUm9MLGdCQUFnQjNhLFlBaUJaO0FBSUosSUFBSWlkLGtCQUFnQjtBQUFBLEVBQ2xCamQsV0FBVztBQUFBLElBQ1RrZCxhQUFhamQsVUFBVU8sT0FBT0Y7QUFBQUEsSUFDOUJ1TixVQUFVNU4sVUFBVU87QUFBQUEsSUFDcEJzTixVQUFVN04sVUFBVUM7QUFBQUEsSUFDcEJrTyxXQUFXbk8sVUFBVU8sT0FBT0Y7QUFBQUEsSUFDNUIwRixXQUFXL0YsVUFBVU8sT0FBT0Y7QUFBQUEsSUFDNUJpTyxZQUFZdE8sVUFBVU8sT0FBT0Y7QUFBQUEsSUFDN0IrTixTQUFTcE8sVUFBVU8sT0FBT0Y7QUFBQUEsSUFDMUJ5TixVQUFVOU4sVUFBVUk7QUFBQUEsSUFDcEI0TixlQUFlaE8sVUFBVUk7QUFBQUEsSUFDekI4TixZQUFZbE8sVUFBVUk7QUFBQUE7QUFBQUEsRUFFeEI4YyxjQUFjO0FBQUEsSUFDWkMsVUFBVTtBQUFBLElBQ1Z2UCxVQUFVO0FBQUE7QUFBQSxFQUVad1AsYUFBYSxxQkFBcUIvZ0IsT0FBTzJOLE9BQU87UUFDMUM0RCxXQUFXdlIsTUFBTXVSO0FBQ2J2UixVQUFNd1I7UUFDVk0sYUFBWTlSLE1BQU04UixXQUNsQkMsVUFBVS9SLE1BQU0rUixTQUNoQk4sV0FBV3pSLE1BQU15UixVQUNqQkUsZ0JBQWdCM1IsTUFBTTJSLGVBQ3RCRSxhQUFhN1IsTUFBTTZSLFlBQ25CbkksWUFBWTFKLE1BQU0wSixXQUNsQmtYLGNBQWM1Z0IsTUFBTTRnQixhQUNwQjNPLGFBQWFqUyxNQUFNaVMsWUFDbkJNLFlBQVl2UyxNQUFNdVM7UUFDbEJsRCxrQkFBaUJ1UixZQUFZdlIsZUFBZTFCO1FBQzVDMkIsa0JBQWlCc1IsWUFBWXRSLGVBQWUzQjs7Ozs7aUJBS25DbUU7QUFBQUE7Ozs7c0JBS0t6QztBQUFBQSxzQkFDQUM7QUFBQUEsaUJBQ0xzUixZQUFZeFU7QUFBQUEsZUFDZHdVLFlBQVkxVztBQUFBQSxnQkFDWCtMLGFBQVd0SSxPQUFPNEQ7QUFBQUE7OztFQUloQ3lQLFlBQVksb0JBQW9CNU4sT0FBTzZOLEtBQUtqWSxLQUFLNkosU0FBUztRQUNwREEsWUFBWSxRQUFRO0FBQ3RCQSxnQkFBVTtBQUFBO1FBR1JxTyxNQUFNalcsS0FBS0MsSUFBSStWLE9BQU83TixRQUFRLE1BQU07O2lCQUczQjtBQUFBLGFBRUo7QUFBQSxRQUNMK04saUJBQWlCRDtBQUFBQSxRQUNqQkUsV0FBV0Y7QUFBQUEsUUFDWEcsVUFBVUg7QUFBQUE7QUFBQUEsZ0JBRVhyTztBQUFBQSxPQVJJN0o7QUFBQUE7QUFBQUE7QUFZWCxJQUFJc1ksYUFBd0IseUJBQVV0USxrQkFBa0I7QUFDdERDLGlCQUFlcVEsV0FBVXRRO3VCQUVMO1dBQ1hBLGlCQUFpQjdPLE1BQU0sTUFBTUMsY0FBYztBQUFBO01BR2hEOE8sU0FBU29RLFVBQVNuUTtBQUV0QkQsU0FBT0UsU0FBUyxrQkFBa0I7UUFDNUIzQyxRQUFRO1FBRVI0QyxjQUFjLEtBQUtyUixPQUNuQjhnQixXQUFXelAsWUFBWXlQLFVBQ3ZCMU4sUUFBUS9CLFlBQVl1UCxZQUFZeE4sT0FDaEM5QixZQUFZRCxZQUFZQztRQUN4QmlRLFVBQVU7O2lCQUVEeE8sS0FBS3pCLFdBQVc7QUFBQSxnQkFDMUJ3UCxTQUFTVSxPQUFPLFNBQVVDLEtBQUtoVixNQUFNaVYsS0FBSTtZQUN0Qy9ULFFBQVFsQixLQUFLa0IsT0FDYjRGLFFBQU85RyxLQUFLOEcsTUFDWkQsU0FBUTdHLEtBQUs2RyxPQUNicU8sT0FBT2xWLEtBQUtrVjtZQUNaM1ksTUFBTSxVQUFVMFk7WUFDaEJFLE1BQU1yTyxRQUFPZ087WUFDYjFPLFVBQVU4TixnQkFBY0ksWUFBWXRTLE1BQU16TyxPQUFPMk47WUFDakRpVTtBQUFLSCxjQUFJblgsS0FBS3FXLGdCQUFjSyxXQUFXNU4sT0FBT3dPLEtBQUs1WSxNQUFNO0FBQzdEeVksWUFBSW5YLEtBQUtxVyxnQkFBY0ssV0FBVzVOLE9BQU91TyxNQUFNM1ksS0FBSzZKO0FBQ3BEME8sa0JBQVVqTyxTQUFRO2VBQ1htTztBQUFBQSxTQUNOO0FBQUE7QUFBQTtTQUdFSDtBQUFBQSxFQUNQeGhCLE1BQU1tVDtBQUVScU8sV0FBUzVkLFlBRXFCO0FBQzlCNGQsV0FBU1QsZUFBZXh1QixXQUFTLElBQUlzdUIsZ0JBQWNFO0FBRW5ELHNCQUFvQnBVLE1BQU07TUFDcEJvVixZQUFZcFYsS0FBS29WLFdBQ2pCQyxZQUFZclYsS0FBS2pDLE1BQ2pCQSxPQUFPc1gsY0FBYyxTQUFTLFFBQVFBLFdBQ3RDcFksWUFBWStDLEtBQUsvQztTQUNkO0FBQUEsSUFDTDBDLE9BQU95VixVQUFVO0FBQUEsSUFDakIzWCxNQUFNUixVQUFVYSxJQUFJc1gsVUFBVUEsVUFBVXpkLFNBQVMsSUFBSSxHQUFHb0c7QUFBQUE7QUFBQUE7QUFLNUQseUJBQXVCbUQsT0FBTzlHLFFBQU9pTCxZQUFXcEksV0FBVztNQUNyRHFZLGNBQWNDLGFBQVc7QUFBQSxJQUMzQkgsV0FBV2hiO0FBQUFBLElBQ1g2QztBQUFBQSxNQUVFMEMsUUFBUTJWLFlBQVkzVixPQUNwQmxDLFFBQU82WCxZQUFZN1g7TUFFbkJrSixRQUFRMUosVUFBVXVDLEtBQUtHLE9BQU9sQyxPQUFNO01BQ3BDUSxTQUFRaEIsVUFBVWxMLElBQUlrTCxVQUFVRSxRQUFRa0ksV0FBVXBILE1BQU1pRCxRQUFRLFFBQVF2QjtNQUN4RXpCLE9BQU1qQixVQUFVbkwsSUFBSW1MLFVBQVU2RCxLQUFLdUUsV0FBVW5ILElBQUlnRCxRQUFRLFFBQVF6RDtNQUNqRStYLFVBQVVDLFlBQVVyYixRQUFPLFNBQVU0TSxJQUFHO1dBQ25DL0osVUFBVStGLFdBQVdnRSxJQUFHL0k7QUFBQUE7TUFFN0JpWCxPQUFPalksVUFBVXVDLEtBQUt2QixRQUFPQyxNQUFLO0FBQ3RDZ1gsU0FBTzFXLEtBQUsxTSxJQUFJb2pCLE1BQU12TztBQUd0QnVPLFNBQU8xVyxLQUFLek0sSUFBSW1qQixPQUFPalksVUFBVWlHLGVBQWU7U0FDekM7QUFBQSxJQUNMaEM7QUFBQUEsSUFDQWdVO0FBQUFBLElBQ0FwTyxNQUFNME8sVUFBVTtBQUFBLElBQ2hCM08sT0FBT3JJLEtBQUt6TSxJQUFJeWpCLFVBQVVOLE1BQU07QUFBQTtBQUFBO0FBR3BDLHVCQUFxQlEsYUFBYUMsT0FBTztNQUNuQ0EsVUFBVSxRQUFRO0FBQ3BCQSxZQUFRQztBQUFBQTtNQUdOQyxHQUNBQyxHQUNBQyxLQUNBQyxTQUFTLElBQ1RDLFFBQVE7T0FFUEosSUFBSSxHQUFHQSxJQUFJSCxZQUFZL2QsUUFBUWtlLEtBQUs7QUFDdkNFLFVBQU1MLFlBQVlHO1NBRWJDLElBQUksR0FBR0EsSUFBSUUsT0FBT3JlLFFBQVFtZSxLQUFLO1VBQzlCLENBQUNJLGNBQVlILEtBQUtDLE9BQU9GO0FBQUs7QUFBQTtRQUdoQ0EsS0FBS0gsT0FBTztBQUNkTSxZQUFNcFksS0FBS2tZO0FBQUFBLFdBQ047TUFDSkMsUUFBT0YsTUFBT0UsUUFBT0YsS0FBSyxLQUFLalksS0FBS2tZO0FBQUFBO0FBQUFBO09BSXBDRixJQUFJLEdBQUdBLElBQUlHLE9BQU9yZSxRQUFRa2UsS0FBSztBQUNsQ0csV0FBT0gsR0FBR00sS0FBSyxTQUFVQyxHQUFHQyxHQUFHO2FBQ3RCRCxFQUFFdFAsT0FBT3VQLEVBQUV2UDtBQUFBQTtBQUFBQTtTQUlmO0FBQUEsSUFDTGtQO0FBQUFBLElBQ0FDO0FBQUFBO0FBQUFBO0FBR0osbUJBQWlCMVAsR0FBR3RJLFFBQU9DLE1BQUttSCxZQUFXcEksV0FBVztNQUNoRGlFLFFBQVE7QUFBQSxJQUNWakQsT0FBT29ILFdBQVVwSCxNQUFNc0k7QUFBQUEsSUFDdkJySSxLQUFLbUgsV0FBVW5ILElBQUlxSTtBQUFBQTtNQUVqQm5NLFNBQVE7QUFBQSxJQUNWNkQsT0FBT0E7QUFBQUEsSUFDUEMsS0FBS0E7QUFBQUE7U0FFQWpCLFVBQVU4RixhQUFhO0FBQUEsSUFDNUI3QjtBQUFBQSxJQUNBOUcsT0FBT0E7QUFBQUE7QUFBQUE7QUFHWCx1QkFBcUIyYixLQUFLTyxXQUFXO1NBQzVCQSxVQUFVQyxLQUFLLFNBQVVDLFVBQVU7V0FDakNBLFNBQVMxUCxRQUFRaVAsSUFBSWxQLFNBQVMyUCxTQUFTM1AsU0FBU2tQLElBQUlqUDtBQUFBQTtBQUFBQTtBQUcvRCx3QkFBc0IyUCxRQUFRQyxRQUFRclIsWUFBV3BJLFdBQVc7TUFDdERpRCxPQUFPO0FBQUEsSUFDVGpDLE9BQU9vSCxXQUFVcEgsTUFBTXdZO0FBQUFBLElBQ3ZCdlksS0FBS21ILFdBQVVuSCxJQUFJdVk7QUFBQUEsSUFDbkJuVyxRQUFRK0UsV0FBVS9FLE9BQU9tVztBQUFBQTtNQUV2QmpXLE9BQU87QUFBQSxJQUNUdkMsT0FBT29ILFdBQVVwSCxNQUFNeVk7QUFBQUEsSUFDdkJ4WSxLQUFLbUgsV0FBVW5ILElBQUl3WTtBQUFBQSxJQUNuQnBXLFFBQVErRSxXQUFVL0UsT0FBT29XO0FBQUFBO1NBRXBCelosVUFBVTZGLFdBQVc7QUFBQSxJQUMxQjVDO0FBQUFBLElBQ0FNO0FBQUFBO0FBQUFBO0FBSUosSUFBSW1XLGtCQUFrQiwwQkFBeUJaLEtBQUthLE1BQU07U0FDakRiLElBQUlqUCxRQUFROFAsUUFBUWIsSUFBSWxQLFNBQVMrUDtBQUFBQTtBQUcxQyxJQUFJQyxlQUFlLHVCQUFzQnhDLFVBQVV1QyxNQUFNO1NBQ2hEdkMsU0FBU3BILE9BQU8sU0FBVThJLEtBQUs7V0FDN0JZLGdCQUFnQlosS0FBS2E7QUFBQUEsS0FDM0JqZjtBQUFBQTtBQUdMLElBQUltZixpQkFBOEIseUJBQVV2UyxrQkFBa0I7QUFDNURDLGlCQUFlc1MsaUJBQWdCdlM7NkJBRUw7V0FDakJBLGlCQUFpQjdPLE1BQU0sTUFBTUMsY0FBYztBQUFBO01BR2hEOE8sU0FBU3FTLGdCQUFlcFM7QUFFNUJELFNBQU9FLFNBQVMsa0JBQWtCO1FBQzVCQyxjQUFjLEtBQUtyUixPQUNuQjhnQixXQUFXelAsWUFBWXlQLFVBQ3ZCMU4sUUFBUS9CLFlBQVl1UCxZQUFZeE47UUFDaEMrTyxjQUFjcUIsY0FBWTFDLFVBQVUyQixPQUFPO1FBQzNDelksVUFBVSxHQUNWdVgsVUFBVSxHQUNWRSxNQUFNO1dBRUh6WCxXQUFXb0osT0FBTztVQUNuQnBLLE1BQU0sVUFBVWdCO1VBRWhCeUMsT0FBTzBWLFlBQVl6SSxPQUFPLFNBQVU4SSxLQUFLO2VBQ3BDWSxnQkFBZ0JaLEtBQUt4WTtBQUFBQSxTQUMzQixNQUFNLElBQ0wyRCxRQUFRbEIsS0FBS2tCLE9BQ2I0RixRQUFPOUcsS0FBSzhHLE1BQ1pELFNBQVE3RyxLQUFLNkcsT0FDYnFPLE9BQU9sVixLQUFLa1Y7VUFHWixDQUFDaFUsT0FBTztBQUNWM0Q7OztVQUlFNFgsTUFBTTNXLEtBQUt6TSxJQUFJLEdBQUcrVSxRQUFPZ087VUFFekIsS0FBS2tDLG1CQUFtQmxRLE9BQU1vTyxPQUFPO1lBQ25DOU8sVUFBVThOLGdCQUFjSSxZQUFZLEtBQUsvZ0IsT0FBTzJOO1lBRWhEaVUsS0FBSztBQUNQSCxjQUFJblgsS0FBS3FXLGdCQUFjSyxXQUFXNU4sT0FBT3dPLEtBQUs1WSxNQUFNO0FBQUE7QUFHdER5WSxZQUFJblgsS0FBS3FXLGdCQUFjSyxXQUFXNU4sT0FBT3VPLE1BQU0zWSxLQUFLNko7QUFDcEQwTyxrQkFBVXZYLFVBQVVzSixTQUFRO0FBQUEsYUFDdkI7WUFDRHNPLEtBQUs7QUFDUEgsY0FBSW5YLEtBQUtxVyxnQkFBY0ssV0FBVzVOLE9BQU93TyxLQUFLNVksTUFBTTtBQUFBO0FBR3REeVksWUFBSW5YLEtBQUtxVyxnQkFBY0ssV0FBVzVOLE9BQU8sR0FBR3BLLEtBQUssS0FBSzBhLGVBQWU1QyxVQUFVOVc7QUFDL0V1WCxrQkFBVXZYLFVBQVVBLFVBQVU7QUFBQTtBQUFBOztpQkFLckI7QUFBQSxnQkFDVnlYO0FBQUFBO0FBQUFBO0FBR0x2USxTQUFPdVMscUJBQXFCLDRCQUE0QkosTUFBTTFCLE1BQU07UUFDOURiLFdBQVcsS0FBSzlnQixNQUFNOGdCO1dBQ25CNkMsVUFBUU4sTUFBTUEsT0FBTzFCLE1BQU1pQyxNQUFNLFNBQVVDLEdBQUc7VUFDL0NDLFFBQVFSLGFBQWF4QyxVQUFVK0M7YUFDNUJDLFVBQVU7QUFBQTtBQUFBO0FBSXJCNVMsU0FBT3dTLGlCQUFpQix3QkFBd0I1QyxVQUFVdUMsTUFBTTtRQUMxRDVVLFFBQVE7UUFFUi9FLFlBQVksS0FBSzFKLE1BQU0wSjtRQUN2Qm9hLFFBQVFSLGFBQWF4QyxVQUFVdUM7V0FDNUJTO1lBRUM7QUFBQSxpQkFDSztBQUFBLGVBQ0YsaUJBQWlCOVEsR0FBRztlQUNwQnZFLE1BQU1rQyxTQUFTMFMsTUFBTXJRO0FBQUFBO0FBQUFBLGdCQUU3QnRKLFVBQVVvRyxTQUFTYSxTQUFTbVQ7QUFBQUEsT0FOeEIsUUFBUVQsUUFNMEI7QUFBQTtBQUczQ25TLFNBQU9QLFdBQVcsbUJBQWtCMFMsTUFBTXJRLEdBQUc7QUFDM0NBLE1BQUUwSDtBQUNGMUgsTUFBRStRO1NBQ0cvakIsTUFBTWdrQixXQUFXWCxNQUFNclEsRUFBRTVSO0FBQUFBO1NBR3pCbWlCO0FBQUFBLEVBQ1B6akIsTUFBTW1UO0FBRVJzUSxlQUFlN2YsWUFJZTtBQUM5QjZmLGVBQWUxQyxlQUFleHVCLFdBQVMsSUFBSXN1QixnQkFBY0U7QUFFekQsSUFBSW9ELHdCQUF3QixnQ0FBK0J4WCxNQUFNO01BQzNEM0osV0FBVzJKLEtBQUszSjs7ZUFFUDtBQUFBOzs7QUFJZixJQUFJb2hCLG9CQUFvQiwwQkFBeUIxQixLQUFLYSxNQUFNO1NBQ25EYixJQUFJalAsUUFBUThQLFFBQVFiLElBQUlsUCxTQUFTK1A7QUFBQUE7QUFHMUMsSUFBSXZjLFlBQVUsa0JBQWlCK2IsR0FBR0MsR0FBRztTQUM1QkQsRUFBRSxHQUFHaGMsVUFBVWljLEVBQUUsR0FBR2pjLFNBQVNnYyxFQUFFLEdBQUdqTixXQUFXa04sRUFBRSxHQUFHbE47QUFBQUE7QUFHM0QsMEJBQTBCO1NBQ2pCelEsV0FBUSxTQUFVZ2YsVUFBUztRQUM1QnRkLFNBQVFzZCxTQUFRdGQsT0FDaEIrTyxTQUFTdU8sU0FBUXZPLFFBQ2pCd08sVUFBVUQsU0FBUUMsU0FDbEJDLFVBQVVGLFNBQVFFLFNBQ2xCdlMsYUFBWXFTLFNBQVFyUyxXQUNwQnBJLFlBQVl5YSxTQUFRemE7UUFFcEJxWSxjQUFjQyxhQUFXO0FBQUEsTUFDM0JILFdBQVdoYjtBQUFBQSxNQUNYNkM7QUFBQUEsUUFFRTBDLFFBQVEyVixZQUFZM1YsT0FDcEJsQyxRQUFPNlgsWUFBWTdYO1FBRW5CNFcsV0FBV2xMLE9BQU9uTixJQUFJLFNBQVU2YixLQUFLO2FBQ2hDQyxnQkFBY0QsS0FBS3pkLFFBQU9pTCxZQUFXcEk7QUFBQUE7UUFHMUM4YSxlQUFlaEIsY0FBWTFDLFVBQVU3VixLQUFLek0sSUFBSTRsQixVQUFVLEdBQUcsS0FDM0QzQixTQUFTK0IsYUFBYS9CLFFBQ3RCQyxRQUFROEIsYUFBYTlCO1dBRWxCRCxPQUFPcmUsU0FBU2lnQixTQUFTO0FBQzlCNUIsYUFBT25ZLEtBQUs7QUFBQTtXQUdQO0FBQUEsTUFDTDhCO0FBQUFBLE1BQ0FsQyxNQUFNQTtBQUFBQSxNQUNOdVk7QUFBQUEsTUFDQUM7QUFBQUEsTUFDQTdiLE9BQU9BO0FBQUFBLE1BQ1B1TSxPQUFPdk0sT0FBTXpDO0FBQUFBLE1BQ2JxZ0IsT0FBTyxlQUFlcGdCLE1BQU07WUFDdEJxZ0IsVUFBVUM7ZUFDUEQsUUFBUXJ5QixXQUFTLElBQUk4eEIsVUFBUzlmO0FBQUFBO0FBQUFBLE1BRXZDdWdCLGdCQUFnQix3QkFBd0JDLFlBQVk7ZUFDM0NoZSxPQUFNZ2U7QUFBQUE7QUFBQUEsTUFFZkMsZ0JBQWdCLHdCQUF3QnJiLE9BQU07ZUFDckM1QyxPQUFNa2UsS0FBSyxTQUFVaDJCLElBQUc7aUJBQ3RCMmEsVUFBVStGLFdBQVcxZ0IsSUFBRzBhO0FBQUFBO0FBQUFBO0FBQUFBLE1BR25DdWIsa0JBQWtCLDBCQUEwQjNCLE1BQU07ZUFDekN2QyxTQUFTcEgsT0FBTyxTQUFVOEksS0FBSztpQkFDN0IwQixrQkFBa0IxQixLQUFLYTtBQUFBQSxXQUM3QjVhLElBQUksU0FBVStaLEtBQUs7aUJBQ2JBLElBQUk3VTtBQUFBQTtBQUFBQTtBQUFBQSxNQUdmMEIsZ0JBQWdCLHlCQUF3QjFCLE9BQU87ZUFDdENqRSxVQUFVMkYsZUFBZXlDLFdBQVVwSCxNQUFNaUQsUUFBUXZCO0FBQUFBO0FBQUFBLE1BRTFEa0QsZ0JBQWdCLHlCQUF3QjNCLE9BQU87WUFDekNqRCxTQUFRb0gsV0FBVXBILE1BQU1pRDtZQUN4QmhELE9BQU1tSCxXQUFVbkgsSUFBSWdEO2VBQ2pCakUsVUFBVTRGLGVBQWU1RSxRQUFPQyxNQUFLVDtBQUFBQTtBQUFBQTtBQUFBQSxLQUcvQ3BEO0FBQUFBO0FBR0wsSUFBSW1lLGlCQUE4Qix5QkFBVWpVLGtCQUFrQjtBQUM1REMsaUJBQWVnVSxpQkFBZ0JqVTs2QkFFTDtRQUNwQnZDO2FBRUt0SyxPQUFPL0IsVUFBVWdDLFFBQVFDLE9BQU8sSUFBSUMsTUFBTUgsT0FBT0ksT0FBTyxHQUFHQSxPQUFPSixNQUFNSSxRQUFRO0FBQ3ZGRixXQUFLRSxRQUFRbkMsVUFBVW1DO0FBQUFBO0FBR3pCa0ssWUFBUXVDLGlCQUFpQnRGLEtBQUt2SixNQUFNNk8sa0JBQWtCLENBQUMsTUFBTXZNLE9BQU9KLFVBQVU7QUFFOUVvSyxVQUFNeVcsbUJBQW1CLFNBQVU3QixNQUFNO1VBQ25DaFMsY0FBYzVDLE1BQU16TyxPQUNwQjZHLFNBQVF3SyxZQUFZeEssT0FDcEI0WixlQUFlcFAsWUFBWW9QO0FBQy9CQSxtQkFBYTVaLE9BQU1zZSxNQUFNOUIsS0FBSzNZLE9BQU8yWSxLQUFLMVksTUFBTSxJQUFJMFk7QUFBQUE7QUFHdEQ1VSxVQUFNMlcsaUJBQWlCLFNBQVUvQixNQUFNamlCLFFBQVE7VUFDekN1VSxlQUFlbEgsTUFBTXpPLE9BQ3JCNkcsU0FBUThPLGFBQWE5TyxPQUNyQm1kLGFBQWFyTyxhQUFhcU87VUFFMUJVLFVBQVVqVyxNQUFNbVMsWUFBWW5TLE1BQU16TztVQUVsQ3loQixNQUFNNEQsSUFBSWhHLDhDQUFZaUcsdUJBQXVCN1csU0FBUyxlQUFlO1VBQ3JFOFc7VUFDQTlEO0FBQUs4RCxlQUFPOUQsSUFBSTNlLFNBQVN1Z0IsT0FBTztVQUNoQ3pOLFNBQVM4TyxRQUFRTSxpQkFBaUIzQjtBQUN0Q1csaUJBQVdwTyxRQUFRL08sT0FBTXdjLE9BQU8sSUFBSWtDLE1BQU1sQyxNQUFNamlCO0FBQUFBO0FBR2xEcU4sVUFBTStXLG1CQUFtQixTQUFVejJCLElBQUc7QUFDcEMwZixZQUFNZ1gsYUFBYTEyQjtBQUFBQTtBQUdyQjBmLFVBQU1pWCxpQkFBaUIsU0FBVTMyQixJQUFHO0FBQ2xDMGYsWUFBTWtYLFdBQVc1MkI7QUFBQUE7QUFHbkIwZixVQUFNbVgsZUFBZSxXQUFZO1VBQzNCMWtCLFlBQVl1TixNQUFNek8sTUFBTWtCO2FBQ3JCQSxZQUFZQSxjQUFjbWUsOENBQVlpRyx1QkFBdUI3VztBQUFBQTtBQUd0RUEsVUFBTW9YLG9CQUFvQixTQUFVcGMsT0FBTXlWLE9BQU87VUFDM0M0RyxlQUFlclgsTUFBTXpPLE9BQ3JCK2xCLGVBQWVELGFBQWFDLGNBQzVCbEgsVUFBU2lILGFBQWFqSCxRQUN0Qm5WLFlBQVlvYyxhQUFhcGM7YUFDdEJxYyxhQUFhO0FBQUEsUUFDbEJ0YyxNQUFNQTtBQUFBQSxRQUNOVCxLQUFLLFlBQVlrVztBQUFBQSxRQUNqQjVOLFdBQVd5QixLQUFLLGlCQUFpQnJKLFVBQVUrRixXQUFXaEcsT0FBTW9WLGNBQWE7QUFBQTtBQUFBO0FBSTdFcFEsVUFBTXVYLGNBQWMsV0FBWTtVQUMxQkMsZUFBZXhYLE1BQU16TyxPQUNyQnNSLFlBQVkyVSxhQUFhM1UsV0FDekJ6SyxTQUFRb2YsYUFBYXBmLE9BQ3JCa2YsZUFBZUUsYUFBYUYsY0FDNUJHLGdCQUFnQkQsYUFBYUM7Ozs7cUJBSXBCblQsS0FBSyxtQkFBbUJtVCxpQkFBaUI7QUFBQSxxQkFDbkRIO3VCQUNVO0FBQUEsaUJBQ050WCxNQUFNK1c7QUFBQUEsc0JBQ1YzZSxPQUFNNEIsSUFBSWdHLE1BQU1vWDtBQUFBQTt1QkFDTjtBQUFBLGlCQUNOcFgsTUFBTWlYO0FBQUFBO3lCQUVBO0FBQUE7MkJBRUE7QUFBQTs2QkFFQTtBQUFBOzs7Ozs7OztBQUlmalgsVUFBTW1TLGNBQWMrRDtXQUNibFc7QUFBQUE7TUFHTHlDLFNBQVMrVCxnQkFBZTlUO0FBRTVCRCxTQUFPaVYsY0FBYyx1QkFBdUI7UUFDdENDLGNBQWNDLE9BQVUsS0FBS1Y7UUFDN0JXLGdCQUFnQixLQUFLYixhQUFhWSxPQUFVLEtBQUtaLGNBQWM7UUFDL0RjLGFBQWFGLE9BQVVoSCw4Q0FBWSxTQUFTaUg7V0FDekNyYixLQUFLek0sSUFBSXlNLEtBQUtSLE1BQU04YixhQUFhSCxjQUFjO0FBQUE7QUFHeERsVixTQUFPRSxTQUFTLGtCQUFrQjtRQUM1Qm9WLGVBQWUsS0FBS3htQixPQUNwQnlKLFFBQU8rYyxhQUFhL2MsTUFDcEJpSyxNQUFNOFMsYUFBYTlTLEtBQ25CN00sU0FBUTJmLGFBQWEzZixPQUNyQnlLLFlBQVlrVixhQUFhbFYsV0FDekJDLFdBQVdpVixhQUFhalYsVUFDeEJnTixhQUFhaUksYUFBYWpJLFlBQzFCa0ksbUJBQW1CRCxhQUFhQyxrQkFDaEMzVSxhQUFZMFUsYUFBYTFVLFdBQ3pCQyxVQUFVeVUsYUFBYXpVLFNBQ3ZCRSxhQUFhdVUsYUFBYXZVLFlBQzFCNE0sVUFBUzJILGFBQWEzSCxRQUN0QmtILGVBQWVTLGFBQWFULGNBQzVCdFUsV0FBVytVLGFBQWEvVSxVQUN4Qi9ILFlBQVk4YyxhQUFhOWMsV0FDekIwVyxnQkFBZ0JvRyxhQUFhcEcsZUFDN0JJLGNBQWNnRyxhQUFhaEcsYUFDM0I3TyxnQkFBZ0I2VSxhQUFhN1UsZUFDN0JFLGFBQWEyVSxhQUFhM1UsWUFDMUI2TyxhQUFhOEYsYUFBYTlGLFlBQzFCakoscUJBQXFCK08sYUFBYS9PLG9CQUNsQ2pHLFdBQVdnVixhQUFhaFYsVUFDeEJlLFlBQVlpVSxhQUFhalUsV0FDekIyVCxnQkFBZ0JNLGFBQWFOO1FBQzdCTztBQUFrQixhQUFPLEtBQUtUO1FBQzlCdEIsVUFBVSxLQUFLOUQsWUFBWSxLQUFLNWdCO1FBQ2hDeWlCLFNBQVNpQyxRQUFRakMsUUFDakJDLFFBQVFnQyxRQUFRaEM7UUFDaEJnRSwwQkFBMEJSLGdCQUFnQmpDLHdCQUF3QjBDO1FBQ2xFQyxlQUFjM1UsV0FBVzRVO1FBQ3pCQyxnQkFBZ0I7QUFBQSxNQUNsQnZWO0FBQUFBLE1BQ0FPLFdBQVdBO0FBQUFBLE1BQ1hDO0FBQUFBLE1BQ0FySTtBQUFBQSxNQUNBdUk7QUFBQUEsTUFDQVI7QUFBQUEsTUFDQUU7QUFBQUEsTUFDQUU7QUFBQUEsTUFDQTZPO0FBQUFBLE1BQ0FFLGFBQWE4RDtBQUFBQSxNQUNiblM7QUFBQUE7OztZQUlNO0FBQUE7O2NBR0E5STtBQUFBQSxnQkFDRW9WO0FBQUFBO2VBRURoWTtBQUFBQTttQkFFSSxLQUFLK2U7QUFBQUE7OztzQkFJRixLQUFLVjtBQUFBQTs7OzttQkFLUm5TLEtBQUssbUJBQW1CbVQsaUJBQWlCO0FBQUEsY0FDOUM7QUFBQSxtQkFDTEg7cUJBQ1U7QUFBQSxlQUNOLEtBQUtQO0FBQUFBLG9CQUNUM2UsT0FBTTRCLElBQUksS0FBS29kO0FBQUFBOzs7YUFFZmlCO3VCQUFnQnJFLE9BQU9oYSxJQUFJLFNBQVVzZSxNQUFNL1EsS0FBSzs7MEJBR3JDK1E7QUFBQUEsaUJBQ1RELGdCQUZJOVE7QUFBQUEsZ0JBR0wsQ0FBQyxDQUFDME0sTUFBTXRlO3dCQUNBc2U7QUFBQUEsMEJBQ0UsS0FBSzBDO0FBQUFBLGVBQ2hCMEI7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7U0FHRTdCO0FBQUFBLEVBQ1BubEIsTUFBTW1UO0FBRVJnUyxlQUFldmhCLFlBOEJYO0FBQ0p1aEIsZUFBZXBFLGVBQWU7QUFBQSxFQUM1QndELFNBQVM7QUFBQSxFQUNURCxTQUFTL0I7QUFBQUE7QUFHWCxJQUFJMkUsU0FBUyxpQkFBZ0J2YSxNQUFNO01BQzdCd2EsUUFBUXhhLEtBQUt3YTs7VUFFVDtBQUFBLGlCQUNPO0FBQUEsY0FDWkE7QUFBQUE7QUFBQUE7QUFHTEQsT0FBT3RqQixZQUVIO0FBRUosSUFBSXdqQixhQUFhLHFCQUFvQnphLE1BQU07TUFDckN3YSxRQUFReGEsS0FBS3dhLE9BQ2JFLGdCQUFnQjFhLEtBQUswYSxlQUNyQkMsY0FBYzNhLEtBQUsyYTtNQUVuQixDQUFDRCxlQUFlOztnQkFDb0NGO0FBQUFBO0FBQUFBOztVQUloRDtBQUFBLGFBQ0dHO0FBQUFBLFVBQ0g7QUFBQSxjQUNMSDtBQUFBQTtBQUFBQTtBQUdMQyxXQUFXeGpCLFlBTVA7QUFFSixJQUFJMmpCLGdCQUFjLENBQUMsUUFBUTtBQUUzQixJQUFJQyxnQkFBZ0Isd0JBQXVCQyxNQUFNN2MsUUFBT0MsTUFBS21ILFlBQVdwSSxXQUFXO1NBQzFFNmQsS0FBSzdOLE9BQU8sU0FBVTFHLEdBQUc7V0FDdkJqRSxVQUFRaUUsR0FBR3RJLFFBQU9DLE1BQUttSCxZQUFXcEk7QUFBQUE7QUFBQUE7QUFJN0MsSUFBSThkLFlBQXlCLHlCQUFVeFcsa0JBQWtCO0FBQ3ZEQyxpQkFBZXVXLFlBQVd4Vzt3QkFFTDtRQUNmdkM7YUFFS3RLLE9BQU8vQixVQUFVZ0MsUUFBUXFqQixRQUFRLElBQUluakIsTUFBTUgsT0FBT0ksT0FBTyxHQUFHQSxPQUFPSixNQUFNSSxRQUFRO0FBQ3hGa2pCLFlBQU1sakIsUUFBUW5DLFVBQVVtQztBQUFBQTtBQUcxQmtLLFlBQVF1QyxpQkFBaUJ0RixLQUFLdkosTUFBTTZPLGtCQUFrQixDQUFDLE1BQU12TSxPQUFPZ2pCLFdBQVc7QUFFL0VoWixVQUFNbVgsZUFBZSxXQUFZO2FBQ3hCdkcsOENBQVlpRyx1QkFBdUI3VztBQUFBQTtBQUc1Q0EsVUFBTWlaLGFBQWEsU0FBVXpYLE1BQU0wWCxTQUFTO1VBQ3RDdFcsY0FBYzVDLE1BQU16TyxPQUNwQjRWLFNBQVN2RSxZQUFZdUUsUUFDckIzRCxhQUFhWixZQUFZWSxZQUN6QnNNLGFBQWFsTixZQUFZa04sWUFDekJNLFVBQVN4TixZQUFZd04sUUFDckJ0TixXQUFXRixZQUFZRSxVQUN2QjlILFFBQU80SCxZQUFZNUgsTUFDbkJDLFlBQVkySCxZQUFZM0gsV0FDeEIrTixxQkFBcUJwRyxZQUFZb0csb0JBQ2pDM0YsYUFBWVQsWUFBWVMsV0FDeEJDLFVBQVVWLFlBQVlVLFNBQ3RCbVUsZ0JBQWdCN1UsWUFBWTZVO1VBQzVCakgsY0FBY3hRLE1BQU1xSCxPQUNwQjhSLG1CQUFtQjNJLFlBQVkySSxrQkFDL0JDLFdBQVc1SSxZQUFZNEk7VUFFdkJDLGNBQWNSLGNBQWMsR0FBRzdpQixPQUFPbVIsU0FBUzNGLEtBQUssSUFBSUEsS0FBS0EsS0FBSzdMLFNBQVMsSUFBSTBOLFlBQVdwSTtBQUM5Rm9lLGtCQUFZbEYsS0FBSyxTQUFVQyxHQUFHQyxHQUFHO2VBQ3hCaUYsZUFBYWxGLEdBQUdDLEdBQUdoUixZQUFXcEk7QUFBQUE7O2FBSWhDaWUsWUFBWSxJQUFJbFosTUFBTXVaLGFBQWFsVjtBQUFBQSxtQkFDN0JyRSxNQUFNbVg7QUFBQUEsbUJBQ047QUFBQSxnQkFDSC9HO0FBQUFBLGNBQ0ZwVjtBQUFBQSxlQUNDd0c7QUFBQUEsZ0JBQ0M2WDtBQUFBQSxpQkFDQzVCLGdCQUFnQjdELFdBQVd3RjtBQUFBQTs7O21CQUl6Qi9WO0FBQUFBOztzQkFHR3JELE1BQU13WjtBQUFBQSwwQkFDRkw7QUFBQUEsb0JBQ05uWixNQUFNMlc7QUFBQUEsa0JBQ1IzVyxNQUFNeVo7QUFBQUEsdUJBQ0R6WixNQUFNMFo7QUFBQUEsb0JBQ1QxWixNQUFNMlo7QUFBQUEsc0JBQ0ozWixNQUFNeVc7QUFBQUE7YUFFZnpXLE1BQU16TyxNQUFNMFQ7QUFBQUEsbUJBQ05qRixNQUFNek8sTUFBTXVTO0FBQUFBO1NBeEJsQm9WO0FBQUFBO0FBNkJUbFosVUFBTXdaLG9CQUFvQixTQUFVeGIsTUFBTTtVQUNwQ2hELFFBQU9nRCxLQUFLaEQsTUFDWjZILFlBQVk3RSxLQUFLNkUsV0FDakJ0UixRQUFRZ0MsOEJBQThCeUssTUFBTTRhO1VBRTVDMVIsZUFBZWxILE1BQU16TyxPQUNyQjhlLGNBQWNuSixhQUFhbE0sTUFDM0I0ZSxtQkFBbUIxUyxhQUFhMFMsa0JBQ2hDM2UsWUFBWWlNLGFBQWFqTTtVQUN6QjRlLGFBQWE1ZSxVQUFVd0UsSUFBSXpFLE9BQU1xVixhQUFhO1VBQzlDeUosWUFBWTdlLFVBQVUrRixXQUFXaEcsT0FBTXFWO1VBQ3ZDcUksZ0JBQWdCa0IsaUJBQWlCNWU7VUFDakN3ZCxRQUFRdmQsVUFBVTZCLE9BQU85QixPQUFNO1VBQy9CK2Usc0JBQXNCL1osTUFBTXpPLE1BQU1pUyxXQUFXd1csY0FBY3ZCO3lFQUNIbG5CO21CQUMvQytTLEtBQUt6QixXQUFXZ1gsY0FBYyxpQkFBaUJDLGFBQWE7QUFBQSxjQUNqRTtBQUFBOztnQkFHQTllO0FBQUFBOzt1QkFHTyxxQkFBcUJ1SixHQUFHO21CQUM1QnZFLE1BQU1pYSxtQkFBbUJqZixPQUFNMGQsZUFBZW5VO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBSzNEdkUsVUFBTXlXLG1CQUFtQixTQUFVcmUsUUFBTzhoQixVQUFVO0FBQ2xEbGEsWUFBTW1hLG9CQUFvQm5hLE1BQU1tYSxrQkFBa0Jua0IsT0FBT29DO0FBQ3pEd1QsbUJBQWE1TCxNQUFNb2E7QUFDbkJwYSxZQUFNb2EsZUFBZTNPLFdBQVcsV0FBWTtlQUNuQ3pMLE1BQU1xYSxZQUFZSDtBQUFBQTtBQUFBQTtBQUk3QmxhLFVBQU1pYSxxQkFBcUIsU0FBVWpmLE9BQU1zZixNQUFNL1YsR0FBRztBQUNsREEsUUFBRTBIO0FBRUZqTSxZQUFNdWE7QUFFTjdJLGFBQU8xUixNQUFNek8sTUFBTW9uQixhQUFhLENBQUMzZCxPQUFNc2Y7QUFBQUE7QUFHekN0YSxVQUFNeVosb0JBQW9CLFdBQVk7QUFDcEN6WixZQUFNdWE7ZUFFR0MsUUFBUTdtQixVQUFVZ0MsUUFBUUMsT0FBTyxJQUFJQyxNQUFNMmtCLFFBQVFDLFFBQVEsR0FBR0EsUUFBUUQsT0FBT0MsU0FBUztBQUM3RjdrQixhQUFLNmtCLFNBQVM5bUIsVUFBVThtQjtBQUFBQTtBQUcxQi9JLGFBQU8xUixNQUFNek8sTUFBTW1wQixlQUFlOWtCO0FBQUFBO0FBR3BDb0ssVUFBTTBaLHlCQUF5QixXQUFZO0FBQ3pDMVosWUFBTXVhO2VBRUdJLFFBQVFobkIsVUFBVWdDLFFBQVFDLE9BQU8sSUFBSUMsTUFBTThrQixRQUFRQyxRQUFRLEdBQUdBLFFBQVFELE9BQU9DLFNBQVM7QUFDN0ZobEIsYUFBS2dsQixTQUFTam5CLFVBQVVpbkI7QUFBQUE7QUFHMUJsSixhQUFPMVIsTUFBTXpPLE1BQU1zcEIsb0JBQW9CamxCO0FBQUFBO0FBR3pDb0ssVUFBTTJaLHNCQUFzQixXQUFZO0FBQ3RDM1osWUFBTXVhO2VBRUdPLFFBQVFubkIsVUFBVWdDLFFBQVFDLE9BQU8sSUFBSUMsTUFBTWlsQixRQUFRQyxRQUFRLEdBQUdBLFFBQVFELE9BQU9DLFNBQVM7QUFDN0ZubEIsYUFBS21sQixTQUFTcG5CLFVBQVVvbkI7QUFBQUE7QUFHMUJySixhQUFPMVIsTUFBTXpPLE1BQU15cEIsaUJBQWlCcGxCO0FBQUFBO0FBR3RDb0ssVUFBTTJXLGlCQUFpQixTQUFVeFAsUUFBUW5NLE9BQU04YixNQUFNbEMsTUFBTWppQixRQUFRO1VBQzdEMGtCLGVBQWVyWCxNQUFNek8sT0FDckIwcEIsUUFBUTVELGFBQWE0RCxPQUNyQnRDLGNBQWN0QixhQUFhc0IsYUFDM0JwRCxhQUFhOEIsYUFBYTlCLFlBQzFCcUUsbUJBQW1CdkMsYUFBYXVDLGtCQUNoQ3NCLHNCQUFzQjdELGFBQWE2RDtBQUV2Q2xiLFlBQU11YTtVQUVGVSxPQUFPO1lBQ0w3VCxhQUFXK1QsU0FBWXJFLE1BQU1sRyw4Q0FBWWlHLHVCQUF1QjdXO0FBRXBFQSxjQUFNaUgsU0FBUztBQUFBLFVBQ2JtVSxTQUFTO0FBQUEsWUFDUHBnQixNQUFNQTtBQUFBQSxZQUNObU07QUFBQUEsWUFDQUMsVUFBVUE7QUFBQUEsWUFDVnpVO0FBQUFBO0FBQUFBO0FBQUFBLGlCQUdLdW9CLHFCQUFxQjtBQUM5QnhKLGVBQU9pSCxhQUFhLENBQUMzZCxPQUFNNGUsaUJBQWlCNWUsVUFBU3hCLFFBQU1JO0FBQUFBO0FBRzdEOFgsYUFBTzZELFlBQVksQ0FBQ3BPLFFBQVFuTSxPQUFNNFo7QUFBQUE7QUFHcEM1VSxVQUFNcWIsaUJBQWlCLFdBQVk7QUFDakNyYixZQUFNaUgsU0FBUztBQUFBLFFBQ2JtVSxTQUFTO0FBQUE7QUFBQTtBQUlicGIsVUFBTXNiLFVBQVU7QUFDaEJ0YixVQUFNbWEsb0JBQW9CO0FBQzFCbmEsVUFBTXVaLGFBQTBCbG9CLHNCQUFNa3FCO0FBQ3RDdmIsVUFBTXFILFFBQVE7QUFBQSxNQUNaK1IsVUFBVTtBQUFBLE1BQ1ZELGtCQUFrQjtBQUFBO1dBRWJuWjtBQUFBQTtNQUdMeUMsU0FBU3NXLFdBQVVyVztBQUV2QkQsU0FBT3lOLG1DQUFtQywwQ0FBMENsUixPQUFPO1FBQ3JGaEUsUUFBT2dFLE1BQU1oRTtRQUNid2MsZUFBZSxLQUFLam1CLE9BQ3BCaXFCLFlBQVloRSxhQUFheGMsTUFDekJDLFlBQVl1YyxhQUFhdmM7U0FDeEJnTSxTQUFTO0FBQUEsTUFDWmtTLGtCQUFrQmxlLFVBQVV3RSxJQUFJekUsT0FBTXdnQixXQUFXO0FBQUE7QUFBQTtBQUlyRC9ZLFNBQU93RCxvQkFBb0IsNkJBQTZCO1FBQ2xENEYsU0FBUztRQUVUNFA7UUFDQSxLQUFLcFUsTUFBTThSO0FBQWtCLFdBQUt1QyxnQkFBZ0IsS0FBS25xQjtBQUMzRGtWLFdBQU8xVixpQkFBaUIsVUFBVSxLQUFLNHFCLGtCQUFrQixXQUFZO1VBQy9ELENBQUNGLFNBQVM7QUFDWkcsZ0JBQVEsV0FBWTtBQUNsQkgsb0JBQVU7QUFFVjVQLGlCQUFPNUUsU0FBUztBQUFBLFlBQ2RrUyxrQkFBa0I7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUt2QjtBQUFBO0FBR0wxVyxTQUFPb1oscUJBQXFCLDhCQUE4QjtRQUNwRCxLQUFLeFUsTUFBTThSO0FBQWtCLFdBQUt1QyxnQkFBZ0IsS0FBS25xQjtBQUFBQTtBQUc3RGtSLFNBQU91Tix1QkFBdUIsZ0NBQWdDO0FBQzVEdkosV0FBT3FWLG9CQUFvQixVQUFVLEtBQUtILGlCQUFpQjtBQUFBO0FBRzdEbFosU0FBT0UsU0FBUyxrQkFBa0I7UUFDNUJvVixlQUFlLEtBQUt4bUIsT0FDcEJ5SixRQUFPK2MsYUFBYS9jLE1BQ3BCQyxZQUFZOGMsYUFBYTljLFdBQ3pCNEgsWUFBWWtWLGFBQWFsVixXQUN6Qm5CLFNBQVF6RyxVQUFVdUYsWUFBWXhGLE9BQU1DLFlBQ3BDOGdCLFFBQVFDLE1BQU10YSxRQUFPO1NBQ3BCdWEsYUFBYUYsTUFBTXBtQjs7aUJBRVgyTyxLQUFLLGtCQUFrQnpCO0FBQUFBLFlBQzVCO0FBQUEsb0JBQ1E7QUFBQTttQkFFSDtBQUFBLGNBQ0w7QUFBQSxrQkFDTCxLQUFLcVosY0FBY0gsTUFBTTtBQUFBLFVBQU1BLE1BQU0vaEIsSUFBSSxLQUFLaWYsYUFBYSxLQUFLMW5CLE1BQU0wcEIsU0FBUyxLQUFLa0I7QUFBQUE7QUFBQUE7QUFHekYxWixTQUFPeVosZ0JBQWdCLHVCQUF1QmxKLEtBQUs7UUFDN0NvSixlQUFlLEtBQUs3cUIsT0FDcEIwSixZQUFZbWhCLGFBQWFuaEIsV0FDekJ1SSxhQUFhNFksYUFBYTVZO1FBQzFCN0YsUUFBUXFWLElBQUk7UUFDWnZYLFFBQU91WCxJQUFJQSxJQUFJcmQsU0FBUztRQUN4QjBtQixrQkFBa0I3WSxXQUFXOFksVUFBVS9EO1dBQ3BDdGQsVUFBVTdDLE1BQU11RixPQUFPbEMsT0FBTSxPQUFPekIsSUFBSSxTQUFVZSxNQUFLd00sS0FBSzs7bUJBR3BEO0FBQUE7Z0JBRUx4TTtBQUFBQTtpQkFFQ0UsVUFBVTZCLE9BQU8vQixNQUFLO0FBQUE7QUFBQSxTQUx4QixZQUFZd007QUFBQUE7QUFBQUE7QUFVdkI5RSxTQUFPMFosZ0JBQWdCLHlCQUF5QjtRQUMxQ0ksU0FBUztRQUVUbkIsVUFBVSxLQUFLL1QsU0FBUyxLQUFLQSxNQUFNK1QsV0FBVztRQUM5Q29CLGVBQWUsS0FBS2pyQixPQUNwQjhSLGFBQVltWixhQUFhblosV0FDekJwSSxZQUFZdWhCLGFBQWF2aEIsV0FDekJ1SSxhQUFhZ1osYUFBYWhaLFlBQzFCRixVQUFVa1osYUFBYWxaLFNBQ3ZCUixXQUFXMFosYUFBYTFaLFVBQ3hCcUQsY0FBY3FXLGFBQWFyVzs7aUJBRWxCO0FBQUEsaUJBQ0E7QUFBQSxZQUNMLENBQUMsQ0FBQ2lWLFFBQVFoVTtBQUFBQSxjQUNSLG1CQUFrQjtlQUNqQm1WLE9BQU90VixTQUFTO0FBQUEsVUFDckJtVSxTQUFTO0FBQUE7QUFBQTtBQUFBLGNBR0wsa0JBQWtCO2VBQ2pCQSxRQUFRem9CO0FBQUFBO0FBQUFBLGdCQUVoQixTQUFVOHBCLE9BQU87WUFDZGxyQixRQUFRa3JCLE1BQU1sckI7NkVBQzRDQTs7cUJBRWpEOFI7QUFBQUE7Ozs7b0JBS0QrWCxRQUFRaFU7QUFBQUEsZ0JBQ1ptVixPQUFPbEI7QUFBQUEsa0JBQ0xELFFBQVFqVTtBQUFBQSxxQkFDTGlVLFFBQVFwZ0I7QUFBQUEsbUJBQ1ZvZ0IsUUFBUWxmO0FBQUFBLG9CQUNQcWdCLE9BQU85QztBQUFBQSx5QkFDRjhDLE9BQU83QztBQUFBQSxzQkFDVjZDLE9BQU81QztBQUFBQSwyQkFDRjRDLE9BQU9ockIsTUFBTWtXO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBS3BDaEYsU0FBT2laLGtCQUFrQiwyQkFBMkI7U0FDN0N6VSxTQUFTO0FBQUEsTUFDWmtTLGtCQUFrQjtBQUFBLE1BQ2xCQyxVQUFVLEtBQUtHLFdBQVdoZSxRQUFRbWM7QUFBQUE7QUFBQUE7QUFJdENqVixTQUFPNFgsY0FBYyxxQkFBcUJILFVBQVU7UUFDOUN2VixRQUFRLEtBQUt3VixrQkFBa0J6RDtTQUU5QnlELG9CQUFvQjtBQUN6QnhWLFVBQU13UCxLQUFLLFNBQVVDLEdBQUdDLEdBQUc7YUFDbEIsQ0FBQ0QsSUFBSSxDQUFDQztBQUFBQTtRQUVYcFksU0FBUSxJQUFJRyxLQUFLdUksTUFBTTtRQUN2QnpJLE9BQU0sSUFBSUUsS0FBS3VJLE1BQU1BLE1BQU1oUCxTQUFTO0FBQ3hDdUcsU0FBSXdnQixRQUFRL1gsTUFBTUEsTUFBTWhQLFNBQVMsR0FBRzJILFlBQVk7QUFDaERvVSxXQUFPLEtBQUtuZ0IsTUFBTXlnQixjQUFjO0FBQUEsTUFDOUJyTjtBQUFBQSxNQUNBMUksT0FBT0E7QUFBQUEsTUFDUEMsS0FBS0E7QUFBQUEsTUFDTHFWLFFBQVEySSxTQUFTM0k7QUFBQUEsTUFDakJuSixRQUFROFIsU0FBUzlSO0FBQUFBLE1BQ2pCakQsS0FBSytVLFNBQVMvVTtBQUFBQTtBQUFBQTtBQUlsQjFDLFNBQU84WCxpQkFBaUIsMEJBQTBCO0FBQ2hEM08saUJBQWEsS0FBS3dPO1NBQ2JELG9CQUFvQjtBQUFBO1NBR3BCcEI7QUFBQUEsRUFDUDFuQixNQUFNbVQ7QUFFUnVVLFVBQVU5akIsWUFrQ047QUFFSjhqQixVQUFVM2dCLFFBQVEsU0FBVTRDLE9BQU0yaEIsT0FBTztNQUNuQzFoQixZQUFZMGhCLE1BQU0xaEI7TUFDbEJnQixTQUFRaEIsVUFBVU8sZ0JBQWdCUixPQUFNQztNQUN4Q2lCLE9BQU1qQixVQUFVUyxlQUFlVixPQUFNQztTQUNsQztBQUFBLElBQ0xnQixPQUFPQTtBQUFBQSxJQUNQQyxLQUFLQTtBQUFBQTtBQUFBQTtBQUlUNmMsVUFBVTVmLFdBQVcsU0FBVTZCLE9BQU11VyxRQUFRcUwsT0FBTztNQUM5QzNoQixZQUFZMmhCLE1BQU0zaEI7VUFFZHNXO0FBQUFBLFNBQ0RwWSxXQUFTQzthQUNMNkIsVUFBVWEsSUFBSWQsT0FBTSxJQUFJO0FBQUEsU0FFNUI3QixXQUFTRTthQUNMNEIsVUFBVWEsSUFBSWQsT0FBTSxHQUFHO0FBQUE7YUFHdkJBO0FBQUFBO0FBQUFBO0FBSWIrZCxVQUFVaFYsUUFBUSxTQUFVL0ksT0FBTTZoQixPQUFPO01BQ25DNWhCLFlBQVk0aEIsTUFBTTVoQjtTQUNmQSxVQUFVNkIsT0FBTzlCLE9BQU07QUFBQTtBQUdoQyxJQUFJbFQsU0FBUyxpQkFBZ0JrVyxNQUFNO01BQzdCbE8sT0FBTWtPLEtBQUtsTyxLQUNYQyxPQUFNaU8sS0FBS2pPLEtBQ1grc0IsT0FBTzllLEtBQUs4ZSxNQUNablksUUFBUTNHLEtBQUsyRyxPQUNiMUosWUFBWStDLEtBQUsvQztTQUNkLEtBQUssQ0FBQ0EsVUFBVUUsUUFBUXJMLE1BQUssYUFBYyxNQUFLLENBQUNtTCxVQUFVRSxRQUFRcEwsTUFBSyxjQUFlK3NCLFFBQU8sTUFBTW5ZO0FBQUFBO0FBRzdHLDBCQUEwQjNGLE9BQU87TUFDM0IvQyxTQUFRK0MsTUFBTWxQLEtBQ2RvTSxPQUFNOEMsTUFBTWpQLEtBQ1orc0IsT0FBTzlkLE1BQU04ZCxNQUNiQyxZQUFZL2QsTUFBTStkLFdBQ2xCOWhCLFlBQVkrRCxNQUFNL0Q7TUFDbEJWLE1BQU16UyxPQUFPO0FBQUEsSUFDZm1VLE9BQU9BO0FBQUFBLElBQ1BDLEtBQUtBO0FBQUFBLElBQ0w0Z0I7QUFBQUEsSUFDQUM7QUFBQUEsSUFDQTloQjtBQUFBQTtNQUdFK2hCLFdBQVcsSUFBSS9oQixVQUFVeUYsWUFBWXpFLFFBQU9DO01BQzVDaUIsc0JBQXNCbEMsVUFBVTBGLHVCQUF1QjFFO01BQ3ZEZ2hCLFlBQVl6Z0IsS0FBS3NDLEtBQU1rZSxZQUFXLEtBQU1GLFFBQU9DO01BQy9DRyxXQUFXRCxZQUFZRjtNQUN2QkksU0FBUyxJQUFJdG5CLE1BQU1vbkI7TUFDbkJ0WSxRQUFRLElBQUk5TyxNQUFNcW5CO1dBR2JFLE1BQU0sR0FBR0EsTUFBTUgsV0FBV0csT0FBTztBQUN4Q0QsV0FBT0MsT0FBTyxJQUFJdm5CLE1BQU1rbkI7YUFFZm5JLE9BQU8sR0FBR0EsT0FBT21JLFdBQVduSSxRQUFRO1VBQ3ZDeUksVUFBVUQsTUFBTUwsWUFBWW5JO1VBQzVCMEksZUFBZUQsVUFBVVA7QUFFN0JuWSxZQUFNMFksV0FBV0YsT0FBT0MsS0FBS3hJLFFBQVEzWixVQUFVd0YsWUFBWXhFLFFBQU9rQixxQkFBcUJtZ0I7QUFBQUE7QUFBQUE7TUFLdkZDLHVCQUF1QjVZLE1BQU1oUCxTQUFTbW5CO0FBQzFDblksUUFBTTlJLEtBQUtaLFVBQVV3RixZQUFZeEUsUUFBT2tCLHFCQUFxQm9nQjs0QkFFbkN2aUIsT0FBTTtRQUMxQndDLFFBQU92QyxVQUFVeUYsWUFBWXpFLFFBQU9qQjtXQUNqQ3dCLEtBQUsxTSxJQUFJME4sT0FBTXdmO0FBQUFBO1NBR2pCO0FBQUEsSUFDTEc7QUFBQUEsSUFDQUssUUFBUSxnQkFBZ0I1bkIsTUFBTTtVQUN4QjlOLE9BQU84TixVQUFVMkU7QUFBSyxlQUFPa2pCLGlCQUFpQjduQjthQUMzQztBQUFBO0FBQUEsSUFFVDhuQixlQUFlLHVCQUF1QjFpQixPQUFNMmlCLFlBQVk7VUFDbERDLFlBQVlULE9BQU9RLGFBQWE7YUFDN0IxaUIsVUFBVXFGLFFBQVF0RixPQUFNbWlCLE9BQU9RLFlBQVksSUFBSUMsWUFBWUEsVUFBVSxLQUFLMWhCLE1BQUs7QUFBQTtBQUFBLElBRXhGMmhCLFVBQVUsa0JBQWtCakosT0FBTTtVQUM1QmhULE9BQU8rQyxNQUFNbkksS0FBSzFNLElBQUk2VSxNQUFNbEssUUFBUW1hLFNBQVEsR0FBR2pRLE1BQU1oUCxTQUFTO1VBRTlEaU0sU0FBU2dUO0FBQU1oVCxlQUFPM0csVUFBVWEsSUFBSThZLE9BQU1rSSxNQUFNO2FBQzdDbGI7QUFBQUE7QUFBQUEsSUFFVGtjLHVCQUF1QiwrQkFBK0JDLFNBQVM7VUFDekRuSixRQUFPcFksS0FBSzFNLElBQUk2VSxNQUFNaFAsU0FBUyxHQUFHNkcsS0FBS3pNLElBQUksR0FBR3lNLEtBQUtSLE1BQU0raEIsVUFBVWI7YUFDaEV2WSxNQUFNaVE7QUFBQUE7QUFBQUEsSUFFZm9KLHNCQUFzQiw4QkFBOEJoTixPQUFPaU4sY0FBYztVQUNuRTdsQixTQUFRb0UsS0FBS0MsSUFBSXdoQixhQUFhN1ksTUFBTTZZLGFBQWE1WTthQUM5QyxLQUFLeVksc0JBQXVCOU0sT0FBTTl2QixJQUFJKzhCLGFBQWE3WSxPQUFPaE47QUFBQUE7QUFBQUEsSUFFbkU4bEIscUJBQXFCLDZCQUE2QmxqQixPQUFNdkssU0FBUTtVQUMxREEsWUFBVyxRQUFRO0FBQ3JCQSxrQkFBUztBQUFBO1VBR1B3SyxVQUFVMkMsR0FBRzVDLE9BQU1pQixRQUFPO0FBQVksZUFBTzBJLE1BQU07VUFDbkR3WixXQUFXbGpCLFVBQVV1QyxLQUFLdkIsUUFBT2pCLE9BQU07YUFDcEMySixNQUFPd1osWUFBV0EsV0FBV3JCLFFBQVFBLE9BQU9yc0I7QUFBQUE7QUFBQUEsSUFFckQydEIsaUJBQWlCLHlCQUF5QnBqQixPQUFNO2FBQ3ZDQyxVQUFVMkMsR0FBRzVDLE9BQU1pQixRQUFPO0FBQUE7QUFBQSxJQUVuQ29pQixnQkFBZ0Isd0JBQXdCcmpCLE9BQU07YUFDckNDLFVBQVU4QyxHQUFHL0MsT0FBTWtCLE1BQUs7QUFBQTtBQUFBLElBRWpDb2lCLGNBQWMsc0JBQXNCdGpCLE9BQU07YUFDakNDLFVBQVUyQyxHQUFHM0MsVUFBVW9GLE1BQU1wRSxRQUFPakIsUUFBT2lCLFFBQU87QUFBQTtBQUFBLElBRTNEc2lCLGFBQWEscUJBQXFCdmpCLE9BQU07YUFDL0JDLFVBQVU4QyxHQUFHOUMsVUFBVW9GLE1BQU1uRSxNQUFLbEIsUUFBT2tCLE1BQUs7QUFBQTtBQUFBLElBRXZEc2lCLFVBQVUsa0JBQWtCcGYsWUFBWUMsVUFBVW9mLFdBQVdDLFdBQVc7VUFDbEUsQ0FBQ0Q7QUFBV3JmLHFCQUFhbkUsVUFBVW5MLElBQUlvTSxNQUFLakIsVUFBVWxMLElBQUlrTSxRQUFPbUQ7VUFDakUsQ0FBQ3NmO0FBQVdyZixtQkFBV3BFLFVBQVVuTCxJQUFJb00sTUFBS2pCLFVBQVVsTCxJQUFJa00sUUFBT29EO1VBQy9Ec2YsZ0JBQWdCQyxpQkFBaUJ4ZjtVQUNqQ3lmLGNBQWNELGlCQUFpQnZmO1VBQy9CK0YsT0FBTXlaLGNBQWMvQixPQUFPSSxZQUFZLENBQUNqaUIsVUFBVTFXLEdBQUcyWCxNQUFLbUQsWUFBYXNmLGlCQUFnQjdCLFFBQVNBLFFBQU9JLFlBQVksTUFBTXlCLGdCQUFpQjdCLFFBQU9JLFlBQVk7YUFDMUo7QUFBQSxRQUNMOVgsS0FBS0E7QUFBQUEsUUFDTG1CLFFBQVFzWSxjQUFlL0IsUUFBT0ksWUFBWSxNQUFNOVg7QUFBQUEsUUFDaERuSixPQUFPMmlCLGlCQUFpQnhmO0FBQUFBLFFBQ3hCMGYsV0FBVzFmO0FBQUFBLFFBQ1hsRCxLQUFLMGlCLGlCQUFpQnZmO0FBQUFBLFFBQ3RCMGYsU0FBUzFmO0FBQUFBO0FBQUFBO0FBQUFBLElBR2IyZix3QkFBd0IsZ0NBQWdDNWYsWUFBWTtVQUM5RHVmLGdCQUFnQkMsaUJBQWlCeGY7VUFDakNnRyxPQUFNdVosZ0JBQWlCN0IsUUFBT0ksWUFBWTthQUN2QzlYO0FBQUFBO0FBQUFBO0FBQUFBO0FBS2IsSUFBSTNCLFFBQXFCLDJCQUFZO2tCQUNwQndiLE1BQU1qaEIsTUFBTTtRQUNyQnFGLGFBQVlyRixLQUFLcUYsV0FDakI4TyxjQUFjblUsS0FBS21VO1FBRW5CK00sd0JBQXdCL00sWUFBWXFNLFNBQVNuYixXQUFVcEgsTUFBTWdqQixPQUFPNWIsV0FBVW5ILElBQUkraUIsUUFDbEZoakIsU0FBUWlqQixzQkFBc0JqakIsT0FDOUI2aUIsWUFBWUksc0JBQXNCSixXQUNsQzVpQixPQUFNZ2pCLHNCQUFzQmhqQixLQUM1QjZpQixVQUFVRyxzQkFBc0JILFNBQ2hDM1osT0FBTThaLHNCQUFzQjlaLEtBQzVCbUIsVUFBUzJZLHNCQUFzQjNZO1NBRTlCdEssUUFBUUE7U0FDUkMsTUFBTUE7U0FDTmlqQixVQUFVLENBQUNMO1NBQ1hNLFFBQVEsQ0FBQ0w7U0FDVDNaLE1BQU1BO1NBQ05tQixTQUFTQTtTQUNUMFksT0FBT0E7QUFBQUE7QUFPZEksZUFBYTViLFFBQU8sQ0FBQztBQUFBLElBQ25CbEosS0FBSztBQUFBLElBQ0w3QyxLQUFLLGdCQUFlO1VBR2QsS0FBSzRuQixNQUFNO1lBQ1RDLFVBQVUsS0FBS0QsS0FBS3ZNLE9BQU8sU0FBVWhqQixNQUFLaWpCLEtBQUs7aUJBQzFDeFcsS0FBS3pNLElBQUlBLE1BQUtpakIsSUFBSXdNLE9BQU83cEIsU0FBUztBQUFBLGdCQUV0QztlQUVFLE1BQU00cEI7QUFBQUE7VUFHWEUsaUJBQWlCLE1BQU0sS0FBS2h0QixVQUFVaXRCO1VBR3RDLEtBQUtGLFFBQVE7ZUFDUkMsaUJBQWtCLE1BQUtELE9BQU83cEIsU0FBUztBQUFBO2FBSXpDLEtBQUtxZCxJQUFJME07QUFBQUE7QUFBQUEsS0FPakI7QUFBQSxJQUNEbmxCLEtBQUs7QUFBQSxJQUNMN0MsS0FBSyxnQkFBZTtVQUNkaW9CLGFBQVksS0FBS0Q7VUFDakJFLFVBQVVwakIsS0FBSzFNLElBQUksS0FBSyxLQUFLNHZCLFNBQVM7VUFFdEMsS0FBS0osTUFBTTtlQUNOTTtBQUFBQTtVQUlMLEtBQUtKLFFBQVE7ZUFDUixLQUFLQSxPQUFPN3BCLFNBQVMsSUFBSWlxQixVQUFVRDtBQUFBQTtVQUl4Q0gsU0FBUyxLQUFLeE0sSUFBSXdNO1VBQ2xCL08sUUFBUStPLE9BQU8va0IsUUFBUTthQUNwQmdXLFVBQVUrTyxPQUFPN3BCLFNBQVMsSUFBSWdxQixhQUFZQztBQUFBQTtBQUFBQSxLQUVsRDtBQUFBLElBQ0RybEIsS0FBSztBQUFBLElBQ0w3QyxLQUFLLGdCQUFlO1VBRWQsS0FBSzRuQjtBQUFNLGVBQU87VUFFbEIsS0FBS0U7QUFBUSxlQUFPLEtBQUsvc0IsVUFBVWl0QjtVQUVuQ0csWUFBWSxLQUFLN00sS0FDakJ3TSxTQUFTSyxVQUFVTCxRQUNuQk0sVUFBVUQsVUFBVUMsU0FDcEJKLFNBQVNHLFVBQVVIO1VBQ25CalAsUUFBUStPLE9BQU8va0IsUUFBUSxRQUFRO2FBQzVCcWxCLFVBQVVyUCxRQUFRaVA7QUFBQUE7QUFBQUE7U0FJdEJqYztBQUFBQTtBQU9ULG1CQUFtQjJRLEdBQUdDLEdBQUcwTCx3QkFBd0I7U0FFN0N2akIsS0FBS0MsSUFBSTRYLEVBQUVwWSxRQUFRbVksRUFBRW5ZLFNBQVM4akIsMEJBQTBCMUwsRUFBRXBZLFFBQVFtWSxFQUFFblksU0FBU29ZLEVBQUVwWSxRQUFRbVksRUFBRWxZO0FBQUFBO0FBSTdGLHNCQUFzQmlMLFFBQVE7TUFDeEI2WSxlQUFlQyxTQUFPOVksUUFBUSxDQUFDLFdBQVcsU0FBVTVDLEdBQUc7V0FDbEQsQ0FBQ0EsRUFBRTZhO0FBQUFBO01BRVJjLFNBQVM7U0FFTkYsYUFBYXJxQixTQUFTLEdBQUc7UUFDMUJ1SixRQUFROGdCLGFBQWFHO0FBQ3pCRCxXQUFPcmtCLEtBQUtxRDthQUVIMlUsSUFBSSxHQUFHQSxJQUFJbU0sYUFBYXJxQixRQUFRa2UsS0FBSztVQUN4Q2hILE9BQU9tVCxhQUFhbk07VUFFcEIzVSxNQUFNa2dCLFFBQVF2UyxLQUFLc1M7QUFBUztVQUk1QnRMLElBQUksR0FBRztZQUNMdU0sU0FBU0osYUFBYWg0QixPQUFPNnJCLEdBQUcsR0FBRztBQUN2Q3FNLGVBQU9ya0IsS0FBS3VrQjtBQUFBQTs7OztTQVFYRjtBQUFBQTtBQUdULHlCQUF5QmxoQixPQUFPO01BQzFCbUksU0FBU25JLE1BQU1tSSxRQUNmNFkseUJBQXlCL2dCLE1BQU0rZ0Isd0JBQy9CNU4sY0FBY25ULE1BQU1tVCxhQUNwQjlPLGFBQVlyRSxNQUFNcUU7TUFHbEJnZCxVQUFVbFosT0FBT25OLElBQUksU0FBVWtGLE9BQU87V0FDakMsSUFBSXVFLE1BQU12RSxPQUFPO0FBQUEsTUFDdEJpVDtBQUFBQSxNQUNBOU8sV0FBV0E7QUFBQUE7QUFBQUE7TUFHWGlkLHNCQUFzQkMsYUFBYUY7TUFJbkNHLGtCQUFrQjtNQUVsQkMsUUFBUSxnQkFBZTVNLElBQUc7UUFDeEIzVSxRQUFRb2hCLG9CQUFvQnpNO1FBRTVCcGhCLFlBQVkrdEIsZ0JBQWdCbEssS0FBSyxTQUFVb0ssR0FBRzthQUN6Q0EsRUFBRXhrQixNQUFNZ0QsTUFBTWpELFNBQVNPLEtBQUtDLElBQUl5QyxNQUFNakQsUUFBUXlrQixFQUFFemtCLFNBQVM4akI7QUFBQUE7UUFHOUQsQ0FBQ3R0QixXQUFXO0FBQ2R5TSxZQUFNb2dCLE9BQU87QUFDYmtCLHNCQUFnQjNrQixLQUFLcUQ7YUFDZDtBQUFBO0FBSVRBLFVBQU16TSxZQUFZQTtRQUdkdWdCLE1BQU07YUFFRGMsSUFBSXJoQixVQUFVNnNCLEtBQUszcEIsU0FBUyxHQUFHLENBQUNxZCxPQUFPYyxLQUFLLEdBQUdBLEtBQUs7VUFDdkQ2TSxVQUFVbHVCLFVBQVU2c0IsS0FBS3hMLElBQUk1VSxPQUFPNmdCLHlCQUF5QjtBQUMvRC9NLGNBQU12Z0IsVUFBVTZzQixLQUFLeEw7QUFBQUE7QUFBQUE7UUFJckJkLEtBQUs7QUFFUEEsVUFBSXdNLE9BQU8zakIsS0FBS3FEO0FBQ2hCQSxZQUFNOFQsTUFBTUE7QUFBQUEsV0FDUDtBQUVMOVQsWUFBTXNnQixTQUFTO0FBQ2Yvc0IsZ0JBQVU2c0IsS0FBS3pqQixLQUFLcUQ7QUFBQUE7QUFBQUE7V0FJZjJVLElBQUksR0FBR0EsSUFBSXlNLG9CQUFvQjNxQixRQUFRa2UsS0FBSztRQUMvQytNLE9BQU9ILE1BQU01TTtRQUViK00sU0FBUztBQUFZO0FBQUE7U0FJcEJOLG9CQUFvQnRtQixJQUFJLFNBQVVrRixPQUFPO1dBQ3ZDO0FBQUEsTUFDTEEsT0FBT0EsTUFBTStmO0FBQUFBLE1BQ2IzcUIsT0FBTztBQUFBLFFBQ0w4USxLQUFLbEcsTUFBTWtHO0FBQUFBLFFBQ1htQixRQUFRckgsTUFBTXFIO0FBQUFBLFFBQ2RELE9BQU9wSCxNQUFNb0g7QUFBQUEsUUFDYndaLFNBQVN0akIsS0FBS3pNLElBQUksR0FBR21QLE1BQU00Z0I7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFNbkMsc0JBQXNCOVgsTUFBTTZZLFFBQVFDLFNBQVM7V0FDbENqTixJQUFJLEdBQUdBLElBQUk3TCxLQUFLK1ksUUFBUXByQixRQUFRLEVBQUVrZSxHQUFHO1FBQ3hDaU4sUUFBUXJtQixRQUFRdU4sS0FBSytZLFFBQVFsTixNQUFNO0FBQUk7QUFDM0NnTixhQUFTQSxTQUFTN1ksS0FBSytZLFFBQVFsTixHQUFHdE0sTUFBTXNaLFNBQVM3WSxLQUFLK1ksUUFBUWxOLEdBQUd0TTtBQUVqRXVaLFlBQVFqbEIsS0FBS21NLEtBQUsrWSxRQUFRbE47UUFDdEJtTixTQUFTQyxhQUFhalosS0FBSytZLFFBQVFsTixJQUFJZ04sUUFBUUM7QUFDbkRELGFBQVNBLFNBQVNHLFNBQVNILFNBQVNHO0FBQUFBO1NBRy9CSDtBQUFBQTtBQUdULG1CQUFvQjdpQixNQUFNO01BQ3BCbUosU0FBU25KLEtBQUttSixRQUNkNFkseUJBQXlCL2hCLEtBQUsraEIsd0JBQzlCNU4sY0FBY25VLEtBQUttVSxhQUNuQjlPLGFBQVlyRixLQUFLcUY7TUFDakI2ZCxlQUFlQyxnQkFBZ0I7QUFBQSxJQUNqQ2hhO0FBQUFBLElBQ0E0WTtBQUFBQSxJQUNBNU47QUFBQUEsSUFDQTlPLFdBQVdBO0FBQUFBO0FBRWI2ZCxlQUFhL00sS0FBSyxTQUFVQyxHQUFHQyxHQUFHO0FBQ2hDRCxRQUFJQSxFQUFFOWY7QUFDTitmLFFBQUlBLEVBQUUvZjtRQUNGOGYsRUFBRWhQLFFBQVFpUCxFQUFFalA7QUFBSyxhQUFPZ1AsRUFBRWhQLE1BQU1pUCxFQUFFalAsTUFBTSxJQUFJO0FBQUE7QUFBUSxhQUFPZ1AsRUFBRWhQLE1BQU1nUCxFQUFFN04sU0FBUzhOLEVBQUVqUCxNQUFNaVAsRUFBRTlOLFNBQVMsSUFBSTtBQUFBO1dBR2xHc04sSUFBSSxHQUFHQSxJQUFJcU4sYUFBYXZyQixRQUFRLEVBQUVrZSxHQUFHO0FBQzVDcU4saUJBQWFyTixHQUFHa04sVUFBVTtXQUNuQkcsYUFBYXJOLEdBQUd2ZixNQUFNd1E7V0FDdEJvYyxhQUFhck4sR0FBR3ZmLE1BQU13UTtXQUN0Qm9jLGFBQWFyTixHQUFHdE07V0FDaEIyWixhQUFhck4sR0FBR3VOO0FBQUFBO1dBR2hCQyxLQUFLLEdBQUdBLEtBQUtILGFBQWF2ckIsU0FBUyxHQUFHLEVBQUUwckIsSUFBSTtRQUMvQ0MsTUFBTUosYUFBYUc7UUFDbkJFLEtBQUtELElBQUlodEIsTUFBTThRO1FBQ2ZvYyxLQUFLRixJQUFJaHRCLE1BQU04USxNQUFNa2MsSUFBSWh0QixNQUFNaVM7YUFFMUJ1TixJQUFJdU4sS0FBSyxHQUFHdk4sSUFBSW9OLGFBQWF2ckIsUUFBUSxFQUFFbWUsR0FBRztVQUM3QzJOLE1BQU1QLGFBQWFwTjtVQUNuQjROLEtBQUtELElBQUludEIsTUFBTThRO1VBQ2Z1YyxLQUFLRixJQUFJbnRCLE1BQU04USxNQUFNcWMsSUFBSW50QixNQUFNaVM7VUFFL0JtYixNQUFNSCxNQUFNQSxLQUFLSSxNQUFNSixNQUFNRyxNQUFNQSxLQUFLRixJQUFJO0FBRTlDRixZQUFJUCxRQUFRbGxCLEtBQUs0bEI7QUFDakJBLFlBQUlWLFFBQVFsbEIsS0FBS3lsQjtBQUFBQTtBQUFBQTtBQUFBQTtXQUtkTSxNQUFNLEdBQUdBLE1BQU1WLGFBQWF2ckIsUUFBUSxFQUFFaXNCLEtBQUs7UUFDOUNDLE1BQUtYLGFBQWFVO1FBQ2xCRSxTQUFTO2FBRUpDLEtBQUssR0FBR0EsS0FBSyxLQUFLLEVBQUVBLElBQUk7QUFDL0JELGFBQU9qbUIsS0FBSztBQUFBO2FBSUxtbUIsTUFBTSxHQUFHQSxNQUFNSCxJQUFHZCxRQUFRcHJCLFFBQVEsRUFBRXFzQixLQUFLO1VBQzVDSCxJQUFHZCxRQUFRaUIsS0FBS3phLFFBQVFsRDtBQUFXeWQsZUFBT0QsSUFBR2QsUUFBUWlCLEtBQUt6YSxPQUFPO0FBQUE7QUFJdkVzYSxRQUFHdGEsTUFBTXVhLE9BQU9ybkIsUUFBUTtBQUFBO1dBR2pCd25CLE1BQU0sR0FBR0EsTUFBTWYsYUFBYXZyQixRQUFRLEVBQUVzc0IsS0FBSztRQUM5Q2IsUUFBTztRQUNQRixhQUFhZSxLQUFLYjtBQUFNO1FBQ3hCYyxhQUFhO1FBQ2JyQixTQUFTSSxhQUFhQyxhQUFhZSxNQUFNLEdBQUdDO0FBQ2hEZCxZQUFPLE1BQU9QLFVBQVM7QUFDdkJLLGlCQUFhZSxLQUFLYixPQUFPQTthQUVoQmUsTUFBTSxHQUFHQSxNQUFNRCxXQUFXdnNCLFFBQVEsRUFBRXdzQixLQUFLO0FBQ2hERCxpQkFBV0MsS0FBS2YsT0FBT0E7QUFBQUE7QUFBQUE7V0FJbEJnQixNQUFNLEdBQUdBLE1BQU1sQixhQUFhdnJCLFFBQVEsRUFBRXlzQixLQUFLO1FBQzlDN2QsSUFBSTJjLGFBQWFrQjtBQUNyQjdkLE1BQUVqUSxNQUFNd1EsT0FBT1AsRUFBRWdELE1BQU1oRCxFQUFFNmM7UUFFckJpQixVQUFVO2FBRUxDLE1BQU0sR0FBR0EsTUFBTS9kLEVBQUV3YyxRQUFRcHJCLFFBQVEsRUFBRTJzQixLQUFLO1VBQzNDL2EsTUFBTWhELEVBQUV3YyxRQUFRdUI7QUFDcEJELGdCQUFVQSxVQUFVOWEsTUFBTThhLFVBQVU5YTtBQUFBQTtRQUdsQzhhLFdBQVc5ZCxFQUFFZ0Q7QUFBS2hELFFBQUU2YyxPQUFPLE1BQU03YyxFQUFFZ0QsTUFBTWhELEVBQUU2YztRQUkzQzVOLFVBQVVqUCxFQUFFZ0QsUUFBUSxJQUFJLElBQUk7QUFDaENoRCxNQUFFalEsTUFBTWdTLFFBQVEsVUFBVS9CLEVBQUU2YyxPQUFPLFNBQVM1TixVQUFVO0FBQ3REalAsTUFBRWpRLE1BQU1pUyxTQUFTLFVBQVVoQyxFQUFFalEsTUFBTWlTLFNBQVM7QUFDNUNoQyxNQUFFalEsTUFBTXdyQixVQUFVLFVBQVV2YixFQUFFalEsTUFBTXdRLE9BQU8sU0FBUzBPLFVBQVU7QUFBQTtTQUd6RDBOO0FBQUFBO0FBSVQsSUFBSXFCLG9CQUFvQjtBQUFBLEVBQ3RCM0MsU0FBU3VCO0FBQUFBLGdCQUNLeEI7QUFBQUE7QUFHaEIsc0JBQW9CdkwsR0FBRztTQUNkLENBQUMsQ0FBRUEsTUFBS0EsRUFBRW9PLGVBQWVwTyxFQUFFblgsUUFBUW1YLEVBQUUxZ0I7QUFBQUE7QUFJOUMsMkJBQTJCc0ssTUFBTTtBQUNsQkEsT0FBS21KO0FBQ1duSixPQUFLK2hCO0FBQ2hCL2hCLE9BQUttVTtBQUNQblUsT0FBS3FGO01BQ2pCb2YscUJBQXFCemtCLEtBQUt5a0I7TUFDMUJDLFlBQVlEO01BQ1pBLHNCQUFzQkY7QUFBbUJHLGdCQUFZSCxrQkFBa0JFO01BRXZFLENBQUM5OEIsYUFBVys4QixZQUFZO1dBRW5CO0FBQUE7U0FHRkEsVUFBVWh2QixNQUFNLE1BQU1DO0FBQUFBO0FBRy9CLElBQUlndkIsZ0JBQTZCLHlCQUFVQyxZQUFZO0FBQ3JEcGdCLGlCQUFlbWdCLGdCQUFlQzs0QkFFTDtXQUNoQkEsV0FBV2x2QixNQUFNLE1BQU1DLGNBQWM7QUFBQTtNQUcxQzhPLFNBQVNrZ0IsZUFBY2pnQjtBQUUzQkQsU0FBT0UsU0FBUyxrQkFBa0I7UUFDNUJDLGNBQWMsS0FBS3JSLE9BQ25Cc3hCLGFBQWFqZ0IsWUFBWWlnQixZQUN6QkMsV0FBV2xnQixZQUFZa2dCLFVBQ3ZCQyxRQUFRbmdCLFlBQVltZ0IsT0FDcEJ6ZixVQUFVVixZQUFZVSxTQUN0QkMsd0JBQXdCWCxZQUFZWTtBQUN4Q0QsNEJBQXdCQSwwQkFBMEIsU0FBUyxLQUFLQTtRQUM1RHlmLHlCQUF5QnpmLHNCQUFzQjBmLGlCQUMvQzNTLFVBQVUwUywyQkFBMkIsU0FBUzlLLGdCQUFjOEs7UUFDNURFLGFBQWE1ZixVQUFVQSxRQUFRNmYsa0JBQWtCOztpQkFFeEM7QUFBQSxPQUNWRDtnQkFBYUgsTUFBTS9vQixJQUFJLFNBQVU2QyxPQUFPMEssS0FBSztZQUMxQzZiLFlBQVk5ZixVQUFVQSxRQUFRK2YsU0FBU3htQixPQUFPaW1CLFlBQVk7Ozs7Z0ZBS05NO3VCQUMzQzllLEtBQUssaUJBQWlCOGUsVUFBVXZnQjtBQUFBQSxzQkFDekNnZ0IsY0FBY0EsV0FBV2htQixPQUFPMEs7QUFBQUE7QUFBQUEsV0FMN0JBO0FBQUFBO0FBQUFBO0FBQUFBO1NBU0pvYjtBQUFBQSxFQUNQbmU7QUFDRm1lLGNBQWMxdEIsWUFNVjtBQUVKLDBCQUEwQnF1QixJQUFHO1NBQ3BCLE9BQU9BLE9BQU0sV0FBV0EsS0FBSUEsS0FBSTtBQUFBO0FBS3pDLHlCQUF1Qi94QixPQUFPO01BQ3hCZ3lCLFlBQVdDO01BRVhsdkIsU0FBUS9DLE1BQU0rQyxPQUNkdU8sWUFBWXRSLE1BQU1zUixXQUNsQjNELFFBQVEzTixNQUFNMk4sT0FDZG1FLGFBQVk5UixNQUFNOFIsV0FDbEI0QixNQUFNMVQsTUFBTTBULEtBQ1puQyxXQUFXdlIsTUFBTXVSLFVBQ2pCMFYsUUFBUWpuQixNQUFNaW5CLE9BQ2RpTCxtQkFBbUJseUIsTUFBTWt5QixrQkFDekJDLGlCQUFpQm55QixNQUFNbXlCLGdCQUN2QnBnQixVQUFVL1IsTUFBTStSLFNBQ2hCcWdCLFVBQVVweUIsTUFBTW95QixTQUNoQnpnQixnQkFBZ0IzUixNQUFNMlIsZUFDdEIwZ0Isb0JBQW9CcnlCLE1BQU1xeUIsbUJBQzFCeGdCLGFBQWE3UixNQUFNNlIsWUFDbkJ5Z0Isb0JBQW9CdHlCLE1BQU1pUyxZQUMxQkMsU0FBUW9nQixrQkFBa0Iza0IsT0FDMUJ3RSxnQkFBZW1nQixrQkFBa0JsZ0I7TUFDakNJLFFBQVFWLFdBQVVVLE1BQU03RTtNQUN4QjhFLFVBQVVYLFdBQVVXLFFBQVE5RTtNQUM1QmhELE9BQU1tSCxXQUFVbkgsSUFBSWdEO01BQ3BCakQsU0FBUW9ILFdBQVVwSCxNQUFNaUQ7TUFDeEJnRixZQUFZWixRQUFRYSxVQUFVakYsT0FBT2pELFFBQU9DLE1BQUs0RztNQUNqRHlELFVBQVNqUyxPQUFNaVMsUUFDZm5CLE9BQU05USxPQUFNOFEsS0FDWmtCLFFBQVFoUyxPQUFNZ1MsT0FDZHdaLFVBQVV4ckIsT0FBTXdyQjtNQUNoQmdFLFFBQVE7QUFBQTtpQkFFQztBQUFBLGdCQUNWdEw7QUFBQUEsT0FGSTtBQUFBO2lCQUlNO0FBQUEsZ0JBQ1YvVTs7O1dBR0VNO0FBQUFBLE9BTEU7QUFBQTtNQU1IZ2dCLGFBQWFILG9CQUFvQmhnQyxXQUFTLElBQUlzZ0IsVUFBVTVQLE9BQVFpdkIsY0FBWTtBQUFBLElBQzlFbmUsS0FBSzRlLGlCQUFpQjVlO0FBQUFBLElBQ3RCbUIsUUFBUXlkLGlCQUFpQnpkO0FBQUFBLElBRXpCRCxPQUFPLFVBQVVBLFFBQVE7QUFBQSxLQUN4QmlkLFdBQVV0ZSxNQUFNLFVBQVUsVUFBVStlLGlCQUFpQnhuQixLQUFLek0sSUFBSSxHQUFHK3ZCLFdBQVd5RCxlQUFjMy9CLFdBQVMsSUFBSXNnQixVQUFVNVAsT0FBUWt2QixhQUFZO0FBQUEsSUFDdElwZSxLQUFLNGUsaUJBQWlCNWU7QUFBQUEsSUFDdEJrQixPQUFPMGQsaUJBQWlCMWQ7QUFBQUEsSUFDeEJDLFFBQVF5ZCxpQkFBaUJ6ZDtBQUFBQSxLQUN4QmlkLFVBQVV2ZSxNQUFNLFVBQVUsVUFBVStlLGlCQUFpQmxFLFVBQVUwRDs7VUFFMUQ7QUFBQSxLQUNManlCOzs7O2FBR013eUI7QUFBQUE7YUFFQS9mLFVBQVcsUUFBT3dVLFVBQVUsV0FBV0EsUUFBUSxPQUFPLE1BQU14VSxVQUFVSztBQUFBQSxpQkFDbEVDLEtBQUtzZixvQkFBb0IseUJBQXlCLGFBQWEvZ0IsV0FBV3FCLFVBQVVyQixXQUFXO0FBQUEsd0JBQ3hGQztBQUFBQSx1Q0FDZTJnQjtBQUFBQSxxQ0FDRkM7QUFBQUE7QUFBQUEsZ0JBRTlCSTtBQUFBQTtBQUFBQTtBQUFBQTtBQUdMLElBQUlHLG1CQUFtQiwyQkFBMEJqbUIsTUFBTTtNQUNqRDNKLFdBQVcySixLQUFLM0osVUFDaEJ3TyxZQUFZN0UsS0FBSzZFLFdBQ2pCdk8sU0FBUTBKLEtBQUsxSjs7O1dBR1JBO0FBQUFBOzs7QUFJWCxJQUFJNHZCLGNBQWMsQ0FBQyxZQUNmQyxhQUFhLENBQUM7QUFFbEIsSUFBSUMsWUFBeUIseUJBQVU3aEIsa0JBQWtCO0FBQ3ZEQyxpQkFBZTRoQixZQUFXN2hCO3dCQUVMO1FBQ2Z2QzthQUVLdEssT0FBTy9CLFVBQVVnQyxRQUFRcWpCLFFBQVEsSUFBSW5qQixNQUFNSCxPQUFPSSxPQUFPLEdBQUdBLE9BQU9KLE1BQU1JLFFBQVE7QUFDeEZrakIsWUFBTWxqQixRQUFRbkMsVUFBVW1DO0FBQUFBO0FBRzFCa0ssWUFBUXVDLGlCQUFpQnRGLEtBQUt2SixNQUFNNk8sa0JBQWtCLENBQUMsTUFBTXZNLE9BQU9nakIsV0FBVztBQUMvRWhaLFVBQU1xSCxRQUFRO0FBQUEsTUFDWnlELFdBQVc7QUFBQSxNQUNYdVosdUJBQXVCO0FBQUE7QUFFekJya0IsVUFBTXNrQixvQkFBb0I7QUFFMUJ0a0IsVUFBTXVrQixlQUFlLFNBQVV2bUIsTUFBTTtVQUMvQm1KLFNBQVNuSixLQUFLbUosUUFDZHljLG9CQUFvQjVsQixLQUFLNGxCO1VBQ3pCaGhCLGNBQWM1QyxNQUFNek8sT0FDcEIwVCxNQUFNckMsWUFBWXFDLEtBQ2xCbkMsV0FBV0YsWUFBWUUsVUFDdkJPLGFBQVlULFlBQVlTLFdBQ3hCcEksWUFBWTJILFlBQVkzSCxXQUN4QnFJLFVBQVVWLFlBQVlVLFNBQ3RCRSxhQUFhWixZQUFZWSxZQUN6QnNaLE9BQU9sYSxZQUFZa2EsTUFDbkJDLFlBQVluYSxZQUFZbWEsV0FDeEIwRixxQkFBcUI3ZixZQUFZNmYsb0JBQ2pDM2UsWUFBWWxCLFlBQVlrQjtVQUV4QjBnQix3QkFBd0IzTix1QkFBdUI3VyxRQUMvQ21TLGNBQWNxUyxzQkFBc0JyUztVQUVwQzlRLFlBQVdwRyxVQUFVb0c7VUFDckI2ZixlQUFldUQsa0JBQWtCO0FBQUEsUUFDbkN0ZDtBQUFBQSxRQUNBOUQsV0FBV0E7QUFBQUEsUUFDWDhPO0FBQUFBLFFBQ0E0Tix3QkFBd0J2akIsS0FBS3NDLEtBQUtnZSxPQUFPQyxZQUFZO0FBQUEsUUFDckQwRjtBQUFBQTthQUVLdkIsYUFBYWxuQixJQUFJLFNBQVVnRixPQUFPdUksS0FBSztZQUN4Q3JJLFFBQVFGLE1BQU1FLE9BQ2Q1SyxTQUFRMEssTUFBTTFLO1lBQ2Q0SCxPQUFNbUgsV0FBVW5ILElBQUlnRDtZQUNwQmpELFNBQVFvSCxXQUFVcEgsTUFBTWlEO1lBQ3hCcEMsU0FBUztZQUNUMGI7WUFDQTRGLGtCQUFrQmpNLFlBQVlpTSxnQkFBZ0JuaUI7WUFDOUNvaUIsaUJBQWlCbE0sWUFBWWtNLGVBQWVuaUI7WUFDNUNraUI7QUFBaUJ0aEIsbUJBQVM7QUFBQSxpQkFBbUN1aEI7QUFBZ0J2aEIsbUJBQVM7WUFDdEZzaEIsbUJBQW1CQztBQUFnQjdGLGtCQUFRblgsVUFBUy9DO0FBQUFBO0FBQVlrYSxrQkFBUXZkLFVBQVU2QixPQUFPO0FBQUEsWUFDM0ZiLE9BQU9BO0FBQUFBLFlBQ1BDLEtBQUtBO0FBQUFBLGFBQ0pZO1lBQ0MybUIsbUJBQW1CckYsbUJBQW1Cak0sWUFBWW1NLGFBQWFyaUI7WUFDL0R5bkIsaUJBQWlCckYsa0JBQWtCbE0sWUFBWW9NLFlBQVlyaUI7O2lCQUV0RDVIO0FBQUFBOzs7Ozs7O3FCQVNJK087QUFBQUEsb0JBQ0RtRSxhQUFXdEksT0FBTzREO0FBQUFBLG1CQUNuQixpQkFBaUJ5QixHQUFHO21CQUNwQnZFLE1BQU0wa0IsUUFBUXhsQixPQUFPcUY7QUFBQUE7QUFBQUEseUJBRWYsdUJBQXVCQSxHQUFHO21CQUNoQ3ZFLE1BQU0ya0IsYUFBYXpsQixPQUFPcUY7QUFBQUE7QUFBQUE7c0JBR3ZCLG9CQUFvQkEsR0FBRzttQkFDMUJ2RSxNQUFNNGtCLFVBQVUxbEIsT0FBT3FGO0FBQUFBO0FBQUFBO1dBaEIzQixTQUFTZ0Q7QUFBQUE7QUFBQUE7QUF1QnBCdkgsVUFBTStQLGNBQWMsV0FBWTtVQUMxQi9ILE9BQU80SSw4Q0FBWWlHLHVCQUF1QjdXO1VBQzFDa0gsZUFBZWxILE1BQU16TyxPQUNyQnlYLHFCQUFxQjlCLGFBQWE4QixvQkFDbEMvTixZQUFZaU0sYUFBYWpNO1VBQ3pCNFYsV0FBVzdRLE1BQU04USxZQUFZLElBQUluSSxZQUFVLFdBQVk7ZUFDbERpSSw4Q0FBWWlHLHVCQUF1QjdXO0FBQUFBLFNBQ3pDO0FBQUEsUUFDRGdKO0FBQUFBO1VBR0U2YixjQUFjLHNCQUFxQjFmLEtBQUs7WUFDdEMyZixjQUFjOWtCLE1BQU16TyxNQUFNdXpCO1lBQzFCdnBCLFVBQVV5RSxNQUFNcUgsU0FBUztZQUN6QkEsUUFBUTBkLGVBQWU1ZjtZQUN2QmxKLFNBQVFvTCxNQUFNeVgsV0FDZDVpQixPQUFNbUwsTUFBTTBYO1lBRVorRixhQUFhO2NBQ1g3cEIsVUFBVTFXLEdBQUdnWCxRQUFRdWpCLFdBQVc3aUIsUUFBTyxjQUFjaEIsVUFBVTFXLEdBQUdnWCxRQUFRd2pCLFNBQVM3aUIsTUFBSyxjQUFjNG9CLFlBQVk7QUFBQSxZQUNwSDdvQixPQUFPQTtBQUFBQSxZQUNQQyxLQUFLQTtBQUFBQSxZQUNMK1YsWUFBWWpTLE1BQU16TyxNQUFNdXhCO0FBQUFBLGlCQUNuQjtBQUFPO0FBQUE7WUFHWjlpQixNQUFNcUgsTUFBTXBMLFVBQVVvTCxNQUFNcEwsU0FBUytELE1BQU1xSCxNQUFNbkwsUUFBUW1MLE1BQU1uTCxPQUFPOEQsTUFBTXFILE1BQU15RCxjQUFjekQsTUFBTXlELFdBQVc7QUFDbkg5SyxnQkFBTWlILFNBQVNJO0FBQUFBO0FBQUFBO1VBSWYwZCxpQkFBaUIseUJBQXdCL1QsT0FBTztZQUM5Q3ZMLGNBQWN6RixNQUFNbVMsWUFBWTZMLHFCQUFxQmhOLE9BQU9oRyxtQkFBaUJoRDtZQUU3RSxDQUFDaEksTUFBTXFILE1BQU15RCxXQUFXO0FBQzFCOUssZ0JBQU1nbEIsZUFBZXZmO0FBQUFBO1lBR25Cd2YsY0FBY2psQixNQUFNZ2xCO1lBRXBCL3BCLFVBQVVXLElBQUlxcEIsYUFBYXhmLGNBQWM7QUFDM0NBLHdCQUFjekYsTUFBTW1TLFlBQVkwTCxTQUFTcFk7QUFBQUEsbUJBQ2hDeEssVUFBVThDLEdBQUdrbkIsYUFBYXhmLGNBQWM7QUFDakR3Zix3QkFBY2psQixNQUFNbVMsWUFBWTBMLFNBQVNvSDtBQUFBQTtZQUd2Q0MsY0FBY2xsQixNQUFNbVMsWUFBWXFNLFNBQVN2akIsVUFBVW5MLElBQUltMUIsYUFBYXhmLGNBQWN4SyxVQUFVbEwsSUFBSWsxQixhQUFheGY7ZUFFMUc3aEIsV0FBUyxJQUFJc2hDLGFBQWE7QUFBQSxVQUMvQnBhLFdBQVc7QUFBQSxVQUNYMUYsS0FBSzhmLFlBQVk5ZixNQUFNO0FBQUEsVUFDdkJtQixRQUFRMmUsWUFBWTNlLFNBQVM7QUFBQTtBQUFBO1VBSTdCd0ssd0JBQXdCLGdDQUErQjVMLEtBQUs4TCxZQUFZO1lBQ3RFLENBQUNDLFVBQVFOLDhDQUFZaUcsdUJBQXVCN1csU0FBU21GLE1BQU07Y0FDekRnZ0Isa0JBQWtCSixlQUFlNWYsTUFDakMyWixZQUFZcUcsZ0JBQWdCckcsV0FDNUJDLFVBQVVvRyxnQkFBZ0JwRztBQUU5Qi9lLGdCQUFNc1IsWUFBWTtBQUFBLFlBQ2hCd047QUFBQUEsWUFDQUM7QUFBQUEsWUFDQXhOLFFBQVFOO0FBQUFBLFlBQ1I5TDtBQUFBQTtBQUFBQTtBQUlKbkYsY0FBTWlILFNBQVM7QUFBQSxVQUNiNkQsV0FBVztBQUFBO0FBQUE7QUFJZitGLGVBQVMzRyxHQUFHLGFBQWEyYTtBQUN6QmhVLGVBQVMzRyxHQUFHLGVBQWUyYTtBQUMzQmhVLGVBQVMzRyxHQUFHLGdCQUFnQixTQUFVL0UsS0FBSztZQUNyQ25GLE1BQU16TyxNQUFNdWUsZUFBZTtBQUFnQjtlQUN4QyxDQUFDb0IsVUFBUU4sOENBQVlpRyx1QkFBdUI3VyxTQUFTbUY7QUFBQUE7QUFFOUQwTCxlQUFTM0csR0FBRyxTQUFTLFNBQVUvRSxLQUFLO2VBQzNCNEwsc0JBQXNCNUwsS0FBSztBQUFBO0FBRXBDMEwsZUFBUzNHLEdBQUcsZUFBZSxTQUFVL0UsS0FBSztlQUNqQzRMLHNCQUFzQjVMLEtBQUs7QUFBQTtBQUVwQzBMLGVBQVMzRyxHQUFHLFVBQVUsU0FBVTlCLFFBQVE7WUFDbENwSSxNQUFNcUgsTUFBTXlELFdBQVc7QUFDekI5SyxnQkFBTXNSLFlBQVkxdEIsV0FBUyxJQUFJb2MsTUFBTXFILE9BQU87QUFBQSxZQUMxQ2tLLFFBQVE7QUFBQSxZQUNSbko7QUFBQUE7QUFHRnBJLGdCQUFNaUgsU0FBUztBQUFBLFlBQ2I2RCxXQUFXO0FBQUE7QUFBQTtBQUFBO0FBSWpCK0YsZUFBUzNHLEdBQUcsU0FBUyxXQUFZO1lBQzNCbEssTUFBTXFILE1BQU15RCxXQUFXO0FBQ3pCOUssZ0JBQU1pSCxTQUFTO0FBQUEsWUFDYjZELFdBQVc7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1uQjlLLFVBQU1pUSxzQkFBc0IsV0FBWTtVQUNsQyxDQUFDalEsTUFBTThRO0FBQVc7QUFFdEI5USxZQUFNOFEsVUFBVXRHO0FBRWhCeEssWUFBTThRLFlBQVk7QUFBQTtBQUdwQjlRLFVBQU1zUixjQUFjLFNBQVVtTCxPQUFPO1VBQy9CcUMsWUFBWXJDLE1BQU1xQyxXQUNsQkMsVUFBVXRDLE1BQU1zQyxTQUNoQnhOLFNBQVNrTCxNQUFNbEwsUUFDZm5KLFNBQVNxVSxNQUFNclUsUUFDZmpELE1BQU1zWCxNQUFNdFg7VUFDWjVKLFVBQVV1akIsV0FDVm5hLFFBQVE7YUFFTDNFLE1BQU16TyxNQUFNMEosVUFBVVcsSUFBSUwsU0FBU3dqQixVQUFVO0FBQ2xEcGEsY0FBTTlJLEtBQUtOO0FBQ1hBLGtCQUFVLElBQUlhLEtBQUssQ0FBQ2IsVUFBVXlFLE1BQU16TyxNQUFNdXJCLE9BQU8sS0FBSztBQUFBO0FBR3hEcEwsYUFBTzFSLE1BQU16TyxNQUFNeWdCLGNBQWM7QUFBQSxRQUMvQnJOO0FBQUFBLFFBQ0ExSSxPQUFPNmlCO0FBQUFBLFFBQ1A1aUIsS0FBSzZpQjtBQUFBQSxRQUNMOU0sWUFBWWpTLE1BQU16TyxNQUFNdXhCO0FBQUFBLFFBQ3hCdlI7QUFBQUEsUUFDQW5KO0FBQUFBLFFBQ0FqRDtBQUFBQTtBQUFBQTtBQUlKbkYsVUFBTTBrQixVQUFVLFdBQVk7ZUFDakJsSyxRQUFRN21CLFVBQVVnQyxRQUFRQyxPQUFPLElBQUlDLE1BQU0ya0IsUUFBUUMsUUFBUSxHQUFHQSxRQUFRRCxPQUFPQyxTQUFTO0FBQzdGN2tCLGFBQUs2a0IsU0FBUzltQixVQUFVOG1CO0FBQUFBO0FBRzFCL0ksYUFBTzFSLE1BQU16TyxNQUFNbXBCLGVBQWU5a0I7QUFBQUE7QUFHcENvSyxVQUFNMmtCLGVBQWUsV0FBWTtlQUN0QmhLLFFBQVFobkIsVUFBVWdDLFFBQVFDLE9BQU8sSUFBSUMsTUFBTThrQixRQUFRQyxRQUFRLEdBQUdBLFFBQVFELE9BQU9DLFNBQVM7QUFDN0ZobEIsYUFBS2dsQixTQUFTam5CLFVBQVVpbkI7QUFBQUE7QUFHMUJsSixhQUFPMVIsTUFBTXpPLE1BQU1zcEIsb0JBQW9CamxCO0FBQUFBO0FBR3pDb0ssVUFBTTRrQixZQUFZLFdBQVk7ZUFDbkI5SixRQUFRbm5CLFVBQVVnQyxRQUFRQyxPQUFPLElBQUlDLE1BQU1pbEIsUUFBUUMsUUFBUSxHQUFHQSxRQUFRRCxPQUFPQyxTQUFTO0FBQzdGbmxCLGFBQUttbEIsU0FBU3BuQixVQUFVb25CO0FBQUFBO0FBRzFCckosYUFBTzFSLE1BQU16TyxNQUFNeXBCLGlCQUFpQnBsQjtBQUFBQTtBQUd0Q29LLFVBQU1tUyxjQUFjc0wsaUJBQWlCemQsTUFBTXpPO1dBQ3BDeU87QUFBQUE7TUFHTHlDLFNBQVMyaEIsV0FBVTFoQjtBQUV2QkQsU0FBT3dELG9CQUFvQiw2QkFBNkI7U0FDakQxVSxNQUFNdWUsY0FBYyxLQUFLQztRQUUxQixLQUFLeGUsTUFBTTZ6QixPQUFPO1dBQ2ZDO0FBQUFBO0FBQUFBO0FBSVQ1aUIsU0FBT3VOLHVCQUF1QixnQ0FBZ0M7U0FDdkRDO1NBRUFxVjtBQUFBQTtBQUdQN2lCLFNBQU95TixtQ0FBbUMsMENBQTBDQyxXQUFXO1FBQ3pGQSxVQUFVTCxjQUFjLENBQUMsS0FBS3ZlLE1BQU11ZTtBQUFZLFdBQUtDO1FBQ3JELENBQUNJLFVBQVVMLGNBQWMsS0FBS3ZlLE1BQU11ZTtBQUFZLFdBQUtHO1NBQ3BEa0MsY0FBYyxLQUFLQSxZQUFZcUwsT0FBT3JOO0FBQUFBO0FBRzdDMU4sU0FBT29aLHFCQUFxQiw0QkFBNEIwSixXQUFXQyxXQUFXO1FBQ3hFbk8sZUFBZSxLQUFLOWxCLE9BQ3BCNmUsVUFBU2lILGFBQWFqSCxRQUN0QmdWLFFBQVEvTixhQUFhK04sT0FDckJucUIsWUFBWW9jLGFBQWFwYyxXQUN6QkQsUUFBT3FjLGFBQWFyYyxNQUNwQmxMLE9BQU11bkIsYUFBYXZuQixLQUNuQkMsT0FBTXNuQixhQUFhdG5CO1FBQ25CMDFCLGdCQUFnQnhxQixVQUFVd0UsSUFBSThsQixVQUFVblYsVUFBVUEsV0FBVTtRQUU1RG1WLFVBQVVILFVBQVVBLFNBQVNLLGVBQWU7V0FDekNIO1VBRURGLE9BQU87WUFDTE0sT0FBTyxDQUFDRCxpQkFBaUJ4cUIsVUFBVTFXLEdBQUdnaEMsVUFBVXZxQixNQUFNQSxPQUFNLGNBQWN3cUIsVUFBVW5CLDBCQUEwQixLQUFLaGQsTUFBTWdkO2FBQ3hIZ0IsdUNBQXVDSztBQUFBQTtBQUFBQSxlQUVyQ04sU0FBVW5xQixXQUFVd0UsSUFBSThsQixVQUFVejFCLEtBQUtBLE1BQUssY0FBY21MLFVBQVV3RSxJQUFJOGxCLFVBQVV4MUIsS0FBS0EsTUFBSyxhQUFhO1dBQzdHNDFCO0FBQUFBO0FBQUFBO0FBU1RsakIsU0FBTzRpQix5Q0FBeUMsZ0RBQWdESyxNQUFNO1FBQ2hHN1osU0FBUztRQUVUNlosU0FBUyxRQUFRO0FBQ25CQSxhQUFPO0FBQUE7UUFHTCxDQUFDLEtBQUtwQixxQkFBcUIsQ0FBQ29CLE1BQU07V0FDL0JDO0FBQUFBO1NBR0ZDLHdCQUF3Qm5mLE9BQU9nRixXQUFXLFdBQVk7QUFDekRJLGFBQU95WSxvQkFBb0I7QUFFM0J6WSxhQUFPOFo7QUFFUDlaLGFBQU93WjtBQUFBQSxPQUNOO0FBQUE7QUFHTDVpQixTQUFPNmlCLDZCQUE2QixzQ0FBc0M7U0FDbkVoQixvQkFBb0I7QUFDekI3ZCxXQUFPbUYsYUFBYSxLQUFLZ2E7QUFBQUE7QUFHM0JuakIsU0FBT2tqQix3QkFBd0IsaUNBQWlDO1FBQzFEbk8sZUFBZSxLQUFLam1CLE9BQ3BCekIsT0FBTTBuQixhQUFhMW5CLEtBQ25CQyxPQUFNeW5CLGFBQWF6bkIsS0FDbkJxZ0IsVUFBU29ILGFBQWFwSDtRQUN0QjdVLFVBQVU2VTtRQUVWN1UsV0FBV3pMLFFBQU95TCxXQUFXeEwsTUFBSztVQUNoQ3FWLE9BQU0sS0FBSytNLFlBQVk2TSx1QkFBdUJ6akI7V0FDN0Mrb0Isb0JBQW9CO1dBQ3BCcmQsU0FBUztBQUFBLFFBQ1pvZCx1QkFBdUJqZjtBQUFBQTtBQUFBQSxXQUVwQjtXQUNBa2dCO0FBQUFBO0FBQUFBO0FBSVQ3aUIsU0FBT0UsU0FBUyxrQkFBa0I7UUFDNUJvVixlQUFlLEtBQUt4bUIsT0FDcEJ5SixRQUFPK2MsYUFBYS9jLE1BQ3BCakwsT0FBTWdvQixhQUFhaG9CLEtBQ25Ca1YsTUFBTThTLGFBQWE5UyxLQUNuQm1nQixRQUFRck4sYUFBYXFOLE9BQ3JCdEMsV0FBVy9LLGFBQWErSyxVQUN4QnpmLGFBQVkwVSxhQUFhMVUsV0FDekJwSSxZQUFZOGMsYUFBYTljLFdBQ3pCNHFCLHVCQUF1QjlOLGFBQWF6VSxTQUNwQ3FOLFVBQVVrVixxQkFBcUJsVixTQUMvQnJOLFVBQVUvUCw4QkFBOEJzeUIsc0JBQXNCM0IsY0FDOUQ0Qix3QkFBd0IvTixhQUFhdlUsWUFDckN1aUIsaUJBQWlCRCxzQkFBc0JFLHVCQUN2Q3hpQixhQUFhalEsOEJBQThCdXlCLHVCQUF1QjNCO1FBRWxFaFMsY0FBYyxLQUFLQTtRQUNuQjNCLGNBQWMsS0FBS25KLE9BQ25CeUQsWUFBWTBGLFlBQVkxRixXQUN4QjFGLE9BQU1vTCxZQUFZcEwsS0FDbEJtQixVQUFTaUssWUFBWWpLLFFBQ3JCdVksWUFBWXRPLFlBQVlzTyxXQUN4QkMsVUFBVXZPLFlBQVl1TztRQUN0QjFFLGNBQWM7QUFBQSxNQUNoQnBlLE9BQU82aUI7QUFBQUEsTUFDUDVpQixLQUFLNmlCO0FBQUFBO1FBR0hrSCxXQUFXdFYsUUFBUTVnQixPQUNuQjhTLFlBQVlvakIsU0FBU3BqQixXQUNyQnZPLFNBQVEyeEIsU0FBUzN4QjtRQUVqQjR4Qiw0QkFBNEIxaUIsV0FBVzJpQixvQkFBb0JsQzs7WUFFdkRqcEI7QUFBQUEsYUFDQzFHO0FBQUFBLGlCQUNJZ1EsS0FBS3pCLFdBQVcsZ0JBQWdCLG1CQUFtQnVpQixTQUFTLFdBQVdBLFNBQVMsYUFDM0Z0YSxhQUFhO0FBQUEsaUJBQ1pxSCxZQUFZZ0wsT0FBT25qQixJQUFJLFNBQVVvakIsS0FBSzdWLEtBQUs7O2lCQUduQzZWO0FBQUFBOzs7V0FERjdWO0FBQUFBOzs7bUJBU0lsRTtBQUFBQTs7OztxQkFLQWlCLEtBQUssd0JBQXdCVyxPQUFPO0FBQUEscUJBQzlDLEtBQUtzZixhQUFhO0FBQUEsWUFDbkJwZCxRQUFRLEtBQUs1VixNQUFNNjBCO0FBQUFBLFlBQ25CeEMsbUJBQW1CO0FBQUEsY0FDakIsS0FBS1csYUFBYTtBQUFBLFlBQ3BCcGQsUUFBUSxLQUFLNVYsTUFBTTRWO0FBQUFBO0FBQUFBO0FBQUFBLFVBQ2YyRDttQkFDTztBQUFBLGVBQ0o7QUFBQSxVQUNMMUYsS0FBS0E7QUFBQUEsVUFDTG1CLFFBQVFBO0FBQUFBO0FBQUFBO29CQUVzQ3RMLFVBQVU2QixPQUFPdWQsYUFBYTtBQUFBO0FBQUEsVUFBd0IrSyxTQUFTLEtBQUtkO21CQUN6RztBQUFBLGVBQ0o7QUFBQSxVQUNMbGYsS0FBSyxLQUFLaUMsTUFBTWdkLHdCQUF3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO1NBS3ZDRDtBQUFBQSxFQUNQL3lCLE1BQU1tVDtBQUVSNGYsVUFBVW52QixZQStCTjtBQUNKbXZCLFVBQVVoUyxlQUFlO0FBQUEsRUFDdkJpVSxtQkFBbUI7QUFBQSxFQUNuQnRKLFdBQVc7QUFBQTtBQUdiLElBQUl1SixhQUEwQix5QkFBVTFELFlBQVk7QUFDbERwZ0IsaUJBQWU4akIsYUFBWTFEO3lCQUVMO1FBQ2hCNWlCO2FBRUt0SyxPQUFPL0IsVUFBVWdDLFFBQVFDLE9BQU8sSUFBSUMsTUFBTUgsT0FBT0ksT0FBTyxHQUFHQSxPQUFPSixNQUFNSSxRQUFRO0FBQ3ZGRixXQUFLRSxRQUFRbkMsVUFBVW1DO0FBQUFBO0FBR3pCa0ssWUFBUTRpQixXQUFXM2xCLEtBQUt2SixNQUFNa3ZCLFlBQVksQ0FBQyxNQUFNNXNCLE9BQU9KLFVBQVU7QUFFbEVvSyxVQUFNNmlCLGFBQWEsU0FBVWhtQixPQUFPMEssS0FBSztVQUNuQ0EsUUFBUTtBQUFHLGVBQU87VUFDbEIzRSxjQUFjNUMsTUFBTXpPLE9BQ3BCMEosWUFBWTJILFlBQVkzSCxXQUN4Qm1WLFVBQVN4TixZQUFZd047VUFFckJnVixRQUFRcGxCLE1BQU1tUyxZQUFZdUwsY0FBY3ROLFdBQVU3STs7bUJBR3pDakQsS0FBSyxhQUFhOGdCLFNBQVM7QUFBQSxrQkFDckNucUIsVUFBVTZCLE9BQU9ELE9BQU87QUFBQTtBQUFBO1FBR3pCcUssZUFBZWxILE1BQU16TyxPQUNyQnpCLE9BQU1vWCxhQUFhcFgsS0FDbkJDLE9BQU1tWCxhQUFhblgsS0FDbkJndEIsWUFBWTdWLGFBQWE2VixXQUN6QkQsT0FBTzVWLGFBQWE0VixNQUNwQnlKLGFBQWFyZixhQUFhak07QUFDOUIrRSxVQUFNbVMsY0FBY3NMLGlCQUFpQjtBQUFBLE1BQ25DM3RCLEtBQUtBO0FBQUFBLE1BQ0xDLEtBQUtBO0FBQUFBLE1BQ0xndEI7QUFBQUEsTUFDQUQ7QUFBQUEsTUFDQTdoQixXQUFXc3JCO0FBQUFBO1dBRU52bUI7QUFBQUE7TUFHTHlDLFNBQVM2akIsWUFBVzVqQjtBQUV4QkQsU0FBT3lOLG1DQUFtQywwQ0FBMENDLFdBQVc7U0FDeEZnQyxjQUFjLEtBQUtBLFlBQVlxTCxPQUFPck47QUFBQUE7QUFHN0MxTixTQUFPRSxTQUFTLGtCQUFrQjtRQUM1QmtKLFNBQVM7UUFFVHdMLGVBQWUsS0FBSzlsQixPQUNwQnV4QixXQUFXekwsYUFBYXlMLFVBQ3hCdGYsYUFBYTZULGFBQWE3VCxZQUMxQkYsVUFBVStULGFBQWEvVDs7aUJBRWQ7QUFBQSxnQkFDVixLQUFLNk8sWUFBWWdMLE9BQU9uakIsSUFBSSxTQUFVb2pCLEtBQUs3VixLQUFLOztpQkFHeEM2VjtBQUFBQTs7c0JBR0t2UixPQUFPZ1g7QUFBQUE7V0FKZHRiO0FBQUFBO0FBQUFBO0FBQUFBO1NBVUorZTtBQUFBQSxFQUNQOWhCO0FBQ0Y4aEIsV0FBV3J4QixZQVVQO0FBRUosSUFBSXV4QixpQkFBaUIseUJBQXdCeG9CLE1BQU07TUFDN0N3YSxRQUFReGEsS0FBS3dhOztjQUM2Q0E7QUFBQUE7QUFBQUE7QUFHaEVnTyxlQUFldnhCLFlBSVg7QUFFSixJQUFJd3hCLGlCQUE4Qix5QkFBVWxrQixrQkFBa0I7QUFDNURDLGlCQUFlaWtCLGlCQUFnQmxrQjs2QkFFTDtRQUNwQnZDO2FBRUt0SyxPQUFPL0IsVUFBVWdDLFFBQVFDLE9BQU8sSUFBSUMsTUFBTUgsT0FBT0ksT0FBTyxHQUFHQSxPQUFPSixNQUFNSSxRQUFRO0FBQ3ZGRixXQUFLRSxRQUFRbkMsVUFBVW1DO0FBQUFBO0FBR3pCa0ssWUFBUXVDLGlCQUFpQnRGLEtBQUt2SixNQUFNNk8sa0JBQWtCLENBQUMsTUFBTXZNLE9BQU9KLFVBQVU7QUFFOUVvSyxVQUFNMG1CLG9CQUFvQixTQUFVMXJCLE9BQU1zZixNQUFNL1YsR0FBRztBQUNqREEsUUFBRTBIO0FBQ0Z5RixhQUFPMVIsTUFBTXpPLE1BQU1vbkIsYUFBYSxDQUFDM2QsT0FBTXNmO0FBQUFBO0FBR3pDdGEsVUFBTTJtQixZQUFZLFNBQVU3RCxVQUFVO1VBQ2hDbGdCLGNBQWM1QyxNQUFNek8sT0FDcEI0VixTQUFTdkUsWUFBWXVFLFFBQ3JCbEMsTUFBTXJDLFlBQVlxQyxLQUNsQjZLLGFBQWFsTixZQUFZa04sWUFDekJNLFVBQVN4TixZQUFZd04sUUFDckJoWSxTQUFRd0ssWUFBWXhLLE9BQ3BCa0wsVUFBVVYsWUFBWVUsU0FDdEJySSxZQUFZMkgsWUFBWTNILFdBQ3hCb0ksYUFBWVQsWUFBWVMsV0FDeEJHLGFBQWFaLFlBQVlZLFlBQ3pCTSxZQUFZbEIsWUFBWWtCO1VBQ3hCbU8sYUFBYTVPLFdBQVU0TyxXQUFXNlE7VUFDbEM4RCxrQkFBa0I5RCxXQUFXM2IsT0FBTzhELE9BQU8sU0FBVS9MLE9BQU87ZUFDdkRtRSxXQUFVeWYsU0FBUzVqQixXQUFXK1M7QUFBQUEsV0FDbEM5Szs7a0JBRU87QUFBQTtnQkFFRmlKO0FBQUFBLGlCQUNDO0FBQUEsZUFDRmhZO0FBQUFBLGdCQUNDd3VCO0FBQUFBO21CQUVHO0FBQUE7a0JBRUQ1bUIsTUFBTXpPLE1BQU11UjtBQUFBQTttQkFFWE87QUFBQUE7O2tCQUdEckQsTUFBTXpPLE1BQU1tcEI7QUFBQUEsdUJBQ1AxYSxNQUFNek8sTUFBTXNwQjtBQUFBQSxvQkFDZjdhLE1BQU16TyxNQUFNeXBCO0FBQUFBLHNCQUNWaGIsTUFBTXpPLE1BQU15Z0I7QUFBQUEsNEJBQ05oUyxNQUFNek8sTUFBTXlYO0FBQUFBOzs7V0FLN0JoSjtBQUFBQTtNQUdMeUMsU0FBU2drQixnQkFBZS9qQjtBQUU1QkQsU0FBT29rQixvQkFBb0IsMkJBQTJCenVCLFFBQU87UUFDdkR5VCxTQUFTO1FBRVQzRSxlQUFlLEtBQUszVixPQUNwQjBKLFlBQVlpTSxhQUFhak0sV0FDekIyZSxtQkFBbUIxUyxhQUFhMFMsa0JBQ2hDeEosVUFBU2xKLGFBQWFrSixRQUN0Qk8sVUFBVXpKLGFBQWE1RCxRQUFRcU4sU0FDL0JtVyx3QkFBd0I1ZixhQUFhMUQsV0FBVzhZLFFBQ2hERCxrQkFBa0J5SywwQkFBMEIsU0FBU3ZPLFNBQVN1TztRQUM5RC9rQixRQUFRcU87V0FDTGhZLE9BQU00QixJQUFJLFNBQVVnQixPQUFNNlksR0FBRztVQUM5QjZFLGdCQUFnQmtCLGlCQUFpQjVlO1VBQ2pDd2QsUUFBUXZkLFVBQVU2QixPQUFPOUIsT0FBTTtVQUUvQmlyQixXQUFXdFYsUUFBUTNWLFFBQ25CNkgsWUFBWW9qQixTQUFTcGpCLFdBQ3JCdk8sU0FBUTJ4QixTQUFTM3hCO1VBRWpCZ29CO2NBQ0l0aEI7QUFBQUE7Ozs7ZUFNQzFHO0FBQUFBLG1CQUNJZ1EsS0FBSyxjQUFjekIsV0FBVzVILFVBQVUrRixXQUFXaEcsT0FBTStHLFVBQVU7QUFBQSxrQkFDN0UyVztnQkFDSztBQUFBLG1CQUNHLGlCQUFpQm5VLEdBQUc7bUJBQ3BCc0gsT0FBTzZhLGtCQUFrQjFyQixPQUFNMGQsZUFBZW5VO0FBQUFBO0FBQUFBLG9CQUV0RCtYO0FBQUFBO29CQUF5REE7QUFBQUE7QUFBQUEsU0FSckR6STtBQUFBQTtBQUFBQTtBQVlYcFIsU0FBT0UsU0FBUyxrQkFBa0I7UUFDNUI0WixTQUFTO1FBRVRsRixlQUFlLEtBQUs5bEIsT0FDcEIrVSxRQUFRK1EsYUFBYS9RLE9BQ3JCckIsTUFBTW9TLGFBQWFwUyxLQUNuQjhoQixZQUFZMVAsYUFBYTBQLFdBQ3pCM3VCLFNBQVFpZixhQUFhamYsT0FDckIrTyxTQUFTa1EsYUFBYWxRLFFBQ3RCaUosVUFBU2lILGFBQWFqSCxRQUN0Qi9NLGFBQVlnVSxhQUFhaFUsV0FDekJ5TSxhQUFhdUgsYUFBYXZILFlBQzFCdE0sYUFBYTZULGFBQWE3VCxZQUMxQkYsVUFBVStULGFBQWEvVCxTQUN2QjBqQixZQUFZM1AsYUFBYTJQLFdBQ3pCL3JCLFlBQVlvYyxhQUFhcGMsV0FDekJnc0IsZ0JBQWdCNVAsYUFBYTRQLGVBQzdCQyx3QkFBd0I3UCxhQUFhN1QsWUFDckMyakIsbUJBQW1CRCxzQkFBc0JFLGtCQUN6Q0MseUJBQXlCSCxzQkFBc0JJLGdCQUMvQ0MsMEJBQTBCRiwyQkFBMkIsU0FBU2IsaUJBQWlCYSx3QkFDL0V2akIsWUFBWXVULGFBQWF2VDtRQUN6QnhQLFNBQVE7UUFFUjJ5QixlQUFlO0FBQ2pCM3lCLGFBQU0yUSxNQUFNLGVBQWUsaUJBQWlCdWlCLGtCQUFrQjtBQUFBO1FBRzVEQyxnQkFBZ0JWLFVBQVVXLFlBQVl2Z0I7O2FBRWpDN1M7QUFBQUEsV0FDRjB5QjtBQUFBQSxpQkFDTTFpQixLQUFLLG1CQUFtQjJpQixpQkFBaUI7QUFBQTttQkFFekM7QUFBQSxlQUNKO0FBQUEsVUFDTDNnQjtBQUFBQSxVQUNBZ0IsVUFBVWhCO0FBQUFBLFVBQ1ZzTSxVQUFVdE07QUFBQUE7QUFBQUEsa0JBRVg2Z0I7VUFBK0VKLFVBQVUvc0IsSUFBSSxTQUFVZ0UsTUFBTXVKLEtBQUs7WUFDL0d4bEIsTUFBS2ljLEtBQUssSUFDVjhrQixXQUFXOWtCLEtBQUs7O3FCQUVQO0FBQUEscUJBRVY4a0I7dUJBQ1U7QUFBQTt5QkFHQTtBQUFBO3VCQUVKdmI7QUFBQUEsdUJBQ0FsRSxXQUFVc2tCLGNBQWM3RTtBQUFBQTs7O2FBTDFCLGNBQWN2Yjt1QkFRUixpQ0FBa0NuUCxRQUFNekMsVUFBVSxJQUFJLHFDQUFxQztBQUFBLHNCQUNyRzRtQixPQUFPc0ssa0JBQWtCenVCO0FBQUFBO3NCQUNoQjtBQUFBO29CQUVGZ1k7QUFBQUEscUJBQ0M7QUFBQSxtQkFDRmhZO0FBQUFBLG9CQUNDcXZCLGNBQWMvdkIsSUFBSTNWLFFBQU87QUFBQSx3QkFDckIrZ0MsWUFBWS9nQztBQUFBQSx1QkFDYjtBQUFBO3NCQUVEdzZCLE9BQU9ockIsTUFBTXVSO0FBQUFBO3VCQUVaTztBQUFBQTs7c0JBR0RrWixPQUFPaHJCLE1BQU1tcEI7QUFBQUEsMkJBQ1I2QixPQUFPaHJCLE1BQU1zcEI7QUFBQUEsd0JBQ2hCMEIsT0FBT2hyQixNQUFNeXBCO0FBQUFBLDBCQUNYdUIsT0FBT2hyQixNQUFNeWdCO0FBQUFBLGdDQUNQdUssT0FBT2hyQixNQUFNeVg7QUFBQUE7O1dBL0I1QmpuQixPQUFNd2xCO0FBQUFBO0FBQUFBO0FBQUFBO1NBcUNWa2Y7QUFBQUEsRUFDUHAxQixNQUFNbVQ7QUFFUmlpQixlQUFleHhCLFlBdUJYO0FBRUosSUFBSTJ5QixPQUFPO0FBQ1gsbUJBQW1CYixXQUFXMWpCLFlBQVc7U0FDaEM7QUFBQSxJQUNMckosS0FBSyxhQUFhdVEsS0FBSTtVQUNoQixDQUFDd2M7QUFBVyxlQUFPLENBQUN4YyxJQUFHLENBQUNxZCxNQUFNLE9BQU87YUFDbENiLFVBQVUvc0IsSUFBSSxTQUFVOG9CLFVBQVV2YixLQUFLO2VBQ3JDZ0QsSUFBRyxDQUFDbEgsV0FBVTRPLFdBQVc2USxXQUFXQSxXQUFXdmI7QUFBQUE7QUFBQUE7QUFBQUEsSUFHMURtZ0IsYUFBYSxxQkFBcUJ2Z0IsUUFBUTtVQUNwQzBnQixtQkFBbUIsSUFBSTErQjtVQUV2QixDQUFDNDlCLFdBQVc7QUFFZGMseUJBQWlCQyxJQUFJRixNQUFNemdCO2VBQ3BCMGdCO0FBQUFBO0FBR1QxZ0IsYUFBT21ELFFBQVEsU0FBVXBMLE9BQU87WUFDMUJuZCxNQUFLc2hCLFdBQVV5ZixTQUFTNWpCLFVBQVUwb0I7WUFDbENHLGlCQUFpQkYsaUJBQWlCbndCLElBQUkzVixRQUFPO0FBQ2pEZ21DLHVCQUFlbHNCLEtBQUtxRDtBQUNwQjJvQix5QkFBaUJDLElBQUkvbEMsS0FBSWdtQztBQUFBQTthQUVwQkY7QUFBQUE7QUFBQUE7QUFBQUE7QUFLYixJQUFJRyxXQUF3Qix5QkFBVXBGLFlBQVk7QUFDaERwZ0IsaUJBQWV3bEIsV0FBVXBGO3FCQUVQcnhCLE9BQU87UUFDbkJ5TztBQUVKQSxZQUFRNGlCLFdBQVczbEIsS0FBSyxNQUFNMUwsVUFBVTtBQUV4Q3lPLFVBQU1pb0IsZUFBZSxTQUFVMWpCLEdBQUc7VUFDNUJ2RSxNQUFNZ25CLFVBQVV6ckIsU0FBUztBQUMzQnlFLGNBQU1nbkIsVUFBVXpyQixRQUFRL1QsYUFBYStjLEVBQUU1UixPQUFPbkw7QUFBQUE7QUFBQUE7QUFJbER3WSxVQUFNa29CLGVBQWUsV0FBWTtBQUMvQkMsYUFBT25vQixNQUFNb29CO0FBQ2Jwb0IsWUFBTW9vQixZQUFZeE0sUUFBUTViLE1BQU1xb0I7QUFBQUE7QUFHbENyb0IsVUFBTXNvQixZQUFZLFNBQVUvekIsS0FBSztBQUMvQnlMLFlBQU11b0IsU0FBU2gwQixPQUFPcWMsOENBQVlyYztBQUFBQTtBQUdwQ3lMLFVBQU13b0IsMEJBQTBCLFdBQVk7QUFFMUN4b0IsWUFBTXVhO2VBRUc3a0IsT0FBTy9CLFVBQVVnQyxRQUFRQyxPQUFPLElBQUlDLE1BQU1ILE9BQU9JLE9BQU8sR0FBR0EsT0FBT0osTUFBTUksUUFBUTtBQUN2RkYsYUFBS0UsUUFBUW5DLFVBQVVtQztBQUFBQTtBQUd6QjRiLGFBQU8xUixNQUFNek8sTUFBTW1wQixlQUFlOWtCO0FBQUFBO0FBR3BDb0ssVUFBTXlvQix5QkFBeUIsU0FBVTlqQixPQUFPdVYsVUFBVTtVQUNwRGxJLGVBQWVoUyxNQUFNek8sTUFBTXlnQjtVQUMzQi9WLFNBQVEsSUFBSUcsS0FBS3VJLE1BQU07VUFDdkJ6SSxPQUFNLElBQUlFLEtBQUt1SSxNQUFNQSxNQUFNaFAsU0FBUztBQUN4Q3VHLFdBQUl3Z0IsUUFBUS9YLE1BQU1BLE1BQU1oUCxTQUFTLEdBQUcySCxZQUFZO0FBQ2hEb1UsYUFBT00sY0FBYztBQUFBLFFBQ25Cck47QUFBQUEsUUFDQTFJLE9BQU9BO0FBQUFBLFFBQ1BDLEtBQUtBO0FBQUFBLFFBQ0xxVixRQUFRMkksU0FBUzNJO0FBQUFBLFFBQ2pCVSxZQUFZaUksU0FBU2pJO0FBQUFBO0FBQUFBO0FBSXpCalMsVUFBTXFvQixnQkFBZ0IsV0FBWTtVQUM1QnJvQixNQUFNMG9CO0FBQW1CO1VBQ3pCdGtCLFVBQVVwRSxNQUFNMm9CLFdBQVdwdEI7VUFDM0IwckIsZ0JBQWdCN2lCLFFBQVF3a0IsZUFBZXhrQixRQUFReWtCO1VBRS9DN29CLE1BQU1xSCxNQUFNNGYsa0JBQWtCQSxlQUFlO0FBQy9Dam5CLGNBQU0wb0Isb0JBQW9CO0FBRTFCMW9CLGNBQU1pSCxTQUFTO0FBQUEsVUFDYmdnQjtBQUFBQSxXQUNDLFdBQVk7QUFDYmpuQixnQkFBTTBvQixvQkFBb0I7QUFBQTtBQUFBO0FBQUE7QUFLaEMxb0IsVUFBTThvQixvQkFBb0JweUIsV0FBUSxTQUFVcXdCLFdBQVcxakIsWUFBVzthQUN6RDBsQixVQUFVaEMsV0FBVzFqQjtBQUFBQTtBQUU5QnJELFVBQU1xSCxRQUFRO0FBQUEsTUFDWjJoQixhQUFhM2tCO0FBQUFBLE1BQ2I0aUIsZUFBZTtBQUFBO0FBRWpCam5CLFVBQU1nbkIsWUFBeUIzMUIsc0JBQU1rcUI7QUFDckN2YixVQUFNMm9CLGFBQTBCdDNCLHNCQUFNa3FCO0FBQ3RDdmIsVUFBTWlwQixlQUFlO1dBQ2RqcEI7QUFBQUE7TUFHTHlDLFNBQVN1bEIsVUFBU3RsQjtBQUV0QkQsU0FBT3ltQiw0QkFBNEIscUNBQXFDO1NBQ2pFQztBQUFBQTtBQUdQMW1CLFNBQU93RCxvQkFBb0IsNkJBQTZCO1NBQ2pEb2lCO1FBRUQsS0FBSzkyQixNQUFNK1UsU0FBUyxNQUFNO1dBQ3ZCOGlCO0FBQUFBO1NBR0ZDO0FBQ0w1aUIsV0FBTzFWLGlCQUFpQixVQUFVLEtBQUttM0I7QUFBQUE7QUFHekN6bEIsU0FBT3VOLHVCQUF1QixnQ0FBZ0M7QUFDNUR2SixXQUFPcVYsb0JBQW9CLFVBQVUsS0FBS29NO0FBQzFDQyxXQUFPLEtBQUtDO1FBRVIsS0FBS2tCLG9DQUFvQztBQUMzQzdpQixhQUFPOGlCLHFCQUFxQixLQUFLRDtBQUFBQTtBQUFBQTtBQUlyQzdtQixTQUFPb1oscUJBQXFCLDhCQUE4QjtRQUNwRCxLQUFLdHFCLE1BQU0rVSxTQUFTLE1BQU07V0FDdkI4aUI7QUFBQUE7U0FHRkM7QUFBQUE7QUFHUDVtQixTQUFPeU4sbUNBQW1DLDBDQUEwQ0MsV0FBVztRQUN6RnZOLGNBQWMsS0FBS3JSLE9BQ25CNkcsU0FBUXdLLFlBQVl4SyxPQUNwQm94QixlQUFlNW1CLFlBQVk0bUIsY0FDM0J2dUIsWUFBWTJILFlBQVkzSDtRQUV4QkEsVUFBVXdFLElBQUkwUSxVQUFVL1gsTUFBTSxJQUFJQSxPQUFNLElBQUksY0FBYzZDLFVBQVV3RSxJQUFJMFEsVUFBVXFaLGNBQWNBLGNBQWMsWUFBWTtXQUN2SEwsZ0JBQWdCaFo7QUFBQUE7QUFBQUE7QUFJekIxTixTQUFPOGhCLGVBQWUsc0JBQXNCbnNCLFFBQU8rTyxRQUFRaWYsa0JBQWtCaFosS0FBSztRQUM1RXZCLFNBQVM7UUFFVDNFLGVBQWUsS0FBSzNWLE9BQ3BCekIsT0FBTW9YLGFBQWFwWCxLQUNuQkMsT0FBTW1YLGFBQWFuWCxLQUNuQnlULGFBQWEwRCxhQUFhMUQsWUFDMUJILGFBQVk2RCxhQUFhN0QsV0FDekJwSSxZQUFZaU0sYUFBYWpNLFdBQ3pCd25CLHFCQUFxQnZiLGFBQWF1YjtRQUNsQ3NFLFlBQVksS0FBSytCLGtCQUFrQixLQUFLdjNCLE1BQU13MUIsV0FBVzFqQjtRQUN6RG9rQixnQkFBZ0JWLFVBQVVXLFlBQVl2Z0I7UUFDdENzaUIsMEJBQTBCMUMsVUFBVVcsWUFBWXRCO1dBQzdDVyxVQUFVL3NCLElBQUksU0FBVWdFLE1BQU02VixHQUFHO1VBQ2xDOXhCLE1BQUtpYyxLQUFLLElBQ1Y4a0IsV0FBVzlrQixLQUFLO2FBQ2I1RixPQUFNNEIsSUFBSSxTQUFVZ0IsT0FBTTB1QixLQUFJO1lBQy9CQyxhQUFjbEMsZUFBYy92QixJQUFJM1YsUUFBTyxJQUFJa3BCLE9BQU8sU0FBVS9MLE9BQU87aUJBQzlEakUsVUFBVXFGLFFBQVF0RixPQUFNcUksV0FBVXBILE1BQU1pRCxRQUFRbUUsV0FBVW5ILElBQUlnRCxRQUFRO0FBQUE7WUFFM0UwcUIsdUJBQXdCSCx5QkFBd0IveEIsSUFBSTNWLFFBQU8sSUFBSWtwQixPQUFPLFNBQVUvTCxPQUFPO2lCQUNsRmpFLFVBQVVxRixRQUFRdEYsT0FBTXFJLFdBQVVwSCxNQUFNaUQsUUFBUW1FLFdBQVVuSCxJQUFJZ0QsUUFBUTtBQUFBO3FIQUVmMk0sT0FBT3RhOztlQUVoRTBKLFVBQVVvRixNQUFNckYsT0FBTWxMO0FBQUFBLGVBQ3RCbUwsVUFBVW9GLE1BQU1yRixPQUFNakw7QUFBQUEsb0JBQ2pCK3lCLFlBQVkvZ0M7QUFBQUE7aUJBRWZrWixVQUFVK0YsV0FBV2hHLE9BQU1vUztBQUFBQSxlQUM3QnlHLElBQUksTUFBTTZWO0FBQUFBLGdCQUNUMXVCO0FBQUFBLGtCQUNFMnVCO0FBQUFBLDRCQUNVQztBQUFBQTs7Ozs7QUFPMUJubkIsU0FBT0UsU0FBUyxrQkFBa0I7UUFDNUIwVSxlQUFlLEtBQUs5bEIsT0FDcEI0VixTQUFTa1EsYUFBYWxRLFFBQ3RCaWYsbUJBQW1CL08sYUFBYStPLGtCQUNoQ2h1QixTQUFRaWYsYUFBYWpmLE9BQ3JCa08sUUFBUStRLGFBQWEvUSxPQUNyQnJCLE1BQU1vUyxhQUFhcFMsS0FDbkJuQyxXQUFXdVUsYUFBYXZVLFVBQ3hCc04sVUFBU2lILGFBQWFqSCxRQUN0QjJXLFlBQVkxUCxhQUFhMFAsV0FDekJ2akIsYUFBYTZULGFBQWE3VCxZQUMxQkgsYUFBWWdVLGFBQWFoVSxXQUN6QkMsVUFBVStULGFBQWEvVCxTQUN2QnJJLFlBQVlvYyxhQUFhcGMsV0FDekJuTCxPQUFNdW5CLGFBQWF2bkIsS0FDbkJDLE9BQU1zbkIsYUFBYXRuQixLQUNuQjg1QixvQkFBb0J4UyxhQUFhd1MsbUJBQ2pDN2dCLHFCQUFxQnFPLGFBQWFyTyxvQkFDbENsRixZQUFZdVQsYUFBYXZUO0FBQzdCd0MsWUFBUUEsU0FBUyxLQUFLZSxNQUFNMmhCO1FBQ3hCL3NCLFNBQVE3RCxPQUFNLElBQ2Q4RCxPQUFNOUQsT0FBTUEsT0FBTXpDLFNBQVM7U0FDMUJnUCxRQUFRdk0sT0FBTXpDO1FBQ2ZtMEIsZUFBZSxJQUNmQyxjQUFjLElBQ2RDLHdCQUF3QjtBQUM1QjdpQixXQUFPbUQsUUFBUSxTQUFVcEwsT0FBTztVQUMxQm9CLFVBQVFwQixPQUFPakQsUUFBT0MsTUFBS21ILFlBQVdwSSxZQUFZO1lBQ2hEcUUsU0FBUytELFdBQVVwSCxNQUFNaUQsUUFDekIrcUIsT0FBTzVtQixXQUFVbkgsSUFBSWdEO1lBRXJCbUUsV0FBVS9FLE9BQU9ZLFVBQVVqRSxVQUFVZ0csdUJBQXVCM0IsUUFBUTJxQixTQUFTLENBQUNKLHFCQUFxQixDQUFDNXVCLFVBQVUrRixXQUFXMUIsUUFBUTJxQixPQUFPO0FBQzFJSCx1QkFBYWp1QixLQUFLcUQ7QUFBQUEsZUFDYjtBQUNMNnFCLHNCQUFZbHVCLEtBQUtxRDtBQUFBQTtBQUFBQTtBQUFBQTtBQUl2QmtuQixxQkFBaUI5YixRQUFRLFNBQVVwTCxPQUFPO1VBQ3BDb0IsVUFBUXBCLE9BQU9qRCxRQUFPQyxNQUFLbUgsWUFBV3BJLFlBQVk7QUFDcEQrdUIsOEJBQXNCbnVCLEtBQUtxRDtBQUFBQTtBQUFBQTtBQUcvQjRxQixpQkFBYTNWLEtBQUssU0FBVUMsR0FBR0MsR0FBRzthQUN6QmlGLGVBQWFsRixHQUFHQyxHQUFHaFIsWUFBV3BJO0FBQUFBOztpQkFHMUJxSixLQUFLLGlCQUFpQnlpQixhQUFhO0FBQUE7ZUFFdkMzdUI7QUFBQUEsZ0JBQ0MweEI7QUFBQUE7O2dCQUdBMVo7QUFBQUE7O21CQUdHLEtBQUswWSxrQkFBa0IvQixXQUFXMWpCO0FBQUFBLG9CQUNqQyxLQUFLOVIsTUFBTXVlO0FBQUFBLG1CQUNaek07QUFBQUE7O21CQUdBLEtBQUsyakI7QUFBQUEsdUJBQ0QsS0FBSzNmLE1BQU00ZjtBQUFBQTtzQkFFWixLQUFLd0I7QUFBQUEsdUJBQ0osS0FBS0Q7QUFBQUEsNEJBQ0EsS0FBS2ozQixNQUFNc3BCO0FBQUFBLHlCQUNkLEtBQUt0cEIsTUFBTXlwQjtBQUFBQSxxQkFDZixLQUFLenBCLE1BQU1vbkI7QUFBQUEsMEJBQ04sS0FBS3BuQixNQUFNcW9CO0FBQUFBOzthQUd4QixLQUFLK087QUFBQUEsbUJBQ0M7QUFBQSxrQkFDRCxLQUFLVjtBQUFBQTtnQkFFVGhzQjtBQUFBQSxlQUNELEtBQUtxc0I7QUFBQUE7ZUFFTHJ0QixVQUFVb0YsTUFBTXBFLFFBQU9uTTtBQUFBQSxlQUN2Qm1MLFVBQVVvRixNQUFNcEUsUUFBT2xNO0FBQUFBLGdCQUN0QixLQUFLd0IsTUFBTXVyQjtBQUFBQSxrQkFDVCxLQUFLdnJCLE1BQU02ZTtBQUFBQSxxQkFDUixLQUFLN2UsTUFBTXdyQjtBQUFBQTtxQkFFWDtBQUFBO1lBRVQsS0FBS3dILGFBQWFuc0IsUUFBTzJ4QixhQUFhQyx1QkFBdUI1WjtBQUFBQTtBQUFBQTtBQUFBQTtBQUduRTNOLFNBQU84WCxpQkFBaUIsMEJBQTBCO0FBQ2hEM08saUJBQWEsS0FBS3dPO1NBQ2JELG9CQUFvQjtBQUFBO0FBRzNCMVgsU0FBTzJtQixnQkFBZ0IseUJBQXlCO1FBQzFDN00sU0FBUztRQUVULEtBQUsrTSxvQ0FBb0M7QUFDM0M3aUIsYUFBTzhpQixxQkFBcUIsS0FBS0Q7QUFBQUE7U0FHOUJBLHFDQUFxQzdpQixPQUFPeWpCLHNCQUFzQixXQUFZO1VBQzdFNWpCLFFBQVE2akIsU0FBUzVOLE9BQU9nTTtVQUV4QmppQixTQUFTaVcsT0FBT2xWLE1BQU0yaEIsZ0JBQWdCMWlCLE9BQU87QUFDL0NpVyxlQUFPdFYsU0FBUztBQUFBLFVBQ2QraEIsYUFBYTFpQjtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQU1yQjdELFNBQU80bUIsY0FBYyx1QkFBdUI7UUFDdEMsS0FBS0osZ0JBQWdCLE1BQU07VUFDekI3a0IsVUFBVSxLQUFLdWtCLFdBQVdwdEI7QUFDOUI2SSxjQUFRN2MsWUFBWTZjLFFBQVF3a0IsZUFBZSxLQUFLSztXQUUzQ0EsZUFBZTtBQUFBO0FBQUE7QUFJeEJ4bUIsU0FBTzBtQixrQkFBa0IseUJBQXlCNTNCLE9BQU87UUFDbkRBLFVBQVUsUUFBUTtBQUNwQkEsY0FBUSxLQUFLQTtBQUFBQTtRQUdYNjRCLFNBQVM3NEIsT0FDVHpCLE9BQU1zNkIsT0FBT3Q2QixLQUNiQyxPQUFNcTZCLE9BQU9yNkIsS0FDYnk1QixlQUFlWSxPQUFPWixjQUN0QnZ1QixZQUFZbXZCLE9BQU9udkI7UUFDbkJvdkIsYUFBYWIsZUFBZXZ1QixVQUFVRSxRQUFRcXVCLGNBQWM7UUFDNURjLGNBQWNydkIsVUFBVXVDLEtBQUsxTixNQUFLQyxNQUFLO1NBQ3RDazVCLGVBQWVvQixhQUFhQztBQUFBQTtTQUc1QnRDO0FBQUFBLEVBQ1B4akI7QUFDRndqQixTQUFTL3lCLFlBZ0NMO0FBQ0oreUIsU0FBUzVWLGVBQWU7QUFBQSxFQUN0QjBLLE1BQU07QUFBQSxFQUNOQyxXQUFXO0FBQUE7QUFHYixJQUFJd04sY0FBYyxDQUFDLFFBQVEsYUFBYSxPQUFPLE9BQU87QUFFdEQsSUFBSUMsTUFBbUIseUJBQVVqb0Isa0JBQWtCO0FBQ2pEQyxpQkFBZWdvQixNQUFLam9CO2tCQUVMO1dBQ05BLGlCQUFpQjdPLE1BQU0sTUFBTUMsY0FBYztBQUFBO01BR2hEOE8sU0FBUytuQixLQUFJOW5CO0FBRWpCRCxTQUFPRSxTQUFTLGtCQUFrQjtRQU01QkMsY0FBYyxLQUFLclIsT0FDbkJ5SixRQUFPNEgsWUFBWTVILE1BQ25CQyxZQUFZMkgsWUFBWTNILFdBQ3hCd3ZCLGtCQUFrQjduQixZQUFZOVMsS0FDOUJBLE9BQU0yNkIsb0JBQW9CLFNBQVN4dkIsVUFBVUUsUUFBUSxJQUFJaUIsUUFBUSxTQUFTcXVCLGlCQUMxRUMsa0JBQWtCOW5CLFlBQVk3UyxLQUM5QkEsT0FBTTI2QixvQkFBb0IsU0FBU3p2QixVQUFVSyxNQUFNLElBQUljLFFBQVEsU0FBU3N1QixpQkFDeEVDLHdCQUF3Qi9uQixZQUFZNG1CLGNBQ3BDQSxlQUFlbUIsMEJBQTBCLFNBQVMxdkIsVUFBVUUsUUFBUSxJQUFJaUIsUUFBUSxTQUFTdXVCLHVCQUN6RnA1QixRQUFRZ0MsOEJBQThCcVAsYUFBYTJuQjtRQUVuRG55QixTQUFRb3lCLEtBQUlweUIsTUFBTTRDLE9BQU07QUFBQSxNQUMxQkM7QUFBQUE7MEVBRTZEMUo7YUFDdEQ2RztBQUFBQSxtQkFDTTtBQUFBO1dBRVJ0STtBQUFBQSxXQUNBQztBQUFBQTs7O1NBS0Z5NkI7QUFBQUEsRUFDUG41QixNQUFNbVQ7QUFFUmdtQixJQUFJdjFCLFlBTUE7QUFFSnUxQixJQUFJcHlCLFFBQVEsU0FBVTRDLE9BQU1nRCxNQUFNO01BQzVCL0MsWUFBWStDLEtBQUsvQztTQUNkLENBQUNBLFVBQVVFLFFBQVFILE9BQU07QUFBQTtBQUdsQ3d2QixJQUFJcnhCLFdBQVcsU0FBVTZCLE9BQU11VyxRQUFRdlMsT0FBTztNQUN4Qy9ELFlBQVkrRCxNQUFNL0Q7VUFFZHNXO0FBQUFBLFNBQ0RwWSxXQUFTQzthQUNMNkIsVUFBVWEsSUFBSWQsT0FBTSxJQUFJO0FBQUEsU0FFNUI3QixXQUFTRTthQUNMNEIsVUFBVWEsSUFBSWQsT0FBTSxHQUFHO0FBQUE7YUFHdkJBO0FBQUFBO0FBQUFBO0FBSWJ3dkIsSUFBSXptQixRQUFRLFNBQVUvSSxPQUFNeWhCLE9BQU87TUFDN0J4aEIsWUFBWXdoQixNQUFNeGhCO1NBQ2ZBLFVBQVU2QixPQUFPOUIsT0FBTTtBQUFBO0FBR2hDLElBQUk0dkIsY0FBYyxDQUFDLFFBQVEsYUFBYSxPQUFPLE9BQU87QUFFdEQsSUFBSUMsT0FBb0IseUJBQVV0b0Isa0JBQWtCO0FBQ2xEQyxpQkFBZXFvQixPQUFNdG9CO21CQUVMO1dBQ1BBLGlCQUFpQjdPLE1BQU0sTUFBTUMsY0FBYztBQUFBO01BR2hEOE8sU0FBU29vQixNQUFLbm9CO0FBRWxCRCxTQUFPRSxTQUFTLGtCQUFrQjtRQU01QkMsY0FBYyxLQUFLclIsT0FDbkJ5SixRQUFPNEgsWUFBWTVILE1BQ25CQyxZQUFZMkgsWUFBWTNILFdBQ3hCd3ZCLGtCQUFrQjduQixZQUFZOVMsS0FDOUJBLE9BQU0yNkIsb0JBQW9CLFNBQVN4dkIsVUFBVUUsUUFBUSxJQUFJaUIsUUFBUSxTQUFTcXVCLGlCQUMxRUMsa0JBQWtCOW5CLFlBQVk3UyxLQUM5QkEsT0FBTTI2QixvQkFBb0IsU0FBU3p2QixVQUFVSyxNQUFNLElBQUljLFFBQVEsU0FBU3N1QixpQkFDeEVDLHdCQUF3Qi9uQixZQUFZNG1CLGNBQ3BDQSxlQUFlbUIsMEJBQTBCLFNBQVMxdkIsVUFBVUUsUUFBUSxJQUFJaUIsUUFBUSxTQUFTdXVCLHVCQUN6RnA1QixRQUFRZ0MsOEJBQThCcVAsYUFBYWdvQjtRQUVuRHh5QixTQUFReXlCLE1BQUt6eUIsTUFBTTRDLE9BQU0sS0FBS3pKOzBFQUM2QkE7YUFDdEQ2RztBQUFBQSxtQkFDTTtBQUFBO1dBRVJ0STtBQUFBQSxXQUNBQztBQUFBQTs7O1NBS0Y4NkI7QUFBQUEsRUFDUHg1QixNQUFNbVQ7QUFFUnFtQixLQUFLNTFCLFlBTUQ7QUFDSjQxQixLQUFLelksZUFBZTRWLFNBQVM1VjtBQUU3QnlZLEtBQUsxeEIsV0FBVyxTQUFVNkIsT0FBTXVXLFFBQVF2VCxNQUFNO01BQ3hDL0MsWUFBWStDLEtBQUsvQztVQUVic1c7QUFBQUEsU0FDRHBZLFdBQVNDO2FBQ0w2QixVQUFVYSxJQUFJZCxPQUFNLElBQUk7QUFBQSxTQUU1QjdCLFdBQVNFO2FBQ0w0QixVQUFVYSxJQUFJZCxPQUFNLEdBQUc7QUFBQTthQUd2QkE7QUFBQUE7QUFBQUE7QUFJYjZ2QixLQUFLenlCLFFBQVEsU0FBVTRDLE9BQU1nRSxPQUFPO01BQzlCL0QsWUFBWStELE1BQU0vRDtNQUNsQmdGLGNBQWNoRixVQUFVRztNQUN4QmEsU0FBUWhCLFVBQVVFLFFBQVFILE9BQU0sUUFBUWlGO01BQ3hDL0QsT0FBTWpCLFVBQVVLLE1BQU1OLE9BQU0sUUFBUWlGO1NBQ2pDaEYsVUFBVTdDLE1BQU02RCxRQUFPQztBQUFBQTtBQUdoQzJ1QixLQUFLOW1CLFFBQVEsU0FBVS9JLE9BQU15aEIsT0FBTztNQUM5QnhoQixZQUFZd2hCLE1BQU14aEI7TUFFbEI2dkIsY0FBY0QsS0FBS3p5QixNQUFNNEMsT0FBTTtBQUFBLElBQ2pDQztBQUFBQSxNQUVFZ0IsU0FBUTZ1QixZQUFZLElBQ3BCQyxPQUFPRCxZQUFZcFUsTUFBTTtTQUV0QnpiLFVBQVU2QixPQUFPO0FBQUEsSUFDdEJiLE9BQU9BO0FBQUFBLElBQ1BDLEtBQUs2dUIsS0FBS0M7QUFBQUEsS0FDVDtBQUFBO0FBR0wsSUFBSUMsY0FBYyxDQUFDLFFBQVEsYUFBYSxPQUFPLE9BQU87QUFFdEQsdUJBQXVCandCLE9BQU0wYSxVQUFTO1NBQzdCbVYsS0FBS3p5QixNQUFNNEMsT0FBTTBhLFVBQVN6SyxPQUFPLFNBQVVpZ0IsR0FBRztXQUM1QyxDQUFDLEdBQUcsR0FBR3p3QixRQUFReXdCLEVBQUVDLGNBQWM7QUFBQTtBQUFBO0FBSTFDLElBQUlDLFdBQXdCLHlCQUFVN29CLGtCQUFrQjtBQUN0REMsaUJBQWU0b0IsV0FBVTdvQjt1QkFFTDtXQUNYQSxpQkFBaUI3TyxNQUFNLE1BQU1DLGNBQWM7QUFBQTtNQUdoRDhPLFNBQVMyb0IsVUFBUzFvQjtBQUV0QkQsU0FBT0UsU0FBUyxrQkFBa0I7UUFNNUJDLGNBQWMsS0FBS3JSLE9BQ25CeUosUUFBTzRILFlBQVk1SCxNQUNuQkMsWUFBWTJILFlBQVkzSCxXQUN4Qnd2QixrQkFBa0I3bkIsWUFBWTlTLEtBQzlCQSxPQUFNMjZCLG9CQUFvQixTQUFTeHZCLFVBQVVFLFFBQVEsSUFBSWlCLFFBQVEsU0FBU3F1QixpQkFDMUVDLGtCQUFrQjluQixZQUFZN1MsS0FDOUJBLE9BQU0yNkIsb0JBQW9CLFNBQVN6dkIsVUFBVUssTUFBTSxJQUFJYyxRQUFRLFNBQVNzdUIsaUJBQ3hFQyx3QkFBd0IvbkIsWUFBWTRtQixjQUNwQ0EsZUFBZW1CLDBCQUEwQixTQUFTMXZCLFVBQVVFLFFBQVEsSUFBSWlCLFFBQVEsU0FBU3V1Qix1QkFDekZwNUIsUUFBUWdDLDhCQUE4QnFQLGFBQWFxb0I7UUFFbkQ3eUIsU0FBUWl6QixjQUFjcndCLE9BQU0sS0FBS3pKOzBFQUMwQkE7YUFDdEQ2RztBQUFBQSxtQkFDTTtBQUFBO1dBRVJ0STtBQUFBQSxXQUNBQztBQUFBQTs7O1NBS0ZxN0I7QUFBQUEsRUFDUC81QixNQUFNbVQ7QUFFUjRtQixTQUFTbjJCLFlBTUw7QUFDSm0yQixTQUFTaFosZUFBZTRWLFNBQVM1VjtBQUNqQ2daLFNBQVNoekIsUUFBUWl6QjtBQUNqQkQsU0FBU2p5QixXQUFXMHhCLEtBQUsxeEI7QUFFekJpeUIsU0FBU3JuQixRQUFRLFNBQVUvSSxPQUFNZ0QsTUFBTTtNQUNqQy9DLFlBQVkrQyxLQUFLL0M7TUFFakJxd0IsaUJBQWlCRCxjQUFjcndCLE9BQU07QUFBQSxJQUN2Q0M7QUFBQUEsTUFFRWdCLFNBQVFxdkIsZUFBZSxJQUN2QlAsT0FBT08sZUFBZTVVLE1BQU07U0FFekJ6YixVQUFVNkIsT0FBTztBQUFBLElBQ3RCYixPQUFPQTtBQUFBQSxJQUNQQyxLQUFLNnVCLEtBQUtDO0FBQUFBLEtBQ1Q7QUFBQTtBQUdMLGdCQUFnQmh0QixNQUFNO01BQ2hCcUYsYUFBWXJGLEtBQUtxRixXQUNqQkcsYUFBYXhGLEtBQUt3RixZQUNsQnhJLFFBQU9nRCxLQUFLaEQsTUFDWm1NLFNBQVNuSixLQUFLbUosUUFDZDdELFVBQVV0RixLQUFLc0YsU0FDZjNOLFNBQVNxSSxLQUFLckksUUFDZHNGLFlBQVkrQyxLQUFLL0MsV0FDakI0ZixxQkFBcUI3YyxLQUFLNmMsb0JBQzFCSCxnQkFBZ0IxYyxLQUFLMGMsZUFDckI1WCxXQUFXOUUsS0FBSzhFO01BQ2hCeW9CLFlBQVkxNkIsbUNBQU87TUFDbkIyNkIsYUFBYTM2QixtQ0FBTztNQUNwQjQ2QixhQUFhNTZCLG1DQUFPO01BQ3BCODNCLGFBQWE5M0IsbUNBQU87TUFDcEI2NkIsV0FBVzc2QixtQ0FBTztBQUN0QkMsd0NBQVUsV0FBWTtBQUNwQjY2QjtBQUFBQTtNQUdFQyxZQUFZLG9CQUFtQjd3QixNQUFLb00sU0FBUTBrQixRQUFRO1FBQ2xEcG9CLFNBQVFELFdBQVd0RSxPQUNuQjRzQixhQUFhdG9CLFdBQVd4STtBQUM1Qm1NLGNBQVNBLFFBQU84RCxPQUFPLFNBQVUxRyxHQUFHO2FBQzNCakUsVUFBUWlFLEdBQUd0SixVQUFVRSxRQUFRSixNQUFLLFFBQVFFLFVBQVVLLE1BQU1QLE1BQUssUUFBUXNJLFlBQVdwSTtBQUFBQTtXQUVwRmtNLFFBQU9uTixJQUFJLFNBQVVrRixPQUFPcUksS0FBSztVQUNsQ3hELFFBQVFWLFdBQVVVLE1BQU03RTtVQUN4QmhELE9BQU1tSCxXQUFVbkgsSUFBSWdEO1VBQ3BCakQsU0FBUW9ILFdBQVVwSCxNQUFNaUQ7VUFDeEJnRixZQUFZWixRQUFRYSxVQUFVakYsT0FBT2pELFFBQU9DLE1BQUtzTCxhQUFXdEksT0FBTzREO1VBQ25FaXBCLFlBQVl4a0IsUUFBUSxLQUFLdE0sVUFBVTZCLE9BQU8vQixNQUFLO1VBQy9DNEMsUUFBUTRKLFFBQVE7aUJBQ1RKLFFBQU94UjtBQUFBQSxtQkFDTDtBQUFBLGtCQUNWbTJCO2VBQ0kvd0I7QUFBQUEsaUJBQ0VneEI7QUFBQUEsYUFDSkE7QUFBQUEsV0FBYTs7bUJBR0w3bkIsVUFBVXJCO0FBQUFBLGVBQ2RxQixVQUFVNVA7QUFBQUEsbUJBQ2hCcUo7cUJBQ1U7QUFBQSxvQkFDVnF1QixlQUFlanhCLE1BQUttRTtBQUFBQTtxQkFDVjtBQUFBLG1CQUNGLGlCQUFpQnFGLEdBQUc7bUJBQ3BCbVcsaUJBQWlCQSxjQUFjeGIsT0FBT3FGO0FBQUFBO0FBQUFBLHlCQUVoQyx1QkFBdUJBLEdBQUc7bUJBQ2hDc1csc0JBQXNCQSxtQkFBbUIzYixPQUFPcUY7QUFBQUE7QUFBQUEsb0JBRXhEZDs7O2VBR0VNO0FBQUFBO0FBQUFBLFNBaEJFOG5CLFNBQVMsTUFBTXRrQjtBQUFBQSxPQWlCckI7QUFBQTtNQUdEeWtCLGlCQUFpQix5QkFBd0JqeEIsTUFBS21FLE9BQU87UUFDbkQrc0IsYUFBYSxJQUNiQyxnQkFBZ0Ixb0IsV0FBV3JILE1BQzNCcWMsUUFBUXZkLFVBQVVvRyxTQUFTL0M7UUFDM0JwQyxPQUFNbUgsV0FBVW5ILElBQUlnRDtRQUNwQmpELFNBQVFvSCxXQUFVcEgsTUFBTWlEO1FBRXhCLENBQUNtRSxXQUFVL0UsT0FBT1ksUUFBUTtVQUN4QmpFLFVBQVUxVyxHQUFHMFgsUUFBT0MsT0FBTTtBQUM1QnNjLGdCQUFRdmQsVUFBVTZCLE9BQU9iLFFBQU87QUFBQSxpQkFDdkJoQixVQUFVK0YsV0FBVy9FLFFBQU9DLE9BQU07QUFDM0NzYyxnQkFBUXZkLFVBQVU2QixPQUFPO0FBQUEsVUFDdkJiLE9BQU9BO0FBQUFBLFVBQ1BDLEtBQUtBO0FBQUFBLFdBQ0o7QUFBQSxpQkFDTWpCLFVBQVUrRixXQUFXakcsTUFBS2tCLFNBQVE7QUFDM0N1YyxnQkFBUXZkLFVBQVU2QixPQUFPYixRQUFPO0FBQUEsaUJBQ3ZCaEIsVUFBVStGLFdBQVdqRyxNQUFLbUIsT0FBTTtBQUN6Q3NjLGdCQUFRdmQsVUFBVTZCLE9BQU9aLE1BQUs7QUFBQTtBQUFBO1FBSTlCakIsVUFBVThDLEdBQUdoRCxNQUFLa0IsUUFBTztBQUFRZ3dCLG1CQUFhO1FBQzlDaHhCLFVBQVUyQyxHQUFHN0MsTUFBS21CLE1BQUs7QUFBUSt2QixvQkFBYzs7aUJBRXBDQSxXQUFXRTtBQUFBQSxnQkFDckJEOzthQUVJbnhCO0FBQUFBO1dBRUZ5ZDtBQUFBQTtBQUFBQTtNQUdIbVQsZ0JBQWdCLDBCQUF5QjtRQUN2QyxDQUFDRCxTQUFTbndCO0FBQVM7UUFDbkIrZ0IsU0FBU2lQLFVBQVVod0I7UUFDbkI2d0IsV0FBV1YsU0FBU253QixRQUFROHdCO1FBQzVCLENBQUNEO0FBQVU7UUFDWG5GLGdCQUFnQjBCLFdBQVdwdEIsUUFBUXF0QixlQUFlRCxXQUFXcHRCLFFBQVFzdEI7UUFDckV5RCxVQUFVO1FBQ1ZDLFNBQVNEO0FBQ2JBLGNBQVUsQ0FBQ25DLFNBQVNpQyxTQUFTLzNCLFNBQVMsS0FBSzgxQixTQUFTaUMsU0FBUy8zQixTQUFTO1FBRWxFazRCLE9BQU8sT0FBT0QsUUFBUSxNQUFNQyxPQUFPLE9BQU9ELFFBQVEsSUFBSTtBQUN4RGQsaUJBQVdqd0IsUUFBUWpILE1BQU1nUyxRQUFRZ21CLFFBQVEsS0FBSztBQUM5Q2IsaUJBQVdsd0IsUUFBUWpILE1BQU1nUyxRQUFRZ21CLFFBQVEsS0FBSztBQUFBO1FBRzVDckYsZUFBZTtBQUNqQnVGLGVBQVNsUSxRQUFRO0FBQ2pCQSxhQUFPaG9CLE1BQU1tNEIsY0FBY2pGLGtCQUFrQjtBQUFBLFdBQ3hDO0FBQ0xrRixrQkFBWXBRLFFBQVE7QUFBQTtBQUFBO01BSXBCamIsWUFBV3BHLFVBQVVvRztNQUNyQm5GLE9BQU1qQixVQUFVYSxJQUFJZCxPQUFNckYsUUFBUTtNQUNsQ3lDLFNBQVE2QyxVQUFVN0MsTUFBTTRDLE9BQU1rQixNQUFLO0FBQ3ZDaUwsV0FBU0EsT0FBTzhELE9BQU8sU0FBVS9MLE9BQU87V0FDL0JvQixVQUFRcEIsT0FBT2pFLFVBQVVFLFFBQVFILE9BQU0sUUFBUUMsVUFBVUssTUFBTVksTUFBSyxRQUFRbUgsWUFBV3BJO0FBQUFBO0FBRWhHa00sU0FBT2dOLEtBQUssU0FBVUMsR0FBR0MsR0FBRztXQUNuQixDQUFDaFIsV0FBVXBILE1BQU1tWSxLQUFLLENBQUMvUSxXQUFVcEgsTUFBTW9ZO0FBQUFBOztlQUduQztBQUFBLGNBQ1ZsTixPQUFPeFIsV0FBVzs7YUFDZDQxQjtBQUFBQSxtQkFDTTtBQUFBOzs7eUJBRUE7QUFBQSxtQkFDTkM7QUFBQUEsd0JBQ0pucUIsVUFBU3JHO0FBQUFBO3lCQUNDO0FBQUEsbUJBQ055d0I7QUFBQUEsd0JBQ0pwcUIsVUFBU2xGO0FBQUFBO3lCQUNDO0FBQUEsd0JBQ1ZrRixVQUFTbkM7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7bUJBQ0M7QUFBQSxhQUNOeXBCO0FBQUFBO3FCQUVNO0FBQUE7aUJBRU4rQztBQUFBQSxzQkFDSnR6QixPQUFNNEIsSUFBSSxTQUFVZSxNQUFLd00sS0FBSztxQkFDeEJxa0IsVUFBVTd3QixNQUFLb00sUUFBUUk7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7aUJBRW5CO0FBQUEsZ0JBQ1ZsRyxVQUFTWTtBQUFBQTtBQUFBQTtBQUFBQTtBQUdkMHFCLE9BQU8xM0IsWUFXSDtBQUNKMDNCLE9BQU92YSxlQUFlO0FBQUEsRUFDcEJ6YyxRQUFRO0FBQUE7QUFHVmczQixPQUFPdjBCLFFBQVEsU0FBVTZELFFBQU8rQyxPQUFPO01BQ2pDNHRCLGVBQWU1dEIsTUFBTXJKLFFBQ3JCQSxTQUFTaTNCLGlCQUFpQixTQUFTRCxPQUFPdmEsYUFBYXpjLFNBQVNpM0IsY0FDaEUzeEIsWUFBWStELE1BQU0vRDtNQUNsQmlCLE9BQU1qQixVQUFVYSxJQUFJRyxRQUFPdEcsUUFBUTtTQUNoQztBQUFBLElBQ0xzRyxPQUFPQTtBQUFBQSxJQUNQQyxLQUFLQTtBQUFBQTtBQUFBQTtBQUlUeXdCLE9BQU94ekIsV0FBVyxTQUFVNkIsT0FBTXVXLFFBQVFrTCxPQUFPO01BQzNDb1EsZUFBZXBRLE1BQU05bUIsUUFDckJBLFNBQVNrM0IsaUJBQWlCLFNBQVNGLE9BQU92YSxhQUFhemMsU0FBU2szQixjQUNoRTV4QixZQUFZd2hCLE1BQU14aEI7VUFFZHNXO0FBQUFBLFNBQ0RwWSxXQUFTQzthQUNMNkIsVUFBVWEsSUFBSWQsT0FBTSxDQUFDckYsUUFBUTtBQUFBLFNBRWpDd0QsV0FBU0U7YUFDTDRCLFVBQVVhLElBQUlkLE9BQU1yRixRQUFRO0FBQUE7YUFHNUJxRjtBQUFBQTtBQUFBQTtBQUliMnhCLE9BQU81b0IsUUFBUSxTQUFVOUgsUUFBTzBnQixPQUFPO01BQ2pDbVEsZUFBZW5RLE1BQU1obkIsUUFDckJBLFNBQVNtM0IsaUJBQWlCLFNBQVNILE9BQU92YSxhQUFhemMsU0FBU20zQixjQUNoRTd4QixZQUFZMGhCLE1BQU0xaEI7TUFDbEJpQixPQUFNakIsVUFBVWEsSUFBSUcsUUFBT3RHLFFBQVE7U0FDaENzRixVQUFVNkIsT0FBTztBQUFBLElBQ3RCYixPQUFPQTtBQUFBQSxJQUNQQyxLQUFLQTtBQUFBQSxLQUNKO0FBQUE7QUFHTCxJQUFJNndCO0FBQ0osSUFBSUMsUUFBU0QsVUFBUyxJQUFJQSxPQUFPdnpCLFFBQU1DLFNBQVNzZixXQUFXZ1UsT0FBT3Z6QixRQUFNRSxRQUFRbXhCLE1BQU1rQyxPQUFPdnpCLFFBQU1HLGFBQWF5eEIsVUFBVTJCLE9BQU92ekIsUUFBTUksT0FBTzR3QixLQUFLdUMsT0FBT3Z6QixRQUFNSyxVQUFVOHlCLFFBQVFJO0FBRWxMLElBQUlFLGNBQWMsQ0FBQyxVQUFVLFFBQVE7QUFDckMsa0JBQWtCQyxNQUFNbHZCLE1BQU07TUFDeEJ1VCxTQUFTdlQsS0FBS3VULFFBQ2R2VyxRQUFPZ0QsS0FBS2hELE1BQ1orRyxRQUFRL0QsS0FBSytELE9BQ2J4USxRQUFRZ0MsOEJBQThCeUssTUFBTWl2QjtBQUVoREMsU0FBTyxPQUFPQSxTQUFTLFdBQVdGLE1BQU1FLFFBQVFBO1VBRXhDM2I7QUFBQUEsU0FDRHBZLFdBQVNHO0FBQ1owQixjQUFPK0csU0FBUyxJQUFJM0Y7O1NBR2pCakQsV0FBU0k7OztPQUlWMnpCLFNBQVEsT0FBT0EsS0FBSy96QixhQUFhLGNBQWdLL1UsUUFBVSxTQUFTO0FBQ3RONFcsY0FBT2t5QixLQUFLL3pCLFNBQVM2QixPQUFNdVcsUUFBUWhnQjtBQUFBQTtTQUdoQ3lKO0FBQUFBO0FBR1QsSUFBSW15QixVQUF1Qix5QkFBVTVxQixrQkFBa0I7QUFDckRDLGlCQUFlMnFCLFVBQVM1cUI7c0JBRUw7UUFDYnZDO2FBRUt0SyxPQUFPL0IsVUFBVWdDLFFBQVFDLE9BQU8sSUFBSUMsTUFBTUgsT0FBT0ksT0FBTyxHQUFHQSxPQUFPSixNQUFNSSxRQUFRO0FBQ3ZGRixXQUFLRSxRQUFRbkMsVUFBVW1DO0FBQUFBO0FBR3pCa0ssWUFBUXVDLGlCQUFpQnRGLEtBQUt2SixNQUFNNk8sa0JBQWtCLENBQUMsTUFBTXZNLE9BQU9KLFVBQVU7QUFFOUVvSyxVQUFNN0csV0FBVyxTQUFVb1ksUUFBUTtBQUNqQ3ZSLFlBQU16TyxNQUFNNjdCLFdBQVc3YjtBQUFBQTtBQUd6QnZSLFVBQU1zYSxPQUFPLFNBQVVBLE1BQU07QUFDM0J0YSxZQUFNek8sTUFBTTg3QixPQUFPL1M7QUFBQUE7V0FHZHRhO0FBQUFBO01BR0x5QyxTQUFTMHFCLFNBQVF6cUI7QUFFckJELFNBQU9FLFNBQVMsa0JBQWtCO1FBQzVCQyxjQUFjLEtBQUtyUixPQUNuQjhQLFlBQVd1QixZQUFZM0gsVUFBVW9HLFVBQ2pDbVgsUUFBUTVWLFlBQVk0Vjs7aUJBRVg7QUFBQTttQkFFQTtBQUFBO2dCQUVMO0FBQUEsbUJBQ0csS0FBS3JmLFNBQVNtUSxLQUFLLE1BQU1uUSxXQUFTRztBQUFBQSxvQkFDMUMrSCxVQUFTVTtBQUFBQTtnQkFDSjtBQUFBLG1CQUNHLEtBQUs1SSxTQUFTbVEsS0FBSyxNQUFNblEsV0FBU0M7QUFBQUEsb0JBQzFDaUksVUFBU007QUFBQUE7Z0JBQ0o7QUFBQSxtQkFDRyxLQUFLeEksU0FBU21RLEtBQUssTUFBTW5RLFdBQVNFO0FBQUFBLG9CQUMxQ2dJLFVBQVNPO0FBQUFBO0FBQUFBO21CQUNDO0FBQUEsa0JBQ1Y0VztBQUFBQTttQkFDVTtBQUFBLGtCQUNWLEtBQUs4VSxlQUFlanNCO0FBQUFBO0FBQUFBO0FBQUFBO0FBR3pCb0IsU0FBTzZxQixpQkFBaUIsd0JBQXdCanNCLFdBQVU7UUFDcER3SyxTQUFTO1FBRVQvUixhQUFZLEtBQUt2SSxNQUFNaUk7UUFDdkI4Z0IsT0FBTyxLQUFLL29CLE1BQU0rb0I7UUFFbEJ4Z0IsV0FBVW5FLFNBQVMsR0FBRzthQUNqQm1FLFdBQVVFLElBQUksU0FBVXV6QixNQUFNOztnQkFFM0I7QUFBQSxxQkFFS2pwQixLQUFLO0FBQUEsMEJBQ0FnVyxTQUFTaVQ7QUFBQUE7QUFBQUEsbUJBRWhCMWhCLE9BQU95TyxLQUFLaFIsS0FBSyxNQUFNaWtCO0FBQUFBLG9CQUMvQmxzQixVQUFTa3NCO0FBQUFBLFdBTExBO0FBQUFBO0FBQUFBO0FBQUFBO1NBVU5KO0FBQUFBLEVBQ1A5N0IsTUFBTW1UO0FBRVIyb0IsUUFBUWw0QixZQU9KO0FBU0osb0JBQW9CZ3FCLE1BQU11TyxPQUFPO01BQzNCM3dCLFFBQVE7TUFDUixPQUFPMndCLFVBQVU7QUFBWTN3QixZQUFRMndCLE1BQU12TztBQUFBQSxXQUFlLE9BQU91TyxVQUFVLFlBQVksT0FBT3ZPLFNBQVMsWUFBWUEsUUFBUSxRQUFRdU8sU0FBU3ZPO0FBQU1waUIsWUFBUW9pQixLQUFLdU87U0FDNUozd0I7QUFBQUE7QUFFVCxJQUFJNHdCLGlCQUFlLHVCQUFzQkMsS0FBSztTQUNyQyxTQUFVek8sTUFBTTtXQUNkME8sV0FBVzFPLE1BQU15TztBQUFBQTtBQUFBQTtBQUk1QixJQUFJRSxjQUFjLENBQUMsUUFBUSxRQUFRLFVBQVUsZUFDekNDLGVBQWUsQ0FBQyxRQUFRLFdBQVcsVUFBVSxvQkFBb0IsU0FBUyxhQUFhLGdCQUFnQixRQUFRLFVBQVUsVUFBVSxxQkFBcUIsY0FBYyx1QkFBdUIsY0FBYyxXQUFXLFlBQVk7QUFFdE8sdUJBQXFCQyxRQUFRO1NBQ3BCLENBQUNqNEIsTUFBTTFKLFFBQVEyaEMsVUFBVS96QixPQUFPbkwsS0FBS2svQixVQUFVQTtBQUFBQTtBQUd4RCxxQkFBcUJ4VCxNQUFNdGMsTUFBTTtNQUMzQjh2QixTQUFTOXZCLEtBQUt4RTtNQUNkdTBCLFFBQVFDLGNBQVlGO1NBQ2pCQyxNQUFNdHpCLFFBQVE2ZixVQUFVO0FBQUE7QUFHakMsSUFBSTJULFdBQXdCLHlCQUFVMXJCLGtCQUFrQjtBQUN0REMsaUJBQWV5ckIsV0FBVTFyQjt1QkFFTDtRQUNkdkM7YUFFS3RLLE9BQU8vQixVQUFVZ0MsUUFBUXFqQixRQUFRLElBQUluakIsTUFBTUgsT0FBT0ksT0FBTyxHQUFHQSxPQUFPSixNQUFNSSxRQUFRO0FBQ3hGa2pCLFlBQU1sakIsUUFBUW5DLFVBQVVtQztBQUFBQTtBQUcxQmtLLFlBQVF1QyxpQkFBaUJ0RixLQUFLdkosTUFBTTZPLGtCQUFrQixDQUFDLE1BQU12TSxPQUFPZ2pCLFdBQVc7QUFFL0VoWixVQUFNa3VCLFdBQVcsV0FBWTtVQUN2QjEwQixTQUFRd0csTUFBTXpPLE1BQU1pSTtVQUVwQjNELE1BQU0xSixRQUFRcU4sU0FBUTtlQUNqQjIwQixVQUFVMzBCLFFBQU8sU0FBVTQwQixLQUFLYixNQUFNO2lCQUNwQ2EsSUFBSWIsUUFBUVAsTUFBTU87QUFBQUEsV0FDeEI7QUFBQTtVQUdELE9BQU8vekIsV0FBVSxVQUFVO2VBQ3RCNjBCLFVBQVU3MEIsUUFBTyxTQUFVcUQsT0FBT3RDLEtBQUs7Y0FDeENzQyxVQUFVLE1BQU07bUJBQ1htd0IsTUFBTXp5QjtBQUFBQTtpQkFHUnNDO0FBQUFBO0FBQUFBO2FBSUptd0I7QUFBQUE7QUFHVGh0QixVQUFNc3VCLFVBQVUsV0FBWTtVQUN0QjkwQixTQUFRd0csTUFBTWt1QjthQUVYMTBCLE9BQU13RyxNQUFNek8sTUFBTStvQjtBQUFBQTtBQUczQnRhLFVBQU00WixtQkFBbUIsU0FBVTVlLE9BQU07VUFDbkM0SCxjQUFjNUMsTUFBTXpPLE9BQ3BCK29CLE9BQU8xWCxZQUFZMFgsTUFDbkI1QixnQkFBZ0I5VixZQUFZOFYsZUFDNUJrQixtQkFBbUJoWCxZQUFZZ1g7VUFDL0IsQ0FBQ0E7QUFBa0IsZUFBT2xCO2FBQ3ZCa0IsaUJBQWlCNWUsT0FBTXNmLE1BQU12Z0IsT0FBT25MLEtBQUtvUixNQUFNa3VCO0FBQUFBO0FBR3hEbHVCLFVBQU11dUIsb0JBQW9CLFNBQVV2ekIsT0FBTXd6QixlQUFlbFUsTUFBTTtVQUN6RHBULGVBQWVsSCxNQUFNek8sT0FDckJrOUIsZ0JBQWdCdm5CLGFBQWF1bkIsZUFDN0J4ekIsWUFBWWlNLGFBQWFqTTtVQUV6Qnd6QixlQUFlO1lBQ2JELGNBQWNwMkIsT0FBTztBQUN2QnEyQix3QkFBY0QsY0FBY3AyQixNQUFNNEMsT0FBTTtBQUFBLFlBQ3RDQztBQUFBQSxjQUNFcWY7QUFBQUE7QUFBQUE7QUFBQUE7QUFTVnRhLFVBQU0wdUIsaUJBQWlCLFNBQVVuZCxRQUFRb2QsU0FBUztVQUM1Q3RYLGVBQWVyWCxNQUFNek8sT0FDckIrb0IsT0FBT2pELGFBQWFpRCxNQUNwQnRmLFFBQU9xYyxhQUFhcmMsTUFDcEJvVixVQUFTaUgsYUFBYWpILFFBQ3RCZ2QsYUFBYS9WLGFBQWErVixZQUMxQjc3QixRQUFRZ0MsOEJBQThCOGpCLGNBQWN1VztVQUVwRGdCLGdCQUFnQjV1QixNQUFNc3VCO1VBRXRCdnNCLFFBQVFxTztBQUNacFYsY0FBTzZ6QixTQUFTRCxlQUFlaHJDLFdBQVMsSUFBSTJOLE9BQU87QUFBQSxRQUNqRGdnQjtBQUFBQSxRQUNBdlcsTUFBTTJ6QixXQUFXM3pCLFNBQVErRztBQUFBQSxRQUN6QkE7QUFBQUE7QUFFRnFyQixpQkFBV3B5QixPQUFNc2YsTUFBTS9JO0FBRXZCdlIsWUFBTXV1QixrQkFBa0J2ekIsT0FBTTR6QjtBQUFBQTtBQUdoQzV1QixVQUFNOHVCLG1CQUFtQixTQUFVeFUsTUFBTTtVQUNuQ0EsU0FBU3RhLE1BQU16TyxNQUFNK29CLFFBQVF5VSxZQUFZelUsTUFBTXRhLE1BQU16TyxRQUFRO0FBQy9EeU8sY0FBTXpPLE1BQU04N0IsT0FBTy9TO0FBQUFBO1VBR2pCOWdCLFNBQVF3RyxNQUFNa3VCO0FBRWxCbHVCLFlBQU11dUIsa0JBQWtCdnVCLE1BQU16TyxNQUFNeUosUUFBUWdGLE1BQU16TyxNQUFNNmUsVUFBVTVXLE9BQU04Z0IsT0FBT0E7QUFBQUE7QUFHakZ0YSxVQUFNeVosb0JBQW9CLFdBQVk7ZUFDM0JlLFFBQVE3bUIsVUFBVWdDLFFBQVFDLE9BQU8sSUFBSUMsTUFBTTJrQixRQUFRQyxRQUFRLEdBQUdBLFFBQVFELE9BQU9DLFNBQVM7QUFDN0Y3a0IsYUFBSzZrQixTQUFTOW1CLFVBQVU4bUI7QUFBQUE7QUFHMUIvSSxhQUFPMVIsTUFBTXpPLE1BQU1tcEIsZUFBZTlrQjtBQUFBQTtBQUdwQ29LLFVBQU0wWix5QkFBeUIsV0FBWTtlQUNoQ2lCLFFBQVFobkIsVUFBVWdDLFFBQVFDLE9BQU8sSUFBSUMsTUFBTThrQixRQUFRQyxRQUFRLEdBQUdBLFFBQVFELE9BQU9DLFNBQVM7QUFDN0ZobEIsYUFBS2dsQixTQUFTam5CLFVBQVVpbkI7QUFBQUE7QUFHMUJsSixhQUFPMVIsTUFBTXpPLE1BQU1zcEIsb0JBQW9CamxCO0FBQUFBO0FBR3pDb0ssVUFBTTJaLHNCQUFzQixXQUFZO2VBQzdCbUIsUUFBUW5uQixVQUFVZ0MsUUFBUUMsT0FBTyxJQUFJQyxNQUFNaWxCLFFBQVFDLFFBQVEsR0FBR0EsUUFBUUQsT0FBT0MsU0FBUztBQUM3Rm5sQixhQUFLbWxCLFNBQVNwbkIsVUFBVW9uQjtBQUFBQTtBQUcxQnJKLGFBQU8xUixNQUFNek8sTUFBTXlwQixpQkFBaUJwbEI7QUFBQUE7QUFHdENvSyxVQUFNeVcsbUJBQW1CLFNBQVV5RCxVQUFVO0FBQzNDeEksYUFBTzFSLE1BQU16TyxNQUFNeWdCLGNBQWNrSTtBQUFBQTtBQUduQ2xhLFVBQU1ndkIsa0JBQWtCLFNBQVVoMEIsT0FBTXNmLE1BQU07VUFDeEMzQixjQUFjM1ksTUFBTXpPLE1BQU1vbkI7VUFFMUJBLGFBQWE7QUFDZkEsb0JBQVkzZCxPQUFNc2YsTUFBTXRhLE1BQU0wWTs7O1VBSTVCNEI7QUFBTXRhLGNBQU04dUIsaUJBQWlCeFU7QUFFakN0YSxZQUFNMHVCLGVBQWV2MUIsV0FBU0ksTUFBTXlCO0FBQUFBO0FBR3RDZ0YsVUFBTXFILFFBQVE7QUFBQSxNQUNad0ksU0FBUzdQLE1BQU1pdkIsV0FBV2p2QixNQUFNek87QUFBQUE7V0FFM0J5TztBQUFBQTtNQUdMeUMsU0FBU3dyQixVQUFTdnJCO0FBRXRCRCxTQUFPeU4sbUNBQW1DLDBDQUEwQ0MsV0FBVztTQUN4RmxKLFNBQVM7QUFBQSxNQUNaNEksU0FBUyxLQUFLb2YsV0FBVzllO0FBQUFBO0FBQUFBO0FBSTdCMU4sU0FBT3dzQixhQUFhLG9CQUFvQmp3QixPQUFPO1FBQ3pDa3dCLGdCQUFnQmx3QixNQUFNa3dCLGVBQ3RCQyxjQUFjbndCLE1BQU1td0IsYUFDcEJDLGlCQUFpQnB3QixNQUFNb3dCLGdCQUN2QkMsa0JBQWtCcndCLE1BQU1xd0IsaUJBQ3hCQyxnQkFBZ0J0d0IsTUFBTXN3QixlQUN0QkMsbUJBQW1CdndCLE1BQU11d0Isa0JBQ3pCQyxxQkFBcUJ4d0IsTUFBTXd3QixvQkFDM0JDLHdCQUF3Qnp3QixNQUFNeXdCLHVCQUM5QkMsa0JBQWtCMXdCLE1BQU0wd0IsaUJBQ3hCQyw0QkFBNEIzd0IsTUFBTTJ3QiwyQkFDbENDLGlCQUFpQjV3QixNQUFNNHdCLGdCQUN2QkMsc0JBQXNCN3dCLE1BQU02d0IscUJBQzVCQyxnQkFBZ0I5d0IsTUFBTTh3QixlQUN0QnhWLE9BQU90YixNQUFNc2IsTUFDYjlnQixTQUFRd0YsTUFBTXhGLE9BQ2R5QixZQUFZK0QsTUFBTS9ELFdBQ2xCOEIsVUFBVWlDLE1BQU1qQyxTQUNoQmd6QixpQkFBaUIvd0IsTUFBTXFDLFVBQ3ZCMnVCLGFBQWFELG1CQUFtQixTQUFTLEtBQUtBLGdCQUM5Q0UsbUJBQW1CanhCLE1BQU13RSxZQUN6QkEsYUFBYXlzQixxQkFBcUIsU0FBUyxLQUFLQSxrQkFDaERDLGdCQUFnQmx4QixNQUFNbUIsU0FDdEJBLFdBQVUrdkIsa0JBQWtCLFNBQVMsS0FBS0E7UUFDMUNuQyxRQUFRQyxjQUFZeDBCO1FBQ3BCNEksT0FBT2YsU0FBUzJ1QjtXQUNiO0FBQUEsTUFDTGwyQixXQUFXaTBCO0FBQUFBLE1BQ1g5eUIsV0FBV2sxQixrQkFBa0JsMUIsV0FBVzhCLFNBQVNvRCxVQUFTaUM7QUFBQUEsTUFDMURrQixTQUFTO0FBQUEsUUFDUGEsV0FBVyxxQkFBcUI7aUJBQ3ZCdXJCLG1CQUFtQkEsZ0JBQWdCaDhCLE1BQU0sUUFBUUMsY0FBYztBQUFBO0FBQUEsUUFFeEV5OEIscUJBQXFCLCtCQUErQjtpQkFDM0NULDZCQUE2QkEsMEJBQTBCajhCLE1BQU0sUUFBUUMsY0FBYztBQUFBO0FBQUEsUUFFNUYwdkIsVUFBVSxvQkFBb0I7aUJBQ3JCdU0sa0JBQWtCQSxlQUFlbDhCLE1BQU0sUUFBUUMsY0FBYztBQUFBO0FBQUEsUUFFdEV3dkIsZUFBZSx5QkFBeUI7aUJBQy9CME0sdUJBQXVCQSxvQkFBb0JuOEIsTUFBTSxRQUFRQyxjQUFjO0FBQUE7QUFBQSxRQUVoRmdkLFNBQVMsbUJBQW1CO2lCQUNuQm1mLGlCQUFpQkEsY0FBY3A4QixNQUFNLFFBQVFDLGNBQWM7QUFBQTtBQUFBO0FBQUEsTUFHdEU2UCxZQUFZNnNCLFdBQVM3c0IsV0FBVzhXLFNBQVMsSUFBSWdXLE9BQUs5c0IsWUFBWXVxQixRQUFRO0FBQUEsUUFDcEVwcUIsY0FBY3VVO0FBQUFBLFFBQ2RxWSx3QkFBd0JyWTtBQUFBQSxRQUN4QjhOLHVCQUF1QjlOO0FBQUFBLFFBQ3ZCM0gsaUJBQWlCMkg7QUFBQUEsUUFDakJFLGFBQWFGO0FBQUFBLFFBQ2IrSyxpQkFBaUIvSztBQUFBQTtBQUFBQSxNQUVuQjdVLFdBQVc7QUFBQSxRQUNUcEgsT0FBT3d4QixlQUFheUI7QUFBQUEsUUFDcEJoekIsS0FBS3V4QixlQUFhMEI7QUFBQUEsUUFDbEI3d0IsUUFBUW12QixlQUFhMkI7QUFBQUEsUUFDckJwckIsU0FBU3lwQixlQUFhNEI7QUFBQUEsUUFDdEJ0ckIsT0FBTzBwQixlQUFhNkI7QUFBQUEsUUFDcEJ4TSxVQUFVMkssZUFBYThCO0FBQUFBLFFBQ3ZCdGQsWUFBWXdiLGVBQWErQjtBQUFBQSxRQUN6QjdILGVBQWU4RixlQUFhZ0M7QUFBQUE7QUFBQUE7QUFBQUE7QUFLbENodEIsU0FBT0UsU0FBUyxrQkFBa0I7UUFDNUI2VSxlQUFlLEtBQUtqbUIsT0FDcEIrb0IsT0FBTzlDLGFBQWE4QyxNQUNwQmtXLFVBQVVoWixhQUFhZ1osU0FDdkJycEIsU0FBU3FRLGFBQWFyUSxRQUN0QnNwQix3QkFBd0JqWixhQUFhNE8sa0JBQ3JDQSxtQkFBbUJxSywwQkFBMEIsU0FBUyxLQUFLQSx1QkFDM0RuOEIsU0FBUWtqQixhQUFhbGpCLE9BQ3JCdU8sWUFBWTJVLGFBQWEzVSxXQUN6QjZ0QixlQUFlbFosYUFBYWtaLGNBQzVCbjFCLFVBQVVpYyxhQUFheGMsTUFDdkJvVixVQUFTb0gsYUFBYXBILFFBQ3RCemEsU0FBUzZoQixhQUFhN2hCLFFBQ3RCazBCLG9CQUFvQnJTLGFBQWFxUyxtQkFDakN0VSxhQUFhaUMsYUFBYWpDLFlBQzFCMkYsc0JBQXNCMUQsYUFBYTBEO0FBQzlCMUQsaUJBQWFoVTtBQUNiZ1UsaUJBQWFyWDtBQUNicVgsaUJBQWFuVztBQUNibVcsaUJBQWF6YTtRQUNsQnhMLFFBQVFnQyw4QkFBOEJpa0IsY0FBY3FXO0FBRXhEdHlCLGNBQVVBLFdBQVc2VTtRQUNqQjhjLE9BQU8sS0FBS29CO1FBQ1pxQyxzQkFBc0IsS0FBS3RwQixNQUFNd0ksU0FDakN4TSxhQUFZc3RCLG9CQUFvQnR0QixXQUNoQ0csYUFBYW10QixvQkFBb0JudEIsWUFDakNGLFVBQVVxdEIsb0JBQW9CcnRCLFNBQzlCckksWUFBWTAxQixvQkFBb0IxMUIsV0FDaENuQixhQUFZNjJCLG9CQUFvQjcyQjtRQUNoQzgyQixhQUFhcHRCLFdBQVdndEIsV0FBV3JEO1FBQ25DM1UsUUFBUTBVLEtBQUtucEIsTUFBTXhJLFNBQVM7QUFBQSxNQUM5Qk47QUFBQUEsTUFDQXRGO0FBQUFBO3dFQUUwRCs2QjtpQkFDL0Nwc0IsS0FBS3pCLFdBQVcsZ0JBQWdCdFIsTUFBTTBULE9BQU87QUFBQSxhQUNqRDNRO0FBQUFBLGlCQUNMazhCO2NBQ0lqMUI7QUFBQUE7ZUFFQ3pCO0FBQUFBO2dCQUVDLEtBQUtnMUI7QUFBQUEsb0JBQ0QsS0FBS0o7QUFBQUE7cUVBRXFDbjlCOzs7Y0FHaERnSztBQUFBQSxnQkFDRTZVO0FBQUFBOzs7O21CQUtHL007QUFBQUE7MEJBRU8sS0FBS3VXO0FBQUFBLG9CQUNYLEtBQUs4VTtBQUFBQSxxQkFDSixLQUFLTTtBQUFBQSx1QkFDSCxLQUFLdlY7QUFBQUEsNEJBQ0EsS0FBS0M7QUFBQUEseUJBQ1IsS0FBS0M7QUFBQUEsc0JBQ1IsS0FBS2xEO0FBQUFBOzs7OztTQWdCaEJ3WDtBQUFBQSxFQUNQNThCLE1BQU1tVDtBQUVSeXBCLFNBQVM3YixlQUFlO0FBQUEsRUFDdEJzZSxjQUFjO0FBQUEsRUFDZHpWLE9BQU87QUFBQSxFQUNQdVYsU0FBUztBQUFBLEVBQ1RsVyxNQUFNOWdCLFFBQU1DO0FBQUFBLEVBQ1pELE9BQU8sQ0FBQ0EsUUFBTUMsT0FBT0QsUUFBTUUsTUFBTUYsUUFBTUksS0FBS0osUUFBTUs7QUFBQUEsRUFDbERpakIsTUFBTTtBQUFBLEVBQ05ubkIsUUFBUTtBQUFBLEVBQ1J1bEIscUJBQXFCO0FBQUEsRUFDckJ4QyxlQUFlbGYsUUFBTUk7QUFBQUEsRUFDckIwMUIsZUFBZTtBQUFBLEVBQ2ZELGlCQUFpQjtBQUFBLEVBQ2pCRCxnQkFBZ0I7QUFBQSxFQUNoQkYsZUFBZTtBQUFBLEVBQ2ZDLGFBQWE7QUFBQSxFQUNiSSxrQkFBa0I7QUFBQSxFQUNsQkMsb0JBQW9CO0FBQUEsRUFDcEJDLHVCQUF1QjtBQUFBLEVBQ3ZCem1CLG9CQUFvQjtBQUFBLEVBQ3BCb0gsUUFBUSxrQkFBa0I7V0FDakIsSUFBSWhVO0FBQUFBO0FBQUFBLEVBRWJxbUIsb0JBQW9CO0FBQUE7QUFFdEJ3TCxTQUFTaDVCLFlBNnhCTDtBQUNKLElBQUk0N0IsYUFBYUMsZUFBZTdDLFVBQVU7QUFBQSxFQUN4QzNULE1BQU07QUFBQSxFQUNOdGYsTUFBTTtBQUFBLEVBQ044SCxVQUFVO0FBQUE7QUFHWixJQUFJaXVCLGtCQUFrQiwwQkFBeUIveUIsTUFBTWpCLFNBQVNpMEIsT0FBTztNQUMvRC8wQixTQUFRK0IsS0FBSy9CLE9BQ2JDLE9BQU04QixLQUFLOUI7U0FDUjgwQixNQUFNbDBCLE9BQU9iLFFBQU8sV0FBV2MsV0FBVyxhQUNqRGkwQixNQUFNbDBCLE9BQU9aLE1BQUs4MEIsTUFBTXpzQyxHQUFHMFgsUUFBT0MsTUFBSyxXQUFXLE9BQU8sV0FBV2E7QUFBQUE7QUFHdEUsSUFBSWswQixvQkFBb0IseUJBQXlCanlCLE9BQU9qQyxTQUFTaTBCLE9BQU87TUFDbEUvMEIsU0FBUStDLE1BQU0vQyxPQUNkQyxPQUFNOEMsTUFBTTlDO1NBQ1Q4MEIsTUFBTWwwQixPQUFPYixRQUFPLEtBQUtjLFdBQVcsYUFBUWkwQixNQUFNbDBCLE9BQU9aLE1BQUssS0FBS2E7QUFBQUE7QUFHNUUsSUFBSW0wQixrQkFBa0IsMEJBQXlCelUsT0FBTzFmLFNBQVNpMEIsT0FBTztNQUNoRS8wQixTQUFRd2dCLE1BQU14Z0IsT0FDZEMsT0FBTXVnQixNQUFNdmdCO1NBQ1Q4MEIsTUFBTWwwQixPQUFPYixRQUFPLE1BQU1jLFdBQVcsYUFBUWkwQixNQUFNbDBCLE9BQU9aLE1BQUssTUFBTWE7QUFBQUE7QUFHOUUsSUFBSW8wQix1QkFBdUIsK0JBQThCeFUsT0FBTzVmLFNBQVNpMEIsT0FBTztNQUMxRS8wQixTQUFRMGdCLE1BQU0xZ0I7U0FDWCswQixNQUFNbDBCLE9BQU9iLFFBQU8sTUFBTWMsV0FBVztBQUFBO0FBRzlDLElBQUlxMEIscUJBQXFCLDZCQUE0QnhVLE9BQU83ZixTQUFTaTBCLE9BQU87TUFDdEU5MEIsT0FBTTBnQixNQUFNMWdCO1NBQ1QsYUFBUTgwQixNQUFNbDBCLE9BQU9aLE1BQUssTUFBTWE7QUFBQUE7QUFHekMsSUFBSW9ELFVBQVU7QUFBQSxFQUNaa3hCLFlBQVk7QUFBQSxFQUNaQyxXQUFXO0FBQUEsRUFDWEMsZUFBZTtBQUFBLEVBQ2ZDLG1CQUFtQk47QUFBQUEsRUFDbkJPLHNCQUFzQlA7QUFBQUEsRUFDdEJRLDJCQUEyQlA7QUFBQUEsRUFDM0JRLHlCQUF5QlA7QUFBQUEsRUFDekJRLGtCQUFrQjtBQUFBLEVBQ2xCQyxtQkFBbUI7QUFBQSxFQUNuQkMsaUJBQWlCO0FBQUEsRUFDakJDLHNCQUFzQmhCO0FBQUFBLEVBQ3RCaUIsb0JBQW9CZjtBQUFBQSxFQUNwQmdCLGtCQUFrQjtBQUFBLEVBQ2xCQyxrQkFBa0I7QUFBQSxFQUNsQkMsdUJBQXVCakI7QUFBQUE7QUFHekIsaUJBQWlCbjFCLE1BQU07TUFDakJxMkIsV0FBV3IyQixPQUFPQSxLQUFLczJCLGdCQUFnQnQyQjtNQUV2Q3EyQixhQUFhLFlBQVk7QUFDM0JBLGVBQVc7QUFBQSxhQUNGLENBQUNBLFVBQVU7QUFDcEJBLGVBQVcvdEI7QUFBQUE7U0FHTit0QjtBQUFBQTtBQUdULGdCQUFpQmp3QyxTQUFRO01BQ25CbXdDLFVBQVMsaUJBQWdCN3dDLElBQUdpL0IsR0FBRztXQUMxQkEsSUFBSWovQixHQUFFNndDLE9BQU81UixLQUFLai9CO0FBQUFBOzZCQUtBMnlCLEdBQUdDLEdBQUd0WSxNQUFNO1FBQ2pDcTJCLFdBQVdHLFFBQVF4MkI7UUFDbkJ5MkIsTUFBTUosV0FBV2p3QyxRQUFPaXlCLEdBQUdqWixRQUFRaTNCLFlBQVlqd0MsUUFBT2l5QjtRQUN0RHFlLE1BQU1MLFdBQVdqd0MsUUFBT2t5QixHQUFHbFosUUFBUWkzQixZQUFZandDLFFBQU9reUI7V0FDbkQsQ0FBQ21lLEtBQUtDLEtBQUtMO0FBQUFBO29CQUdIcDNCLE9BQU1lLE1BQU07UUFDdkJmLFVBQVMsUUFBUTtBQUNuQkEsY0FBTztBQUFBO1FBR0xvM0IsV0FBV0csUUFBUXgyQjtRQUVuQnEyQixVQUFVO2FBQ0xqd0MsUUFBTzZZLE9BQU1HLFFBQVFpM0IsVUFBVU07QUFBQUE7V0FHakN2d0MsUUFBTzZZLE9BQU0wM0I7QUFBQUE7a0JBR1AxM0IsT0FBTWUsTUFBTTtRQUNyQmYsVUFBUyxRQUFRO0FBQ25CQSxjQUFPO0FBQUE7UUFHTG8zQixXQUFXRyxRQUFReDJCO1FBRW5CcTJCLFVBQVU7YUFDTGp3QyxRQUFPNlksT0FBTU0sTUFBTTgyQixVQUFVTTtBQUFBQTtXQUcvQnZ3QyxRQUFPNlksT0FBTTAzQjtBQUFBQTtlQUtWdGUsR0FBR0MsR0FBR3RZLE1BQU07UUFDbEI0MkIscUJBQXFCQyxrQkFBa0J4ZSxHQUFHQyxHQUFHdFksT0FDN0N5MkIsTUFBTUcsbUJBQW1CLElBQ3pCRixNQUFNRSxtQkFBbUIsSUFDekJQLFdBQVdPLG1CQUFtQjtXQUUzQkgsSUFBSUssT0FBT0osS0FBS0w7QUFBQUE7Z0JBR1poZSxHQUFHQyxHQUFHdFksTUFBTTtXQUNoQixDQUFDeFgsSUFBRzZ2QixHQUFHQyxHQUFHdFk7QUFBQUE7ZUFHUHFZLEdBQUdDLEdBQUd0WSxNQUFNO1FBQ2xCKzJCLHNCQUFzQkYsa0JBQWtCeGUsR0FBR0MsR0FBR3RZLE9BQzlDeTJCLE1BQU1NLG9CQUFvQixJQUMxQkwsTUFBTUssb0JBQW9CLElBQzFCVixXQUFXVSxvQkFBb0I7V0FFNUJOLElBQUlPLFFBQVFOLEtBQUtMO0FBQUFBO2VBR2RoZSxHQUFHQyxHQUFHdFksTUFBTTtRQUNsQmkzQixzQkFBc0JKLGtCQUFrQnhlLEdBQUdDLEdBQUd0WSxPQUM5Q3kyQixNQUFNUSxvQkFBb0IsSUFDMUJQLE1BQU1PLG9CQUFvQixJQUMxQlosV0FBV1ksb0JBQW9CO1dBRTVCUixJQUFJUyxTQUFTUixLQUFLTDtBQUFBQTtnQkFHZGhlLEdBQUdDLEdBQUd0WSxNQUFNO1FBQ25CbTNCLHNCQUFzQk4sa0JBQWtCeGUsR0FBR0MsR0FBR3RZLE9BQzlDeTJCLE1BQU1VLG9CQUFvQixJQUMxQlQsTUFBTVMsb0JBQW9CLElBQzFCZCxXQUFXYyxvQkFBb0I7V0FFNUJWLElBQUlXLGVBQWVWLEtBQUtMO0FBQUFBO2dCQUdwQmhlLEdBQUdDLEdBQUd0WSxNQUFNO1FBQ25CcTNCLHNCQUFzQlIsa0JBQWtCeGUsR0FBR0MsR0FBR3RZLE9BQzlDeTJCLE1BQU1ZLG9CQUFvQixJQUMxQlgsTUFBTVcsb0JBQW9CLElBQzFCaEIsV0FBV2dCLG9CQUFvQjtXQUU1QlosSUFBSVcsZUFBZVYsS0FBS0w7QUFBQUE7b0JBR2hCcjNCLE1BQUtqTCxNQUFLQyxNQUFLZ00sTUFBTTtRQUNoQ0EsU0FBUyxRQUFRO0FBQ25CQSxhQUFPO0FBQUE7UUFHTHEyQixXQUFXRyxRQUFReDJCO1FBQ25CczNCLE9BQU9seEMsUUFBTzRZO1FBQ2R1NEIsT0FBT254QyxRQUFPMk47UUFDZHlqQyxPQUFPcHhDLFFBQU80TjtXQUNYc2pDLEtBQUt0dEIsVUFBVXV0QixNQUFNQyxNQUFNbkIsVUFBVTtBQUFBO2dCQUdqQzkxQixPQUFPQyxPQUFPO1FBQ3JCaTJCLE1BQU1yd0MsUUFBT21hO1FBQ2JtMkIsTUFBTXR3QyxRQUFPb2E7UUFDYmkzQixRQUFRcnhDLFFBQU8yTixJQUFJMGlDLEtBQUtDO1dBQ3JCZSxNQUFNZDtBQUFBQTtnQkFHRnAyQixPQUFPQyxPQUFPO1FBQ3JCaTJCLE1BQU1yd0MsUUFBT21hO1FBQ2JtMkIsTUFBTXR3QyxRQUFPb2E7UUFDYmszQixRQUFRdHhDLFFBQU80TixJQUFJeWlDLEtBQUtDO1dBQ3JCZ0IsTUFBTWY7QUFBQUE7a0JBR0ExM0IsT0FBTW1CLE1BQU07UUFDckIsQ0FBQ25CLFNBQVEsQ0FBQ21CO0FBQU0sYUFBTztRQUN2QnUzQixLQUFLdnhDLFFBQU9nYSxNQUFNVyxPQUFPO1FBQ3pCSSxLQUFLL2EsUUFBTzZZLE9BQU1HLFFBQVEsT0FBTzJCLE9BQU87V0FFckMzYSxRQUFPK2EsS0FBSyxNQUFNdzJCLElBQUksdUJBQXVCaEI7QUFBQUE7Z0JBR3pDMTNCLE9BQU0yNEIsT0FBTzUzQixNQUFNO1FBQzFCcTJCLFdBQVdHLFFBQVF4MkI7V0FDaEI1WixRQUFPNlksT0FBTWMsSUFBSTYzQixPQUFPdkIsVUFBVU07QUFBQUE7a0JBRzVCejJCLFFBQU9DLE1BQUtILE1BQU07UUFDM0JBLFNBQVMsUUFBUTtBQUNuQkEsYUFBTztBQUFBO1FBR0xxMkIsV0FBV0csUUFBUXgyQjtRQUVuQlIsVUFBVXBaLFFBQU84WixRQUFPeTJCO1FBQ3hCLzJCLE9BQU87V0FFSkMsS0FBSUwsU0FBU1csT0FBTTtBQUN4QlAsV0FBS0UsS0FBS047QUFDVkEsZ0JBQVVPLEtBQUlQLFNBQVMsR0FBRzYyQjtBQUFBQTtXQUdyQnoyQjtBQUFBQTtpQkFHS1gsT0FBTWUsTUFBTTtRQUNwQnEyQixXQUFXRyxRQUFReDJCO1FBQ25CQyxRQUFRYixTQUFRSCxPQUFNbzNCO1dBQ25CN3RDLElBQUd5WCxPQUFPaEIsU0FBUWdCLFFBQVFGLEtBQUlFLE9BQU8sR0FBR28yQjtBQUFBQTtpQkFHbkNoZSxHQUFHQyxHQUFHdFksTUFBTTtRQUNwQkEsU0FBUyxRQUFRO0FBQ25CQSxhQUFPO0FBQUE7UUFHTHEyQixXQUFXRyxRQUFReDJCO1FBRW5CeTJCLE1BQU1yd0MsUUFBT2l5QjtRQUNicWUsTUFBTXR3QyxRQUFPa3lCO1dBQ1ZvZSxJQUFJajFCLEtBQUtnMUIsS0FBS0o7QUFBQUE7b0JBR05wM0IsT0FBTTtRQUNqQmtDLEtBQUsvYSxRQUFPNlk7V0FDVGtDLEdBQUdyQztBQUFBQTt1QkFHU2tDLFNBQVM7UUFDeEJraUIsT0FBT2xpQixVQUFVNWEsUUFBT3l4QyxXQUFXNzJCLFdBQVc1YSxRQUFPeXhDO1dBQ2xEM1UsT0FBT0EsS0FBSzRVLG1CQUFtQjtBQUFBOzRCQUdmNzRCLE9BQU07V0FDdEI3WSxRQUFPNlksT0FBTUcsUUFBUSxTQUFTQSxRQUFRLFFBQVF1M0I7QUFBQUE7MkJBRy9CMTNCLE9BQU07V0FDckI3WSxRQUFPNlksT0FBTU0sTUFBTSxTQUFTQSxNQUFNLFFBQVFvM0I7QUFBQUE7d0JBRzlCMTNCLE9BQU07UUFDckJPLFVBQVVDLGlCQUFnQlI7UUFDMUJTLFFBQU9DLGdCQUFlVjtRQUN0QlcsT0FBTztXQUVKQyxLQUFJTCxTQUFTRSxRQUFPO0FBQ3pCRSxXQUFLRSxLQUFLTjtBQUNWQSxnQkFBVU8sS0FBSVAsU0FBUyxHQUFHO0FBQUE7V0FHckJJO0FBQUFBO3dCQWNZdUIsSUFBSUMscUJBQXFCMU0sU0FBUTtXQUM3Q3RPLFFBQU8rYSxJQUFJL0IsUUFBUSxPQUFPMjRCLE9BQU8zMkIsc0JBQXNCMU0sU0FBUWlpQztBQUFBQTt3QkFJbkR6MkIsUUFBT0MsTUFBSztXQUN4QnNCLE1BQUt2QixRQUFPQyxNQUFLO0FBQUE7bUNBR01ELFFBQU87UUFDakM4M0IsV0FBVzV4QyxRQUFPOFosUUFBT2QsUUFBUTtRQUNqQ0osT0FBTTVZLFFBQU84WjtXQUNWbEIsS0FBSXlDLEtBQUt1MkIsVUFBVTtBQUFBOzJCQUlKOTNCLFFBQU8wQixPQUFPO1FBQ2hDcTJCLFNBQVM3eEMsUUFBTzhaO1FBQ2hCZzRCLFNBQVM5eEMsUUFBT3diO1dBQ2JxMkIsT0FBT2YsU0FBU2dCLFFBQVE7QUFBQTsyQkFHVGg0QixRQUFPQyxNQUFLVCxPQUFNO1FBQ3BDeTRCLE9BQU8veEMsUUFBTytaO1FBQ2RpNEIsUUFBUWh5QyxRQUFPc1o7V0FDWnk0QixLQUFLRSxjQUFjRCxPQUFPO0FBQUE7dUJBSWZ0WCxPQUFPO1FBQ3JCd1gsYUFBYXhYLE1BQU0zZSxNQUNuQkMsU0FBU2syQixXQUFXcDRCLE9BQ3BCbUMsT0FBT2kyQixXQUFXbjRCLEtBQ2xCbUMsVUFBVWcyQixXQUFXLzFCLFFBQ3JCZzJCLGFBQWF6WCxNQUFNcmUsTUFDbkJDLFNBQVM2MUIsV0FBV3I0QixPQUNwQnlDLE9BQU80MUIsV0FBV3A0QixLQUNsQnlDLFVBQVUyMUIsV0FBV2gyQjtRQUNyQk0sWUFBWSxDQUFDekQsU0FBUWdELFFBQVEsU0FBUyxDQUFDaEQsU0FBUXNELFFBQVE7UUFDdkRJLE9BQU9yQixNQUFLVyxRQUFRVyxNQUFLVixNQUFNLFFBQVE7UUFDdkNXLE9BQU92QixNQUFLaUIsUUFBUUssTUFBS0osTUFBTSxRQUFRO1dBQ3BDRSxhQUNQcEMsS0FBS3pNLElBQUlnUCxNQUFNLEtBQUt2QyxLQUFLek0sSUFBSThPLE1BQU0sT0FDbEMsQ0FBQ0YsVUFBVSxDQUFDLENBQUNOLFlBQ2JGLFNBQVMsQ0FBQ00sV0FDVkwsT0FBTyxDQUFDTTtBQUFBQTt5QkFJVzYxQixPQUFPO1FBQ3ZCQyxjQUFjRCxNQUFNcjFCLE9BQ3BCakQsU0FBUXU0QixZQUFZdjRCLE9BQ3BCQyxPQUFNczRCLFlBQVl0NEIsS0FDbEJ1NEIsY0FBY0YsTUFBTW44QixPQUNwQmdILGFBQWFxMUIsWUFBWXg0QixPQUN6Qm9ELFdBQVdvMUIsWUFBWXY0QjtRQUN2Qnc0QixhQUFhdnlDLFFBQU84WixRQUFPZCxRQUFRO1FBQ25DOHVCLE9BQU85bkMsUUFBTytaO1FBQ2R5NEIsU0FBU3h5QyxRQUFPaWQ7UUFDaEJ3MUIsT0FBT3p5QyxRQUFPa2Q7UUFDZEUsa0JBQWtCbTFCLFdBQVd2QixlQUFleUIsTUFBTTtRQUVsRHAxQixVQUFVLENBQUNrMUIsV0FBVzdCLE9BQU81SSxNQUFNO1FBQ25DdnFCLGlCQUFpQkYsVUFBVXlxQixLQUFLOEksUUFBUTRCLFFBQVEsYUFBYTFLLEtBQUttSyxjQUFjTyxRQUFRO1dBQ3JGcDFCLG1CQUFtQkc7QUFBQUE7dUJBTVJDLE9BQU9DLE9BQU87UUFDNUIxQyxLQUFLL2EsUUFBT3dkO1FBQ1prMUIsTUFBTTF5QyxRQUFPeWQ7V0FDVjFDLEdBQUcyMUIsT0FBT2dDLEtBQUs7QUFBQTs2QkFVRztRQU1yQjMzQixLQUFLLElBQUlkO1FBQ1QwNEIsTUFBTSxJQUFJam9CLEtBQUszUCxHQUFHOUYsY0FBYyxNQUFNO1FBQ3RDMjlCLFdBQVc3M0IsR0FBR0s7UUFDZHkzQixhQUFhQyxPQUFPLEtBQUtILE1BQU10NEIsS0FBS0MsSUFBSXM0QjtRQUV4Q0csV0FBVy95QyxVQUFTZ3pDO1dBQ2pCRCxXQUFXRixhQUFhLElBQUk7QUFBQTtTQUc5QixJQUFJbDFCLGNBQWM7QUFBQSxJQUN2Qks7QUFBQUEsSUFDQUY7QUFBQUEsSUFDQXpFLGlCQUFpQkE7QUFBQUEsSUFDakJFLGdCQUFnQkE7QUFBQUEsSUFDaEI4RSxhQUFhQTtBQUFBQSxJQUNiMUQsUUFBUSxnQkFBZ0JELE9BQU91RCxVQUFTckQsU0FBUzthQUN4Q3UxQixRQUFPbndDLFFBQU8wYSxRQUFRRSxTQUFTRCxPQUFPc0Q7QUFBQUE7QUFBQUEsSUFFL0N4QyxJQUFJQTtBQUFBQSxJQUNKaEMsS0FBS0E7QUFBQUEsSUFDTG1DLElBQUlBO0FBQUFBLElBQ0pELEtBQUtBO0FBQUFBLElBQ0x2WixJQUFJQTtBQUFBQSxJQUNKa2IsS0FBS0E7QUFBQUEsSUFDTFksT0FBT0E7QUFBQUEsSUFDUEMsU0FBU0E7QUFBQUEsSUFDVG5GLFNBQVNBO0FBQUFBLElBQ1RHLE9BQU9BO0FBQUFBLElBQ1BsRCxPQUFPQTtBQUFBQSxJQUNQMEQsS0FBS0E7QUFBQUEsSUFDTDBCLE1BQU1BO0FBQUFBLElBQ05zQixNQUFNQTtBQUFBQSxJQUNOaFAsS0FBS0E7QUFBQUEsSUFDTEMsS0FBS0E7QUFBQUEsSUFDTDhLLFNBQVNBO0FBQUFBLElBQ1Q0RixhQUFhQTtBQUFBQSxJQUNiQyxhQUFhQTtBQUFBQSxJQUNiQyx3QkFBd0JBO0FBQUFBLElBQ3hCQyxnQkFBZ0JBO0FBQUFBLElBQ2hCQyxnQkFBZ0JBO0FBQUFBLElBQ2hCQyxZQUFZQTtBQUFBQSxJQUNaQyxjQUFjQTtBQUFBQSxJQUNkQyxZQUFZQTtBQUFBQSxJQUNaRztBQUFBQTtBQUFBQTs7OztBQ2huTUosbUNBQWdDLEtBQUs7QUFDbkMsV0FBTyxPQUFPLElBQUksYUFBYSxNQUFNO0FBQUEsTUFDbkMsV0FBVztBQUFBO0FBQUE7QUFJZixvQkFBaUIseUJBQXdCLDZCQUE0QixNQUFNLFFBQU8sUUFBUSxhQUFhLFFBQU87QUFBQTs7OztBQ045Ryx1QkFBb0I7QUFDbEIsc0JBQWlCLFlBQVcsT0FBTyxVQUFVLFNBQVUsUUFBUTtBQUM3RCxlQUFTLElBQUksR0FBRyxJQUFJLFVBQVUsUUFBUSxLQUFLO0FBQ3pDLFlBQUksU0FBUyxVQUFVO0FBRXZCLGlCQUFTLE9BQU8sUUFBUTtBQUN0QixjQUFJLE9BQU8sVUFBVSxlQUFlLEtBQUssUUFBUSxNQUFNO0FBQ3JELG1CQUFPLE9BQU8sT0FBTztBQUFBO0FBQUE7QUFBQTtBQUszQixhQUFPO0FBQUEsT0FDTiw2QkFBNEIsTUFBTSxRQUFPLFFBQVEsYUFBYSxRQUFPO0FBQ3hFLFdBQU8sVUFBUyxNQUFNLE1BQU07QUFBQTtBQUc5QixvQkFBaUIsV0FBVSw2QkFBNEIsTUFBTSxRQUFPLFFBQVEsYUFBYSxRQUFPO0FBQUE7OztBQ2pCaEcsMENBQXVDLFFBQVEsVUFBVTtBQUN2RCxRQUFJLFVBQVU7QUFBTSxhQUFPO0FBQzNCLFFBQUksU0FBUztBQUNiLFFBQUksYUFBYSxPQUFPLEtBQUs7QUFDN0IsUUFBSSxLQUFLO0FBRVQsU0FBSyxJQUFJLEdBQUcsSUFBSSxXQUFXLFFBQVEsS0FBSztBQUN0QyxZQUFNLFdBQVc7QUFDakIsVUFBSSxTQUFTLFFBQVEsUUFBUTtBQUFHO0FBQ2hDLGFBQU8sT0FBTyxPQUFPO0FBQUE7QUFHdkIsV0FBTztBQUFBO0FBR1Qsb0JBQWlCLGdDQUErQiw2QkFBNEIsTUFBTSxRQUFPLFFBQVEsYUFBYSxRQUFPO0FBQUE7Ozs7QUNmckgsNEJBQXlCLEdBQUcsSUFBRztBQUM3QixzQkFBaUIsbUJBQWtCLE9BQU8sa0JBQWtCLDBCQUF5QixJQUFHLElBQUc7QUFDekYsU0FBRSxZQUFZO0FBQ2QsYUFBTztBQUFBLE9BQ04sNkJBQTRCLE1BQU0sUUFBTyxRQUFRLGFBQWEsUUFBTztBQUN4RSxXQUFPLGlCQUFnQixHQUFHO0FBQUE7QUFHNUIsb0JBQWlCLGtCQUFpQiw2QkFBNEIsTUFBTSxRQUFPLFFBQVEsYUFBYSxRQUFPO0FBQUE7O0FDUnZHLE1BQUl0ZCxtQkFBaUIzRDtBQUVyQiwyQkFBd0IsVUFBVSxZQUFZO0FBQzVDLGFBQVMsWUFBWSxPQUFPLE9BQU8sV0FBVztBQUM5QyxhQUFTLFVBQVUsY0FBYztBQUNqQzJELHFCQUFlLFVBQVU7QUFBQTtBQUczQixvQkFBaUIsaUJBQWdCLDZCQUE0QixNQUFNLFFBQU8sUUFBUSxhQUFhLFFBQU87QUFBQTs7O0FDTnRHLHVCQUFxQjt1Q0FDYztBQUNuQyxJQUFJLFdBQVc7QUFBQSxFQUNiLFVBQVU7QUFBQSxFQUNWLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLE1BQU07QUFBQTtxQkFFVztBQUNuQixJQUFJLFFBQVE7QUFBQSxFQUNWLE9BQU87QUFBQSxFQUNQLE1BQU07QUFBQSxFQUNOLFdBQVc7QUFBQSxFQUNYLEtBQUs7QUFBQSxFQUNMLFFBQVE7QUFBQTtrQkFFTTtBQ2hCaEIsSUFBSXV4QywyQkFBeUJsMUM7QUFLN0IsSUFBSSxhQUFhazFDLHlCQUF1QjF6QztBQUV4QyxJQUFJLGFBQWFDO0FBRWpCLElBQUksWUFBWSxPQUFPLEtBQUssV0FBVyxPQUFPLElBQUksU0FBVSxHQUFHO0FBQzdELFNBQU8sV0FBVyxNQUFNO0FBQUE7QUFHWCxXQUFXLFFBQVEsVUFBVSxDQUFDLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUTtBQUcxRSxXQUFXLFFBQVE7QUFFZCxXQUFXLFFBQVE7QUFxQjdCLFdBQVcsUUFBUSxVQUFVLENBQUMsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLE1BQU0sYUFBYSxXQUFXLFFBQVEsU0FBUyxTQUFVLE1BQU0sS0FBSztBQUMxSixNQUFJLGdCQUFnQixVQUFVLFFBQVEsU0FBUyxNQUFNLE9BQU8sS0FBSyxTQUFTO0FBRTFFLE1BQUksZUFBZTtBQUNqQixXQUFPO0FBQUEsU0FDRjtBQUNMLGFBQVMsT0FBTyxVQUFVLFFBQVEsT0FBTyxJQUFJLE1BQU0sT0FBTyxJQUFJLE9BQU8sSUFBSSxJQUFJLE9BQU8sR0FBRyxPQUFPLE1BQU0sUUFBUTtBQUMxRyxXQUFLLE9BQU8sS0FBSyxVQUFVO0FBQUE7QUFHN0IsV0FBTyxXQUFXLFFBQVEsWUFBWSxNQUFNLFdBQVcsU0FBUyxDQUFDLE1BQU0sS0FBSyxPQUFPO0FBQUE7QUFBQTtBQU10RCxXQUFXLFFBQVEsVUFBVSxDQUFDLFdBQVcsUUFBUSxNQUFNLENBQUMsV0FBVyxnQkFBZ0IsV0FBVyxRQUFROzs7QUN2RHZJLHVCQUFxQjtxQkFDRjt5QkFDSTtBQVN2QixrQkFBa0IsTUFBTSxPQUFPO0FBQzdCLE1BQUksUUFBUTtBQUNaLE1BQUksT0FBTyxVQUFVO0FBQVksWUFBUSxNQUFNO0FBQUEsV0FBZSxPQUFPLFVBQVUsWUFBWSxPQUFPLFNBQVMsWUFBWSxRQUFRLFFBQVEsU0FBUztBQUFNLFlBQVEsS0FBSztBQUNuSyxTQUFPO0FBQUE7QUFHVCxJQUFJLGVBQWUsdUJBQXNCLEtBQUs7QUFDNUMsU0FBTyxTQUFVLE1BQU07QUFDckIsV0FBTyxTQUFTLE1BQU07QUFBQTtBQUFBO3lCQUlIOztBQ3ZCdkIsSUFBSXl6QywyQkFBeUJsMUM7QUFFN0JtMUMsMEJBQXFCOzBCQUNBO0FBRXJCLElBQUlDLFdBQVNGLHlCQUF1QjF6QztBQUVwQyxJQUFJLGFBQTBCNHpDLHlCQUFPLFFBQVE7MEJBRXhCOztBQ1RyQixNQUFJLDBCQUF5QnAxQztBQUU3Qix3QkFBcUI7QUFDckIscUJBQWtCO0FBRWxCLE1BQUksa0JBQWtCLHdCQUF1QndCO0FBRTVCLDBCQUF1QkM7QUFFeEMsTUFBSSxVQUFTLHdCQUF1QjR6QztBQUVwQyxNQUFJLFFBQVEsd0JBQXVCQztBQUVuQyxNQUFJLGNBQWFDO0FBRWpCLE1BQUksY0FBY0M7QUFFbEIsTUFBSSxnQkFBNEIseUJBQVUsa0JBQWtCO0FBQzFELFFBQUksZ0JBQWdCLFNBQVMsZUFBYztBQUUzQyw2QkFBd0I7QUFDdEIsVUFBSTtBQUVKLGVBQVMsT0FBTyxVQUFVLFFBQVEsT0FBTyxJQUFJLE1BQU0sT0FBTyxPQUFPLEdBQUcsT0FBTyxNQUFNLFFBQVE7QUFDdkYsYUFBSyxRQUFRLFVBQVU7QUFBQTtBQUd6QixjQUFRLGlCQUFpQixLQUFLLE1BQU0sa0JBQWtCLENBQUMsTUFBTSxPQUFPLFVBQVU7QUFFOUUsWUFBTSxpQkFBaUIsU0FBVSxHQUFHO0FBQ2xDLFlBQUksRUFBRSxXQUFXO0FBQUc7QUFFcEIsY0FBTSxRQUFRLFVBQVUsY0FBYyxNQUFNLE1BQU0sT0FBTyxVQUFVO0FBQUE7QUFHckUsWUFBTSxtQkFBbUIsU0FBVSxHQUFHO0FBQ3BDLFlBQUksRUFBRSxXQUFXO0FBQUc7QUFFcEIsY0FBTSxRQUFRLFVBQVUsY0FBYyxNQUFNLE1BQU0sT0FBTyxVQUFVO0FBQUE7QUFHckUsWUFBTSxtQkFBbUIsU0FBVSxHQUFHO0FBQ3BDLFlBQUksRUFBRSxXQUFXO0FBQUc7QUFFcEIsY0FBTSxRQUFRLFVBQVUsY0FBYyxNQUFNLE1BQU0sT0FBTyxVQUFVO0FBQUE7QUFHckUsWUFBTSxvQkFBb0IsU0FBVSxHQUFHO0FBQ3JDLFlBQUksRUFBRSxXQUFXO0FBQUc7QUFFcEIsY0FBTSxRQUFRLFVBQVUsY0FBYyxNQUFNLE1BQU0sT0FBTyxVQUFVO0FBQUE7QUFHckUsWUFBTSxzQkFBc0IsU0FBVSxHQUFHO0FBQ3ZDLFlBQUksRUFBRSxXQUFXO0FBQUc7QUFJcEIsWUFBSSxpQkFBaUIsRUFBRSxPQUFPLFVBQVUsU0FBUztBQUNqRCxZQUFJLENBQUM7QUFBZ0IsZ0JBQU0sUUFBUSxVQUFVLGNBQWMsTUFBTSxNQUFNLE9BQU87QUFBQTtBQUdoRixhQUFPO0FBQUE7QUFHVCxRQUFJLFNBQVMsY0FBYTtBQUUxQixXQUFPLGVBQWUsc0JBQXNCLFdBQVc7QUFDckQsVUFBSSxNQUFNLGNBQWMsUUFBUSxjQUFjLFNBQVMsT0FBTztBQUM5RCxhQUFvQix3QkFBTyxRQUFRLGNBQWMsT0FBTztBQUFBLFFBQ3RELFdBQVcsMkJBQTJCLE1BQU07QUFBQSxRQUM1QyxhQUFhLEtBQUssaUJBQWlCO0FBQUEsU0FDckIsd0JBQU8sUUFBUSxjQUFjLE9BQU87QUFBQSxRQUNsRCxXQUFXLDJCQUEyQixNQUFNO0FBQUE7QUFBQTtBQUloRCxXQUFPLFNBQVMsa0JBQWtCO0FBQ2hDLFVBQUksY0FBYyxLQUFLLE9BQ25CLFFBQVEsWUFBWSxPQUNwQixPQUFPLFlBQVksTUFDbkIsa0JBQWlCLFlBQVksZ0JBQzdCLGtCQUFpQixZQUFZLGdCQUM3QixZQUFZLFlBQVk7QUFDNUIsVUFBSSxXQUFXLEtBQUssTUFBTTtBQUMxQixVQUFJLE1BQU07QUFBYSxlQUFvQix3QkFBTyxRQUFRLGFBQWEsVUFBVTtBQUFBLFVBQy9FLGVBQWUsTUFBTSxTQUFTLFNBQVMsTUFBTSxXQUFXO0FBQUE7QUFFMUQsVUFBSSxZQUFZLEtBQUssUUFBUTtBQUM3QixVQUFJLG9CQUFvQixVQUFVLG1CQUM5QixvQkFBb0IsVUFBVTtBQUNsQyxVQUFJLGNBQWMsb0JBQW9CLENBQUMsS0FBSyxZQUFXLFVBQVUsT0FBTyxxQkFBcUI7QUFHN0YsVUFBSSxDQUFDLGFBQWE7QUFDaEIsZUFBTztBQUFBO0FBdUJULFVBQUksY0FBYyxhQUFjLHFCQUFvQixDQUFDLEtBQUssWUFBVyxVQUFVLE9BQU8scUJBQXFCO0FBRTNHLFVBQUksZUFBZSxhQUFhO0FBUzlCLFlBQUksV0FBVztBQUFBLFVBQ2IsYUFBYSxLQUFLO0FBQUEsVUFDbEIsY0FBYyxLQUFLO0FBQUE7QUFHckIsWUFBSSxhQUFhO0FBRWYsY0FBSSxjQUFjO0FBQ2xCLGNBQUksWUFBWTtBQUVoQixjQUFJLFNBQVMsUUFBUTtBQUNuQiwwQkFBYyxDQUFDLG1CQUFrQixLQUFLLGFBQWE7QUFDbkQsd0JBQVksQ0FBQyxtQkFBa0IsS0FBSyxhQUFhO0FBQUEsaUJBQzVDO0FBQ0wsMEJBQWMsQ0FBQyxtQkFBa0IsS0FBSyxhQUFhO0FBQ25ELHdCQUFZLENBQUMsbUJBQWtCLEtBQUssYUFBYTtBQUFBO0FBR25ELG1CQUFTLFdBQXdCLHdCQUFPLFFBQVEsY0FBYyxPQUFPO0FBQUEsWUFDbkUsV0FBVztBQUFBLGFBQ1YsYUFBYSxTQUFTLE1BQU0sVUFBVTtBQUFBO0FBRzNDLFlBQUksVUFBVSxrQkFBa0IsZUFDaEMsVUFBVSxrQkFBa0IsVUFBVSxPQUNwQztBQUVBLG1CQUFTLGdCQUFnQixNQUFNLFNBQVMsU0FBUyxNQUFNLFdBQVc7QUFBQTtBQUdwRSxtQkFBd0Isd0JBQU8sUUFBUSxhQUFhLFVBQVU7QUFBQTtBQUdoRSxhQUFPO0FBQUE7QUFHVCxXQUFPO0FBQUEsSUFDUCxRQUFPLFFBQVE7QUFFakIsZ0JBQWEsY0FBYyxZQUFZO0FBQ3ZDLGdCQUFhLFlBV1Q7QUFDSixNQUFJLFlBQVc7QUFDZixxQkFBa0I7QUFDbEIsb0JBQWlCLFNBQVE7QUFBQTs7Ozs7O0FDdkx6QixJQUFJTiwyQkFBeUJsMUM7QUFFN0J5MUMseUJBQXFCO29DQUNXO3NCQUNkOzZCQUNPOytCQUNFO3NCQUNUO0FBRWxCLElBQUksWUFBWVAseUJBQXVCO0FBRXZDLElBQUksV0FBV0EseUJBQXVCO0FBRXRDLElBQUksVUFBVUEseUJBQXVCO0FBRXJDLDBCQUEwQixNQUFNLFNBQVMsUUFBUTtBQUMvQyxNQUFJLFdBQVcsUUFBUTtBQUNyQixhQUFTO0FBQUE7QUFHWCxhQUFXLFFBQVEsU0FBUyxRQUFRLE1BQU0sU0FBUztBQUFBLElBQ2pELFNBQVM7QUFBQTtBQUFBO0FBSWIseUJBQXlCLFdBQVcsSUFBRyxJQUFHO0FBQ3hDLFNBQU8sQ0FBQyxpQkFBaUIsVUFBVSxTQUFTLFdBQVcsU0FBUyxpQkFBaUIsSUFBRztBQUFBO0FBR3RGLCtCQUErQixNQUFNLE1BQU07QUFDekMsTUFBSSxVQUFVLEtBQUssU0FDZixVQUFVLEtBQUs7QUFDbkIsTUFBSSxTQUFTLFNBQVMsaUJBQWlCLFNBQVM7QUFDaEQsYUFBVyxTQUFTLFNBQVMsUUFBUSxjQUFjO0FBQUE7QUFHckQsaUJBQWlCLE1BQU0sUUFBUTtBQUM3QixTQUFPLENBQUMsQ0FBQyxzQkFBc0IsTUFBTTtBQUFBO0FBR3ZDLDZCQUE2QixHQUFHO0FBQzlCLE1BQUksU0FBUztBQUViLE1BQUksRUFBRSxXQUFXLEVBQUUsUUFBUSxRQUFRO0FBQ2pDLGFBQVMsRUFBRSxRQUFRO0FBQUE7QUFHckIsU0FBTztBQUFBLElBQ0wsU0FBUyxPQUFPO0FBQUEsSUFDaEIsU0FBUyxPQUFPO0FBQUEsSUFDaEIsT0FBTyxPQUFPO0FBQUEsSUFDZCxPQUFPLE9BQU87QUFBQTtBQUFBO0FBSWxCLElBQUksaUJBQWlCO0FBQ3JCLElBQUksZ0JBQWdCO0FBRXBCLElBQUksWUFBeUIsMkJBQVk7QUFDdkMsc0JBQW1CLE1BQU0sT0FBTztBQUM5QixRQUFJLFFBQVEsVUFBVSxTQUFTLEtBQUssT0FDaEMsZUFBZSxNQUFNLFFBQ3JCLFVBQVMsaUJBQWlCLFNBQVMsUUFBUSxjQUMzQyx3QkFBd0IsTUFBTSxvQkFDOUIscUJBQXFCLDBCQUEwQixTQUFTLE1BQU07QUFFbEUsU0FBSyxhQUFhO0FBQ2xCLFNBQUssWUFBWTtBQUNqQixTQUFLLGNBQWMsQ0FBQyxRQUFRO0FBQzVCLFNBQUsscUJBQXFCO0FBQzFCLFNBQUssYUFBYSxPQUFPLE9BQU87QUFDaEMsU0FBSyxzQkFBc0IsS0FBSyxvQkFBb0IsS0FBSztBQUN6RCxTQUFLLG1CQUFtQixLQUFLLGlCQUFpQixLQUFLO0FBQ25ELFNBQUssMEJBQTBCLEtBQUssd0JBQXdCLEtBQUs7QUFDakUsU0FBSyxlQUFlLEtBQUssYUFBYSxLQUFLO0FBQzNDLFNBQUssMkJBQTJCLEtBQUsseUJBQXlCLEtBQUs7QUFDbkUsU0FBSywrQkFBK0IsS0FBSyw2QkFBNkIsS0FBSztBQUczRSxTQUFLLGlDQUFpQyxpQkFBaUIsYUFBYSxXQUFZO0FBQUEsT0FBSTtBQUNwRixTQUFLLHlCQUF5QixpQkFBaUIsV0FBVyxLQUFLO0FBQy9ELFNBQUssdUJBQXVCLGlCQUFpQixTQUFTLEtBQUs7QUFDM0QsU0FBSyxpQ0FBaUMsaUJBQWlCLFFBQVEsS0FBSztBQUNwRSxTQUFLLHFDQUFxQyxpQkFBaUIsWUFBWSxLQUFLO0FBRTVFLFNBQUs7QUFBQTtBQUdQLE1BQUksU0FBUyxXQUFVO0FBRXZCLFNBQU8sS0FBSyxZQUFZLE1BQU0sU0FBUztBQUNyQyxRQUFJLFdBQVcsS0FBSyxXQUFXLFNBQVUsTUFBSyxXQUFXLFFBQVE7QUFDakUsYUFBUyxLQUFLO0FBQ2QsV0FBTztBQUFBLE1BQ0wsUUFBUSxrQkFBa0I7QUFDeEIsWUFBSSxNQUFNLFNBQVMsUUFBUTtBQUMzQixZQUFJLFFBQVE7QUFBSSxtQkFBUyxPQUFPLEtBQUs7QUFBQTtBQUFBO0FBQUE7QUFLM0MsU0FBTyxPQUFPLGNBQWMsTUFBTTtBQUNoQyxhQUFTLE9BQU8sVUFBVSxRQUFRLE9BQU8sSUFBSSxNQUFNLE9BQU8sSUFBSSxPQUFPLElBQUksSUFBSSxPQUFPLEdBQUcsT0FBTyxNQUFNLFFBQVE7QUFDMUcsV0FBSyxPQUFPLEtBQUssVUFBVTtBQUFBO0FBRzdCLFFBQUk7QUFDSixRQUFJLFdBQVcsS0FBSyxXQUFXLFNBQVM7QUFDeEMsYUFBUyxRQUFRLFNBQVUsS0FBSTtBQUM3QixVQUFJLFdBQVc7QUFBVyxpQkFBUyxJQUFHLE1BQU0sUUFBUTtBQUFBO0FBRXRELFdBQU87QUFBQTtBQUdULFNBQU8sV0FBVyxvQkFBb0I7QUFDcEMsU0FBSyxhQUFhO0FBQ2xCLFNBQUssYUFBYSxPQUFPLE9BQU87QUFDaEMsU0FBSyxrQ0FBa0MsS0FBSztBQUM1QyxTQUFLLCtCQUErQixLQUFLO0FBQ3pDLFNBQUssc0JBQXNCLEtBQUs7QUFDaEMsU0FBSyxrQkFBa0IsS0FBSztBQUM1QixTQUFLLHVCQUF1QixLQUFLO0FBQ2pDLFNBQUssd0JBQXdCLEtBQUs7QUFDbEMsU0FBSywwQkFBMEIsS0FBSztBQUNwQyxTQUFLLGtDQUFrQyxLQUFLO0FBQzVDLFNBQUssc0NBQXNDLEtBQUs7QUFBQTtBQUdsRCxTQUFPLGFBQWEscUJBQW9CLE1BQU07QUFDNUMsUUFBSSxNQUFNLEtBQUs7QUFDZixRQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7QUFBVyxhQUFPO0FBQ3BDLFdBQU8sZUFBZSxLQUFLLGlCQUFpQjtBQUFBO0FBRzlDLFNBQU8sU0FBUyxnQkFBZ0IsT0FBTztBQUNyQyxRQUFJLE1BQU0sS0FBSztBQUVmLFFBQUksQ0FBQyxPQUFPLENBQUMsS0FBSztBQUFXLGFBQU87QUFDcEMsV0FBTyxNQUFNLE9BQU8sS0FBSyxZQUFZO0FBQUE7QUFLdkMsU0FBTyx3QkFBd0IsK0JBQStCLFNBQVMsY0FBYztBQUNuRixRQUFJLFFBQVE7QUFFWixRQUFJLFFBQVE7QUFDWixRQUFJLDBCQUEwQjtBQUM5QixRQUFJLHlCQUF5QjtBQUU3QixRQUFJLG1CQUFtQiwyQkFBMEIsZUFBYztBQUM3RCxjQUFRLFdBQVcsV0FBWTtBQUM3QjtBQUNBLGdCQUFRO0FBQUEsU0FDUCxNQUFNO0FBQ1QsZ0NBQTBCLGlCQUFpQixhQUFhLFdBQVk7QUFDbEUsZUFBTztBQUFBO0FBRVQsK0JBQXlCLGlCQUFpQixZQUFZLFdBQVk7QUFDaEUsZUFBTztBQUFBO0FBQUE7QUFJWCxRQUFJLDJCQUEyQixpQkFBaUIsY0FBYztBQUU5RCxRQUFJLFVBQVUsb0JBQW1CO0FBQy9CLFVBQUksT0FBTztBQUNULHFCQUFhO0FBQUE7QUFHZixVQUFJLHlCQUF5QjtBQUMzQjtBQUFBO0FBR0YsVUFBSSx3QkFBd0I7QUFDMUI7QUFBQTtBQUdGLGNBQVE7QUFDUixnQ0FBMEI7QUFDMUIsK0JBQXlCO0FBQUE7QUFHM0IsUUFBSSxjQUFjO0FBQ2hCLHVCQUFpQjtBQUFBO0FBR25CLFdBQU8sV0FBWTtBQUNqQjtBQUNBO0FBQUE7QUFBQTtBQU1KLFNBQU8sMkJBQTJCLG9DQUFvQztBQUNwRSxRQUFJLFNBQVM7QUFFYixRQUFJLDBCQUEwQixpQkFBaUIsYUFBYSxTQUFVLEdBQUc7QUFDdkUsYUFBTztBQUVQLGFBQU8sb0JBQW9CO0FBRTNCLGFBQU8sOEJBQThCLGlCQUFpQixhQUFhLE9BQU87QUFBQTtBQUU1RSxRQUFJLDJCQUEyQixpQkFBaUIsY0FBYyxTQUFVLEdBQUc7QUFDekUsYUFBTztBQUVQLGFBQU8sOEJBQThCLE9BQU8sc0JBQXNCLE9BQU8scUJBQXFCO0FBQUE7QUFHaEcsU0FBSyw4QkFBOEIsV0FBWTtBQUM3QztBQUNBO0FBQUE7QUFBQTtBQUlKLFNBQU8sMkJBQTJCLGtDQUFrQyxHQUFHO0FBQ3JFLFFBQUksdUJBQXVCLG9CQUFvQixJQUMzQyxRQUFRLHFCQUFxQixPQUM3QixRQUFRLHFCQUFxQixPQUM3QixVQUFVLHFCQUFxQixTQUMvQixVQUFVLHFCQUFxQjtBQUVuQyxTQUFLLEtBQUssbUJBQW1CO0FBQUEsTUFDM0IsR0FBRztBQUFBLE1BQ0gsR0FBRztBQUFBLE1BQ0g7QUFBQSxNQUNBO0FBQUE7QUFFRixNQUFFO0FBQUE7QUFHSixTQUFPLCtCQUErQixzQ0FBc0MsR0FBRztBQUM3RSxRQUFJLHdCQUF3QixvQkFBb0IsSUFDNUMsUUFBUSxzQkFBc0IsT0FDOUIsUUFBUSxzQkFBc0IsT0FDOUIsVUFBVSxzQkFBc0IsU0FDaEMsVUFBVSxzQkFBc0I7QUFFcEMsU0FBSyxLQUFLLHVCQUF1QjtBQUFBLE1BQy9CLEdBQUc7QUFBQSxNQUNILEdBQUc7QUFBQSxNQUNIO0FBQUEsTUFDQTtBQUFBO0FBRUYsTUFBRTtBQUFBO0FBR0osU0FBTyxzQkFBc0IsNkJBQTZCLEdBQUc7QUFDM0QsUUFBSSxLQUFLLFlBQVk7QUFDbkI7QUFBQTtBQUdGLFFBQUksd0JBQXdCLG9CQUFvQixJQUM1QyxVQUFVLHNCQUFzQixTQUNoQyxVQUFVLHNCQUFzQixTQUNoQyxRQUFRLHNCQUFzQixPQUM5QixRQUFRLHNCQUFzQjtBQUVsQyxRQUFJLE9BQU8sS0FBSyxhQUNaLFVBQ0E7QUFFSixRQUFJLEVBQUUsVUFBVSxLQUFLLEVBQUUsV0FBVyxLQUFLLENBQUMsZ0JBQWdCLE1BQU0sU0FBUztBQUFVO0FBRWpGLFFBQUksQ0FBQyxLQUFLLGVBQWUsUUFBUSxLQUFLLFVBQVUsU0FBUyxNQUFNLEVBQUUsU0FBUztBQUN4RSxVQUFJLHFCQUFxQixrQkFBa0IsSUFDdkMsT0FBTSxtQkFBbUIsS0FDekIsUUFBTyxtQkFBbUIsTUFDMUIsVUFBUyxtQkFBbUIsUUFDNUIsU0FBUSxtQkFBbUI7QUFFL0IsbUJBQWEsaUJBQWlCO0FBQzlCLGlCQUFXLGVBQWU7QUFBQSxRQUN4QixLQUFLLFdBQVcsTUFBTTtBQUFBLFFBQ3RCLE1BQU0sV0FBVyxPQUFPO0FBQUEsUUFDeEIsUUFBUSxXQUFXLFNBQVM7QUFBQSxRQUM1QixPQUFPLFdBQVcsUUFBUTtBQUFBLFNBQ3pCO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxNQUFNO0FBQUE7QUFFUixVQUFJLENBQUM7QUFBVTtBQUFBO0FBR2pCLFFBQUksU0FBUyxLQUFLLEtBQUssZ0JBQWdCLEtBQUssb0JBQW9CO0FBQUEsTUFDOUQsU0FBUyxTQUFTLEtBQUssRUFBRTtBQUFBLE1BQ3pCLEdBQUc7QUFBQSxNQUNILEdBQUc7QUFBQSxNQUNIO0FBQUEsTUFDQTtBQUFBO0FBRUYsUUFBSSxXQUFXO0FBQU87QUFFdEIsWUFBUSxFQUFFO0FBQUEsV0FDSDtBQUNILGFBQUsscUJBQXFCLGlCQUFpQixXQUFXLEtBQUs7QUFDM0QsYUFBSyxpQkFBaUIsaUJBQWlCLFdBQVcsS0FBSztBQUN2RCxhQUFLLHNCQUFzQixpQkFBaUIsYUFBYSxLQUFLO0FBQzlEO0FBQUEsV0FFRztBQUNILGFBQUssaUJBQWlCO0FBRXRCLGFBQUsscUJBQXFCLGlCQUFpQixZQUFZLEtBQUs7QUFDNUQsYUFBSyxzQkFBc0IsaUJBQWlCLGFBQWEsS0FBSztBQUM5RDtBQUFBO0FBQUE7QUFPTixTQUFPLDBCQUEwQixpQ0FBaUMsR0FBRztBQUNuRSxRQUFJLHdCQUF3QixvQkFBb0IsSUFDNUMsUUFBUSxzQkFBc0IsT0FDOUIsUUFBUSxzQkFBc0I7QUFFbEMsU0FBSyxZQUFZO0FBQ2pCLFNBQUssc0JBQXNCLEtBQUs7QUFDaEMsU0FBSyx1QkFBdUIsS0FBSztBQUNqQyxRQUFJLENBQUMsS0FBSztBQUFtQjtBQUM3QixRQUFJLFNBQVMsQ0FBQyxLQUFLLGlCQUFpQixVQUFVLFNBQVMsS0FBSyxhQUFhLEVBQUU7QUFDM0UsUUFBSSxTQUFTLEtBQUs7QUFDbEIsUUFBSSxRQUFRLEtBQUssUUFBUSxPQUFPO0FBQ2hDLFNBQUssb0JBQW9CO0FBRXpCLFFBQUksRUFBRSxRQUFRLFVBQVU7QUFDdEIsYUFBTyxLQUFLLEtBQUs7QUFBQTtBQUduQixRQUFJLENBQUMsUUFBUTtBQUNYLGFBQU8sS0FBSyxLQUFLO0FBQUE7QUFHbkIsUUFBSSxTQUFTLFFBQVE7QUFDbkIsYUFBTyxLQUFLLGtCQUFrQjtBQUFBO0FBSWhDLFFBQUksQ0FBQztBQUFPLGFBQU8sS0FBSyxLQUFLLFVBQVU7QUFBQTtBQUd6QyxTQUFPLG9CQUFvQiwyQkFBMkIsR0FBRztBQUN2RCxRQUFJLHdCQUF3QixvQkFBb0IsSUFDNUMsUUFBUSxzQkFBc0IsT0FDOUIsUUFBUSxzQkFBc0IsT0FDOUIsVUFBVSxzQkFBc0IsU0FDaEMsVUFBVSxzQkFBc0I7QUFFcEMsUUFBSSxNQUFNLElBQUksT0FBTztBQUVyQixRQUFJLEtBQUssa0JBQWtCLE1BQU0sS0FBSyxlQUFlLFlBQVksZUFBZTtBQUU5RSxXQUFLLGlCQUFpQjtBQUN0QixhQUFPLEtBQUssS0FBSyxlQUFlO0FBQUEsUUFDOUIsR0FBRztBQUFBLFFBQ0gsR0FBRztBQUFBLFFBQ0g7QUFBQSxRQUNBO0FBQUE7QUFBQTtBQUtKLFNBQUssaUJBQWlCO0FBQUEsTUFDcEIsV0FBVztBQUFBO0FBRWIsV0FBTyxLQUFLLEtBQUssU0FBUztBQUFBLE1BQ3hCLEdBQUc7QUFBQSxNQUNILEdBQUc7QUFBQSxNQUNIO0FBQUEsTUFDQTtBQUFBO0FBQUE7QUFJSixTQUFPLG1CQUFtQiwwQkFBMEIsR0FBRztBQUNyRCxRQUFJLEtBQUssc0JBQXNCLFFBQVEsS0FBSyxZQUFZO0FBQ3REO0FBQUE7QUFHRixRQUFJLHdCQUF3QixLQUFLLG1CQUM3QixLQUFJLHNCQUFzQixHQUMxQixLQUFJLHNCQUFzQjtBQUU5QixRQUFJLHdCQUF3QixvQkFBb0IsSUFDNUMsUUFBUSxzQkFBc0IsT0FDOUIsUUFBUSxzQkFBc0I7QUFFbEMsUUFBSSxLQUFJLEtBQUssSUFBSSxLQUFJO0FBQ3JCLFFBQUksS0FBSSxLQUFLLElBQUksS0FBSTtBQUNyQixRQUFJLFFBQU8sS0FBSyxJQUFJLE9BQU8sS0FDdkIsT0FBTSxLQUFLLElBQUksT0FBTyxLQUN0QixNQUFNLEtBQUs7QUFHZixRQUFJLEtBQUssUUFBUSxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUUsT0FBSyxLQUFJO0FBQ25EO0FBQUE7QUFHRixTQUFLLFlBQVk7QUFDakIsU0FBSyxjQUFjO0FBQUEsTUFDakIsS0FBSztBQUFBLE1BQ0wsTUFBTTtBQUFBLE1BQ04sR0FBRztBQUFBLE1BQ0gsR0FBRztBQUFBLE1BQ0gsT0FBTyxRQUFPO0FBQUEsTUFDZCxRQUFRLE9BQU07QUFBQTtBQUdoQixRQUFJLENBQUMsS0FBSztBQUNSLFdBQUssS0FBSyxlQUFlLEtBQUs7QUFBQTtBQUdoQyxRQUFJLENBQUMsS0FBSyxRQUFRLE9BQU87QUFBUSxXQUFLLEtBQUssYUFBYSxLQUFLO0FBQzdELE1BQUU7QUFBQTtBQUdKLFNBQU8sZUFBZSxzQkFBc0IsR0FBRztBQUM3QyxTQUFLLE9BQU8sRUFBRSxXQUFXLEVBQUU7QUFBQTtBQUc3QixTQUFPLFVBQVUsaUJBQWlCLE9BQU8sT0FBTztBQUM5QyxRQUFJLHlCQUF5QixLQUFLLG1CQUM5QixLQUFJLHVCQUF1QixHQUMzQixLQUFJLHVCQUF1QixHQUMzQixVQUFVLHVCQUF1QjtBQUNyQyxXQUFPLENBQUMsV0FBVyxLQUFLLElBQUksUUFBUSxPQUFNLGtCQUFrQixLQUFLLElBQUksUUFBUSxPQUFNO0FBQUE7QUFHckYsU0FBTztBQUFBO0FBUVQsMkJBQTJCLFVBQVU7QUFDbkMsTUFBSSxhQUFhLFFBQVE7QUFDdkIsZUFBVztBQUFBO0FBR2IsTUFBSSxPQUFPLGFBQWE7QUFBVSxlQUFXO0FBQUEsTUFDM0MsS0FBSztBQUFBLE1BQ0wsTUFBTTtBQUFBLE1BQ04sT0FBTztBQUFBLE1BQ1AsUUFBUTtBQUFBO0FBRVYsU0FBTztBQUFBO0FBV1Qsd0JBQXdCLE9BQU8sT0FBTyxXQUFXO0FBQy9DLE1BQUksY0FBYyxRQUFRO0FBQ3hCLGdCQUFZO0FBQUE7QUFHZCxNQUFJLG9CQUFvQixpQkFBaUIsUUFDckMsT0FBTyxrQkFBa0IsS0FDekIsUUFBUSxrQkFBa0IsTUFDMUIsd0JBQXdCLGtCQUFrQixPQUMxQyxTQUFTLDBCQUEwQixTQUFTLFFBQVEsdUJBQ3BELHdCQUF3QixrQkFBa0IsUUFDMUMsVUFBVSwwQkFBMEIsU0FBUyxPQUFPO0FBRXhELE1BQUkscUJBQXFCLGlCQUFpQixRQUN0QyxPQUFPLG1CQUFtQixLQUMxQixRQUFRLG1CQUFtQixNQUMzQix3QkFBd0IsbUJBQW1CLE9BQzNDLFNBQVMsMEJBQTBCLFNBQVMsUUFBUSx1QkFDcEQsd0JBQXdCLG1CQUFtQixRQUMzQyxVQUFVLDBCQUEwQixTQUFTLE9BQU87QUFFeEQsU0FBTyxDQUFFLFdBQVUsWUFBWSxRQUMvQixPQUFPLFlBQVksV0FDbkIsU0FBUyxZQUFZLFNBQ3JCLFFBQVEsWUFBWTtBQUFBO0FBU3RCLDBCQUEwQixNQUFNO0FBQzlCLE1BQUksQ0FBQyxLQUFLO0FBQXVCLFdBQU87QUFDeEMsTUFBSSxPQUFPLEtBQUsseUJBQ1osUUFBTyxLQUFLLE9BQU8sV0FBVyxTQUM5QixPQUFNLEtBQUssTUFBTSxXQUFXO0FBQ2hDLFNBQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLE9BQVEsTUFBSyxlQUFlLEtBQUs7QUFBQSxJQUNqQyxRQUFTLE1BQUssZ0JBQWdCLEtBQUs7QUFBQTtBQUFBO0FBSXZDLG9CQUFvQixLQUFLO0FBQ3ZCLE1BQUksUUFBUTtBQUFRLFdBQU8sT0FBTyxlQUFlLFNBQVMsS0FBSyxjQUFjO0FBQzdFLE1BQUksUUFBUTtBQUFPLFdBQU8sT0FBTyxlQUFlLFNBQVMsS0FBSyxhQUFhO0FBQUE7QUFHN0UsSUFBSSxXQUFXO3NCQUNHOzs7QUNoZ0JsQixNQUFJLDBCQUF5QmwxQztBQUU3Qix3QkFBcUI7QUFDckIscUJBQWtCO0FBRWxCLE1BQUksWUFBWSx3QkFBdUJ3QjtBQUV2QyxNQUFJLFFBQVEsd0JBQXVCQztBQUVuQyxNQUFJLFVBQVMsd0JBQXVCNHpDO0FBRXBDLDZCQUEwQixJQUFHO0FBQzNCLFdBQU8sT0FBTyxPQUFNLFdBQVcsS0FBSSxLQUFJO0FBQUE7QUFLekMsMEJBQXVCLE9BQU87QUFDNUIsUUFBSSxZQUFXO0FBRWYsUUFBSSxTQUFRLE1BQU0sT0FDZCxZQUFZLE1BQU0sV0FDbEIsUUFBUSxNQUFNLE9BQ2QsYUFBWSxNQUFNLFdBQ2xCLE1BQU0sTUFBTSxLQUNaLFdBQVcsTUFBTSxVQUNqQixRQUFRLE1BQU0sT0FDZCxtQkFBbUIsTUFBTSxrQkFDekIsaUJBQWlCLE1BQU0sZ0JBQ3ZCLFVBQVUsTUFBTSxTQUNoQixVQUFVLE1BQU0sU0FDaEIsZ0JBQWdCLE1BQU0sZUFDdEIsb0JBQW9CLE1BQU0sbUJBQzFCLGFBQWEsTUFBTSxZQUNuQixvQkFBb0IsTUFBTSxZQUMxQixTQUFRLGtCQUFrQixPQUMxQixnQkFBZSxrQkFBa0I7QUFDckMsUUFBSSxRQUFRLFdBQVUsTUFBTTtBQUM1QixRQUFJLFVBQVUsV0FBVSxRQUFRO0FBQ2hDLFFBQUksT0FBTSxXQUFVLElBQUk7QUFDeEIsUUFBSSxTQUFRLFdBQVUsTUFBTTtBQUM1QixRQUFJLFlBQVksUUFBUSxVQUFVLE9BQU8sUUFBTyxNQUFLO0FBQ3JELFFBQUksVUFBUyxPQUFNLFFBQ2YsT0FBTSxPQUFNLEtBQ1osUUFBUSxPQUFNLE9BQ2QsVUFBVSxPQUFNO0FBQ3BCLFFBQUksUUFBUSxDQUFjLHdCQUFPLFFBQVEsY0FBYyxPQUFPO0FBQUEsTUFDNUQsS0FBSztBQUFBLE1BQ0wsV0FBVztBQUFBLE9BQ1YsUUFBcUIsd0JBQU8sUUFBUSxjQUFjLE9BQU87QUFBQSxNQUMxRCxLQUFLO0FBQUEsTUFDTCxXQUFXO0FBQUEsT0FDVixTQUFxQix3QkFBTyxRQUFRLGNBQWMsUUFBTztBQUFBLE1BQzFEO0FBQUEsTUFDQTtBQUFBLFNBQ0c7QUFDTCxRQUFJLGFBQWEsd0JBQXdCLFVBQVUsU0FBUyxJQUFJLFVBQVUsT0FBUSxjQUFZO0FBQUEsTUFDNUYsS0FBSyxrQkFBaUI7QUFBQSxNQUN0QixRQUFRLGtCQUFpQjtBQUFBLE1BRXpCLE9BQU8sVUFBVSxRQUFRO0FBQUEsT0FDeEIsV0FBVSxNQUFNLFVBQVUsVUFBVSxrQkFBaUIsS0FBSyxJQUFJLEdBQUcsV0FBVyxtQkFBa0IsVUFBVSxTQUFTLElBQUksVUFBVSxPQUFRLGFBQVk7QUFBQSxNQUNwSixLQUFLLGtCQUFpQjtBQUFBLE1BQ3RCLE9BQU8sa0JBQWlCO0FBQUEsTUFDeEIsUUFBUSxrQkFBaUI7QUFBQSxPQUN4QixVQUFVLE1BQU0sVUFBVSxVQUFVLGtCQUFpQixVQUFVO0FBQ2xFLFdBQW9CLHdCQUFPLFFBQVEsY0FBYyxtQkFBa0IsVUFBVSxTQUFTO0FBQUEsTUFDcEYsTUFBTTtBQUFBLE9BQ0wsUUFBcUIsd0JBQU8sUUFBUSxjQUFjLE9BQU87QUFBQSxNQUMxRDtBQUFBLE1BQ0E7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQO0FBQUEsTUFDQSxPQUFPLFVBQVcsUUFBTyxVQUFVLFdBQVcsUUFBUSxPQUFPLE1BQU0sVUFBVTtBQUFBLE1BQzdFLGVBQWUsTUFBTSxTQUFTLG9CQUFvQix5QkFBeUIsYUFBYSxXQUFXLFVBQVUsV0FBVztBQUFBLFFBQ3RILGdCQUFnQjtBQUFBLFFBQ2hCLCtCQUErQjtBQUFBLFFBQy9CLDZCQUE2QjtBQUFBO0FBQUEsT0FFOUI7QUFBQTtBQUdMLE1BQUksWUFBVztBQUNmLHFCQUFrQjtBQUNsQixvQkFBaUIsU0FBUTtBQUFBOztBQ3BGekIsSUFBSUgsMkJBQXlCbDFDO0FBRTdCLG9CQUFxQjt5QkFDSzt1QkFDRjtvQkFDSDt1QkFDRztBQUV4QixJQUFJLFlBQVlrMUMseUJBQXVCMXpDO0FBRXZDLElBQUksaUNBQWlDMHpDLHlCQUF1Qnp6QztBQUU1RCxJQUFJLGFBQWE0ekM7QUFFakIsSUFBSSxTQUFTQztBQUViLElBQUksWUFBWSxDQUFDO0FBQ2pCLElBQUksZ0JBQWdCO0FBQUEsRUFDbEIsV0FBVyxXQUFXLGNBQWMsU0FBVSxHQUFHO0FBQy9DLFdBQU8sRUFBRTtBQUFBO0FBQUEsRUFFWCxTQUFTLFdBQVcsY0FBYyxTQUFVLEdBQUc7QUFDN0MsV0FBTyxFQUFFO0FBQUE7QUFBQTt1QkFHVztBQUV4QixnQkFBZ0I7QUFDZCxXQUFTLE9BQU8sVUFBVSxRQUFRLGFBQWEsSUFBSSxNQUFNLE9BQU8sT0FBTyxHQUFHLE9BQU8sTUFBTSxRQUFRO0FBQzdGLGVBQVcsUUFBUSxVQUFVO0FBQUE7QUFHL0IsTUFBSSxZQUFZLFdBQVcsT0FBTyxTQUFTLElBQUksT0FBTztBQUV0RCxNQUFJLE9BQU8sZUFBYyxNQUFNO0FBQzdCLFFBQUksV0FBVyxLQUFLLFVBQ2hCLFlBQVksK0JBQStCLFNBQVMsTUFBTTtBQUM5RCxXQUFPLFVBQVUsWUFBWSxTQUFVLE9BQU8sU0FBUztBQUNyRCxhQUFPLFFBQVEsT0FBTztBQUFBLE9BQ3JCO0FBQUE7QUFHTCxTQUFPO0FBQUE7QUFHVCx5QkFBeUIsWUFBWSxRQUFRO0FBQzNDLE1BQUksZUFBZSxRQUFRO0FBQ3pCLGlCQUFhO0FBQUE7QUFHZixNQUFJLFFBQU8sT0FBTyxLQUFLO0FBQ3ZCLE1BQUksYUFBYSxVQUFVLFNBQVMsSUFBSTtBQUN4QyxRQUFLLFFBQVEsU0FBVSxLQUFLO0FBQzFCLFdBQU8sT0FBTyxXQUFXLE9BQU8sS0FBSyxXQUFXLE1BQU0sT0FBTyxRQUFRLE9BQU87QUFBQTtBQUU5RSxTQUFPO0FBQUE7QUFHVCx1QkFBdUIsUUFBUSxPQUFPO0FBQ3BDLE1BQUksUUFBTyxPQUFPLE1BQ2QsU0FBUSxPQUFPLE9BQ2YsT0FBTSxPQUFPO0FBQ2pCLE1BQUksS0FBSSxNQUFNLEdBQ1YsS0FBSSxNQUFNO0FBQ2QsU0FBTyxLQUFJLFNBQVEsTUFBTSxLQUFJLFNBQVEsS0FBSTtBQUFBO0FBRzNDLG9CQUFvQixPQUFPLFlBQVcsV0FBVztBQUMvQyxNQUFJLFNBQVEsV0FBVSxNQUFNO0FBQzVCLE1BQUksT0FBTSxXQUFVLElBQUk7QUFDeEIsTUFBSSxpQkFBaUIsVUFBVSxHQUFHLFFBQU8sTUFBSyxjQUFjLFVBQVUsS0FBSyxRQUFPLE1BQUssZUFBZTtBQUV0RyxNQUFJO0FBQWdCLFdBQU0sVUFBVSxJQUFJLE1BQUssR0FBRztBQUNoRCxNQUFJLFdBQVcsVUFBVSxLQUFLLFFBQU8sTUFBSztBQUMxQyxTQUFPO0FBQUEsSUFDTCxPQUFPO0FBQUEsSUFDUCxLQUFLO0FBQUEsSUFDTDtBQUFBO0FBQUE7OztBQzdFSix3QkFBcUI7QUFDckIscUJBQWtCO0FBRWxCLHdCQUFxQixPQUFPO0FBQzFCLFdBQU8sTUFBTTtBQUFBO0FBR2YsTUFBSSxZQUFXO0FBQ2YscUJBQWtCO0FBQ2xCLG9CQUFpQixTQUFRO0FBQUE7O0FDVHpCLE1BQUksMEJBQXlCdDFDO0FBRTdCLHdCQUFxQjtBQUNyQixxQkFBa0I7QUFFbEIsTUFBSSxhQUFZLHdCQUF1QndCO0FBRXZDLE1BQUksa0JBQWtCLHdCQUF1QkM7QUFFNUIsMEJBQXVCNHpDO0FBRXhDLE1BQUksVUFBUyx3QkFBdUJDO0FBRXBDLE1BQUksY0FBY0M7QUFFbEIsTUFBSSxhQUFhLHdCQUF3QkM7QUFFekMsTUFBSSxpQkFBaUIsd0JBQXVCRTtBQUU1QyxNQUFJLFVBQVVDO0FBRWQsTUFBSSxlQUFlLHdCQUF1QkM7QUFFMUMsb0NBQWtDLGFBQWE7QUFBRSxRQUFJLE9BQU8sWUFBWTtBQUFZLGFBQU87QUFBTSxRQUFJLG9CQUFvQixJQUFJO0FBQVcsUUFBSSxtQkFBbUIsSUFBSTtBQUFXLFdBQVEsNEJBQTJCLG1DQUFrQyxjQUFhO0FBQUUsYUFBTyxlQUFjLG1CQUFtQjtBQUFBLE9BQXNCO0FBQUE7QUFFaFUsbUNBQWlDLEtBQUssYUFBYTtBQUFFLFFBQUksQ0FBQyxlQUFlLE9BQU8sSUFBSSxZQUFZO0FBQUUsYUFBTztBQUFBO0FBQU8sUUFBSSxRQUFRLFFBQVEsT0FBTyxRQUFRLFlBQVksT0FBTyxRQUFRLFlBQVk7QUFBRSxhQUFPLEVBQUUsU0FBUztBQUFBO0FBQVMsUUFBSSxRQUFRLHlCQUF5QjtBQUFjLFFBQUksU0FBUyxNQUFNLElBQUksTUFBTTtBQUFFLGFBQU8sTUFBTSxJQUFJO0FBQUE7QUFBUSxRQUFJLFNBQVM7QUFBSSxRQUFJLHdCQUF3QixPQUFPLGtCQUFrQixPQUFPO0FBQTBCLGFBQVMsT0FBTyxLQUFLO0FBQUUsVUFBSSxRQUFRLGFBQWEsT0FBTyxVQUFVLGVBQWUsS0FBSyxLQUFLLE1BQU07QUFBRSxZQUFJLE9BQU8sd0JBQXdCLE9BQU8seUJBQXlCLEtBQUssT0FBTztBQUFNLFlBQUksUUFBUyxNQUFLLE9BQU8sS0FBSyxNQUFNO0FBQUUsaUJBQU8sZUFBZSxRQUFRLEtBQUs7QUFBQSxlQUFjO0FBQUUsaUJBQU8sT0FBTyxJQUFJO0FBQUE7QUFBQTtBQUFBO0FBQVksV0FBTyxVQUFVO0FBQUssUUFBSSxPQUFPO0FBQUUsWUFBTSxJQUFJLEtBQUs7QUFBQTtBQUFXLFdBQU87QUFBQTtBQUUzeEIsTUFBSSx5QkFBcUMseUJBQVUsa0JBQWtCO0FBQ25FLFFBQUksZ0JBQWdCLFNBQVMsd0JBQXVCO0FBRXBELHNDQUFpQztBQUMvQixVQUFJO0FBRUosZUFBUyxPQUFPLFVBQVUsUUFBUSxPQUFPLElBQUksTUFBTSxPQUFPLE9BQU8sR0FBRyxPQUFPLE1BQU0sUUFBUTtBQUN2RixhQUFLLFFBQVEsVUFBVTtBQUFBO0FBR3pCLGNBQVEsaUJBQWlCLEtBQUssTUFBTSxrQkFBa0IsQ0FBQyxNQUFNLE9BQU8sVUFBVTtBQUU5RSxZQUFNLGFBQWEsU0FBVSxPQUFPLFFBQVE7QUFDMUMsWUFBSSxLQUFLLFFBQVEsZUFBZSxRQUFRO0FBQVEsaUJBQU8sTUFBTTtBQUM3RCxZQUFJLFFBQVEsTUFBTSxRQUFRLFVBQVUsa0JBQWtCO0FBQ3RELFlBQUksY0FBYyxNQUFNLE9BQ3BCLGFBQVksWUFBWSxXQUN4QixjQUFjLFlBQVk7QUFDOUIsWUFBSSxVQUFVLFlBQVkscUJBQXFCO0FBQUEsVUFDN0MsR0FBRyxNQUFNLElBQUksTUFBTTtBQUFBLFVBQ25CLEdBQUcsTUFBTTtBQUFBLFdBQ1I7QUFFSCxZQUFJLGtCQUFrQixRQUFRLFlBQVksT0FBTyxZQUFXLE1BQU0sTUFBTSxZQUNwRSxXQUFXLFlBQVk7QUFFM0IsWUFBSSxTQUFTLE1BQU0sTUFBTSxVQUFVLElBQUksU0FBUyxVQUFVO0FBRTFELGNBQU0sT0FBTyxPQUFPLFlBQVksU0FBUyxTQUFTLFFBQVEsT0FBTztBQUFBO0FBR25FLFlBQU0sd0JBQXdCLFNBQVUsT0FBTyxhQUFhO0FBQzFELFlBQUksZUFBZSxNQUFNLE9BQ3JCLGNBQWMsYUFBYSxhQUMzQixXQUFXLGFBQWE7QUFDNUIsWUFBSSxTQUFRLFlBQVkscUJBQXFCO0FBQUEsVUFDM0MsR0FBRyxNQUFNO0FBQUEsVUFDVCxHQUFHLE1BQU07QUFBQSxXQUNSO0FBRUgsY0FBTSxRQUFRLFVBQVUsa0JBQWtCO0FBQUEsVUFDeEMsT0FBTztBQUFBLFVBQ1AsS0FBSyxZQUFZLFNBQVM7QUFBQSxVQUMxQixRQUFRO0FBQUEsVUFDUjtBQUFBO0FBQUE7QUFJSixZQUFNLGNBQWMsV0FBWTtBQUM5QixZQUFJLFVBQVUsTUFBTSxJQUFJO0FBQ3hCLFlBQUksT0FBTyxRQUFRLFNBQVM7QUFDNUIsWUFBSSxpQkFBaUI7QUFDckIsWUFBSSxXQUFXLE1BQU0sWUFBWSxJQUFJLFdBQVcsUUFBUSxXQUFZO0FBQ2xFLGlCQUFPLFFBQVEsUUFBUTtBQUFBO0FBRXpCLGlCQUFTLEdBQUcsZ0JBQWdCLFNBQVUsT0FBTztBQUMzQyxjQUFJLG9CQUFvQixNQUFNLFFBQVEsVUFBVTtBQUNoRCxjQUFJLENBQUMsa0JBQWtCO0FBQVEsbUJBQU87QUFFdEMsY0FBSSxrQkFBa0IsV0FBVyxVQUFVO0FBQ3pDLHVCQUFXLFFBQVEsbUJBQW1CLFdBQVcsa0JBQWtCLE9BQU87QUFBQTtBQUc1RSxjQUFJLGdCQUFnQixXQUFXLHVCQUF1QixNQUFNO0FBQzVELGNBQUksQ0FBQztBQUFXLG1CQUFPO0FBT3ZCLGdCQUFNLGlCQUFpQixNQUFNLFFBQVEsV0FBVyxrQkFBa0IsV0FBVztBQUFBO0FBRS9FLGlCQUFTLEdBQUcsYUFBYSxTQUFVLEtBQUs7QUFDdEMsY0FBSSxhQUFhLFdBQVcsa0JBQWtCO0FBQzlDLGNBQUksb0JBQW9CLE1BQU0sUUFBUSxVQUFVO0FBQ2hELGNBQUksa0JBQWtCLFdBQVc7QUFBUSxrQkFBTSxXQUFXLEtBQUs7QUFDL0QsY0FBSSxrQkFBa0IsV0FBVztBQUFVLGtCQUFNLGFBQWEsS0FBSztBQUFBO0FBRXJFLGlCQUFTLEdBQUcsbUJBQW1CLFNBQVUsT0FBTztBQUM5QyxjQUFJLENBQUMsTUFBTSxRQUFRLFVBQVU7QUFBbUI7QUFDaEQsY0FBSSxhQUFhLFdBQVcsa0JBQWtCO0FBQzlDLGNBQUksS0FBSyxRQUFRLGVBQWUsUUFBUTtBQUFRO0FBRWhELGdCQUFNLHNCQUFzQixPQUFPO0FBQUE7QUFFckMsaUJBQVMsR0FBRyxZQUFZLFNBQVUsT0FBTztBQUN2QyxjQUFJLENBQUMsTUFBTSxRQUFRLFVBQVU7QUFBcUI7QUFDbEQsY0FBSSxhQUFhLFdBQVcsa0JBQWtCO0FBRTlDLGdCQUFNLHNCQUFzQixPQUFPO0FBQUE7QUFFckMsaUJBQVMsR0FBRyxlQUFlLFdBQVk7QUFDckMsMkJBQWlCO0FBRWpCLGdCQUFNLFFBQVEsVUFBVTtBQUFBO0FBRTFCLGlCQUFTLEdBQUcsVUFBVSxTQUFVLE9BQU87QUFDckMsY0FBSSxhQUFhLFdBQVcsa0JBQWtCO0FBQzlDLDJCQUFpQjtBQUNqQixjQUFJLENBQUMsTUFBTSxNQUFNLFNBQVMsS0FBSyxRQUFRLGVBQWUsUUFBUTtBQUFRO0FBRXRFLGdCQUFNO0FBQUE7QUFFUixpQkFBUyxHQUFHLFNBQVMsV0FBWTtBQUMvQixjQUFJO0FBQWdCLGtCQUFNO0FBRTFCLGdCQUFNLFFBQVEsVUFBVSxNQUFNO0FBQUE7QUFFaEMsaUJBQVMsR0FBRyxTQUFTLFdBQVk7QUFDL0IsZ0JBQU07QUFFTixnQkFBTSxRQUFRLFVBQVUsTUFBTTtBQUFBO0FBQUE7QUFJbEMsWUFBTSx1QkFBdUIsV0FBWTtBQUN2QyxZQUFJLFdBQVcsTUFBTSxNQUFNO0FBQzNCLFlBQUksUUFBUSxNQUFNLE1BQU07QUFFeEIsY0FBTTtBQUVOLGNBQU0sUUFBUSxVQUFVLE1BQU07QUFBQSxVQUM1QixPQUFPLE1BQU07QUFBQSxVQUNiLEtBQUssTUFBTTtBQUFBLFVBQ1gsWUFBWTtBQUFBO0FBQUE7QUFJaEIsWUFBTSxzQkFBc0IsV0FBWTtBQUN0QyxZQUFJLENBQUMsTUFBTTtBQUFXO0FBRXRCLGNBQU0sVUFBVTtBQUVoQixjQUFNLFlBQVk7QUFBQTtBQUdwQixZQUFNLFFBQVE7QUFDZCxZQUFNLE1BQW1CLHdCQUFPLFFBQVE7QUFDeEMsYUFBTztBQUFBO0FBR1QsUUFBSSxTQUFTLHVCQUFzQjtBQUVuQyxXQUFPLG9CQUFvQiw2QkFBNkI7QUFDdEQsV0FBSztBQUFBO0FBR1AsV0FBTyx1QkFBdUIsZ0NBQWdDO0FBQzVELFdBQUs7QUFBQTtBQUdQLFdBQU8sUUFBUSxpQkFBaUI7QUFDOUIsVUFBSSxLQUFLLE1BQU07QUFBTyxhQUFLLFNBQVM7QUFBQSxVQUNsQyxPQUFPO0FBQUEsVUFDUCxLQUFLO0FBQUEsVUFDTCxRQUFRO0FBQUE7QUFBQTtBQUlaLFdBQU8sU0FBUyxnQkFBZ0IsT0FBTyxNQUFNO0FBQzNDLFVBQUksWUFBWSxLQUFLLFdBQ2pCLFVBQVUsS0FBSyxTQUNmLE9BQU0sS0FBSyxLQUNYLFVBQVMsS0FBSztBQUNsQixVQUFJLFlBQVksS0FBSyxNQUFNO0FBRTNCLFVBQUksYUFBYSxjQUFjLFVBQVUsU0FBUyxZQUFZLFVBQVUsS0FBSztBQUMzRTtBQUFBO0FBR0YsV0FBSyxTQUFTO0FBQUEsUUFDWixLQUFLO0FBQUEsUUFDTCxRQUFRO0FBQUEsUUFDUixXQUFXLFdBQVUsU0FBUyxJQUFJLE9BQU87QUFBQSxVQUN2QyxPQUFPO0FBQUEsVUFDUCxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBS1gsV0FBTyxlQUFlLHNCQUFzQixPQUFPLFFBQVE7QUFDekQsVUFBSSxlQUFlLEtBQUssT0FDcEIsYUFBWSxhQUFhLFdBQ3pCLGNBQWMsYUFBYSxhQUMzQixZQUFZLGFBQWE7QUFDN0IsVUFBSSx3QkFBd0IsS0FBSyxRQUFRLFVBQVUsbUJBQy9DLFFBQVEsc0JBQXNCLE9BQzlCLFlBQVksc0JBQXNCO0FBQ3RDLFVBQUksVUFBVSxZQUFZLHFCQUFxQixPQUFPO0FBRXRELFVBQUksbUJBQW1CLFFBQVEsWUFBWSxPQUFPLFlBQVcsWUFDekQsU0FBUSxhQUFhLE9BQ3JCLE9BQU0sYUFBYTtBQUV2QixVQUFJLGNBQWMsTUFBTTtBQUN0QixpQkFBUSxVQUFVLElBQUksU0FBUyxZQUFZLG9CQUFvQixNQUFLO0FBQUEsaUJBQzNELGNBQWMsUUFBUTtBQUMvQixlQUFNLFVBQVUsSUFBSSxTQUFTLFlBQVksb0JBQW9CO0FBQUE7QUFHL0QsV0FBSyxPQUFPLE9BQU8sWUFBWSxTQUFTLFFBQU87QUFBQTtBQUdqRCxXQUFPLGdCQUFnQix5QkFBeUI7QUFDOUMsVUFBSSxlQUFlLEtBQUssT0FDcEIsV0FBVyxhQUFhLFVBQ3hCLGFBQVksYUFBYSxXQUN6QixhQUFhLGFBQWEsWUFDMUIsVUFBVSxhQUFhLFNBQ3ZCLGNBQWMsYUFBYSxhQUMzQixZQUFZLGFBQWE7QUFDN0IsVUFBSSxjQUFjLEtBQUssT0FDbkIsUUFBUSxZQUFZLE9BQ3BCLE9BQU0sWUFBWSxLQUNsQixVQUFTLFlBQVk7QUFDekIsVUFBSSxDQUFDO0FBQU8sZUFBTztBQUNuQixVQUFJLFNBQVMsU0FBUyxNQUFNO0FBQzVCLFVBQUksU0FBUSxNQUFNLE9BQ2QsT0FBTSxNQUFNO0FBQ2hCLFVBQUk7QUFDSixVQUFJLFNBQVM7QUFDYixVQUFJLGtCQUFrQixZQUFZLGdCQUFnQjtBQUNsRCxVQUFJLGlCQUFpQixZQUFZLGVBQWU7QUFDaEQsVUFBSTtBQUFpQixpQkFBUztBQUFBLGVBQW1DO0FBQWdCLGlCQUFTO0FBQzFGLFVBQUksbUJBQW1CO0FBQWdCLGdCQUFRLFVBQVUsU0FBUztBQUFBO0FBQVksZ0JBQVEsVUFBVSxPQUFPO0FBQUEsVUFDckcsT0FBTztBQUFBLFVBQ1AsS0FBSztBQUFBLFdBQ0o7QUFDSCxhQUFvQix3QkFBTyxRQUFRLGFBQWEsVUFBVTtBQUFBLFFBQ3hELFVBQXVCLHdCQUFPLFFBQVEsY0FBYyxRQUFPLFFBQVEsVUFBVSxNQUFNLFFBQVEsU0FBc0Isd0JBQU8sUUFBUSxjQUFjLGVBQWUsU0FBUztBQUFBLFVBQ3BLO0FBQUEsVUFDQTtBQUFBLFVBQ0EsV0FBVztBQUFBLFVBQ1gsT0FBTztBQUFBLFlBQ0wsS0FBSztBQUFBLFlBQ0wsUUFBUTtBQUFBLFlBQ1IsT0FBTztBQUFBO0FBQUEsVUFFVDtBQUFBLFVBQ0EsZ0JBQWdCLFdBQVUsU0FBUyxJQUFJLFlBQVk7QUFBQSxZQUNqRCxjQUFjLGFBQWE7QUFBQTtBQUFBLFVBRTdCLGVBQWUsV0FBVSxTQUFTLElBQUksWUFBVyxRQUFRO0FBQUEsVUFDekQsa0JBQWtCO0FBQUEsVUFDbEIsZ0JBQWdCO0FBQUE7QUFBQTtBQUFBO0FBS3RCLFdBQU8sU0FBUyxrQkFBa0I7QUFDaEMsYUFBb0Isd0JBQU8sUUFBUSxjQUFjLE9BQU87QUFBQSxRQUN0RCxLQUFLLEtBQUs7QUFBQSxTQUNULEtBQUs7QUFBQTtBQUdWLFdBQU87QUFBQSxJQUNQLFFBQU8sUUFBUTtBQUVqQix5QkFBc0IsY0FBYyxZQUFZO0FBQ2hELHlCQUFzQixZQU9sQjtBQUNKLE1BQUksWUFBVztBQUNmLHFCQUFrQjtBQUNsQixvQkFBaUIsU0FBUTtBQUFBOzs7Ozs7QUN6U3pCLE1BQUksMEJBQXlCNTFDO0FBRTdCLHdCQUFxQjtBQUNyQixxQkFBa0I7QUFFbEIsTUFBSSxhQUFZLHdCQUF1QndCO0FBRXZDLE1BQUksa0NBQWlDLHdCQUF1QkM7QUFFNUQsTUFBSSxrQkFBa0Isd0JBQXVCNHpDO0FBRTVCLDBCQUF1QkM7QUFFeEMsTUFBSSxVQUFTLHdCQUF1QkM7QUFFcEMsTUFBSSxRQUFRLHdCQUF1QjtBQUVuQyxNQUFJLGFBQVksQ0FBQyxTQUFTLGFBQWEsU0FBUyxZQUFZLFlBQVksWUFBWSxpQkFBaUIsY0FBYyxhQUFhLGtCQUFrQixrQkFBa0IsYUFBYSxXQUFXLFlBQVksY0FBYyxhQUFhO0FBRW5PLE1BQUksYUFBeUIseUJBQVUsa0JBQWtCO0FBQ3ZELFFBQUksZ0JBQWdCLFNBQVMsWUFBVztBQUV4QywwQkFBcUI7QUFDbkIsYUFBTyxpQkFBaUIsTUFBTSxNQUFNLGNBQWM7QUFBQTtBQUdwRCxRQUFJLFNBQVMsV0FBVTtBQUV2QixXQUFPLFNBQVMsa0JBQWtCO0FBQ2hDLFVBQUksY0FBYyxLQUFLLE9BQ25CLFNBQVEsWUFBWSxPQUNwQixZQUFZLFlBQVksV0FDeEIsUUFBUSxZQUFZLE9BQ3BCLFdBQVcsWUFBWSxVQUN2QixXQUFXLFlBQVksVUFDdkIsV0FBVyxZQUFZLFVBQ3ZCLGlCQUFpQixZQUFZLGVBQzdCLGNBQWMsWUFBWSxZQUMxQixZQUFZLFlBQVksV0FDeEIsa0JBQWlCLFlBQVksZ0JBQzdCLGtCQUFpQixZQUFZLGdCQUM3QixhQUFZLFlBQVksV0FDeEIsVUFBVSxZQUFZLFNBQ3RCLFdBQVcsWUFBWSxVQUN2Qix3QkFBd0IsWUFBWSxZQUNwQyxTQUFRLHNCQUFzQixPQUM5QixnQkFBZSxzQkFBc0IsY0FDckMsWUFBWSxZQUFZLFdBQ3hCLFVBQVUsWUFBWSxTQUN0QixZQUFZLGdDQUErQixTQUFTLGFBQWE7QUFDckUsYUFBTyxNQUFNO0FBQ2IsVUFBSSxRQUFRLFdBQVUsTUFBTTtBQUM1QixVQUFJLFVBQVUsV0FBVSxRQUFRO0FBQ2hDLFVBQUksT0FBTSxXQUFVLElBQUk7QUFDeEIsVUFBSSxTQUFRLFdBQVUsTUFBTTtBQUM1QixVQUFJLFNBQVMsV0FBVSxPQUFPO0FBQzlCLFVBQUksZUFBZSxZQUFZLFVBQVUsVUFBVSxLQUFLLFFBQU8sVUFBVSxLQUFLLE1BQUssUUFBUSxTQUFTO0FBQ3BHLFVBQUksWUFBWSxRQUFRLFVBQVUsT0FBTyxRQUFPLE1BQUs7QUFFckQsVUFBSSxVQUF1Qix3QkFBTyxRQUFRLGNBQWMsT0FBTztBQUFBLFFBQzdELFdBQVc7QUFBQSxRQUNYLE9BQU8sV0FBVztBQUFBLFNBQ2pCLFNBQXFCLHdCQUFPLFFBQVEsY0FBYyxRQUFPO0FBQUEsUUFDMUQ7QUFBQSxRQUNBLGdCQUFnQjtBQUFBLFFBQ2hCLGdCQUFnQjtBQUFBLFFBQ2hCO0FBQUEsUUFDQSxVQUFVO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsV0FDRztBQUVMLGFBQW9CLHdCQUFPLFFBQVEsY0FBYyxtQkFBa0IsV0FBVSxTQUFTLElBQUksS0FBSyxPQUFPO0FBQUEsUUFDcEcsTUFBTTtBQUFBLFVBQ1Msd0JBQU8sUUFBUSxjQUFjLFdBQVcsV0FBVSxTQUFTLElBQUksT0FBTztBQUFBLFFBQ3JGLFVBQVU7QUFBQSxRQUNWLFdBQVcsV0FBVSxTQUFTLElBQUksVUFBVSxPQUFPO0FBQUEsUUFDbkQsZUFBZSxNQUFNLFNBQVMsYUFBYSxXQUFXLFVBQVUsV0FBVztBQUFBLFVBQ3pFLGdCQUFnQjtBQUFBLFVBQ2hCLG9CQUFvQjtBQUFBLFVBQ3BCLDZCQUE2QjtBQUFBLFVBQzdCLDZCQUE2QjtBQUFBO0FBQUEsUUFFL0IsU0FBUyxpQkFBaUIsR0FBRztBQUMzQixpQkFBTyxZQUFZLFNBQVMsT0FBTztBQUFBO0FBQUEsUUFFckMsZUFBZSx1QkFBdUIsR0FBRztBQUN2QyxpQkFBTyxrQkFBa0IsZUFBZSxPQUFPO0FBQUE7QUFBQSxRQUVqRCxZQUFZLG9CQUFvQixHQUFHO0FBQ2pDLGlCQUFPLGVBQWUsWUFBWSxPQUFPO0FBQUE7QUFBQSxVQUV6QyxPQUFPLGFBQWEsYUFBYSxTQUFTLFdBQVc7QUFBQTtBQUczRCxXQUFPO0FBQUEsSUFDUCxRQUFPLFFBQVE7QUFFakIsYUFBVSxZQWdCTjtBQUNKLE1BQUksWUFBVztBQUNmLHFCQUFrQjtBQUNsQixvQkFBaUIsU0FBUTtBQUFBOztBQ2pIekIsNEJBQTBCO0FBQ3hCLE9BQUssV0FBVztBQUNoQixPQUFLLE9BQU87QUFBQTtJQUdkLGtCQUFpQnR0QztBQ29CakIsY0FBWSxPQUFPLE9BQU87QUFDeEIsU0FBTyxVQUFVLFNBQVUsVUFBVSxTQUFTLFVBQVU7QUFBQTtJQUcxRCxPQUFpQjVEO0FDcENqQixJQUFJQSxPQUFLckU7QUFVVCx3QkFBc0IsT0FBTyxLQUFLO0FBQ2hDLE1BQUksU0FBUyxNQUFNO0FBQ25CLFNBQU8sVUFBVTtBQUNmLFFBQUlxRSxLQUFHLE1BQU0sUUFBUSxJQUFJLE1BQU07QUFDN0IsYUFBTztBQUFBO0FBQUE7QUFHWCxTQUFPO0FBQUE7SUFHVCxnQkFBaUIwRDtBQ3BCakIsSUFBSUEsaUJBQWUvSDtBQUduQixJQUFJLGFBQWEsTUFBTTtBQUd2QixJQUFJLFNBQVMsV0FBVztBQVd4QiwyQkFBeUIsS0FBSztBQUM1QixNQUFJLE9BQU8sS0FBSyxVQUNaLFFBQVErSCxlQUFhLE1BQU07QUFFL0IsTUFBSSxRQUFRLEdBQUc7QUFDYixXQUFPO0FBQUE7QUFFVCxNQUFJLFlBQVksS0FBSyxTQUFTO0FBQzlCLE1BQUksU0FBUyxXQUFXO0FBQ3RCLFNBQUs7QUFBQSxTQUNBO0FBQ0wsV0FBTyxLQUFLLE1BQU0sT0FBTztBQUFBO0FBRTNCLElBQUUsS0FBSztBQUNQLFNBQU87QUFBQTtJQUdULG1CQUFpQkc7QUNsQ2pCLElBQUlILGlCQUFlL0g7QUFXbkIsd0JBQXNCLEtBQUs7QUFDekIsTUFBSSxPQUFPLEtBQUssVUFDWixRQUFRK0gsZUFBYSxNQUFNO0FBRS9CLFNBQU8sUUFBUSxJQUFJLFNBQVksS0FBSyxPQUFPO0FBQUE7SUFHN0MsZ0JBQWlCSTtBQ2xCakIsSUFBSUosaUJBQWUvSDtBQVduQix3QkFBc0IsS0FBSztBQUN6QixTQUFPK0gsZUFBYSxLQUFLLFVBQVUsT0FBTztBQUFBO0lBRzVDLGdCQUFpQks7QUNmakIsSUFBSSxlQUFlcEk7QUFZbkIsd0JBQXNCLEtBQUssT0FBTztBQUNoQyxNQUFJLE9BQU8sS0FBSyxVQUNaLFFBQVEsYUFBYSxNQUFNO0FBRS9CLE1BQUksUUFBUSxHQUFHO0FBQ2IsTUFBRSxLQUFLO0FBQ1AsU0FBSyxLQUFLLENBQUMsS0FBSztBQUFBLFNBQ1g7QUFDTCxTQUFLLE9BQU8sS0FBSztBQUFBO0FBRW5CLFNBQU87QUFBQTtJQUdULGdCQUFpQnFJO0FDekJqQixJQUFJLGlCQUFpQnJJLGlCQUNqQixrQkFBa0J3QixrQkFDbEIsZUFBZUMsZUFDZixlQUFlNHpDLGVBQ2YsZUFBZUM7QUFTbkIscUJBQW1CLFNBQVM7QUFDMUIsTUFBSSxRQUFRLElBQ1IsU0FBUyxXQUFXLE9BQU8sSUFBSSxRQUFRO0FBRTNDLE9BQUs7QUFDTCxTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFFBQUksUUFBUSxRQUFRO0FBQ3BCLFNBQUssSUFBSSxNQUFNLElBQUksTUFBTTtBQUFBO0FBQUE7QUFLN0J0dEMsWUFBVSxVQUFVLFFBQVE7QUFDNUJBLFlBQVUsVUFBVSxZQUFZO0FBQ2hDQSxZQUFVLFVBQVUsTUFBTTtBQUMxQkEsWUFBVSxVQUFVLE1BQU07QUFDMUJBLFlBQVUsVUFBVSxNQUFNO0lBRTFCLGFBQWlCQTtBQy9CakIsSUFBSUEsY0FBWWhJO0FBU2hCLHdCQUFzQjtBQUNwQixPQUFLLFdBQVcsSUFBSWdJO0FBQ3BCLE9BQUssT0FBTztBQUFBO0lBR2QsY0FBaUJxQztBQ0xqQix1QkFBcUIsS0FBSztBQUN4QixNQUFJLE9BQU8sS0FBSyxVQUNaLFNBQVMsS0FBSyxVQUFVO0FBRTVCLE9BQUssT0FBTyxLQUFLO0FBQ2pCLFNBQU87QUFBQTtJQUdULGVBQWlCQztBQ1JqQixvQkFBa0IsS0FBSztBQUNyQixTQUFPLEtBQUssU0FBUyxJQUFJO0FBQUE7SUFHM0IsWUFBaUJDO0FDSmpCLG9CQUFrQixLQUFLO0FBQ3JCLFNBQU8sS0FBSyxTQUFTLElBQUk7QUFBQTtJQUczQixZQUFpQkM7QUNaakIsSUFBSWxHLGVBQWEsT0FBT3NrQixrQkFBVSxZQUFZQSxrQkFBVUEsZUFBTyxXQUFXLFVBQVVBO0lBRXBGLGNBQWlCdGtCO0FDSGpCLElBQUksYUFBYXRFO0FBR2pCLElBQUksV0FBVyxPQUFPLFFBQVEsWUFBWSxRQUFRLEtBQUssV0FBVyxVQUFVO0FBRzVFLElBQUl3RSxTQUFPLGNBQWMsWUFBWSxTQUFTO0lBRTlDLFFBQWlCQTtBQ1JqQixJQUFJQSxTQUFPeEU7QUFHWCxJQUFJeUUsV0FBU0QsT0FBSztJQUVsQixVQUFpQkM7QUNMakIsSUFBSUEsV0FBU3pFO0FBR2IsSUFBSTBFLGdCQUFjLE9BQU87QUFHekIsSUFBSTNFLG1CQUFpQjJFLGNBQVk7QUFPakMsSUFBSUMseUJBQXVCRCxjQUFZO0FBR3ZDLElBQUlFLG1CQUFpQkgsV0FBU0EsU0FBTyxjQUFjO0FBU25ELHFCQUFtQixPQUFPO0FBQ3hCLE1BQUksUUFBUTFFLGlCQUFlLEtBQUssT0FBTzZFLG1CQUNuQyxNQUFNLE1BQU1BO0FBRWhCLE1BQUk7QUFDRixVQUFNQSxvQkFBa0I7QUFDeEIsUUFBSSxXQUFXO0FBQUEsV0FDUixHQUFQO0FBQUE7QUFFRixNQUFJLFNBQVNELHVCQUFxQixLQUFLO0FBQ3ZDLE1BQUksVUFBVTtBQUNaLFFBQUksT0FBTztBQUNULFlBQU1DLG9CQUFrQjtBQUFBLFdBQ25CO0FBQ0wsYUFBTyxNQUFNQTtBQUFBQTtBQUFBQTtBQUdqQixTQUFPO0FBQUE7SUFHVCxhQUFpQkc7QUM1Q2pCLElBQUlMLGdCQUFjLE9BQU87QUFPekIsSUFBSSx1QkFBdUJBLGNBQVk7QUFTdkMsMEJBQXdCLE9BQU87QUFDN0IsU0FBTyxxQkFBcUIsS0FBSztBQUFBO0lBR25DLGtCQUFpQk07QUNyQmpCLElBQUlQLFdBQVN6RSxTQUNULFlBQVl3QixZQUNaLGlCQUFpQkM7QUFHckIsSUFBSSxVQUFVLGlCQUNWLGVBQWU7QUFHbkIsSUFBSSxpQkFBaUJnRCxXQUFTQSxTQUFPLGNBQWM7QUFTbkQsc0JBQW9CLE9BQU87QUFDekIsTUFBSSxTQUFTLE1BQU07QUFDakIsV0FBTyxVQUFVLFNBQVksZUFBZTtBQUFBO0FBRTlDLFNBQVEsa0JBQWtCLGtCQUFrQixPQUFPLFNBQy9DLFVBQVUsU0FDVixlQUFlO0FBQUE7SUFHckIsY0FBaUJhO0FDRmpCLG9CQUFrQixPQUFPO0FBQ3ZCLE1BQUksT0FBTyxPQUFPO0FBQ2xCLFNBQU8sU0FBUyxRQUFTLFNBQVEsWUFBWSxRQUFRO0FBQUE7SUFHdkQsYUFBaUJEO0FDOUJqQixJQUFJQyxlQUFhdEYsYUFDYnFGLGFBQVc3RDtBQUdmLElBQUksV0FBVywwQkFDWDBELFlBQVUscUJBQ1YsU0FBUyw4QkFDVCxXQUFXO0FBbUJmLHNCQUFvQixPQUFPO0FBQ3pCLE1BQUksQ0FBQ0csV0FBUyxRQUFRO0FBQ3BCLFdBQU87QUFBQTtBQUlULE1BQUksTUFBTUMsYUFBVztBQUNyQixTQUFPLE9BQU9KLGFBQVcsT0FBTyxVQUFVLE9BQU8sWUFBWSxPQUFPO0FBQUE7SUFHdEUsZUFBaUJPO0FDcENqQixJQUFJakIsU0FBT3hFO0FBR1gsSUFBSXNJLGVBQWE5RCxPQUFLO0lBRXRCLGNBQWlCOEQ7QUNMakIsSUFBSSxhQUFhdEk7QUFHakIsSUFBSSxhQUFjLFdBQVc7QUFDM0IsTUFBSSxNQUFNLFNBQVMsS0FBSyxjQUFjLFdBQVcsUUFBUSxXQUFXLEtBQUssWUFBWTtBQUNyRixTQUFPLE1BQU8sbUJBQW1CLE1BQU87QUFBQTtBQVUxQyxvQkFBa0IsTUFBTTtBQUN0QixTQUFPLENBQUMsQ0FBQyxjQUFlLGNBQWM7QUFBQTtJQUd4QyxZQUFpQjZJO0FDbEJqQixJQUFJTCxjQUFZLFNBQVM7QUFHekIsSUFBSUMsaUJBQWVELFlBQVU7QUFTN0Isb0JBQWtCLE1BQU07QUFDdEIsTUFBSSxRQUFRLE1BQU07QUFDaEIsUUFBSTtBQUNGLGFBQU9DLGVBQWEsS0FBSztBQUFBLGFBQ2xCLEdBQVA7QUFBQTtBQUNGLFFBQUk7QUFDRixhQUFRLE9BQU87QUFBQSxhQUNSLEdBQVA7QUFBQTtBQUFBO0FBRUosU0FBTztBQUFBO0lBR1QsWUFBaUJLO0FDekJqQixJQUFJckQsZUFBYXpGLGNBQ2IsV0FBV3dCLFdBQ1g2RCxhQUFXNUQsWUFDWHFILGFBQVd1c0M7QUFNZixJQUFJLGVBQWU7QUFHbkIsSUFBSSxlQUFlO0FBR25CLElBQUksWUFBWSxTQUFTLFdBQ3JCM3dDLGdCQUFjLE9BQU87QUFHekIsSUFBSSxlQUFlLFVBQVU7QUFHN0IsSUFBSTNFLG1CQUFpQjJFLGNBQVk7QUFHakMsSUFBSSxhQUFhLE9BQU8sTUFDdEIsYUFBYSxLQUFLM0Usa0JBQWdCLFFBQVEsY0FBYyxRQUN2RCxRQUFRLDBEQUEwRCxXQUFXO0FBV2hGLHdCQUFzQixPQUFPO0FBQzNCLE1BQUksQ0FBQ3NGLFdBQVMsVUFBVSxTQUFTLFFBQVE7QUFDdkMsV0FBTztBQUFBO0FBRVQsTUFBSSxVQUFVSSxhQUFXLFNBQVMsYUFBYTtBQUMvQyxTQUFPLFFBQVEsS0FBS3FELFdBQVM7QUFBQTtJQUcvQixnQkFBaUJFO0FDdENqQixvQkFBa0IsUUFBUSxLQUFLO0FBQzdCLFNBQU8sVUFBVSxPQUFPLFNBQVksT0FBTztBQUFBO0lBRzdDLFlBQWlCRDtBQ1pqQixJQUFJLGVBQWUvSSxlQUNmLFdBQVd3QjtBQVVmLHFCQUFtQixRQUFRLEtBQUs7QUFDOUIsTUFBSSxRQUFRLFNBQVMsUUFBUTtBQUM3QixTQUFPLGFBQWEsU0FBUyxRQUFRO0FBQUE7SUFHdkMsYUFBaUIwSDtBQ2hCakIsSUFBSUEsY0FBWWxKLFlBQ1p3RSxTQUFPaEQ7QUFHWCxJQUFJeUgsUUFBTUMsWUFBVTFFLFFBQU07SUFFMUIsT0FBaUJ5RTtBQ05qQixJQUFJQyxjQUFZbEo7QUFHaEIsSUFBSW1KLGlCQUFlRCxZQUFVLFFBQVE7SUFFckMsZ0JBQWlCQztBQ0xqQixJQUFJQSxpQkFBZW5KO0FBU25CLHVCQUFxQjtBQUNuQixPQUFLLFdBQVdtSixpQkFBZUEsZUFBYSxRQUFRO0FBQ3BELE9BQUssT0FBTztBQUFBO0lBR2QsYUFBaUJHO0FDSmpCLHNCQUFvQixLQUFLO0FBQ3ZCLE1BQUksU0FBUyxLQUFLLElBQUksUUFBUSxPQUFPLEtBQUssU0FBUztBQUNuRCxPQUFLLFFBQVEsU0FBUyxJQUFJO0FBQzFCLFNBQU87QUFBQTtJQUdULGNBQWlCQztBQ2hCakIsSUFBSUosaUJBQWVuSjtBQUduQixJQUFJb0osbUJBQWlCO0FBR3JCLElBQUkxRSxnQkFBYyxPQUFPO0FBR3pCLElBQUkzRSxtQkFBaUIyRSxjQUFZO0FBV2pDLG1CQUFpQixLQUFLO0FBQ3BCLE1BQUksT0FBTyxLQUFLO0FBQ2hCLE1BQUl5RSxnQkFBYztBQUNoQixRQUFJLFNBQVMsS0FBSztBQUNsQixXQUFPLFdBQVdDLG1CQUFpQixTQUFZO0FBQUE7QUFFakQsU0FBT3JKLGlCQUFlLEtBQUssTUFBTSxPQUFPLEtBQUssT0FBTztBQUFBO0lBR3RELFdBQWlCeUo7QUM3QmpCLElBQUlMLGlCQUFlbko7QUFHbkIsSUFBSTBFLGdCQUFjLE9BQU87QUFHekIsSUFBSTNFLG1CQUFpQjJFLGNBQVk7QUFXakMsbUJBQWlCLEtBQUs7QUFDcEIsTUFBSSxPQUFPLEtBQUs7QUFDaEIsU0FBT3lFLGlCQUFnQixLQUFLLFNBQVMsU0FBYXBKLGlCQUFlLEtBQUssTUFBTTtBQUFBO0lBRzlFLFdBQWlCMEo7QUN0QmpCLElBQUksZUFBZXpKO0FBR25CLElBQUlvSixtQkFBaUI7QUFZckIsbUJBQWlCLEtBQUssT0FBTztBQUMzQixNQUFJLE9BQU8sS0FBSztBQUNoQixPQUFLLFFBQVEsS0FBSyxJQUFJLE9BQU8sSUFBSTtBQUNqQyxPQUFLLE9BQVEsZ0JBQWdCLFVBQVUsU0FBYUEsbUJBQWlCO0FBQ3JFLFNBQU87QUFBQTtJQUdULFdBQWlCTTtBQ3RCakIsSUFBSSxZQUFZMUosWUFDWixhQUFhd0IsYUFDYixVQUFVQyxVQUNWLFVBQVU0ekMsVUFDVixVQUFVQztBQVNkLGdCQUFjLFNBQVM7QUFDckIsTUFBSSxRQUFRLElBQ1IsU0FBUyxXQUFXLE9BQU8sSUFBSSxRQUFRO0FBRTNDLE9BQUs7QUFDTCxTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFFBQUksUUFBUSxRQUFRO0FBQ3BCLFNBQUssSUFBSSxNQUFNLElBQUksTUFBTTtBQUFBO0FBQUE7QUFLN0Jqc0MsT0FBSyxVQUFVLFFBQVE7QUFDdkJBLE9BQUssVUFBVSxZQUFZO0FBQzNCQSxPQUFLLFVBQVUsTUFBTTtBQUNyQkEsT0FBSyxVQUFVLE1BQU07QUFDckJBLE9BQUssVUFBVSxNQUFNO0lBRXJCLFFBQWlCQTtBQy9CakIsSUFBSSxPQUFPckosT0FDUGdJLGNBQVl4RyxZQUNaeUgsUUFBTXhIO0FBU1YsMkJBQXlCO0FBQ3ZCLE9BQUssT0FBTztBQUNaLE9BQUssV0FBVztBQUFBLElBQ2QsUUFBUSxJQUFJO0FBQUEsSUFDWixPQUFPLElBQUt3SCxVQUFPakI7QUFBQUEsSUFDbkIsVUFBVSxJQUFJO0FBQUE7QUFBQTtJQUlsQixpQkFBaUI4QjtBQ2JqQixxQkFBbUIsT0FBTztBQUN4QixNQUFJLE9BQU8sT0FBTztBQUNsQixTQUFRLFFBQVEsWUFBWSxRQUFRLFlBQVksUUFBUSxZQUFZLFFBQVEsWUFDdkUsVUFBVSxjQUNWLFVBQVU7QUFBQTtJQUdqQixhQUFpQkg7QUNkakIsSUFBSSxZQUFZM0o7QUFVaEIsc0JBQW9CLEtBQUssS0FBSztBQUM1QixNQUFJLE9BQU8sSUFBSTtBQUNmLFNBQU8sVUFBVSxPQUNiLEtBQUssT0FBTyxPQUFPLFdBQVcsV0FBVyxVQUN6QyxLQUFLO0FBQUE7SUFHWCxjQUFpQjRKO0FDakJqQixJQUFJQSxlQUFhNUo7QUFXakIsMEJBQXdCLEtBQUs7QUFDM0IsTUFBSSxTQUFTNEosYUFBVyxNQUFNLEtBQUssVUFBVTtBQUM3QyxPQUFLLFFBQVEsU0FBUyxJQUFJO0FBQzFCLFNBQU87QUFBQTtJQUdULGtCQUFpQkc7QUNqQmpCLElBQUlILGVBQWE1SjtBQVdqQix1QkFBcUIsS0FBSztBQUN4QixTQUFPNEosYUFBVyxNQUFNLEtBQUssSUFBSTtBQUFBO0lBR25DLGVBQWlCSTtBQ2ZqQixJQUFJSixlQUFhNUo7QUFXakIsdUJBQXFCLEtBQUs7QUFDeEIsU0FBTzRKLGFBQVcsTUFBTSxLQUFLLElBQUk7QUFBQTtJQUduQyxlQUFpQks7QUNmakIsSUFBSSxhQUFhaks7QUFZakIsdUJBQXFCLEtBQUssT0FBTztBQUMvQixNQUFJLE9BQU8sV0FBVyxNQUFNLE1BQ3hCLFFBQU8sS0FBSztBQUVoQixPQUFLLElBQUksS0FBSztBQUNkLE9BQUssUUFBUSxLQUFLLFFBQVEsUUFBTyxJQUFJO0FBQ3JDLFNBQU87QUFBQTtJQUdULGVBQWlCa0s7QUNyQmpCLElBQUksZ0JBQWdCbEssZ0JBQ2hCLGlCQUFpQndCLGlCQUNqQixjQUFjQyxjQUNkLGNBQWM0ekMsY0FDZCxjQUFjQztBQVNsQixvQkFBa0IsU0FBUztBQUN6QixNQUFJLFFBQVEsSUFDUixTQUFTLFdBQVcsT0FBTyxJQUFJLFFBQVE7QUFFM0MsT0FBSztBQUNMLFNBQU8sRUFBRSxRQUFRLFFBQVE7QUFDdkIsUUFBSSxRQUFRLFFBQVE7QUFDcEIsU0FBSyxJQUFJLE1BQU0sSUFBSSxNQUFNO0FBQUE7QUFBQTtBQUs3QnpyQyxXQUFTLFVBQVUsUUFBUTtBQUMzQkEsV0FBUyxVQUFVLFlBQVk7QUFDL0JBLFdBQVMsVUFBVSxNQUFNO0FBQ3pCQSxXQUFTLFVBQVUsTUFBTTtBQUN6QkEsV0FBUyxVQUFVLE1BQU07SUFFekIsWUFBaUJBO0FDL0JqQixJQUFJN0IsY0FBWWhJLFlBQ1ppSixRQUFNekgsTUFDTnFJLGFBQVdwSTtBQUdmLElBQUksbUJBQW1CO0FBWXZCLG9CQUFrQixLQUFLLE9BQU87QUFDNUIsTUFBSSxPQUFPLEtBQUs7QUFDaEIsTUFBSSxnQkFBZ0J1RyxhQUFXO0FBQzdCLFFBQUksUUFBUSxLQUFLO0FBQ2pCLFFBQUksQ0FBQ2lCLFNBQVEsTUFBTSxTQUFTLG1CQUFtQixHQUFJO0FBQ2pELFlBQU0sS0FBSyxDQUFDLEtBQUs7QUFDakIsV0FBSyxPQUFPLEVBQUUsS0FBSztBQUNuQixhQUFPO0FBQUE7QUFFVCxXQUFPLEtBQUssV0FBVyxJQUFJWSxXQUFTO0FBQUE7QUFFdEMsT0FBSyxJQUFJLEtBQUs7QUFDZCxPQUFLLE9BQU8sS0FBSztBQUNqQixTQUFPO0FBQUE7SUFHVCxZQUFpQlk7QUNqQ2pCLElBQUksWUFBWXpLLFlBQ1osYUFBYXdCLGFBQ2IsY0FBY0MsY0FDZCxXQUFXNHpDLFdBQ1gsV0FBV0MsV0FDWCxXQUFXQztBQVNmLGlCQUFlLFNBQVM7QUFDdEIsTUFBSSxPQUFPLEtBQUssV0FBVyxJQUFJLFVBQVU7QUFDekMsT0FBSyxPQUFPLEtBQUs7QUFBQTtBQUluQm5yQyxRQUFNLFVBQVUsUUFBUTtBQUN4QkEsUUFBTSxVQUFVLFlBQVk7QUFDNUJBLFFBQU0sVUFBVSxNQUFNO0FBQ3RCQSxRQUFNLFVBQVUsTUFBTTtBQUN0QkEsUUFBTSxVQUFVLE1BQU07SUFFdEIsU0FBaUJBO0FDekJqQixJQUFJLGlCQUFpQjtBQVlyQix1QkFBcUIsT0FBTztBQUMxQixPQUFLLFNBQVMsSUFBSSxPQUFPO0FBQ3pCLFNBQU87QUFBQTtJQUdULGVBQWlCTztBQ1RqQix1QkFBcUIsT0FBTztBQUMxQixTQUFPLEtBQUssU0FBUyxJQUFJO0FBQUE7SUFHM0IsZUFBaUJDO0FDYmpCLElBQUlmLGFBQVc3SixXQUNYLGNBQWN3QixjQUNkLGNBQWNDO0FBVWxCLG9CQUFrQixRQUFRO0FBQ3hCLE1BQUksUUFBUSxJQUNSLFNBQVMsVUFBVSxPQUFPLElBQUksT0FBTztBQUV6QyxPQUFLLFdBQVcsSUFBSW9JO0FBQ3BCLFNBQU8sRUFBRSxRQUFRLFFBQVE7QUFDdkIsU0FBSyxJQUFJLE9BQU87QUFBQTtBQUFBO0FBS3BCYSxXQUFTLFVBQVUsTUFBTUEsV0FBUyxVQUFVLE9BQU87QUFDbkRBLFdBQVMsVUFBVSxNQUFNO0lBRXpCLFlBQWlCQTtBQ2hCakIscUJBQW1CLE9BQU8sV0FBVztBQUNuQyxNQUFJLFFBQVEsSUFDUixTQUFTLFNBQVMsT0FBTyxJQUFJLE1BQU07QUFFdkMsU0FBTyxFQUFFLFFBQVEsUUFBUTtBQUN2QixRQUFJLFVBQVUsTUFBTSxRQUFRLE9BQU8sUUFBUTtBQUN6QyxhQUFPO0FBQUE7QUFBQTtBQUdYLFNBQU87QUFBQTtJQUdULGFBQWlCSztBQ2RqQixvQkFBa0IsT0FBTyxLQUFLO0FBQzVCLFNBQU8sTUFBTSxJQUFJO0FBQUE7SUFHbkIsWUFBaUJDO0FDWmpCLElBQUksV0FBV2hMLFdBQ1gsWUFBWXdCLFlBQ1osV0FBV0M7QUFHZixJQUFJb0oseUJBQXVCLEdBQ3ZCQywyQkFBeUI7QUFlN0IsdUJBQXFCLE9BQU8sT0FBTyxTQUFTLFlBQVksV0FBVyxPQUFPO0FBQ3hFLE1BQUksWUFBWSxVQUFVRCx3QkFDdEIsWUFBWSxNQUFNLFFBQ2xCLFlBQVksTUFBTTtBQUV0QixNQUFJLGFBQWEsYUFBYSxDQUFFLGNBQWEsWUFBWSxZQUFZO0FBQ25FLFdBQU87QUFBQTtBQUdULE1BQUksYUFBYSxNQUFNLElBQUk7QUFDM0IsTUFBSSxhQUFhLE1BQU0sSUFBSTtBQUMzQixNQUFJLGNBQWMsWUFBWTtBQUM1QixXQUFPLGNBQWMsU0FBUyxjQUFjO0FBQUE7QUFFOUMsTUFBSSxRQUFRLElBQ1IsU0FBUyxNQUNULE9BQVEsVUFBVUMsMkJBQTBCLElBQUksYUFBVztBQUUvRCxRQUFNLElBQUksT0FBTztBQUNqQixRQUFNLElBQUksT0FBTztBQUdqQixTQUFPLEVBQUUsUUFBUSxXQUFXO0FBQzFCLFFBQUksV0FBVyxNQUFNLFFBQ2pCLFdBQVcsTUFBTTtBQUVyQixRQUFJLFlBQVk7QUFDZCxVQUFJLFdBQVcsWUFDWCxXQUFXLFVBQVUsVUFBVSxPQUFPLE9BQU8sT0FBTyxTQUNwRCxXQUFXLFVBQVUsVUFBVSxPQUFPLE9BQU8sT0FBTztBQUFBO0FBRTFELFFBQUksYUFBYSxRQUFXO0FBQzFCLFVBQUksVUFBVTtBQUNaO0FBQUE7QUFFRixlQUFTO0FBQ1Q7QUFBQTtBQUdGLFFBQUksTUFBTTtBQUNSLFVBQUksQ0FBQyxVQUFVLE9BQU8sU0FBUyxXQUFVLFVBQVU7QUFDN0MsWUFBSSxDQUFDLFNBQVMsTUFBTSxhQUNmLGNBQWEsYUFBWSxVQUFVLFVBQVUsV0FBVSxTQUFTLFlBQVksU0FBUztBQUN4RixpQkFBTyxLQUFLLEtBQUs7QUFBQTtBQUFBLFVBRWpCO0FBQ04saUJBQVM7QUFDVDtBQUFBO0FBQUEsZUFFTyxDQUNMLGNBQWEsWUFDWCxVQUFVLFVBQVUsVUFBVSxTQUFTLFlBQVksU0FDcEQ7QUFDTCxlQUFTO0FBQ1Q7QUFBQTtBQUFBO0FBR0osUUFBTSxVQUFVO0FBQ2hCLFFBQU0sVUFBVTtBQUNoQixTQUFPO0FBQUE7SUFHVCxlQUFpQmtCO0FDbkZqQixJQUFJeEgsU0FBT3hFO0FBR1gsSUFBSWlMLGVBQWF6RyxPQUFLO0lBRXRCLGNBQWlCeUc7QUNFakIsc0JBQW9CLEtBQUs7QUFDdkIsTUFBSSxRQUFRLElBQ1IsU0FBUyxNQUFNLElBQUk7QUFFdkIsTUFBSSxRQUFRLFNBQVMsT0FBTyxLQUFLO0FBQy9CLFdBQU8sRUFBRSxTQUFTLENBQUMsS0FBSztBQUFBO0FBRTFCLFNBQU87QUFBQTtJQUdULGNBQWlCYTtBQ1ZqQixzQkFBb0IsS0FBSztBQUN2QixNQUFJLFFBQVEsSUFDUixTQUFTLE1BQU0sSUFBSTtBQUV2QixNQUFJLFFBQVEsU0FBUyxPQUFPO0FBQzFCLFdBQU8sRUFBRSxTQUFTO0FBQUE7QUFFcEIsU0FBTztBQUFBO0lBR1QsY0FBaUJDO0FDakJqQixJQUFJdEgsV0FBU3pFLFNBQ1QsYUFBYXdCLGFBQ2IsS0FBS0MsTUFDTHVLLGdCQUFjcXBDLGNBQ2QsYUFBYUMsYUFDYixhQUFhQztBQUdqQixJQUFJMXFDLHlCQUF1QixHQUN2QkMsMkJBQXlCO0FBRzdCLElBQUlJLFlBQVUsb0JBQ1ZDLFlBQVUsaUJBQ1ZDLGFBQVcsa0JBQ1hDLFdBQVMsZ0JBQ1RDLGNBQVksbUJBQ1pDLGNBQVksbUJBQ1pDLFdBQVMsZ0JBQ1RDLGNBQVksbUJBQ1p6RixjQUFZO0FBRWhCLElBQUkwRixtQkFBaUIsd0JBQ2pCQyxnQkFBYztBQUdsQixJQUFJQyxnQkFBY25ILFdBQVNBLFNBQU8sWUFBWSxRQUMxQyxnQkFBZ0JtSCxnQkFBY0EsY0FBWSxVQUFVO0FBbUJ4RCxzQkFBb0IsUUFBUSxPQUFPLEtBQUssU0FBUyxZQUFZLFdBQVcsT0FBTztBQUM3RSxVQUFRO0FBQUEsU0FDREQ7QUFDSCxVQUFLLE9BQU8sY0FBYyxNQUFNLGNBQzNCLE9BQU8sY0FBYyxNQUFNLFlBQWE7QUFDM0MsZUFBTztBQUFBO0FBRVQsZUFBUyxPQUFPO0FBQ2hCLGNBQVEsTUFBTTtBQUFBLFNBRVhEO0FBQ0gsVUFBSyxPQUFPLGNBQWMsTUFBTSxjQUM1QixDQUFDLFVBQVUsSUFBSSxXQUFXLFNBQVMsSUFBSSxXQUFXLFNBQVM7QUFDN0QsZUFBTztBQUFBO0FBRVQsYUFBTztBQUFBLFNBRUpSO0FBQUFBLFNBQ0FDO0FBQUFBLFNBQ0FHO0FBR0gsYUFBTyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQUEsU0FFakJGO0FBQ0gsYUFBTyxPQUFPLFFBQVEsTUFBTSxRQUFRLE9BQU8sV0FBVyxNQUFNO0FBQUEsU0FFekRHO0FBQUFBLFNBQ0FFO0FBSUgsYUFBTyxVQUFXLFFBQVE7QUFBQSxTQUV2Qko7QUFDSCxVQUFJLFVBQVU7QUFBQSxTQUVYRztBQUNILFVBQUksWUFBWSxVQUFVWDtBQUMxQixpQkFBWSxXQUFVO0FBRXRCLFVBQUksT0FBTyxRQUFRLE1BQU0sUUFBUSxDQUFDLFdBQVc7QUFDM0MsZUFBTztBQUFBO0FBR1QsVUFBSSxVQUFVLE1BQU0sSUFBSTtBQUN4QixVQUFJLFNBQVM7QUFDWCxlQUFPLFdBQVc7QUFBQTtBQUVwQixpQkFBV0M7QUFHWCxZQUFNLElBQUksUUFBUTtBQUNsQixVQUFJLFNBQVNrQixjQUFZLFFBQVEsU0FBUyxRQUFRLFFBQVEsU0FBUyxZQUFZLFdBQVc7QUFDMUYsWUFBTSxVQUFVO0FBQ2hCLGFBQU87QUFBQSxTQUVKaEc7QUFDSCxVQUFJLGVBQWU7QUFDakIsZUFBTyxjQUFjLEtBQUssV0FBVyxjQUFjLEtBQUs7QUFBQTtBQUFBO0FBRzlELFNBQU87QUFBQTtJQUdULGNBQWlCdUo7QUN2R2pCLHFCQUFtQixPQUFPLFFBQVE7QUFDaEMsTUFBSSxRQUFRLElBQ1IsU0FBUyxPQUFPLFFBQ2hCLFVBQVMsTUFBTTtBQUVuQixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFVBQU0sVUFBUyxTQUFTLE9BQU87QUFBQTtBQUVqQyxTQUFPO0FBQUE7SUFHVCxhQUFpQnJEO0FDSWpCLElBQUlELFlBQVUsTUFBTTtJQUVwQixZQUFpQkE7QUN6QmpCLElBQUksWUFBWWpNLFlBQ1ppTSxZQUFVeks7QUFhZCwwQkFBd0IsUUFBUSxVQUFVLGFBQWE7QUFDckQsTUFBSSxTQUFTLFNBQVM7QUFDdEIsU0FBT3lLLFVBQVEsVUFBVSxTQUFTLFVBQVUsUUFBUSxZQUFZO0FBQUE7SUFHbEUsa0JBQWlCd0M7QUNWakIsdUJBQXFCLE9BQU8sV0FBVztBQUNyQyxNQUFJLFFBQVEsSUFDUixTQUFTLFNBQVMsT0FBTyxJQUFJLE1BQU0sUUFDbkMsV0FBVyxHQUNYLFNBQVM7QUFFYixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFFBQUksUUFBUSxNQUFNO0FBQ2xCLFFBQUksVUFBVSxPQUFPLE9BQU8sUUFBUTtBQUNsQyxhQUFPLGNBQWM7QUFBQTtBQUFBO0FBR3pCLFNBQU87QUFBQTtJQUdULGVBQWlCbEM7QUNOakIsdUJBQXFCO0FBQ25CLFNBQU87QUFBQTtJQUdULGNBQWlCRDtBQ3RCakIsSUFBSSxjQUFjdE0sY0FDZCxZQUFZd0I7QUFHaEIsSUFBSWtELGdCQUFjLE9BQU87QUFHekIsSUFBSXlILHlCQUF1QnpILGNBQVk7QUFHdkMsSUFBSSxtQkFBbUIsT0FBTztBQVM5QixJQUFJMkgsZUFBYSxDQUFDLG1CQUFtQixZQUFZLFNBQVMsUUFBUTtBQUNoRSxNQUFJLFVBQVUsTUFBTTtBQUNsQixXQUFPO0FBQUE7QUFFVCxXQUFTLE9BQU87QUFDaEIsU0FBTyxZQUFZLGlCQUFpQixTQUFTLFNBQVMsUUFBUTtBQUM1RCxXQUFPRix1QkFBcUIsS0FBSyxRQUFRO0FBQUE7QUFBQTtJQUk3QyxjQUFpQkU7QUNwQmpCLHFCQUFtQixJQUFHLFVBQVU7QUFDOUIsTUFBSSxRQUFRLElBQ1IsU0FBUyxNQUFNO0FBRW5CLFNBQU8sRUFBRSxRQUFRLElBQUc7QUFDbEIsV0FBTyxTQUFTLFNBQVM7QUFBQTtBQUUzQixTQUFPO0FBQUE7SUFHVCxhQUFpQjhCO0FDS2pCLHdCQUFzQixPQUFPO0FBQzNCLFNBQU8sU0FBUyxRQUFRLE9BQU8sU0FBUztBQUFBO0lBRzFDLGlCQUFpQmxJO0FDNUJqQixJQUFJWCxlQUFhdEYsYUFDYmlHLGlCQUFlekU7QUFHbkIsSUFBSWdMLFlBQVU7QUFTZCwyQkFBeUIsT0FBTztBQUM5QixTQUFPdkcsZUFBYSxVQUFVWCxhQUFXLFVBQVVrSDtBQUFBQTtJQUdyRCxtQkFBaUJFO0FDakJqQixJQUFJLGtCQUFrQjFNLGtCQUNsQmlHLGlCQUFlekU7QUFHbkIsSUFBSWtELGdCQUFjLE9BQU87QUFHekIsSUFBSTNFLG1CQUFpQjJFLGNBQVk7QUFHakMsSUFBSSx1QkFBdUJBLGNBQVk7QUFvQnZDLElBQUkrSCxnQkFBYyxnQkFBZ0IsV0FBVztBQUFFLFNBQU87QUFBQSxPQUFrQixrQkFBa0IsU0FBUyxPQUFPO0FBQ3hHLFNBQU94RyxlQUFhLFVBQVVsRyxpQkFBZSxLQUFLLE9BQU8sYUFDdkQsQ0FBQyxxQkFBcUIsS0FBSyxPQUFPO0FBQUE7SUFHdEMsZ0JBQWlCME07O0FDdEJqQixxQkFBcUI7QUFDbkIsU0FBTztBQUFBO0lBR1QsY0FBaUI7O0FDakJqQixNQUFJLFFBQU96TSxPQUNQLGFBQVl3QjtBQUdoQixNQUFJLGVBQTRDLFlBQVcsQ0FBQyxTQUFRLFlBQVk7QUFHaEYsTUFBSSxjQUFhLGdCQUFlLFFBQTZCLFdBQVUsQ0FBQyxRQUFPLFlBQVk7QUFHM0YsTUFBSSxpQkFBZ0IsZUFBYyxZQUFXLFlBQVk7QUFHekQsTUFBSSxVQUFTLGlCQUFnQixNQUFLLFNBQVM7QUFHM0MsTUFBSSxrQkFBaUIsVUFBUyxRQUFPLFdBQVc7QUFtQmhELE1BQUksWUFBVyxtQkFBa0I7QUFFakMsb0JBQWlCO0FBQUE7QUNwQ2pCLElBQUkrRCxxQkFBbUI7QUFHdkIsSUFBSSxXQUFXO0FBVWYsbUJBQWlCLE9BQU8sUUFBUTtBQUM5QixNQUFJLE9BQU8sT0FBTztBQUNsQixXQUFTLFVBQVUsT0FBT0EscUJBQW1CO0FBRTdDLFNBQU8sQ0FBQyxDQUFDLFVBQ04sU0FBUSxZQUNOLFFBQVEsWUFBWSxTQUFTLEtBQUssV0FDaEMsU0FBUSxNQUFNLFFBQVEsS0FBSyxLQUFLLFFBQVE7QUFBQTtJQUdqRCxXQUFpQks7QUN2QmpCLElBQUksbUJBQW1CO0FBNEJ2QixvQkFBa0IsT0FBTztBQUN2QixTQUFPLE9BQU8sU0FBUyxZQUNyQixRQUFRLE1BQU0sUUFBUSxLQUFLLEtBQUssU0FBUztBQUFBO0lBRzdDLGFBQWlCSjtBQ2xDakIsSUFBSUYsZUFBYXRGLGFBQ2J3RixhQUFXaEUsWUFDWHlFLGlCQUFleEU7QUFHbkIsSUFBSStLLFlBQVUsc0JBQ1ZTLGFBQVcsa0JBQ1gsVUFBVSxvQkFDVixVQUFVLGlCQUNWLFdBQVcsa0JBQ1gsVUFBVSxxQkFDVjVCLFdBQVMsZ0JBQ1QsWUFBWSxtQkFDWjZCLGNBQVksbUJBQ1osWUFBWSxtQkFDWjFCLFdBQVMsZ0JBQ1QsWUFBWSxtQkFDWjJCLGVBQWE7QUFFakIsSUFBSSxpQkFBaUIsd0JBQ2pCeEIsZ0JBQWMscUJBQ2QsYUFBYSx5QkFDYixhQUFhLHlCQUNiLFVBQVUsc0JBQ1YsV0FBVyx1QkFDWCxXQUFXLHVCQUNYLFdBQVcsdUJBQ1gsa0JBQWtCLDhCQUNsQixZQUFZLHdCQUNaLFlBQVk7QUFHaEIsSUFBSSxpQkFBaUI7QUFDckIsZUFBZSxjQUFjLGVBQWUsY0FDNUMsZUFBZSxXQUFXLGVBQWUsWUFDekMsZUFBZSxZQUFZLGVBQWUsWUFDMUMsZUFBZSxtQkFBbUIsZUFBZSxhQUNqRCxlQUFlLGFBQWE7QUFDNUIsZUFBZWEsYUFBVyxlQUFlUyxjQUN6QyxlQUFlLGtCQUFrQixlQUFlLFdBQ2hELGVBQWV0QixpQkFBZSxlQUFlLFdBQzdDLGVBQWUsWUFBWSxlQUFlLFdBQzFDLGVBQWVOLFlBQVUsZUFBZSxhQUN4QyxlQUFlNkIsZUFBYSxlQUFlLGFBQzNDLGVBQWUxQixZQUFVLGVBQWUsYUFDeEMsZUFBZTJCLGdCQUFjO0FBUzdCLDRCQUEwQixPQUFPO0FBQy9CLFNBQU9sSCxlQUFhLFVBQ2xCVCxXQUFTLE1BQU0sV0FBVyxDQUFDLENBQUMsZUFBZUYsYUFBVztBQUFBO0lBRzFELG9CQUFpQjRJO0FDcERqQixxQkFBbUIsTUFBTTtBQUN2QixTQUFPLFNBQVMsT0FBTztBQUNyQixXQUFPLEtBQUs7QUFBQTtBQUFBO0lBSWhCLGFBQWlCRDs7O0FDYmpCLE1BQUksY0FBYWpPO0FBR2pCLE1BQUksZUFBNEMsWUFBVyxDQUFDLFNBQVEsWUFBWTtBQUdoRixNQUFJLGNBQWEsZ0JBQWUsUUFBNkIsV0FBVSxDQUFDLFFBQU8sWUFBWTtBQUczRixNQUFJLGlCQUFnQixlQUFjLFlBQVcsWUFBWTtBQUd6RCxNQUFJLGVBQWMsa0JBQWlCLFlBQVc7QUFHOUMsTUFBSSxZQUFZLFdBQVc7QUFDekIsUUFBSTtBQUVGLFVBQUksUUFBUSxlQUFjLFlBQVcsV0FBVyxZQUFXLFFBQVEsUUFBUTtBQUUzRSxVQUFJLE9BQU87QUFDVCxlQUFPO0FBQUE7QUFJVCxhQUFPLGdCQUFlLGFBQVksV0FBVyxhQUFZLFFBQVE7QUFBQSxhQUMxRCxHQUFQO0FBQUE7QUFBQTtBQUdKLG9CQUFpQjtBQUFBO0FDN0JqQixJQUFJLG1CQUFtQkEsbUJBQ25CLFlBQVl3QixZQUNaLFdBQVdDO0FBR2YsSUFBSSxtQkFBbUIsWUFBWSxTQUFTO0FBbUI1QyxJQUFJdU0saUJBQWUsbUJBQW1CLFVBQVUsb0JBQW9CO0lBRXBFLGlCQUFpQkE7QUMxQmpCLElBQUksWUFBWWhPLFlBQ1p5TSxnQkFBY2pMLGVBQ2R5SyxZQUFVeEssV0FDVnNMLGFBQVdzb0Msb0JBQ1h6dkMsWUFBVTB2QyxVQUNWdG5DLGlCQUFldW5DO0FBR25CLElBQUk3d0MsZ0JBQWMsT0FBTztBQUd6QixJQUFJM0UsbUJBQWlCMkUsY0FBWTtBQVVqQyx5QkFBdUIsT0FBTyxXQUFXO0FBQ3ZDLE1BQUksUUFBUXVILFVBQVEsUUFDaEIsUUFBUSxDQUFDLFNBQVNRLGNBQVksUUFDOUIsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTTSxXQUFTLFFBQ3RDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVVpQixlQUFhLFFBQ3JELGNBQWMsU0FBUyxTQUFTLFVBQVUsUUFDMUMsU0FBUyxjQUFjLFVBQVUsTUFBTSxRQUFRLFVBQVUsSUFDekQsU0FBUyxPQUFPO0FBRXBCLFdBQVMsT0FBTyxPQUFPO0FBQ3JCLFFBQUssY0FBYWpPLGlCQUFlLEtBQUssT0FBTyxTQUN6QyxDQUFFLGdCQUVDLFFBQU8sWUFFTixVQUFXLFFBQU8sWUFBWSxPQUFPLGFBRXJDLFVBQVcsUUFBTyxZQUFZLE9BQU8sZ0JBQWdCLE9BQU8saUJBRTdENkYsVUFBUSxLQUFLLFdBQ1o7QUFDTixhQUFPLEtBQUs7QUFBQTtBQUFBO0FBR2hCLFNBQU87QUFBQTtJQUdULGlCQUFpQjJJO0FDL0NqQixJQUFJN0osZ0JBQWMsT0FBTztBQVN6Qix1QkFBcUIsT0FBTztBQUMxQixNQUFJLE9BQU8sU0FBUyxNQUFNLGFBQ3RCLFFBQVMsT0FBTyxRQUFRLGNBQWMsS0FBSyxhQUFjQTtBQUU3RCxTQUFPLFVBQVU7QUFBQTtJQUduQixlQUFpQjRKO0FDVGpCLG1CQUFpQixNQUFNLFlBQVc7QUFDaEMsU0FBTyxTQUFTLEtBQUs7QUFDbkIsV0FBTyxLQUFLLFdBQVU7QUFBQTtBQUFBO0lBSTFCLFdBQWlCRDtBQ2RqQixJQUFJLFVBQVVyTztBQUdkLElBQUlvTyxlQUFhLFFBQVEsT0FBTyxNQUFNO0lBRXRDLGNBQWlCQTtBQ0xqQixJQUFJLGNBQWNwTyxjQUNkLGFBQWF3QjtBQUdqQixJQUFJa0QsZ0JBQWMsT0FBTztBQUd6QixJQUFJM0UsbUJBQWlCMkUsY0FBWTtBQVNqQyxvQkFBa0IsUUFBUTtBQUN4QixNQUFJLENBQUMsWUFBWSxTQUFTO0FBQ3hCLFdBQU8sV0FBVztBQUFBO0FBRXBCLE1BQUksU0FBUztBQUNiLFdBQVMsT0FBTyxPQUFPLFNBQVM7QUFDOUIsUUFBSTNFLGlCQUFlLEtBQUssUUFBUSxRQUFRLE9BQU8sZUFBZTtBQUM1RCxhQUFPLEtBQUs7QUFBQTtBQUFBO0FBR2hCLFNBQU87QUFBQTtJQUdULFlBQWlCeU87QUM3QmpCLElBQUkvSSxlQUFhekYsY0FDYndGLGFBQVdoRTtBQTJCZix1QkFBcUIsT0FBTztBQUMxQixTQUFPLFNBQVMsUUFBUWdFLFdBQVMsTUFBTSxXQUFXLENBQUNDLGFBQVc7QUFBQTtJQUdoRSxnQkFBaUJFO0FDaENqQixJQUFJLGdCQUFnQjNGLGdCQUNoQixXQUFXd0IsV0FDWCxjQUFjQztBQThCbEIsZ0JBQWMsUUFBUTtBQUNwQixTQUFPLFlBQVksVUFBVSxjQUFjLFVBQVUsU0FBUztBQUFBO0lBR2hFLFNBQWlCaU47QUNwQ2pCLElBQUksaUJBQWlCMU8saUJBQ2pCLGFBQWF3QixhQUNia04sU0FBT2pOO0FBU1gsc0JBQW9CLFFBQVE7QUFDMUIsU0FBTyxlQUFlLFFBQVFpTixRQUFNO0FBQUE7SUFHdEMsY0FBaUJDO0FDZmpCLElBQUksYUFBYTNPO0FBR2pCLElBQUk2Syx5QkFBdUI7QUFHM0IsSUFBSW5HLGdCQUFjLE9BQU87QUFHekIsSUFBSTNFLG1CQUFpQjJFLGNBQVk7QUFlakMsd0JBQXNCLFFBQVEsT0FBTyxTQUFTLFlBQVksV0FBVyxPQUFPO0FBQzFFLE1BQUksWUFBWSxVQUFVbUcsd0JBQ3RCLFdBQVcsV0FBVyxTQUN0QixZQUFZLFNBQVMsUUFDckIsV0FBVyxXQUFXLFFBQ3RCLFlBQVksU0FBUztBQUV6QixNQUFJLGFBQWEsYUFBYSxDQUFDLFdBQVc7QUFDeEMsV0FBTztBQUFBO0FBRVQsTUFBSSxRQUFRO0FBQ1osU0FBTyxTQUFTO0FBQ2QsUUFBSSxNQUFNLFNBQVM7QUFDbkIsUUFBSSxDQUFFLGFBQVksT0FBTyxRQUFROUssaUJBQWUsS0FBSyxPQUFPLE9BQU87QUFDakUsYUFBTztBQUFBO0FBQUE7QUFJWCxNQUFJLGFBQWEsTUFBTSxJQUFJO0FBQzNCLE1BQUksYUFBYSxNQUFNLElBQUk7QUFDM0IsTUFBSSxjQUFjLFlBQVk7QUFDNUIsV0FBTyxjQUFjLFNBQVMsY0FBYztBQUFBO0FBRTlDLE1BQUksU0FBUztBQUNiLFFBQU0sSUFBSSxRQUFRO0FBQ2xCLFFBQU0sSUFBSSxPQUFPO0FBRWpCLE1BQUksV0FBVztBQUNmLFNBQU8sRUFBRSxRQUFRLFdBQVc7QUFDMUIsVUFBTSxTQUFTO0FBQ2YsUUFBSSxXQUFXLE9BQU8sTUFDbEIsV0FBVyxNQUFNO0FBRXJCLFFBQUksWUFBWTtBQUNkLFVBQUksV0FBVyxZQUNYLFdBQVcsVUFBVSxVQUFVLEtBQUssT0FBTyxRQUFRLFNBQ25ELFdBQVcsVUFBVSxVQUFVLEtBQUssUUFBUSxPQUFPO0FBQUE7QUFHekQsUUFBSSxDQUFFLGNBQWEsU0FDVixhQUFhLFlBQVksVUFBVSxVQUFVLFVBQVUsU0FBUyxZQUFZLFNBQzdFLFdBQ0Q7QUFDTCxlQUFTO0FBQ1Q7QUFBQTtBQUVGLGdCQUFhLFlBQVcsT0FBTztBQUFBO0FBRWpDLE1BQUksVUFBVSxDQUFDLFVBQVU7QUFDdkIsUUFBSSxVQUFVLE9BQU8sYUFDakIsVUFBVSxNQUFNO0FBR3BCLFFBQUksV0FBVyxXQUNWLGtCQUFpQixVQUFVLGlCQUFpQixVQUM3QyxDQUFFLFFBQU8sV0FBVyxjQUFjLG1CQUFtQixXQUNuRCxPQUFPLFdBQVcsY0FBYyxtQkFBbUIsVUFBVTtBQUNqRSxlQUFTO0FBQUE7QUFBQTtBQUdiLFFBQU0sVUFBVTtBQUNoQixRQUFNLFVBQVU7QUFDaEIsU0FBTztBQUFBO0lBR1QsZ0JBQWlCeVA7QUN6RmpCLElBQUl0RyxjQUFZbEosWUFDWndFLFNBQU9oRDtBQUdYLElBQUlvTixhQUFXMUYsWUFBVTFFLFFBQU07SUFFL0IsWUFBaUJvSztBQ05qQixJQUFJMUYsY0FBWWxKLFlBQ1p3RSxTQUFPaEQ7QUFHWCxJQUFJcU4sWUFBVTNGLFlBQVUxRSxRQUFNO0lBRTlCLFdBQWlCcUs7QUNOakIsSUFBSTNGLGNBQVlsSixZQUNad0UsU0FBT2hEO0FBR1gsSUFBSXNOLFFBQU01RixZQUFVMUUsUUFBTTtJQUUxQixPQUFpQnNLO0FDTmpCLElBQUksWUFBWTlPLFlBQ1osT0FBT3dCO0FBR1gsSUFBSXVOLFlBQVUsVUFBVSxNQUFNO0lBRTlCLFdBQWlCQTtBQ05qQixJQUFJLFdBQVcvTyxXQUNYaUosUUFBTXpILE1BQ05xTixZQUFVcE4sVUFDVnFOLFFBQU11bUMsTUFDTnRtQyxZQUFVdW1DLFVBQ1Zod0MsZUFBYWl3QyxhQUNiLFdBQVdDO0FBR2YsSUFBSSxTQUFTLGdCQUNUdG9DLGNBQVksbUJBQ1osYUFBYSxvQkFDYixTQUFTLGdCQUNULGFBQWE7QUFFakIsSUFBSSxjQUFjO0FBR2xCLElBQUkscUJBQXFCLFNBQVMsV0FDOUIsZ0JBQWdCLFNBQVNqRSxRQUN6QixvQkFBb0IsU0FBUzRGLFlBQzdCLGdCQUFnQixTQUFTQyxRQUN6QixvQkFBb0IsU0FBU0M7QUFTakMsSUFBSU8sV0FBU2hLO0FBR2IsSUFBSyxZQUFZZ0ssU0FBTyxJQUFJLFNBQVMsSUFBSSxZQUFZLFFBQVEsZUFDeERyRyxTQUFPcUcsU0FBTyxJQUFJckcsWUFBUSxVQUMxQjRGLGFBQVdTLFNBQU9ULFVBQVEsY0FBYyxjQUN4Q0MsU0FBT1EsU0FBTyxJQUFJUixZQUFRLFVBQzFCQyxhQUFXTyxTQUFPLElBQUlQLGdCQUFZLFlBQWE7QUFDbERPLGFBQVMsU0FBUyxPQUFPO0FBQ3ZCLFFBQUksU0FBU2hLLGFBQVcsUUFDcEIsT0FBTyxVQUFVNEgsY0FBWSxNQUFNLGNBQWMsUUFDakQsYUFBYSxPQUFPLFNBQVMsUUFBUTtBQUV6QyxRQUFJLFlBQVk7QUFDZCxjQUFRO0FBQUEsYUFDRDtBQUFvQixpQkFBTztBQUFBLGFBQzNCO0FBQWUsaUJBQU87QUFBQSxhQUN0QjtBQUFtQixpQkFBTztBQUFBLGFBQzFCO0FBQWUsaUJBQU87QUFBQSxhQUN0QjtBQUFtQixpQkFBTztBQUFBO0FBQUE7QUFHbkMsV0FBTztBQUFBO0FBQUE7SUFJWCxVQUFpQm9DO0FDekRqQixJQUFJbEYsVUFBUXBLLFFBQ1IsY0FBY3dCLGNBQ2QsYUFBYUMsYUFDYixlQUFlNHpDLGVBQ2YsU0FBU0MsU0FDVHJwQyxZQUFVc3BDLFdBQ1YsV0FBV0Msb0JBQ1gsZUFBZUU7QUFHbkIsSUFBSTdxQyx5QkFBdUI7QUFHM0IsSUFBSSxVQUFVLHNCQUNWLFdBQVcsa0JBQ1gsWUFBWTtBQUdoQixJQUFJLGNBQWMsT0FBTztBQUd6QixJQUFJLGlCQUFpQixZQUFZO0FBZ0JqQywyQkFBeUIsUUFBUSxPQUFPLFNBQVMsWUFBWSxXQUFXLE9BQU87QUFDN0UsTUFBSSxXQUFXb0IsVUFBUSxTQUNuQixXQUFXQSxVQUFRLFFBQ25CLFNBQVMsV0FBVyxXQUFXLE9BQU8sU0FDdEMsU0FBUyxXQUFXLFdBQVcsT0FBTztBQUUxQyxXQUFTLFVBQVUsVUFBVSxZQUFZO0FBQ3pDLFdBQVMsVUFBVSxVQUFVLFlBQVk7QUFFekMsTUFBSSxXQUFXLFVBQVUsV0FDckIsV0FBVyxVQUFVLFdBQ3JCLFlBQVksVUFBVTtBQUUxQixNQUFJLGFBQWEsU0FBUyxTQUFTO0FBQ2pDLFFBQUksQ0FBQyxTQUFTLFFBQVE7QUFDcEIsYUFBTztBQUFBO0FBRVQsZUFBVztBQUNYLGVBQVc7QUFBQTtBQUViLE1BQUksYUFBYSxDQUFDLFVBQVU7QUFDMUIsYUFBVSxTQUFRLElBQUk3QjtBQUN0QixXQUFRLFlBQVksYUFBYSxVQUM3QixZQUFZLFFBQVEsT0FBTyxTQUFTLFlBQVksV0FBVyxTQUMzRCxXQUFXLFFBQVEsT0FBTyxRQUFRLFNBQVMsWUFBWSxXQUFXO0FBQUE7QUFFeEUsTUFBSSxDQUFFLFdBQVVTLHlCQUF1QjtBQUNyQyxRQUFJLGVBQWUsWUFBWSxlQUFlLEtBQUssUUFBUSxnQkFDdkQsZUFBZSxZQUFZLGVBQWUsS0FBSyxPQUFPO0FBRTFELFFBQUksZ0JBQWdCLGNBQWM7QUFDaEMsVUFBSSxlQUFlLGVBQWUsT0FBTyxVQUFVLFFBQy9DLGVBQWUsZUFBZSxNQUFNLFVBQVU7QUFFbEQsZUFBVSxTQUFRLElBQUlUO0FBQ3RCLGFBQU8sVUFBVSxjQUFjLGNBQWMsU0FBUyxZQUFZO0FBQUE7QUFBQTtBQUd0RSxNQUFJLENBQUMsV0FBVztBQUNkLFdBQU87QUFBQTtBQUVULFdBQVUsU0FBUSxJQUFJQTtBQUN0QixTQUFPLGFBQWEsUUFBUSxPQUFPLFNBQVMsWUFBWSxXQUFXO0FBQUE7SUFHckUsbUJBQWlCcUY7QUNsRmpCLElBQUksa0JBQWtCelAsa0JBQ2xCaUcsaUJBQWV6RTtBQWdCbkIsdUJBQXFCLE9BQU8sT0FBTyxTQUFTLFlBQVksT0FBTztBQUM3RCxNQUFJLFVBQVUsT0FBTztBQUNuQixXQUFPO0FBQUE7QUFFVCxNQUFJLFNBQVMsUUFBUSxTQUFTLFFBQVMsQ0FBQ3lFLGVBQWEsVUFBVSxDQUFDQSxlQUFhLFFBQVM7QUFDcEYsV0FBTyxVQUFVLFNBQVMsVUFBVTtBQUFBO0FBRXRDLFNBQU8sZ0JBQWdCLE9BQU8sT0FBTyxTQUFTLFlBQVl5SixlQUFhO0FBQUE7SUFHekUsZUFBaUJBO0FDM0JqQixJQUFJQSxnQkFBYzFQO0FBOEJsQixpQkFBaUIsT0FBTyxPQUFPO0FBQzdCLFNBQU8wUCxjQUFZLE9BQU87QUFBQTtJQUc1QixZQUFpQjtBQ2hDakIsSUFBSXdsQywyQkFBeUJsMUM7QUFFN0IsdUJBQXFCO3VCQUNBO3NCQUNEO3VCQUNDO3VCQUNBOzhCQUNPO0FBRTVCLElBQUksV0FBV2sxQyx5QkFBdUIxekM7QUFFdEMsb0JBQW9CLE9BQU8sVUFBVTtBQUNuQyxNQUFJLENBQUMsU0FBUyxZQUFZO0FBQU0sV0FBTztBQUN2QyxhQUFXLFNBQVMsU0FBUyxPQUFPO0FBQUE7QUFHdEMsbUJBQW1CLFFBQVEsT0FBTztBQUNoQyxNQUFJLFdBQVcsT0FBTyxRQUFRLE9BQU87QUFDckMsTUFBSSxZQUFZLFdBQVc7QUFDM0IsU0FBTztBQUFBO0FBR1Qsb0JBQW9CLFFBQVEsSUFBRyxLQUFLLE9BQU87QUFDekMsTUFBSSxZQUFZLFVBQVUsUUFBUTtBQUNsQyxTQUFPLE1BQU0sUUFBUSxJQUFJLEtBQUssTUFBTyxNQUFJLE9BQU8sUUFBUSxhQUFhLEtBQUssTUFBTyxNQUFJLE9BQU8sUUFBUTtBQUFBO0FBR3RHLG9CQUFvQixLQUFLLE1BQU07QUFDN0IsTUFBSSxLQUFJLEtBQUssR0FDVCxLQUFJLEtBQUs7QUFDYixTQUFPLE1BQUssSUFBSSxPQUFPLE1BQUssSUFBSSxVQUFVLE1BQUssSUFBSSxRQUFRLE1BQUssSUFBSTtBQUFBO0FBR3RFLDJCQUEyQixRQUFPLFFBQVEsS0FBSyxPQUFPLEtBQUs7QUFDekQsTUFBSSxXQUFXO0FBQ2YsTUFBSSxTQUFTO0FBQ2IsTUFBSSxjQUFjLFFBQVE7QUFDMUIsTUFBSSxZQUFZLFVBQVUsUUFBUTtBQUVsQyxNQUFJLGNBQWMsV0FBVyxRQUFRLElBQUksR0FBRyxLQUFLO0FBR2pELE1BQUksZUFBZSxPQUFPLE1BQU0sSUFBSSxLQUFLLE9BQU8sU0FBUyxJQUFJO0FBQzdELE1BQUksYUFBYSxPQUFPLE1BQU0sT0FBTSxLQUFLLE9BQU8sU0FBUyxPQUFNO0FBRS9ELE1BQUksZUFBZSxPQUFNLElBQUksT0FBTztBQUNwQyxNQUFJLGVBQWUsT0FBTyxNQUFNLE9BQU07QUFDdEMsTUFBSSxZQUFZLElBQUksTUFBTSxPQUFPLE9BQU8sSUFBSSxTQUFTLE9BQU87QUFFNUQsTUFBSSxXQUFXO0FBQ2IsZUFBVztBQUNYLGFBQVM7QUFBQTtBQUdYLE1BQUksY0FBYztBQUNoQixRQUFJLGNBQWM7QUFDaEIsaUJBQVc7QUFDWCxlQUFTO0FBQUEsZUFDQSxjQUFjO0FBQ3ZCLGlCQUFXO0FBQ1gsZUFBUztBQUFBO0FBQUE7QUFJYixNQUFJLFlBQVk7QUFFZCxlQUFXLFNBQVMsTUFBTSxjQUFjLEtBQUssTUFBTyxRQUFNLElBQUksT0FBTyxRQUFRLGFBQWEsS0FBSyxNQUFPLFFBQU0sSUFBSSxPQUFPLFFBQVE7QUFFL0gsUUFBSSxjQUFjO0FBQ2hCLFVBQUksY0FBYztBQUFVLG1CQUFXO0FBQUE7QUFBaUIsaUJBQVM7QUFBQSxlQUN4RCxPQUFNLElBQUksSUFBSSxHQUFHO0FBRzFCLGVBQVM7QUFBQSxXQUNKO0FBRUwsaUJBQVc7QUFBQTtBQUFBO0FBSWYsU0FBTztBQUFBLElBQ0w7QUFBQSxJQUNBO0FBQUE7QUFBQTs7QUNsRkosTUFBSSwwQkFBeUJ4QjtBQUU3Qix3QkFBcUI7QUFDckIscUJBQWtCO0FBRWxCLE1BQUksY0FBYSx3QkFBdUJ3QjtBQUV4QyxNQUFJLFVBQVMsd0JBQXVCQztBQUVwQyxNQUFJLGFBQWEsd0JBQXVCNHpDO0FBRXhDLE1BQUksYUFBYUM7QUFHakIsTUFBSSxZQUFXO0FBQUEsSUFDYixXQUFXO0FBQUEsTUFDVCxhQUFhLFlBQVcsUUFBUSxPQUFPO0FBQUEsTUFDdkMsVUFBVSxZQUFXLFFBQVE7QUFBQSxNQUM3QixVQUFVLFlBQVcsUUFBUTtBQUFBLE1BQzdCLFdBQVcsWUFBVyxRQUFRLE9BQU87QUFBQSxNQUNyQyxXQUFXLFlBQVcsUUFBUSxPQUFPO0FBQUEsTUFDckMsWUFBWSxZQUFXLFFBQVEsT0FBTztBQUFBLE1BQ3RDLFNBQVMsWUFBVyxRQUFRLE9BQU87QUFBQSxNQUNuQyxVQUFVLFlBQVcsUUFBUTtBQUFBLE1BQzdCLGVBQWUsWUFBVyxRQUFRO0FBQUEsTUFDbEMsWUFBWSxZQUFXLFFBQVE7QUFBQTtBQUFBLElBRWpDLGNBQWM7QUFBQSxNQUNaLFVBQVU7QUFBQSxNQUNWLFVBQVU7QUFBQTtBQUFBLElBRVosYUFBYSxzQkFBcUIsT0FBTyxPQUFPO1VBQzFDLFdBQVcsTUFBTTtBQUNiLFlBQU07VUFDVixhQUFZLE1BQU0sV0FDbEIsVUFBVSxNQUFNLFNBQ2hCLFdBQVcsTUFBTSxVQUNqQixnQkFBZ0IsTUFBTSxlQUN0QixhQUFhLE1BQU0sWUFDbkIsWUFBWSxNQUFNLFdBQ2xCLGNBQWMsTUFBTSxhQUNwQixhQUFhLE1BQU0sWUFDbkIsWUFBWSxNQUFNO0FBQ3RCLFVBQUksa0JBQWlCLFlBQVksZUFBZTtBQUNoRCxVQUFJLGtCQUFpQixZQUFZLGVBQWU7QUFDaEQsYUFBb0Isd0JBQU8sUUFBUSxjQUFjLFdBQVcsU0FBUztBQUFBLFFBQ25FO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBLFdBQVc7QUFBQSxRQUNYO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQSxnQkFBZ0I7QUFBQSxRQUNoQixnQkFBZ0I7QUFBQSxRQUNoQixXQUFXLFlBQVk7QUFBQSxRQUN2QixTQUFTLFlBQVk7QUFBQSxRQUNyQixjQUFjLFdBQVcsWUFBWSxPQUFPO0FBQUEsUUFDNUM7QUFBQTtBQUFBO0FBQUEsSUFHSixZQUFZLHFCQUFvQixPQUFPLEtBQUssS0FBSyxTQUFTO0FBQ3hELFVBQUksWUFBWSxRQUFRO0FBQ3RCLGtCQUFVO0FBQUE7QUFHWixVQUFJLE1BQU0sS0FBSyxJQUFJLE9BQU8sUUFBUSxNQUFNO0FBQ3hDLGFBQW9CLHdCQUFPLFFBQVEsY0FBYyxPQUFPO0FBQUEsUUFDdEQ7QUFBQSxRQUNBLFdBQVc7QUFBQSxRQUVYLE9BQU87QUFBQSxVQUNMLGlCQUFpQjtBQUFBLFVBQ2pCLFdBQVc7QUFBQSxVQUNYLFVBQVU7QUFBQTtBQUFBLFNBRVg7QUFBQTtBQUFBO0FBR1AscUJBQWtCO0FBQ2xCLG9CQUFpQixTQUFRO0FBQUE7O0FDakZ6QixNQUFJLDBCQUF5QnQxQztBQUU3Qix3QkFBcUI7QUFDckIscUJBQWtCO0FBRWxCLE1BQUksYUFBWSx3QkFBdUJ3QjtBQUV2QyxNQUFJLGtCQUFrQix3QkFBdUJDO0FBRTVCLDBCQUF1QjR6QztBQUV4QyxNQUFJLFFBQVEsd0JBQXVCQztBQUVuQyxNQUFJLFVBQVMsd0JBQXVCQztBQUVwQyxNQUFJLGlCQUFpQix3QkFBdUJDO0FBRTVDLE1BQUksWUFBd0IseUJBQVUsa0JBQWtCO0FBQ3RELFFBQUksZ0JBQWdCLFNBQVMsV0FBVTtBQUV2Qyx5QkFBb0I7QUFDbEIsYUFBTyxpQkFBaUIsTUFBTSxNQUFNLGNBQWM7QUFBQTtBQUdwRCxRQUFJLFNBQVMsVUFBUztBQUV0QixXQUFPLFNBQVMsa0JBQWtCO0FBQ2hDLFVBQUksUUFBUTtBQUVaLFVBQUksY0FBYyxLQUFLLE9BQ25CLFdBQVcsWUFBWSxVQUN2QixRQUFRLFlBQVksWUFBWSxPQUNoQyxZQUFZLFlBQVk7QUFDNUIsVUFBSSxVQUFVO0FBQ2QsYUFBb0Isd0JBQU8sUUFBUSxjQUFjLE9BQU87QUFBQSxRQUN0RCxlQUFlLE1BQU0sU0FBUyxXQUFXO0FBQUEsU0FDeEMsU0FBUyxPQUFPLFNBQVUsS0FBSyxNQUFNLEtBQUk7QUFDMUMsWUFBSSxRQUFRLEtBQUssT0FDYixRQUFPLEtBQUssTUFDWixTQUFRLEtBQUssT0FDYixPQUFPLEtBQUs7QUFDaEIsWUFBSSxNQUFNLFVBQVU7QUFDcEIsWUFBSSxNQUFNLFFBQU87QUFFakIsWUFBSSxVQUFVLGVBQWUsUUFBUSxZQUFZLE1BQU0sT0FBTztBQUU5RCxZQUFJO0FBQUssY0FBSSxLQUFLLGVBQWUsUUFBUSxXQUFXLE9BQU8sS0FBSyxNQUFNO0FBQ3RFLFlBQUksS0FBSyxlQUFlLFFBQVEsV0FBVyxPQUFPLE1BQU0sS0FBSztBQUM3RCxrQkFBVSxTQUFRO0FBQ2xCLGVBQU87QUFBQSxTQUNOO0FBQUE7QUFHTCxXQUFPO0FBQUEsSUFDUCxRQUFPLFFBQVE7QUFFakIsWUFBUyxZQUU4QjtBQUN2QyxZQUFTLG1CQUFtQixXQUFVLFNBQVMsSUFBSSxlQUFlLFFBQVE7QUFDMUUsTUFBSSxZQUFXO0FBQ2YscUJBQWtCO0FBQ2xCLG9CQUFpQixTQUFRO0FBQUE7O0FDckR6Qix5QkFBdUIsT0FBTyxXQUFXLFdBQVcsV0FBVztBQUM3RCxNQUFJLFNBQVMsTUFBTSxRQUNmLFFBQVEsWUFBYSxhQUFZLElBQUk7QUFFekMsU0FBUSxZQUFZLFVBQVUsRUFBRSxRQUFRLFFBQVM7QUFDL0MsUUFBSSxVQUFVLE1BQU0sUUFBUSxPQUFPLFFBQVE7QUFDekMsYUFBTztBQUFBO0FBQUE7QUFHWCxTQUFPO0FBQUE7SUFHVCxpQkFBaUJ4OUI7QUN2QmpCLElBQUksUUFBUWhZLFFBQ1IwUCxnQkFBY2xPO0FBR2xCLElBQUlxSix5QkFBdUIsR0FDdkJDLDJCQUF5QjtBQVk3Qix1QkFBcUIsUUFBUSxRQUFRLFdBQVcsWUFBWTtBQUMxRCxNQUFJLFFBQVEsVUFBVSxRQUNsQixTQUFTLE9BQ1QsZUFBZSxDQUFDO0FBRXBCLE1BQUksVUFBVSxNQUFNO0FBQ2xCLFdBQU8sQ0FBQztBQUFBO0FBRVYsV0FBUyxPQUFPO0FBQ2hCLFNBQU8sU0FBUztBQUNkLFFBQUksT0FBTyxVQUFVO0FBQ3JCLFFBQUssZ0JBQWdCLEtBQUssS0FDbEIsS0FBSyxPQUFPLE9BQU8sS0FBSyxNQUN4QixDQUFFLE1BQUssTUFBTSxTQUNmO0FBQ0osYUFBTztBQUFBO0FBQUE7QUFHWCxTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFdBQU8sVUFBVTtBQUNqQixRQUFJLE1BQU0sS0FBSyxJQUNYLFdBQVcsT0FBTyxNQUNsQixXQUFXLEtBQUs7QUFFcEIsUUFBSSxnQkFBZ0IsS0FBSyxJQUFJO0FBQzNCLFVBQUksYUFBYSxVQUFhLENBQUUsUUFBTyxTQUFTO0FBQzlDLGVBQU87QUFBQTtBQUFBLFdBRUo7QUFDTCxVQUFJLFFBQVEsSUFBSTtBQUNoQixVQUFJLFlBQVk7QUFDZCxZQUFJLFNBQVMsV0FBVyxVQUFVLFVBQVUsS0FBSyxRQUFRLFFBQVE7QUFBQTtBQUVuRSxVQUFJLENBQUUsWUFBVyxTQUNUNEUsY0FBWSxVQUFVLFVBQVU3RSx5QkFBdUJDLDBCQUF3QixZQUFZLFNBQzNGLFNBQ0Q7QUFDTCxlQUFPO0FBQUE7QUFBQTtBQUFBO0FBSWIsU0FBTztBQUFBO0lBR1QsZUFBaUJzTDtBQzdEakIsSUFBSS9RLGFBQVdyRjtBQVVmLDhCQUE0QixPQUFPO0FBQ2pDLFNBQU8sVUFBVSxTQUFTLENBQUNxRixXQUFTO0FBQUE7SUFHdEMsc0JBQWlCNFE7QUNkakIsSUFBSUEsdUJBQXFCalcscUJBQ3JCLE9BQU93QjtBQVNYLHdCQUFzQixRQUFRO0FBQzVCLE1BQUksU0FBUyxLQUFLLFNBQ2QsU0FBUyxPQUFPO0FBRXBCLFNBQU8sVUFBVTtBQUNmLFFBQUksTUFBTSxPQUFPLFNBQ2IsUUFBUSxPQUFPO0FBRW5CLFdBQU8sVUFBVSxDQUFDLEtBQUssT0FBT3lVLHFCQUFtQjtBQUFBO0FBRW5ELFNBQU87QUFBQTtJQUdULGdCQUFpQkM7QUNkakIsbUNBQWlDLEtBQUssVUFBVTtBQUM5QyxTQUFPLFNBQVMsUUFBUTtBQUN0QixRQUFJLFVBQVUsTUFBTTtBQUNsQixhQUFPO0FBQUE7QUFFVCxXQUFPLE9BQU8sU0FBUyxZQUNwQixjQUFhLFVBQWMsT0FBTyxPQUFPO0FBQUE7QUFBQTtJQUloRCwyQkFBaUJDO0FDbkJqQixJQUFJLGNBQWNuVyxjQUNkLGVBQWV3QixlQUNmMlUsNEJBQTBCMVU7QUFTOUIsdUJBQXFCLFFBQVE7QUFDM0IsTUFBSSxZQUFZLGFBQWE7QUFDN0IsTUFBSSxVQUFVLFVBQVUsS0FBSyxVQUFVLEdBQUcsSUFBSTtBQUM1QyxXQUFPMFUsMEJBQXdCLFVBQVUsR0FBRyxJQUFJLFVBQVUsR0FBRztBQUFBO0FBRS9ELFNBQU8sU0FBUyxRQUFRO0FBQ3RCLFdBQU8sV0FBVyxVQUFVLFlBQVksUUFBUSxRQUFRO0FBQUE7QUFBQTtJQUk1RCxlQUFpQjJCO0FDckJqQixJQUFJLGFBQWE5WCxhQUNiLGVBQWV3QjtBQUduQixJQUFJLFlBQVk7QUFtQmhCLG9CQUFrQixPQUFPO0FBQ3ZCLFNBQU8sT0FBTyxTQUFTLFlBQ3BCLGFBQWEsVUFBVSxXQUFXLFVBQVU7QUFBQTtJQUdqRCxhQUFpQitFO0FDNUJqQixJQUFJMEYsWUFBVWpNLFdBQ1Z1RyxhQUFXL0U7QUFHZixJQUFJLGVBQWUsb0RBQ2YsZ0JBQWdCO0FBVXBCLGlCQUFlLE9BQU8sUUFBUTtBQUM1QixNQUFJeUssVUFBUSxRQUFRO0FBQ2xCLFdBQU87QUFBQTtBQUVULE1BQUksT0FBTyxPQUFPO0FBQ2xCLE1BQUksUUFBUSxZQUFZLFFBQVEsWUFBWSxRQUFRLGFBQ2hELFNBQVMsUUFBUTFGLFdBQVMsUUFBUTtBQUNwQyxXQUFPO0FBQUE7QUFFVCxTQUFPLGNBQWMsS0FBSyxVQUFVLENBQUMsYUFBYSxLQUFLLFVBQ3BELFVBQVUsUUFBUSxTQUFTLE9BQU87QUFBQTtJQUd2QyxTQUFpQjBRO0FDNUJqQixJQUFJLFdBQVdqWDtBQUdmLElBQUksa0JBQWtCO0FBOEN0QixtQkFBaUIsTUFBTSxVQUFVO0FBQy9CLE1BQUksT0FBTyxRQUFRLGNBQWUsWUFBWSxRQUFRLE9BQU8sWUFBWSxZQUFhO0FBQ3BGLFVBQU0sSUFBSSxVQUFVO0FBQUE7QUFFdEIsTUFBSSxXQUFXLFdBQVc7QUFDeEIsUUFBSSxPQUFPLFdBQ1AsTUFBTSxXQUFXLFNBQVMsTUFBTSxNQUFNLFFBQVEsS0FBSyxJQUNuRCxRQUFRLFNBQVM7QUFFckIsUUFBSSxNQUFNLElBQUksTUFBTTtBQUNsQixhQUFPLE1BQU0sSUFBSTtBQUFBO0FBRW5CLFFBQUksU0FBUyxLQUFLLE1BQU0sTUFBTTtBQUM5QixhQUFTLFFBQVEsTUFBTSxJQUFJLEtBQUssV0FBVztBQUMzQyxXQUFPO0FBQUE7QUFFVCxXQUFTLFFBQVEsSUFBS3dXLFdBQVEsU0FBUztBQUN2QyxTQUFPO0FBQUE7QUFJVEEsVUFBUSxRQUFRO0lBRWhCLFlBQWlCQTtBQ3hFakIsSUFBSSxVQUFVeFc7QUFHZCxJQUFJLG1CQUFtQjtBQVV2Qix5QkFBdUIsTUFBTTtBQUMzQixNQUFJLFNBQVMsUUFBUSxNQUFNLFNBQVMsS0FBSztBQUN2QyxRQUFJLE1BQU0sU0FBUyxrQkFBa0I7QUFDbkMsWUFBTTtBQUFBO0FBRVIsV0FBTztBQUFBO0FBR1QsTUFBSSxRQUFRLE9BQU87QUFDbkIsU0FBTztBQUFBO0lBR1QsaUJBQWlCNlc7QUN6QmpCLElBQUksZ0JBQWdCN1c7QUFHcEIsSUFBSSxhQUFhO0FBR2pCLElBQUksZUFBZTtBQVNuQixJQUFJNFcsaUJBQWUsY0FBYyxTQUFTLFFBQVE7QUFDaEQsTUFBSSxTQUFTO0FBQ2IsTUFBSSxPQUFPLFdBQVcsT0FBTyxJQUFZO0FBQ3ZDLFdBQU8sS0FBSztBQUFBO0FBRWQsU0FBTyxRQUFRLFlBQVksU0FBUyxPQUFPLFFBQVEsT0FBTyxXQUFXO0FBQ25FLFdBQU8sS0FBSyxRQUFRLFVBQVUsUUFBUSxjQUFjLFFBQVMsVUFBVTtBQUFBO0FBRXpFLFNBQU87QUFBQTtJQUdULGdCQUFpQkE7QUNqQmpCLG9CQUFrQixPQUFPLFVBQVU7QUFDakMsTUFBSSxRQUFRLElBQ1IsU0FBUyxTQUFTLE9BQU8sSUFBSSxNQUFNLFFBQ25DLFNBQVMsTUFBTTtBQUVuQixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFdBQU8sU0FBUyxTQUFTLE1BQU0sUUFBUSxPQUFPO0FBQUE7QUFFaEQsU0FBTztBQUFBO0lBR1QsWUFBaUJHO0FDcEJqQixJQUFJdFMsV0FBU3pFLFNBQ1QsV0FBV3dCLFdBQ1h5SyxZQUFVeEssV0FDVjhFLGFBQVc4dUM7QUFHZixJQUFJNXVDLGFBQVcsSUFBSTtBQUduQixJQUFJLGNBQWNoQyxXQUFTQSxTQUFPLFlBQVksUUFDMUMsaUJBQWlCLGNBQWMsWUFBWSxXQUFXO0FBVTFELHdCQUFzQixPQUFPO0FBRTNCLE1BQUksT0FBTyxTQUFTLFVBQVU7QUFDNUIsV0FBTztBQUFBO0FBRVQsTUFBSXdILFVBQVEsUUFBUTtBQUVsQixXQUFPLFNBQVMsT0FBTytLLGtCQUFnQjtBQUFBO0FBRXpDLE1BQUl6USxXQUFTLFFBQVE7QUFDbkIsV0FBTyxpQkFBaUIsZUFBZSxLQUFLLFNBQVM7QUFBQTtBQUV2RCxNQUFJLFNBQVUsUUFBUTtBQUN0QixTQUFRLFVBQVUsT0FBUSxJQUFJLFNBQVUsQ0FBQ0UsYUFBWSxPQUFPO0FBQUE7SUFHOUQsZ0JBQWlCdVE7QUNwQ2pCLElBQUksZUFBZWhYO0FBdUJuQixvQkFBa0IsT0FBTztBQUN2QixTQUFPLFNBQVMsT0FBTyxLQUFLLGFBQWE7QUFBQTtJQUczQyxhQUFpQmtYO0FDM0JqQixJQUFJakwsWUFBVWpNLFdBQ1ZpWCxVQUFRelYsUUFDUixlQUFlQyxlQUNmLFdBQVc0ekM7QUFVZixvQkFBa0IsT0FBTyxRQUFRO0FBQy9CLE1BQUlwcEMsVUFBUSxRQUFRO0FBQ2xCLFdBQU87QUFBQTtBQUVULFNBQU9nTCxRQUFNLE9BQU8sVUFBVSxDQUFDLFNBQVMsYUFBYSxTQUFTO0FBQUE7SUFHaEUsWUFBaUJFO0FDcEJqQixJQUFJNVEsYUFBV3ZHO0FBR2YsSUFBSXlHLGFBQVcsSUFBSTtBQVNuQixpQkFBZSxPQUFPO0FBQ3BCLE1BQUksT0FBTyxTQUFTLFlBQVlGLFdBQVMsUUFBUTtBQUMvQyxXQUFPO0FBQUE7QUFFVCxNQUFJLFNBQVUsUUFBUTtBQUN0QixTQUFRLFVBQVUsT0FBUSxJQUFJLFNBQVUsQ0FBQ0UsYUFBWSxPQUFPO0FBQUE7SUFHOUQsU0FBaUIyUTtBQ3BCakIsSUFBSUQsYUFBV25YLFdBQ1hvWCxVQUFRNVY7QUFVWixtQkFBaUIsUUFBUSxNQUFNO0FBQzdCLFNBQU8yVixXQUFTLE1BQU07QUFFdEIsTUFBSSxRQUFRLEdBQ1IsU0FBUyxLQUFLO0FBRWxCLFNBQU8sVUFBVSxRQUFRLFFBQVEsUUFBUTtBQUN2QyxhQUFTLE9BQU9DLFFBQU0sS0FBSztBQUFBO0FBRTdCLFNBQVEsU0FBUyxTQUFTLFNBQVUsU0FBUztBQUFBO0lBRy9DLFdBQWlCQztBQ3ZCakIsSUFBSUEsWUFBVXJYO0FBMkJkLGVBQWEsUUFBUSxNQUFNLGNBQWM7QUFDdkMsTUFBSSxTQUFTLFVBQVUsT0FBTyxTQUFZcVgsVUFBUSxRQUFRO0FBQzFELFNBQU8sV0FBVyxTQUFZLGVBQWU7QUFBQTtJQUcvQyxRQUFpQkc7QUN4QmpCLHFCQUFtQixRQUFRLEtBQUs7QUFDOUIsU0FBTyxVQUFVLFFBQVEsT0FBTyxPQUFPO0FBQUE7SUFHekMsYUFBaUJEO0FDWmpCLElBQUksV0FBV3ZYLFdBQ1gsY0FBY3dCLGVBQ2R5SyxZQUFVeEssV0FDVixVQUFVNHpDLFVBQ1YsV0FBV0MsWUFDWGwrQixVQUFRbStCO0FBV1osbUJBQWlCLFFBQVEsTUFBTSxTQUFTO0FBQ3RDLFNBQU8sU0FBUyxNQUFNO0FBRXRCLE1BQUksUUFBUSxJQUNSLFNBQVMsS0FBSyxRQUNkLFNBQVM7QUFFYixTQUFPLEVBQUUsUUFBUSxRQUFRO0FBQ3ZCLFFBQUksTUFBTW4rQixRQUFNLEtBQUs7QUFDckIsUUFBSSxDQUFFLFVBQVMsVUFBVSxRQUFRLFFBQVEsUUFBUSxPQUFPO0FBQ3REO0FBQUE7QUFFRixhQUFTLE9BQU87QUFBQTtBQUVsQixNQUFJLFVBQVUsRUFBRSxTQUFTLFFBQVE7QUFDL0IsV0FBTztBQUFBO0FBRVQsV0FBUyxVQUFVLE9BQU8sSUFBSSxPQUFPO0FBQ3JDLFNBQU8sQ0FBQyxDQUFDLFVBQVUsU0FBUyxXQUFXLFFBQVEsS0FBSyxXQUNqRG5MLFdBQVEsV0FBVyxZQUFZO0FBQUE7SUFHcEMsV0FBaUJxTDtBQ3RDakIsSUFBSSxZQUFZdFgsWUFDWixVQUFVd0I7QUE0QmQsaUJBQWUsUUFBUSxNQUFNO0FBQzNCLFNBQU8sVUFBVSxRQUFRLFFBQVEsUUFBUSxNQUFNO0FBQUE7SUFHakQsVUFBaUJpVztBQ2pDakIsSUFBSSxjQUFjelgsY0FDZCxNQUFNd0IsT0FDTixRQUFRQyxTQUNSd1YsVUFBUW8rQixRQUNSLHFCQUFxQkMscUJBQ3JCLDBCQUEwQkMsMEJBQzFCbitCLFVBQVFvK0I7QUFHWixJQUFJLHVCQUF1QixHQUN2Qix5QkFBeUI7QUFVN0IsK0JBQTZCLE1BQU0sVUFBVTtBQUMzQyxNQUFJditCLFFBQU0sU0FBUyxtQkFBbUIsV0FBVztBQUMvQyxXQUFPLHdCQUF3QkcsUUFBTSxPQUFPO0FBQUE7QUFFOUMsU0FBTyxTQUFTLFFBQVE7QUFDdEIsUUFBSSxXQUFXLElBQUksUUFBUTtBQUMzQixXQUFRLGFBQWEsVUFBYSxhQUFhLFdBQzNDLE1BQU0sUUFBUSxRQUNkLFlBQVksVUFBVSxVQUFVLHVCQUF1QjtBQUFBO0FBQUE7SUFJL0QsdUJBQWlCUztBQ2hCakIsb0JBQWtCLE9BQU87QUFDdkIsU0FBTztBQUFBO0lBR1QsYUFBaUJEO0FDYmpCLHdCQUFzQixLQUFLO0FBQ3pCLFNBQU8sU0FBUyxRQUFRO0FBQ3RCLFdBQU8sVUFBVSxPQUFPLFNBQVksT0FBTztBQUFBO0FBQUE7SUFJL0MsZ0JBQWlCRjtBQ2JqQixJQUFJLFVBQVUxWDtBQVNkLDRCQUEwQixNQUFNO0FBQzlCLFNBQU8sU0FBUyxRQUFRO0FBQ3RCLFdBQU8sUUFBUSxRQUFRO0FBQUE7QUFBQTtJQUkzQixvQkFBaUIyWDtBQ2ZqQixJQUFJLGVBQWUzWCxlQUNmLG1CQUFtQndCLG1CQUNuQixRQUFRQyxRQUNSLFFBQVE0ekM7QUF3Qlosb0JBQWtCLE1BQU07QUFDdEIsU0FBTyxNQUFNLFFBQVEsYUFBYSxNQUFNLFNBQVMsaUJBQWlCO0FBQUE7SUFHcEUsYUFBaUJ0OUI7QUMvQmpCLElBQUksY0FBYy9YLGNBQ2Qsc0JBQXNCd0Isc0JBQ3RCLFdBQVdDLFlBQ1gsVUFBVTR6QyxXQUNWLFdBQVdDO0FBU2Ysd0JBQXNCLE9BQU87QUFHM0IsTUFBSSxPQUFPLFNBQVMsWUFBWTtBQUM5QixXQUFPO0FBQUE7QUFFVCxNQUFJLFNBQVMsTUFBTTtBQUNqQixXQUFPO0FBQUE7QUFFVCxNQUFJLE9BQU8sU0FBUyxVQUFVO0FBQzVCLFdBQU8sUUFBUSxTQUNYLG9CQUFvQixNQUFNLElBQUksTUFBTSxNQUNwQyxZQUFZO0FBQUE7QUFFbEIsU0FBTyxTQUFTO0FBQUE7SUFHbEIsZ0JBQWlCcjlCO0FDN0JqQixJQUFJLGVBQWU7QUFVbkIsMkJBQXlCLFFBQVE7QUFDL0IsTUFBSSxRQUFRLE9BQU87QUFFbkIsU0FBTyxXQUFXLGFBQWEsS0FBSyxPQUFPLE9BQU8sU0FBUztBQUFBO0FBQzNELFNBQU87QUFBQTtJQUdULG1CQUFpQmxTO0FDbEJqQixJQUFJLGtCQUFrQi9GO0FBR3RCLElBQUksY0FBYztBQVNsQixvQkFBa0IsUUFBUTtBQUN4QixTQUFPLFNBQ0gsT0FBTyxNQUFNLEdBQUcsZ0JBQWdCLFVBQVUsR0FBRyxRQUFRLGFBQWEsTUFDbEU7QUFBQTtJQUdOLFlBQWlCd0c7QUNsQmpCLElBQUksV0FBV3hHLFdBQ1gsV0FBV3dCLFlBQ1gsV0FBV0M7QUFHZixJQUFJLE1BQU0sSUFBSTtBQUdkLElBQUksYUFBYTtBQUdqQixJQUFJLGFBQWE7QUFHakIsSUFBSSxZQUFZO0FBR2hCLElBQUksZUFBZTtBQXlCbkIsb0JBQWtCLE9BQU87QUFDdkIsTUFBSSxPQUFPLFNBQVMsVUFBVTtBQUM1QixXQUFPO0FBQUE7QUFFVCxNQUFJLFNBQVMsUUFBUTtBQUNuQixXQUFPO0FBQUE7QUFFVCxNQUFJLFNBQVMsUUFBUTtBQUNuQixRQUFJLFFBQVEsT0FBTyxNQUFNLFdBQVcsYUFBYSxNQUFNLFlBQVk7QUFDbkUsWUFBUSxTQUFTLFNBQVUsUUFBUSxLQUFNO0FBQUE7QUFFM0MsTUFBSSxPQUFPLFNBQVMsVUFBVTtBQUM1QixXQUFPLFVBQVUsSUFBSSxRQUFRLENBQUM7QUFBQTtBQUVoQyxVQUFRLFNBQVM7QUFDakIsTUFBSSxXQUFXLFdBQVcsS0FBSztBQUMvQixTQUFRLFlBQVksVUFBVSxLQUFLLFNBQy9CLGFBQWEsTUFBTSxNQUFNLElBQUksV0FBVyxJQUFJLEtBQzNDLFdBQVcsS0FBSyxTQUFTLE1BQU0sQ0FBQztBQUFBO0lBR3ZDLGFBQWlCa0Y7QUMvRGpCLElBQUksV0FBVzNHO0FBR2YsSUFBSSxXQUFXLElBQUksR0FDZixjQUFjO0FBeUJsQixvQkFBa0IsT0FBTztBQUN2QixNQUFJLENBQUMsT0FBTztBQUNWLFdBQU8sVUFBVSxJQUFJLFFBQVE7QUFBQTtBQUUvQixVQUFRLFNBQVM7QUFDakIsTUFBSSxVQUFVLFlBQVksVUFBVSxDQUFDLFVBQVU7QUFDN0MsUUFBSSxPQUFRLFFBQVEsSUFBSSxLQUFLO0FBQzdCLFdBQU8sT0FBTztBQUFBO0FBRWhCLFNBQU8sVUFBVSxRQUFRLFFBQVE7QUFBQTtJQUduQyxhQUFpQjRHO0FDekNqQixJQUFJLFdBQVc1RztBQTRCZixxQkFBbUIsT0FBTztBQUN4QixNQUFJLFNBQVMsU0FBUyxRQUNsQixZQUFZLFNBQVM7QUFFekIsU0FBTyxXQUFXLFNBQVUsWUFBWSxTQUFTLFlBQVksU0FBVTtBQUFBO0lBR3pFLGNBQWlCK0c7QUNuQ2pCLElBQUksZ0JBQWdCL0csZ0JBQ2hCLGVBQWV3QixlQUNmLFlBQVlDO0FBR2hCLElBQUksWUFBWSxLQUFLO0FBcUNyQixtQkFBbUIsT0FBTyxXQUFXLFdBQVc7QUFDOUMsTUFBSSxTQUFTLFNBQVMsT0FBTyxJQUFJLE1BQU07QUFDdkMsTUFBSSxDQUFDLFFBQVE7QUFDWCxXQUFPO0FBQUE7QUFFVCxNQUFJLFFBQVEsYUFBYSxPQUFPLElBQUksVUFBVTtBQUM5QyxNQUFJLFFBQVEsR0FBRztBQUNiLFlBQVEsVUFBVSxTQUFTLE9BQU87QUFBQTtBQUVwQyxTQUFPLGNBQWMsT0FBTyxhQUFhLFlBQWU7QUFBQTtJQUcxRCxjQUFpQjtBQ3BEakIsSUFBSSx5QkFBeUJ6QjtBQUU3QjYxQywyQkFBcUI7MkJBQ0E7OEJBQ0c7NEJBQ0Y7d0JBQ0o7NEJBQ0k7MkJBQ0Q7QUFFckIsSUFBSSxhQUFhLHVCQUF1QnIwQztBQUV4QyxvQkFBb0IsTUFBTTtBQUN4QixNQUFJLFlBQVksS0FBSyxXQUNqQixZQUFZLEtBQUssTUFDakIsT0FBTyxjQUFjLFNBQVMsUUFBUSxXQUN0QyxZQUFZLEtBQUs7QUFDckIsU0FBTztBQUFBLElBQ0wsT0FBTyxVQUFVO0FBQUEsSUFDakIsTUFBTSxVQUFVLElBQUksVUFBVSxVQUFVLFNBQVMsSUFBSSxHQUFHO0FBQUE7QUFBQTtBQU01RCx1QkFBdUIsT0FBTyxRQUFPLFlBQVcsV0FBVztBQUN6RCxNQUFJLGNBQWMsV0FBVztBQUFBLElBQzNCLFdBQVc7QUFBQSxJQUNYO0FBQUEsTUFFRSxRQUFRLFlBQVksT0FDcEIsUUFBTyxZQUFZO0FBRXZCLE1BQUksUUFBUSxVQUFVLEtBQUssT0FBTyxPQUFNO0FBQ3hDLE1BQUksU0FBUSxVQUFVLElBQUksVUFBVSxRQUFRLFdBQVUsTUFBTSxRQUFRLFFBQVE7QUFDNUUsTUFBSSxPQUFNLFVBQVUsSUFBSSxVQUFVLEtBQUssV0FBVSxJQUFJLFFBQVEsUUFBUTtBQUNyRSxNQUFJLGNBQWMsV0FBVyxTQUFTLFFBQU8sU0FBVSxJQUFHO0FBQ3hELFdBQU8sVUFBVSxXQUFXLElBQUc7QUFBQTtBQUVqQyxNQUFJLE9BQU8sVUFBVSxLQUFLLFFBQU8sTUFBSztBQUN0QyxTQUFPLEtBQUssSUFBSSxNQUFNO0FBR3RCLFNBQU8sS0FBSyxJQUFJLE9BQU8sVUFBVSxlQUFlO0FBQ2hELFNBQU87QUFBQSxJQUNMO0FBQUEsSUFDQTtBQUFBLElBQ0EsTUFBTSxVQUFVO0FBQUEsSUFDaEIsT0FBTyxLQUFLLElBQUksVUFBVSxNQUFNO0FBQUE7QUFBQTtBQUlwQyxxQkFBcUIsYUFBYSxPQUFPO0FBQ3ZDLE1BQUksVUFBVSxRQUFRO0FBQ3BCLFlBQVE7QUFBQTtBQUdWLE1BQUksR0FDQSxHQUNBLEtBQ0EsU0FBUyxJQUNULFFBQVE7QUFFWixPQUFLLElBQUksR0FBRyxJQUFJLFlBQVksUUFBUSxLQUFLO0FBQ3ZDLFVBQU0sWUFBWTtBQUVsQixTQUFLLElBQUksR0FBRyxJQUFJLE9BQU8sUUFBUSxLQUFLO0FBQ2xDLFVBQUksQ0FBQyxZQUFZLEtBQUssT0FBTztBQUFLO0FBQUE7QUFHcEMsUUFBSSxLQUFLLE9BQU87QUFDZCxZQUFNLEtBQUs7QUFBQSxXQUNOO0FBRUwsTUFBQyxRQUFPLE1BQU8sUUFBTyxLQUFLLEtBQUssS0FBSztBQUFBO0FBQUE7QUFJekMsT0FBSyxJQUFJLEdBQUcsSUFBSSxPQUFPLFFBQVEsS0FBSztBQUNsQyxXQUFPLEdBQUcsS0FBSyxTQUFVLEdBQUcsR0FBRztBQUM3QixhQUFPLEVBQUUsT0FBTyxFQUFFO0FBQUE7QUFBQTtBQUl0QixTQUFPO0FBQUEsSUFDTDtBQUFBLElBQ0E7QUFBQTtBQUFBO0FBSUosaUJBQWlCLEdBQUcsUUFBTyxNQUFLLFlBQVcsV0FBVztBQUNwRCxNQUFJLFFBQVE7QUFBQSxJQUNWLE9BQU8sV0FBVSxNQUFNO0FBQUEsSUFDdkIsS0FBSyxXQUFVLElBQUk7QUFBQTtBQUVyQixNQUFJLFNBQVE7QUFBQSxJQUNWLE9BQU87QUFBQSxJQUNQLEtBQUs7QUFBQTtBQUVQLFNBQU8sVUFBVSxhQUFhO0FBQUEsSUFDNUI7QUFBQSxJQUNBLE9BQU87QUFBQTtBQUFBO0FBSVgscUJBQXFCLEtBQUssV0FBVztBQUNuQyxTQUFPLFVBQVUsS0FBSyxTQUFVLFVBQVU7QUFDeEMsV0FBTyxTQUFTLFFBQVEsSUFBSSxTQUFTLFNBQVMsU0FBUyxJQUFJO0FBQUE7QUFBQTtBQUkvRCxvQkFBb0IsUUFBUSxRQUFRLFlBQVcsV0FBVztBQUN4RCxNQUFJLE9BQU87QUFBQSxJQUNULE9BQU8sV0FBVSxNQUFNO0FBQUEsSUFDdkIsS0FBSyxXQUFVLElBQUk7QUFBQSxJQUNuQixRQUFRLFdBQVUsT0FBTztBQUFBO0FBRTNCLE1BQUksT0FBTztBQUFBLElBQ1QsT0FBTyxXQUFVLE1BQU07QUFBQSxJQUN2QixLQUFLLFdBQVUsSUFBSTtBQUFBLElBQ25CLFFBQVEsV0FBVSxPQUFPO0FBQUE7QUFFM0IsU0FBTyxVQUFVLFdBQVc7QUFBQSxJQUMxQjtBQUFBLElBQ0E7QUFBQTtBQUFBOztBQzVISixNQUFJLDBCQUF5QnhCO0FBRTdCLHdCQUFxQjtBQUNyQixxQkFBa0I7QUFFbEIsTUFBSSxhQUFZLHdCQUF1QndCO0FBRXZDLE1BQUksa0JBQWtCLHdCQUF1QkM7QUFFNUIsMEJBQXVCNHpDO0FBRXhDLE1BQUksVUFBUyx3QkFBdUJDO0FBRXBDLE1BQUksWUFBWSx3QkFBdUJDO0FBRXZDLE1BQUksYUFBYSx3QkFBd0JDO0FBRXpDLE1BQUksZUFBZUU7QUFFbkIsTUFBSSxhQUFhQztBQUVqQixNQUFJLFVBQVVDO0FBRWQsTUFBSSxjQUFjRTtBQUVsQixvQ0FBa0MsYUFBYTtBQUFFLFFBQUksT0FBTyxZQUFZO0FBQVksYUFBTztBQUFNLFFBQUksb0JBQW9CLElBQUk7QUFBVyxRQUFJLG1CQUFtQixJQUFJO0FBQVcsV0FBUSw0QkFBMkIsbUNBQWtDLGNBQWE7QUFBRSxhQUFPLGVBQWMsbUJBQW1CO0FBQUEsT0FBc0I7QUFBQTtBQUVoVSxtQ0FBaUMsS0FBSyxhQUFhO0FBQUUsUUFBSSxDQUFDLGVBQWUsT0FBTyxJQUFJLFlBQVk7QUFBRSxhQUFPO0FBQUE7QUFBTyxRQUFJLFFBQVEsUUFBUSxPQUFPLFFBQVEsWUFBWSxPQUFPLFFBQVEsWUFBWTtBQUFFLGFBQU8sRUFBRSxTQUFTO0FBQUE7QUFBUyxRQUFJLFFBQVEseUJBQXlCO0FBQWMsUUFBSSxTQUFTLE1BQU0sSUFBSSxNQUFNO0FBQUUsYUFBTyxNQUFNLElBQUk7QUFBQTtBQUFRLFFBQUksU0FBUztBQUFJLFFBQUksd0JBQXdCLE9BQU8sa0JBQWtCLE9BQU87QUFBMEIsYUFBUyxPQUFPLEtBQUs7QUFBRSxVQUFJLFFBQVEsYUFBYSxPQUFPLFVBQVUsZUFBZSxLQUFLLEtBQUssTUFBTTtBQUFFLFlBQUksT0FBTyx3QkFBd0IsT0FBTyx5QkFBeUIsS0FBSyxPQUFPO0FBQU0sWUFBSSxRQUFTLE1BQUssT0FBTyxLQUFLLE1BQU07QUFBRSxpQkFBTyxlQUFlLFFBQVEsS0FBSztBQUFBLGVBQWM7QUFBRSxpQkFBTyxPQUFPLElBQUk7QUFBQTtBQUFBO0FBQUE7QUFBWSxXQUFPLFVBQVU7QUFBSyxRQUFJLE9BQU87QUFBRSxZQUFNLElBQUksS0FBSztBQUFBO0FBQVcsV0FBTztBQUFBO0FBRTN4QixNQUFJLGVBQTJCLHlCQUFVLGtCQUFrQjtBQUN6RCxRQUFJLGdCQUFnQixTQUFTLGNBQWE7QUFFMUMsNEJBQXVCO0FBQ3JCLFVBQUk7QUFFSixlQUFTLE9BQU8sVUFBVSxRQUFRLE9BQU8sSUFBSSxNQUFNLE9BQU8sT0FBTyxHQUFHLE9BQU8sTUFBTSxRQUFRO0FBQ3ZGLGFBQUssUUFBUSxVQUFVO0FBQUE7QUFHekIsY0FBUSxpQkFBaUIsS0FBSyxNQUFNLGtCQUFrQixDQUFDLE1BQU0sT0FBTyxVQUFVO0FBRTlFLFlBQU0sYUFBYSxTQUFVLE9BQU8sUUFBUSxjQUFjO0FBQ3hELFlBQUksS0FBSyxXQUFXLFlBQVksUUFBUTtBQUFRLGlCQUFPLE1BQU07QUFDN0QsWUFBSSxRQUFRLE1BQU0sUUFBUSxVQUFVLGtCQUFrQixTQUFTO0FBQy9ELFlBQUksY0FBYyxNQUFNLE9BQ3BCLGFBQVksWUFBWSxXQUN4QixjQUFjLFlBQVksYUFDMUIsTUFBTSxZQUFZLEtBQ2xCLFlBQVksWUFBWTtBQUM1QixZQUFJLFdBQVcsV0FBVyxZQUFZLFFBQVEsTUFBTSxHQUFHLEtBQUssWUFBWTtBQUN4RSxZQUFJLFFBQU8sWUFBWSxlQUFlO0FBRXRDLFlBQUksa0JBQWtCLFFBQVEsWUFBWSxPQUFPLFlBQVcsWUFDeEQsU0FBUSxZQUFZLE9BQ3BCLFdBQVcsWUFBWTtBQUUzQixpQkFBUSxVQUFVLE1BQU0sT0FBTTtBQUM5QixZQUFJLE9BQU0sVUFBVSxJQUFJLFFBQU8sVUFBVTtBQUV6QyxjQUFNLE9BQU8sT0FBTyxRQUFPO0FBQUE7QUFHN0IsWUFBTSx3QkFBd0IsU0FBVSxPQUFPLFFBQVE7QUFDckQsWUFBSSxDQUFDLE1BQU0sUUFBUSxVQUFVO0FBQW1CO0FBQ2hELFlBQUksZUFBZSxNQUFNLE9BQ3JCLGNBQWMsYUFBYSxhQUMzQixNQUFNLGFBQWEsS0FDbkIsWUFBWSxhQUFhO0FBQzdCLFlBQUksV0FBVyxXQUFXLFlBQVksUUFBUSxNQUFNLEdBQUcsS0FBSyxZQUFZO0FBQ3hFLFlBQUksU0FBUSxZQUFZLGVBQWU7QUFFdkMsY0FBTSxRQUFRLFVBQVUsa0JBQWtCO0FBQUEsVUFDeEMsT0FBTztBQUFBLFVBQ1AsS0FBSyxVQUFVLElBQUksUUFBTyxHQUFHO0FBQUEsVUFDN0IsUUFBUTtBQUFBO0FBQUE7QUFJWixZQUFNLDRCQUE0QixTQUFVLE9BQU8sTUFBTTtBQUN2RCxZQUFJLENBQUMsTUFBTSxRQUFRLFVBQVU7QUFBcUI7QUFFbEQsY0FBTSxXQUFXLE9BQU8sTUFBTSxNQUFNLFFBQVEsVUFBVTtBQUFBO0FBR3hELFlBQU0sY0FBYyxXQUFZO0FBQzlCLFlBQUksT0FBTyxNQUFNLElBQUksUUFBUSxRQUFRO0FBRXJDLFlBQUksWUFBWSxLQUFLLFFBQVE7QUFDN0IsWUFBSSxXQUFXLE1BQU0sWUFBWSxJQUFJLFdBQVcsUUFBUSxXQUFZO0FBQ2xFLGlCQUFPO0FBQUE7QUFFVCxpQkFBUyxHQUFHLGdCQUFnQixTQUFVLE9BQU87QUFDM0MsY0FBSSxXQUFXLE1BQU0sTUFBTTtBQUMzQixjQUFJLFNBQVMsTUFBTSxRQUFRLFVBQVUsa0JBQWtCO0FBQ3ZELGNBQUksYUFBYSxXQUFXLGtCQUFrQjtBQUM5QyxjQUFJLGNBQWMsV0FBVyxZQUFZLFFBQVE7QUFDakQsaUJBQU8sV0FBVyxVQUFVLFdBQVcsWUFBYSxFQUFDLFlBQVk7QUFBQTtBQUVuRSxpQkFBUyxHQUFHLGFBQWEsU0FBVSxLQUFLO0FBQ3RDLGNBQUksYUFBYSxXQUFXLGtCQUFrQjtBQUM5QyxjQUFJLG9CQUFvQixNQUFNLFFBQVEsVUFBVTtBQUNoRCxjQUFJLGtCQUFrQixXQUFXO0FBQVEsa0JBQU0sV0FBVyxLQUFLO0FBQy9ELGNBQUksa0JBQWtCLFdBQVc7QUFBVSxrQkFBTSxhQUFhLEtBQUs7QUFBQTtBQUVyRSxpQkFBUyxHQUFHLGVBQWUsV0FBWTtBQUNyQyxpQkFBTyxNQUFNLFFBQVEsVUFBVTtBQUFBO0FBRWpDLGlCQUFTLEdBQUcsVUFBVSxTQUFVLE9BQU87QUFDckMsY0FBSSxhQUFhLFdBQVcsa0JBQWtCO0FBQzlDLGNBQUksQ0FBQyxNQUFNLE1BQU07QUFBUztBQUUxQixjQUFJLEtBQUssV0FBVyxZQUFZLFFBQVEsUUFBUTtBQUM5QyxrQkFBTTtBQUFBLGlCQUNEO0FBQ0wsa0JBQU07QUFBQTtBQUFBO0FBR1YsaUJBQVMsR0FBRyxtQkFBbUIsU0FBVSxPQUFPO0FBQzlDLGNBQUksQ0FBQyxNQUFNLFFBQVEsVUFBVTtBQUFtQjtBQUNoRCxjQUFJLGFBQWEsV0FBVyxrQkFBa0I7QUFDOUMsY0FBSSxLQUFLLFdBQVcsWUFBWSxRQUFRO0FBQVE7QUFFaEQsZ0JBQU0sc0JBQXNCLE9BQU87QUFBQTtBQUVyQyxpQkFBUyxHQUFHLHVCQUF1QixTQUFVLE9BQU87QUFDbEQsY0FBSSxDQUFDLE1BQU0sUUFBUSxVQUFVO0FBQXFCO0FBQ2xELGNBQUksYUFBYSxXQUFXLGtCQUFrQjtBQUU5QyxnQkFBTSwwQkFBMEIsT0FBTztBQUFBO0FBRXpDLGlCQUFTLEdBQUcsU0FBUyxXQUFZO0FBQy9CLGlCQUFPLE1BQU0sUUFBUSxVQUFVLE1BQU07QUFBQTtBQUV2QyxpQkFBUyxHQUFHLFNBQVMsV0FBWTtBQUMvQixnQkFBTTtBQUVOLGdCQUFNLFFBQVEsVUFBVSxNQUFNO0FBQUE7QUFBQTtBQUlsQyxZQUFNLHVCQUF1QixXQUFZO0FBQ3ZDLFlBQUksZUFBZSxNQUFNLE9BQ3JCLGFBQWEsYUFBYSxZQUMxQixXQUFXLGFBQWE7QUFDNUIsWUFBSSxRQUFRLE1BQU0sTUFBTSxRQUFRO0FBRWhDLGNBQU07QUFFTixjQUFNLFFBQVEsVUFBVSxNQUFNO0FBQUEsVUFDNUIsT0FBTyxNQUFNO0FBQUEsVUFDYixLQUFLLE1BQU07QUFBQSxVQUNYO0FBQUEsVUFDQTtBQUFBO0FBQUE7QUFJSixZQUFNLHNCQUFzQixXQUFZO0FBQ3RDLFlBQUksQ0FBQyxNQUFNO0FBQVc7QUFFdEIsY0FBTSxVQUFVO0FBRWhCLGNBQU0sWUFBWTtBQUFBO0FBR3BCLFlBQU0sUUFBUTtBQUNkLFlBQU0sTUFBbUIsd0JBQU8sUUFBUTtBQUN4QyxhQUFPO0FBQUE7QUFHVCxRQUFJLFNBQVMsYUFBWTtBQUV6QixXQUFPLG9CQUFvQiw2QkFBNkI7QUFDdEQsV0FBSztBQUFBO0FBR1AsV0FBTyx1QkFBdUIsZ0NBQWdDO0FBQzVELFdBQUs7QUFBQTtBQUdQLFdBQU8sUUFBUSxpQkFBaUI7QUFDOUIsVUFBSSxLQUFLLE1BQU07QUFBUyxhQUFLLFNBQVM7QUFBQSxVQUNwQyxTQUFTO0FBQUE7QUFBQTtBQUliLFdBQU8sU0FBUyxnQkFBZ0IsT0FBTyxRQUFPLE1BQUs7QUFDakQsVUFBSSxjQUFjLGFBQWEsbUJBQW1CLFdBQVUsU0FBUyxJQUFJLE9BQU87QUFBQSxRQUM5RSxLQUFLO0FBQUEsUUFDTCxPQUFPO0FBQUEsUUFDUCxhQUFhO0FBQUEsVUFDWCxLQUFLLE1BQU0sWUFBWSxPQUFPLFFBQVEsZUFBZSxLQUFLLE1BQU07QUFDcEUsVUFBSSxjQUFjLEtBQUssTUFBTTtBQUU3QixVQUFJLGVBQWUsUUFBUSxTQUFTLFlBQVksUUFBUSxRQUFRLFNBQVMsWUFBWSxRQUFRLFFBQVEsVUFBVSxZQUFZLE9BQU87QUFDaEk7QUFBQTtBQUdGLFdBQUssU0FBUztBQUFBLFFBQ1o7QUFBQTtBQUFBO0FBSUosV0FBTyxlQUFlLHNCQUFzQixPQUFPLFFBQVE7QUFDekQsVUFBSSx3QkFBd0IsS0FBSyxRQUFRLFVBQVUsbUJBQy9DLFFBQVEsc0JBQXNCLE9BQzlCLFlBQVksc0JBQXNCO0FBQ3RDLFVBQUksZUFBZSxLQUFLLE9BQ3BCLGFBQVksYUFBYSxXQUN6QixjQUFjLGFBQWEsYUFDM0IsTUFBTSxhQUFhLEtBQ25CLFlBQVksYUFBYTtBQUU3QixVQUFJLG1CQUFtQixRQUFRLFlBQVksT0FBTyxZQUFXLFlBQ3pELFNBQVEsYUFBYSxPQUNyQixPQUFNLGFBQWE7QUFFdkIsVUFBSSxXQUFXLFdBQVcsWUFBWSxRQUFRLE1BQU0sR0FBRyxLQUFLLFlBQVk7QUFDeEUsVUFBSSxRQUFPLFlBQVksZUFBZTtBQUN0QyxVQUFJLGtCQUFrQixXQUFXLFlBQVksUUFBUTtBQUVyRCxVQUFJLGNBQWMsU0FBUztBQUN6QixZQUFJLGFBQWE7QUFDZixjQUFJLFlBQVksT0FBTztBQUFPLG1CQUFPLEtBQUs7QUFDMUMsaUJBQU0sVUFBVSxJQUFJLE9BQU0sR0FBRztBQUFBLG1CQUNwQixVQUFVLFFBQVEsUUFBTyxZQUFZLE9BQU8sWUFBWSxTQUFTLE9BQU8sU0FBUyxNQUFNLEtBQUssQ0FBQyxZQUFZLFFBQVEsQ0FBQyxRQUFPO0FBQ2xJLGlCQUFNLFVBQVUsSUFBSSxZQUFZLE1BQU0sR0FBRztBQUFBLGVBQ3BDO0FBQ0wsZUFBSyxTQUFTO0FBQUEsWUFDWixTQUFTO0FBQUE7QUFFWDtBQUFBO0FBR0YsWUFBSSxjQUFjLFdBQVUsSUFBSTtBQUNoQyxlQUFNLFVBQVUsTUFBTSxNQUFLO0FBRTNCLFlBQUksVUFBVSxHQUFHLE1BQUssU0FBUTtBQUM1QixpQkFBTTtBQUFBO0FBQUEsaUJBRUMsY0FBYyxRQUFRO0FBQy9CLFlBQUksYUFBYTtBQUNmLGNBQUksWUFBWSxRQUFRO0FBQUssbUJBQU8sS0FBSztBQUN6QyxtQkFBUTtBQUFBLG1CQUNDLFVBQVUsUUFBUSxNQUFLLFlBQVksT0FBTyxZQUFZLFNBQVMsT0FBTyxNQUFNLE1BQU0sS0FBSyxVQUFVLEdBQUcsWUFBWSxNQUFNLE9BQU07QUFDckksbUJBQVEsVUFBVSxJQUFJLFlBQVksT0FBTyxJQUFJO0FBQUEsZUFDeEM7QUFDTCxlQUFLO0FBQ0w7QUFBQTtBQUdGLFlBQUksZ0JBQWdCLFdBQVUsTUFBTTtBQUNwQyxpQkFBUSxVQUFVLE1BQU0sUUFBTztBQUUvQixZQUFJLFVBQVUsR0FBRyxRQUFPLE9BQU07QUFDNUIsbUJBQVE7QUFBQTtBQUFBO0FBSVosV0FBSyxPQUFPLE9BQU8sUUFBTztBQUFBO0FBRzVCLFdBQU8sU0FBUyxrQkFBa0I7QUFDaEMsVUFBSSxlQUFlLEtBQUssT0FDcEIsV0FBVyxhQUFhLFVBQ3hCLGFBQVksYUFBYTtBQUM3QixVQUFJLFVBQVUsS0FBSyxNQUFNO0FBQ3pCLGFBQW9CLHdCQUFPLFFBQVEsY0FBYyxPQUFPO0FBQUEsUUFDdEQsS0FBSyxLQUFLO0FBQUEsUUFDVixXQUFXO0FBQUEsU0FDVixVQUFVLFdBQXdCLHdCQUFPLFFBQVEsY0FBYyxVQUFVLGFBQWEsV0FBVSxTQUFTLElBQUksS0FBSyxPQUFPO0FBQUEsUUFDMUgsVUFBVTtBQUFBLFFBQ1YsV0FBVztBQUFBLFFBQ1gsVUFBVSxDQUFDO0FBQUEsUUFDWCxlQUFlLFdBQVUsU0FBUyxJQUFJLFlBQVcsUUFBUTtBQUFBO0FBQUE7QUFJN0QsV0FBTztBQUFBLElBQ1AsUUFBTyxRQUFRO0FBRWpCLGVBQVksY0FBYyxZQUFZO0FBQ3RDLGVBQVksWUFTUjtBQUNKLE1BQUksWUFBVztBQUNmLHFCQUFrQjtBQUNsQixvQkFBaUIsU0FBUTtBQUFBOztBQ3JTekIsTUFBSSwwQkFBeUI5MUM7QUFFN0Isd0JBQXFCO0FBQ3JCLHFCQUFrQjtBQUVsQixNQUFJLGFBQVksd0JBQXVCd0I7QUFFdkMsTUFBSSxrQ0FBaUMsd0JBQXVCQztBQUU1RCxNQUFJLGtCQUFrQix3QkFBdUI0ekM7QUFFNUIsMEJBQXVCQztBQUV4QyxNQUFJLFVBQVMsd0JBQXVCQztBQUVwQyxNQUFJLFFBQVEsd0JBQXVCO0FBSW5DLE1BQUksZ0JBQWdCLHdCQUF1Qkk7QUFFM0MsTUFBSSx5QkFBeUIsd0JBQXVCQztBQUVwRCxNQUFJLGVBQWUsd0JBQXVCRTtBQUUxQyxNQUFJLFVBQVVDO0FBRWQsTUFBSSxjQUFjQztBQUVsQixNQUFJLGFBQVksQ0FBQyxjQUFjO0FBRS9CLDRCQUF5QixXQUFVO0FBQ2pDLFFBQUksc0JBQW1DLHlCQUFVLGtCQUFrQjtBQUNqRSxVQUFJLGdCQUFnQixTQUFTLHNCQUFxQjtBQUVsRCxzQ0FBK0I7QUFDN0IsWUFBSTtBQUVKLGlCQUFTLE9BQU8sVUFBVSxRQUFRLE9BQU8sSUFBSSxNQUFNLE9BQU8sT0FBTyxHQUFHLE9BQU8sTUFBTSxRQUFRO0FBQ3ZGLGVBQUssUUFBUSxVQUFVO0FBQUE7QUFHekIsZ0JBQVEsaUJBQWlCLEtBQUssTUFBTSxrQkFBa0IsQ0FBQyxNQUFNLE9BQU8sVUFBVTtBQUU5RSxjQUFNLG9CQUFvQixTQUFVLE9BQU87QUFDekMsZ0JBQU07QUFBQTtBQUdSLGNBQU0sb0JBQW9CLFNBQVUsT0FBTyxRQUFRLFdBQVc7QUFDNUQsZ0JBQU0sU0FBUztBQUFBLFlBQ2I7QUFBQSxZQUNBO0FBQUEsWUFDQTtBQUFBO0FBR0YsY0FBSSxjQUFjLE1BQU0sTUFBTTtBQUM5QixjQUFJO0FBQWEsd0JBQVk7QUFBQSxjQUMzQjtBQUFBLGNBQ0E7QUFBQSxjQUNBO0FBQUE7QUFBQTtBQUlKLGNBQU0seUJBQXlCLFdBQVk7QUFDekMsY0FBSSxNQUFNLE1BQU0sZ0JBQWdCO0FBQU8sa0JBQU0sU0FBUztBQUFBLGNBQ3BELGFBQWE7QUFBQTtBQUFBO0FBSWpCLGNBQU0sdUJBQXVCLFNBQVUsaUJBQWlCO0FBQ3RELGNBQUksY0FBYyxNQUFNLE9BQ3BCLFNBQVMsWUFBWSxRQUNyQixRQUFRLFlBQVk7QUFDeEIsY0FBSSxDQUFDO0FBQVE7QUFFYixnQkFBTSxTQUFTO0FBQUEsWUFDYixRQUFRO0FBQUEsWUFDUixPQUFPO0FBQUEsWUFDUCxhQUFhO0FBQUEsWUFDYixXQUFXO0FBQUE7QUFHYixjQUFJLG1CQUFtQjtBQUFNO0FBQzdCLDBCQUFnQixRQUFRO0FBQ3hCLGNBQUksY0FBYyxNQUFNLE9BQ3BCLGNBQWMsWUFBWSxhQUMxQixnQkFBZ0IsWUFBWTtBQUNoQyxjQUFJLFdBQVcsVUFBVTtBQUFhLHdCQUFZO0FBQ2xELGNBQUksV0FBVyxZQUFZO0FBQWUsMEJBQWM7QUFBQTtBQUcxRCxZQUFJLGFBQWEsTUFBTSxNQUFNO0FBQzdCLGNBQU0saUJBQWlCLFFBQVEsaUJBQWlCLFlBQVk7QUFBQSxVQUMxRCxjQUFjLGNBQWM7QUFBQSxVQUM1Qix1QkFBdUIsdUJBQXVCO0FBQUEsVUFDOUMsYUFBYSxhQUFhO0FBQUE7QUFFNUIsY0FBTSxRQUFRO0FBQUEsVUFDWixhQUFhO0FBQUE7QUFFZixlQUFPO0FBQUE7QUFHVCxVQUFJLFNBQVMscUJBQW9CO0FBRWpDLGFBQU8scUJBQXFCLDhCQUE4QjtBQUN4RCxlQUFPO0FBQUEsVUFDTCxXQUFXO0FBQUEsWUFDVCxTQUFTLEtBQUs7QUFBQSxZQUNkLE9BQU8sS0FBSztBQUFBLFlBQ1osZUFBZSxLQUFLO0FBQUEsWUFDcEIsbUJBQW1CLEtBQUssTUFBTTtBQUFBLFlBQzlCLHFCQUFxQixLQUFLLE1BQU07QUFBQSxZQUNoQyxtQkFBbUIsS0FBSyxNQUFNO0FBQUEsWUFDOUIsbUJBQW1CLEtBQUssTUFBTTtBQUFBLFlBQzlCLG1CQUFtQixLQUFLO0FBQUE7QUFBQTtBQUFBO0FBSzlCLGFBQU8sU0FBUyxrQkFBa0I7QUFDaEMsWUFBSSxlQUFlLEtBQUssT0FDcEIsYUFBYSxhQUFhLFlBQzFCLGVBQWUsYUFBYSxjQUM1QixZQUFZLGdDQUErQixTQUFTLGNBQWM7QUFDdEUsWUFBSSxjQUFjLEtBQUssTUFBTTtBQUM3QixlQUFPLE1BQU07QUFDYixlQUFPLE1BQU07QUFDYixjQUFNLGFBQWEsYUFBYSxpQkFBaUI7QUFDakQsWUFBSSxrQ0FBa0MsS0FBSyxNQUFNLHdCQUF3QixXQUFVLFNBQVMsSUFBSSxjQUFjO0FBQUEsVUFDNUcsWUFBWSxLQUFLLE1BQU0sY0FBYyxLQUFLO0FBQUEsYUFDdkM7QUFDTCxjQUFNLGdCQUFnQixNQUFNLFNBQVMsTUFBTSxXQUFXLGtCQUFrQixDQUFDLENBQUMsZUFBZTtBQUN6RixZQUFJLFVBQVUsS0FBSztBQUNuQixlQUFvQix3QkFBTyxRQUFRLGNBQWMsWUFBWSxXQUFXLFVBQVU7QUFBQSxVQUNoRixPQUFPO0FBQUEsV0FDTyx3QkFBTyxRQUFRLGNBQWMsZUFBYyxXQUFVLFNBQVMsSUFBSSxPQUFPO0FBQUEsVUFDdkYsY0FBYztBQUFBLFVBQ2QsWUFBWSxLQUFLO0FBQUE7QUFBQTtBQUlyQixhQUFPO0FBQUEsTUFDUCxRQUFPLFFBQVE7QUFFakIsd0JBQW9CLG1CQUFtQixXQUFVLFNBQVMsSUFBSSxVQUFTLGNBQWM7QUFBQSxNQUNuRixtQkFBbUI7QUFBQSxNQUNuQixtQkFBbUI7QUFBQSxNQUNuQixXQUFXO0FBQUE7QUFFYix3QkFBb0IsWUFXZjtBQUNMLFdBQU87QUFBQTtBQUdULG9CQUFpQixTQUFRO0FBQUE7O0FDckt6QixNQUFJLDBCQUF5QmgyQztBQUU3Qix3QkFBcUI7QUFDckIscUJBQWtCO0FBRWxCLE1BQUksbUJBQW1CLHdCQUF1QndCO0FBRTlDLE1BQUksWUFBVyxpQkFBaUI7QUFDaEMscUJBQWtCO0FBQ2xCLG9CQUFpQixTQUFRO0FBQUE7O2lDQ1J1QnkwQyxpQkFBTTtBQUFBLEVBaUJ4QyxZQUFZLEtBQWtCLFFBQWdCLGFBQXNCLE9BQWdCO1VBQ3BGO0FBakJIO0FBRUM7QUFDQTtBQUVBLHFDQUFxQjtBQUNyQjtBQUNBO0FBQ1M7QUFrRVQsK0NBQXNCLENBQUMsUUFBb0IsS0FBSztBQUVoRCwrQ0FBc0IsQ0FBQyxRQUFvQixLQUFLO0FBRWhELCtDQUFzQixDQUFDLFFBQXVCO1VBQzlDLElBQUksUUFBUSxTQUFTO1lBQ2pCO2FBQ0M7QUFBQTtBQUFBOztTQS9ESixjQUFjO1NBQ2QsUUFBUTtTQUVSLGVBQWUsSUFBSSxRQUNwQixDQUFDLFNBQVMsV0FBVztXQUNaLGlCQUFpQjtXQUNqQixnQkFBZ0I7QUFBQTtTQUl4QjtTQUNBO0FBQUE7QUFBQSxTQWxCSyxPQUFPLEtBQVUsUUFBZ0IsYUFBc0IsT0FBaUM7VUFDNUYsaUJBQWlCLElBQUksbUJBQW1CLEtBQUssUUFBUSxhQUFhO1dBQ2pFLGVBQWU7QUFBQTtBQUFBLEVBbUJsQixVQUFVO1NBQ1QsVUFBVTtTQUNWLFFBQVEsY0FBYyxLQUFLO1VBRTFCLHVCQUF1QyxLQUFLLFVBQVU7U0FDdkQsaUJBQWlCLEtBQUssaUJBQWlCLHNCQUFzQixLQUFLLGFBQWEsS0FBSztTQUNwRixnQkFBZ0I7QUFBQTtBQUFBLEVBR2YsaUJBQWlCLFdBQXdCLGFBQXNCLE9BQWdCO1VBQy9FLGdCQUFnQixJQUFJQyx5QkFBYztrQkFFMUIsUUFBUSxNQUFNLFFBQVE7a0JBQ3RCLGVBQWUsb0NBQWUsSUFDdkMsU0FBUyx3QkFBUyxJQUNsQixTQUFTLFlBQVMsS0FBSyxRQUFRLFFBQy9CLFFBQVEsaUJBQWlCLFdBQVcsS0FBSztXQUV2QztBQUFBO0FBQUEsRUFHSCxhQUFhLFdBQXdCLE1BQWMsVUFBb0M7VUFDckYsTUFBTSxJQUFJQywyQkFBZ0I7UUFDNUIsY0FBYyxNQUNiLFFBQVE7V0FFTjtBQUFBO0FBQUEsRUFHSCxnQkFBZ0Isc0JBQXNDO1VBQ3BELHFCQUFxQyxxQkFBcUI7U0FDM0QsYUFBYSxvQkFBb0IsTUFBTSxLQUFLLHFCQUM1QyxTQUFTLFNBQVMsTUFBTSxjQUFjO1NBQ3RDLGFBQWEsb0JBQW9CLFVBQVUsS0FBSzt1QkFFbEMsTUFBTSxVQUFVO3VCQUNoQixNQUFNLGdCQUFnQjt1QkFDdEIsTUFBTSxpQkFBaUI7dUJBQ3ZCLE1BQU0sWUFBWTtBQUFBO0FBQUEsRUFlakMsU0FBUztTQUNSLFlBQVk7U0FFWjtBQUFBO0FBQUEsRUFHRCxTQUFTO1NBQ1I7QUFBQTtBQUFBLEVBR0QsZUFBZTtRQUNoQixDQUFDLEtBQUs7V0FBZ0IsY0FBYztBQUFBO1dBQzdCLGVBQWUsS0FBSztBQUFBO0FBQUEsRUFHMUIsc0JBQXNCO1NBQ3JCLGVBQWUsUUFBUSxvQkFBb0IsV0FBVyxLQUFLO0FBQUE7QUFBQSxFQUdwRSxTQUFTO1VBQ0M7U0FFRCxlQUFlLFFBQVE7U0FDdkIsZUFBZSxRQUFRO0FBQUE7QUFBQSxFQUdoQyxVQUFVO1VBQ0E7U0FDRDtTQUNBO0FBQUE7QUFBQTtBQzlHYixNQUFNQyxXQUFvQyxDQUFDL2tDLFVBQXlCO1FBQzVEO0FBQUEsSUFBRThDO0FBQUFBLElBQVVraUM7QUFBQUEsTUFBU2hsQztTQUNwQmdsQzs7T0FBeUI7QUFBQTtBQUdsQyxNQUFNQyxPQUFPRjtBQ1piLElBQUksVUFBVXAyQztBQUNkLElBQUksYUFBYSxTQUFVLGdCQUFnQjtBQUN2QyxTQUFPLE9BQU8sbUJBQW1CO0FBQUE7QUFFckMsSUFBSSxjQUFjLFNBQVUsY0FBYztBQUN0QyxNQUFJLEtBQUssUUFBUSxTQUFTLGVBQWUsUUFBUSxHQUFHLElBQUksV0FBVyxHQUFHO0FBQ3RFLE1BQUksTUFBTSxRQUFRLE9BQU87QUFDekIsTUFBSSxXQUFXLFFBQVEsWUFBWSxTQUFVLGdCQUFnQjtBQUN6RCxRQUFJLFVBQVUsV0FBVyxrQkFBa0IsZUFBZSxJQUFJLFdBQVc7QUFDekUsYUFBUyxJQUFJO0FBQUEsS0FDZDtBQUNILFNBQU8sQ0FBQyxPQUFPLFVBQVU7QUFBQTtJQUU3QixPQUFpQjtBQ29CakIsTUFBTXUyQyxvQkFBb0JubEMsdUNBQVcsQ0FBQ0MsT0FBc0JnRCxRQUE2QztRQUNqRztBQUFBLElBQ0p1YjtBQUFBQSxJQUNBNG1CO0FBQUFBLElBQ0FDO0FBQUFBLElBQ0ExYjtBQUFBQSxJQUNBMmIsb0JBQW9CQztBQUFBQSxJQUNwQkMsZUFBZUM7QUFBQUEsTUFFYnhsQztRQUNFO0FBQUEsSUFDSnlsQyxZQUFZO0FBQUEsTUFBQzd2QjtBQUFBQTtBQUFBQSxNQUNYOHZCLHVDQUFXQztRQUNUQyxVQUFVQztRQUNWLENBQUNDLFdBQVdDLGNBQWNDLFlBQVk3ekMsS0FBUztRQUMvQyxDQUFDOHpDLGNBQWNDLGlCQUFpQkMsbUJBQW1CaDBDLEtBQVM7UUFFNURpMEMsc0JBQXNCQyxnQkFBZ0IzSjtRQUN0Q2h6QixZQUFZNDhCLE9BQWdCMTFDO3dDQUd4QixNQUFNOztVQUVSbXNDLFVBQVV3SjtRQUNaeEosWUFBWSxRQUFRQSxZQUFZLFNBQVM7dUJBQzFCQTtBQUFBQTtRQUVmaUosU0FBU2g4QixZQUFZNEwsUUFBUTttQkFDbEJBOzs7S0FHZCxDQUFDQTtrREFHRjVTLEtBQ0E7SUFDRXdqQyxXQUFXLE1BQU07VUFDWFIsU0FBU2g4QixZQUFZNEwsUUFBUTtxQkFDbEJBOzs7O01BS25CO1FBR0k2d0IsZUFBZSxNQUFNO3NCQUNsQjFGLE9BQU87UUFDVjJGLGFBQWEsVUFBVTt3QkFDbEJDLGFBQWEsTUFBTTtBQUFBLFFBQ3hCMTJCLE1BQU07QUFBQSxVQUNKMjJCLEtBQUs7QUFBQTtBQUFBO2FBR0ZoMkM7O1FBRUw4MUMsYUFBYSxVQUFVO3dCQUNsQkMsYUFBYSxNQUFNO0FBQUEsUUFDeEIxMkIsTUFBTTtBQUFBLFVBQ0oyMkIsS0FBSztBQUFBO0FBQUE7QUFBQTtXQUlKaDJDOztRQUdIaTJDLGNBQWMsQ0FBQ2w1QixVQUFlO1VBQzVCMkQsWUFBWTNELE1BQU1tNUI7V0FDakI7QUFBQSxNQUFDeDFCO0FBQUFBO0FBQUFBO1FBR0o2Vyx5QkFBeUIvMUIsd0NBQVksQ0FBQ3ViLFVBQWlCO21DQUM1QkE7QUFBQUEsS0FDOUI7UUFFR281QixvQkFBb0IzMEMsd0NBQVksT0FBT3UyQixhQUF1QjtVQUM1RDtBQUFBLE1BQUNxZTtBQUFBQSxRQUFPQyxrQkFBa0JDO1VBQzFCQyxXQUFXLE1BQU1DLG1CQUFtQkMsT0FBT0wsS0FBSyxlQUFlLElBQUk7OEJBRS9DRyxVQUFVeGU7QUFBQUEsS0FDbkM7UUFFRzRVLG1CQUFtQixDQUFDeFUsU0FBZTtvQkFDdkJBOzBCQUNNQTtBQUFBQTtRQUdsQnVlLGdCQUF3RDVaLFVBQVM7WUFHN0Q2WixJQUFJN1o7QUFBQUE7UUFXUjhaLGNBQW9EOVosVUFBUztZQUN6RDZaLElBQUk3WjtBQUFBQTs2QkFJWDtJQUFLLE1BQU1vWSxjQUFjaHpCO0FBQUFBLGtDQUN2QjtNQUNDO0FBQUEsTUFDQTtBQUFBLE1BQ0EsUUFBUWt6QixTQUFTaDhCO0FBQUFBLE1BQ2pCLFdBQVdtN0I7QUFBQUEsTUFDWCxhQUFhZ0IsZ0JBQWdCbjhCLFdBQVdvN0I7QUFBQUEsTUFDeEMsT0FBTztBQUFBLFFBQUNwd0IsUUFBUTtBQUFBO0FBQUEsTUFDaEIsaUJBQWlCNnhCO0FBQUFBLE1BQ2pCO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQU1BLGVBQWdCbDVCLFdBQVVBLE1BQU02RTtBQUFBQSxNQUNoQyxpQkFBa0I3RSxXQUFVQSxNQUFNNkU7QUFBQUEsTUFJbEMsUUFBUStxQjtBQUFBQSxNQUNSLG9CQUFvQnBWO0FBQUFBLE1BQ3BCLGNBQWM0ZTtBQUFBQTtBQUFBQTtBQUFBQTtBQU10QixpQ0FBdUM7O1NBQzlCVSxjQUFRdGhDLElBQUksQ0FBQyxjQUFjdWhDLGNBQTNCRCxZQUF3QztBQUFBO0FBR2pELCtCQUErQjFlLE1BQVk7VUFDakN3TixJQUFJO0FBQUEsSUFDVm1SLFdBQVczZTtBQUFBQTtBQUFBQTtNQzVLRix3QkFBd0IsT0FBTyxZQUFrQztRQUN0RSxFQUFDLFFBQU8sa0JBQWtCO1FBRTFCLFVBQVUsU0FBUyxRQUFRLE1BQU07UUFDakMsa0JBQWtCLFFBQVEsTUFBTSxHQUFHO1VBQ2pDLElBQUk7UUFDTixRQUFPbjRCLGtCQUFPLGlCQUFpQjtVQUM3QixJQUFJO1FBRU4sT0FBTyxNQUFNLGtCQUFrQixvQkFBb0I7TUFDckQsQ0FBQysyQyxvQkFBUyxVQUFVO1VBQ2hCLE9BQU8sSUFBSSxVQUFVO1NBQ3RCLFNBQVMsTUFBTSxFQUFDLFFBQVEsRUFBQyxNQUFNO0FBQUEsU0FDL0I7UUFDRCxPQUFPLElBQUksVUFBVTtRQUNyQixTQUFTLE1BQU07YUFDVixJQUFJLFVBQVUsUUFBUTtBQUFBO1NBRTFCLFNBQVMsTUFBTSxFQUFDLFFBQVEsRUFBQyxNQUFNO0FBQUE7OztBQ1R4QyxNQUFNQyxnQkFBK0IsTUFBTTtRQUNuQztBQUFBLElBQ0pDO0FBQUFBLElBQ0FwQyxZQUFZO0FBQUEsTUFBQzd2QjtBQUFBQTtBQUFBQSxNQUNYOHZCLHVDQUFXQztBQUNZcm1DLHFDQUFPdW9DO1FBQzVCLENBQUNDLFlBQVlDLGtCQUFrQjUxQyxxQ0FBUztRQUN4QzZ6QyxXQUFXMW1DLG1DQUF3Qjt3Q0FJL0IsTUFBTTtpQkFFWDBvQyxpQkFDQUMsS0FBSyxNQUFNO3FCQUNLO0FBQUEsT0FFaEJDLE1BQU0sTUFBTTtVQUNQajJDLGtCQUFPO0FBQUE7c0JBR1prMkMscUJBQ0FGLEtBQUssTUFBTTtxQkFDSztBQUFBLE9BRWhCQyxNQUFNLE1BQU07VUFDUGoyQyxrQkFBTztBQUFBO3NCQUVHaTFDO0FBQUFBLEtBQ2pCO1FBRUdILG9CQUFvQjMwQyx3Q0FBWSxPQUFPeWdCLFNBQWlCOFYsYUFBdUI7VUFDN0V5ZixXQUFXLE1BQU1DLGFBQWFDLFlBQVl6MUIsU0FBUzhWLFNBQVNqZTtpQkFDckQ2OUIsVUFBVUg7QUFBQUEsS0FHdEI7UUFFR0kseUJBQXlCcDJDLHdDQUFZLE9BQU91YixVQUFlO1FBQzNEQSxNQUFNODZCLFNBQVMzMUIsUUFBVztjQUNwQnkwQixJQUFJNTVCLE1BQU1uZDs0QkFDSW1kLE1BQU1uZDtBQUFBQTtBQUFBQSxLQUk3QjtRQUVHazRDLGlCQUFpQnBxQyxvQ0FDckI7SUFDRWlnQixZQUFZO0FBQUEsSUFDWjRtQixZQUFZO0FBQUEsSUFDWkMsYUFBYTtBQUFBLElBQ2IxYixPQUFPO0FBQUEsSUFDUDJiLG9CQUFvQm1EO0FBQUFBLElBQ3BCakQsZUFBZXdCO0FBQUFBLE1BRWpCOztJQUlLLFdBQVk7QUFBQSxrQ0FDZDtNQUFLLE1BQU1ueEIsT0FBT3hSLFNBQVM7QUFBQSxvQ0FDekI7UUFBa0IsS0FBSzRoQztBQUFBQSxTQUFjMEM7QUFBQUE7QUFBQUE7QUFBQUE7QUN2RTlDLE1BQU1DLGFBQWE7QUFBQSwyQkFDWGY7O0FDSVIsTUFBTSxlQUFlLENBQUMsV0FBbUI7U0FDaEMsQ0FBQyxhQUFxQjtlQUNoQixPQUFPLE9BQU8sS0FBSyxTQUFTO1VBQ2pDLFFBQVEsVUFBVTtlQUNiLE9BQU87QUFBQTtBQUFBO1dBR1gsT0FBTztBQUFBO0FBQUE7TUFLTCxtQkFBbUIsYUFBYTtBQ25CN0Msb0JBQW9CLGVBQWUsTUFBTTtRQUNqQyxDQUFDLE9BQU8sWUFBWXoxQyxxQ0FBUyxFQUFFLFdBQVcsY0FBYyxVQUFVLE9BQU8sV0FBVztTQUVuRixpQ0FDRixRQURFO0FBQUEsSUFFTCxZQUFZLE1BQU07ZUFDUCxpQ0FDSixRQURJO0FBQUEsUUFFUCxXQUFXO0FBQUEsUUFDWCxVQUFVO0FBQUEsUUFDVixXQUFXO0FBQUE7QUFBQTtBQUFBLElBR2YsV0FBVyxNQUFNO2VBQ04saUNBQ0osUUFESTtBQUFBLFFBRVAsV0FBVztBQUFBLFFBQ1gsVUFBVTtBQUFBLFFBQ1YsV0FBVztBQUFBO0FBQUE7QUFBQSxJQUdmLFVBQVUsTUFBTTtlQUNMLGlDQUNKLFFBREk7QUFBQSxRQUVQLFdBQVc7QUFBQSxRQUNYLFVBQVU7QUFBQSxRQUNWLFdBQVc7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQ3JCbkIsZ0JBQWdCO1FBQ1I7QUFBQSxJQUNKeTJDLGVBQWU7QUFBQSxNQUFDQztBQUFBQTtBQUFBQSxNQUNkbkQsdUNBQVdDO1FBRVRtRCxlQUFlQzt3Q0FHWCxNQUFNO2lCQUNEQztBQUFBQSxLQUNaOzs7TUFLVSxJQUFHO0FBQUE7UUFDSixXQUFVO0FBQUEsa0JBQW1CQyxpQkFBaUJKO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FDVjVELE1BQU1LLFdBQTRCLENBQUNscEMsVUFBaUI7UUFDNUM7QUFBQSxJQUFDOEM7QUFBQUEsSUFBVXFtQztBQUFBQSxJQUFPN3FCLFNBQVM4cUI7QUFBQUEsTUFBV3BwQztRQUN0QyxDQUFDcXBDLFVBQVVDLGVBQWVuM0MscUNBQVNnM0MsTUFBTWpDO3dDQUVyQyxNQUFNO1VBQ1JxQyxjQUFjSixNQUFNSyxVQUFXQyxRQUFPO2tCQUM5QkE7QUFBQUE7V0FHUCxNQUFNOzs7S0FHWjs2QkFFSyxRQUFRO0lBQVMsT0FBT0o7QUFBQUE7OztBQzNCakMsT0FBTTtNQUNELENBQUMsT0FBTyxVQUFVLFlBQVk7V0FDekIsVUFBVSxhQUFhLFNBQVUsS0FBVSxRQUFhO1VBRXpELE9BQU8sVUFBVSxTQUFTLEtBQUssS0FBSyxrQkFBa0IsbUJBQW1CO2VBQ3BFLEtBQUssUUFBUSxLQUFLO0FBQUE7YUFJcEIsS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLE1BQU07QUFBQTtBQUFBO0FBQUE7QUNDaEQscUJBQXFCOzZCQUVoQjtJQUFTLE9BQU9LO0FBQUFBLElBQVUsU0FBUy9EO0FBQUFBLGtDQUNqQzs7O0FBS1AsZUFBZTt3Q0FDSCxNQUFNO1VBQ1JnRSxxQkFBcUIsTUFBTTt5QkFDWkMsZ0JBQWdCdnpCLFNBQVM4SCxLQUFLMHJCLGVBQWU7QUFBQTs7V0FLM0RycUMsaUJBQWlCLFVBQVVtcUM7V0FFM0IsTUFBTTthQUNKcGYsb0JBQW9CLFVBQVVvZjtBQUFBQTtBQUFBQSxLQUV0Qzs7a0NBSUU7OzswQkN4QjBCRyxvQkFBUztBQUFBLEVBSXhDLFlBQVksTUFBcUIsUUFBMkI7VUFDcEQ7QUFKUjtBQUNRO1NBSUQsU0FBUztBQUFBO0FBQUEsRUFHaEIsaUJBQXlCO1dBRWhCO0FBQUE7QUFBQSxFQUdULFVBQWtCO1dBQ1Q7QUFBQTtBQUFBLEVBR1QsY0FBc0I7V0FDYjtBQUFBO0FBQUEsRUFHRCx5QkFBK0I7aUJBQ3hCO2lCQUNBO0FBQUE7QUFBQSxRQUdELGNBQWMsTUFBNEI7UUFDbERoNEMsa0JBQWdCLE1BQU0sUUFBUTtZQUMxQixrQkFBa0I7bUJBQ1g7bUJBQ0E7QUFBQTtBQUFBO0FBQUEsUUFJSCxlQUFlLE1BQTRCO1VBQ2pELFFBQU9BLGtCQUFnQixNQUFNO1FBRS9CLFNBQVEsS0FBSyxzQkFBc0I7bUJBRXhCO0FBQUE7QUFBQTtBQUFBLEVBSVQsY0FBYyxNQUFtQjtRQUNuQyxLQUFLLElBQUksVUFBVSxlQUFlLEtBQUssc0JBQXNCO1VBQzNEQSxrQkFBZ0IsTUFBTSxRQUFROzBCQUNkO3FCQUVMO0FBQUE7QUFBQTtBQUFBO0FBQUEsUUFLYixTQUF3QjtTQUN2Qix5QkFBeUIsS0FBSyx1QkFBdUIsS0FBSztTQUMxRCxnQkFBZ0IsS0FBSyxjQUFjLEtBQUs7U0FDeEMsZ0JBQWdCLEtBQUssY0FBYyxLQUFLO1NBQ3hDLGlCQUFpQixLQUFLLGVBQWUsS0FBSztTQUUxQyxjQUVHLEtBQUssSUFBSSxVQUFXLEdBQUcsb0NBQW9DLEtBQUs7U0FHbkUsY0FBYyxLQUFLLElBQUksTUFBTSxHQUFHLFVBQVUsS0FBSztTQUMvQyxjQUFjLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxLQUFLO1NBQy9DLGNBQWMsS0FBSyxJQUFJLE1BQU0sR0FBRyxVQUFVLEtBQUs7c0JBRWxDLE9BQU8sS0FBSztrQkFFaEIsS0FBSyxPQUFPLFNBQVM7Z0JBQ3ZCLEtBQUssT0FBTyxTQUFTOzhCQUNQLEtBQUssT0FBTyxTQUFTOzBCQUN6QixLQUFLLE9BQU8sU0FBUztTQUV0Qyx1QkFBdUIsTUFBTSxjQUFjaTRDO2FBRXZDLE9BQU8sS0FBSyxzQkFBdUIsS0FBYTtBQUFBO0FBQUEsUUFJckQsVUFBVTtBQUFBO0FBQUE7SUFLUDtJQUNBO0lBQ0E7SUFDQTtBQ25HWCxNQUFNLFFBQWdDO0FBQUEsRUFDcEMsa0JBQWtCO0FBQUE7b0JBRWU7U0FDMUIsS0FBSyxPQUFPLFFBQVEsQ0FBQyxRQUFRO3VCQUMxQixLQUFLLE1BQU07QUFBQTtBQUFBO0FDTHZCLFNBQWU7QUNBZixTQUFlO0FDQWYsU0FBZTtBQ0FmLFNBQWU7QUNBZixTQUFlO0FBQUEsRUFFYixTQUFTO0FBQUEsRUFDVCxrQ0FBa0M7QUFBQSxFQUNsQyxxQkFBcUI7QUFBQSxFQUNyQixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixtQkFBbUI7QUFBQSxFQUNuQixxQkFBcUI7QUFBQSxFQUNyQix3QkFBd0I7QUFBQSxFQUN4Qiw0REFDRTtBQUFBLEVBQ0YsMEdBQ0U7QUFBQSxFQUNGLHdCQUF3QjtBQUFBLEVBQ3hCLDBJQUNFO0FBQUEsRUFDRix3QkFBd0I7QUFBQSxFQUN4QiwySEFDRTtBQUFBLEVBQ0YsNkJBQTZCO0FBQUEsRUFDN0IsaUJBQWlCO0FBQUEsRUFDakIsUUFBUTtBQUFBLEVBQ1IsZ0ZBQ0U7QUFBQTtBQ3hCSixXQUFlO0FDQWYsU0FBZTtBQ0FmLFNBQWU7QUNBZixTQUFlO0FDQWYsU0FBZTtBQ0FmLFNBQWU7QUNBZixTQUFlO0FDQWYsU0FBZTtBQ0FmLFNBQWU7QUNBZixTQUFlO0FDQWYsU0FBZTtBQ0FmLFNBQWU7QUNDZixXQUFlO0FDRGYsU0FBZTtBQ0FmLFNBQWU7QUNBZixTQUFlO0FDRmYsV0FBZTtBQUFBLEVBRWIsU0FBUztBQUFBLEVBQ1Qsa0NBQWtDO0FBQUEsRUFDbEMscUJBQXFCO0FBQUEsRUFDckIsUUFBUTtBQUFBLEVBQ1IsUUFBUTtBQUFBLEVBQ1IsbUJBQW1CO0FBQUEsRUFDbkIscUJBQXFCO0FBQUEsRUFDckIsNERBQ0U7QUFBQSxFQUNGLHdCQUF3QjtBQUFBLEVBQ3hCLDBHQUNFO0FBQUEsRUFDRix3QkFBd0I7QUFBQSxFQUN4QiwwSUFDRTtBQUFBLEVBQ0Ysd0JBQXdCO0FBQUEsRUFDeEIsMkhBQ0U7QUFBQSxFQUNGLDZCQUE2QjtBQUFBLEVBQzdCLGlCQUFpQjtBQUFBLEVBQ2pCLFFBQVE7QUFBQSxFQUNSLGdGQUNFO0FBQUE7QUN0QkosV0FBZTtBQzBCZixNQUFNLFlBQStDO0FBQUEsRUFDbkQ7QUFBQSxFQUNBLElBQUk7QUFBQSxFQUNKO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBLFNBQVM7QUFBQSxFQUNUO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0EsSUFBSTtBQUFBLEVBQ0o7QUFBQSxFQUNBO0FBQUEsRUFDQSxTQUFTO0FBQUEsRUFDVDtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQSxTQUFTO0FBQUEsRUFDVCxTQUFTO0FBQUE7QUFHWCxNQUFNLFNBQVMsVUFBVW41QyxrQkFBTztXQUVkLEtBQThCO1NBQ3RDLFVBQVUsT0FBTyxRQUFTLEdBQUc7QUFBQTtNQzlDMUIsbUJBQXdDO0FBQUEsRUFDbkQsV0FBVztBQUFBLEVBQ1gsYUFBYTtBQUFBLEVBQ2IscUJBQXFCO0FBQUEsRUFDckIseUJBQXlCO0FBQUE7b0NBR2dCbzVDLDRCQUFpQjtBQUFBLEVBSzFELFlBQVksS0FBVSxRQUFxQjtVQUNuQyxLQUFLO0FBTGI7QUFFUSw4Q0FBNkI7U0FJOUIsU0FBUztBQUFBO0FBQUEsRUFHaEIsc0JBQXNCO2lCQUNQLEtBQUs7VUFDWixTQUFTLEtBQUs7U0FDZixxQkFBcUIsT0FBTyxXQUFXLE1BQU07YUFDekM7QUFBQSxPQUNOO0FBQUE7QUFBQSxRQUlDLE9BQU87QUFBQTtBQUFBLFFBRVAsVUFBVTtVQUNSLEtBQUssT0FBTztVQUVaLEVBQUMsZ0JBQWU7U0FDakIsWUFBWTtTQUVaLFlBQVksU0FBUyxNQUFNLEVBQUMsTUFBTSxFQUFFO1FBRXJDQyxtQkFBUSxhQUNULFFBQVEsRUFBRSxzQkFDVixRQUFRLEVBQUUsNkRBQ1YsWUFBWSxDQUFDLGFBQ1osU0FDRyxVQUFVLFVBQVUsRUFBRSxXQUN0QixVQUFVLFVBQVUsRUFBRSxXQUN0QixTQUFTLEtBQUssT0FBTyxTQUFTLFdBQzlCLFNBQVMsT0FBTyxVQUFVO1dBQ3BCLE9BQU8sU0FBUyxZQUFZO1dBQzVCO0FBQUE7UUFJVEEsbUJBQVEsYUFDVCxRQUFRLEVBQUUseUJBQ1YsUUFDQyxFQUFFLDJHQUVILFFBQVEsQ0FBQyxTQUNSLEtBQ0csZUFBZSxhQUNmLFNBQVMsS0FBSyxPQUFPLFNBQVMsYUFDOUIsU0FBUyxPQUFPLFVBQVU7V0FDcEIsT0FBTyxTQUFTLGNBQWM7V0FDOUI7QUFBQTtRQUlUQSxtQkFBUSxhQUNULFFBQVEsRUFBRSx5QkFDVixRQUNDLEVBQ0UsMklBR0gsUUFBUSxDQUFDLFNBQ1IsS0FDRyxlQUFlLGlCQUFpQixxQkFDaEMsU0FBUyxLQUFLLE9BQU8sU0FBUyxxQkFDOUIsU0FBUyxPQUFPLFVBQVU7V0FDcEIsT0FBTyxTQUFTLHNCQUFzQjtXQUN0QztBQUFBO1NBSVIsWUFBWSxTQUFTLE1BQU0sRUFBQyxNQUFNLEVBQUU7UUFFckNBLG1CQUFRLGFBQ1QsUUFBUSxFQUFFLDhCQUNWLFFBQ0MsRUFDRSw0SEFHSCxRQUFRLENBQUMsU0FDUixLQUNHLGVBQWUsaUJBQWlCLHlCQUNoQyxTQUFTLEtBQUssT0FBTyxTQUFTLHlCQUM5QixTQUFTLE9BQU8sVUFBVTtXQUNwQixPQUFPLFNBQVMsMEJBQTBCO1dBQzFDO0FBQUE7U0FJUixZQUFZLFNBQVMsTUFBTSxFQUFDLE1BQU0sRUFBRTtRQUVyQ0EsbUJBQVEsYUFDVCxRQUFRLEVBQUUsV0FDVixRQUFRLEVBQUUsaUZBRVYsVUFBVSxDQUFDLE9BQU87U0FDZCxTQUFTLFlBQVk7QUFBQTtBQUFBO0FBQUE7Z0NDL0dlQyxrQkFBTztBQUFBOztBQUM3QztBQUFBO0FBQUEsUUFFRCxTQUF3QjtVQUN0QixLQUFLO1NBQ04sY0FBYyxJQUFJLHNCQUFzQixLQUFLLEtBQUs7U0FFbEQsYUFBYSxvQkFBb0IsQ0FBQyxTQUFTLElBQUksWUFBWSxNQUFNOztTQUdqRSxjQUFjLG9CQUFvQixnQkFBZ0IsTUFBTTtVQUN2RGo0QyxrQkFBTyxFQUFFO1dBQ1I7QUFBQTtTQUdGLFdBQVc7QUFBQSxNQUNkLElBQUk7QUFBQSxNQUNKLE1BQU0sRUFBRTtBQUFBLE1BQ1IsVUFBVSxNQUFNLEtBQUs7QUFBQSxNQUNyQixTQUFTO0FBQUE7VUFHTCxLQUFLO0FBQUE7QUFBQSxRQVdBLGVBQWU7U0FDckIsV0FBVyxPQUFPLE9BQU8sSUFBSSxrQkFBa0IsTUFBTSxLQUFLO0FBQUE7QUFBQSxRQUczRCxlQUFlO1VBQ2IsS0FBSyxTQUFTLEtBQUs7QUFBQTtBQUFBLEVBRzNCLFdBQVc7U0FDSixJQUFJLFVBQVUsbUJBQW1CO1FBQ2xDQSxrQkFBTztBQUFBO0FBQUEsUUFhUCxlQUFlO1VBSWIsWUFBWSxLQUFLLElBQUk7Y0FDakIsbUJBQW1CO1VBQ3ZCLE9BQU8sVUFBVSxRQUNyQixDQUFDMDFDLG9CQUFTLFlBQVksVUFBVSxjQUFjLFVBQVUsV0FBVyxnQkFBZ0J3QztVQUUvRSxLQUFLLGFBQWEsRUFBQyxNQUFNO2NBQ3JCLFdBQVc7QUFBQTtBQUFBOzsifQ==
